
BRIC4_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00026fec  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00026fec  00026fec  00036fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000d58  20000000  00026ff4  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .lpram        00000000  30000000  30000000  00040d58  2**0
                  CONTENTS
  4 .bss          00004900  20000d58  00027d4c  00040d58  2**2
                  ALLOC
  5 .stack        00002000  20005658  0002c64c  00040d58  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  00040d58  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00040d80  2**0
                  CONTENTS, READONLY
  8 .debug_info   000e2be7  00000000  00000000  00040dd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000e5dd  00000000  00000000  001239c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001890  00000000  00000000  00131f9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00007890  00000000  00000000  0013382d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003582a  00000000  00000000  0013b0bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0003f82b  00000000  00000000  001708e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000ac51f  00000000  00000000  001b0112  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00005da4  00000000  00000000  0025c634  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000319ff  00000000  00000000  002623d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
       0:	58 76 00 20 49 3c 00 00 45 3c 00 00 45 3c 00 00     Xv. I<..E<..E<..
	...
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
      2c:	45 3c 00 00 00 00 00 00 00 00 00 00 45 3c 00 00     E<..........E<..
	if (rtc_module->MODE0.SYNCBUSY.reg) {
      3c:	45 3c 00 00 45 3c 00 00 29 3c 00 00 25 f3 00 00     E<..E<..)<..%...
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
      4c:	b9 f1 00 00 45 3c 00 00 45 3c 00 00 71 31 00 00     ....E<..E<..q1..

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
      5c:	45 3c 00 00 c1 fe 00 00 d1 fe 00 00 e1 fe 00 00     E<..............
				    | config->prescaler;
      6c:	f1 fe 00 00 01 ff 00 00 11 ff 00 00 45 3c 00 00     ............E<..
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
}
      7c:	45 3c 00 00 45 3c 00 00 99 01 01 00 f9 01 01 00     E<..E<..........
	...
	while (rtc_count_is_syncing(module)) {
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
      94:	59 02 01 00 45 3c 00 00 45 3c 00 00 45 3c 00 00     Y...E<..E<..E<..
	if (rtc_module->MODE0.SYNCBUSY.reg) {
      a4:	45 3c 00 00 45 3c 00 00 45 3c 00 00 00 00 00 00     E<..E<..E<......

000000b4 <__do_global_dtors_aux>:
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
			rtc_module->MODE1.CTRLA.reg |= RTC_MODE1_CTRLA_MODE(1);
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
			if (config->clear_on_match) {
      c0:	2b00      	cmp	r3, #0
				return STATUS_ERR_INVALID_ARG;
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
			if (config->clear_on_match) {
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
			if (comp_value > 0xffff) {
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
				rtc_count_set_compare(module, config->compare_values[i],
      d0:	20000d58 	.word	0x20000d58
	if (rtc_module->MODE0.SYNCBUSY.reg) {
      d4:	00000000 	.word	0x00000000
	switch (module->mode) {
      d8:	00026ff4 	.word	0x00026ff4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
	if (rtc_module->MODE0.SYNCBUSY.reg) {
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
	return STATUS_OK;
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
				rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MATCHCLR;
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000d5c 	.word	0x20000d5c
			if (comp_value > 0xffff) {
     108:	00026ff4 	.word	0x00026ff4
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
     10c:	00026ff4 	.word	0x00026ff4
     110:	00000000 	.word	0x00000000

00000114 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
     114:	4770      	bx	lr
     116:	46c0      	nop			; (mov r8, r8)

00000118 <udi_msc_getsetting>:
}

uint8_t udi_msc_getsetting(void)
{
	return 0;	// MSC don't have multiple alternate setting
}
     118:	2000      	movs	r0, #0
     11a:	4770      	bx	lr

0000011c <udi_msc_trans_ack>:
		udd_ep_id_t ep)
{
	UNUSED(ep);
	UNUSED(n);
	// Update variable to signal the end of transfer
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
     11c:	1e43      	subs	r3, r0, #1
     11e:	4198      	sbcs	r0, r3
	udi_msc_b_ack_trans = true;
     120:	2201      	movs	r2, #1
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
     122:	4b03      	ldr	r3, [pc, #12]	; (130 <udi_msc_trans_ack+0x14>)
     124:	b2c0      	uxtb	r0, r0
     126:	7018      	strb	r0, [r3, #0]
	udi_msc_b_ack_trans = true;
     128:	4b02      	ldr	r3, [pc, #8]	; (134 <udi_msc_trans_ack+0x18>)
     12a:	701a      	strb	r2, [r3, #0]
}
     12c:	4770      	bx	lr
     12e:	46c0      	nop			; (mov r8, r8)
     130:	20001054 	.word	0x20001054
     134:	20000014 	.word	0x20000014

00000138 <udi_msc_disable>:
	udi_msc_b_trans_req = false;
     138:	2200      	movs	r2, #0
     13a:	4b05      	ldr	r3, [pc, #20]	; (150 <udi_msc_disable+0x18>)
{
     13c:	b510      	push	{r4, lr}
	udi_msc_b_trans_req = false;
     13e:	701a      	strb	r2, [r3, #0]
	udi_msc_b_ack_trans = true;
     140:	2301      	movs	r3, #1
     142:	4a04      	ldr	r2, [pc, #16]	; (154 <udi_msc_disable+0x1c>)
     144:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = true;
     146:	4a04      	ldr	r2, [pc, #16]	; (158 <udi_msc_disable+0x20>)
     148:	7013      	strb	r3, [r2, #0]
	UDI_MSC_DISABLE_EXT();
     14a:	4b04      	ldr	r3, [pc, #16]	; (15c <udi_msc_disable+0x24>)
     14c:	4798      	blx	r3
}
     14e:	bd10      	pop	{r4, pc}
     150:	20000d8e 	.word	0x20000d8e
     154:	20000014 	.word	0x20000014
     158:	20000015 	.word	0x20000015
     15c:	0001a2bd 	.word	0x0001a2bd

00000160 <udi_msc_cbw_wait>:
{
     160:	b510      	push	{r4, lr}
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
     162:	4b08      	ldr	r3, [pc, #32]	; (184 <udi_msc_cbw_wait+0x24>)
{
     164:	b082      	sub	sp, #8
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
     166:	9300      	str	r3, [sp, #0]
     168:	4a07      	ldr	r2, [pc, #28]	; (188 <udi_msc_cbw_wait+0x28>)
     16a:	231f      	movs	r3, #31
     16c:	2101      	movs	r1, #1
     16e:	2002      	movs	r0, #2
     170:	4c06      	ldr	r4, [pc, #24]	; (18c <udi_msc_cbw_wait+0x2c>)
     172:	47a0      	blx	r4
     174:	2800      	cmp	r0, #0
     176:	d103      	bne.n	180 <udi_msc_cbw_wait+0x20>
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
     178:	4905      	ldr	r1, [pc, #20]	; (190 <udi_msc_cbw_wait+0x30>)
     17a:	3002      	adds	r0, #2
     17c:	4b05      	ldr	r3, [pc, #20]	; (194 <udi_msc_cbw_wait+0x34>)
     17e:	4798      	blx	r3
}
     180:	b002      	add	sp, #8
     182:	bd10      	pop	{r4, pc}
     184:	00000725 	.word	0x00000725
     188:	20000d98 	.word	0x20000d98
     18c:	00002609 	.word	0x00002609
     190:	00000161 	.word	0x00000161
     194:	0000257d 	.word	0x0000257d

00000198 <udi_msc_csw_send>:
{
     198:	b510      	push	{r4, lr}
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
     19a:	4b08      	ldr	r3, [pc, #32]	; (1bc <udi_msc_csw_send+0x24>)
{
     19c:	b082      	sub	sp, #8
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
     19e:	9300      	str	r3, [sp, #0]
     1a0:	4a07      	ldr	r2, [pc, #28]	; (1c0 <udi_msc_csw_send+0x28>)
     1a2:	230d      	movs	r3, #13
     1a4:	2100      	movs	r1, #0
     1a6:	2081      	movs	r0, #129	; 0x81
     1a8:	4c06      	ldr	r4, [pc, #24]	; (1c4 <udi_msc_csw_send+0x2c>)
     1aa:	47a0      	blx	r4
     1ac:	2800      	cmp	r0, #0
     1ae:	d103      	bne.n	1b8 <udi_msc_csw_send+0x20>
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
     1b0:	4905      	ldr	r1, [pc, #20]	; (1c8 <udi_msc_csw_send+0x30>)
     1b2:	3081      	adds	r0, #129	; 0x81
     1b4:	4b05      	ldr	r3, [pc, #20]	; (1cc <udi_msc_csw_send+0x34>)
     1b6:	4798      	blx	r3
}
     1b8:	b002      	add	sp, #8
     1ba:	bd10      	pop	{r4, pc}
     1bc:	000002c5 	.word	0x000002c5
     1c0:	20000018 	.word	0x20000018
     1c4:	00002609 	.word	0x00002609
     1c8:	00000199 	.word	0x00000199
     1cc:	0000257d 	.word	0x0000257d

000001d0 <udi_msc_sense_fail.constprop.10>:
static void udi_msc_sense_fail(uint8_t sense_key, uint16_t add_sense,
     1d0:	b570      	push	{r4, r5, r6, lr}
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     1d2:	4c0a      	ldr	r4, [pc, #40]	; (1fc <udi_msc_sense_fail.constprop.10+0x2c>)
static void udi_msc_sense_fail(uint8_t sense_key, uint16_t add_sense,
     1d4:	000d      	movs	r5, r1
     1d6:	0006      	movs	r6, r0
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     1d8:	2212      	movs	r2, #18
     1da:	2100      	movs	r1, #0
     1dc:	0020      	movs	r0, r4
     1de:	4b08      	ldr	r3, [pc, #32]	; (200 <udi_msc_sense_fail.constprop.10+0x30>)
     1e0:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     1e2:	23f0      	movs	r3, #240	; 0xf0
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     1e4:	2201      	movs	r2, #1
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     1e6:	7023      	strb	r3, [r4, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     1e8:	3be6      	subs	r3, #230	; 0xe6
     1ea:	71e3      	strb	r3, [r4, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     1ec:	4b05      	ldr	r3, [pc, #20]	; (204 <udi_msc_sense_fail.constprop.10+0x34>)
	udi_msc_sense.sense_flag_key = sense_key;
     1ee:	70a6      	strb	r6, [r4, #2]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     1f0:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
     1f2:	0a2b      	lsrs	r3, r5, #8
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
     1f4:	7365      	strb	r5, [r4, #13]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
     1f6:	7323      	strb	r3, [r4, #12]
}
     1f8:	bd70      	pop	{r4, r5, r6, pc}
     1fa:	46c0      	nop			; (mov r8, r8)
     1fc:	20000dc0 	.word	0x20000dc0
     200:	0001fdfd 	.word	0x0001fdfd
     204:	20000018 	.word	0x20000018

00000208 <udi_msc_cbw_invalid>:
{
     208:	b510      	push	{r4, lr}
	if (!udi_msc_b_cbw_invalid)
     20a:	4b06      	ldr	r3, [pc, #24]	; (224 <udi_msc_cbw_invalid+0x1c>)
     20c:	781b      	ldrb	r3, [r3, #0]
     20e:	2b00      	cmp	r3, #0
     210:	d006      	beq.n	220 <udi_msc_cbw_invalid+0x18>
	udd_ep_set_halt(UDI_MSC_EP_OUT);
     212:	4b05      	ldr	r3, [pc, #20]	; (228 <udi_msc_cbw_invalid+0x20>)
     214:	2002      	movs	r0, #2
     216:	4798      	blx	r3
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
     218:	4904      	ldr	r1, [pc, #16]	; (22c <udi_msc_cbw_invalid+0x24>)
     21a:	2002      	movs	r0, #2
     21c:	4b04      	ldr	r3, [pc, #16]	; (230 <udi_msc_cbw_invalid+0x28>)
     21e:	4798      	blx	r3
}
     220:	bd10      	pop	{r4, pc}
     222:	46c0      	nop			; (mov r8, r8)
     224:	20000d8c 	.word	0x20000d8c
     228:	000024b1 	.word	0x000024b1
     22c:	00000209 	.word	0x00000209
     230:	0000257d 	.word	0x0000257d

00000234 <udi_msc_csw_invalid>:
{
     234:	b510      	push	{r4, lr}
	if (!udi_msc_b_cbw_invalid)
     236:	4b06      	ldr	r3, [pc, #24]	; (250 <udi_msc_csw_invalid+0x1c>)
     238:	781b      	ldrb	r3, [r3, #0]
     23a:	2b00      	cmp	r3, #0
     23c:	d006      	beq.n	24c <udi_msc_csw_invalid+0x18>
	udd_ep_set_halt(UDI_MSC_EP_IN);
     23e:	4b05      	ldr	r3, [pc, #20]	; (254 <udi_msc_csw_invalid+0x20>)
     240:	2081      	movs	r0, #129	; 0x81
     242:	4798      	blx	r3
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
     244:	4904      	ldr	r1, [pc, #16]	; (258 <udi_msc_csw_invalid+0x24>)
     246:	2081      	movs	r0, #129	; 0x81
     248:	4b04      	ldr	r3, [pc, #16]	; (25c <udi_msc_csw_invalid+0x28>)
     24a:	4798      	blx	r3
}
     24c:	bd10      	pop	{r4, pc}
     24e:	46c0      	nop			; (mov r8, r8)
     250:	20000d8c 	.word	0x20000d8c
     254:	000024b1 	.word	0x000024b1
     258:	00000235 	.word	0x00000235
     25c:	0000257d 	.word	0x0000257d

00000260 <udi_msc_csw_process>:
{
     260:	b530      	push	{r4, r5, lr}
	if (0 != udi_msc_csw.dCSWDataResidue) {
     262:	4c11      	ldr	r4, [pc, #68]	; (2a8 <udi_msc_csw_process+0x48>)
{
     264:	b083      	sub	sp, #12
	if (0 != udi_msc_csw.dCSWDataResidue) {
     266:	68a3      	ldr	r3, [r4, #8]
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
     268:	4d10      	ldr	r5, [pc, #64]	; (2ac <udi_msc_csw_process+0x4c>)
	if (0 != udi_msc_csw.dCSWDataResidue) {
     26a:	2b00      	cmp	r3, #0
     26c:	d005      	beq.n	27a <udi_msc_csw_process+0x1a>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
     26e:	7b2b      	ldrb	r3, [r5, #12]
     270:	2b7f      	cmp	r3, #127	; 0x7f
     272:	d814      	bhi.n	29e <udi_msc_csw_process+0x3e>
			udd_ep_set_halt(UDI_MSC_EP_OUT);
     274:	2002      	movs	r0, #2
     276:	4b0e      	ldr	r3, [pc, #56]	; (2b0 <udi_msc_csw_process+0x50>)
     278:	4798      	blx	r3
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
     27a:	686b      	ldr	r3, [r5, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
     27c:	0022      	movs	r2, r4
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
     27e:	6063      	str	r3, [r4, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
     280:	4b0c      	ldr	r3, [pc, #48]	; (2b4 <udi_msc_csw_process+0x54>)
     282:	2100      	movs	r1, #0
     284:	9300      	str	r3, [sp, #0]
     286:	2081      	movs	r0, #129	; 0x81
     288:	230d      	movs	r3, #13
     28a:	4c0b      	ldr	r4, [pc, #44]	; (2b8 <udi_msc_csw_process+0x58>)
     28c:	47a0      	blx	r4
     28e:	2800      	cmp	r0, #0
     290:	d103      	bne.n	29a <udi_msc_csw_process+0x3a>
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
     292:	490a      	ldr	r1, [pc, #40]	; (2bc <udi_msc_csw_process+0x5c>)
     294:	3081      	adds	r0, #129	; 0x81
     296:	4b0a      	ldr	r3, [pc, #40]	; (2c0 <udi_msc_csw_process+0x60>)
     298:	4798      	blx	r3
}
     29a:	b003      	add	sp, #12
     29c:	bd30      	pop	{r4, r5, pc}
			udd_ep_set_halt(UDI_MSC_EP_IN);
     29e:	4b04      	ldr	r3, [pc, #16]	; (2b0 <udi_msc_csw_process+0x50>)
     2a0:	2081      	movs	r0, #129	; 0x81
     2a2:	4798      	blx	r3
     2a4:	e7e9      	b.n	27a <udi_msc_csw_process+0x1a>
     2a6:	46c0      	nop			; (mov r8, r8)
     2a8:	20000018 	.word	0x20000018
     2ac:	20000d98 	.word	0x20000d98
     2b0:	000024b1 	.word	0x000024b1
     2b4:	000002c5 	.word	0x000002c5
     2b8:	00002609 	.word	0x00002609
     2bc:	00000199 	.word	0x00000199
     2c0:	0000257d 	.word	0x0000257d

000002c4 <udi_msc_csw_sent>:
{
     2c4:	b510      	push	{r4, lr}
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
     2c6:	4b08      	ldr	r3, [pc, #32]	; (2e8 <udi_msc_csw_sent+0x24>)
{
     2c8:	b082      	sub	sp, #8
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
     2ca:	9300      	str	r3, [sp, #0]
     2cc:	4a07      	ldr	r2, [pc, #28]	; (2ec <udi_msc_csw_sent+0x28>)
     2ce:	231f      	movs	r3, #31
     2d0:	2101      	movs	r1, #1
     2d2:	2002      	movs	r0, #2
     2d4:	4c06      	ldr	r4, [pc, #24]	; (2f0 <udi_msc_csw_sent+0x2c>)
     2d6:	47a0      	blx	r4
     2d8:	2800      	cmp	r0, #0
     2da:	d103      	bne.n	2e4 <udi_msc_csw_sent+0x20>
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
     2dc:	4905      	ldr	r1, [pc, #20]	; (2f4 <udi_msc_csw_sent+0x30>)
     2de:	3002      	adds	r0, #2
     2e0:	4b05      	ldr	r3, [pc, #20]	; (2f8 <udi_msc_csw_sent+0x34>)
     2e2:	4798      	blx	r3
}
     2e4:	b002      	add	sp, #8
     2e6:	bd10      	pop	{r4, pc}
     2e8:	00000725 	.word	0x00000725
     2ec:	20000d98 	.word	0x20000d98
     2f0:	00002609 	.word	0x00002609
     2f4:	00000161 	.word	0x00000161
     2f8:	0000257d 	.word	0x0000257d

000002fc <udi_msc_enable>:
	udi_msc_b_trans_req = false;
     2fc:	2300      	movs	r3, #0
     2fe:	4a1a      	ldr	r2, [pc, #104]	; (368 <udi_msc_enable+0x6c>)
{
     300:	b5f0      	push	{r4, r5, r6, r7, lr}
	udi_msc_b_trans_req = false;
     302:	7013      	strb	r3, [r2, #0]
	udi_msc_b_cbw_invalid = false;
     304:	4a19      	ldr	r2, [pc, #100]	; (36c <udi_msc_enable+0x70>)
{
     306:	b083      	sub	sp, #12
	udi_msc_b_cbw_invalid = false;
     308:	7013      	strb	r3, [r2, #0]
	udi_msc_b_ack_trans = true;
     30a:	4a19      	ldr	r2, [pc, #100]	; (370 <udi_msc_enable+0x74>)
     30c:	3301      	adds	r3, #1
     30e:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = true;
     310:	4a18      	ldr	r2, [pc, #96]	; (374 <udi_msc_enable+0x78>)
     312:	7013      	strb	r3, [r2, #0]
	udi_msc_nb_lun = get_nb_lun();
     314:	4b18      	ldr	r3, [pc, #96]	; (378 <udi_msc_enable+0x7c>)
     316:	4798      	blx	r3
	if (0 == udi_msc_nb_lun)
     318:	2800      	cmp	r0, #0
     31a:	d104      	bne.n	326 <udi_msc_enable+0x2a>
	udi_msc_nb_lun = get_nb_lun();
     31c:	4b17      	ldr	r3, [pc, #92]	; (37c <udi_msc_enable+0x80>)
     31e:	7018      	strb	r0, [r3, #0]
		return false; // No lun available, then not authorize to enable interface
     320:	2000      	movs	r0, #0
}
     322:	b003      	add	sp, #12
     324:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_msc_nb_lun--;
     326:	4d15      	ldr	r5, [pc, #84]	; (37c <udi_msc_enable+0x80>)
     328:	3801      	subs	r0, #1
	if (!UDI_MSC_ENABLE_EXT())
     32a:	4b15      	ldr	r3, [pc, #84]	; (380 <udi_msc_enable+0x84>)
	udi_msc_nb_lun--;
     32c:	7028      	strb	r0, [r5, #0]
	if (!UDI_MSC_ENABLE_EXT())
     32e:	4798      	blx	r3
     330:	1e07      	subs	r7, r0, #0
     332:	d0f5      	beq.n	320 <udi_msc_enable+0x24>
     334:	2400      	movs	r4, #0
     336:	4e13      	ldr	r6, [pc, #76]	; (384 <udi_msc_enable+0x88>)
		mem_unload(lun, false);
     338:	0020      	movs	r0, r4
     33a:	2100      	movs	r1, #0
     33c:	47b0      	blx	r6
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
     33e:	3401      	adds	r4, #1
     340:	782b      	ldrb	r3, [r5, #0]
     342:	b2e4      	uxtb	r4, r4
     344:	42a3      	cmp	r3, r4
     346:	d2f7      	bcs.n	338 <udi_msc_enable+0x3c>
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
     348:	4b0f      	ldr	r3, [pc, #60]	; (388 <udi_msc_enable+0x8c>)
     34a:	4a10      	ldr	r2, [pc, #64]	; (38c <udi_msc_enable+0x90>)
     34c:	9300      	str	r3, [sp, #0]
     34e:	2101      	movs	r1, #1
     350:	231f      	movs	r3, #31
     352:	2002      	movs	r0, #2
     354:	4c0e      	ldr	r4, [pc, #56]	; (390 <udi_msc_enable+0x94>)
     356:	47a0      	blx	r4
     358:	2800      	cmp	r0, #0
     35a:	d1e2      	bne.n	322 <udi_msc_enable+0x26>
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
     35c:	490d      	ldr	r1, [pc, #52]	; (394 <udi_msc_enable+0x98>)
     35e:	3002      	adds	r0, #2
     360:	4b0d      	ldr	r3, [pc, #52]	; (398 <udi_msc_enable+0x9c>)
     362:	4798      	blx	r3
     364:	0038      	movs	r0, r7
     366:	e7dc      	b.n	322 <udi_msc_enable+0x26>
     368:	20000d8e 	.word	0x20000d8e
     36c:	20000d8c 	.word	0x20000d8c
     370:	20000014 	.word	0x20000014
     374:	20000015 	.word	0x20000015
     378:	0000f069 	.word	0x0000f069
     37c:	20000dbc 	.word	0x20000dbc
     380:	0001a2ad 	.word	0x0001a2ad
     384:	0000f0a1 	.word	0x0000f0a1
     388:	00000725 	.word	0x00000725
     38c:	20000d98 	.word	0x20000d98
     390:	00002609 	.word	0x00002609
     394:	00000161 	.word	0x00000161
     398:	0000257d 	.word	0x0000257d

0000039c <udi_msc_setup>:
{
     39c:	b510      	push	{r4, lr}
	if (Udd_setup_is_in()) {
     39e:	4921      	ldr	r1, [pc, #132]	; (424 <udi_msc_setup+0x88>)
{
     3a0:	b082      	sub	sp, #8
	if (Udd_setup_is_in()) {
     3a2:	780a      	ldrb	r2, [r1, #0]
     3a4:	b253      	sxtb	r3, r2
     3a6:	2b00      	cmp	r3, #0
     3a8:	db28      	blt.n	3fc <udi_msc_setup+0x60>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     3aa:	2360      	movs	r3, #96	; 0x60
	return false;	// Not supported request
     3ac:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     3ae:	4013      	ands	r3, r2
     3b0:	2b20      	cmp	r3, #32
     3b2:	d001      	beq.n	3b8 <udi_msc_setup+0x1c>
}
     3b4:	b002      	add	sp, #8
     3b6:	bd10      	pop	{r4, pc}
			switch (udd_g_ctrlreq.req.bRequest) {
     3b8:	784b      	ldrb	r3, [r1, #1]
     3ba:	2bff      	cmp	r3, #255	; 0xff
     3bc:	d1fa      	bne.n	3b4 <udi_msc_setup+0x18>
				if (0 != udd_g_ctrlreq.req.wLength)
     3be:	88cb      	ldrh	r3, [r1, #6]
     3c0:	2b00      	cmp	r3, #0
     3c2:	d1f7      	bne.n	3b4 <udi_msc_setup+0x18>
				if (0 != udd_g_ctrlreq.req.wValue)
     3c4:	884b      	ldrh	r3, [r1, #2]
     3c6:	2b00      	cmp	r3, #0
     3c8:	d1f4      	bne.n	3b4 <udi_msc_setup+0x18>
				udi_msc_b_cbw_invalid = false;
     3ca:	4b17      	ldr	r3, [pc, #92]	; (428 <udi_msc_setup+0x8c>)
				udd_ep_abort(UDI_MSC_EP_OUT);
     3cc:	4c17      	ldr	r4, [pc, #92]	; (42c <udi_msc_setup+0x90>)
				udi_msc_b_cbw_invalid = false;
     3ce:	7018      	strb	r0, [r3, #0]
				udi_msc_b_trans_req = false;
     3d0:	4b17      	ldr	r3, [pc, #92]	; (430 <udi_msc_setup+0x94>)
     3d2:	7018      	strb	r0, [r3, #0]
				udd_ep_abort(UDI_MSC_EP_OUT);
     3d4:	3002      	adds	r0, #2
     3d6:	47a0      	blx	r4
				udd_ep_abort(UDI_MSC_EP_IN);
     3d8:	2081      	movs	r0, #129	; 0x81
     3da:	47a0      	blx	r4
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
     3dc:	4b15      	ldr	r3, [pc, #84]	; (434 <udi_msc_setup+0x98>)
     3de:	4a16      	ldr	r2, [pc, #88]	; (438 <udi_msc_setup+0x9c>)
     3e0:	9300      	str	r3, [sp, #0]
     3e2:	2101      	movs	r1, #1
     3e4:	231f      	movs	r3, #31
     3e6:	2002      	movs	r0, #2
     3e8:	4c14      	ldr	r4, [pc, #80]	; (43c <udi_msc_setup+0xa0>)
     3ea:	47a0      	blx	r4
     3ec:	2800      	cmp	r0, #0
     3ee:	d1e1      	bne.n	3b4 <udi_msc_setup+0x18>
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
     3f0:	4913      	ldr	r1, [pc, #76]	; (440 <udi_msc_setup+0xa4>)
     3f2:	3002      	adds	r0, #2
     3f4:	4b13      	ldr	r3, [pc, #76]	; (444 <udi_msc_setup+0xa8>)
     3f6:	4798      	blx	r3
				return true;
     3f8:	2001      	movs	r0, #1
     3fa:	e7db      	b.n	3b4 <udi_msc_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     3fc:	2360      	movs	r3, #96	; 0x60
	return false;	// Not supported request
     3fe:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     400:	4013      	ands	r3, r2
     402:	2b20      	cmp	r3, #32
     404:	d1d6      	bne.n	3b4 <udi_msc_setup+0x18>
			switch (udd_g_ctrlreq.req.bRequest) {
     406:	784b      	ldrb	r3, [r1, #1]
     408:	2bfe      	cmp	r3, #254	; 0xfe
     40a:	d1d3      	bne.n	3b4 <udi_msc_setup+0x18>
				if (1 != udd_g_ctrlreq.req.wLength)
     40c:	88cb      	ldrh	r3, [r1, #6]
     40e:	2b01      	cmp	r3, #1
     410:	d1d0      	bne.n	3b4 <udi_msc_setup+0x18>
				if (0 != udd_g_ctrlreq.req.wValue)
     412:	884a      	ldrh	r2, [r1, #2]
     414:	2a00      	cmp	r2, #0
     416:	d1cd      	bne.n	3b4 <udi_msc_setup+0x18>
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
     418:	4a0b      	ldr	r2, [pc, #44]	; (448 <udi_msc_setup+0xac>)
				udd_g_ctrlreq.payload_size = 1;
     41a:	818b      	strh	r3, [r1, #12]
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
     41c:	608a      	str	r2, [r1, #8]
				return true;
     41e:	3001      	adds	r0, #1
     420:	e7c8      	b.n	3b4 <udi_msc_setup+0x18>
     422:	46c0      	nop			; (mov r8, r8)
     424:	20001240 	.word	0x20001240
     428:	20000d8c 	.word	0x20000d8c
     42c:	00002155 	.word	0x00002155
     430:	20000d8e 	.word	0x20000d8e
     434:	00000725 	.word	0x00000725
     438:	20000d98 	.word	0x20000d98
     43c:	00002609 	.word	0x00002609
     440:	00000161 	.word	0x00000161
     444:	0000257d 	.word	0x0000257d
     448:	20000dbc 	.word	0x20000dbc

0000044c <udi_msc_data_sent>:
{
     44c:	b570      	push	{r4, r5, r6, lr}
     44e:	0004      	movs	r4, r0
     450:	b082      	sub	sp, #8
     452:	000e      	movs	r6, r1
	if (UDD_EP_TRANSFER_OK != status) {
     454:	2800      	cmp	r0, #0
     456:	d001      	beq.n	45c <udi_msc_data_sent+0x10>
}
     458:	b002      	add	sp, #8
     45a:	bd70      	pop	{r4, r5, r6, pc}
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     45c:	4d15      	ldr	r5, [pc, #84]	; (4b4 <udi_msc_data_sent+0x68>)
     45e:	4b16      	ldr	r3, [pc, #88]	; (4b8 <udi_msc_data_sent+0x6c>)
     460:	0028      	movs	r0, r5
     462:	2212      	movs	r2, #18
     464:	2100      	movs	r1, #0
     466:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     468:	23f0      	movs	r3, #240	; 0xf0
     46a:	702b      	strb	r3, [r5, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     46c:	3be6      	subs	r3, #230	; 0xe6
     46e:	71eb      	strb	r3, [r5, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
     470:	4d12      	ldr	r5, [pc, #72]	; (4bc <udi_msc_data_sent+0x70>)
	udi_msc_csw.dCSWDataResidue -= nb_sent;
     472:	68ab      	ldr	r3, [r5, #8]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
     474:	732c      	strb	r4, [r5, #12]
	udi_msc_csw.dCSWDataResidue -= nb_sent;
     476:	1b9e      	subs	r6, r3, r6
     478:	60ae      	str	r6, [r5, #8]
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
     47a:	4c11      	ldr	r4, [pc, #68]	; (4c0 <udi_msc_data_sent+0x74>)
	if (0 != udi_msc_csw.dCSWDataResidue) {
     47c:	d005      	beq.n	48a <udi_msc_data_sent+0x3e>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
     47e:	7b23      	ldrb	r3, [r4, #12]
     480:	2b7f      	cmp	r3, #127	; 0x7f
     482:	d813      	bhi.n	4ac <udi_msc_data_sent+0x60>
			udd_ep_set_halt(UDI_MSC_EP_OUT);
     484:	2002      	movs	r0, #2
     486:	4b0f      	ldr	r3, [pc, #60]	; (4c4 <udi_msc_data_sent+0x78>)
     488:	4798      	blx	r3
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
     48a:	6863      	ldr	r3, [r4, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
     48c:	002a      	movs	r2, r5
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
     48e:	606b      	str	r3, [r5, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
     490:	4b0d      	ldr	r3, [pc, #52]	; (4c8 <udi_msc_data_sent+0x7c>)
     492:	2100      	movs	r1, #0
     494:	9300      	str	r3, [sp, #0]
     496:	2081      	movs	r0, #129	; 0x81
     498:	230d      	movs	r3, #13
     49a:	4c0c      	ldr	r4, [pc, #48]	; (4cc <udi_msc_data_sent+0x80>)
     49c:	47a0      	blx	r4
     49e:	2800      	cmp	r0, #0
     4a0:	d1da      	bne.n	458 <udi_msc_data_sent+0xc>
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
     4a2:	490b      	ldr	r1, [pc, #44]	; (4d0 <udi_msc_data_sent+0x84>)
     4a4:	4b0b      	ldr	r3, [pc, #44]	; (4d4 <udi_msc_data_sent+0x88>)
     4a6:	3081      	adds	r0, #129	; 0x81
     4a8:	4798      	blx	r3
     4aa:	e7d5      	b.n	458 <udi_msc_data_sent+0xc>
			udd_ep_set_halt(UDI_MSC_EP_IN);
     4ac:	4b05      	ldr	r3, [pc, #20]	; (4c4 <udi_msc_data_sent+0x78>)
     4ae:	2081      	movs	r0, #129	; 0x81
     4b0:	4798      	blx	r3
     4b2:	e7ea      	b.n	48a <udi_msc_data_sent+0x3e>
     4b4:	20000dc0 	.word	0x20000dc0
     4b8:	0001fdfd 	.word	0x0001fdfd
     4bc:	20000018 	.word	0x20000018
     4c0:	20000d98 	.word	0x20000d98
     4c4:	000024b1 	.word	0x000024b1
     4c8:	000002c5 	.word	0x000002c5
     4cc:	00002609 	.word	0x00002609
     4d0:	00000199 	.word	0x00000199
     4d4:	0000257d 	.word	0x0000257d

000004d8 <udi_msc_data_send>:
{
     4d8:	b570      	push	{r4, r5, r6, lr}
     4da:	000b      	movs	r3, r1
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
     4dc:	491c      	ldr	r1, [pc, #112]	; (550 <udi_msc_data_send+0x78>)
{
     4de:	b082      	sub	sp, #8
     4e0:	0002      	movs	r2, r0
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
     4e2:	9100      	str	r1, [sp, #0]
     4e4:	2081      	movs	r0, #129	; 0x81
     4e6:	2101      	movs	r1, #1
     4e8:	4c1a      	ldr	r4, [pc, #104]	; (554 <udi_msc_data_send+0x7c>)
     4ea:	47a0      	blx	r4
     4ec:	2800      	cmp	r0, #0
     4ee:	d001      	beq.n	4f4 <udi_msc_data_send+0x1c>
}
     4f0:	b002      	add	sp, #8
     4f2:	bd70      	pop	{r4, r5, r6, pc}
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     4f4:	4e18      	ldr	r6, [pc, #96]	; (558 <udi_msc_data_send+0x80>)
     4f6:	4b19      	ldr	r3, [pc, #100]	; (55c <udi_msc_data_send+0x84>)
     4f8:	0030      	movs	r0, r6
     4fa:	2212      	movs	r2, #18
     4fc:	2100      	movs	r1, #0
     4fe:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     500:	23f0      	movs	r3, #240	; 0xf0
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     502:	4d17      	ldr	r5, [pc, #92]	; (560 <udi_msc_data_send+0x88>)
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     504:	7033      	strb	r3, [r6, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     506:	3be6      	subs	r3, #230	; 0xe6
     508:	71f3      	strb	r3, [r6, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     50a:	3b09      	subs	r3, #9
     50c:	732b      	strb	r3, [r5, #12]
	udi_msc_sense.sense_flag_key = sense_key;
     50e:	3303      	adds	r3, #3
     510:	70b3      	strb	r3, [r6, #2]
	if (0 != udi_msc_csw.dCSWDataResidue) {
     512:	68ab      	ldr	r3, [r5, #8]
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
     514:	4e13      	ldr	r6, [pc, #76]	; (564 <udi_msc_data_send+0x8c>)
	if (0 != udi_msc_csw.dCSWDataResidue) {
     516:	2b00      	cmp	r3, #0
     518:	d005      	beq.n	526 <udi_msc_data_send+0x4e>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
     51a:	7b33      	ldrb	r3, [r6, #12]
     51c:	2b7f      	cmp	r3, #127	; 0x7f
     51e:	d812      	bhi.n	546 <udi_msc_data_send+0x6e>
			udd_ep_set_halt(UDI_MSC_EP_OUT);
     520:	2002      	movs	r0, #2
     522:	4b11      	ldr	r3, [pc, #68]	; (568 <udi_msc_data_send+0x90>)
     524:	4798      	blx	r3
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
     526:	6873      	ldr	r3, [r6, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
     528:	002a      	movs	r2, r5
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
     52a:	606b      	str	r3, [r5, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
     52c:	4b0f      	ldr	r3, [pc, #60]	; (56c <udi_msc_data_send+0x94>)
     52e:	2100      	movs	r1, #0
     530:	9300      	str	r3, [sp, #0]
     532:	2081      	movs	r0, #129	; 0x81
     534:	230d      	movs	r3, #13
     536:	47a0      	blx	r4
     538:	2800      	cmp	r0, #0
     53a:	d1d9      	bne.n	4f0 <udi_msc_data_send+0x18>
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
     53c:	490c      	ldr	r1, [pc, #48]	; (570 <udi_msc_data_send+0x98>)
     53e:	4b0d      	ldr	r3, [pc, #52]	; (574 <udi_msc_data_send+0x9c>)
     540:	3081      	adds	r0, #129	; 0x81
     542:	4798      	blx	r3
}
     544:	e7d4      	b.n	4f0 <udi_msc_data_send+0x18>
			udd_ep_set_halt(UDI_MSC_EP_IN);
     546:	4b08      	ldr	r3, [pc, #32]	; (568 <udi_msc_data_send+0x90>)
     548:	2081      	movs	r0, #129	; 0x81
     54a:	4798      	blx	r3
     54c:	e7eb      	b.n	526 <udi_msc_data_send+0x4e>
     54e:	46c0      	nop			; (mov r8, r8)
     550:	0000044d 	.word	0x0000044d
     554:	00002609 	.word	0x00002609
     558:	20000dc0 	.word	0x20000dc0
     55c:	0001fdfd 	.word	0x0001fdfd
     560:	20000018 	.word	0x20000018
     564:	20000d98 	.word	0x20000d98
     568:	000024b1 	.word	0x000024b1
     56c:	000002c5 	.word	0x000002c5
     570:	00000199 	.word	0x00000199
     574:	0000257d 	.word	0x0000257d

00000578 <udi_msc_spc_mode_sense>:
{
     578:	b5f0      	push	{r4, r5, r6, r7, lr}
     57a:	4657      	mov	r7, sl
     57c:	46de      	mov	lr, fp
     57e:	464e      	mov	r6, r9
     580:	4645      	mov	r5, r8
     582:	4682      	mov	sl, r0
     584:	b5e0      	push	{r5, r6, r7, lr}
	memset(&sense, 0, sizeof(sense));
     586:	4f5b      	ldr	r7, [pc, #364]	; (6f4 <udi_msc_spc_mode_sense+0x17c>)
     588:	4b5b      	ldr	r3, [pc, #364]	; (6f8 <udi_msc_spc_mode_sense+0x180>)
{
     58a:	b085      	sub	sp, #20
	memset(&sense, 0, sizeof(sense));
     58c:	2214      	movs	r2, #20
     58e:	2100      	movs	r1, #0
     590:	0038      	movs	r0, r7
     592:	4699      	mov	r9, r3
     594:	4798      	blx	r3
	if (b_sense10) {
     596:	4653      	mov	r3, sl
		request_lgt = udi_msc_cbw.CDB[8];
     598:	4c58      	ldr	r4, [pc, #352]	; (6fc <udi_msc_spc_mode_sense+0x184>)
	if (b_sense10) {
     59a:	2b00      	cmp	r3, #0
     59c:	d06a      	beq.n	674 <udi_msc_spc_mode_sense+0xfc>
		ptr_mode = &sense.s10.sense_data;
     59e:	0039      	movs	r1, r7
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
     5a0:	233f      	movs	r3, #63	; 0x3f
     5a2:	7c60      	ldrb	r0, [r4, #17]
		request_lgt = udi_msc_cbw.CDB[8];
     5a4:	7de2      	ldrb	r2, [r4, #23]
     5a6:	2614      	movs	r6, #20
		ptr_mode = &sense.s10.sense_data;
     5a8:	3108      	adds	r1, #8
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
     5aa:	2508      	movs	r5, #8
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
     5ac:	4003      	ands	r3, r0
	if ((SCSI_MS_MODE_INFEXP == mode)
     5ae:	2b1c      	cmp	r3, #28
     5b0:	d069      	beq.n	686 <udi_msc_spc_mode_sense+0x10e>
			|| (SCSI_MS_MODE_ALL == mode)) {
     5b2:	2b3f      	cmp	r3, #63	; 0x3f
     5b4:	d067      	beq.n	686 <udi_msc_spc_mode_sense+0x10e>
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
     5b6:	1c2b      	adds	r3, r5, #0
     5b8:	4295      	cmp	r5, r2
     5ba:	d900      	bls.n	5be <udi_msc_spc_mode_sense+0x46>
     5bc:	1c13      	adds	r3, r2, #0
     5be:	b2db      	uxtb	r3, r3
     5c0:	9303      	str	r3, [sp, #12]
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
     5c2:	7b23      	ldrb	r3, [r4, #12]
     5c4:	4e4e      	ldr	r6, [pc, #312]	; (700 <udi_msc_spc_mode_sense+0x188>)
     5c6:	4698      	mov	r8, r3
     5c8:	3b80      	subs	r3, #128	; 0x80
     5ca:	061b      	lsls	r3, r3, #24
     5cc:	d423      	bmi.n	616 <udi_msc_spc_mode_sense+0x9e>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
     5ce:	68b3      	ldr	r3, [r6, #8]
     5d0:	469b      	mov	fp, r3
     5d2:	9b03      	ldr	r3, [sp, #12]
     5d4:	455b      	cmp	r3, fp
     5d6:	d820      	bhi.n	61a <udi_msc_spc_mode_sense+0xa2>
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
     5d8:	4b4a      	ldr	r3, [pc, #296]	; (704 <udi_msc_spc_mode_sense+0x18c>)
     5da:	7b60      	ldrb	r0, [r4, #13]
     5dc:	4798      	blx	r3
     5de:	1e43      	subs	r3, r0, #1
     5e0:	4198      	sbcs	r0, r3
	if (b_sense10) {
     5e2:	4653      	mov	r3, sl
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
     5e4:	01c0      	lsls	r0, r0, #7
	if (b_sense10) {
     5e6:	2b00      	cmp	r3, #0
     5e8:	d100      	bne.n	5ec <udi_msc_spc_mode_sense+0x74>
     5ea:	e076      	b.n	6da <udi_msc_spc_mode_sense+0x162>
				cpu_to_be16((data_sense_lgt - 2));
     5ec:	3d02      	subs	r5, #2
     5ee:	022d      	lsls	r5, r5, #8
		sense.s10.header.mode_data_length =
     5f0:	803d      	strh	r5, [r7, #0]
		sense.s10.header.device_specific_parameter = wp;
     5f2:	70f8      	strb	r0, [r7, #3]
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
     5f4:	4b44      	ldr	r3, [pc, #272]	; (708 <udi_msc_spc_mode_sense+0x190>)
     5f6:	003a      	movs	r2, r7
     5f8:	9300      	str	r3, [sp, #0]
     5fa:	2101      	movs	r1, #1
     5fc:	9b03      	ldr	r3, [sp, #12]
     5fe:	2081      	movs	r0, #129	; 0x81
     600:	4d42      	ldr	r5, [pc, #264]	; (70c <udi_msc_spc_mode_sense+0x194>)
     602:	47a8      	blx	r5
     604:	2800      	cmp	r0, #0
     606:	d046      	beq.n	696 <udi_msc_spc_mode_sense+0x11e>
}
     608:	b005      	add	sp, #20
     60a:	bc3c      	pop	{r2, r3, r4, r5}
     60c:	4690      	mov	r8, r2
     60e:	4699      	mov	r9, r3
     610:	46a2      	mov	sl, r4
     612:	46ab      	mov	fp, r5
     614:	bdf0      	pop	{r4, r5, r6, r7, pc}
     616:	68b3      	ldr	r3, [r6, #8]
     618:	469b      	mov	fp, r3
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     61a:	4d3d      	ldr	r5, [pc, #244]	; (710 <udi_msc_spc_mode_sense+0x198>)
     61c:	2212      	movs	r2, #18
     61e:	2100      	movs	r1, #0
     620:	0028      	movs	r0, r5
     622:	47c8      	blx	r9
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     624:	23f0      	movs	r3, #240	; 0xf0
     626:	702b      	strb	r3, [r5, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     628:	3be6      	subs	r3, #230	; 0xe6
     62a:	71eb      	strb	r3, [r5, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     62c:	3b09      	subs	r3, #9
     62e:	7333      	strb	r3, [r6, #12]
	udi_msc_sense.sense_flag_key = sense_key;
     630:	3304      	adds	r3, #4
     632:	70ab      	strb	r3, [r5, #2]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
     634:	331f      	adds	r3, #31
     636:	732b      	strb	r3, [r5, #12]
	if (0 != udi_msc_csw.dCSWDataResidue) {
     638:	465b      	mov	r3, fp
     63a:	2b00      	cmp	r3, #0
     63c:	d009      	beq.n	652 <udi_msc_spc_mode_sense+0xda>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
     63e:	4643      	mov	r3, r8
     640:	466a      	mov	r2, sp
     642:	7313      	strb	r3, [r2, #12]
     644:	7b13      	ldrb	r3, [r2, #12]
     646:	b25b      	sxtb	r3, r3
     648:	2b00      	cmp	r3, #0
     64a:	db4a      	blt.n	6e2 <udi_msc_spc_mode_sense+0x16a>
			udd_ep_set_halt(UDI_MSC_EP_OUT);
     64c:	2002      	movs	r0, #2
     64e:	4b31      	ldr	r3, [pc, #196]	; (714 <udi_msc_spc_mode_sense+0x19c>)
     650:	4798      	blx	r3
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
     652:	6863      	ldr	r3, [r4, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
     654:	0032      	movs	r2, r6
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
     656:	6073      	str	r3, [r6, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
     658:	4b2f      	ldr	r3, [pc, #188]	; (718 <udi_msc_spc_mode_sense+0x1a0>)
     65a:	2100      	movs	r1, #0
     65c:	9300      	str	r3, [sp, #0]
     65e:	2081      	movs	r0, #129	; 0x81
     660:	230d      	movs	r3, #13
     662:	4c2a      	ldr	r4, [pc, #168]	; (70c <udi_msc_spc_mode_sense+0x194>)
     664:	47a0      	blx	r4
     666:	2800      	cmp	r0, #0
     668:	d1ce      	bne.n	608 <udi_msc_spc_mode_sense+0x90>
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
     66a:	492c      	ldr	r1, [pc, #176]	; (71c <udi_msc_spc_mode_sense+0x1a4>)
     66c:	4b2c      	ldr	r3, [pc, #176]	; (720 <udi_msc_spc_mode_sense+0x1a8>)
     66e:	2081      	movs	r0, #129	; 0x81
     670:	4798      	blx	r3
     672:	e7c9      	b.n	608 <udi_msc_spc_mode_sense+0x90>
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
     674:	233f      	movs	r3, #63	; 0x3f
     676:	7c60      	ldrb	r0, [r4, #17]
		request_lgt = udi_msc_cbw.CDB[4];
     678:	7ce2      	ldrb	r2, [r4, #19]
     67a:	2610      	movs	r6, #16
		ptr_mode = &sense.s6.sense_data;
     67c:	1d39      	adds	r1, r7, #4
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
     67e:	2504      	movs	r5, #4
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
     680:	4003      	ands	r3, r0
	if ((SCSI_MS_MODE_INFEXP == mode)
     682:	2b1c      	cmp	r3, #28
     684:	d195      	bne.n	5b2 <udi_msc_spc_mode_sense+0x3a>
		ptr_mode->page_code =
     686:	231c      	movs	r3, #28
     688:	700b      	strb	r3, [r1, #0]
		ptr_mode->page_length =
     68a:	3b12      	subs	r3, #18
     68c:	704b      	strb	r3, [r1, #1]
		ptr_mode->mrie =
     68e:	3b05      	subs	r3, #5
     690:	70cb      	strb	r3, [r1, #3]
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
     692:	0035      	movs	r5, r6
     694:	e78f      	b.n	5b6 <udi_msc_spc_mode_sense+0x3e>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     696:	4f1e      	ldr	r7, [pc, #120]	; (710 <udi_msc_spc_mode_sense+0x198>)
     698:	2212      	movs	r2, #18
     69a:	2100      	movs	r1, #0
     69c:	0038      	movs	r0, r7
     69e:	47c8      	blx	r9
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     6a0:	23f0      	movs	r3, #240	; 0xf0
     6a2:	703b      	strb	r3, [r7, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     6a4:	3be6      	subs	r3, #230	; 0xe6
     6a6:	71fb      	strb	r3, [r7, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     6a8:	3b09      	subs	r3, #9
     6aa:	7333      	strb	r3, [r6, #12]
	udi_msc_sense.sense_flag_key = sense_key;
     6ac:	3303      	adds	r3, #3
     6ae:	70bb      	strb	r3, [r7, #2]
	if (0 != udi_msc_csw.dCSWDataResidue) {
     6b0:	68b3      	ldr	r3, [r6, #8]
     6b2:	2b00      	cmp	r3, #0
     6b4:	d005      	beq.n	6c2 <udi_msc_spc_mode_sense+0x14a>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
     6b6:	7b23      	ldrb	r3, [r4, #12]
     6b8:	2b7f      	cmp	r3, #127	; 0x7f
     6ba:	d816      	bhi.n	6ea <udi_msc_spc_mode_sense+0x172>
			udd_ep_set_halt(UDI_MSC_EP_OUT);
     6bc:	2002      	movs	r0, #2
     6be:	4b15      	ldr	r3, [pc, #84]	; (714 <udi_msc_spc_mode_sense+0x19c>)
     6c0:	4798      	blx	r3
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
     6c2:	6863      	ldr	r3, [r4, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
     6c4:	0032      	movs	r2, r6
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
     6c6:	6073      	str	r3, [r6, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
     6c8:	4b13      	ldr	r3, [pc, #76]	; (718 <udi_msc_spc_mode_sense+0x1a0>)
     6ca:	2100      	movs	r1, #0
     6cc:	9300      	str	r3, [sp, #0]
     6ce:	2081      	movs	r0, #129	; 0x81
     6d0:	230d      	movs	r3, #13
     6d2:	47a8      	blx	r5
     6d4:	2800      	cmp	r0, #0
     6d6:	d197      	bne.n	608 <udi_msc_spc_mode_sense+0x90>
     6d8:	e7c7      	b.n	66a <udi_msc_spc_mode_sense+0xf2>
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
     6da:	3d01      	subs	r5, #1
     6dc:	703d      	strb	r5, [r7, #0]
		sense.s6.header.device_specific_parameter = wp;
     6de:	70b8      	strb	r0, [r7, #2]
     6e0:	e788      	b.n	5f4 <udi_msc_spc_mode_sense+0x7c>
			udd_ep_set_halt(UDI_MSC_EP_IN);
     6e2:	4b0c      	ldr	r3, [pc, #48]	; (714 <udi_msc_spc_mode_sense+0x19c>)
     6e4:	2081      	movs	r0, #129	; 0x81
     6e6:	4798      	blx	r3
     6e8:	e7b3      	b.n	652 <udi_msc_spc_mode_sense+0xda>
     6ea:	4b0a      	ldr	r3, [pc, #40]	; (714 <udi_msc_spc_mode_sense+0x19c>)
     6ec:	2081      	movs	r0, #129	; 0x81
     6ee:	4798      	blx	r3
     6f0:	e7e7      	b.n	6c2 <udi_msc_spc_mode_sense+0x14a>
     6f2:	46c0      	nop			; (mov r8, r8)
     6f4:	20000d74 	.word	0x20000d74
     6f8:	0001fdfd 	.word	0x0001fdfd
     6fc:	20000d98 	.word	0x20000d98
     700:	20000018 	.word	0x20000018
     704:	0000f0b9 	.word	0x0000f0b9
     708:	0000044d 	.word	0x0000044d
     70c:	00002609 	.word	0x00002609
     710:	20000dc0 	.word	0x20000dc0
     714:	000024b1 	.word	0x000024b1
     718:	000002c5 	.word	0x000002c5
     71c:	00000199 	.word	0x00000199
     720:	0000257d 	.word	0x0000257d

00000724 <udi_msc_cbw_received>:
{
     724:	b5f0      	push	{r4, r5, r6, r7, lr}
     726:	46ce      	mov	lr, r9
     728:	4647      	mov	r7, r8
     72a:	b580      	push	{r7, lr}
     72c:	b085      	sub	sp, #20
	if (UDD_EP_TRANSFER_OK != status) {
     72e:	2800      	cmp	r0, #0
     730:	d10e      	bne.n	750 <udi_msc_cbw_received+0x2c>
	if ((sizeof(udi_msc_cbw) != nb_received)
     732:	291f      	cmp	r1, #31
     734:	d011      	beq.n	75a <udi_msc_cbw_received+0x36>
		udi_msc_b_cbw_invalid = true;
     736:	2301      	movs	r3, #1
     738:	4cd1      	ldr	r4, [pc, #836]	; (a80 <udi_msc_cbw_received+0x35c>)
	udd_ep_set_halt(UDI_MSC_EP_OUT);
     73a:	2002      	movs	r0, #2
     73c:	4ed1      	ldr	r6, [pc, #836]	; (a84 <udi_msc_cbw_received+0x360>)
		udi_msc_b_cbw_invalid = true;
     73e:	7023      	strb	r3, [r4, #0]
	udd_ep_set_halt(UDI_MSC_EP_OUT);
     740:	47b0      	blx	r6
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
     742:	49d1      	ldr	r1, [pc, #836]	; (a88 <udi_msc_cbw_received+0x364>)
     744:	2002      	movs	r0, #2
     746:	4dd1      	ldr	r5, [pc, #836]	; (a8c <udi_msc_cbw_received+0x368>)
     748:	47a8      	blx	r5
	if (!udi_msc_b_cbw_invalid)
     74a:	7823      	ldrb	r3, [r4, #0]
     74c:	2b00      	cmp	r3, #0
     74e:	d11d      	bne.n	78c <udi_msc_cbw_received+0x68>
}
     750:	b005      	add	sp, #20
     752:	bc0c      	pop	{r2, r3}
     754:	4690      	mov	r8, r2
     756:	4699      	mov	r9, r3
     758:	bdf0      	pop	{r4, r5, r6, r7, pc}
			|| (udi_msc_cbw.dCBWSignature !=
     75a:	4ccd      	ldr	r4, [pc, #820]	; (a90 <udi_msc_cbw_received+0x36c>)
     75c:	4bcd      	ldr	r3, [pc, #820]	; (a94 <udi_msc_cbw_received+0x370>)
     75e:	6822      	ldr	r2, [r4, #0]
     760:	429a      	cmp	r2, r3
     762:	d1e8      	bne.n	736 <udi_msc_cbw_received+0x12>
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
     764:	230f      	movs	r3, #15
     766:	7b60      	ldrb	r0, [r4, #13]
     768:	4018      	ands	r0, r3
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
     76a:	4bcb      	ldr	r3, [pc, #812]	; (a98 <udi_msc_cbw_received+0x374>)
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
     76c:	7360      	strb	r0, [r4, #13]
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
     76e:	781b      	ldrb	r3, [r3, #0]
     770:	4283      	cmp	r3, r0
     772:	d200      	bcs.n	776 <udi_msc_cbw_received+0x52>
     774:	e137      	b.n	9e6 <udi_msc_cbw_received+0x2c2>
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
     776:	68a6      	ldr	r6, [r4, #8]
	udi_msc_csw.dCSWDataResidue =
     778:	4dc8      	ldr	r5, [pc, #800]	; (a9c <udi_msc_cbw_received+0x378>)
     77a:	60ae      	str	r6, [r5, #8]
	switch (udi_msc_cbw.CDB[0]) {
     77c:	7be3      	ldrb	r3, [r4, #15]
     77e:	2b5a      	cmp	r3, #90	; 0x5a
     780:	d900      	bls.n	784 <udi_msc_cbw_received+0x60>
     782:	e11f      	b.n	9c4 <udi_msc_cbw_received+0x2a0>
     784:	4ac6      	ldr	r2, [pc, #792]	; (aa0 <udi_msc_cbw_received+0x37c>)
     786:	009b      	lsls	r3, r3, #2
     788:	58d3      	ldr	r3, [r2, r3]
     78a:	469f      	mov	pc, r3
	udd_ep_set_halt(UDI_MSC_EP_IN);
     78c:	2081      	movs	r0, #129	; 0x81
     78e:	47b0      	blx	r6
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
     790:	49c4      	ldr	r1, [pc, #784]	; (aa4 <udi_msc_cbw_received+0x380>)
     792:	2081      	movs	r0, #129	; 0x81
     794:	47a8      	blx	r5
     796:	e7db      	b.n	750 <udi_msc_cbw_received+0x2c>
	bool start = 0x1 & udi_msc_cbw.CDB[4];
     798:	7ce3      	ldrb	r3, [r4, #19]
	if (loej) {
     79a:	079a      	lsls	r2, r3, #30
     79c:	d504      	bpl.n	7a8 <udi_msc_cbw_received+0x84>
		mem_unload(udi_msc_cbw.bCBWLUN, !start);
     79e:	2101      	movs	r1, #1
     7a0:	4399      	bics	r1, r3
     7a2:	4bc1      	ldr	r3, [pc, #772]	; (aa8 <udi_msc_cbw_received+0x384>)
     7a4:	4798      	blx	r3
     7a6:	68ae      	ldr	r6, [r5, #8]
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     7a8:	4fc0      	ldr	r7, [pc, #768]	; (aac <udi_msc_cbw_received+0x388>)
     7aa:	4bc1      	ldr	r3, [pc, #772]	; (ab0 <udi_msc_cbw_received+0x38c>)
     7ac:	2212      	movs	r2, #18
     7ae:	2100      	movs	r1, #0
     7b0:	0038      	movs	r0, r7
     7b2:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     7b4:	23f0      	movs	r3, #240	; 0xf0
     7b6:	703b      	strb	r3, [r7, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     7b8:	3be6      	subs	r3, #230	; 0xe6
     7ba:	71fb      	strb	r3, [r7, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
     7bc:	2300      	movs	r3, #0
     7be:	732b      	strb	r3, [r5, #12]
	if (0 != udi_msc_csw.dCSWDataResidue) {
     7c0:	2e00      	cmp	r6, #0
     7c2:	d006      	beq.n	7d2 <udi_msc_cbw_received+0xae>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
     7c4:	7b23      	ldrb	r3, [r4, #12]
     7c6:	2b7f      	cmp	r3, #127	; 0x7f
     7c8:	d900      	bls.n	7cc <udi_msc_cbw_received+0xa8>
     7ca:	e0e2      	b.n	992 <udi_msc_cbw_received+0x26e>
			udd_ep_set_halt(UDI_MSC_EP_OUT);
     7cc:	2002      	movs	r0, #2
     7ce:	4bad      	ldr	r3, [pc, #692]	; (a84 <udi_msc_cbw_received+0x360>)
     7d0:	4798      	blx	r3
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
     7d2:	6863      	ldr	r3, [r4, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
     7d4:	002a      	movs	r2, r5
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
     7d6:	606b      	str	r3, [r5, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
     7d8:	4bb6      	ldr	r3, [pc, #728]	; (ab4 <udi_msc_cbw_received+0x390>)
     7da:	2100      	movs	r1, #0
     7dc:	9300      	str	r3, [sp, #0]
     7de:	2081      	movs	r0, #129	; 0x81
     7e0:	230d      	movs	r3, #13
     7e2:	4cb5      	ldr	r4, [pc, #724]	; (ab8 <udi_msc_cbw_received+0x394>)
     7e4:	47a0      	blx	r4
     7e6:	2800      	cmp	r0, #0
     7e8:	d1b2      	bne.n	750 <udi_msc_cbw_received+0x2c>
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
     7ea:	49b4      	ldr	r1, [pc, #720]	; (abc <udi_msc_cbw_received+0x398>)
     7ec:	4ba7      	ldr	r3, [pc, #668]	; (a8c <udi_msc_cbw_received+0x368>)
     7ee:	2081      	movs	r0, #129	; 0x81
     7f0:	4798      	blx	r3
     7f2:	e7ad      	b.n	750 <udi_msc_cbw_received+0x2c>
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
     7f4:	4bb2      	ldr	r3, [pc, #712]	; (ac0 <udi_msc_cbw_received+0x39c>)
     7f6:	4798      	blx	r3
     7f8:	2800      	cmp	r0, #0
     7fa:	d000      	beq.n	7fe <udi_msc_cbw_received+0xda>
     7fc:	e186      	b.n	b0c <udi_msc_cbw_received+0x3e8>
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
     7fe:	7c62      	ldrb	r2, [r4, #17]
     800:	4bb0      	ldr	r3, [pc, #704]	; (ac4 <udi_msc_cbw_received+0x3a0>)
     802:	70da      	strb	r2, [r3, #3]
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
     804:	7ca2      	ldrb	r2, [r4, #18]
     806:	709a      	strb	r2, [r3, #2]
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
     808:	7ce2      	ldrb	r2, [r4, #19]
     80a:	705a      	strb	r2, [r3, #1]
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
     80c:	7d22      	ldrb	r2, [r4, #20]
     80e:	701a      	strb	r2, [r3, #0]
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
     810:	7da2      	ldrb	r2, [r4, #22]
     812:	4bad      	ldr	r3, [pc, #692]	; (ac8 <udi_msc_cbw_received+0x3a4>)
     814:	705a      	strb	r2, [r3, #1]
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
     816:	7de2      	ldrb	r2, [r4, #23]
     818:	701a      	strb	r2, [r3, #0]
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
     81a:	881b      	ldrh	r3, [r3, #0]
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
     81c:	7b22      	ldrb	r2, [r4, #12]
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
     81e:	025b      	lsls	r3, r3, #9
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
     820:	2a7f      	cmp	r2, #127	; 0x7f
     822:	d900      	bls.n	826 <udi_msc_cbw_received+0x102>
     824:	e20b      	b.n	c3e <udi_msc_cbw_received+0x51a>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
     826:	68ae      	ldr	r6, [r5, #8]
     828:	42b3      	cmp	r3, r6
     82a:	d800      	bhi.n	82e <udi_msc_cbw_received+0x10a>
     82c:	e120      	b.n	a70 <udi_msc_cbw_received+0x34c>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     82e:	4f9f      	ldr	r7, [pc, #636]	; (aac <udi_msc_cbw_received+0x388>)
     830:	4b9f      	ldr	r3, [pc, #636]	; (ab0 <udi_msc_cbw_received+0x38c>)
     832:	2212      	movs	r2, #18
     834:	2100      	movs	r1, #0
     836:	0038      	movs	r0, r7
     838:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     83a:	23f0      	movs	r3, #240	; 0xf0
     83c:	703b      	strb	r3, [r7, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     83e:	3be6      	subs	r3, #230	; 0xe6
     840:	71fb      	strb	r3, [r7, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     842:	3b09      	subs	r3, #9
     844:	732b      	strb	r3, [r5, #12]
	udi_msc_sense.sense_flag_key = sense_key;
     846:	3304      	adds	r3, #4
     848:	70bb      	strb	r3, [r7, #2]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
     84a:	331f      	adds	r3, #31
     84c:	733b      	strb	r3, [r7, #12]
	if (0 != udi_msc_csw.dCSWDataResidue) {
     84e:	2e00      	cmp	r6, #0
     850:	d1bc      	bne.n	7cc <udi_msc_cbw_received+0xa8>
     852:	e7be      	b.n	7d2 <udi_msc_cbw_received+0xae>
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
     854:	7c62      	ldrb	r2, [r4, #17]
     856:	4b9b      	ldr	r3, [pc, #620]	; (ac4 <udi_msc_cbw_received+0x3a0>)
     858:	70da      	strb	r2, [r3, #3]
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
     85a:	7ca2      	ldrb	r2, [r4, #18]
     85c:	709a      	strb	r2, [r3, #2]
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
     85e:	7ce2      	ldrb	r2, [r4, #19]
     860:	705a      	strb	r2, [r3, #1]
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
     862:	7d22      	ldrb	r2, [r4, #20]
     864:	701a      	strb	r2, [r3, #0]
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
     866:	7da2      	ldrb	r2, [r4, #22]
     868:	4b97      	ldr	r3, [pc, #604]	; (ac8 <udi_msc_cbw_received+0x3a4>)
     86a:	705a      	strb	r2, [r3, #1]
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
     86c:	7de2      	ldrb	r2, [r4, #23]
     86e:	701a      	strb	r2, [r3, #0]
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
     870:	7b22      	ldrb	r2, [r4, #12]
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
     872:	881b      	ldrh	r3, [r3, #0]
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
     874:	4690      	mov	r8, r2
     876:	3a80      	subs	r2, #128	; 0x80
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
     878:	025b      	lsls	r3, r3, #9
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
     87a:	0612      	lsls	r2, r2, #24
     87c:	d500      	bpl.n	880 <udi_msc_cbw_received+0x15c>
     87e:	e0c8      	b.n	a12 <udi_msc_cbw_received+0x2ee>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
     880:	429e      	cmp	r6, r3
     882:	d200      	bcs.n	886 <udi_msc_cbw_received+0x162>
     884:	e0c5      	b.n	a12 <udi_msc_cbw_received+0x2ee>
	udi_msc_b_read = b_read;
     886:	2301      	movs	r3, #1
     888:	4a90      	ldr	r2, [pc, #576]	; (acc <udi_msc_cbw_received+0x3a8>)
     88a:	7013      	strb	r3, [r2, #0]
	udi_msc_b_trans_req = true;
     88c:	4a90      	ldr	r2, [pc, #576]	; (ad0 <udi_msc_cbw_received+0x3ac>)
     88e:	7013      	strb	r3, [r2, #0]
	UDI_MSC_NOTIFY_TRANS_EXT();
     890:	4b90      	ldr	r3, [pc, #576]	; (ad4 <udi_msc_cbw_received+0x3b0>)
     892:	4798      	blx	r3
     894:	e75c      	b.n	750 <udi_msc_cbw_received+0x2c>
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
     896:	7b23      	ldrb	r3, [r4, #12]
     898:	4698      	mov	r8, r3
     89a:	3b80      	subs	r3, #128	; 0x80
     89c:	061b      	lsls	r3, r3, #24
     89e:	d500      	bpl.n	8a2 <udi_msc_cbw_received+0x17e>
     8a0:	e0b7      	b.n	a12 <udi_msc_cbw_received+0x2ee>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
     8a2:	2e07      	cmp	r6, #7
     8a4:	d800      	bhi.n	8a8 <udi_msc_cbw_received+0x184>
     8a6:	e0b4      	b.n	a12 <udi_msc_cbw_received+0x2ee>
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
     8a8:	4c8b      	ldr	r4, [pc, #556]	; (ad8 <udi_msc_cbw_received+0x3b4>)
     8aa:	4b8c      	ldr	r3, [pc, #560]	; (adc <udi_msc_cbw_received+0x3b8>)
     8ac:	0021      	movs	r1, r4
     8ae:	4798      	blx	r3
     8b0:	2802      	cmp	r0, #2
     8b2:	d100      	bne.n	8b6 <udi_msc_cbw_received+0x192>
     8b4:	e1eb      	b.n	c8e <udi_msc_cbw_received+0x56a>
     8b6:	2803      	cmp	r0, #3
     8b8:	d100      	bne.n	8bc <udi_msc_cbw_received+0x198>
     8ba:	e1e0      	b.n	c7e <udi_msc_cbw_received+0x55a>
     8bc:	2800      	cmp	r0, #0
     8be:	d100      	bne.n	8c2 <udi_msc_cbw_received+0x19e>
     8c0:	e1d2      	b.n	c68 <udi_msc_cbw_received+0x544>
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
     8c2:	2100      	movs	r1, #0
     8c4:	2004      	movs	r0, #4
     8c6:	4b86      	ldr	r3, [pc, #536]	; (ae0 <udi_msc_cbw_received+0x3bc>)
     8c8:	4798      	blx	r3
		udi_msc_csw_process();
     8ca:	4b86      	ldr	r3, [pc, #536]	; (ae4 <udi_msc_cbw_received+0x3c0>)
     8cc:	4798      	blx	r3
     8ce:	e73f      	b.n	750 <udi_msc_cbw_received+0x2c>
	if (0 == prevent) {
     8d0:	7ce7      	ldrb	r7, [r4, #19]
     8d2:	2f00      	cmp	r7, #0
     8d4:	d100      	bne.n	8d8 <udi_msc_cbw_received+0x1b4>
     8d6:	e0b1      	b.n	a3c <udi_msc_cbw_received+0x318>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     8d8:	4f74      	ldr	r7, [pc, #464]	; (aac <udi_msc_cbw_received+0x388>)
     8da:	4b75      	ldr	r3, [pc, #468]	; (ab0 <udi_msc_cbw_received+0x38c>)
     8dc:	2212      	movs	r2, #18
     8de:	2100      	movs	r1, #0
     8e0:	0038      	movs	r0, r7
     8e2:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     8e4:	23f0      	movs	r3, #240	; 0xf0
     8e6:	703b      	strb	r3, [r7, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     8e8:	3be6      	subs	r3, #230	; 0xe6
     8ea:	71fb      	strb	r3, [r7, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     8ec:	3b09      	subs	r3, #9
     8ee:	732b      	strb	r3, [r5, #12]
	udi_msc_sense.sense_flag_key = sense_key;
     8f0:	3304      	adds	r3, #4
     8f2:	70bb      	strb	r3, [r7, #2]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
     8f4:	331f      	adds	r3, #31
     8f6:	733b      	strb	r3, [r7, #12]
	if (0 != udi_msc_csw.dCSWDataResidue) {
     8f8:	2e00      	cmp	r6, #0
     8fa:	d000      	beq.n	8fe <udi_msc_cbw_received+0x1da>
     8fc:	e762      	b.n	7c4 <udi_msc_cbw_received+0xa0>
     8fe:	e768      	b.n	7d2 <udi_msc_cbw_received+0xae>
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
     900:	4b79      	ldr	r3, [pc, #484]	; (ae8 <udi_msc_cbw_received+0x3c4>)
     902:	4798      	blx	r3
     904:	0006      	movs	r6, r0
     906:	2802      	cmp	r0, #2
     908:	d100      	bne.n	90c <udi_msc_cbw_received+0x1e8>
     90a:	e0f9      	b.n	b00 <udi_msc_cbw_received+0x3dc>
     90c:	2803      	cmp	r0, #3
     90e:	d100      	bne.n	912 <udi_msc_cbw_received+0x1ee>
     910:	e0f0      	b.n	af4 <udi_msc_cbw_received+0x3d0>
     912:	2800      	cmp	r0, #0
     914:	d100      	bne.n	918 <udi_msc_cbw_received+0x1f4>
     916:	e09f      	b.n	a58 <udi_msc_cbw_received+0x334>
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
     918:	2100      	movs	r1, #0
     91a:	2004      	movs	r0, #4
     91c:	4b70      	ldr	r3, [pc, #448]	; (ae0 <udi_msc_cbw_received+0x3bc>)
     91e:	4798      	blx	r3
	if (0 != udi_msc_csw.dCSWDataResidue) {
     920:	68ab      	ldr	r3, [r5, #8]
     922:	2b00      	cmp	r3, #0
     924:	d000      	beq.n	928 <udi_msc_cbw_received+0x204>
     926:	e74d      	b.n	7c4 <udi_msc_cbw_received+0xa0>
     928:	e753      	b.n	7d2 <udi_msc_cbw_received+0xae>
		udi_msc_spc_mode_sense(true);
     92a:	2001      	movs	r0, #1
     92c:	4b6f      	ldr	r3, [pc, #444]	; (aec <udi_msc_cbw_received+0x3c8>)
     92e:	4798      	blx	r3
     930:	e70e      	b.n	750 <udi_msc_cbw_received+0x2c>
	length = udi_msc_cbw.CDB[4];
     932:	7ce3      	ldrb	r3, [r4, #19]
     934:	1c1f      	adds	r7, r3, #0
     936:	2b24      	cmp	r3, #36	; 0x24
     938:	d900      	bls.n	93c <udi_msc_cbw_received+0x218>
     93a:	2724      	movs	r7, #36	; 0x24
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
     93c:	7b23      	ldrb	r3, [r4, #12]
     93e:	b2ff      	uxtb	r7, r7
     940:	4699      	mov	r9, r3
     942:	3b80      	subs	r3, #128	; 0x80
     944:	061b      	lsls	r3, r3, #24
     946:	d409      	bmi.n	95c <udi_msc_cbw_received+0x238>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
     948:	42be      	cmp	r6, r7
     94a:	d307      	bcc.n	95c <udi_msc_cbw_received+0x238>
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
     94c:	7c23      	ldrb	r3, [r4, #16]
     94e:	079b      	lsls	r3, r3, #30
     950:	d104      	bne.n	95c <udi_msc_cbw_received+0x238>
			|| (0 != udi_msc_cbw.CDB[2])) {
     952:	7c63      	ldrb	r3, [r4, #17]
     954:	4698      	mov	r8, r3
     956:	2b00      	cmp	r3, #0
     958:	d100      	bne.n	95c <udi_msc_cbw_received+0x238>
     95a:	e0ea      	b.n	b32 <udi_msc_cbw_received+0x40e>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     95c:	4f53      	ldr	r7, [pc, #332]	; (aac <udi_msc_cbw_received+0x388>)
     95e:	4b54      	ldr	r3, [pc, #336]	; (ab0 <udi_msc_cbw_received+0x38c>)
     960:	2212      	movs	r2, #18
     962:	2100      	movs	r1, #0
     964:	0038      	movs	r0, r7
     966:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     968:	23f0      	movs	r3, #240	; 0xf0
     96a:	703b      	strb	r3, [r7, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     96c:	3be6      	subs	r3, #230	; 0xe6
     96e:	71fb      	strb	r3, [r7, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     970:	3b09      	subs	r3, #9
     972:	732b      	strb	r3, [r5, #12]
	udi_msc_sense.sense_flag_key = sense_key;
     974:	3304      	adds	r3, #4
     976:	70bb      	strb	r3, [r7, #2]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
     978:	331f      	adds	r3, #31
     97a:	733b      	strb	r3, [r7, #12]
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
     97c:	464b      	mov	r3, r9
	if (0 != udi_msc_csw.dCSWDataResidue) {
     97e:	2e00      	cmp	r6, #0
     980:	d100      	bne.n	984 <udi_msc_cbw_received+0x260>
     982:	e726      	b.n	7d2 <udi_msc_cbw_received+0xae>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
     984:	466a      	mov	r2, sp
     986:	73d3      	strb	r3, [r2, #15]
     988:	7bd3      	ldrb	r3, [r2, #15]
     98a:	b25b      	sxtb	r3, r3
     98c:	2b00      	cmp	r3, #0
     98e:	db00      	blt.n	992 <udi_msc_cbw_received+0x26e>
     990:	e71c      	b.n	7cc <udi_msc_cbw_received+0xa8>
			udd_ep_set_halt(UDI_MSC_EP_IN);
     992:	4b3c      	ldr	r3, [pc, #240]	; (a84 <udi_msc_cbw_received+0x360>)
     994:	2081      	movs	r0, #129	; 0x81
     996:	4798      	blx	r3
     998:	e71b      	b.n	7d2 <udi_msc_cbw_received+0xae>
	uint8_t length = udi_msc_cbw.CDB[4];
     99a:	7ce3      	ldrb	r3, [r4, #19]
     99c:	1c19      	adds	r1, r3, #0
     99e:	2b12      	cmp	r3, #18
     9a0:	d900      	bls.n	9a4 <udi_msc_cbw_received+0x280>
     9a2:	2112      	movs	r1, #18
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
     9a4:	7b23      	ldrb	r3, [r4, #12]
     9a6:	b2c9      	uxtb	r1, r1
     9a8:	4698      	mov	r8, r3
     9aa:	3b80      	subs	r3, #128	; 0x80
     9ac:	061b      	lsls	r3, r3, #24
     9ae:	d430      	bmi.n	a12 <udi_msc_cbw_received+0x2ee>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
     9b0:	428e      	cmp	r6, r1
     9b2:	d32e      	bcc.n	a12 <udi_msc_cbw_received+0x2ee>
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
     9b4:	483d      	ldr	r0, [pc, #244]	; (aac <udi_msc_cbw_received+0x388>)
     9b6:	4b4e      	ldr	r3, [pc, #312]	; (af0 <udi_msc_cbw_received+0x3cc>)
     9b8:	4798      	blx	r3
     9ba:	e6c9      	b.n	750 <udi_msc_cbw_received+0x2c>
		udi_msc_spc_mode_sense(false);
     9bc:	2000      	movs	r0, #0
     9be:	4b4b      	ldr	r3, [pc, #300]	; (aec <udi_msc_cbw_received+0x3c8>)
     9c0:	4798      	blx	r3
     9c2:	e6c5      	b.n	750 <udi_msc_cbw_received+0x2c>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     9c4:	4f39      	ldr	r7, [pc, #228]	; (aac <udi_msc_cbw_received+0x388>)
     9c6:	4b3a      	ldr	r3, [pc, #232]	; (ab0 <udi_msc_cbw_received+0x38c>)
     9c8:	2212      	movs	r2, #18
     9ca:	2100      	movs	r1, #0
     9cc:	0038      	movs	r0, r7
     9ce:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     9d0:	23f0      	movs	r3, #240	; 0xf0
     9d2:	703b      	strb	r3, [r7, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     9d4:	3be6      	subs	r3, #230	; 0xe6
     9d6:	71fb      	strb	r3, [r7, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     9d8:	3b09      	subs	r3, #9
     9da:	732b      	strb	r3, [r5, #12]
	udi_msc_sense.sense_flag_key = sense_key;
     9dc:	3304      	adds	r3, #4
     9de:	70bb      	strb	r3, [r7, #2]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
     9e0:	331b      	adds	r3, #27
     9e2:	733b      	strb	r3, [r7, #12]
     9e4:	e788      	b.n	8f8 <udi_msc_cbw_received+0x1d4>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     9e6:	4e31      	ldr	r6, [pc, #196]	; (aac <udi_msc_cbw_received+0x388>)
     9e8:	4b31      	ldr	r3, [pc, #196]	; (ab0 <udi_msc_cbw_received+0x38c>)
     9ea:	2212      	movs	r2, #18
     9ec:	2100      	movs	r1, #0
     9ee:	0030      	movs	r0, r6
     9f0:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     9f2:	23f0      	movs	r3, #240	; 0xf0
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     9f4:	4d29      	ldr	r5, [pc, #164]	; (a9c <udi_msc_cbw_received+0x378>)
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     9f6:	7033      	strb	r3, [r6, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     9f8:	3be6      	subs	r3, #230	; 0xe6
     9fa:	71f3      	strb	r3, [r6, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     9fc:	3b09      	subs	r3, #9
     9fe:	732b      	strb	r3, [r5, #12]
	udi_msc_sense.sense_flag_key = sense_key;
     a00:	3304      	adds	r3, #4
     a02:	70b3      	strb	r3, [r6, #2]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
     a04:	331f      	adds	r3, #31
     a06:	7333      	strb	r3, [r6, #12]
	if (0 != udi_msc_csw.dCSWDataResidue) {
     a08:	68ab      	ldr	r3, [r5, #8]
     a0a:	2b00      	cmp	r3, #0
     a0c:	d000      	beq.n	a10 <udi_msc_cbw_received+0x2ec>
     a0e:	e6d9      	b.n	7c4 <udi_msc_cbw_received+0xa0>
     a10:	e6df      	b.n	7d2 <udi_msc_cbw_received+0xae>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     a12:	4f26      	ldr	r7, [pc, #152]	; (aac <udi_msc_cbw_received+0x388>)
     a14:	4b26      	ldr	r3, [pc, #152]	; (ab0 <udi_msc_cbw_received+0x38c>)
     a16:	2212      	movs	r2, #18
     a18:	2100      	movs	r1, #0
     a1a:	0038      	movs	r0, r7
     a1c:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     a1e:	23f0      	movs	r3, #240	; 0xf0
     a20:	703b      	strb	r3, [r7, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     a22:	3be6      	subs	r3, #230	; 0xe6
     a24:	71fb      	strb	r3, [r7, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     a26:	3b09      	subs	r3, #9
     a28:	732b      	strb	r3, [r5, #12]
	udi_msc_sense.sense_flag_key = sense_key;
     a2a:	3304      	adds	r3, #4
     a2c:	70bb      	strb	r3, [r7, #2]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
     a2e:	331f      	adds	r3, #31
     a30:	733b      	strb	r3, [r7, #12]
	if (0 != udi_msc_csw.dCSWDataResidue) {
     a32:	2e00      	cmp	r6, #0
     a34:	d100      	bne.n	a38 <udi_msc_cbw_received+0x314>
     a36:	e6cc      	b.n	7d2 <udi_msc_cbw_received+0xae>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
     a38:	4643      	mov	r3, r8
     a3a:	e7a3      	b.n	984 <udi_msc_cbw_received+0x260>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     a3c:	4b1b      	ldr	r3, [pc, #108]	; (aac <udi_msc_cbw_received+0x388>)
     a3e:	2212      	movs	r2, #18
     a40:	4698      	mov	r8, r3
     a42:	0018      	movs	r0, r3
     a44:	2100      	movs	r1, #0
     a46:	4b1a      	ldr	r3, [pc, #104]	; (ab0 <udi_msc_cbw_received+0x38c>)
     a48:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     a4a:	23f0      	movs	r3, #240	; 0xf0
     a4c:	4642      	mov	r2, r8
     a4e:	7013      	strb	r3, [r2, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     a50:	3be6      	subs	r3, #230	; 0xe6
     a52:	71d3      	strb	r3, [r2, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
     a54:	732f      	strb	r7, [r5, #12]
     a56:	e74f      	b.n	8f8 <udi_msc_cbw_received+0x1d4>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     a58:	4f14      	ldr	r7, [pc, #80]	; (aac <udi_msc_cbw_received+0x388>)
     a5a:	4b15      	ldr	r3, [pc, #84]	; (ab0 <udi_msc_cbw_received+0x38c>)
     a5c:	2212      	movs	r2, #18
     a5e:	2100      	movs	r1, #0
     a60:	0038      	movs	r0, r7
     a62:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     a64:	23f0      	movs	r3, #240	; 0xf0
     a66:	703b      	strb	r3, [r7, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     a68:	3be6      	subs	r3, #230	; 0xe6
     a6a:	71fb      	strb	r3, [r7, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
     a6c:	732e      	strb	r6, [r5, #12]
     a6e:	e757      	b.n	920 <udi_msc_cbw_received+0x1fc>
	udi_msc_b_trans_req = true;
     a70:	2201      	movs	r2, #1
	udi_msc_b_read = b_read;
     a72:	4b16      	ldr	r3, [pc, #88]	; (acc <udi_msc_cbw_received+0x3a8>)
     a74:	7018      	strb	r0, [r3, #0]
	udi_msc_b_trans_req = true;
     a76:	4b16      	ldr	r3, [pc, #88]	; (ad0 <udi_msc_cbw_received+0x3ac>)
     a78:	701a      	strb	r2, [r3, #0]
	UDI_MSC_NOTIFY_TRANS_EXT();
     a7a:	4b16      	ldr	r3, [pc, #88]	; (ad4 <udi_msc_cbw_received+0x3b0>)
     a7c:	4798      	blx	r3
     a7e:	e667      	b.n	750 <udi_msc_cbw_received+0x2c>
     a80:	20000d8c 	.word	0x20000d8c
     a84:	000024b1 	.word	0x000024b1
     a88:	00000209 	.word	0x00000209
     a8c:	0000257d 	.word	0x0000257d
     a90:	20000d98 	.word	0x20000d98
     a94:	43425355 	.word	0x43425355
     a98:	20000dbc 	.word	0x20000dbc
     a9c:	20000018 	.word	0x20000018
     aa0:	00024578 	.word	0x00024578
     aa4:	00000235 	.word	0x00000235
     aa8:	0000f0a1 	.word	0x0000f0a1
     aac:	20000dc0 	.word	0x20000dc0
     ab0:	0001fdfd 	.word	0x0001fdfd
     ab4:	000002c5 	.word	0x000002c5
     ab8:	00002609 	.word	0x00002609
     abc:	00000199 	.word	0x00000199
     ac0:	0000f0b9 	.word	0x0000f0b9
     ac4:	20000d88 	.word	0x20000d88
     ac8:	20000db8 	.word	0x20000db8
     acc:	20000d8d 	.word	0x20000d8d
     ad0:	20000d8e 	.word	0x20000d8e
     ad4:	0001a2a1 	.word	0x0001a2a1
     ad8:	20000d90 	.word	0x20000d90
     adc:	0000f081 	.word	0x0000f081
     ae0:	000001d1 	.word	0x000001d1
     ae4:	00000261 	.word	0x00000261
     ae8:	0000f06d 	.word	0x0000f06d
     aec:	00000579 	.word	0x00000579
     af0:	000004d9 	.word	0x000004d9
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
     af4:	21a0      	movs	r1, #160	; 0xa0
     af6:	2006      	movs	r0, #6
     af8:	0189      	lsls	r1, r1, #6
     afa:	4bc2      	ldr	r3, [pc, #776]	; (e04 <udi_msc_cbw_received+0x6e0>)
     afc:	4798      	blx	r3
     afe:	e70f      	b.n	920 <udi_msc_cbw_received+0x1fc>
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
     b00:	21e8      	movs	r1, #232	; 0xe8
     b02:	2002      	movs	r0, #2
     b04:	0189      	lsls	r1, r1, #6
     b06:	4bbf      	ldr	r3, [pc, #764]	; (e04 <udi_msc_cbw_received+0x6e0>)
     b08:	4798      	blx	r3
     b0a:	e709      	b.n	920 <udi_msc_cbw_received+0x1fc>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     b0c:	4cbe      	ldr	r4, [pc, #760]	; (e08 <udi_msc_cbw_received+0x6e4>)
     b0e:	2212      	movs	r2, #18
     b10:	2100      	movs	r1, #0
     b12:	0020      	movs	r0, r4
     b14:	4bbd      	ldr	r3, [pc, #756]	; (e0c <udi_msc_cbw_received+0x6e8>)
     b16:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     b18:	23f0      	movs	r3, #240	; 0xf0
     b1a:	7023      	strb	r3, [r4, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     b1c:	3be6      	subs	r3, #230	; 0xe6
     b1e:	71e3      	strb	r3, [r4, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     b20:	3b09      	subs	r3, #9
     b22:	732b      	strb	r3, [r5, #12]
	udi_msc_sense.sense_flag_key = sense_key;
     b24:	3306      	adds	r3, #6
     b26:	70a3      	strb	r3, [r4, #2]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
     b28:	3320      	adds	r3, #32
     b2a:	7323      	strb	r3, [r4, #12]
			udi_msc_csw_process();
     b2c:	4bb8      	ldr	r3, [pc, #736]	; (e10 <udi_msc_cbw_received+0x6ec>)
     b2e:	4798      	blx	r3
     b30:	e60e      	b.n	750 <udi_msc_cbw_received+0x2c>
	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
     b32:	4bb8      	ldr	r3, [pc, #736]	; (e14 <udi_msc_cbw_received+0x6f0>)
     b34:	4798      	blx	r3
     b36:	0003      	movs	r3, r0
     b38:	1e58      	subs	r0, r3, #1
     b3a:	4183      	sbcs	r3, r0
     b3c:	4db6      	ldr	r5, [pc, #728]	; (e18 <udi_msc_cbw_received+0x6f4>)
     b3e:	01db      	lsls	r3, r3, #7
     b40:	706b      	strb	r3, [r5, #1]
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
     b42:	7b60      	ldrb	r0, [r4, #13]
     b44:	4bb5      	ldr	r3, [pc, #724]	; (e1c <udi_msc_cbw_received+0x6f8>)
     b46:	4798      	blx	r3
     b48:	0001      	movs	r1, r0
	memcpy(udi_msc_inquiry_data.product_id,
     b4a:	0028      	movs	r0, r5
     b4c:	4bb4      	ldr	r3, [pc, #720]	; (e20 <udi_msc_cbw_received+0x6fc>)
     b4e:	3010      	adds	r0, #16
     b50:	3101      	adds	r1, #1
     b52:	2210      	movs	r2, #16
     b54:	4798      	blx	r3
		if ((0 == udi_msc_inquiry_data.product_id[i])
     b56:	7c2b      	ldrb	r3, [r5, #16]
     b58:	2b00      	cmp	r3, #0
     b5a:	d100      	bne.n	b5e <udi_msc_cbw_received+0x43a>
     b5c:	e0a0      	b.n	ca0 <udi_msc_cbw_received+0x57c>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
     b5e:	2b22      	cmp	r3, #34	; 0x22
     b60:	d100      	bne.n	b64 <udi_msc_cbw_received+0x440>
     b62:	e106      	b.n	d72 <udi_msc_cbw_received+0x64e>
		if ((0 == udi_msc_inquiry_data.product_id[i])
     b64:	7c6b      	ldrb	r3, [r5, #17]
     b66:	2b00      	cmp	r3, #0
     b68:	d100      	bne.n	b6c <udi_msc_cbw_received+0x448>
     b6a:	e107      	b.n	d7c <udi_msc_cbw_received+0x658>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
     b6c:	2b22      	cmp	r3, #34	; 0x22
     b6e:	d100      	bne.n	b72 <udi_msc_cbw_received+0x44e>
     b70:	e101      	b.n	d76 <udi_msc_cbw_received+0x652>
		if ((0 == udi_msc_inquiry_data.product_id[i])
     b72:	7cab      	ldrb	r3, [r5, #18]
     b74:	2b00      	cmp	r3, #0
     b76:	d100      	bne.n	b7a <udi_msc_cbw_received+0x456>
     b78:	e10a      	b.n	d90 <udi_msc_cbw_received+0x66c>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
     b7a:	2b22      	cmp	r3, #34	; 0x22
     b7c:	d100      	bne.n	b80 <udi_msc_cbw_received+0x45c>
     b7e:	e104      	b.n	d8a <udi_msc_cbw_received+0x666>
		if ((0 == udi_msc_inquiry_data.product_id[i])
     b80:	7ceb      	ldrb	r3, [r5, #19]
     b82:	2b00      	cmp	r3, #0
     b84:	d100      	bne.n	b88 <udi_msc_cbw_received+0x464>
     b86:	e0fe      	b.n	d86 <udi_msc_cbw_received+0x662>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
     b88:	2b22      	cmp	r3, #34	; 0x22
     b8a:	d100      	bne.n	b8e <udi_msc_cbw_received+0x46a>
     b8c:	e0f8      	b.n	d80 <udi_msc_cbw_received+0x65c>
		if ((0 == udi_msc_inquiry_data.product_id[i])
     b8e:	7d2b      	ldrb	r3, [r5, #20]
     b90:	2b00      	cmp	r3, #0
     b92:	d100      	bne.n	b96 <udi_msc_cbw_received+0x472>
     b94:	e110      	b.n	db8 <udi_msc_cbw_received+0x694>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
     b96:	2b22      	cmp	r3, #34	; 0x22
     b98:	d100      	bne.n	b9c <udi_msc_cbw_received+0x478>
     b9a:	e10a      	b.n	db2 <udi_msc_cbw_received+0x68e>
		if ((0 == udi_msc_inquiry_data.product_id[i])
     b9c:	7d6b      	ldrb	r3, [r5, #21]
     b9e:	2b00      	cmp	r3, #0
     ba0:	d100      	bne.n	ba4 <udi_msc_cbw_received+0x480>
     ba2:	e104      	b.n	dae <udi_msc_cbw_received+0x68a>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
     ba4:	2b22      	cmp	r3, #34	; 0x22
     ba6:	d100      	bne.n	baa <udi_msc_cbw_received+0x486>
     ba8:	e0fe      	b.n	da8 <udi_msc_cbw_received+0x684>
		if ((0 == udi_msc_inquiry_data.product_id[i])
     baa:	7dab      	ldrb	r3, [r5, #22]
     bac:	2b00      	cmp	r3, #0
     bae:	d100      	bne.n	bb2 <udi_msc_cbw_received+0x48e>
     bb0:	e0f8      	b.n	da4 <udi_msc_cbw_received+0x680>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
     bb2:	2b22      	cmp	r3, #34	; 0x22
     bb4:	d100      	bne.n	bb8 <udi_msc_cbw_received+0x494>
     bb6:	e0f2      	b.n	d9e <udi_msc_cbw_received+0x67a>
		if ((0 == udi_msc_inquiry_data.product_id[i])
     bb8:	7deb      	ldrb	r3, [r5, #23]
     bba:	2b00      	cmp	r3, #0
     bbc:	d100      	bne.n	bc0 <udi_msc_cbw_received+0x49c>
     bbe:	e0ec      	b.n	d9a <udi_msc_cbw_received+0x676>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
     bc0:	2b22      	cmp	r3, #34	; 0x22
     bc2:	d100      	bne.n	bc6 <udi_msc_cbw_received+0x4a2>
     bc4:	e0e6      	b.n	d94 <udi_msc_cbw_received+0x670>
		if ((0 == udi_msc_inquiry_data.product_id[i])
     bc6:	7e2b      	ldrb	r3, [r5, #24]
     bc8:	2b00      	cmp	r3, #0
     bca:	d100      	bne.n	bce <udi_msc_cbw_received+0x4aa>
     bcc:	e117      	b.n	dfe <udi_msc_cbw_received+0x6da>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
     bce:	2b22      	cmp	r3, #34	; 0x22
     bd0:	d100      	bne.n	bd4 <udi_msc_cbw_received+0x4b0>
     bd2:	e111      	b.n	df8 <udi_msc_cbw_received+0x6d4>
		if ((0 == udi_msc_inquiry_data.product_id[i])
     bd4:	7e6b      	ldrb	r3, [r5, #25]
     bd6:	2b00      	cmp	r3, #0
     bd8:	d100      	bne.n	bdc <udi_msc_cbw_received+0x4b8>
     bda:	e10b      	b.n	df4 <udi_msc_cbw_received+0x6d0>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
     bdc:	2b22      	cmp	r3, #34	; 0x22
     bde:	d100      	bne.n	be2 <udi_msc_cbw_received+0x4be>
     be0:	e105      	b.n	dee <udi_msc_cbw_received+0x6ca>
		if ((0 == udi_msc_inquiry_data.product_id[i])
     be2:	7eab      	ldrb	r3, [r5, #26]
     be4:	2b00      	cmp	r3, #0
     be6:	d100      	bne.n	bea <udi_msc_cbw_received+0x4c6>
     be8:	e0ff      	b.n	dea <udi_msc_cbw_received+0x6c6>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
     bea:	2b22      	cmp	r3, #34	; 0x22
     bec:	d100      	bne.n	bf0 <udi_msc_cbw_received+0x4cc>
     bee:	e0f9      	b.n	de4 <udi_msc_cbw_received+0x6c0>
		if ((0 == udi_msc_inquiry_data.product_id[i])
     bf0:	7eeb      	ldrb	r3, [r5, #27]
     bf2:	2b00      	cmp	r3, #0
     bf4:	d100      	bne.n	bf8 <udi_msc_cbw_received+0x4d4>
     bf6:	e0f3      	b.n	de0 <udi_msc_cbw_received+0x6bc>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
     bf8:	2b22      	cmp	r3, #34	; 0x22
     bfa:	d100      	bne.n	bfe <udi_msc_cbw_received+0x4da>
     bfc:	e0b7      	b.n	d6e <udi_msc_cbw_received+0x64a>
		if ((0 == udi_msc_inquiry_data.product_id[i])
     bfe:	7f2b      	ldrb	r3, [r5, #28]
     c00:	2b00      	cmp	r3, #0
     c02:	d100      	bne.n	c06 <udi_msc_cbw_received+0x4e2>
     c04:	e0ea      	b.n	ddc <udi_msc_cbw_received+0x6b8>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
     c06:	2b22      	cmp	r3, #34	; 0x22
     c08:	d100      	bne.n	c0c <udi_msc_cbw_received+0x4e8>
     c0a:	e0e4      	b.n	dd6 <udi_msc_cbw_received+0x6b2>
		if ((0 == udi_msc_inquiry_data.product_id[i])
     c0c:	7f6b      	ldrb	r3, [r5, #29]
     c0e:	2b00      	cmp	r3, #0
     c10:	d100      	bne.n	c14 <udi_msc_cbw_received+0x4f0>
     c12:	e0de      	b.n	dd2 <udi_msc_cbw_received+0x6ae>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
     c14:	2b22      	cmp	r3, #34	; 0x22
     c16:	d100      	bne.n	c1a <udi_msc_cbw_received+0x4f6>
     c18:	e0d8      	b.n	dcc <udi_msc_cbw_received+0x6a8>
		if ((0 == udi_msc_inquiry_data.product_id[i])
     c1a:	7fab      	ldrb	r3, [r5, #30]
     c1c:	2b00      	cmp	r3, #0
     c1e:	d03e      	beq.n	c9e <udi_msc_cbw_received+0x57a>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
     c20:	2b22      	cmp	r3, #34	; 0x22
     c22:	d100      	bne.n	c26 <udi_msc_cbw_received+0x502>
     c24:	e0cf      	b.n	dc6 <udi_msc_cbw_received+0x6a2>
		if ((0 == udi_msc_inquiry_data.product_id[i])
     c26:	7feb      	ldrb	r3, [r5, #31]
     c28:	2b00      	cmp	r3, #0
     c2a:	d100      	bne.n	c2e <udi_msc_cbw_received+0x50a>
     c2c:	e0c9      	b.n	dc2 <udi_msc_cbw_received+0x69e>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
     c2e:	2b22      	cmp	r3, #34	; 0x22
     c30:	d100      	bne.n	c34 <udi_msc_cbw_received+0x510>
     c32:	e0c3      	b.n	dbc <udi_msc_cbw_received+0x698>
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
     c34:	0039      	movs	r1, r7
     c36:	0028      	movs	r0, r5
     c38:	4b7a      	ldr	r3, [pc, #488]	; (e24 <udi_msc_cbw_received+0x700>)
     c3a:	4798      	blx	r3
     c3c:	e588      	b.n	750 <udi_msc_cbw_received+0x2c>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     c3e:	4e72      	ldr	r6, [pc, #456]	; (e08 <udi_msc_cbw_received+0x6e4>)
     c40:	4b72      	ldr	r3, [pc, #456]	; (e0c <udi_msc_cbw_received+0x6e8>)
     c42:	2212      	movs	r2, #18
     c44:	2100      	movs	r1, #0
     c46:	0030      	movs	r0, r6
     c48:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     c4a:	23f0      	movs	r3, #240	; 0xf0
     c4c:	7033      	strb	r3, [r6, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     c4e:	3be6      	subs	r3, #230	; 0xe6
     c50:	71f3      	strb	r3, [r6, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     c52:	3b09      	subs	r3, #9
     c54:	732b      	strb	r3, [r5, #12]
	udi_msc_sense.sense_flag_key = sense_key;
     c56:	3304      	adds	r3, #4
     c58:	70b3      	strb	r3, [r6, #2]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
     c5a:	331f      	adds	r3, #31
     c5c:	7333      	strb	r3, [r6, #12]
	if (0 != udi_msc_csw.dCSWDataResidue) {
     c5e:	68ab      	ldr	r3, [r5, #8]
     c60:	2b00      	cmp	r3, #0
     c62:	d000      	beq.n	c66 <udi_msc_cbw_received+0x542>
     c64:	e695      	b.n	992 <udi_msc_cbw_received+0x26e>
     c66:	e5b4      	b.n	7d2 <udi_msc_cbw_received+0xae>
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
     c68:	2380      	movs	r3, #128	; 0x80
     c6a:	029b      	lsls	r3, r3, #10
     c6c:	6063      	str	r3, [r4, #4]
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
     c6e:	6823      	ldr	r3, [r4, #0]
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
     c70:	2108      	movs	r1, #8
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
     c72:	ba1b      	rev	r3, r3
     c74:	6023      	str	r3, [r4, #0]
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
     c76:	0020      	movs	r0, r4
     c78:	4b6a      	ldr	r3, [pc, #424]	; (e24 <udi_msc_cbw_received+0x700>)
     c7a:	4798      	blx	r3
     c7c:	e568      	b.n	750 <udi_msc_cbw_received+0x2c>
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
     c7e:	21a0      	movs	r1, #160	; 0xa0
     c80:	2006      	movs	r0, #6
     c82:	0189      	lsls	r1, r1, #6
     c84:	4b5f      	ldr	r3, [pc, #380]	; (e04 <udi_msc_cbw_received+0x6e0>)
     c86:	4798      	blx	r3
		udi_msc_csw_process();
     c88:	4b61      	ldr	r3, [pc, #388]	; (e10 <udi_msc_cbw_received+0x6ec>)
     c8a:	4798      	blx	r3
     c8c:	e560      	b.n	750 <udi_msc_cbw_received+0x2c>
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
     c8e:	21e8      	movs	r1, #232	; 0xe8
     c90:	2002      	movs	r0, #2
     c92:	0189      	lsls	r1, r1, #6
     c94:	4b5b      	ldr	r3, [pc, #364]	; (e04 <udi_msc_cbw_received+0x6e0>)
     c96:	4798      	blx	r3
		udi_msc_csw_process();
     c98:	4b5d      	ldr	r3, [pc, #372]	; (e10 <udi_msc_cbw_received+0x6ec>)
     c9a:	4798      	blx	r3
     c9c:	e558      	b.n	750 <udi_msc_cbw_received+0x2c>
		i++;
     c9e:	230e      	movs	r3, #14
		udi_msc_inquiry_data.product_id[i] = ' ';
     ca0:	2220      	movs	r2, #32
     ca2:	18e9      	adds	r1, r5, r3
     ca4:	740a      	strb	r2, [r1, #16]
		i++;
     ca6:	1c59      	adds	r1, r3, #1
     ca8:	b2c9      	uxtb	r1, r1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
     caa:	2910      	cmp	r1, #16
     cac:	d0c2      	beq.n	c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
     cae:	1869      	adds	r1, r5, r1
     cb0:	740a      	strb	r2, [r1, #16]
		i++;
     cb2:	1c99      	adds	r1, r3, #2
     cb4:	b2c9      	uxtb	r1, r1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
     cb6:	2910      	cmp	r1, #16
     cb8:	d0bc      	beq.n	c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
     cba:	1869      	adds	r1, r5, r1
     cbc:	740a      	strb	r2, [r1, #16]
		i++;
     cbe:	1cd9      	adds	r1, r3, #3
     cc0:	b2c9      	uxtb	r1, r1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
     cc2:	2910      	cmp	r1, #16
     cc4:	d0b6      	beq.n	c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
     cc6:	1869      	adds	r1, r5, r1
     cc8:	740a      	strb	r2, [r1, #16]
		i++;
     cca:	1d19      	adds	r1, r3, #4
     ccc:	b2c9      	uxtb	r1, r1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
     cce:	2910      	cmp	r1, #16
     cd0:	d0b0      	beq.n	c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
     cd2:	1869      	adds	r1, r5, r1
     cd4:	740a      	strb	r2, [r1, #16]
		i++;
     cd6:	1d59      	adds	r1, r3, #5
     cd8:	b2c9      	uxtb	r1, r1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
     cda:	2910      	cmp	r1, #16
     cdc:	d0aa      	beq.n	c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
     cde:	1869      	adds	r1, r5, r1
     ce0:	740a      	strb	r2, [r1, #16]
		i++;
     ce2:	1d99      	adds	r1, r3, #6
     ce4:	b2c9      	uxtb	r1, r1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
     ce6:	2910      	cmp	r1, #16
     ce8:	d0a4      	beq.n	c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
     cea:	1869      	adds	r1, r5, r1
     cec:	740a      	strb	r2, [r1, #16]
		i++;
     cee:	1dd9      	adds	r1, r3, #7
     cf0:	b2c9      	uxtb	r1, r1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
     cf2:	2910      	cmp	r1, #16
     cf4:	d09e      	beq.n	c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
     cf6:	1869      	adds	r1, r5, r1
     cf8:	740a      	strb	r2, [r1, #16]
		i++;
     cfa:	0019      	movs	r1, r3
     cfc:	3108      	adds	r1, #8
     cfe:	b2c9      	uxtb	r1, r1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
     d00:	2910      	cmp	r1, #16
     d02:	d097      	beq.n	c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
     d04:	1869      	adds	r1, r5, r1
     d06:	740a      	strb	r2, [r1, #16]
		i++;
     d08:	0019      	movs	r1, r3
     d0a:	3109      	adds	r1, #9
     d0c:	b2c9      	uxtb	r1, r1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
     d0e:	2910      	cmp	r1, #16
     d10:	d090      	beq.n	c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
     d12:	1869      	adds	r1, r5, r1
     d14:	740a      	strb	r2, [r1, #16]
		i++;
     d16:	001a      	movs	r2, r3
     d18:	320a      	adds	r2, #10
     d1a:	b2d2      	uxtb	r2, r2
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
     d1c:	2a10      	cmp	r2, #16
     d1e:	d089      	beq.n	c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
     d20:	18a9      	adds	r1, r5, r2
     d22:	2220      	movs	r2, #32
     d24:	740a      	strb	r2, [r1, #16]
		i++;
     d26:	0019      	movs	r1, r3
     d28:	310b      	adds	r1, #11
     d2a:	b2c9      	uxtb	r1, r1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
     d2c:	2910      	cmp	r1, #16
     d2e:	d081      	beq.n	c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
     d30:	1869      	adds	r1, r5, r1
     d32:	740a      	strb	r2, [r1, #16]
		i++;
     d34:	0019      	movs	r1, r3
     d36:	310c      	adds	r1, #12
     d38:	b2c9      	uxtb	r1, r1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
     d3a:	2910      	cmp	r1, #16
     d3c:	d100      	bne.n	d40 <udi_msc_cbw_received+0x61c>
     d3e:	e779      	b.n	c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
     d40:	1869      	adds	r1, r5, r1
     d42:	740a      	strb	r2, [r1, #16]
		i++;
     d44:	0019      	movs	r1, r3
     d46:	310d      	adds	r1, #13
     d48:	b2c9      	uxtb	r1, r1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
     d4a:	2910      	cmp	r1, #16
     d4c:	d100      	bne.n	d50 <udi_msc_cbw_received+0x62c>
     d4e:	e771      	b.n	c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
     d50:	1869      	adds	r1, r5, r1
     d52:	740a      	strb	r2, [r1, #16]
		i++;
     d54:	0019      	movs	r1, r3
     d56:	310e      	adds	r1, #14
     d58:	b2c9      	uxtb	r1, r1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
     d5a:	2910      	cmp	r1, #16
     d5c:	d100      	bne.n	d60 <udi_msc_cbw_received+0x63c>
     d5e:	e769      	b.n	c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
     d60:	1869      	adds	r1, r5, r1
     d62:	740a      	strb	r2, [r1, #16]
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
     d64:	2b01      	cmp	r3, #1
     d66:	d100      	bne.n	d6a <udi_msc_cbw_received+0x646>
     d68:	e764      	b.n	c34 <udi_msc_cbw_received+0x510>
		udi_msc_inquiry_data.product_id[i] = ' ';
     d6a:	77ea      	strb	r2, [r5, #31]
     d6c:	e762      	b.n	c34 <udi_msc_cbw_received+0x510>
		i++;
     d6e:	230b      	movs	r3, #11
     d70:	4698      	mov	r8, r3
	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
     d72:	4643      	mov	r3, r8
     d74:	e794      	b.n	ca0 <udi_msc_cbw_received+0x57c>
		i++;
     d76:	2301      	movs	r3, #1
     d78:	4698      	mov	r8, r3
     d7a:	e7fa      	b.n	d72 <udi_msc_cbw_received+0x64e>
     d7c:	2301      	movs	r3, #1
     d7e:	e78f      	b.n	ca0 <udi_msc_cbw_received+0x57c>
     d80:	2303      	movs	r3, #3
     d82:	4698      	mov	r8, r3
     d84:	e7f5      	b.n	d72 <udi_msc_cbw_received+0x64e>
     d86:	2303      	movs	r3, #3
     d88:	e78a      	b.n	ca0 <udi_msc_cbw_received+0x57c>
     d8a:	2302      	movs	r3, #2
     d8c:	4698      	mov	r8, r3
     d8e:	e7f0      	b.n	d72 <udi_msc_cbw_received+0x64e>
     d90:	2302      	movs	r3, #2
     d92:	e785      	b.n	ca0 <udi_msc_cbw_received+0x57c>
     d94:	2307      	movs	r3, #7
     d96:	4698      	mov	r8, r3
     d98:	e7eb      	b.n	d72 <udi_msc_cbw_received+0x64e>
     d9a:	2307      	movs	r3, #7
     d9c:	e780      	b.n	ca0 <udi_msc_cbw_received+0x57c>
     d9e:	2306      	movs	r3, #6
     da0:	4698      	mov	r8, r3
     da2:	e7e6      	b.n	d72 <udi_msc_cbw_received+0x64e>
     da4:	2306      	movs	r3, #6
     da6:	e77b      	b.n	ca0 <udi_msc_cbw_received+0x57c>
     da8:	2305      	movs	r3, #5
     daa:	4698      	mov	r8, r3
     dac:	e7e1      	b.n	d72 <udi_msc_cbw_received+0x64e>
     dae:	2305      	movs	r3, #5
     db0:	e776      	b.n	ca0 <udi_msc_cbw_received+0x57c>
     db2:	2304      	movs	r3, #4
     db4:	4698      	mov	r8, r3
     db6:	e7dc      	b.n	d72 <udi_msc_cbw_received+0x64e>
     db8:	2304      	movs	r3, #4
     dba:	e771      	b.n	ca0 <udi_msc_cbw_received+0x57c>
     dbc:	230f      	movs	r3, #15
     dbe:	4698      	mov	r8, r3
     dc0:	e7d7      	b.n	d72 <udi_msc_cbw_received+0x64e>
     dc2:	230f      	movs	r3, #15
     dc4:	e76c      	b.n	ca0 <udi_msc_cbw_received+0x57c>
     dc6:	230e      	movs	r3, #14
     dc8:	4698      	mov	r8, r3
     dca:	e7d2      	b.n	d72 <udi_msc_cbw_received+0x64e>
     dcc:	230d      	movs	r3, #13
     dce:	4698      	mov	r8, r3
     dd0:	e7cf      	b.n	d72 <udi_msc_cbw_received+0x64e>
     dd2:	230d      	movs	r3, #13
     dd4:	e764      	b.n	ca0 <udi_msc_cbw_received+0x57c>
     dd6:	230c      	movs	r3, #12
     dd8:	4698      	mov	r8, r3
     dda:	e7ca      	b.n	d72 <udi_msc_cbw_received+0x64e>
     ddc:	230c      	movs	r3, #12
     dde:	e75f      	b.n	ca0 <udi_msc_cbw_received+0x57c>
     de0:	230b      	movs	r3, #11
     de2:	e75d      	b.n	ca0 <udi_msc_cbw_received+0x57c>
     de4:	230a      	movs	r3, #10
     de6:	4698      	mov	r8, r3
     de8:	e7c3      	b.n	d72 <udi_msc_cbw_received+0x64e>
     dea:	230a      	movs	r3, #10
     dec:	e758      	b.n	ca0 <udi_msc_cbw_received+0x57c>
     dee:	2309      	movs	r3, #9
     df0:	4698      	mov	r8, r3
     df2:	e7be      	b.n	d72 <udi_msc_cbw_received+0x64e>
     df4:	2309      	movs	r3, #9
     df6:	e753      	b.n	ca0 <udi_msc_cbw_received+0x57c>
     df8:	2308      	movs	r3, #8
     dfa:	4698      	mov	r8, r3
     dfc:	e7b9      	b.n	d72 <udi_msc_cbw_received+0x64e>
     dfe:	2308      	movs	r3, #8
     e00:	e74e      	b.n	ca0 <udi_msc_cbw_received+0x57c>
     e02:	46c0      	nop			; (mov r8, r8)
     e04:	000001d1 	.word	0x000001d1
     e08:	20000dc0 	.word	0x20000dc0
     e0c:	0001fdfd 	.word	0x0001fdfd
     e10:	00000261 	.word	0x00000261
     e14:	0000f0cd 	.word	0x0000f0cd
     e18:	20000028 	.word	0x20000028
     e1c:	0000f0e1 	.word	0x0000f0e1
     e20:	0001fd79 	.word	0x0001fd79
     e24:	000004d9 	.word	0x000004d9

00000e28 <udi_msc_process_trans>:
{
     e28:	b5f0      	push	{r4, r5, r6, r7, lr}
     e2a:	46c6      	mov	lr, r8
     e2c:	b500      	push	{lr}
	if (!udi_msc_b_trans_req)
     e2e:	4b4b      	ldr	r3, [pc, #300]	; (f5c <udi_msc_process_trans+0x134>)
{
     e30:	b082      	sub	sp, #8
	if (!udi_msc_b_trans_req)
     e32:	781c      	ldrb	r4, [r3, #0]
     e34:	2c00      	cmp	r4, #0
     e36:	d03f      	beq.n	eb8 <udi_msc_process_trans+0x90>
	udi_msc_b_trans_req = false;
     e38:	2200      	movs	r2, #0
     e3a:	701a      	strb	r2, [r3, #0]
	if (udi_msc_b_read) {
     e3c:	4b48      	ldr	r3, [pc, #288]	; (f60 <udi_msc_process_trans+0x138>)
	udi_msc_b_reset_trans = false;
     e3e:	4d49      	ldr	r5, [pc, #292]	; (f64 <udi_msc_process_trans+0x13c>)
	if (udi_msc_b_read) {
     e40:	781b      	ldrb	r3, [r3, #0]
	udi_msc_b_reset_trans = false;
     e42:	702a      	strb	r2, [r5, #0]
	if (udi_msc_b_read) {
     e44:	2b00      	cmp	r3, #0
     e46:	d13c      	bne.n	ec2 <udi_msc_process_trans+0x9a>
		status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
     e48:	4b47      	ldr	r3, [pc, #284]	; (f68 <udi_msc_process_trans+0x140>)
     e4a:	4e48      	ldr	r6, [pc, #288]	; (f6c <udi_msc_process_trans+0x144>)
     e4c:	881a      	ldrh	r2, [r3, #0]
     e4e:	4b48      	ldr	r3, [pc, #288]	; (f70 <udi_msc_process_trans+0x148>)
     e50:	7b70      	ldrb	r0, [r6, #13]
     e52:	6819      	ldr	r1, [r3, #0]
     e54:	4b47      	ldr	r3, [pc, #284]	; (f74 <udi_msc_process_trans+0x14c>)
     e56:	4798      	blx	r3
	if (udi_msc_b_reset_trans) {
     e58:	782b      	ldrb	r3, [r5, #0]
		status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
     e5a:	0007      	movs	r7, r0
	if (udi_msc_b_reset_trans) {
     e5c:	b2db      	uxtb	r3, r3
     e5e:	2b00      	cmp	r3, #0
     e60:	d13c      	bne.n	edc <udi_msc_process_trans+0xb4>
	switch (status) {
     e62:	2f02      	cmp	r7, #2
     e64:	d062      	beq.n	f2c <udi_msc_process_trans+0x104>
     e66:	2f03      	cmp	r7, #3
     e68:	d03c      	beq.n	ee4 <udi_msc_process_trans+0xbc>
     e6a:	2f00      	cmp	r7, #0
     e6c:	d051      	beq.n	f12 <udi_msc_process_trans+0xea>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     e6e:	4f42      	ldr	r7, [pc, #264]	; (f78 <udi_msc_process_trans+0x150>)
     e70:	4b42      	ldr	r3, [pc, #264]	; (f7c <udi_msc_process_trans+0x154>)
     e72:	2212      	movs	r2, #18
     e74:	2100      	movs	r1, #0
     e76:	0038      	movs	r0, r7
     e78:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     e7a:	23f0      	movs	r3, #240	; 0xf0
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     e7c:	4d40      	ldr	r5, [pc, #256]	; (f80 <udi_msc_process_trans+0x158>)
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     e7e:	703b      	strb	r3, [r7, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     e80:	3be6      	subs	r3, #230	; 0xe6
     e82:	71fb      	strb	r3, [r7, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     e84:	3b09      	subs	r3, #9
     e86:	732b      	strb	r3, [r5, #12]
	udi_msc_sense.sense_flag_key = sense_key;
     e88:	3303      	adds	r3, #3
     e8a:	70bb      	strb	r3, [r7, #2]
	if (0 != udi_msc_csw.dCSWDataResidue) {
     e8c:	68ab      	ldr	r3, [r5, #8]
     e8e:	2b00      	cmp	r3, #0
     e90:	d005      	beq.n	e9e <udi_msc_process_trans+0x76>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
     e92:	7b33      	ldrb	r3, [r6, #12]
     e94:	2b7f      	cmp	r3, #127	; 0x7f
     e96:	d85c      	bhi.n	f52 <udi_msc_process_trans+0x12a>
			udd_ep_set_halt(UDI_MSC_EP_OUT);
     e98:	2002      	movs	r0, #2
     e9a:	4b3a      	ldr	r3, [pc, #232]	; (f84 <udi_msc_process_trans+0x15c>)
     e9c:	4798      	blx	r3
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
     e9e:	6873      	ldr	r3, [r6, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
     ea0:	002a      	movs	r2, r5
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
     ea2:	606b      	str	r3, [r5, #4]
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
     ea4:	4b38      	ldr	r3, [pc, #224]	; (f88 <udi_msc_process_trans+0x160>)
     ea6:	2100      	movs	r1, #0
     ea8:	9300      	str	r3, [sp, #0]
     eaa:	2081      	movs	r0, #129	; 0x81
     eac:	230d      	movs	r3, #13
     eae:	4d37      	ldr	r5, [pc, #220]	; (f8c <udi_msc_process_trans+0x164>)
     eb0:	47a8      	blx	r5
     eb2:	2800      	cmp	r0, #0
     eb4:	d028      	beq.n	f08 <udi_msc_process_trans+0xe0>
	return true;
     eb6:	0004      	movs	r4, r0
}
     eb8:	0020      	movs	r0, r4
     eba:	b002      	add	sp, #8
     ebc:	bc04      	pop	{r2}
     ebe:	4690      	mov	r8, r2
     ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
     ec2:	4b29      	ldr	r3, [pc, #164]	; (f68 <udi_msc_process_trans+0x140>)
     ec4:	4e29      	ldr	r6, [pc, #164]	; (f6c <udi_msc_process_trans+0x144>)
     ec6:	881a      	ldrh	r2, [r3, #0]
     ec8:	4b29      	ldr	r3, [pc, #164]	; (f70 <udi_msc_process_trans+0x148>)
     eca:	7b70      	ldrb	r0, [r6, #13]
     ecc:	6819      	ldr	r1, [r3, #0]
     ece:	4b30      	ldr	r3, [pc, #192]	; (f90 <udi_msc_process_trans+0x168>)
     ed0:	4798      	blx	r3
	if (udi_msc_b_reset_trans) {
     ed2:	782b      	ldrb	r3, [r5, #0]
		status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
     ed4:	0007      	movs	r7, r0
	if (udi_msc_b_reset_trans) {
     ed6:	b2db      	uxtb	r3, r3
     ed8:	2b00      	cmp	r3, #0
     eda:	d0c2      	beq.n	e62 <udi_msc_process_trans+0x3a>
		udi_msc_b_reset_trans = false;
     edc:	2200      	movs	r2, #0
		return true;
     ede:	001c      	movs	r4, r3
		udi_msc_b_reset_trans = false;
     ee0:	702a      	strb	r2, [r5, #0]
		return true;
     ee2:	e7e9      	b.n	eb8 <udi_msc_process_trans+0x90>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     ee4:	4f24      	ldr	r7, [pc, #144]	; (f78 <udi_msc_process_trans+0x150>)
     ee6:	4b25      	ldr	r3, [pc, #148]	; (f7c <udi_msc_process_trans+0x154>)
     ee8:	2212      	movs	r2, #18
     eea:	2100      	movs	r1, #0
     eec:	0038      	movs	r0, r7
     eee:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     ef0:	23f0      	movs	r3, #240	; 0xf0
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     ef2:	4d23      	ldr	r5, [pc, #140]	; (f80 <udi_msc_process_trans+0x158>)
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     ef4:	703b      	strb	r3, [r7, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     ef6:	3be6      	subs	r3, #230	; 0xe6
     ef8:	71fb      	strb	r3, [r7, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     efa:	3b09      	subs	r3, #9
     efc:	732b      	strb	r3, [r5, #12]
	udi_msc_sense.sense_flag_key = sense_key;
     efe:	3305      	adds	r3, #5
     f00:	70bb      	strb	r3, [r7, #2]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
     f02:	3322      	adds	r3, #34	; 0x22
     f04:	733b      	strb	r3, [r7, #12]
     f06:	e7c1      	b.n	e8c <udi_msc_process_trans+0x64>
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
     f08:	4922      	ldr	r1, [pc, #136]	; (f94 <udi_msc_process_trans+0x16c>)
     f0a:	4b23      	ldr	r3, [pc, #140]	; (f98 <udi_msc_process_trans+0x170>)
     f0c:	3081      	adds	r0, #129	; 0x81
     f0e:	4798      	blx	r3
     f10:	e7d2      	b.n	eb8 <udi_msc_process_trans+0x90>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     f12:	4d19      	ldr	r5, [pc, #100]	; (f78 <udi_msc_process_trans+0x150>)
     f14:	4b19      	ldr	r3, [pc, #100]	; (f7c <udi_msc_process_trans+0x154>)
     f16:	0028      	movs	r0, r5
     f18:	2212      	movs	r2, #18
     f1a:	2100      	movs	r1, #0
     f1c:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     f1e:	23f0      	movs	r3, #240	; 0xf0
     f20:	702b      	strb	r3, [r5, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     f22:	3be6      	subs	r3, #230	; 0xe6
     f24:	71eb      	strb	r3, [r5, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
     f26:	4d16      	ldr	r5, [pc, #88]	; (f80 <udi_msc_process_trans+0x158>)
     f28:	732f      	strb	r7, [r5, #12]
     f2a:	e7af      	b.n	e8c <udi_msc_process_trans+0x64>
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     f2c:	4b12      	ldr	r3, [pc, #72]	; (f78 <udi_msc_process_trans+0x150>)
     f2e:	2212      	movs	r2, #18
     f30:	4698      	mov	r8, r3
     f32:	0018      	movs	r0, r3
     f34:	2100      	movs	r1, #0
     f36:	4b11      	ldr	r3, [pc, #68]	; (f7c <udi_msc_process_trans+0x154>)
     f38:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     f3a:	4642      	mov	r2, r8
     f3c:	23f0      	movs	r3, #240	; 0xf0
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     f3e:	4d10      	ldr	r5, [pc, #64]	; (f80 <udi_msc_process_trans+0x158>)
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     f40:	7013      	strb	r3, [r2, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     f42:	3be6      	subs	r3, #230	; 0xe6
     f44:	71d3      	strb	r3, [r2, #7]
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     f46:	3b09      	subs	r3, #9
     f48:	732b      	strb	r3, [r5, #12]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
     f4a:	233a      	movs	r3, #58	; 0x3a
	udi_msc_sense.sense_flag_key = sense_key;
     f4c:	7097      	strb	r7, [r2, #2]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
     f4e:	7313      	strb	r3, [r2, #12]
     f50:	e79c      	b.n	e8c <udi_msc_process_trans+0x64>
			udd_ep_set_halt(UDI_MSC_EP_IN);
     f52:	4b0c      	ldr	r3, [pc, #48]	; (f84 <udi_msc_process_trans+0x15c>)
     f54:	2081      	movs	r0, #129	; 0x81
     f56:	4798      	blx	r3
     f58:	e7a1      	b.n	e9e <udi_msc_process_trans+0x76>
     f5a:	46c0      	nop			; (mov r8, r8)
     f5c:	20000d8e 	.word	0x20000d8e
     f60:	20000d8d 	.word	0x20000d8d
     f64:	20000015 	.word	0x20000015
     f68:	20000db8 	.word	0x20000db8
     f6c:	20000d98 	.word	0x20000d98
     f70:	20000d88 	.word	0x20000d88
     f74:	0000f10d 	.word	0x0000f10d
     f78:	20000dc0 	.word	0x20000dc0
     f7c:	0001fdfd 	.word	0x0001fdfd
     f80:	20000018 	.word	0x20000018
     f84:	000024b1 	.word	0x000024b1
     f88:	000002c5 	.word	0x000002c5
     f8c:	00002609 	.word	0x00002609
     f90:	0000f0f1 	.word	0x0000f0f1
     f94:	00000199 	.word	0x00000199
     f98:	0000257d 	.word	0x0000257d

00000f9c <udi_msc_trans_block>:


bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
     f9c:	b570      	push	{r4, r5, r6, lr}
	if (!udi_msc_b_ack_trans)
     f9e:	4c1d      	ldr	r4, [pc, #116]	; (1014 <udi_msc_trans_block+0x78>)
{
     fa0:	0015      	movs	r5, r2
	if (!udi_msc_b_ack_trans)
     fa2:	7822      	ldrb	r2, [r4, #0]
{
     fa4:	b082      	sub	sp, #8
	if (!udi_msc_b_ack_trans)
     fa6:	2a00      	cmp	r2, #0
     fa8:	d016      	beq.n	fd8 <udi_msc_trans_block+0x3c>
		return false;	// No possible, transfer on going

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
     faa:	2200      	movs	r2, #0
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
     fac:	2602      	movs	r6, #2
	udi_msc_b_ack_trans = false;
     fae:	7022      	strb	r2, [r4, #0]
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
     fb0:	2800      	cmp	r0, #0
     fb2:	d114      	bne.n	fde <udi_msc_trans_block+0x42>
     fb4:	2b00      	cmp	r3, #0
     fb6:	d014      	beq.n	fe2 <udi_msc_trans_block+0x46>
     fb8:	9300      	str	r3, [sp, #0]
     fba:	000a      	movs	r2, r1
     fbc:	0030      	movs	r0, r6
     fbe:	002b      	movs	r3, r5
     fc0:	2100      	movs	r1, #0
     fc2:	4e15      	ldr	r6, [pc, #84]	; (1018 <udi_msc_trans_block+0x7c>)
     fc4:	47b0      	blx	r6
     fc6:	2800      	cmp	r0, #0
     fc8:	d004      	beq.n	fd4 <udi_msc_trans_block+0x38>
			return false;
		}
		udi_msc_csw.dCSWDataResidue -= block_size;
		return (!udi_msc_b_abort_trans);
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
     fca:	4b14      	ldr	r3, [pc, #80]	; (101c <udi_msc_trans_block+0x80>)
     fcc:	689a      	ldr	r2, [r3, #8]
     fce:	1b55      	subs	r5, r2, r5
     fd0:	609d      	str	r5, [r3, #8]
	return true;
     fd2:	e002      	b.n	fda <udi_msc_trans_block+0x3e>
		udi_msc_b_ack_trans = true;
     fd4:	2301      	movs	r3, #1
     fd6:	7023      	strb	r3, [r4, #0]
		return false;
     fd8:	2000      	movs	r0, #0
}
     fda:	b002      	add	sp, #8
     fdc:	bd70      	pop	{r4, r5, r6, pc}
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
     fde:	367f      	adds	r6, #127	; 0x7f
     fe0:	e7e8      	b.n	fb4 <udi_msc_trans_block+0x18>
     fe2:	4b0f      	ldr	r3, [pc, #60]	; (1020 <udi_msc_trans_block+0x84>)
     fe4:	000a      	movs	r2, r1
     fe6:	9300      	str	r3, [sp, #0]
     fe8:	0030      	movs	r0, r6
     fea:	002b      	movs	r3, r5
     fec:	2100      	movs	r1, #0
     fee:	4e0a      	ldr	r6, [pc, #40]	; (1018 <udi_msc_trans_block+0x7c>)
     ff0:	47b0      	blx	r6
     ff2:	2800      	cmp	r0, #0
     ff4:	d0ee      	beq.n	fd4 <udi_msc_trans_block+0x38>
		while (!udi_msc_b_ack_trans);
     ff6:	7823      	ldrb	r3, [r4, #0]
     ff8:	2b00      	cmp	r3, #0
     ffa:	d0fc      	beq.n	ff6 <udi_msc_trans_block+0x5a>
		if (udi_msc_b_abort_trans) {
     ffc:	4b09      	ldr	r3, [pc, #36]	; (1024 <udi_msc_trans_block+0x88>)
     ffe:	781a      	ldrb	r2, [r3, #0]
    1000:	2a00      	cmp	r2, #0
    1002:	d1e9      	bne.n	fd8 <udi_msc_trans_block+0x3c>
		return (!udi_msc_b_abort_trans);
    1004:	7818      	ldrb	r0, [r3, #0]
    1006:	2301      	movs	r3, #1
		udi_msc_csw.dCSWDataResidue -= block_size;
    1008:	4a04      	ldr	r2, [pc, #16]	; (101c <udi_msc_trans_block+0x80>)
		return (!udi_msc_b_abort_trans);
    100a:	4058      	eors	r0, r3
		udi_msc_csw.dCSWDataResidue -= block_size;
    100c:	6891      	ldr	r1, [r2, #8]
    100e:	1b4d      	subs	r5, r1, r5
    1010:	6095      	str	r5, [r2, #8]
		return (!udi_msc_b_abort_trans);
    1012:	e7e2      	b.n	fda <udi_msc_trans_block+0x3e>
    1014:	20000014 	.word	0x20000014
    1018:	00002609 	.word	0x00002609
    101c:	20000018 	.word	0x20000018
    1020:	0000011d 	.word	0x0000011d
    1024:	20001054 	.word	0x20001054

00001028 <udc_valid_address>:
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    1028:	207f      	movs	r0, #127	; 0x7f
{
    102a:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    102c:	4b02      	ldr	r3, [pc, #8]	; (1038 <udc_valid_address+0x10>)
    102e:	885b      	ldrh	r3, [r3, #2]
    1030:	4018      	ands	r0, r3
    1032:	4b02      	ldr	r3, [pc, #8]	; (103c <udc_valid_address+0x14>)
    1034:	4798      	blx	r3
}
    1036:	bd10      	pop	{r4, pc}
    1038:	20001240 	.word	0x20001240
    103c:	00002835 	.word	0x00002835

00001040 <udc_update_iface_desc.part.0>:
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
    1040:	b570      	push	{r4, r5, r6, lr}
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1042:	4b14      	ldr	r3, [pc, #80]	; (1094 <udc_update_iface_desc.part.0+0x54>)
    1044:	681b      	ldr	r3, [r3, #0]
    1046:	681b      	ldr	r3, [r3, #0]
    1048:	791a      	ldrb	r2, [r3, #4]
    104a:	4282      	cmp	r2, r0
    104c:	d91d      	bls.n	108a <udc_update_iface_desc.part.0+0x4a>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    104e:	4e12      	ldr	r6, [pc, #72]	; (1098 <udc_update_iface_desc.part.0+0x58>)
    1050:	6033      	str	r3, [r6, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    1052:	78dc      	ldrb	r4, [r3, #3]
    1054:	789a      	ldrb	r2, [r3, #2]
    1056:	0224      	lsls	r4, r4, #8
    1058:	4314      	orrs	r4, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    105a:	191c      	adds	r4, r3, r4
	while (ptr_end_desc >
    105c:	42a3      	cmp	r3, r4
    105e:	d214      	bcs.n	108a <udc_update_iface_desc.part.0+0x4a>
    1060:	2500      	movs	r5, #0
    1062:	e004      	b.n	106e <udc_update_iface_desc.part.0+0x2e>
				udc_ptr_iface->bLength);
    1064:	781a      	ldrb	r2, [r3, #0]
    1066:	2501      	movs	r5, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    1068:	189b      	adds	r3, r3, r2
	while (ptr_end_desc >
    106a:	429c      	cmp	r4, r3
    106c:	d90c      	bls.n	1088 <udc_update_iface_desc.part.0+0x48>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    106e:	785a      	ldrb	r2, [r3, #1]
    1070:	2a04      	cmp	r2, #4
    1072:	d1f7      	bne.n	1064 <udc_update_iface_desc.part.0+0x24>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    1074:	789a      	ldrb	r2, [r3, #2]
    1076:	4282      	cmp	r2, r0
    1078:	d1f4      	bne.n	1064 <udc_update_iface_desc.part.0+0x24>
    107a:	78da      	ldrb	r2, [r3, #3]
    107c:	428a      	cmp	r2, r1
    107e:	d1f1      	bne.n	1064 <udc_update_iface_desc.part.0+0x24>
    1080:	2d00      	cmp	r5, #0
    1082:	d104      	bne.n	108e <udc_update_iface_desc.part.0+0x4e>
				return true; // Interface found
    1084:	2001      	movs	r0, #1
    1086:	e001      	b.n	108c <udc_update_iface_desc.part.0+0x4c>
    1088:	6033      	str	r3, [r6, #0]
		return false;
    108a:	2000      	movs	r0, #0
}
    108c:	bd70      	pop	{r4, r5, r6, pc}
    108e:	6033      	str	r3, [r6, #0]
				return true; // Interface found
    1090:	2001      	movs	r0, #1
    1092:	e7fb      	b.n	108c <udc_update_iface_desc.part.0+0x4c>
    1094:	20000de0 	.word	0x20000de0
    1098:	20000de4 	.word	0x20000de4

0000109c <udc_iface_disable.part.1>:
static bool udc_iface_disable(uint8_t iface_num)
    109c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    109e:	4d27      	ldr	r5, [pc, #156]	; (113c <udc_iface_disable.part.1+0xa0>)
    10a0:	0082      	lsls	r2, r0, #2
    10a2:	682b      	ldr	r3, [r5, #0]
static bool udc_iface_disable(uint8_t iface_num)
    10a4:	0007      	movs	r7, r0
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    10a6:	685b      	ldr	r3, [r3, #4]
    10a8:	58d6      	ldr	r6, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    10aa:	68f3      	ldr	r3, [r6, #12]
    10ac:	4798      	blx	r3
	if (0 == udc_num_configuration) {
    10ae:	4b24      	ldr	r3, [pc, #144]	; (1140 <udc_iface_disable.part.1+0xa4>)
    10b0:	781b      	ldrb	r3, [r3, #0]
    10b2:	2b00      	cmp	r3, #0
    10b4:	d101      	bne.n	10ba <udc_iface_disable.part.1+0x1e>
		return false;
    10b6:	2000      	movs	r0, #0
}
    10b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    10ba:	682b      	ldr	r3, [r5, #0]
    10bc:	681b      	ldr	r3, [r3, #0]
    10be:	791a      	ldrb	r2, [r3, #4]
    10c0:	42ba      	cmp	r2, r7
    10c2:	d9f8      	bls.n	10b6 <udc_iface_disable.part.1+0x1a>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    10c4:	4a1f      	ldr	r2, [pc, #124]	; (1144 <udc_iface_disable.part.1+0xa8>)
    10c6:	6013      	str	r3, [r2, #0]
    10c8:	4694      	mov	ip, r2
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    10ca:	78da      	ldrb	r2, [r3, #3]
    10cc:	789c      	ldrb	r4, [r3, #2]
    10ce:	0212      	lsls	r2, r2, #8
    10d0:	4322      	orrs	r2, r4
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    10d2:	189a      	adds	r2, r3, r2
	while (ptr_end_desc >
    10d4:	4293      	cmp	r3, r2
    10d6:	d2ee      	bcs.n	10b6 <udc_iface_disable.part.1+0x1a>
    10d8:	001c      	movs	r4, r3
    10da:	2100      	movs	r1, #0
    10dc:	e004      	b.n	10e8 <udc_iface_disable.part.1+0x4c>
				udc_ptr_iface->bLength);
    10de:	7823      	ldrb	r3, [r4, #0]
    10e0:	2101      	movs	r1, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    10e2:	18e4      	adds	r4, r4, r3
	while (ptr_end_desc >
    10e4:	42a2      	cmp	r2, r4
    10e6:	d919      	bls.n	111c <udc_iface_disable.part.1+0x80>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    10e8:	7863      	ldrb	r3, [r4, #1]
    10ea:	2b04      	cmp	r3, #4
    10ec:	d1f7      	bne.n	10de <udc_iface_disable.part.1+0x42>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    10ee:	78a3      	ldrb	r3, [r4, #2]
    10f0:	42bb      	cmp	r3, r7
    10f2:	d1f4      	bne.n	10de <udc_iface_disable.part.1+0x42>
    10f4:	78e3      	ldrb	r3, [r4, #3]
    10f6:	4283      	cmp	r3, r0
    10f8:	d1f1      	bne.n	10de <udc_iface_disable.part.1+0x42>
    10fa:	2900      	cmp	r1, #0
    10fc:	d11b      	bne.n	1136 <udc_iface_disable.part.1+0x9a>
			udd_ep_free(ep_desc->bEndpointAddress);
    10fe:	4f12      	ldr	r7, [pc, #72]	; (1148 <udc_iface_disable.part.1+0xac>)
    1100:	e004      	b.n	110c <udc_iface_disable.part.1+0x70>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    1102:	7863      	ldrb	r3, [r4, #1]
    1104:	2b04      	cmp	r3, #4
    1106:	d005      	beq.n	1114 <udc_iface_disable.part.1+0x78>
		if (desc_id == desc->bDescriptorType) {
    1108:	2b05      	cmp	r3, #5
    110a:	d00a      	beq.n	1122 <udc_iface_disable.part.1+0x86>
			desc->bLength);
    110c:	7823      	ldrb	r3, [r4, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    110e:	18e4      	adds	r4, r4, r3
	while (ptr_eof_desc > desc) {
    1110:	42a2      	cmp	r2, r4
    1112:	d8f6      	bhi.n	1102 <udc_iface_disable.part.1+0x66>
	udi_api->disable();
    1114:	6873      	ldr	r3, [r6, #4]
    1116:	4798      	blx	r3
	return true;
    1118:	2001      	movs	r0, #1
    111a:	e7cd      	b.n	10b8 <udc_iface_disable.part.1+0x1c>
    111c:	4663      	mov	r3, ip
    111e:	601c      	str	r4, [r3, #0]
    1120:	e7c9      	b.n	10b6 <udc_iface_disable.part.1+0x1a>
			udd_ep_free(ep_desc->bEndpointAddress);
    1122:	78a0      	ldrb	r0, [r4, #2]
    1124:	47b8      	blx	r7
    1126:	682b      	ldr	r3, [r5, #0]
    1128:	681b      	ldr	r3, [r3, #0]
    112a:	78da      	ldrb	r2, [r3, #3]
    112c:	7899      	ldrb	r1, [r3, #2]
    112e:	0212      	lsls	r2, r2, #8
    1130:	430a      	orrs	r2, r1
    1132:	189a      	adds	r2, r3, r2
    1134:	e7ea      	b.n	110c <udc_iface_disable.part.1+0x70>
    1136:	4663      	mov	r3, ip
    1138:	601c      	str	r4, [r3, #0]
    113a:	e7e0      	b.n	10fe <udc_iface_disable.part.1+0x62>
    113c:	20000de0 	.word	0x20000de0
    1140:	20000ddc 	.word	0x20000ddc
    1144:	20000de4 	.word	0x20000de4
    1148:	000022dd 	.word	0x000022dd

0000114c <udc_start>:
{
    114c:	b510      	push	{r4, lr}
	udd_enable();
    114e:	4b01      	ldr	r3, [pc, #4]	; (1154 <udc_start+0x8>)
    1150:	4798      	blx	r3
}
    1152:	bd10      	pop	{r4, pc}
    1154:	00002971 	.word	0x00002971

00001158 <udc_stop>:
{
    1158:	b5f0      	push	{r4, r5, r6, r7, lr}
    115a:	46c6      	mov	lr, r8
	udd_disable();
    115c:	4b26      	ldr	r3, [pc, #152]	; (11f8 <udc_stop+0xa0>)
{
    115e:	b500      	push	{lr}
	udd_disable();
    1160:	4798      	blx	r3
	if (udc_num_configuration) {
    1162:	4d26      	ldr	r5, [pc, #152]	; (11fc <udc_stop+0xa4>)
    1164:	782a      	ldrb	r2, [r5, #0]
    1166:	2a00      	cmp	r2, #0
    1168:	d035      	beq.n	11d6 <udc_stop+0x7e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    116a:	4e25      	ldr	r6, [pc, #148]	; (1200 <udc_stop+0xa8>)
    116c:	6833      	ldr	r3, [r6, #0]
    116e:	681b      	ldr	r3, [r3, #0]
    1170:	7919      	ldrb	r1, [r3, #4]
		for (iface_num = 0;
    1172:	2900      	cmp	r1, #0
    1174:	d02f      	beq.n	11d6 <udc_stop+0x7e>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    1176:	4823      	ldr	r0, [pc, #140]	; (1204 <udc_stop+0xac>)
		for (iface_num = 0;
    1178:	2400      	movs	r4, #0
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    117a:	4680      	mov	r8, r0
    117c:	4f22      	ldr	r7, [pc, #136]	; (1208 <udc_stop+0xb0>)
    117e:	e004      	b.n	118a <udc_stop+0x32>
				iface_num++) {
    1180:	3401      	adds	r4, #1
    1182:	b2e4      	uxtb	r4, r4
		for (iface_num = 0;
    1184:	428c      	cmp	r4, r1
    1186:	d226      	bcs.n	11d6 <udc_stop+0x7e>
    1188:	782a      	ldrb	r2, [r5, #0]
	if (0 == udc_num_configuration) {
    118a:	2a00      	cmp	r2, #0
    118c:	d0f8      	beq.n	1180 <udc_stop+0x28>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    118e:	4642      	mov	r2, r8
    1190:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    1192:	78d9      	ldrb	r1, [r3, #3]
    1194:	789a      	ldrb	r2, [r3, #2]
    1196:	0209      	lsls	r1, r1, #8
    1198:	4311      	orrs	r1, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    119a:	1859      	adds	r1, r3, r1
	while (ptr_end_desc >
    119c:	2000      	movs	r0, #0
    119e:	428b      	cmp	r3, r1
    11a0:	d305      	bcc.n	11ae <udc_stop+0x56>
    11a2:	e022      	b.n	11ea <udc_stop+0x92>
				udc_ptr_iface->bLength);
    11a4:	781a      	ldrb	r2, [r3, #0]
    11a6:	2001      	movs	r0, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    11a8:	189b      	adds	r3, r3, r2
	while (ptr_end_desc >
    11aa:	4299      	cmp	r1, r3
    11ac:	d91b      	bls.n	11e6 <udc_stop+0x8e>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    11ae:	785a      	ldrb	r2, [r3, #1]
    11b0:	2a04      	cmp	r2, #4
    11b2:	d1f7      	bne.n	11a4 <udc_stop+0x4c>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    11b4:	789a      	ldrb	r2, [r3, #2]
    11b6:	42a2      	cmp	r2, r4
    11b8:	d1f4      	bne.n	11a4 <udc_stop+0x4c>
    11ba:	78da      	ldrb	r2, [r3, #3]
    11bc:	2a00      	cmp	r2, #0
    11be:	d1f1      	bne.n	11a4 <udc_stop+0x4c>
    11c0:	2800      	cmp	r0, #0
    11c2:	d116      	bne.n	11f2 <udc_stop+0x9a>
    11c4:	0020      	movs	r0, r4
    11c6:	47b8      	blx	r7
    11c8:	6833      	ldr	r3, [r6, #0]
				iface_num++) {
    11ca:	3401      	adds	r4, #1
    11cc:	681b      	ldr	r3, [r3, #0]
    11ce:	b2e4      	uxtb	r4, r4
    11d0:	7919      	ldrb	r1, [r3, #4]
		for (iface_num = 0;
    11d2:	428c      	cmp	r4, r1
    11d4:	d3d8      	bcc.n	1188 <udc_stop+0x30>
	udc_num_configuration = 0;
    11d6:	2300      	movs	r3, #0
	udc_device_status =
    11d8:	2201      	movs	r2, #1
	udc_num_configuration = 0;
    11da:	702b      	strb	r3, [r5, #0]
	udc_device_status =
    11dc:	4b0b      	ldr	r3, [pc, #44]	; (120c <udc_stop+0xb4>)
    11de:	801a      	strh	r2, [r3, #0]
}
    11e0:	bc04      	pop	{r2}
    11e2:	4690      	mov	r8, r2
    11e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11e6:	4642      	mov	r2, r8
    11e8:	6013      	str	r3, [r2, #0]
    11ea:	6833      	ldr	r3, [r6, #0]
    11ec:	681b      	ldr	r3, [r3, #0]
    11ee:	7919      	ldrb	r1, [r3, #4]
    11f0:	e7c6      	b.n	1180 <udc_stop+0x28>
    11f2:	4642      	mov	r2, r8
    11f4:	6013      	str	r3, [r2, #0]
    11f6:	e7e5      	b.n	11c4 <udc_stop+0x6c>
    11f8:	00002a8d 	.word	0x00002a8d
    11fc:	20000ddc 	.word	0x20000ddc
    1200:	20000de0 	.word	0x20000de0
    1204:	20000de4 	.word	0x20000de4
    1208:	0000109d 	.word	0x0000109d
    120c:	20000dd2 	.word	0x20000dd2

00001210 <udc_reset>:
{
    1210:	b5f0      	push	{r4, r5, r6, r7, lr}
    1212:	46c6      	mov	lr, r8
    1214:	b500      	push	{lr}
	if (udc_num_configuration) {
    1216:	4d25      	ldr	r5, [pc, #148]	; (12ac <udc_reset+0x9c>)
    1218:	782a      	ldrb	r2, [r5, #0]
    121a:	2a00      	cmp	r2, #0
    121c:	d035      	beq.n	128a <udc_reset+0x7a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    121e:	4e24      	ldr	r6, [pc, #144]	; (12b0 <udc_reset+0xa0>)
    1220:	6833      	ldr	r3, [r6, #0]
    1222:	681b      	ldr	r3, [r3, #0]
    1224:	7919      	ldrb	r1, [r3, #4]
		for (iface_num = 0;
    1226:	2900      	cmp	r1, #0
    1228:	d02f      	beq.n	128a <udc_reset+0x7a>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    122a:	4822      	ldr	r0, [pc, #136]	; (12b4 <udc_reset+0xa4>)
		for (iface_num = 0;
    122c:	2400      	movs	r4, #0
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    122e:	4680      	mov	r8, r0
    1230:	4f21      	ldr	r7, [pc, #132]	; (12b8 <udc_reset+0xa8>)
    1232:	e004      	b.n	123e <udc_reset+0x2e>
				iface_num++) {
    1234:	3401      	adds	r4, #1
    1236:	b2e4      	uxtb	r4, r4
		for (iface_num = 0;
    1238:	428c      	cmp	r4, r1
    123a:	d226      	bcs.n	128a <udc_reset+0x7a>
    123c:	782a      	ldrb	r2, [r5, #0]
	if (0 == udc_num_configuration) {
    123e:	2a00      	cmp	r2, #0
    1240:	d0f8      	beq.n	1234 <udc_reset+0x24>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    1242:	4642      	mov	r2, r8
    1244:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    1246:	78d9      	ldrb	r1, [r3, #3]
    1248:	789a      	ldrb	r2, [r3, #2]
    124a:	0209      	lsls	r1, r1, #8
    124c:	4311      	orrs	r1, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    124e:	1859      	adds	r1, r3, r1
	while (ptr_end_desc >
    1250:	2000      	movs	r0, #0
    1252:	4299      	cmp	r1, r3
    1254:	d805      	bhi.n	1262 <udc_reset+0x52>
    1256:	e022      	b.n	129e <udc_reset+0x8e>
				udc_ptr_iface->bLength);
    1258:	781a      	ldrb	r2, [r3, #0]
    125a:	2001      	movs	r0, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    125c:	189b      	adds	r3, r3, r2
	while (ptr_end_desc >
    125e:	4299      	cmp	r1, r3
    1260:	d91b      	bls.n	129a <udc_reset+0x8a>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    1262:	785a      	ldrb	r2, [r3, #1]
    1264:	2a04      	cmp	r2, #4
    1266:	d1f7      	bne.n	1258 <udc_reset+0x48>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    1268:	789a      	ldrb	r2, [r3, #2]
    126a:	42a2      	cmp	r2, r4
    126c:	d1f4      	bne.n	1258 <udc_reset+0x48>
    126e:	78da      	ldrb	r2, [r3, #3]
    1270:	2a00      	cmp	r2, #0
    1272:	d1f1      	bne.n	1258 <udc_reset+0x48>
    1274:	2800      	cmp	r0, #0
    1276:	d116      	bne.n	12a6 <udc_reset+0x96>
    1278:	0020      	movs	r0, r4
    127a:	47b8      	blx	r7
    127c:	6833      	ldr	r3, [r6, #0]
				iface_num++) {
    127e:	3401      	adds	r4, #1
    1280:	681b      	ldr	r3, [r3, #0]
    1282:	b2e4      	uxtb	r4, r4
    1284:	7919      	ldrb	r1, [r3, #4]
		for (iface_num = 0;
    1286:	428c      	cmp	r4, r1
    1288:	d3d8      	bcc.n	123c <udc_reset+0x2c>
	udc_num_configuration = 0;
    128a:	2300      	movs	r3, #0
	udc_device_status =
    128c:	2201      	movs	r2, #1
	udc_num_configuration = 0;
    128e:	702b      	strb	r3, [r5, #0]
	udc_device_status =
    1290:	4b0a      	ldr	r3, [pc, #40]	; (12bc <udc_reset+0xac>)
    1292:	801a      	strh	r2, [r3, #0]
}
    1294:	bc04      	pop	{r2}
    1296:	4690      	mov	r8, r2
    1298:	bdf0      	pop	{r4, r5, r6, r7, pc}
    129a:	4642      	mov	r2, r8
    129c:	6013      	str	r3, [r2, #0]
    129e:	6833      	ldr	r3, [r6, #0]
    12a0:	681b      	ldr	r3, [r3, #0]
    12a2:	7919      	ldrb	r1, [r3, #4]
    12a4:	e7c6      	b.n	1234 <udc_reset+0x24>
    12a6:	4642      	mov	r2, r8
    12a8:	6013      	str	r3, [r2, #0]
    12aa:	e7e5      	b.n	1278 <udc_reset+0x68>
    12ac:	20000ddc 	.word	0x20000ddc
    12b0:	20000de0 	.word	0x20000de0
    12b4:	20000de4 	.word	0x20000de4
    12b8:	0000109d 	.word	0x0000109d
    12bc:	20000dd2 	.word	0x20000dd2

000012c0 <udc_sof_notify>:
{
    12c0:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    12c2:	4b0d      	ldr	r3, [pc, #52]	; (12f8 <udc_sof_notify+0x38>)
    12c4:	781b      	ldrb	r3, [r3, #0]
    12c6:	2b00      	cmp	r3, #0
    12c8:	d014      	beq.n	12f4 <udc_sof_notify+0x34>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    12ca:	4d0c      	ldr	r5, [pc, #48]	; (12fc <udc_sof_notify+0x3c>)
    12cc:	682a      	ldr	r2, [r5, #0]
    12ce:	6813      	ldr	r3, [r2, #0]
    12d0:	7919      	ldrb	r1, [r3, #4]
		for (iface_num = 0;
    12d2:	2900      	cmp	r1, #0
    12d4:	d00e      	beq.n	12f4 <udc_sof_notify+0x34>
    12d6:	2400      	movs	r4, #0
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    12d8:	6850      	ldr	r0, [r2, #4]
    12da:	00a3      	lsls	r3, r4, #2
    12dc:	581b      	ldr	r3, [r3, r0]
    12de:	691b      	ldr	r3, [r3, #16]
    12e0:	2b00      	cmp	r3, #0
    12e2:	d003      	beq.n	12ec <udc_sof_notify+0x2c>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    12e4:	4798      	blx	r3
    12e6:	682a      	ldr	r2, [r5, #0]
    12e8:	6813      	ldr	r3, [r2, #0]
    12ea:	7919      	ldrb	r1, [r3, #4]
				iface_num++) {
    12ec:	3401      	adds	r4, #1
    12ee:	b2e4      	uxtb	r4, r4
		for (iface_num = 0;
    12f0:	428c      	cmp	r4, r1
    12f2:	d3f1      	bcc.n	12d8 <udc_sof_notify+0x18>
}
    12f4:	bd70      	pop	{r4, r5, r6, pc}
    12f6:	46c0      	nop			; (mov r8, r8)
    12f8:	20000ddc 	.word	0x20000ddc
    12fc:	20000de0 	.word	0x20000de0

00001300 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1300:	b5f0      	push	{r4, r5, r6, r7, lr}
    1302:	46de      	mov	lr, fp
    1304:	4657      	mov	r7, sl
    1306:	464e      	mov	r6, r9
    1308:	4645      	mov	r5, r8
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    130a:	2300      	movs	r3, #0
{
    130c:	b5e0      	push	{r5, r6, r7, lr}
	udd_g_ctrlreq.payload_size = 0;
    130e:	4cba      	ldr	r4, [pc, #744]	; (15f8 <udc_process_setup+0x2f8>)
{
    1310:	b083      	sub	sp, #12
	udd_g_ctrlreq.payload_size = 0;
    1312:	81a3      	strh	r3, [r4, #12]
	udd_g_ctrlreq.callback = NULL;
    1314:	6123      	str	r3, [r4, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    1316:	6163      	str	r3, [r4, #20]

	if (Udd_setup_is_in()) {
    1318:	7823      	ldrb	r3, [r4, #0]
    131a:	b25a      	sxtb	r2, r3
    131c:	2a00      	cmp	r2, #0
    131e:	db13      	blt.n	1348 <udc_process_setup+0x48>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1320:	2260      	movs	r2, #96	; 0x60
    1322:	421a      	tst	r2, r3
    1324:	d100      	bne.n	1328 <udc_process_setup+0x28>
    1326:	e071      	b.n	140c <udc_process_setup+0x10c>
    1328:	221f      	movs	r2, #31
    132a:	4013      	ands	r3, r2
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    132c:	2b01      	cmp	r3, #1
    132e:	d100      	bne.n	1332 <udc_process_setup+0x32>
    1330:	e08d      	b.n	144e <udc_process_setup+0x14e>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1332:	2b02      	cmp	r3, #2
    1334:	d023      	beq.n	137e <udc_process_setup+0x7e>
			return false; // Error from USB host
    1336:	2500      	movs	r5, #0
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1338:	0028      	movs	r0, r5
    133a:	b003      	add	sp, #12
    133c:	bc3c      	pop	{r2, r3, r4, r5}
    133e:	4690      	mov	r8, r2
    1340:	4699      	mov	r9, r3
    1342:	46a2      	mov	sl, r4
    1344:	46ab      	mov	fp, r5
    1346:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
    1348:	88e2      	ldrh	r2, [r4, #6]
    134a:	2a00      	cmp	r2, #0
    134c:	d0f3      	beq.n	1336 <udc_process_setup+0x36>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    134e:	2160      	movs	r1, #96	; 0x60
    1350:	4219      	tst	r1, r3
    1352:	d1e9      	bne.n	1328 <udc_process_setup+0x28>
    1354:	211f      	movs	r1, #31
    1356:	400b      	ands	r3, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1358:	d000      	beq.n	135c <udc_process_setup+0x5c>
    135a:	e0e3      	b.n	1524 <udc_process_setup+0x224>
			switch (udd_g_ctrlreq.req.bRequest) {
    135c:	7863      	ldrb	r3, [r4, #1]
    135e:	2b06      	cmp	r3, #6
    1360:	d100      	bne.n	1364 <udc_process_setup+0x64>
    1362:	e1a9      	b.n	16b8 <udc_process_setup+0x3b8>
    1364:	2b08      	cmp	r3, #8
    1366:	d100      	bne.n	136a <udc_process_setup+0x6a>
    1368:	e19d      	b.n	16a6 <udc_process_setup+0x3a6>
    136a:	2b00      	cmp	r3, #0
    136c:	d1e3      	bne.n	1336 <udc_process_setup+0x36>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    136e:	2a02      	cmp	r2, #2
    1370:	d1e1      	bne.n	1336 <udc_process_setup+0x36>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1372:	391d      	subs	r1, #29
    1374:	48a1      	ldr	r0, [pc, #644]	; (15fc <udc_process_setup+0x2fc>)
    1376:	4ba2      	ldr	r3, [pc, #648]	; (1600 <udc_process_setup+0x300>)
    1378:	4798      	blx	r3
			return true;
    137a:	2501      	movs	r5, #1
    137c:	e7dc      	b.n	1338 <udc_process_setup+0x38>
	if (0 == udc_num_configuration) {
    137e:	4fa1      	ldr	r7, [pc, #644]	; (1604 <udc_process_setup+0x304>)
    1380:	783b      	ldrb	r3, [r7, #0]
    1382:	2b00      	cmp	r3, #0
    1384:	d0d7      	beq.n	1336 <udc_process_setup+0x36>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1386:	4ea0      	ldr	r6, [pc, #640]	; (1608 <udc_process_setup+0x308>)
    1388:	6833      	ldr	r3, [r6, #0]
    138a:	681a      	ldr	r2, [r3, #0]
    138c:	7912      	ldrb	r2, [r2, #4]
    138e:	2a00      	cmp	r2, #0
    1390:	d0d1      	beq.n	1336 <udc_process_setup+0x36>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    1392:	4a9e      	ldr	r2, [pc, #632]	; (160c <udc_process_setup+0x30c>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1394:	2400      	movs	r4, #0
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    1396:	4690      	mov	r8, r2
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1398:	685b      	ldr	r3, [r3, #4]
    139a:	00a2      	lsls	r2, r4, #2
    139c:	58d5      	ldr	r5, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    139e:	68eb      	ldr	r3, [r5, #12]
    13a0:	4798      	blx	r3
	if (0 == udc_num_configuration) {
    13a2:	783b      	ldrb	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    13a4:	4684      	mov	ip, r0
	if (0 == udc_num_configuration) {
    13a6:	2b00      	cmp	r3, #0
    13a8:	d0c5      	beq.n	1336 <udc_process_setup+0x36>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    13aa:	6833      	ldr	r3, [r6, #0]
    13ac:	681b      	ldr	r3, [r3, #0]
    13ae:	791a      	ldrb	r2, [r3, #4]
    13b0:	42a2      	cmp	r2, r4
    13b2:	d9c0      	bls.n	1336 <udc_process_setup+0x36>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    13b4:	4642      	mov	r2, r8
    13b6:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    13b8:	78d9      	ldrb	r1, [r3, #3]
    13ba:	789a      	ldrb	r2, [r3, #2]
    13bc:	0209      	lsls	r1, r1, #8
    13be:	4311      	orrs	r1, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    13c0:	1859      	adds	r1, r3, r1
	while (ptr_end_desc >
    13c2:	428b      	cmp	r3, r1
    13c4:	d2b7      	bcs.n	1336 <udc_process_setup+0x36>
    13c6:	2000      	movs	r0, #0
    13c8:	e004      	b.n	13d4 <udc_process_setup+0xd4>
				udc_ptr_iface->bLength);
    13ca:	781a      	ldrb	r2, [r3, #0]
    13cc:	2001      	movs	r0, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    13ce:	189b      	adds	r3, r3, r2
	while (ptr_end_desc >
    13d0:	4299      	cmp	r1, r3
    13d2:	d918      	bls.n	1406 <udc_process_setup+0x106>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    13d4:	785a      	ldrb	r2, [r3, #1]
    13d6:	2a04      	cmp	r2, #4
    13d8:	d1f7      	bne.n	13ca <udc_process_setup+0xca>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    13da:	789a      	ldrb	r2, [r3, #2]
    13dc:	42a2      	cmp	r2, r4
    13de:	d1f4      	bne.n	13ca <udc_process_setup+0xca>
    13e0:	78da      	ldrb	r2, [r3, #3]
    13e2:	4562      	cmp	r2, ip
    13e4:	d1f1      	bne.n	13ca <udc_process_setup+0xca>
    13e6:	2800      	cmp	r0, #0
    13e8:	d000      	beq.n	13ec <udc_process_setup+0xec>
    13ea:	e2a9      	b.n	1940 <udc_process_setup+0x640>
		if (udi_api->setup()) {
    13ec:	68ab      	ldr	r3, [r5, #8]
    13ee:	4798      	blx	r3
    13f0:	2800      	cmp	r0, #0
    13f2:	d000      	beq.n	13f6 <udc_process_setup+0xf6>
    13f4:	e082      	b.n	14fc <udc_process_setup+0x1fc>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    13f6:	6833      	ldr	r3, [r6, #0]
			iface_num++) {
    13f8:	3401      	adds	r4, #1
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    13fa:	681a      	ldr	r2, [r3, #0]
			iface_num++) {
    13fc:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    13fe:	7912      	ldrb	r2, [r2, #4]
    1400:	42a2      	cmp	r2, r4
    1402:	d8c9      	bhi.n	1398 <udc_process_setup+0x98>
    1404:	e797      	b.n	1336 <udc_process_setup+0x36>
    1406:	4642      	mov	r2, r8
    1408:	6013      	str	r3, [r2, #0]
    140a:	e794      	b.n	1336 <udc_process_setup+0x36>
    140c:	251f      	movs	r5, #31
    140e:	402b      	ands	r3, r5
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1410:	d158      	bne.n	14c4 <udc_process_setup+0x1c4>
			switch (udd_g_ctrlreq.req.bRequest) {
    1412:	7863      	ldrb	r3, [r4, #1]
    1414:	2b03      	cmp	r3, #3
    1416:	d100      	bne.n	141a <udc_process_setup+0x11a>
    1418:	e78d      	b.n	1336 <udc_process_setup+0x36>
    141a:	d971      	bls.n	1500 <udc_process_setup+0x200>
    141c:	2b05      	cmp	r3, #5
    141e:	d100      	bne.n	1422 <udc_process_setup+0x122>
    1420:	e0de      	b.n	15e0 <udc_process_setup+0x2e0>
    1422:	2b09      	cmp	r3, #9
    1424:	d000      	beq.n	1428 <udc_process_setup+0x128>
    1426:	e786      	b.n	1336 <udc_process_setup+0x36>
	if (udd_g_ctrlreq.req.wLength) {
    1428:	88e3      	ldrh	r3, [r4, #6]
    142a:	2b00      	cmp	r3, #0
    142c:	d000      	beq.n	1430 <udc_process_setup+0x130>
    142e:	e782      	b.n	1336 <udc_process_setup+0x36>
	if (!udd_getaddress()) {
    1430:	4b77      	ldr	r3, [pc, #476]	; (1610 <udc_process_setup+0x310>)
    1432:	4798      	blx	r3
    1434:	2800      	cmp	r0, #0
    1436:	d006      	beq.n	1446 <udc_process_setup+0x146>
				udc_config.confdev_lsfs->bNumConfigurations) {
    1438:	4d76      	ldr	r5, [pc, #472]	; (1614 <udc_process_setup+0x314>)
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    143a:	78a2      	ldrb	r2, [r4, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
    143c:	682b      	ldr	r3, [r5, #0]
    143e:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1440:	429a      	cmp	r2, r3
    1442:	dc00      	bgt.n	1446 <udc_process_setup+0x146>
    1444:	e18f      	b.n	1766 <udc_process_setup+0x466>
    1446:	231f      	movs	r3, #31
    1448:	7822      	ldrb	r2, [r4, #0]
    144a:	4013      	ands	r3, r2
    144c:	e76e      	b.n	132c <udc_process_setup+0x2c>
    144e:	4f6d      	ldr	r7, [pc, #436]	; (1604 <udc_process_setup+0x304>)
    1450:	783b      	ldrb	r3, [r7, #0]
	if (0 == udc_num_configuration) {
    1452:	2b00      	cmp	r3, #0
    1454:	d100      	bne.n	1458 <udc_process_setup+0x158>
    1456:	e76e      	b.n	1336 <udc_process_setup+0x36>
    1458:	4e6b      	ldr	r6, [pc, #428]	; (1608 <udc_process_setup+0x308>)
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    145a:	6833      	ldr	r3, [r6, #0]
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    145c:	7925      	ldrb	r5, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    145e:	469c      	mov	ip, r3
    1460:	681b      	ldr	r3, [r3, #0]
    1462:	791a      	ldrb	r2, [r3, #4]
    1464:	42aa      	cmp	r2, r5
    1466:	d800      	bhi.n	146a <udc_process_setup+0x16a>
    1468:	e765      	b.n	1336 <udc_process_setup+0x36>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    146a:	4a68      	ldr	r2, [pc, #416]	; (160c <udc_process_setup+0x30c>)
    146c:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    146e:	78d9      	ldrb	r1, [r3, #3]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    1470:	4690      	mov	r8, r2
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    1472:	789a      	ldrb	r2, [r3, #2]
    1474:	0209      	lsls	r1, r1, #8
    1476:	4311      	orrs	r1, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    1478:	1859      	adds	r1, r3, r1
	while (ptr_end_desc >
    147a:	428b      	cmp	r3, r1
    147c:	d21e      	bcs.n	14bc <udc_process_setup+0x1bc>
    147e:	2000      	movs	r0, #0
    1480:	e005      	b.n	148e <udc_process_setup+0x18e>
				udc_ptr_iface->bLength);
    1482:	781a      	ldrb	r2, [r3, #0]
    1484:	2001      	movs	r0, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    1486:	189b      	adds	r3, r3, r2
	while (ptr_end_desc >
    1488:	4299      	cmp	r1, r3
    148a:	d800      	bhi.n	148e <udc_process_setup+0x18e>
    148c:	e0b0      	b.n	15f0 <udc_process_setup+0x2f0>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    148e:	785a      	ldrb	r2, [r3, #1]
    1490:	2a04      	cmp	r2, #4
    1492:	d1f6      	bne.n	1482 <udc_process_setup+0x182>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    1494:	789a      	ldrb	r2, [r3, #2]
    1496:	42aa      	cmp	r2, r5
    1498:	d1f3      	bne.n	1482 <udc_process_setup+0x182>
    149a:	78da      	ldrb	r2, [r3, #3]
    149c:	2a00      	cmp	r2, #0
    149e:	d1f0      	bne.n	1482 <udc_process_setup+0x182>
    14a0:	2800      	cmp	r0, #0
    14a2:	d000      	beq.n	14a6 <udc_process_setup+0x1a6>
    14a4:	e249      	b.n	193a <udc_process_setup+0x63a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    14a6:	4663      	mov	r3, ip
    14a8:	685b      	ldr	r3, [r3, #4]
    14aa:	00aa      	lsls	r2, r5, #2
    14ac:	58d3      	ldr	r3, [r2, r3]
    14ae:	4699      	mov	r9, r3
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    14b0:	68db      	ldr	r3, [r3, #12]
    14b2:	4798      	blx	r3
	if (0 == udc_num_configuration) {
    14b4:	783b      	ldrb	r3, [r7, #0]
    14b6:	2b00      	cmp	r3, #0
    14b8:	d000      	beq.n	14bc <udc_process_setup+0x1bc>
    14ba:	e128      	b.n	170e <udc_process_setup+0x40e>
    14bc:	231f      	movs	r3, #31
    14be:	7822      	ldrb	r2, [r4, #0]
    14c0:	4013      	ands	r3, r2
    14c2:	e736      	b.n	1332 <udc_process_setup+0x32>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    14c4:	2b01      	cmp	r3, #1
    14c6:	d045      	beq.n	1554 <udc_process_setup+0x254>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    14c8:	2b02      	cmp	r3, #2
    14ca:	d000      	beq.n	14ce <udc_process_setup+0x1ce>
    14cc:	e733      	b.n	1336 <udc_process_setup+0x36>
			switch (udd_g_ctrlreq.req.bRequest) {
    14ce:	7863      	ldrb	r3, [r4, #1]
    14d0:	2b01      	cmp	r3, #1
    14d2:	d100      	bne.n	14d6 <udc_process_setup+0x1d6>
    14d4:	e0b0      	b.n	1638 <udc_process_setup+0x338>
    14d6:	2b03      	cmp	r3, #3
    14d8:	d000      	beq.n	14dc <udc_process_setup+0x1dc>
    14da:	e750      	b.n	137e <udc_process_setup+0x7e>
	if (udd_g_ctrlreq.req.wLength) {
    14dc:	88e3      	ldrh	r3, [r4, #6]
    14de:	2b00      	cmp	r3, #0
    14e0:	d000      	beq.n	14e4 <udc_process_setup+0x1e4>
    14e2:	e74c      	b.n	137e <udc_process_setup+0x7e>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    14e4:	8863      	ldrh	r3, [r4, #2]
    14e6:	2b00      	cmp	r3, #0
    14e8:	d000      	beq.n	14ec <udc_process_setup+0x1ec>
    14ea:	e748      	b.n	137e <udc_process_setup+0x7e>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    14ec:	7920      	ldrb	r0, [r4, #4]
    14ee:	4b4a      	ldr	r3, [pc, #296]	; (1618 <udc_process_setup+0x318>)
    14f0:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    14f2:	7920      	ldrb	r0, [r4, #4]
    14f4:	4b49      	ldr	r3, [pc, #292]	; (161c <udc_process_setup+0x31c>)
    14f6:	4798      	blx	r3
		if (udc_reqstd()) {
    14f8:	2800      	cmp	r0, #0
    14fa:	d0a4      	beq.n	1446 <udc_process_setup+0x146>
			return true;
    14fc:	2501      	movs	r5, #1
    14fe:	e71b      	b.n	1338 <udc_process_setup+0x38>
			switch (udd_g_ctrlreq.req.bRequest) {
    1500:	2b01      	cmp	r3, #1
    1502:	d000      	beq.n	1506 <udc_process_setup+0x206>
    1504:	e717      	b.n	1336 <udc_process_setup+0x36>
	if (udd_g_ctrlreq.req.wLength) {
    1506:	88e3      	ldrh	r3, [r4, #6]
    1508:	2b00      	cmp	r3, #0
    150a:	d000      	beq.n	150e <udc_process_setup+0x20e>
    150c:	e713      	b.n	1336 <udc_process_setup+0x36>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    150e:	8863      	ldrh	r3, [r4, #2]
    1510:	2b01      	cmp	r3, #1
    1512:	d000      	beq.n	1516 <udc_process_setup+0x216>
    1514:	e70f      	b.n	1336 <udc_process_setup+0x36>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1516:	2102      	movs	r1, #2
    1518:	4a38      	ldr	r2, [pc, #224]	; (15fc <udc_process_setup+0x2fc>)
			return true;
    151a:	2501      	movs	r5, #1
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    151c:	8813      	ldrh	r3, [r2, #0]
    151e:	438b      	bics	r3, r1
    1520:	8013      	strh	r3, [r2, #0]
    1522:	e709      	b.n	1338 <udc_process_setup+0x38>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1524:	2b01      	cmp	r3, #1
    1526:	d100      	bne.n	152a <udc_process_setup+0x22a>
    1528:	e092      	b.n	1650 <udc_process_setup+0x350>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    152a:	2b02      	cmp	r3, #2
    152c:	d000      	beq.n	1530 <udc_process_setup+0x230>
    152e:	e702      	b.n	1336 <udc_process_setup+0x36>
			switch (udd_g_ctrlreq.req.bRequest) {
    1530:	7863      	ldrb	r3, [r4, #1]
    1532:	2b00      	cmp	r3, #0
    1534:	d000      	beq.n	1538 <udc_process_setup+0x238>
    1536:	e722      	b.n	137e <udc_process_setup+0x7e>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1538:	2a02      	cmp	r2, #2
    153a:	d000      	beq.n	153e <udc_process_setup+0x23e>
    153c:	e71f      	b.n	137e <udc_process_setup+0x7e>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    153e:	4b38      	ldr	r3, [pc, #224]	; (1620 <udc_process_setup+0x320>)
    1540:	7920      	ldrb	r0, [r4, #4]
    1542:	4798      	blx	r3
    1544:	4b37      	ldr	r3, [pc, #220]	; (1624 <udc_process_setup+0x324>)
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1546:	2102      	movs	r1, #2
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
    1548:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    154a:	0018      	movs	r0, r3
    154c:	4b2c      	ldr	r3, [pc, #176]	; (1600 <udc_process_setup+0x300>)
    154e:	4798      	blx	r3
			return true;
    1550:	2501      	movs	r5, #1
    1552:	e6f1      	b.n	1338 <udc_process_setup+0x38>
			switch (udd_g_ctrlreq.req.bRequest) {
    1554:	7863      	ldrb	r3, [r4, #1]
    1556:	2b0b      	cmp	r3, #11
    1558:	d000      	beq.n	155c <udc_process_setup+0x25c>
    155a:	e774      	b.n	1446 <udc_process_setup+0x146>
	if (udd_g_ctrlreq.req.wLength) {
    155c:	88e3      	ldrh	r3, [r4, #6]
    155e:	2b00      	cmp	r3, #0
    1560:	d000      	beq.n	1564 <udc_process_setup+0x264>
    1562:	e774      	b.n	144e <udc_process_setup+0x14e>
	if (!udc_num_configuration) {
    1564:	4b27      	ldr	r3, [pc, #156]	; (1604 <udc_process_setup+0x304>)
    1566:	4699      	mov	r9, r3
    1568:	781b      	ldrb	r3, [r3, #0]
    156a:	2b00      	cmp	r3, #0
    156c:	d100      	bne.n	1570 <udc_process_setup+0x270>
    156e:	e6e2      	b.n	1336 <udc_process_setup+0x36>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1570:	7927      	ldrb	r7, [r4, #4]
    1572:	4b2d      	ldr	r3, [pc, #180]	; (1628 <udc_process_setup+0x328>)
    1574:	2100      	movs	r1, #0
    1576:	0038      	movs	r0, r7
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1578:	8866      	ldrh	r6, [r4, #2]
    157a:	4698      	mov	r8, r3
    157c:	4798      	blx	r3
	if (!udc_update_iface_desc(iface_num, 0)) {
    157e:	2800      	cmp	r0, #0
    1580:	d100      	bne.n	1584 <udc_process_setup+0x284>
    1582:	e760      	b.n	1446 <udc_process_setup+0x146>
    1584:	0038      	movs	r0, r7
    1586:	4b29      	ldr	r3, [pc, #164]	; (162c <udc_process_setup+0x32c>)
    1588:	4798      	blx	r3
	if (!udc_iface_disable(iface_num)) {
    158a:	2800      	cmp	r0, #0
    158c:	d100      	bne.n	1590 <udc_process_setup+0x290>
    158e:	e1cc      	b.n	192a <udc_process_setup+0x62a>
	if (0 == udc_num_configuration) {
    1590:	464b      	mov	r3, r9
    1592:	781b      	ldrb	r3, [r3, #0]
    1594:	2b00      	cmp	r3, #0
    1596:	d100      	bne.n	159a <udc_process_setup+0x29a>
    1598:	e755      	b.n	1446 <udc_process_setup+0x146>
    159a:	b2f1      	uxtb	r1, r6
    159c:	0038      	movs	r0, r7
    159e:	47c0      	blx	r8
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    15a0:	2800      	cmp	r0, #0
    15a2:	d100      	bne.n	15a6 <udc_process_setup+0x2a6>
    15a4:	e74f      	b.n	1446 <udc_process_setup+0x146>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    15a6:	4b19      	ldr	r3, [pc, #100]	; (160c <udc_process_setup+0x30c>)
    15a8:	4e17      	ldr	r6, [pc, #92]	; (1608 <udc_process_setup+0x308>)
    15aa:	681d      	ldr	r5, [r3, #0]
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    15ac:	4b20      	ldr	r3, [pc, #128]	; (1630 <udc_process_setup+0x330>)
    15ae:	4698      	mov	r8, r3
			udc_ptr_conf->desc +
    15b0:	6830      	ldr	r0, [r6, #0]
    15b2:	6803      	ldr	r3, [r0, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    15b4:	78da      	ldrb	r2, [r3, #3]
    15b6:	7899      	ldrb	r1, [r3, #2]
    15b8:	0212      	lsls	r2, r2, #8
    15ba:	430a      	orrs	r2, r1
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    15bc:	189b      	adds	r3, r3, r2
    15be:	e005      	b.n	15cc <udc_process_setup+0x2cc>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    15c0:	786a      	ldrb	r2, [r5, #1]
    15c2:	2a04      	cmp	r2, #4
    15c4:	d006      	beq.n	15d4 <udc_process_setup+0x2d4>
		if (desc_id == desc->bDescriptorType) {
    15c6:	2a05      	cmp	r2, #5
    15c8:	d100      	bne.n	15cc <udc_process_setup+0x2cc>
    15ca:	e095      	b.n	16f8 <udc_process_setup+0x3f8>
			desc->bLength);
    15cc:	782a      	ldrb	r2, [r5, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    15ce:	18ad      	adds	r5, r5, r2
	while (ptr_eof_desc > desc) {
    15d0:	42ab      	cmp	r3, r5
    15d2:	d8f5      	bhi.n	15c0 <udc_process_setup+0x2c0>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    15d4:	6843      	ldr	r3, [r0, #4]
    15d6:	00bf      	lsls	r7, r7, #2
    15d8:	58fb      	ldr	r3, [r7, r3]
    15da:	681b      	ldr	r3, [r3, #0]
    15dc:	4798      	blx	r3
    15de:	e78b      	b.n	14f8 <udc_process_setup+0x1f8>
	if (udd_g_ctrlreq.req.wLength) {
    15e0:	88e3      	ldrh	r3, [r4, #6]
    15e2:	2b00      	cmp	r3, #0
    15e4:	d000      	beq.n	15e8 <udc_process_setup+0x2e8>
    15e6:	e6a6      	b.n	1336 <udc_process_setup+0x36>
	udd_g_ctrlreq.callback = udc_valid_address;
    15e8:	4b12      	ldr	r3, [pc, #72]	; (1634 <udc_process_setup+0x334>)
			return true;
    15ea:	2501      	movs	r5, #1
	udd_g_ctrlreq.callback = udc_valid_address;
    15ec:	6123      	str	r3, [r4, #16]
    15ee:	e6a3      	b.n	1338 <udc_process_setup+0x38>
    15f0:	4642      	mov	r2, r8
    15f2:	6013      	str	r3, [r2, #0]
    15f4:	e762      	b.n	14bc <udc_process_setup+0x1bc>
    15f6:	46c0      	nop			; (mov r8, r8)
    15f8:	20001240 	.word	0x20001240
    15fc:	20000dd2 	.word	0x20000dd2
    1600:	00002855 	.word	0x00002855
    1604:	20000ddc 	.word	0x20000ddc
    1608:	20000de0 	.word	0x20000de0
    160c:	20000de4 	.word	0x20000de4
    1610:	00002845 	.word	0x00002845
    1614:	2000004c 	.word	0x2000004c
    1618:	00002155 	.word	0x00002155
    161c:	000024b1 	.word	0x000024b1
    1620:	0000249d 	.word	0x0000249d
    1624:	20000dd4 	.word	0x20000dd4
    1628:	00001041 	.word	0x00001041
    162c:	0000109d 	.word	0x0000109d
    1630:	00002391 	.word	0x00002391
    1634:	00001029 	.word	0x00001029
	if (udd_g_ctrlreq.req.wLength) {
    1638:	88e3      	ldrh	r3, [r4, #6]
    163a:	2b00      	cmp	r3, #0
    163c:	d000      	beq.n	1640 <udc_process_setup+0x340>
    163e:	e69e      	b.n	137e <udc_process_setup+0x7e>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1640:	8863      	ldrh	r3, [r4, #2]
    1642:	2b00      	cmp	r3, #0
    1644:	d000      	beq.n	1648 <udc_process_setup+0x348>
    1646:	e69a      	b.n	137e <udc_process_setup+0x7e>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1648:	7920      	ldrb	r0, [r4, #4]
    164a:	4bc0      	ldr	r3, [pc, #768]	; (194c <udc_process_setup+0x64c>)
    164c:	4798      	blx	r3
    164e:	e753      	b.n	14f8 <udc_process_setup+0x1f8>
			switch (udd_g_ctrlreq.req.bRequest) {
    1650:	7863      	ldrb	r3, [r4, #1]
    1652:	2b0a      	cmp	r3, #10
    1654:	d000      	beq.n	1658 <udc_process_setup+0x358>
    1656:	e6f6      	b.n	1446 <udc_process_setup+0x146>
	if (udd_g_ctrlreq.req.wLength != 1) {
    1658:	2a01      	cmp	r2, #1
    165a:	d000      	beq.n	165e <udc_process_setup+0x35e>
    165c:	e6f7      	b.n	144e <udc_process_setup+0x14e>
	if (!udc_num_configuration) {
    165e:	4fbc      	ldr	r7, [pc, #752]	; (1950 <udc_process_setup+0x650>)
    1660:	783b      	ldrb	r3, [r7, #0]
    1662:	2b00      	cmp	r3, #0
    1664:	d100      	bne.n	1668 <udc_process_setup+0x368>
    1666:	e666      	b.n	1336 <udc_process_setup+0x36>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1668:	7923      	ldrb	r3, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    166a:	4eba      	ldr	r6, [pc, #744]	; (1954 <udc_process_setup+0x654>)
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    166c:	4698      	mov	r8, r3
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    166e:	6833      	ldr	r3, [r6, #0]
    1670:	4699      	mov	r9, r3
    1672:	681b      	ldr	r3, [r3, #0]
    1674:	791b      	ldrb	r3, [r3, #4]
    1676:	4543      	cmp	r3, r8
    1678:	d800      	bhi.n	167c <udc_process_setup+0x37c>
    167a:	e6ee      	b.n	145a <udc_process_setup+0x15a>
    167c:	2100      	movs	r1, #0
    167e:	4640      	mov	r0, r8
    1680:	4bb5      	ldr	r3, [pc, #724]	; (1958 <udc_process_setup+0x658>)
    1682:	4798      	blx	r3
    1684:	1e05      	subs	r5, r0, #0
	if (!udc_update_iface_desc(iface_num, 0)) {
    1686:	d100      	bne.n	168a <udc_process_setup+0x38a>
    1688:	e6dd      	b.n	1446 <udc_process_setup+0x146>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    168a:	464b      	mov	r3, r9
    168c:	685a      	ldr	r2, [r3, #4]
    168e:	4643      	mov	r3, r8
    1690:	009b      	lsls	r3, r3, #2
	udc_iface_setting = udi_api->getsetting();
    1692:	589b      	ldr	r3, [r3, r2]
    1694:	68db      	ldr	r3, [r3, #12]
    1696:	4798      	blx	r3
    1698:	4bb0      	ldr	r3, [pc, #704]	; (195c <udc_process_setup+0x65c>)
	udd_set_setup_payload(&udc_iface_setting,1);
    169a:	2101      	movs	r1, #1
	udc_iface_setting = udi_api->getsetting();
    169c:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
    169e:	0018      	movs	r0, r3
    16a0:	4baf      	ldr	r3, [pc, #700]	; (1960 <udc_process_setup+0x660>)
    16a2:	4798      	blx	r3
    16a4:	e648      	b.n	1338 <udc_process_setup+0x38>
	if (udd_g_ctrlreq.req.wLength != 1) {
    16a6:	2a01      	cmp	r2, #1
    16a8:	d000      	beq.n	16ac <udc_process_setup+0x3ac>
    16aa:	e644      	b.n	1336 <udc_process_setup+0x36>
	udd_set_setup_payload(&udc_num_configuration,1);
    16ac:	2101      	movs	r1, #1
    16ae:	48a8      	ldr	r0, [pc, #672]	; (1950 <udc_process_setup+0x650>)
    16b0:	4bab      	ldr	r3, [pc, #684]	; (1960 <udc_process_setup+0x660>)
    16b2:	4798      	blx	r3
			return true;
    16b4:	2501      	movs	r5, #1
    16b6:	e63f      	b.n	1338 <udc_process_setup+0x38>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    16b8:	8863      	ldrh	r3, [r4, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    16ba:	0a1d      	lsrs	r5, r3, #8
    16bc:	2d02      	cmp	r5, #2
    16be:	d100      	bne.n	16c2 <udc_process_setup+0x3c2>
    16c0:	e118      	b.n	18f4 <udc_process_setup+0x5f4>
    16c2:	d800      	bhi.n	16c6 <udc_process_setup+0x3c6>
    16c4:	e0cb      	b.n	185e <udc_process_setup+0x55e>
    16c6:	2d03      	cmp	r5, #3
    16c8:	d100      	bne.n	16cc <udc_process_setup+0x3cc>
    16ca:	e0d4      	b.n	1876 <udc_process_setup+0x576>
    16cc:	2d0f      	cmp	r5, #15
    16ce:	d000      	beq.n	16d2 <udc_process_setup+0x3d2>
    16d0:	e631      	b.n	1336 <udc_process_setup+0x36>
		if (udc_config.conf_bos == NULL) {
    16d2:	4ba4      	ldr	r3, [pc, #656]	; (1964 <udc_process_setup+0x664>)
    16d4:	6898      	ldr	r0, [r3, #8]
    16d6:	2800      	cmp	r0, #0
    16d8:	d100      	bne.n	16dc <udc_process_setup+0x3dc>
    16da:	e62c      	b.n	1336 <udc_process_setup+0x36>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    16dc:	78c1      	ldrb	r1, [r0, #3]
    16de:	7883      	ldrb	r3, [r0, #2]
    16e0:	0209      	lsls	r1, r1, #8
    16e2:	4319      	orrs	r1, r3
    16e4:	4b9e      	ldr	r3, [pc, #632]	; (1960 <udc_process_setup+0x660>)
    16e6:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    16e8:	88e3      	ldrh	r3, [r4, #6]
    16ea:	89a2      	ldrh	r2, [r4, #12]
    16ec:	429a      	cmp	r2, r3
    16ee:	d800      	bhi.n	16f2 <udc_process_setup+0x3f2>
    16f0:	e704      	b.n	14fc <udc_process_setup+0x1fc>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    16f2:	81a3      	strh	r3, [r4, #12]
			return true;
    16f4:	2501      	movs	r5, #1
    16f6:	e61f      	b.n	1338 <udc_process_setup+0x38>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    16f8:	796a      	ldrb	r2, [r5, #5]
    16fa:	792b      	ldrb	r3, [r5, #4]
    16fc:	0212      	lsls	r2, r2, #8
    16fe:	431a      	orrs	r2, r3
    1700:	78e9      	ldrb	r1, [r5, #3]
    1702:	78a8      	ldrb	r0, [r5, #2]
    1704:	47c0      	blx	r8
    1706:	2800      	cmp	r0, #0
    1708:	d000      	beq.n	170c <udc_process_setup+0x40c>
    170a:	e751      	b.n	15b0 <udc_process_setup+0x2b0>
    170c:	e69b      	b.n	1446 <udc_process_setup+0x146>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    170e:	6833      	ldr	r3, [r6, #0]
    1710:	681b      	ldr	r3, [r3, #0]
    1712:	791a      	ldrb	r2, [r3, #4]
    1714:	42aa      	cmp	r2, r5
    1716:	d800      	bhi.n	171a <udc_process_setup+0x41a>
    1718:	e6d0      	b.n	14bc <udc_process_setup+0x1bc>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    171a:	4642      	mov	r2, r8
    171c:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    171e:	78da      	ldrb	r2, [r3, #3]
    1720:	7899      	ldrb	r1, [r3, #2]
    1722:	0212      	lsls	r2, r2, #8
    1724:	430a      	orrs	r2, r1
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    1726:	189a      	adds	r2, r3, r2
	while (ptr_end_desc >
    1728:	4293      	cmp	r3, r2
    172a:	d300      	bcc.n	172e <udc_process_setup+0x42e>
    172c:	e6c6      	b.n	14bc <udc_process_setup+0x1bc>
    172e:	2600      	movs	r6, #0
    1730:	e005      	b.n	173e <udc_process_setup+0x43e>
				udc_ptr_iface->bLength);
    1732:	7819      	ldrb	r1, [r3, #0]
    1734:	2601      	movs	r6, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    1736:	185b      	adds	r3, r3, r1
	while (ptr_end_desc >
    1738:	429a      	cmp	r2, r3
    173a:	d800      	bhi.n	173e <udc_process_setup+0x43e>
    173c:	e758      	b.n	15f0 <udc_process_setup+0x2f0>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    173e:	7859      	ldrb	r1, [r3, #1]
    1740:	2904      	cmp	r1, #4
    1742:	d1f6      	bne.n	1732 <udc_process_setup+0x432>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    1744:	7899      	ldrb	r1, [r3, #2]
    1746:	42a9      	cmp	r1, r5
    1748:	d1f3      	bne.n	1732 <udc_process_setup+0x432>
    174a:	78d9      	ldrb	r1, [r3, #3]
    174c:	4281      	cmp	r1, r0
    174e:	d1f0      	bne.n	1732 <udc_process_setup+0x432>
    1750:	2e00      	cmp	r6, #0
    1752:	d000      	beq.n	1756 <udc_process_setup+0x456>
    1754:	e0f7      	b.n	1946 <udc_process_setup+0x646>
	return udi_api->setup();
    1756:	464b      	mov	r3, r9
    1758:	689b      	ldr	r3, [r3, #8]
    175a:	4798      	blx	r3
		if (udc_req_iface()) {
    175c:	2800      	cmp	r0, #0
    175e:	d100      	bne.n	1762 <udc_process_setup+0x462>
    1760:	e6ac      	b.n	14bc <udc_process_setup+0x1bc>
			return true;
    1762:	2501      	movs	r5, #1
    1764:	e5e8      	b.n	1338 <udc_process_setup+0x38>
	udc_reset();
    1766:	4b80      	ldr	r3, [pc, #512]	; (1968 <udc_process_setup+0x668>)
    1768:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    176a:	78a3      	ldrb	r3, [r4, #2]
    176c:	4f78      	ldr	r7, [pc, #480]	; (1950 <udc_process_setup+0x650>)
    176e:	703b      	strb	r3, [r7, #0]
	if (udc_num_configuration == 0) {
    1770:	2b00      	cmp	r3, #0
    1772:	d100      	bne.n	1776 <udc_process_setup+0x476>
    1774:	e6c2      	b.n	14fc <udc_process_setup+0x1fc>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1776:	4a7d      	ldr	r2, [pc, #500]	; (196c <udc_process_setup+0x66c>)
    1778:	6868      	ldr	r0, [r5, #4]
    177a:	4694      	mov	ip, r2
    177c:	4463      	add	r3, ip
    177e:	00db      	lsls	r3, r3, #3
    1780:	18c0      	adds	r0, r0, r3
    1782:	4e74      	ldr	r6, [pc, #464]	; (1954 <udc_process_setup+0x654>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1784:	6803      	ldr	r3, [r0, #0]
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1786:	6030      	str	r0, [r6, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1788:	791a      	ldrb	r2, [r3, #4]
    178a:	2a00      	cmp	r2, #0
    178c:	d100      	bne.n	1790 <udc_process_setup+0x490>
    178e:	e6b5      	b.n	14fc <udc_process_setup+0x1fc>
    1790:	2200      	movs	r2, #0
    1792:	4691      	mov	r9, r2
    1794:	4a76      	ldr	r2, [pc, #472]	; (1970 <udc_process_setup+0x670>)
    1796:	4690      	mov	r8, r2
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    1798:	4a76      	ldr	r2, [pc, #472]	; (1974 <udc_process_setup+0x674>)
    179a:	4693      	mov	fp, r2
    179c:	0032      	movs	r2, r6
    179e:	464e      	mov	r6, r9
    17a0:	46b9      	mov	r9, r7
    17a2:	0017      	movs	r7, r2
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    17a4:	4642      	mov	r2, r8
    17a6:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    17a8:	78d9      	ldrb	r1, [r3, #3]
    17aa:	789a      	ldrb	r2, [r3, #2]
    17ac:	020d      	lsls	r5, r1, #8
    17ae:	4315      	orrs	r5, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    17b0:	46ac      	mov	ip, r5
    17b2:	449c      	add	ip, r3
	while (ptr_end_desc >
    17b4:	459c      	cmp	ip, r3
    17b6:	d800      	bhi.n	17ba <udc_process_setup+0x4ba>
    17b8:	e645      	b.n	1446 <udc_process_setup+0x146>
    17ba:	2500      	movs	r5, #0
    17bc:	9301      	str	r3, [sp, #4]
    17be:	9500      	str	r5, [sp, #0]
    17c0:	469a      	mov	sl, r3
    17c2:	001d      	movs	r5, r3
    17c4:	e005      	b.n	17d2 <udc_process_setup+0x4d2>
				udc_ptr_iface->bLength);
    17c6:	782b      	ldrb	r3, [r5, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    17c8:	18ed      	adds	r5, r5, r3
    17ca:	2301      	movs	r3, #1
    17cc:	9300      	str	r3, [sp, #0]
	while (ptr_end_desc >
    17ce:	45ac      	cmp	ip, r5
    17d0:	d94e      	bls.n	1870 <udc_process_setup+0x570>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    17d2:	786b      	ldrb	r3, [r5, #1]
    17d4:	2b04      	cmp	r3, #4
    17d6:	d1f6      	bne.n	17c6 <udc_process_setup+0x4c6>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    17d8:	78ab      	ldrb	r3, [r5, #2]
    17da:	42b3      	cmp	r3, r6
    17dc:	d1f3      	bne.n	17c6 <udc_process_setup+0x4c6>
    17de:	78eb      	ldrb	r3, [r5, #3]
    17e0:	2b00      	cmp	r3, #0
    17e2:	d1f0      	bne.n	17c6 <udc_process_setup+0x4c6>
    17e4:	9501      	str	r5, [sp, #4]
    17e6:	9d00      	ldr	r5, [sp, #0]
    17e8:	4653      	mov	r3, sl
    17ea:	2d00      	cmp	r5, #0
    17ec:	d004      	beq.n	17f8 <udc_process_setup+0x4f8>
    17ee:	4642      	mov	r2, r8
    17f0:	9901      	ldr	r1, [sp, #4]
    17f2:	6011      	str	r1, [r2, #0]
    17f4:	789a      	ldrb	r2, [r3, #2]
    17f6:	78d9      	ldrb	r1, [r3, #3]
	while (ptr_end_desc >
    17f8:	9d01      	ldr	r5, [sp, #4]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    17fa:	0209      	lsls	r1, r1, #8
    17fc:	430a      	orrs	r2, r1
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    17fe:	189a      	adds	r2, r3, r2
    1800:	e004      	b.n	180c <udc_process_setup+0x50c>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    1802:	786b      	ldrb	r3, [r5, #1]
    1804:	2b04      	cmp	r3, #4
    1806:	d005      	beq.n	1814 <udc_process_setup+0x514>
		if (desc_id == desc->bDescriptorType) {
    1808:	2b05      	cmp	r3, #5
    180a:	d019      	beq.n	1840 <udc_process_setup+0x540>
			desc->bLength);
    180c:	782b      	ldrb	r3, [r5, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    180e:	18ed      	adds	r5, r5, r3
	while (ptr_eof_desc > desc) {
    1810:	42aa      	cmp	r2, r5
    1812:	d8f6      	bhi.n	1802 <udc_process_setup+0x502>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    1814:	6843      	ldr	r3, [r0, #4]
    1816:	00b2      	lsls	r2, r6, #2
    1818:	58d3      	ldr	r3, [r2, r3]
    181a:	681b      	ldr	r3, [r3, #0]
    181c:	4798      	blx	r3
		if (!udc_iface_enable(iface_num, 0)) {
    181e:	2800      	cmp	r0, #0
    1820:	d100      	bne.n	1824 <udc_process_setup+0x524>
    1822:	e610      	b.n	1446 <udc_process_setup+0x146>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1824:	6838      	ldr	r0, [r7, #0]
			iface_num++) {
    1826:	3601      	adds	r6, #1
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1828:	6803      	ldr	r3, [r0, #0]
			iface_num++) {
    182a:	b2f6      	uxtb	r6, r6
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    182c:	791a      	ldrb	r2, [r3, #4]
    182e:	42b2      	cmp	r2, r6
    1830:	d800      	bhi.n	1834 <udc_process_setup+0x534>
    1832:	e663      	b.n	14fc <udc_process_setup+0x1fc>
	if (0 == udc_num_configuration) {
    1834:	464a      	mov	r2, r9
    1836:	7812      	ldrb	r2, [r2, #0]
    1838:	2a00      	cmp	r2, #0
    183a:	d100      	bne.n	183e <udc_process_setup+0x53e>
    183c:	e603      	b.n	1446 <udc_process_setup+0x146>
    183e:	e7b1      	b.n	17a4 <udc_process_setup+0x4a4>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    1840:	796a      	ldrb	r2, [r5, #5]
    1842:	792b      	ldrb	r3, [r5, #4]
    1844:	0212      	lsls	r2, r2, #8
    1846:	431a      	orrs	r2, r3
    1848:	78e9      	ldrb	r1, [r5, #3]
    184a:	78a8      	ldrb	r0, [r5, #2]
    184c:	47d8      	blx	fp
    184e:	2800      	cmp	r0, #0
    1850:	d100      	bne.n	1854 <udc_process_setup+0x554>
    1852:	e5f8      	b.n	1446 <udc_process_setup+0x146>
    1854:	6838      	ldr	r0, [r7, #0]
    1856:	6803      	ldr	r3, [r0, #0]
    1858:	789a      	ldrb	r2, [r3, #2]
    185a:	78d9      	ldrb	r1, [r3, #3]
    185c:	e7cd      	b.n	17fa <udc_process_setup+0x4fa>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    185e:	2d01      	cmp	r5, #1
    1860:	d000      	beq.n	1864 <udc_process_setup+0x564>
    1862:	e568      	b.n	1336 <udc_process_setup+0x36>
				(uint8_t *) udc_config.confdev_lsfs,
    1864:	4b3f      	ldr	r3, [pc, #252]	; (1964 <udc_process_setup+0x664>)
    1866:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
    1868:	4b3d      	ldr	r3, [pc, #244]	; (1960 <udc_process_setup+0x660>)
    186a:	7801      	ldrb	r1, [r0, #0]
    186c:	4798      	blx	r3
    186e:	e73b      	b.n	16e8 <udc_process_setup+0x3e8>
    1870:	4643      	mov	r3, r8
    1872:	601d      	str	r5, [r3, #0]
    1874:	e5e7      	b.n	1446 <udc_process_setup+0x146>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1876:	22ff      	movs	r2, #255	; 0xff
    1878:	4013      	ands	r3, r2
    187a:	2b01      	cmp	r3, #1
    187c:	d04d      	beq.n	191a <udc_process_setup+0x61a>
    187e:	2b00      	cmp	r3, #0
    1880:	d033      	beq.n	18ea <udc_process_setup+0x5ea>
    1882:	2b02      	cmp	r3, #2
    1884:	d054      	beq.n	1930 <udc_process_setup+0x630>
    1886:	2b03      	cmp	r3, #3
    1888:	d000      	beq.n	188c <udc_process_setup+0x58c>
    188a:	e5dc      	b.n	1446 <udc_process_setup+0x146>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    188c:	2331      	movs	r3, #49	; 0x31
    188e:	211a      	movs	r1, #26
    1890:	251a      	movs	r5, #26
    1892:	220c      	movs	r2, #12
    1894:	4838      	ldr	r0, [pc, #224]	; (1978 <udc_process_setup+0x678>)
    1896:	8043      	strh	r3, [r0, #2]
    1898:	4b38      	ldr	r3, [pc, #224]	; (197c <udc_process_setup+0x67c>)
    189a:	785e      	ldrb	r6, [r3, #1]
    189c:	8086      	strh	r6, [r0, #4]
    189e:	789e      	ldrb	r6, [r3, #2]
    18a0:	80c6      	strh	r6, [r0, #6]
    18a2:	78de      	ldrb	r6, [r3, #3]
    18a4:	8106      	strh	r6, [r0, #8]
    18a6:	791e      	ldrb	r6, [r3, #4]
    18a8:	8146      	strh	r6, [r0, #10]
		for(i = 0; i < str_length; i++) {
    18aa:	2a05      	cmp	r2, #5
    18ac:	d019      	beq.n	18e2 <udc_process_setup+0x5e2>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    18ae:	795e      	ldrb	r6, [r3, #5]
    18b0:	8186      	strh	r6, [r0, #12]
		for(i = 0; i < str_length; i++) {
    18b2:	2a06      	cmp	r2, #6
    18b4:	d015      	beq.n	18e2 <udc_process_setup+0x5e2>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    18b6:	799e      	ldrb	r6, [r3, #6]
    18b8:	81c6      	strh	r6, [r0, #14]
		for(i = 0; i < str_length; i++) {
    18ba:	2a07      	cmp	r2, #7
    18bc:	d011      	beq.n	18e2 <udc_process_setup+0x5e2>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    18be:	79de      	ldrb	r6, [r3, #7]
    18c0:	8206      	strh	r6, [r0, #16]
		for(i = 0; i < str_length; i++) {
    18c2:	2a08      	cmp	r2, #8
    18c4:	d00d      	beq.n	18e2 <udc_process_setup+0x5e2>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    18c6:	7a1e      	ldrb	r6, [r3, #8]
    18c8:	8246      	strh	r6, [r0, #18]
		for(i = 0; i < str_length; i++) {
    18ca:	2a09      	cmp	r2, #9
    18cc:	d009      	beq.n	18e2 <udc_process_setup+0x5e2>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    18ce:	7a5e      	ldrb	r6, [r3, #9]
    18d0:	8286      	strh	r6, [r0, #20]
		for(i = 0; i < str_length; i++) {
    18d2:	2a0a      	cmp	r2, #10
    18d4:	d005      	beq.n	18e2 <udc_process_setup+0x5e2>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    18d6:	7a9e      	ldrb	r6, [r3, #10]
    18d8:	82c6      	strh	r6, [r0, #22]
		for(i = 0; i < str_length; i++) {
    18da:	2a0c      	cmp	r2, #12
    18dc:	d101      	bne.n	18e2 <udc_process_setup+0x5e2>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    18de:	7adb      	ldrb	r3, [r3, #11]
    18e0:	8303      	strh	r3, [r0, #24]
		udd_set_setup_payload(
    18e2:	4b1f      	ldr	r3, [pc, #124]	; (1960 <udc_process_setup+0x660>)
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    18e4:	7005      	strb	r5, [r0, #0]
		udd_set_setup_payload(
    18e6:	4798      	blx	r3
    18e8:	e6fe      	b.n	16e8 <udc_process_setup+0x3e8>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    18ea:	2104      	movs	r1, #4
    18ec:	4824      	ldr	r0, [pc, #144]	; (1980 <udc_process_setup+0x680>)
    18ee:	4b1c      	ldr	r3, [pc, #112]	; (1960 <udc_process_setup+0x660>)
    18f0:	4798      	blx	r3
    18f2:	e6f9      	b.n	16e8 <udc_process_setup+0x3e8>
			if (conf_num >= udc_config.confdev_lsfs->
    18f4:	4a1b      	ldr	r2, [pc, #108]	; (1964 <udc_process_setup+0x664>)
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    18f6:	b2db      	uxtb	r3, r3
			if (conf_num >= udc_config.confdev_lsfs->
    18f8:	6811      	ldr	r1, [r2, #0]
    18fa:	7c49      	ldrb	r1, [r1, #17]
    18fc:	4299      	cmp	r1, r3
    18fe:	d800      	bhi.n	1902 <udc_process_setup+0x602>
    1900:	e519      	b.n	1336 <udc_process_setup+0x36>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    1902:	6852      	ldr	r2, [r2, #4]
    1904:	00db      	lsls	r3, r3, #3
    1906:	5898      	ldr	r0, [r3, r2]
			udd_set_setup_payload(
    1908:	78c1      	ldrb	r1, [r0, #3]
    190a:	7883      	ldrb	r3, [r0, #2]
    190c:	0209      	lsls	r1, r1, #8
    190e:	4319      	orrs	r1, r3
    1910:	4b13      	ldr	r3, [pc, #76]	; (1960 <udc_process_setup+0x660>)
    1912:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1914:	68a3      	ldr	r3, [r4, #8]
    1916:	705d      	strb	r5, [r3, #1]
    1918:	e6e6      	b.n	16e8 <udc_process_setup+0x3e8>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    191a:	2114      	movs	r1, #20
    191c:	2514      	movs	r5, #20
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    191e:	2209      	movs	r2, #9
		str = udc_string_manufacturer_name;
    1920:	4b18      	ldr	r3, [pc, #96]	; (1984 <udc_process_setup+0x684>)
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1922:	4815      	ldr	r0, [pc, #84]	; (1978 <udc_process_setup+0x678>)
    1924:	781e      	ldrb	r6, [r3, #0]
    1926:	8046      	strh	r6, [r0, #2]
    1928:	e7b7      	b.n	189a <udc_process_setup+0x59a>
    192a:	7823      	ldrb	r3, [r4, #0]
    192c:	402b      	ands	r3, r5
    192e:	e4fd      	b.n	132c <udc_process_setup+0x2c>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1930:	210c      	movs	r1, #12
    1932:	250c      	movs	r5, #12
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1934:	2205      	movs	r2, #5
		str = udc_string_product_name;
    1936:	4b14      	ldr	r3, [pc, #80]	; (1988 <udc_process_setup+0x688>)
    1938:	e7f3      	b.n	1922 <udc_process_setup+0x622>
    193a:	4642      	mov	r2, r8
    193c:	6013      	str	r3, [r2, #0]
    193e:	e5b2      	b.n	14a6 <udc_process_setup+0x1a6>
    1940:	4642      	mov	r2, r8
    1942:	6013      	str	r3, [r2, #0]
    1944:	e552      	b.n	13ec <udc_process_setup+0xec>
    1946:	4642      	mov	r2, r8
    1948:	6013      	str	r3, [r2, #0]
    194a:	e704      	b.n	1756 <udc_process_setup+0x456>
    194c:	00002521 	.word	0x00002521
    1950:	20000ddc 	.word	0x20000ddc
    1954:	20000de0 	.word	0x20000de0
    1958:	00001041 	.word	0x00001041
    195c:	20000dd8 	.word	0x20000dd8
    1960:	00002855 	.word	0x00002855
    1964:	2000004c 	.word	0x2000004c
    1968:	00001211 	.word	0x00001211
    196c:	1fffffff 	.word	0x1fffffff
    1970:	20000de4 	.word	0x20000de4
    1974:	00002391 	.word	0x00002391
    1978:	20000098 	.word	0x20000098
    197c:	000246e4 	.word	0x000246e4
    1980:	200000b4 	.word	0x200000b4
    1984:	200000b8 	.word	0x200000b8
    1988:	200000c4 	.word	0x200000c4

0000198c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    198c:	4b0b      	ldr	r3, [pc, #44]	; (19bc <cpu_irq_enter_critical+0x30>)
    198e:	681a      	ldr	r2, [r3, #0]
    1990:	2a00      	cmp	r2, #0
    1992:	d105      	bne.n	19a0 <cpu_irq_enter_critical+0x14>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1994:	f3ef 8110 	mrs	r1, PRIMASK
		if (cpu_irq_is_enabled()) {
    1998:	2900      	cmp	r1, #0
    199a:	d005      	beq.n	19a8 <cpu_irq_enter_critical+0x1c>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    199c:	4908      	ldr	r1, [pc, #32]	; (19c0 <cpu_irq_enter_critical+0x34>)
    199e:	700a      	strb	r2, [r1, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    19a0:	681a      	ldr	r2, [r3, #0]
    19a2:	3201      	adds	r2, #1
    19a4:	601a      	str	r2, [r3, #0]
}
    19a6:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    19a8:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    19aa:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    19ae:	4a05      	ldr	r2, [pc, #20]	; (19c4 <cpu_irq_enter_critical+0x38>)
    19b0:	7011      	strb	r1, [r2, #0]
			cpu_irq_prev_interrupt_state = true;
    19b2:	4a03      	ldr	r2, [pc, #12]	; (19c0 <cpu_irq_enter_critical+0x34>)
    19b4:	3101      	adds	r1, #1
    19b6:	7011      	strb	r1, [r2, #0]
    19b8:	e7f2      	b.n	19a0 <cpu_irq_enter_critical+0x14>
    19ba:	46c0      	nop			; (mov r8, r8)
    19bc:	20000de8 	.word	0x20000de8
    19c0:	20000dec 	.word	0x20000dec
    19c4:	200000ca 	.word	0x200000ca

000019c8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    19c8:	4b08      	ldr	r3, [pc, #32]	; (19ec <cpu_irq_leave_critical+0x24>)
    19ca:	681a      	ldr	r2, [r3, #0]
    19cc:	3a01      	subs	r2, #1
    19ce:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    19d0:	681b      	ldr	r3, [r3, #0]
    19d2:	2b00      	cmp	r3, #0
    19d4:	d109      	bne.n	19ea <cpu_irq_leave_critical+0x22>
    19d6:	4b06      	ldr	r3, [pc, #24]	; (19f0 <cpu_irq_leave_critical+0x28>)
    19d8:	781b      	ldrb	r3, [r3, #0]
    19da:	2b00      	cmp	r3, #0
    19dc:	d005      	beq.n	19ea <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    19de:	2201      	movs	r2, #1
    19e0:	4b04      	ldr	r3, [pc, #16]	; (19f4 <cpu_irq_leave_critical+0x2c>)
    19e2:	701a      	strb	r2, [r3, #0]
    19e4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    19e8:	b662      	cpsie	i
	}
}
    19ea:	4770      	bx	lr
    19ec:	20000de8 	.word	0x20000de8
    19f0:	20000dec 	.word	0x20000dec
    19f4:	200000ca 	.word	0x200000ca

000019f8 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    19f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    19fa:	4657      	mov	r7, sl
    19fc:	464e      	mov	r6, r9
    19fe:	46de      	mov	lr, fp
    1a00:	4645      	mov	r5, r8
    1a02:	b5e0      	push	{r5, r6, r7, lr}
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    1a04:	798e      	ldrb	r6, [r1, #6]
{
    1a06:	b083      	sub	sp, #12

	if (ep & USB_EP_DIR_IN) {
    1a08:	b273      	sxtb	r3, r6
{
    1a0a:	468a      	mov	sl, r1
	if (ep & USB_EP_DIR_IN) {
    1a0c:	2b00      	cmp	r3, #0
    1a0e:	da00      	bge.n	1a12 <udd_ep_transfer_process+0x1a>
    1a10:	e071      	b.n	1af6 <udd_ep_transfer_process+0xfe>
	if ((ep == 0) || (ep == 0x80)) {
    1a12:	2e00      	cmp	r6, #0
    1a14:	d033      	beq.n	1a7e <udd_ep_transfer_process+0x86>
    1a16:	230f      	movs	r3, #15
    1a18:	4033      	ands	r3, r6
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    1a1a:	005c      	lsls	r4, r3, #1
    1a1c:	3c02      	subs	r4, #2
	ep_size = ptr_job->ep_size;
    1a1e:	00a5      	lsls	r5, r4, #2
    1a20:	4699      	mov	r9, r3
    1a22:	4f6f      	ldr	r7, [pc, #444]	; (1be0 <udd_ep_transfer_process+0x1e8>)
    1a24:	192b      	adds	r3, r5, r4
    1a26:	009b      	lsls	r3, r3, #2
    1a28:	18fb      	adds	r3, r7, r3
    1a2a:	8a1a      	ldrh	r2, [r3, #16]
    1a2c:	9201      	str	r2, [sp, #4]
	nb_trans = ep_callback_para->received_bytes;
    1a2e:	880a      	ldrh	r2, [r1, #0]
    1a30:	4693      	mov	fp, r2
	if (ptr_job->b_use_out_cache_buffer) {
    1a32:	7c9a      	ldrb	r2, [r3, #18]
    1a34:	0752      	lsls	r2, r2, #29
    1a36:	d426      	bmi.n	1a86 <udd_ep_transfer_process+0x8e>
	ptr_job->nb_trans += nb_trans;
    1a38:	192b      	adds	r3, r5, r4
    1a3a:	009b      	lsls	r3, r3, #2
    1a3c:	18fb      	adds	r3, r7, r3
    1a3e:	68da      	ldr	r2, [r3, #12]
    1a40:	445a      	add	r2, fp
    1a42:	4690      	mov	r8, r2
    1a44:	60da      	str	r2, [r3, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    1a46:	689a      	ldr	r2, [r3, #8]
    1a48:	4590      	cmp	r8, r2
    1a4a:	d81a      	bhi.n	1a82 <udd_ep_transfer_process+0x8a>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    1a4c:	4653      	mov	r3, sl
    1a4e:	889b      	ldrh	r3, [r3, #4]
    1a50:	455b      	cmp	r3, fp
    1a52:	d02b      	beq.n	1aac <udd_ep_transfer_process+0xb4>
	ptr_job->busy = false;
    1a54:	2001      	movs	r0, #1
    1a56:	192c      	adds	r4, r5, r4
    1a58:	00a4      	lsls	r4, r4, #2
    1a5a:	1939      	adds	r1, r7, r4
    1a5c:	7c8b      	ldrb	r3, [r1, #18]
    1a5e:	4383      	bics	r3, r0
    1a60:	748b      	strb	r3, [r1, #18]
	if (NULL != ptr_job->call_trans) {
    1a62:	593b      	ldr	r3, [r7, r4]
    1a64:	2b00      	cmp	r3, #0
    1a66:	d003      	beq.n	1a70 <udd_ep_transfer_process+0x78>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    1a68:	68c9      	ldr	r1, [r1, #12]
    1a6a:	0032      	movs	r2, r6
    1a6c:	2000      	movs	r0, #0
    1a6e:	4798      	blx	r3
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    1a70:	b003      	add	sp, #12
    1a72:	bc3c      	pop	{r2, r3, r4, r5}
    1a74:	4690      	mov	r8, r2
    1a76:	4699      	mov	r9, r3
    1a78:	46a2      	mov	sl, r4
    1a7a:	46ab      	mov	fp, r5
    1a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ep_size = ptr_job->ep_size;
    1a7e:	8a33      	ldrh	r3, [r6, #16]
    1a80:	deff      	udf	#255	; 0xff
		ptr_job->nb_trans = ptr_job->buf_size;
    1a82:	60da      	str	r2, [r3, #12]
    1a84:	e7e6      	b.n	1a54 <udd_ep_transfer_process+0x5c>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    1a86:	68d9      	ldr	r1, [r3, #12]
    1a88:	685a      	ldr	r2, [r3, #4]
    1a8a:	468c      	mov	ip, r1
    1a8c:	6898      	ldr	r0, [r3, #8]
    1a8e:	4462      	add	r2, ip
    1a90:	9901      	ldr	r1, [sp, #4]
    1a92:	4b54      	ldr	r3, [pc, #336]	; (1be4 <udd_ep_transfer_process+0x1ec>)
    1a94:	4690      	mov	r8, r2
    1a96:	4798      	blx	r3
    1a98:	464b      	mov	r3, r9
    1a9a:	000a      	movs	r2, r1
    1a9c:	3b01      	subs	r3, #1
    1a9e:	4952      	ldr	r1, [pc, #328]	; (1be8 <udd_ep_transfer_process+0x1f0>)
    1aa0:	019b      	lsls	r3, r3, #6
    1aa2:	1859      	adds	r1, r3, r1
    1aa4:	4640      	mov	r0, r8
    1aa6:	4b51      	ldr	r3, [pc, #324]	; (1bec <udd_ep_transfer_process+0x1f4>)
    1aa8:	4798      	blx	r3
    1aaa:	e7c5      	b.n	1a38 <udd_ep_transfer_process+0x40>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    1aac:	4590      	cmp	r8, r2
    1aae:	d0d1      	beq.n	1a54 <udd_ep_transfer_process+0x5c>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    1ab0:	4643      	mov	r3, r8
    1ab2:	1ad2      	subs	r2, r2, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1ab4:	4b4e      	ldr	r3, [pc, #312]	; (1bf0 <udd_ep_transfer_process+0x1f8>)
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    1ab6:	b296      	uxth	r6, r2
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1ab8:	469a      	mov	sl, r3
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    1aba:	9901      	ldr	r1, [sp, #4]
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1abc:	429e      	cmp	r6, r3
    1abe:	d96c      	bls.n	1b9a <udd_ep_transfer_process+0x1a2>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    1ac0:	0018      	movs	r0, r3
    1ac2:	4b4c      	ldr	r3, [pc, #304]	; (1bf4 <udd_ep_transfer_process+0x1fc>)
    1ac4:	4798      	blx	r3
    1ac6:	4653      	mov	r3, sl
    1ac8:	1a5b      	subs	r3, r3, r1
    1aca:	b29b      	uxth	r3, r3
			ptr_job->b_use_out_cache_buffer = true;
    1acc:	192c      	adds	r4, r5, r4
		if (next_trans < ep_size) {
    1ace:	9901      	ldr	r1, [sp, #4]
			ptr_job->b_use_out_cache_buffer = true;
    1ad0:	00a4      	lsls	r4, r4, #2
    1ad2:	193f      	adds	r7, r7, r4
		if (next_trans < ep_size) {
    1ad4:	4299      	cmp	r1, r3
    1ad6:	d959      	bls.n	1b8c <udd_ep_transfer_process+0x194>
			ptr_job->b_use_out_cache_buffer = true;
    1ad8:	2204      	movs	r2, #4
    1ada:	7cbb      	ldrb	r3, [r7, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    1adc:	4c46      	ldr	r4, [pc, #280]	; (1bf8 <udd_ep_transfer_process+0x200>)
			ptr_job->b_use_out_cache_buffer = true;
    1ade:	4313      	orrs	r3, r2
    1ae0:	74bb      	strb	r3, [r7, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    1ae2:	464b      	mov	r3, r9
    1ae4:	1e5a      	subs	r2, r3, #1
    1ae6:	4b40      	ldr	r3, [pc, #256]	; (1be8 <udd_ep_transfer_process+0x1f0>)
    1ae8:	0192      	lsls	r2, r2, #6
    1aea:	18d2      	adds	r2, r2, r3
    1aec:	4843      	ldr	r0, [pc, #268]	; (1bfc <udd_ep_transfer_process+0x204>)
    1aee:	000b      	movs	r3, r1
    1af0:	4649      	mov	r1, r9
    1af2:	47a0      	blx	r4
    1af4:	e7bc      	b.n	1a70 <udd_ep_transfer_process+0x78>
	if ((ep == 0) || (ep == 0x80)) {
    1af6:	2e80      	cmp	r6, #128	; 0x80
    1af8:	d045      	beq.n	1b86 <udd_ep_transfer_process+0x18e>
    1afa:	230f      	movs	r3, #15
    1afc:	4033      	ands	r3, r6
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    1afe:	005c      	lsls	r4, r3, #1
    1b00:	4699      	mov	r9, r3
    1b02:	1e63      	subs	r3, r4, #1
	ep_size = ptr_job->ep_size;
    1b04:	009c      	lsls	r4, r3, #2
    1b06:	18e0      	adds	r0, r4, r3
    1b08:	4f35      	ldr	r7, [pc, #212]	; (1be0 <udd_ep_transfer_process+0x1e8>)
    1b0a:	0080      	lsls	r0, r0, #2
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    1b0c:	4698      	mov	r8, r3
	ep_size = ptr_job->ep_size;
    1b0e:	183b      	adds	r3, r7, r0
    1b10:	8a19      	ldrh	r1, [r3, #16]
    1b12:	001a      	movs	r2, r3
    1b14:	468b      	mov	fp, r1
	ptr_job->nb_trans += nb_trans;
    1b16:	4651      	mov	r1, sl
    1b18:	884d      	ldrh	r5, [r1, #2]
    1b1a:	68d9      	ldr	r1, [r3, #12]
	ep_size = ptr_job->ep_size;
    1b1c:	3210      	adds	r2, #16
	ptr_job->nb_trans += nb_trans;
    1b1e:	468c      	mov	ip, r1
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    1b20:	6899      	ldr	r1, [r3, #8]
	ptr_job->nb_trans += nb_trans;
    1b22:	4465      	add	r5, ip
    1b24:	60dd      	str	r5, [r3, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    1b26:	428d      	cmp	r5, r1
    1b28:	d03d      	beq.n	1ba6 <udd_ep_transfer_process+0x1ae>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    1b2a:	1b4e      	subs	r6, r1, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1b2c:	4b30      	ldr	r3, [pc, #192]	; (1bf0 <udd_ep_transfer_process+0x1f8>)
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    1b2e:	b2b6      	uxth	r6, r6
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1b30:	469a      	mov	sl, r3
    1b32:	429e      	cmp	r6, r3
    1b34:	d906      	bls.n	1b44 <udd_ep_transfer_process+0x14c>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    1b36:	0018      	movs	r0, r3
    1b38:	4659      	mov	r1, fp
    1b3a:	4b2e      	ldr	r3, [pc, #184]	; (1bf4 <udd_ep_transfer_process+0x1fc>)
    1b3c:	4798      	blx	r3
    1b3e:	4653      	mov	r3, sl
    1b40:	1a5e      	subs	r6, r3, r1
    1b42:	b2b6      	uxth	r6, r6
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    1b44:	4643      	mov	r3, r8
    1b46:	18e3      	adds	r3, r4, r3
    1b48:	009b      	lsls	r3, r3, #2
    1b4a:	18fb      	adds	r3, r7, r3
    1b4c:	7c9a      	ldrb	r2, [r3, #18]
    1b4e:	2300      	movs	r3, #0
    1b50:	0792      	lsls	r2, r2, #30
    1b52:	d507      	bpl.n	1b64 <udd_ep_transfer_process+0x16c>
    1b54:	4b23      	ldr	r3, [pc, #140]	; (1be4 <udd_ep_transfer_process+0x1ec>)
    1b56:	4659      	mov	r1, fp
    1b58:	0030      	movs	r0, r6
    1b5a:	4798      	blx	r3
    1b5c:	b289      	uxth	r1, r1
    1b5e:	424b      	negs	r3, r1
    1b60:	414b      	adcs	r3, r1
    1b62:	b2db      	uxtb	r3, r3
    1b64:	2002      	movs	r0, #2
    1b66:	4444      	add	r4, r8
    1b68:	00a4      	lsls	r4, r4, #2
    1b6a:	193f      	adds	r7, r7, r4
    1b6c:	7cba      	ldrb	r2, [r7, #18]
    1b6e:	005b      	lsls	r3, r3, #1
    1b70:	4382      	bics	r2, r0
    1b72:	4313      	orrs	r3, r2
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    1b74:	687a      	ldr	r2, [r7, #4]
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    1b76:	74bb      	strb	r3, [r7, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    1b78:	1952      	adds	r2, r2, r5
    1b7a:	0033      	movs	r3, r6
    1b7c:	4649      	mov	r1, r9
    1b7e:	4c20      	ldr	r4, [pc, #128]	; (1c00 <udd_ep_transfer_process+0x208>)
    1b80:	481e      	ldr	r0, [pc, #120]	; (1bfc <udd_ep_transfer_process+0x204>)
    1b82:	47a0      	blx	r4
    1b84:	e774      	b.n	1a70 <udd_ep_transfer_process+0x78>
	ep_size = ptr_job->ep_size;
    1b86:	2300      	movs	r3, #0
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	deff      	udf	#255	; 0xff
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    1b8c:	687a      	ldr	r2, [r7, #4]
    1b8e:	4649      	mov	r1, r9
    1b90:	4442      	add	r2, r8
    1b92:	4c19      	ldr	r4, [pc, #100]	; (1bf8 <udd_ep_transfer_process+0x200>)
    1b94:	4819      	ldr	r0, [pc, #100]	; (1bfc <udd_ep_transfer_process+0x204>)
    1b96:	47a0      	blx	r4
    1b98:	e76a      	b.n	1a70 <udd_ep_transfer_process+0x78>
			next_trans -= next_trans % ep_size;
    1b9a:	4b12      	ldr	r3, [pc, #72]	; (1be4 <udd_ep_transfer_process+0x1ec>)
    1b9c:	0030      	movs	r0, r6
    1b9e:	4798      	blx	r3
    1ba0:	1a73      	subs	r3, r6, r1
    1ba2:	b29b      	uxth	r3, r3
    1ba4:	e792      	b.n	1acc <udd_ep_transfer_process+0xd4>
	if (ptr_job->b_shortpacket) {
    1ba6:	2102      	movs	r1, #2
    1ba8:	7c9c      	ldrb	r4, [r3, #18]
    1baa:	4221      	tst	r1, r4
    1bac:	d10c      	bne.n	1bc8 <udd_ep_transfer_process+0x1d0>
	ptr_job->busy = false;
    1bae:	2101      	movs	r1, #1
    1bb0:	7893      	ldrb	r3, [r2, #2]
    1bb2:	438b      	bics	r3, r1
    1bb4:	7093      	strb	r3, [r2, #2]
	if (NULL != ptr_job->call_trans) {
    1bb6:	583b      	ldr	r3, [r7, r0]
    1bb8:	2b00      	cmp	r3, #0
    1bba:	d100      	bne.n	1bbe <udd_ep_transfer_process+0x1c6>
    1bbc:	e758      	b.n	1a70 <udd_ep_transfer_process+0x78>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    1bbe:	0032      	movs	r2, r6
    1bc0:	0029      	movs	r1, r5
    1bc2:	2000      	movs	r0, #0
    1bc4:	4798      	blx	r3
    1bc6:	e753      	b.n	1a70 <udd_ep_transfer_process+0x78>
		ptr_job->b_shortpacket = false;
    1bc8:	7890      	ldrb	r0, [r2, #2]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    1bca:	4c0d      	ldr	r4, [pc, #52]	; (1c00 <udd_ep_transfer_process+0x208>)
		ptr_job->b_shortpacket = false;
    1bcc:	4388      	bics	r0, r1
    1bce:	7090      	strb	r0, [r2, #2]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    1bd0:	685a      	ldr	r2, [r3, #4]
    1bd2:	4649      	mov	r1, r9
    1bd4:	1952      	adds	r2, r2, r5
    1bd6:	2300      	movs	r3, #0
    1bd8:	4808      	ldr	r0, [pc, #32]	; (1bfc <udd_ep_transfer_process+0x204>)
    1bda:	47a0      	blx	r4
    1bdc:	e748      	b.n	1a70 <udd_ep_transfer_process+0x78>
    1bde:	46c0      	nop			; (mov r8, r8)
    1be0:	20000df4 	.word	0x20000df4
    1be4:	0001ce29 	.word	0x0001ce29
    1be8:	20001058 	.word	0x20001058
    1bec:	0001fd79 	.word	0x0001fd79
    1bf0:	00001fff 	.word	0x00001fff
    1bf4:	0001cffd 	.word	0x0001cffd
    1bf8:	000030e5 	.word	0x000030e5
    1bfc:	200010d8 	.word	0x200010d8
    1c00:	00003099 	.word	0x00003099

00001c04 <_usb_on_bus_reset>:
 * \brief Control endpoint Reset callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_bus_reset(struct usb_module *module_inst, void *pointer)
{
    1c04:	b530      	push	{r4, r5, lr}
    1c06:	0004      	movs	r4, r0
    1c08:	b083      	sub	sp, #12
	// Reset USB Device Stack Core
	udc_reset();
    1c0a:	4b1e      	ldr	r3, [pc, #120]	; (1c84 <_usb_on_bus_reset+0x80>)
    1c0c:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    1c0e:	2380      	movs	r3, #128	; 0x80
    1c10:	6822      	ldr	r2, [r4, #0]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    1c12:	ad01      	add	r5, sp, #4
    1c14:	7293      	strb	r3, [r2, #10]
    1c16:	0028      	movs	r0, r5
    1c18:	4b1b      	ldr	r3, [pc, #108]	; (1c88 <_usb_on_bus_reset+0x84>)
    1c1a:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    1c1c:	2303      	movs	r3, #3
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    1c1e:	0029      	movs	r1, r5
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    1c20:	706b      	strb	r3, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    1c22:	0020      	movs	r0, r4
    1c24:	4b19      	ldr	r3, [pc, #100]	; (1c8c <_usb_on_bus_reset+0x88>)
    1c26:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    1c28:	4919      	ldr	r1, [pc, #100]	; (1c90 <_usb_on_bus_reset+0x8c>)
    1c2a:	0020      	movs	r0, r4
    1c2c:	4b19      	ldr	r3, [pc, #100]	; (1c94 <_usb_on_bus_reset+0x90>)
    1c2e:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    1c30:	4d19      	ldr	r5, [pc, #100]	; (1c98 <_usb_on_bus_reset+0x94>)
    1c32:	4b1a      	ldr	r3, [pc, #104]	; (1c9c <_usb_on_bus_reset+0x98>)
    1c34:	2202      	movs	r2, #2
    1c36:	2100      	movs	r1, #0
    1c38:	0020      	movs	r0, r4
    1c3a:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    1c3c:	4b18      	ldr	r3, [pc, #96]	; (1ca0 <_usb_on_bus_reset+0x9c>)
    1c3e:	2200      	movs	r2, #0
    1c40:	2100      	movs	r1, #0
    1c42:	0020      	movs	r0, r4
    1c44:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    1c46:	4b17      	ldr	r3, [pc, #92]	; (1ca4 <_usb_on_bus_reset+0xa0>)
    1c48:	2201      	movs	r2, #1
    1c4a:	2100      	movs	r1, #0
    1c4c:	0020      	movs	r0, r4
    1c4e:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    1c50:	4d15      	ldr	r5, [pc, #84]	; (1ca8 <_usb_on_bus_reset+0xa4>)
    1c52:	2202      	movs	r2, #2
    1c54:	2100      	movs	r1, #0
    1c56:	0020      	movs	r0, r4
    1c58:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    1c5a:	2200      	movs	r2, #0
    1c5c:	2100      	movs	r1, #0
    1c5e:	0020      	movs	r0, r4
    1c60:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    1c62:	2201      	movs	r2, #1
    1c64:	2100      	movs	r1, #0
    1c66:	0020      	movs	r0, r4
    1c68:	47a8      	blx	r5
    1c6a:	6821      	ldr	r1, [r4, #0]
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    1c6c:	4a0f      	ldr	r2, [pc, #60]	; (1cac <_usb_on_bus_reset+0xa8>)
    1c6e:	890b      	ldrh	r3, [r1, #8]
    1c70:	401a      	ands	r2, r3
    1c72:	2380      	movs	r3, #128	; 0x80
    1c74:	00db      	lsls	r3, r3, #3
    1c76:	4313      	orrs	r3, r2
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    1c78:	2200      	movs	r2, #0
    1c7a:	810b      	strh	r3, [r1, #8]
    1c7c:	4b0c      	ldr	r3, [pc, #48]	; (1cb0 <_usb_on_bus_reset+0xac>)
    1c7e:	701a      	strb	r2, [r3, #0]
	usb_device_set_address(module_inst,0);
	udd_ctrl_ep_enable(module_inst);
}
    1c80:	b003      	add	sp, #12
    1c82:	bd30      	pop	{r4, r5, pc}
    1c84:	00001211 	.word	0x00001211
    1c88:	00002d8d 	.word	0x00002d8d
    1c8c:	00002d9d 	.word	0x00002d9d
    1c90:	20001258 	.word	0x20001258
    1c94:	0000312d 	.word	0x0000312d
    1c98:	00002bdd 	.word	0x00002bdd
    1c9c:	00001ea5 	.word	0x00001ea5
    1ca0:	000021a9 	.word	0x000021a9
    1ca4:	00001cb5 	.word	0x00001cb5
    1ca8:	00002c2d 	.word	0x00002c2d
    1cac:	fffff3ff 	.word	0xfffff3ff
    1cb0:	20000df2 	.word	0x20000df2

00001cb4 <_usb_ep0_on_tansfer_fail>:
{
    1cb4:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    1cb6:	7989      	ldrb	r1, [r1, #6]
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    1cb8:	4a12      	ldr	r2, [pc, #72]	; (1d04 <_usb_ep0_on_tansfer_fail+0x50>)
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    1cba:	b24b      	sxtb	r3, r1
    1cbc:	2b00      	cmp	r3, #0
    1cbe:	db05      	blt.n	1ccc <_usb_ep0_on_tansfer_fail+0x18>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    1cc0:	7813      	ldrb	r3, [r2, #0]
    1cc2:	2b02      	cmp	r3, #2
    1cc4:	d00b      	beq.n	1cde <_usb_ep0_on_tansfer_fail+0x2a>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    1cc6:	2b03      	cmp	r3, #3
    1cc8:	d005      	beq.n	1cd6 <_usb_ep0_on_tansfer_fail+0x22>
}
    1cca:	bd10      	pop	{r4, pc}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    1ccc:	7813      	ldrb	r3, [r2, #0]
    1cce:	2b01      	cmp	r3, #1
    1cd0:	d008      	beq.n	1ce4 <_usb_ep0_on_tansfer_fail+0x30>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1cd2:	2b04      	cmp	r3, #4
    1cd4:	d1f9      	bne.n	1cca <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    1cd6:	480c      	ldr	r0, [pc, #48]	; (1d08 <_usb_ep0_on_tansfer_fail+0x54>)
    1cd8:	4b0c      	ldr	r3, [pc, #48]	; (1d0c <_usb_ep0_on_tansfer_fail+0x58>)
    1cda:	4798      	blx	r3
}
    1cdc:	e7f5      	b.n	1cca <_usb_ep0_on_tansfer_fail+0x16>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    1cde:	3302      	adds	r3, #2
    1ce0:	7013      	strb	r3, [r2, #0]
    1ce2:	e7f2      	b.n	1cca <_usb_ep0_on_tansfer_fail+0x16>
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    1ce4:	4c08      	ldr	r4, [pc, #32]	; (1d08 <_usb_ep0_on_tansfer_fail+0x54>)
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    1ce6:	3302      	adds	r3, #2
    1ce8:	7013      	strb	r3, [r2, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    1cea:	4909      	ldr	r1, [pc, #36]	; (1d10 <_usb_ep0_on_tansfer_fail+0x5c>)
    1cec:	0020      	movs	r0, r4
    1cee:	4b09      	ldr	r3, [pc, #36]	; (1d14 <_usb_ep0_on_tansfer_fail+0x60>)
    1cf0:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    1cf2:	4b09      	ldr	r3, [pc, #36]	; (1d18 <_usb_ep0_on_tansfer_fail+0x64>)
    1cf4:	2100      	movs	r1, #0
    1cf6:	689a      	ldr	r2, [r3, #8]
    1cf8:	0020      	movs	r0, r4
    1cfa:	2300      	movs	r3, #0
    1cfc:	4c07      	ldr	r4, [pc, #28]	; (1d1c <_usb_ep0_on_tansfer_fail+0x68>)
    1cfe:	47a0      	blx	r4
    1d00:	e7e3      	b.n	1cca <_usb_ep0_on_tansfer_fail+0x16>
    1d02:	46c0      	nop			; (mov r8, r8)
    1d04:	20000df2 	.word	0x20000df2
    1d08:	200010d8 	.word	0x200010d8
    1d0c:	00002ffd 	.word	0x00002ffd
    1d10:	20001258 	.word	0x20001258
    1d14:	0000312d 	.word	0x0000312d
    1d18:	20001240 	.word	0x20001240
    1d1c:	00003099 	.word	0x00003099

00001d20 <udd_ctrl_in_sent>:
{
    1d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    1d22:	4d1f      	ldr	r5, [pc, #124]	; (1da0 <udd_ctrl_in_sent+0x80>)
    1d24:	4e1f      	ldr	r6, [pc, #124]	; (1da4 <udd_ctrl_in_sent+0x84>)
    1d26:	882a      	ldrh	r2, [r5, #0]
    1d28:	89b4      	ldrh	r4, [r6, #12]
    1d2a:	1aa4      	subs	r4, r4, r2
    1d2c:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
    1d2e:	2c00      	cmp	r4, #0
    1d30:	d010      	beq.n	1d54 <udd_ctrl_in_sent+0x34>
    1d32:	4f1d      	ldr	r7, [pc, #116]	; (1da8 <udd_ctrl_in_sent+0x88>)
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    1d34:	2c3f      	cmp	r4, #63	; 0x3f
    1d36:	d923      	bls.n	1d80 <udd_ctrl_in_sent+0x60>
    1d38:	2340      	movs	r3, #64	; 0x40
		b_shortpacket = false;
    1d3a:	2100      	movs	r1, #0
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    1d3c:	2440      	movs	r4, #64	; 0x40
    1d3e:	7039      	strb	r1, [r7, #0]
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    1d40:	68b1      	ldr	r1, [r6, #8]
    1d42:	481a      	ldr	r0, [pc, #104]	; (1dac <udd_ctrl_in_sent+0x8c>)
    1d44:	188a      	adds	r2, r1, r2
    1d46:	4e1a      	ldr	r6, [pc, #104]	; (1db0 <udd_ctrl_in_sent+0x90>)
    1d48:	2100      	movs	r1, #0
    1d4a:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
    1d4c:	882b      	ldrh	r3, [r5, #0]
    1d4e:	18e4      	adds	r4, r4, r3
    1d50:	802c      	strh	r4, [r5, #0]
}
    1d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    1d54:	4917      	ldr	r1, [pc, #92]	; (1db4 <udd_ctrl_in_sent+0x94>)
    1d56:	880b      	ldrh	r3, [r1, #0]
    1d58:	18d3      	adds	r3, r2, r3
    1d5a:	b29b      	uxth	r3, r3
    1d5c:	800b      	strh	r3, [r1, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    1d5e:	88f1      	ldrh	r1, [r6, #6]
    1d60:	4299      	cmp	r1, r3
    1d62:	d010      	beq.n	1d86 <udd_ctrl_in_sent+0x66>
    1d64:	4f10      	ldr	r7, [pc, #64]	; (1da8 <udd_ctrl_in_sent+0x88>)
    1d66:	783b      	ldrb	r3, [r7, #0]
    1d68:	2b00      	cmp	r3, #0
    1d6a:	d10c      	bne.n	1d86 <udd_ctrl_in_sent+0x66>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    1d6c:	6973      	ldr	r3, [r6, #20]
    1d6e:	2b00      	cmp	r3, #0
    1d70:	d004      	beq.n	1d7c <udd_ctrl_in_sent+0x5c>
    1d72:	4798      	blx	r3
    1d74:	2800      	cmp	r0, #0
    1d76:	d10e      	bne.n	1d96 <udd_ctrl_in_sent+0x76>
    1d78:	2300      	movs	r3, #0
    1d7a:	882a      	ldrh	r2, [r5, #0]
		b_shortpacket = true;
    1d7c:	2101      	movs	r1, #1
    1d7e:	e7de      	b.n	1d3e <udd_ctrl_in_sent+0x1e>
    1d80:	0023      	movs	r3, r4
    1d82:	2101      	movs	r1, #1
    1d84:	e7db      	b.n	1d3e <udd_ctrl_in_sent+0x1e>
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    1d86:	2204      	movs	r2, #4
    1d88:	4b0b      	ldr	r3, [pc, #44]	; (1db8 <udd_ctrl_in_sent+0x98>)
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    1d8a:	490c      	ldr	r1, [pc, #48]	; (1dbc <udd_ctrl_in_sent+0x9c>)
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    1d8c:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    1d8e:	4807      	ldr	r0, [pc, #28]	; (1dac <udd_ctrl_in_sent+0x8c>)
    1d90:	4b0b      	ldr	r3, [pc, #44]	; (1dc0 <udd_ctrl_in_sent+0xa0>)
    1d92:	4798      	blx	r3
			return;
    1d94:	e7dd      	b.n	1d52 <udd_ctrl_in_sent+0x32>
			udd_ctrl_payload_nb_trans = 0;
    1d96:	802c      	strh	r4, [r5, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    1d98:	89b4      	ldrh	r4, [r6, #12]
    1d9a:	2200      	movs	r2, #0
    1d9c:	e7ca      	b.n	1d34 <udd_ctrl_in_sent+0x14>
    1d9e:	46c0      	nop			; (mov r8, r8)
    1da0:	20000dee 	.word	0x20000dee
    1da4:	20001240 	.word	0x20001240
    1da8:	20000ded 	.word	0x20000ded
    1dac:	200010d8 	.word	0x200010d8
    1db0:	00003099 	.word	0x00003099
    1db4:	20000df0 	.word	0x20000df0
    1db8:	20000df2 	.word	0x20000df2
    1dbc:	20001258 	.word	0x20001258
    1dc0:	0000312d 	.word	0x0000312d

00001dc4 <_usb_on_sof_notify>:
{
    1dc4:	b510      	push	{r4, lr}
	udc_sof_notify();
    1dc6:	4b01      	ldr	r3, [pc, #4]	; (1dcc <_usb_on_sof_notify+0x8>)
    1dc8:	4798      	blx	r3
}
    1dca:	bd10      	pop	{r4, pc}
    1dcc:	000012c1 	.word	0x000012c1

00001dd0 <cpu_irq_restore.part.0>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
		cpu_irq_enable();
    1dd0:	2201      	movs	r2, #1
    1dd2:	4b03      	ldr	r3, [pc, #12]	; (1de0 <cpu_irq_restore.part.0+0x10>)
    1dd4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    1dd6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1dda:	b662      	cpsie	i
}
    1ddc:	4770      	bx	lr
    1dde:	46c0      	nop			; (mov r8, r8)
    1de0:	200000ca 	.word	0x200000ca

00001de4 <_usb_device_lpm_suspend>:
{
    1de4:	b530      	push	{r4, r5, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    1de6:	4c27      	ldr	r4, [pc, #156]	; (1e84 <_usb_device_lpm_suspend+0xa0>)
{
    1de8:	b085      	sub	sp, #20
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    1dea:	2106      	movs	r1, #6
    1dec:	0020      	movs	r0, r4
    1dee:	4d26      	ldr	r5, [pc, #152]	; (1e88 <_usb_device_lpm_suspend+0xa4>)
    1df0:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    1df2:	2104      	movs	r1, #4
    1df4:	0020      	movs	r0, r4
    1df6:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    1df8:	0020      	movs	r0, r4
    1dfa:	4b24      	ldr	r3, [pc, #144]	; (1e8c <_usb_device_lpm_suspend+0xa8>)
    1dfc:	2102      	movs	r1, #2
    1dfe:	4798      	blx	r3
	enum sleepmgr_mode sleep_mode[] = {
    1e00:	4b23      	ldr	r3, [pc, #140]	; (1e90 <_usb_device_lpm_suspend+0xac>)
	if (udd_state == new_state) {
    1e02:	4c24      	ldr	r4, [pc, #144]	; (1e94 <_usb_device_lpm_suspend+0xb0>)
	enum sleepmgr_mode sleep_mode[] = {
    1e04:	9301      	str	r3, [sp, #4]
	if (udd_state == new_state) {
    1e06:	7823      	ldrb	r3, [r4, #0]
    1e08:	2b02      	cmp	r3, #2
    1e0a:	d01e      	beq.n	1e4a <_usb_device_lpm_suspend+0x66>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    1e0c:	4b22      	ldr	r3, [pc, #136]	; (1e98 <_usb_device_lpm_suspend+0xb4>)
    1e0e:	785a      	ldrb	r2, [r3, #1]
    1e10:	2aff      	cmp	r2, #255	; 0xff
    1e12:	d01c      	beq.n	1e4e <_usb_device_lpm_suspend+0x6a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1e14:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1e18:	4251      	negs	r1, r2
    1e1a:	414a      	adcs	r2, r1
    1e1c:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    1e1e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1e20:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1e24:	2200      	movs	r2, #0
    1e26:	491d      	ldr	r1, [pc, #116]	; (1e9c <_usb_device_lpm_suspend+0xb8>)
    1e28:	700a      	strb	r2, [r1, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    1e2a:	785a      	ldrb	r2, [r3, #1]
	return flags;
    1e2c:	9802      	ldr	r0, [sp, #8]
    1e2e:	3201      	adds	r2, #1
    1e30:	705a      	strb	r2, [r3, #1]
	if (cpu_irq_is_enabled_flags(flags))
    1e32:	2800      	cmp	r0, #0
    1e34:	d004      	beq.n	1e40 <_usb_device_lpm_suspend+0x5c>
		cpu_irq_enable();
    1e36:	2201      	movs	r2, #1
    1e38:	700a      	strb	r2, [r1, #0]
    1e3a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1e3e:	b662      	cpsie	i
	if (udd_state != UDD_STATE_OFF) {
    1e40:	7822      	ldrb	r2, [r4, #0]
    1e42:	2a00      	cmp	r2, #0
    1e44:	d104      	bne.n	1e50 <_usb_device_lpm_suspend+0x6c>
	udd_state = new_state;
    1e46:	2302      	movs	r3, #2
    1e48:	7023      	strb	r3, [r4, #0]
}
    1e4a:	b005      	add	sp, #20
    1e4c:	bd30      	pop	{r4, r5, pc}
    1e4e:	e7fe      	b.n	1e4e <_usb_device_lpm_suspend+0x6a>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    1e50:	a801      	add	r0, sp, #4
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    1e52:	5c82      	ldrb	r2, [r0, r2]
    1e54:	5c98      	ldrb	r0, [r3, r2]
    1e56:	2800      	cmp	r0, #0
    1e58:	d012      	beq.n	1e80 <_usb_device_lpm_suspend+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1e5a:	f3ef 8010 	mrs	r0, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1e5e:	4245      	negs	r5, r0
    1e60:	4168      	adcs	r0, r5
    1e62:	9003      	str	r0, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    1e64:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1e66:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1e6a:	2000      	movs	r0, #0
    1e6c:	7008      	strb	r0, [r1, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    1e6e:	5c99      	ldrb	r1, [r3, r2]
	return flags;
    1e70:	9803      	ldr	r0, [sp, #12]
    1e72:	3901      	subs	r1, #1
    1e74:	5499      	strb	r1, [r3, r2]
	if (cpu_irq_is_enabled_flags(flags))
    1e76:	2800      	cmp	r0, #0
    1e78:	d0e5      	beq.n	1e46 <_usb_device_lpm_suspend+0x62>
    1e7a:	4b09      	ldr	r3, [pc, #36]	; (1ea0 <_usb_device_lpm_suspend+0xbc>)
    1e7c:	4798      	blx	r3
    1e7e:	e7e2      	b.n	1e46 <_usb_device_lpm_suspend+0x62>
    1e80:	e7fe      	b.n	1e80 <_usb_device_lpm_suspend+0x9c>
    1e82:	46c0      	nop			; (mov r8, r8)
    1e84:	200010d8 	.word	0x200010d8
    1e88:	00002bc1 	.word	0x00002bc1
    1e8c:	00002ba1 	.word	0x00002ba1
    1e90:	01010100 	.word	0x01010100
    1e94:	20000e44 	.word	0x20000e44
    1e98:	200013f8 	.word	0x200013f8
    1e9c:	200000ca 	.word	0x200000ca
    1ea0:	00001dd1 	.word	0x00001dd1

00001ea4 <_usb_ep0_on_setup>:
{
    1ea4:	b570      	push	{r4, r5, r6, lr}
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    1ea6:	4d33      	ldr	r5, [pc, #204]	; (1f74 <_usb_ep0_on_setup+0xd0>)
{
    1ea8:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    1eaa:	782b      	ldrb	r3, [r5, #0]
    1eac:	2b00      	cmp	r3, #0
    1eae:	d006      	beq.n	1ebe <_usb_ep0_on_setup+0x1a>
		if (NULL != udd_g_ctrlreq.callback) {
    1eb0:	4b31      	ldr	r3, [pc, #196]	; (1f78 <_usb_ep0_on_setup+0xd4>)
    1eb2:	691b      	ldr	r3, [r3, #16]
    1eb4:	2b00      	cmp	r3, #0
    1eb6:	d000      	beq.n	1eba <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    1eb8:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    1eba:	2300      	movs	r3, #0
    1ebc:	702b      	strb	r3, [r5, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    1ebe:	8823      	ldrh	r3, [r4, #0]
    1ec0:	2b08      	cmp	r3, #8
    1ec2:	d00b      	beq.n	1edc <_usb_ep0_on_setup+0x38>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    1ec4:	2305      	movs	r3, #5
	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    1ec6:	4c2d      	ldr	r4, [pc, #180]	; (1f7c <_usb_ep0_on_setup+0xd8>)
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    1ec8:	702b      	strb	r3, [r5, #0]
	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    1eca:	2180      	movs	r1, #128	; 0x80
    1ecc:	0020      	movs	r0, r4
    1ece:	4b2c      	ldr	r3, [pc, #176]	; (1f80 <_usb_ep0_on_setup+0xdc>)
    1ed0:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    1ed2:	2100      	movs	r1, #0
    1ed4:	0020      	movs	r0, r4
    1ed6:	4b2b      	ldr	r3, [pc, #172]	; (1f84 <_usb_ep0_on_setup+0xe0>)
    1ed8:	4798      	blx	r3
}
    1eda:	bd70      	pop	{r4, r5, r6, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    1edc:	4c2a      	ldr	r4, [pc, #168]	; (1f88 <_usb_ep0_on_setup+0xe4>)
    1ede:	4e26      	ldr	r6, [pc, #152]	; (1f78 <_usb_ep0_on_setup+0xd4>)
    1ee0:	7823      	ldrb	r3, [r4, #0]
    1ee2:	7033      	strb	r3, [r6, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    1ee4:	7863      	ldrb	r3, [r4, #1]
    1ee6:	7073      	strb	r3, [r6, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    1ee8:	78e2      	ldrb	r2, [r4, #3]
    1eea:	78a3      	ldrb	r3, [r4, #2]
    1eec:	0212      	lsls	r2, r2, #8
    1eee:	189b      	adds	r3, r3, r2
    1ef0:	8073      	strh	r3, [r6, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    1ef2:	7962      	ldrb	r2, [r4, #5]
    1ef4:	7923      	ldrb	r3, [r4, #4]
    1ef6:	0212      	lsls	r2, r2, #8
    1ef8:	189b      	adds	r3, r3, r2
    1efa:	80b3      	strh	r3, [r6, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    1efc:	79e2      	ldrb	r2, [r4, #7]
    1efe:	79a3      	ldrb	r3, [r4, #6]
    1f00:	0212      	lsls	r2, r2, #8
    1f02:	189b      	adds	r3, r3, r2
    1f04:	80f3      	strh	r3, [r6, #6]
		if (false == udc_process_setup()) {
    1f06:	4b21      	ldr	r3, [pc, #132]	; (1f8c <_usb_ep0_on_setup+0xe8>)
    1f08:	4798      	blx	r3
    1f0a:	2800      	cmp	r0, #0
    1f0c:	d0da      	beq.n	1ec4 <_usb_ep0_on_setup+0x20>
		} else if (Udd_setup_is_in()) {
    1f0e:	7833      	ldrb	r3, [r6, #0]
    1f10:	2b7f      	cmp	r3, #127	; 0x7f
    1f12:	d81e      	bhi.n	1f52 <_usb_ep0_on_setup+0xae>
			if(0 == udd_g_ctrlreq.req.wLength) {
    1f14:	88f3      	ldrh	r3, [r6, #6]
    1f16:	2b00      	cmp	r3, #0
    1f18:	d00d      	beq.n	1f36 <_usb_ep0_on_setup+0x92>
				udd_ctrl_prev_payload_nb_trans = 0;
    1f1a:	2300      	movs	r3, #0
    1f1c:	4a1c      	ldr	r2, [pc, #112]	; (1f90 <_usb_ep0_on_setup+0xec>)
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    1f1e:	2100      	movs	r1, #0
				udd_ctrl_prev_payload_nb_trans = 0;
    1f20:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    1f22:	4a1c      	ldr	r2, [pc, #112]	; (1f94 <_usb_ep0_on_setup+0xf0>)
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    1f24:	4815      	ldr	r0, [pc, #84]	; (1f7c <_usb_ep0_on_setup+0xd8>)
				udd_ctrl_payload_nb_trans = 0;
    1f26:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    1f28:	3301      	adds	r3, #1
    1f2a:	702b      	strb	r3, [r5, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    1f2c:	0022      	movs	r2, r4
    1f2e:	333f      	adds	r3, #63	; 0x3f
    1f30:	4c19      	ldr	r4, [pc, #100]	; (1f98 <_usb_ep0_on_setup+0xf4>)
    1f32:	47a0      	blx	r4
    1f34:	e7d1      	b.n	1eda <_usb_ep0_on_setup+0x36>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    1f36:	3303      	adds	r3, #3
    1f38:	702b      	strb	r3, [r5, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    1f3a:	4d10      	ldr	r5, [pc, #64]	; (1f7c <_usb_ep0_on_setup+0xd8>)
    1f3c:	0021      	movs	r1, r4
    1f3e:	0028      	movs	r0, r5
    1f40:	4b16      	ldr	r3, [pc, #88]	; (1f9c <_usb_ep0_on_setup+0xf8>)
    1f42:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    1f44:	68b2      	ldr	r2, [r6, #8]
    1f46:	2300      	movs	r3, #0
    1f48:	2100      	movs	r1, #0
    1f4a:	0028      	movs	r0, r5
    1f4c:	4c14      	ldr	r4, [pc, #80]	; (1fa0 <_usb_ep0_on_setup+0xfc>)
    1f4e:	47a0      	blx	r4
    1f50:	e7c3      	b.n	1eda <_usb_ep0_on_setup+0x36>
			udd_ctrl_prev_payload_nb_trans = 0;
    1f52:	2300      	movs	r3, #0
    1f54:	4a0e      	ldr	r2, [pc, #56]	; (1f90 <_usb_ep0_on_setup+0xec>)
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    1f56:	2100      	movs	r1, #0
			udd_ctrl_prev_payload_nb_trans = 0;
    1f58:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    1f5a:	4a0e      	ldr	r2, [pc, #56]	; (1f94 <_usb_ep0_on_setup+0xf0>)
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    1f5c:	4807      	ldr	r0, [pc, #28]	; (1f7c <_usb_ep0_on_setup+0xd8>)
			udd_ctrl_payload_nb_trans = 0;
    1f5e:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    1f60:	3302      	adds	r3, #2
    1f62:	702b      	strb	r3, [r5, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    1f64:	0022      	movs	r2, r4
    1f66:	333e      	adds	r3, #62	; 0x3e
    1f68:	4c0b      	ldr	r4, [pc, #44]	; (1f98 <_usb_ep0_on_setup+0xf4>)
    1f6a:	47a0      	blx	r4
			udd_ctrl_in_sent();
    1f6c:	4b0d      	ldr	r3, [pc, #52]	; (1fa4 <_usb_ep0_on_setup+0x100>)
    1f6e:	4798      	blx	r3
    1f70:	e7b3      	b.n	1eda <_usb_ep0_on_setup+0x36>
    1f72:	46c0      	nop			; (mov r8, r8)
    1f74:	20000df2 	.word	0x20000df2
    1f78:	20001240 	.word	0x20001240
    1f7c:	200010d8 	.word	0x200010d8
    1f80:	00002ffd 	.word	0x00002ffd
    1f84:	0000301d 	.word	0x0000301d
    1f88:	20001258 	.word	0x20001258
    1f8c:	00001301 	.word	0x00001301
    1f90:	20000df0 	.word	0x20000df0
    1f94:	20000dee 	.word	0x20000dee
    1f98:	000030e5 	.word	0x000030e5
    1f9c:	0000312d 	.word	0x0000312d
    1fa0:	00003099 	.word	0x00003099
    1fa4:	00001d21 	.word	0x00001d21

00001fa8 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    1fa8:	b530      	push	{r4, r5, lr}
		if (!(OSCCTRL->DFLLCTRL.reg & OSCCTRL_DFLLCTRL_USBCRM)) {
    1faa:	4b31      	ldr	r3, [pc, #196]	; (2070 <STACK_SIZE+0x70>)
{
    1fac:	b085      	sub	sp, #20
		if (!(OSCCTRL->DFLLCTRL.reg & OSCCTRL_DFLLCTRL_USBCRM)) {
    1fae:	8b1a      	ldrh	r2, [r3, #24]
    1fb0:	0692      	lsls	r2, r2, #26
    1fb2:	d43e      	bmi.n	2032 <STACK_SIZE+0x32>
			while((OSCCTRL->STATUS.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    1fb4:	21d0      	movs	r1, #208	; 0xd0
    1fb6:	0109      	lsls	r1, r1, #4
    1fb8:	68da      	ldr	r2, [r3, #12]
    1fba:	400a      	ands	r2, r1
    1fbc:	428a      	cmp	r2, r1
    1fbe:	d1fb      	bne.n	1fb8 <_usb_on_wakeup+0x10>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    1fc0:	4c2c      	ldr	r4, [pc, #176]	; (2074 <STACK_SIZE+0x74>)
    1fc2:	4b2d      	ldr	r3, [pc, #180]	; (2078 <STACK_SIZE+0x78>)
    1fc4:	2102      	movs	r1, #2
    1fc6:	0020      	movs	r0, r4
    1fc8:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    1fca:	2104      	movs	r1, #4
    1fcc:	0020      	movs	r0, r4
    1fce:	4d2b      	ldr	r5, [pc, #172]	; (207c <STACK_SIZE+0x7c>)
    1fd0:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    1fd2:	4b2b      	ldr	r3, [pc, #172]	; (2080 <STACK_SIZE+0x80>)
    1fd4:	4a2b      	ldr	r2, [pc, #172]	; (2084 <STACK_SIZE+0x84>)
    1fd6:	2106      	movs	r1, #6
    1fd8:	0020      	movs	r0, r4
    1fda:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    1fdc:	0020      	movs	r0, r4
    1fde:	2106      	movs	r1, #6
    1fe0:	47a8      	blx	r5
	enum sleepmgr_mode sleep_mode[] = {
    1fe2:	4b29      	ldr	r3, [pc, #164]	; (2088 <STACK_SIZE+0x88>)
	if (udd_state == new_state) {
    1fe4:	4c29      	ldr	r4, [pc, #164]	; (208c <STACK_SIZE+0x8c>)
	enum sleepmgr_mode sleep_mode[] = {
    1fe6:	9301      	str	r3, [sp, #4]
	if (udd_state == new_state) {
    1fe8:	7823      	ldrb	r3, [r4, #0]
    1fea:	2b03      	cmp	r3, #3
    1fec:	d01e      	beq.n	202c <STACK_SIZE+0x2c>
	if(sleepmgr_locks[mode] >= 0xff) {
    1fee:	4b28      	ldr	r3, [pc, #160]	; (2090 <STACK_SIZE+0x90>)
    1ff0:	785a      	ldrb	r2, [r3, #1]
    1ff2:	2aff      	cmp	r2, #255	; 0xff
    1ff4:	d01c      	beq.n	2030 <STACK_SIZE+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1ff6:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1ffa:	4251      	negs	r1, r2
    1ffc:	414a      	adcs	r2, r1
    1ffe:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    2000:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2002:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2006:	2200      	movs	r2, #0
    2008:	4922      	ldr	r1, [pc, #136]	; (2094 <STACK_SIZE+0x94>)
    200a:	700a      	strb	r2, [r1, #0]
	++sleepmgr_locks[mode];
    200c:	785a      	ldrb	r2, [r3, #1]
	return flags;
    200e:	9802      	ldr	r0, [sp, #8]
    2010:	3201      	adds	r2, #1
    2012:	705a      	strb	r2, [r3, #1]
	if (cpu_irq_is_enabled_flags(flags))
    2014:	2800      	cmp	r0, #0
    2016:	d004      	beq.n	2022 <STACK_SIZE+0x22>
		cpu_irq_enable();
    2018:	2201      	movs	r2, #1
    201a:	700a      	strb	r2, [r1, #0]
    201c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2020:	b662      	cpsie	i
	if (udd_state != UDD_STATE_OFF) {
    2022:	7822      	ldrb	r2, [r4, #0]
    2024:	2a00      	cmp	r2, #0
    2026:	d10a      	bne.n	203e <STACK_SIZE+0x3e>
	udd_state = new_state;
    2028:	2303      	movs	r3, #3
    202a:	7023      	strb	r3, [r4, #0]
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
#endif
}
    202c:	b005      	add	sp, #20
    202e:	bd30      	pop	{r4, r5, pc}
    2030:	e7fe      	b.n	2030 <STACK_SIZE+0x30>
			while((OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY);
    2032:	2180      	movs	r1, #128	; 0x80
    2034:	0049      	lsls	r1, r1, #1
    2036:	68da      	ldr	r2, [r3, #12]
    2038:	420a      	tst	r2, r1
    203a:	d0fc      	beq.n	2036 <STACK_SIZE+0x36>
    203c:	e7c0      	b.n	1fc0 <_usb_on_wakeup+0x18>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    203e:	a801      	add	r0, sp, #4
	if(sleepmgr_locks[mode] == 0) {
    2040:	5c82      	ldrb	r2, [r0, r2]
    2042:	5c98      	ldrb	r0, [r3, r2]
    2044:	2800      	cmp	r0, #0
    2046:	d012      	beq.n	206e <STACK_SIZE+0x6e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2048:	f3ef 8010 	mrs	r0, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    204c:	4245      	negs	r5, r0
    204e:	4168      	adcs	r0, r5
    2050:	9003      	str	r0, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    2052:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2054:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2058:	2000      	movs	r0, #0
    205a:	7008      	strb	r0, [r1, #0]
	--sleepmgr_locks[mode];
    205c:	5c99      	ldrb	r1, [r3, r2]
	return flags;
    205e:	9803      	ldr	r0, [sp, #12]
    2060:	3901      	subs	r1, #1
    2062:	5499      	strb	r1, [r3, r2]
	if (cpu_irq_is_enabled_flags(flags))
    2064:	2800      	cmp	r0, #0
    2066:	d0df      	beq.n	2028 <STACK_SIZE+0x28>
    2068:	4b0b      	ldr	r3, [pc, #44]	; (2098 <STACK_SIZE+0x98>)
    206a:	4798      	blx	r3
    206c:	e7dc      	b.n	2028 <STACK_SIZE+0x28>
    206e:	e7fe      	b.n	206e <STACK_SIZE+0x6e>
    2070:	40000c00 	.word	0x40000c00
    2074:	200010d8 	.word	0x200010d8
    2078:	00002bc1 	.word	0x00002bc1
    207c:	00002ba1 	.word	0x00002ba1
    2080:	00002b7d 	.word	0x00002b7d
    2084:	00001de5 	.word	0x00001de5
    2088:	01010100 	.word	0x01010100
    208c:	20000e44 	.word	0x20000e44
    2090:	200013f8 	.word	0x200013f8
    2094:	200000ca 	.word	0x200000ca
    2098:	00001dd1 	.word	0x00001dd1

0000209c <_usb_on_suspend>:
{
    209c:	b530      	push	{r4, r5, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    209e:	4c25      	ldr	r4, [pc, #148]	; (2134 <_usb_on_suspend+0x98>)
{
    20a0:	b085      	sub	sp, #20
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    20a2:	2104      	movs	r1, #4
    20a4:	0020      	movs	r0, r4
    20a6:	4b24      	ldr	r3, [pc, #144]	; (2138 <_usb_on_suspend+0x9c>)
    20a8:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    20aa:	0020      	movs	r0, r4
    20ac:	4b23      	ldr	r3, [pc, #140]	; (213c <_usb_on_suspend+0xa0>)
    20ae:	2102      	movs	r1, #2
    20b0:	4798      	blx	r3
	enum sleepmgr_mode sleep_mode[] = {
    20b2:	4b23      	ldr	r3, [pc, #140]	; (2140 <_usb_on_suspend+0xa4>)
	if (udd_state == new_state) {
    20b4:	4c23      	ldr	r4, [pc, #140]	; (2144 <_usb_on_suspend+0xa8>)
	enum sleepmgr_mode sleep_mode[] = {
    20b6:	9301      	str	r3, [sp, #4]
	if (udd_state == new_state) {
    20b8:	7823      	ldrb	r3, [r4, #0]
    20ba:	2b01      	cmp	r3, #1
    20bc:	d01e      	beq.n	20fc <_usb_on_suspend+0x60>
	if(sleepmgr_locks[mode] >= 0xff) {
    20be:	4b22      	ldr	r3, [pc, #136]	; (2148 <_usb_on_suspend+0xac>)
    20c0:	785a      	ldrb	r2, [r3, #1]
    20c2:	2aff      	cmp	r2, #255	; 0xff
    20c4:	d01c      	beq.n	2100 <_usb_on_suspend+0x64>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    20c6:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    20ca:	4251      	negs	r1, r2
    20cc:	414a      	adcs	r2, r1
    20ce:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    20d0:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    20d2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    20d6:	2200      	movs	r2, #0
    20d8:	491c      	ldr	r1, [pc, #112]	; (214c <_usb_on_suspend+0xb0>)
    20da:	700a      	strb	r2, [r1, #0]
	++sleepmgr_locks[mode];
    20dc:	785a      	ldrb	r2, [r3, #1]
	return flags;
    20de:	9802      	ldr	r0, [sp, #8]
    20e0:	3201      	adds	r2, #1
    20e2:	705a      	strb	r2, [r3, #1]
	if (cpu_irq_is_enabled_flags(flags))
    20e4:	2800      	cmp	r0, #0
    20e6:	d004      	beq.n	20f2 <_usb_on_suspend+0x56>
		cpu_irq_enable();
    20e8:	2201      	movs	r2, #1
    20ea:	700a      	strb	r2, [r1, #0]
    20ec:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    20f0:	b662      	cpsie	i
	if (udd_state != UDD_STATE_OFF) {
    20f2:	7822      	ldrb	r2, [r4, #0]
    20f4:	2a00      	cmp	r2, #0
    20f6:	d104      	bne.n	2102 <_usb_on_suspend+0x66>
	udd_state = new_state;
    20f8:	2301      	movs	r3, #1
    20fa:	7023      	strb	r3, [r4, #0]
}
    20fc:	b005      	add	sp, #20
    20fe:	bd30      	pop	{r4, r5, pc}
    2100:	e7fe      	b.n	2100 <_usb_on_suspend+0x64>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    2102:	a801      	add	r0, sp, #4
	if(sleepmgr_locks[mode] == 0) {
    2104:	5c82      	ldrb	r2, [r0, r2]
    2106:	5c98      	ldrb	r0, [r3, r2]
    2108:	2800      	cmp	r0, #0
    210a:	d012      	beq.n	2132 <_usb_on_suspend+0x96>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    210c:	f3ef 8010 	mrs	r0, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2110:	4245      	negs	r5, r0
    2112:	4168      	adcs	r0, r5
    2114:	9003      	str	r0, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    2116:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2118:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    211c:	2000      	movs	r0, #0
    211e:	7008      	strb	r0, [r1, #0]
	--sleepmgr_locks[mode];
    2120:	5c99      	ldrb	r1, [r3, r2]
	return flags;
    2122:	9803      	ldr	r0, [sp, #12]
    2124:	3901      	subs	r1, #1
    2126:	5499      	strb	r1, [r3, r2]
	if (cpu_irq_is_enabled_flags(flags))
    2128:	2800      	cmp	r0, #0
    212a:	d0e5      	beq.n	20f8 <_usb_on_suspend+0x5c>
    212c:	4b08      	ldr	r3, [pc, #32]	; (2150 <_usb_on_suspend+0xb4>)
    212e:	4798      	blx	r3
    2130:	e7e2      	b.n	20f8 <_usb_on_suspend+0x5c>
    2132:	e7fe      	b.n	2132 <_usb_on_suspend+0x96>
    2134:	200010d8 	.word	0x200010d8
    2138:	00002bc1 	.word	0x00002bc1
    213c:	00002ba1 	.word	0x00002ba1
    2140:	01010100 	.word	0x01010100
    2144:	20000e44 	.word	0x20000e44
    2148:	200013f8 	.word	0x200013f8
    214c:	200000ca 	.word	0x200000ca
    2150:	00001dd1 	.word	0x00001dd1

00002154 <udd_ep_abort>:
{
    2154:	b570      	push	{r4, r5, r6, lr}
	usb_device_endpoint_abort_job(&usb_device, ep);
    2156:	0001      	movs	r1, r0
{
    2158:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
    215a:	4b10      	ldr	r3, [pc, #64]	; (219c <udd_ep_abort+0x48>)
    215c:	4810      	ldr	r0, [pc, #64]	; (21a0 <udd_ep_abort+0x4c>)
    215e:	4798      	blx	r3
	if ((ep == 0) || (ep == 0x80)) {
    2160:	237f      	movs	r3, #127	; 0x7f
    2162:	4023      	ands	r3, r4
    2164:	d017      	beq.n	2196 <udd_ep_abort+0x42>
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    2166:	230f      	movs	r3, #15
	if (!ptr_job->busy) {
    2168:	2001      	movs	r0, #1
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    216a:	4023      	ands	r3, r4
    216c:	09e2      	lsrs	r2, r4, #7
    216e:	005b      	lsls	r3, r3, #1
    2170:	189b      	adds	r3, r3, r2
    2172:	3b02      	subs	r3, #2
	if (!ptr_job->busy) {
    2174:	009a      	lsls	r2, r3, #2
    2176:	18d3      	adds	r3, r2, r3
    2178:	490a      	ldr	r1, [pc, #40]	; (21a4 <udd_ep_abort+0x50>)
    217a:	009b      	lsls	r3, r3, #2
    217c:	18ca      	adds	r2, r1, r3
    217e:	7c95      	ldrb	r5, [r2, #18]
    2180:	4228      	tst	r0, r5
    2182:	d007      	beq.n	2194 <udd_ep_abort+0x40>
	if (NULL != ptr_job->call_trans) {
    2184:	585b      	ldr	r3, [r3, r1]
	ptr_job->busy = false;
    2186:	4385      	bics	r5, r0
    2188:	7495      	strb	r5, [r2, #18]
	if (NULL != ptr_job->call_trans) {
    218a:	2b00      	cmp	r3, #0
    218c:	d002      	beq.n	2194 <udd_ep_abort+0x40>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    218e:	68d1      	ldr	r1, [r2, #12]
    2190:	0022      	movs	r2, r4
    2192:	4798      	blx	r3
}
    2194:	bd70      	pop	{r4, r5, r6, pc}
	if (!ptr_job->busy) {
    2196:	7c9b      	ldrb	r3, [r3, #18]
    2198:	deff      	udf	#255	; 0xff
    219a:	46c0      	nop			; (mov r8, r8)
    219c:	00002fad 	.word	0x00002fad
    21a0:	200010d8 	.word	0x200010d8
    21a4:	20000df4 	.word	0x20000df4

000021a8 <_usb_ep0_on_tansfer_ok>:
{
    21a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21aa:	46ce      	mov	lr, r9
    21ac:	4647      	mov	r7, r8
    21ae:	b580      	push	{r7, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    21b0:	4c3c      	ldr	r4, [pc, #240]	; (22a4 <_usb_ep0_on_tansfer_ok+0xfc>)
    21b2:	7823      	ldrb	r3, [r4, #0]
    21b4:	2b01      	cmp	r3, #1
    21b6:	d00c      	beq.n	21d2 <_usb_ep0_on_tansfer_ok+0x2a>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    21b8:	2b02      	cmp	r3, #2
    21ba:	d036      	beq.n	222a <_usb_ep0_on_tansfer_ok+0x82>
			if (NULL != udd_g_ctrlreq.callback) {
    21bc:	4b3a      	ldr	r3, [pc, #232]	; (22a8 <_usb_ep0_on_tansfer_ok+0x100>)
    21be:	691b      	ldr	r3, [r3, #16]
    21c0:	2b00      	cmp	r3, #0
    21c2:	d000      	beq.n	21c6 <_usb_ep0_on_tansfer_ok+0x1e>
				udd_g_ctrlreq.callback();
    21c4:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    21c6:	2300      	movs	r3, #0
    21c8:	7023      	strb	r3, [r4, #0]
}
    21ca:	bc0c      	pop	{r2, r3}
    21cc:	4690      	mov	r8, r2
    21ce:	4699      	mov	r9, r3
    21d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    21d2:	4a36      	ldr	r2, [pc, #216]	; (22ac <_usb_ep0_on_tansfer_ok+0x104>)
    21d4:	4e34      	ldr	r6, [pc, #208]	; (22a8 <_usb_ep0_on_tansfer_ok+0x100>)
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    21d6:	880f      	ldrh	r7, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    21d8:	8810      	ldrh	r0, [r2, #0]
    21da:	89b3      	ldrh	r3, [r6, #12]
    21dc:	19c5      	adds	r5, r0, r7
    21de:	4690      	mov	r8, r2
    21e0:	42ab      	cmp	r3, r5
    21e2:	db25      	blt.n	2230 <_usb_ep0_on_tansfer_ok+0x88>
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    21e4:	68b3      	ldr	r3, [r6, #8]
    21e6:	003a      	movs	r2, r7
    21e8:	469c      	mov	ip, r3
    21ea:	4b31      	ldr	r3, [pc, #196]	; (22b0 <_usb_ep0_on_tansfer_ok+0x108>)
    21ec:	4460      	add	r0, ip
    21ee:	0019      	movs	r1, r3
    21f0:	4699      	mov	r9, r3
    21f2:	4b30      	ldr	r3, [pc, #192]	; (22b4 <_usb_ep0_on_tansfer_ok+0x10c>)
    21f4:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    21f6:	4643      	mov	r3, r8
    21f8:	b2ad      	uxth	r5, r5
    21fa:	801d      	strh	r5, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    21fc:	2f40      	cmp	r7, #64	; 0x40
    21fe:	d01b      	beq.n	2238 <_usb_ep0_on_tansfer_ok+0x90>
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2200:	6973      	ldr	r3, [r6, #20]
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2202:	81b5      	strh	r5, [r6, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2204:	2b00      	cmp	r3, #0
    2206:	d002      	beq.n	220e <_usb_ep0_on_tansfer_ok+0x66>
			if (!udd_g_ctrlreq.over_under_run()) {
    2208:	4798      	blx	r3
    220a:	1e05      	subs	r5, r0, #0
    220c:	d032      	beq.n	2274 <_usb_ep0_on_tansfer_ok+0xcc>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    220e:	2303      	movs	r3, #3
    2210:	7023      	strb	r3, [r4, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    2212:	4c29      	ldr	r4, [pc, #164]	; (22b8 <_usb_ep0_on_tansfer_ok+0x110>)
    2214:	4649      	mov	r1, r9
    2216:	0020      	movs	r0, r4
    2218:	4b28      	ldr	r3, [pc, #160]	; (22bc <_usb_ep0_on_tansfer_ok+0x114>)
    221a:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    221c:	68b2      	ldr	r2, [r6, #8]
    221e:	2300      	movs	r3, #0
    2220:	2100      	movs	r1, #0
    2222:	0020      	movs	r0, r4
    2224:	4c26      	ldr	r4, [pc, #152]	; (22c0 <_usb_ep0_on_tansfer_ok+0x118>)
    2226:	47a0      	blx	r4
    2228:	e7cf      	b.n	21ca <_usb_ep0_on_tansfer_ok+0x22>
			udd_ctrl_in_sent();
    222a:	4b26      	ldr	r3, [pc, #152]	; (22c4 <_usb_ep0_on_tansfer_ok+0x11c>)
    222c:	4798      	blx	r3
    222e:	e7cc      	b.n	21ca <_usb_ep0_on_tansfer_ok+0x22>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2230:	1a1f      	subs	r7, r3, r0
    2232:	b2bf      	uxth	r7, r7
    2234:	19c5      	adds	r5, r0, r7
    2236:	e7d5      	b.n	21e4 <_usb_ep0_on_tansfer_ok+0x3c>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    2238:	4f23      	ldr	r7, [pc, #140]	; (22c8 <_usb_ep0_on_tansfer_ok+0x120>)
    223a:	88f2      	ldrh	r2, [r6, #6]
    223c:	883b      	ldrh	r3, [r7, #0]
    223e:	195b      	adds	r3, r3, r5
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    2240:	429a      	cmp	r2, r3
    2242:	dddd      	ble.n	2200 <_usb_ep0_on_tansfer_ok+0x58>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2244:	89b3      	ldrh	r3, [r6, #12]
    2246:	42ab      	cmp	r3, r5
    2248:	d10d      	bne.n	2266 <_usb_ep0_on_tansfer_ok+0xbe>
		if (!udd_g_ctrlreq.over_under_run) {
    224a:	6975      	ldr	r5, [r6, #20]
    224c:	2d00      	cmp	r5, #0
    224e:	d011      	beq.n	2274 <_usb_ep0_on_tansfer_ok+0xcc>
		if (!udd_g_ctrlreq.over_under_run()) {
    2250:	47a8      	blx	r5
    2252:	2800      	cmp	r0, #0
    2254:	d01b      	beq.n	228e <_usb_ep0_on_tansfer_ok+0xe6>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2256:	4642      	mov	r2, r8
    2258:	883b      	ldrh	r3, [r7, #0]
    225a:	8812      	ldrh	r2, [r2, #0]
    225c:	189b      	adds	r3, r3, r2
    225e:	803b      	strh	r3, [r7, #0]
		udd_ctrl_payload_nb_trans = 0;
    2260:	4642      	mov	r2, r8
    2262:	2300      	movs	r3, #0
    2264:	8013      	strh	r3, [r2, #0]
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2266:	2340      	movs	r3, #64	; 0x40
    2268:	464a      	mov	r2, r9
    226a:	2100      	movs	r1, #0
    226c:	4c17      	ldr	r4, [pc, #92]	; (22cc <_usb_ep0_on_tansfer_ok+0x124>)
    226e:	4812      	ldr	r0, [pc, #72]	; (22b8 <_usb_ep0_on_tansfer_ok+0x110>)
    2270:	47a0      	blx	r4
    2272:	e7aa      	b.n	21ca <_usb_ep0_on_tansfer_ok+0x22>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2274:	2305      	movs	r3, #5
    2276:	7023      	strb	r3, [r4, #0]
	usb_device_endpoint_set_halt(&usb_device, ep);
    2278:	4c0f      	ldr	r4, [pc, #60]	; (22b8 <_usb_ep0_on_tansfer_ok+0x110>)
    227a:	2100      	movs	r1, #0
    227c:	0020      	movs	r0, r4
    227e:	4b14      	ldr	r3, [pc, #80]	; (22d0 <_usb_ep0_on_tansfer_ok+0x128>)
    2280:	4798      	blx	r3
	usb_device_endpoint_abort_job(&usb_device, ep);
    2282:	2100      	movs	r1, #0
    2284:	0020      	movs	r0, r4
    2286:	4b13      	ldr	r3, [pc, #76]	; (22d4 <_usb_ep0_on_tansfer_ok+0x12c>)
    2288:	4798      	blx	r3
	if (!ptr_job->busy) {
    228a:	7cab      	ldrb	r3, [r5, #18]
    228c:	deff      	udf	#255	; 0xff
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    228e:	2305      	movs	r3, #5
	usb_device_endpoint_set_halt(&usb_device, ep);
    2290:	2100      	movs	r1, #0
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2292:	7023      	strb	r3, [r4, #0]
	usb_device_endpoint_set_halt(&usb_device, ep);
    2294:	4808      	ldr	r0, [pc, #32]	; (22b8 <_usb_ep0_on_tansfer_ok+0x110>)
    2296:	4b0e      	ldr	r3, [pc, #56]	; (22d0 <_usb_ep0_on_tansfer_ok+0x128>)
    2298:	4798      	blx	r3
	udd_ep_abort(ep);
    229a:	2000      	movs	r0, #0
    229c:	4b0e      	ldr	r3, [pc, #56]	; (22d8 <_usb_ep0_on_tansfer_ok+0x130>)
    229e:	4798      	blx	r3
    22a0:	e793      	b.n	21ca <_usb_ep0_on_tansfer_ok+0x22>
    22a2:	46c0      	nop			; (mov r8, r8)
    22a4:	20000df2 	.word	0x20000df2
    22a8:	20001240 	.word	0x20001240
    22ac:	20000dee 	.word	0x20000dee
    22b0:	20001258 	.word	0x20001258
    22b4:	0001fd79 	.word	0x0001fd79
    22b8:	200010d8 	.word	0x200010d8
    22bc:	0000312d 	.word	0x0000312d
    22c0:	00003099 	.word	0x00003099
    22c4:	00001d21 	.word	0x00001d21
    22c8:	20000df0 	.word	0x20000df0
    22cc:	000030e5 	.word	0x000030e5
    22d0:	00002ffd 	.word	0x00002ffd
    22d4:	00002fad 	.word	0x00002fad
    22d8:	00002155 	.word	0x00002155

000022dc <udd_ep_free>:
{
    22dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    22de:	46ce      	mov	lr, r9
    22e0:	4647      	mov	r7, r8
    22e2:	0005      	movs	r5, r0
    22e4:	b580      	push	{r7, lr}
    22e6:	b083      	sub	sp, #12
	usb_device_endpoint_get_config_defaults(&config_ep);
    22e8:	ac01      	add	r4, sp, #4
    22ea:	0020      	movs	r0, r4
    22ec:	4b21      	ldr	r3, [pc, #132]	; (2374 <udd_ep_free+0x98>)
    22ee:	4798      	blx	r3
	usb_device_endpoint_abort_job(&usb_device, ep);
    22f0:	4e21      	ldr	r6, [pc, #132]	; (2378 <udd_ep_free+0x9c>)
    22f2:	4b22      	ldr	r3, [pc, #136]	; (237c <udd_ep_free+0xa0>)
    22f4:	0029      	movs	r1, r5
    22f6:	0030      	movs	r0, r6
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    22f8:	270f      	movs	r7, #15
	usb_device_endpoint_abort_job(&usb_device, ep);
    22fa:	4798      	blx	r3
	if ((ep == 0) || (ep == 0x80)) {
    22fc:	237f      	movs	r3, #127	; 0x7f
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    22fe:	402f      	ands	r7, r5
	if ((ep == 0) || (ep == 0x80)) {
    2300:	402b      	ands	r3, r5
    2302:	d035      	beq.n	2370 <udd_ep_free+0x94>
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    2304:	007a      	lsls	r2, r7, #1
    2306:	09e9      	lsrs	r1, r5, #7
    2308:	1853      	adds	r3, r2, r1
	if (!ptr_job->busy) {
    230a:	4a1d      	ldr	r2, [pc, #116]	; (2380 <udd_ep_free+0xa4>)
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    230c:	3b02      	subs	r3, #2
	if (!ptr_job->busy) {
    230e:	4691      	mov	r9, r2
    2310:	009a      	lsls	r2, r3, #2
    2312:	18d3      	adds	r3, r2, r3
    2314:	464a      	mov	r2, r9
    2316:	2001      	movs	r0, #1
    2318:	009b      	lsls	r3, r3, #2
    231a:	18d2      	adds	r2, r2, r3
    231c:	7c91      	ldrb	r1, [r2, #18]
    231e:	4208      	tst	r0, r1
    2320:	d010      	beq.n	2344 <udd_ep_free+0x68>
	ptr_job->busy = false;
    2322:	2110      	movs	r1, #16
    2324:	4688      	mov	r8, r1
    2326:	4490      	add	r8, r2
    2328:	4641      	mov	r1, r8
    232a:	7889      	ldrb	r1, [r1, #2]
    232c:	4381      	bics	r1, r0
    232e:	0008      	movs	r0, r1
    2330:	4641      	mov	r1, r8
    2332:	7088      	strb	r0, [r1, #2]
	if (NULL != ptr_job->call_trans) {
    2334:	4649      	mov	r1, r9
    2336:	585b      	ldr	r3, [r3, r1]
    2338:	2b00      	cmp	r3, #0
    233a:	d003      	beq.n	2344 <udd_ep_free+0x68>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    233c:	68d1      	ldr	r1, [r2, #12]
    233e:	2001      	movs	r0, #1
    2340:	002a      	movs	r2, r5
    2342:	4798      	blx	r3
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    2344:	2300      	movs	r3, #0
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    2346:	0021      	movs	r1, r4
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    2348:	70e3      	strb	r3, [r4, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    234a:	0030      	movs	r0, r6
    234c:	4b0d      	ldr	r3, [pc, #52]	; (2384 <udd_ep_free+0xa8>)
	config_ep.ep_address = ep;
    234e:	7025      	strb	r5, [r4, #0]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    2350:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2352:	0039      	movs	r1, r7
    2354:	2200      	movs	r2, #0
    2356:	0030      	movs	r0, r6
    2358:	4b0b      	ldr	r3, [pc, #44]	; (2388 <udd_ep_free+0xac>)
    235a:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    235c:	2200      	movs	r2, #0
    235e:	0029      	movs	r1, r5
    2360:	0030      	movs	r0, r6
    2362:	4b0a      	ldr	r3, [pc, #40]	; (238c <udd_ep_free+0xb0>)
    2364:	4798      	blx	r3
}
    2366:	b003      	add	sp, #12
    2368:	bc0c      	pop	{r2, r3}
    236a:	4690      	mov	r8, r2
    236c:	4699      	mov	r9, r3
    236e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!ptr_job->busy) {
    2370:	7c9b      	ldrb	r3, [r3, #18]
    2372:	deff      	udf	#255	; 0xff
    2374:	00002d8d 	.word	0x00002d8d
    2378:	200010d8 	.word	0x200010d8
    237c:	00002fad 	.word	0x00002fad
    2380:	20000df4 	.word	0x20000df4
    2384:	00002d9d 	.word	0x00002d9d
    2388:	00002c05 	.word	0x00002c05
    238c:	00002cdd 	.word	0x00002cdd

00002390 <udd_ep_alloc>:
{
    2390:	b5f0      	push	{r4, r5, r6, r7, lr}
    2392:	46c6      	mov	lr, r8
    2394:	0005      	movs	r5, r0
    2396:	b500      	push	{lr}
    2398:	b082      	sub	sp, #8
	usb_device_endpoint_get_config_defaults(&config_ep);
    239a:	ac01      	add	r4, sp, #4
    239c:	0020      	movs	r0, r4
    239e:	4b37      	ldr	r3, [pc, #220]	; (247c <udd_ep_alloc+0xec>)
{
    23a0:	000e      	movs	r6, r1
    23a2:	0017      	movs	r7, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    23a4:	4798      	blx	r3
	config_ep.ep_address = ep;
    23a6:	7025      	strb	r5, [r4, #0]
	if(MaxEndpointSize <= 8) {
    23a8:	2f08      	cmp	r7, #8
    23aa:	d820      	bhi.n	23ee <udd_ep_alloc+0x5e>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    23ac:	2300      	movs	r3, #0
    23ae:	7063      	strb	r3, [r4, #1]
	if ((ep == 0) || (ep == 0x80)) {
    23b0:	237f      	movs	r3, #127	; 0x7f
    23b2:	402b      	ands	r3, r5
    23b4:	d019      	beq.n	23ea <udd_ep_alloc+0x5a>
    23b6:	230f      	movs	r3, #15
    23b8:	402b      	ands	r3, r5
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    23ba:	09ea      	lsrs	r2, r5, #7
    23bc:	4698      	mov	r8, r3
	ptr_job->ep_size = MaxEndpointSize;
    23be:	005b      	lsls	r3, r3, #1
    23c0:	189b      	adds	r3, r3, r2
    23c2:	3b02      	subs	r3, #2
    23c4:	009a      	lsls	r2, r3, #2
    23c6:	18d3      	adds	r3, r2, r3
    23c8:	4a2d      	ldr	r2, [pc, #180]	; (2480 <udd_ep_alloc+0xf0>)
    23ca:	009b      	lsls	r3, r3, #2
    23cc:	18d3      	adds	r3, r2, r3
    23ce:	821f      	strh	r7, [r3, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    23d0:	2303      	movs	r3, #3
    23d2:	401e      	ands	r6, r3
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    23d4:	2e01      	cmp	r6, #1
    23d6:	d030      	beq.n	243a <udd_ep_alloc+0xaa>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    23d8:	2e02      	cmp	r6, #2
    23da:	d015      	beq.n	2408 <udd_ep_alloc+0x78>
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    23dc:	2e03      	cmp	r6, #3
    23de:	d012      	beq.n	2406 <udd_ep_alloc+0x76>
		return false;
    23e0:	2000      	movs	r0, #0
}
    23e2:	b002      	add	sp, #8
    23e4:	bc04      	pop	{r2}
    23e6:	4690      	mov	r8, r2
    23e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job->ep_size = MaxEndpointSize;
    23ea:	821b      	strh	r3, [r3, #16]
    23ec:	deff      	udf	#255	; 0xff
	} else if(MaxEndpointSize <= 16) {
    23ee:	2f10      	cmp	r7, #16
    23f0:	d802      	bhi.n	23f8 <udd_ep_alloc+0x68>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    23f2:	2301      	movs	r3, #1
    23f4:	7063      	strb	r3, [r4, #1]
    23f6:	e7db      	b.n	23b0 <udd_ep_alloc+0x20>
	} else if(MaxEndpointSize <= 32) {
    23f8:	2f20      	cmp	r7, #32
    23fa:	d921      	bls.n	2440 <udd_ep_alloc+0xb0>
	} else if(MaxEndpointSize <= 64) {
    23fc:	2f40      	cmp	r7, #64	; 0x40
    23fe:	d822      	bhi.n	2446 <udd_ep_alloc+0xb6>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    2400:	2303      	movs	r3, #3
    2402:	7063      	strb	r3, [r4, #1]
    2404:	e7d4      	b.n	23b0 <udd_ep_alloc+0x20>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    2406:	2304      	movs	r3, #4
    2408:	70e3      	strb	r3, [r4, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    240a:	4e1e      	ldr	r6, [pc, #120]	; (2484 <udd_ep_alloc+0xf4>)
    240c:	0021      	movs	r1, r4
    240e:	0030      	movs	r0, r6
    2410:	4b1d      	ldr	r3, [pc, #116]	; (2488 <udd_ep_alloc+0xf8>)
    2412:	4798      	blx	r3
    2414:	2800      	cmp	r0, #0
    2416:	d1e3      	bne.n	23e0 <udd_ep_alloc+0x50>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    2418:	4b1c      	ldr	r3, [pc, #112]	; (248c <udd_ep_alloc+0xfc>)
    241a:	2200      	movs	r2, #0
    241c:	4641      	mov	r1, r8
    241e:	4c1c      	ldr	r4, [pc, #112]	; (2490 <udd_ep_alloc+0x100>)
    2420:	0030      	movs	r0, r6
    2422:	47a0      	blx	r4
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2424:	2200      	movs	r2, #0
    2426:	0029      	movs	r1, r5
    2428:	4c1a      	ldr	r4, [pc, #104]	; (2494 <udd_ep_alloc+0x104>)
    242a:	0030      	movs	r0, r6
    242c:	47a0      	blx	r4
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    242e:	2201      	movs	r2, #1
    2430:	0029      	movs	r1, r5
    2432:	0030      	movs	r0, r6
    2434:	47a0      	blx	r4
	return true;
    2436:	2001      	movs	r0, #1
    2438:	e7d3      	b.n	23e2 <udd_ep_alloc+0x52>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    243a:	3b01      	subs	r3, #1
    243c:	70e3      	strb	r3, [r4, #3]
    243e:	e7e4      	b.n	240a <udd_ep_alloc+0x7a>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    2440:	2302      	movs	r3, #2
    2442:	7063      	strb	r3, [r4, #1]
    2444:	e7b4      	b.n	23b0 <udd_ep_alloc+0x20>
	} else if(MaxEndpointSize <= 128) {
    2446:	2f80      	cmp	r7, #128	; 0x80
    2448:	d906      	bls.n	2458 <udd_ep_alloc+0xc8>
	} else if(MaxEndpointSize <= 256) {
    244a:	2380      	movs	r3, #128	; 0x80
    244c:	005b      	lsls	r3, r3, #1
    244e:	429f      	cmp	r7, r3
    2450:	d805      	bhi.n	245e <udd_ep_alloc+0xce>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    2452:	3bfb      	subs	r3, #251	; 0xfb
    2454:	7063      	strb	r3, [r4, #1]
    2456:	e7ab      	b.n	23b0 <udd_ep_alloc+0x20>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    2458:	2304      	movs	r3, #4
    245a:	7063      	strb	r3, [r4, #1]
    245c:	e7a8      	b.n	23b0 <udd_ep_alloc+0x20>
	} else if(MaxEndpointSize <= 512) {
    245e:	2380      	movs	r3, #128	; 0x80
    2460:	009b      	lsls	r3, r3, #2
    2462:	429f      	cmp	r7, r3
    2464:	d803      	bhi.n	246e <udd_ep_alloc+0xde>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    2466:	3bfb      	subs	r3, #251	; 0xfb
    2468:	3bff      	subs	r3, #255	; 0xff
    246a:	7063      	strb	r3, [r4, #1]
    246c:	e7a0      	b.n	23b0 <udd_ep_alloc+0x20>
	} else if(MaxEndpointSize <= 1023) {
    246e:	4b0a      	ldr	r3, [pc, #40]	; (2498 <udd_ep_alloc+0x108>)
    2470:	429f      	cmp	r7, r3
    2472:	d8b5      	bhi.n	23e0 <udd_ep_alloc+0x50>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    2474:	2307      	movs	r3, #7
    2476:	7063      	strb	r3, [r4, #1]
    2478:	e79a      	b.n	23b0 <udd_ep_alloc+0x20>
    247a:	46c0      	nop			; (mov r8, r8)
    247c:	00002d8d 	.word	0x00002d8d
    2480:	20000df4 	.word	0x20000df4
    2484:	200010d8 	.word	0x200010d8
    2488:	00002d9d 	.word	0x00002d9d
    248c:	000019f9 	.word	0x000019f9
    2490:	00002bdd 	.word	0x00002bdd
    2494:	00002c2d 	.word	0x00002c2d
    2498:	000003ff 	.word	0x000003ff

0000249c <udd_ep_is_halted>:
{
    249c:	b510      	push	{r4, lr}
    249e:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    24a0:	4b01      	ldr	r3, [pc, #4]	; (24a8 <udd_ep_is_halted+0xc>)
    24a2:	4802      	ldr	r0, [pc, #8]	; (24ac <udd_ep_is_halted+0x10>)
    24a4:	4798      	blx	r3
}
    24a6:	bd10      	pop	{r4, pc}
    24a8:	00002fdd 	.word	0x00002fdd
    24ac:	200010d8 	.word	0x200010d8

000024b0 <udd_ep_set_halt>:
{
    24b0:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    24b2:	240f      	movs	r4, #15
{
    24b4:	0005      	movs	r5, r0
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    24b6:	4004      	ands	r4, r0
		return false;
    24b8:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    24ba:	2c02      	cmp	r4, #2
    24bc:	d900      	bls.n	24c0 <udd_ep_set_halt+0x10>
}
    24be:	bd70      	pop	{r4, r5, r6, pc}
	usb_device_endpoint_set_halt(&usb_device, ep);
    24c0:	4e13      	ldr	r6, [pc, #76]	; (2510 <udd_ep_set_halt+0x60>)
    24c2:	0029      	movs	r1, r5
    24c4:	0030      	movs	r0, r6
    24c6:	4b13      	ldr	r3, [pc, #76]	; (2514 <udd_ep_set_halt+0x64>)
    24c8:	4798      	blx	r3
	usb_device_endpoint_abort_job(&usb_device, ep);
    24ca:	4b13      	ldr	r3, [pc, #76]	; (2518 <udd_ep_set_halt+0x68>)
    24cc:	0029      	movs	r1, r5
    24ce:	0030      	movs	r0, r6
    24d0:	4798      	blx	r3
	if ((ep == 0) || (ep == 0x80)) {
    24d2:	237f      	movs	r3, #127	; 0x7f
    24d4:	402b      	ands	r3, r5
    24d6:	d018      	beq.n	250a <udd_ep_set_halt+0x5a>
	if (!ptr_job->busy) {
    24d8:	2101      	movs	r1, #1
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    24da:	09eb      	lsrs	r3, r5, #7
    24dc:	0064      	lsls	r4, r4, #1
    24de:	18e4      	adds	r4, r4, r3
    24e0:	3c02      	subs	r4, #2
	if (!ptr_job->busy) {
    24e2:	00a3      	lsls	r3, r4, #2
    24e4:	191c      	adds	r4, r3, r4
    24e6:	4a0d      	ldr	r2, [pc, #52]	; (251c <udd_ep_set_halt+0x6c>)
    24e8:	00a4      	lsls	r4, r4, #2
    24ea:	1913      	adds	r3, r2, r4
    24ec:	7c98      	ldrb	r0, [r3, #18]
    24ee:	4201      	tst	r1, r0
    24f0:	d009      	beq.n	2506 <udd_ep_set_halt+0x56>
	ptr_job->busy = false;
    24f2:	7c98      	ldrb	r0, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    24f4:	58a4      	ldr	r4, [r4, r2]
	ptr_job->busy = false;
    24f6:	4388      	bics	r0, r1
    24f8:	7498      	strb	r0, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    24fa:	2c00      	cmp	r4, #0
    24fc:	d003      	beq.n	2506 <udd_ep_set_halt+0x56>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    24fe:	68d9      	ldr	r1, [r3, #12]
    2500:	002a      	movs	r2, r5
    2502:	2001      	movs	r0, #1
    2504:	47a0      	blx	r4
    2506:	2001      	movs	r0, #1
    2508:	e7d9      	b.n	24be <udd_ep_set_halt+0xe>
	if (!ptr_job->busy) {
    250a:	7c9b      	ldrb	r3, [r3, #18]
    250c:	deff      	udf	#255	; 0xff
    250e:	46c0      	nop			; (mov r8, r8)
    2510:	200010d8 	.word	0x200010d8
    2514:	00002ffd 	.word	0x00002ffd
    2518:	00002fad 	.word	0x00002fad
    251c:	20000df4 	.word	0x20000df4

00002520 <udd_ep_clear_halt>:
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2520:	230f      	movs	r3, #15
{
    2522:	b570      	push	{r4, r5, r6, lr}
    2524:	0001      	movs	r1, r0
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2526:	4003      	ands	r3, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    2528:	2b02      	cmp	r3, #2
    252a:	d81f      	bhi.n	256c <udd_ep_clear_halt+0x4c>
	if ((ep == 0) || (ep == 0x80)) {
    252c:	247f      	movs	r4, #127	; 0x7f
    252e:	4004      	ands	r4, r0
    2530:	d104      	bne.n	253c <udd_ep_clear_halt+0x1c>
	usb_device_endpoint_clear_halt(&usb_device, ep);
    2532:	480f      	ldr	r0, [pc, #60]	; (2570 <udd_ep_clear_halt+0x50>)
    2534:	4b0f      	ldr	r3, [pc, #60]	; (2574 <udd_ep_clear_halt+0x54>)
    2536:	4798      	blx	r3
	if (ptr_job->busy == true) {
    2538:	7ca3      	ldrb	r3, [r4, #18]
    253a:	deff      	udf	#255	; 0xff
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    253c:	005c      	lsls	r4, r3, #1
    253e:	09c3      	lsrs	r3, r0, #7
    2540:	18e4      	adds	r4, r4, r3
    2542:	3c02      	subs	r4, #2
	usb_device_endpoint_clear_halt(&usb_device, ep);
    2544:	4b0b      	ldr	r3, [pc, #44]	; (2574 <udd_ep_clear_halt+0x54>)
    2546:	480a      	ldr	r0, [pc, #40]	; (2570 <udd_ep_clear_halt+0x50>)
    2548:	4798      	blx	r3
	if (ptr_job->busy == true) {
    254a:	00a3      	lsls	r3, r4, #2
    254c:	191c      	adds	r4, r3, r4
    254e:	4a0a      	ldr	r2, [pc, #40]	; (2578 <udd_ep_clear_halt+0x58>)
    2550:	00a4      	lsls	r4, r4, #2
    2552:	1913      	adds	r3, r2, r4
    2554:	7c99      	ldrb	r1, [r3, #18]
	return true;
    2556:	2501      	movs	r5, #1
	if (ptr_job->busy == true) {
    2558:	07c9      	lsls	r1, r1, #31
    255a:	d401      	bmi.n	2560 <udd_ep_clear_halt+0x40>
}
    255c:	0028      	movs	r0, r5
    255e:	bd70      	pop	{r4, r5, r6, pc}
		ptr_job->busy = false;
    2560:	7c99      	ldrb	r1, [r3, #18]
    2562:	43a9      	bics	r1, r5
    2564:	7499      	strb	r1, [r3, #18]
		ptr_job->call_nohalt();
    2566:	58a3      	ldr	r3, [r4, r2]
    2568:	4798      	blx	r3
    256a:	e7f7      	b.n	255c <udd_ep_clear_halt+0x3c>
		return false;
    256c:	2500      	movs	r5, #0
    256e:	e7f5      	b.n	255c <udd_ep_clear_halt+0x3c>
    2570:	200010d8 	.word	0x200010d8
    2574:	0000301d 	.word	0x0000301d
    2578:	20000df4 	.word	0x20000df4

0000257c <udd_ep_wait_stall_clear>:
{
    257c:	b5f0      	push	{r4, r5, r6, r7, lr}
	ep_num = ep & USB_EP_ADDR_MASK;
    257e:	230f      	movs	r3, #15
{
    2580:	4646      	mov	r6, r8
    2582:	46d6      	mov	lr, sl
    2584:	464f      	mov	r7, r9
    2586:	0005      	movs	r5, r0
    2588:	b5c0      	push	{r6, r7, lr}
	ep_num = ep & USB_EP_ADDR_MASK;
    258a:	4003      	ands	r3, r0
{
    258c:	000e      	movs	r6, r1
	if (USB_DEVICE_MAX_EP < ep_num) {
    258e:	2b02      	cmp	r3, #2
    2590:	d813      	bhi.n	25ba <udd_ep_wait_stall_clear+0x3e>
	if ((ep == 0) || (ep == 0x80)) {
    2592:	227f      	movs	r2, #127	; 0x7f
    2594:	4002      	ands	r2, r0
    2596:	d101      	bne.n	259c <udd_ep_wait_stall_clear+0x20>
	if (ptr_job->busy == true) {
    2598:	7c93      	ldrb	r3, [r2, #18]
    259a:	deff      	udf	#255	; 0xff
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    259c:	09c2      	lsrs	r2, r0, #7
    259e:	005b      	lsls	r3, r3, #1
    25a0:	189b      	adds	r3, r3, r2
    25a2:	3b02      	subs	r3, #2
	if (ptr_job->busy == true) {
    25a4:	009c      	lsls	r4, r3, #2
    25a6:	18e4      	adds	r4, r4, r3
    25a8:	4a13      	ldr	r2, [pc, #76]	; (25f8 <udd_ep_wait_stall_clear+0x7c>)
    25aa:	00a4      	lsls	r4, r4, #2
    25ac:	4690      	mov	r8, r2
    25ae:	46a1      	mov	r9, r4
    25b0:	44c1      	add	r9, r8
    25b2:	464b      	mov	r3, r9
    25b4:	7c9b      	ldrb	r3, [r3, #18]
    25b6:	07db      	lsls	r3, r3, #31
    25b8:	d506      	bpl.n	25c8 <udd_ep_wait_stall_clear+0x4c>
		return false;
    25ba:	2700      	movs	r7, #0
}
    25bc:	0038      	movs	r0, r7
    25be:	bc1c      	pop	{r2, r3, r4}
    25c0:	4690      	mov	r8, r2
    25c2:	4699      	mov	r9, r3
    25c4:	46a2      	mov	sl, r4
    25c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usb_device_endpoint_is_halted(&usb_device, ep)) {
    25c8:	4b0c      	ldr	r3, [pc, #48]	; (25fc <udd_ep_wait_stall_clear+0x80>)
    25ca:	0001      	movs	r1, r0
    25cc:	469a      	mov	sl, r3
    25ce:	0018      	movs	r0, r3
    25d0:	4b0b      	ldr	r3, [pc, #44]	; (2600 <udd_ep_wait_stall_clear+0x84>)
    25d2:	4798      	blx	r3
    25d4:	1e07      	subs	r7, r0, #0
    25d6:	d007      	beq.n	25e8 <udd_ep_wait_stall_clear+0x6c>
		ptr_job->busy = true;
    25d8:	464b      	mov	r3, r9
    25da:	2101      	movs	r1, #1
    25dc:	7c9a      	ldrb	r2, [r3, #18]
    25de:	430a      	orrs	r2, r1
    25e0:	749a      	strb	r2, [r3, #18]
		ptr_job->call_nohalt = callback;
    25e2:	4643      	mov	r3, r8
    25e4:	50e6      	str	r6, [r4, r3]
		return true;
    25e6:	e7e9      	b.n	25bc <udd_ep_wait_stall_clear+0x40>
	} else if (usb_device_endpoint_is_configured(&usb_device, ep)) {
    25e8:	0029      	movs	r1, r5
    25ea:	4650      	mov	r0, sl
    25ec:	4b05      	ldr	r3, [pc, #20]	; (2604 <udd_ep_wait_stall_clear+0x88>)
    25ee:	4798      	blx	r3
    25f0:	1e07      	subs	r7, r0, #0
    25f2:	d0e2      	beq.n	25ba <udd_ep_wait_stall_clear+0x3e>
		callback(); /* Endpoint not halted then call directly callback */
    25f4:	47b0      	blx	r6
		return true;
    25f6:	e7e1      	b.n	25bc <udd_ep_wait_stall_clear+0x40>
    25f8:	20000df4 	.word	0x20000df4
    25fc:	200010d8 	.word	0x200010d8
    2600:	00002fdd 	.word	0x00002fdd
    2604:	00002f89 	.word	0x00002f89

00002608 <udd_ep_run>:
{
    2608:	b5f0      	push	{r4, r5, r6, r7, lr}
    260a:	4645      	mov	r5, r8
    260c:	4657      	mov	r7, sl
    260e:	464e      	mov	r6, r9
    2610:	46de      	mov	lr, fp
	ep_num = ep & USB_EP_ADDR_MASK;
    2612:	240f      	movs	r4, #15
{
    2614:	b5e0      	push	{r5, r6, r7, lr}
    2616:	4688      	mov	r8, r1
    2618:	b087      	sub	sp, #28
    261a:	0005      	movs	r5, r0
    261c:	4691      	mov	r9, r2
    261e:	001f      	movs	r7, r3
	ep_num = ep & USB_EP_ADDR_MASK;
    2620:	4004      	ands	r4, r0
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    2622:	2c02      	cmp	r4, #2
    2624:	d907      	bls.n	2636 <udd_ep_run+0x2e>
		return false;
    2626:	2000      	movs	r0, #0
}
    2628:	b007      	add	sp, #28
    262a:	bc3c      	pop	{r2, r3, r4, r5}
    262c:	4690      	mov	r8, r2
    262e:	4699      	mov	r9, r3
    2630:	46a2      	mov	sl, r4
    2632:	46ab      	mov	fp, r5
    2634:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return usb_device_endpoint_is_halted(&usb_device, ep);
    2636:	4b75      	ldr	r3, [pc, #468]	; (280c <udd_ep_run+0x204>)
    2638:	0001      	movs	r1, r0
    263a:	469b      	mov	fp, r3
    263c:	0018      	movs	r0, r3
    263e:	4b74      	ldr	r3, [pc, #464]	; (2810 <udd_ep_run+0x208>)
    2640:	4798      	blx	r3
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    2642:	2800      	cmp	r0, #0
    2644:	d1ef      	bne.n	2626 <udd_ep_run+0x1e>
	if ((ep == 0) || (ep == 0x80)) {
    2646:	237f      	movs	r3, #127	; 0x7f
    2648:	402b      	ands	r3, r5
    264a:	d10c      	bne.n	2666 <udd_ep_run+0x5e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    264c:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2650:	4251      	negs	r1, r2
    2652:	414a      	adcs	r2, r1
    2654:	9205      	str	r2, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    2656:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2658:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    265c:	4a6d      	ldr	r2, [pc, #436]	; (2814 <udd_ep_run+0x20c>)
    265e:	7013      	strb	r3, [r2, #0]
	return flags;
    2660:	9a05      	ldr	r2, [sp, #20]
	if (ptr_job->busy == true) {
    2662:	7c9b      	ldrb	r3, [r3, #18]
    2664:	deff      	udf	#255	; 0xff
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    2666:	b26b      	sxtb	r3, r5
    2668:	001a      	movs	r2, r3
    266a:	9303      	str	r3, [sp, #12]
    266c:	0fd2      	lsrs	r2, r2, #31
    266e:	0063      	lsls	r3, r4, #1
    2670:	189e      	adds	r6, r3, r2
    2672:	1eb1      	subs	r1, r6, #2
    2674:	000e      	movs	r6, r1
    2676:	9101      	str	r1, [sp, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2678:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    267c:	425a      	negs	r2, r3
    267e:	4153      	adcs	r3, r2
    2680:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    2682:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2684:	f3bf 8f5f 	dmb	sy
	if (ptr_job->busy == true) {
    2688:	4963      	ldr	r1, [pc, #396]	; (2818 <udd_ep_run+0x210>)
    268a:	46b4      	mov	ip, r6
    268c:	468a      	mov	sl, r1
    268e:	2101      	movs	r1, #1
	cpu_irq_disable();
    2690:	4a60      	ldr	r2, [pc, #384]	; (2814 <udd_ep_run+0x20c>)
    2692:	7010      	strb	r0, [r2, #0]
	return flags;
    2694:	9b05      	ldr	r3, [sp, #20]
    2696:	9300      	str	r3, [sp, #0]
    2698:	00b3      	lsls	r3, r6, #2
    269a:	9302      	str	r3, [sp, #8]
    269c:	4463      	add	r3, ip
    269e:	009b      	lsls	r3, r3, #2
    26a0:	4453      	add	r3, sl
    26a2:	7c9e      	ldrb	r6, [r3, #18]
    26a4:	4231      	tst	r1, r6
    26a6:	d153      	bne.n	2750 <udd_ep_run+0x148>
	ptr_job->busy = true;
    26a8:	2601      	movs	r6, #1
    26aa:	46b4      	mov	ip, r6
    26ac:	4666      	mov	r6, ip
    26ae:	7c98      	ldrb	r0, [r3, #18]
    26b0:	4330      	orrs	r0, r6
    26b2:	7498      	strb	r0, [r3, #18]
	if (cpu_irq_is_enabled_flags(flags))
    26b4:	9b00      	ldr	r3, [sp, #0]
    26b6:	2b00      	cmp	r3, #0
    26b8:	d160      	bne.n	277c <udd_ep_run+0x174>
	ptr_job->buf = buf;
    26ba:	9a01      	ldr	r2, [sp, #4]
    26bc:	4649      	mov	r1, r9
    26be:	4694      	mov	ip, r2
    26c0:	4652      	mov	r2, sl
    26c2:	9b02      	ldr	r3, [sp, #8]
	ptr_job->call_trans = callback;
    26c4:	9810      	ldr	r0, [sp, #64]	; 0x40
	ptr_job->buf = buf;
    26c6:	4463      	add	r3, ip
    26c8:	009b      	lsls	r3, r3, #2
    26ca:	18d2      	adds	r2, r2, r3
    26cc:	6051      	str	r1, [r2, #4]
	ptr_job->nb_trans = 0;
    26ce:	2100      	movs	r1, #0
    26d0:	60d1      	str	r1, [r2, #12]
	ptr_job->call_trans = callback;
    26d2:	4651      	mov	r1, sl
    26d4:	50c8      	str	r0, [r1, r3]
	ptr_job->b_shortpacket = b_shortpacket;
    26d6:	0011      	movs	r1, r2
    26d8:	3110      	adds	r1, #16
    26da:	788e      	ldrb	r6, [r1, #2]
    26dc:	4643      	mov	r3, r8
    26de:	46b0      	mov	r8, r6
    26e0:	2602      	movs	r6, #2
    26e2:	2001      	movs	r0, #1
    26e4:	46b4      	mov	ip, r6
    26e6:	4003      	ands	r3, r0
    26e8:	4646      	mov	r6, r8
    26ea:	4660      	mov	r0, ip
    26ec:	4386      	bics	r6, r0
	ptr_job->b_use_out_cache_buffer = false;
    26ee:	2004      	movs	r0, #4
	ptr_job->b_shortpacket = b_shortpacket;
    26f0:	005b      	lsls	r3, r3, #1
	ptr_job->b_use_out_cache_buffer = false;
    26f2:	4333      	orrs	r3, r6
    26f4:	4383      	bics	r3, r0
    26f6:	708b      	strb	r3, [r1, #2]
	if (ep & USB_EP_DIR_IN) {
    26f8:	9b03      	ldr	r3, [sp, #12]
	ptr_job->buf_size = buf_size;
    26fa:	6097      	str	r7, [r2, #8]
	if (ep & USB_EP_DIR_IN) {
    26fc:	2b00      	cmp	r3, #0
    26fe:	db42      	blt.n	2786 <udd_ep_run+0x17e>
		if (0 != ptr_job->buf_size) {
    2700:	2f00      	cmp	r7, #0
    2702:	d02e      	beq.n	2762 <udd_ep_run+0x15a>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    2704:	8a13      	ldrh	r3, [r2, #16]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2706:	4d45      	ldr	r5, [pc, #276]	; (281c <udd_ep_run+0x214>)
			next_trans = ptr_job->buf_size;
    2708:	b2bf      	uxth	r7, r7
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    270a:	4698      	mov	r8, r3
    270c:	0019      	movs	r1, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    270e:	42af      	cmp	r7, r5
    2710:	d96d      	bls.n	27ee <udd_ep_run+0x1e6>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    2712:	4b43      	ldr	r3, [pc, #268]	; (2820 <udd_ep_run+0x218>)
    2714:	0028      	movs	r0, r5
    2716:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    2718:	1a6b      	subs	r3, r5, r1
    271a:	b29b      	uxth	r3, r3
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    271c:	464a      	mov	r2, r9
			if (next_trans < ptr_job->ep_size) {
    271e:	4543      	cmp	r3, r8
    2720:	d20e      	bcs.n	2740 <udd_ep_run+0x138>
				ptr_job->b_use_out_cache_buffer = true;
    2722:	9b02      	ldr	r3, [sp, #8]
    2724:	2104      	movs	r1, #4
    2726:	469c      	mov	ip, r3
    2728:	9b01      	ldr	r3, [sp, #4]
    272a:	4463      	add	r3, ip
    272c:	009e      	lsls	r6, r3, #2
    272e:	4456      	add	r6, sl
    2730:	7cb2      	ldrb	r2, [r6, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    2732:	4b3c      	ldr	r3, [pc, #240]	; (2824 <udd_ep_run+0x21c>)
				ptr_job->b_use_out_cache_buffer = true;
    2734:	430a      	orrs	r2, r1
    2736:	74b2      	strb	r2, [r6, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    2738:	1e62      	subs	r2, r4, #1
    273a:	0192      	lsls	r2, r2, #6
    273c:	18d2      	adds	r2, r2, r3
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    273e:	4643      	mov	r3, r8
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    2740:	0021      	movs	r1, r4
    2742:	4658      	mov	r0, fp
    2744:	4c38      	ldr	r4, [pc, #224]	; (2828 <udd_ep_run+0x220>)
    2746:	47a0      	blx	r4
				return (STATUS_OK ==
    2748:	4243      	negs	r3, r0
    274a:	4158      	adcs	r0, r3
    274c:	b2c0      	uxtb	r0, r0
    274e:	e76b      	b.n	2628 <udd_ep_run+0x20>
    2750:	9b00      	ldr	r3, [sp, #0]
    2752:	2b00      	cmp	r3, #0
    2754:	d100      	bne.n	2758 <udd_ep_run+0x150>
    2756:	e766      	b.n	2626 <udd_ep_run+0x1e>
		cpu_irq_enable();
    2758:	7011      	strb	r1, [r2, #0]
    275a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    275e:	b662      	cpsie	i
    2760:	e762      	b.n	2628 <udd_ep_run+0x20>
			ptr_job->busy = false;
    2762:	2201      	movs	r2, #1
    2764:	788b      	ldrb	r3, [r1, #2]
    2766:	4393      	bics	r3, r2
    2768:	708b      	strb	r3, [r1, #2]
			if (NULL != ptr_job->call_trans) {
    276a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    276c:	2b00      	cmp	r3, #0
    276e:	d003      	beq.n	2778 <udd_ep_run+0x170>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    2770:	002a      	movs	r2, r5
    2772:	2100      	movs	r1, #0
    2774:	2000      	movs	r0, #0
    2776:	4798      	blx	r3
			return true;
    2778:	2001      	movs	r0, #1
    277a:	e755      	b.n	2628 <udd_ep_run+0x20>
    277c:	7011      	strb	r1, [r2, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    277e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2782:	b662      	cpsie	i
    2784:	e799      	b.n	26ba <udd_ep_run+0xb2>
		if (0 != ptr_job->buf_size) {
    2786:	2f00      	cmp	r7, #0
    2788:	d037      	beq.n	27fa <udd_ep_run+0x1f2>
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    278a:	4d24      	ldr	r5, [pc, #144]	; (281c <udd_ep_run+0x214>)
			next_trans = ptr_job->buf_size;
    278c:	b2bf      	uxth	r7, r7
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    278e:	42af      	cmp	r7, r5
    2790:	d905      	bls.n	279e <udd_ep_run+0x196>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    2792:	8a11      	ldrh	r1, [r2, #16]
    2794:	0028      	movs	r0, r5
    2796:	4b22      	ldr	r3, [pc, #136]	; (2820 <udd_ep_run+0x218>)
    2798:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    279a:	1a6f      	subs	r7, r5, r1
    279c:	b2bf      	uxth	r7, r7
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    279e:	9a01      	ldr	r2, [sp, #4]
    27a0:	9b02      	ldr	r3, [sp, #8]
    27a2:	4694      	mov	ip, r2
    27a4:	4463      	add	r3, ip
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	4453      	add	r3, sl
    27aa:	7c99      	ldrb	r1, [r3, #18]
    27ac:	2200      	movs	r2, #0
    27ae:	0789      	lsls	r1, r1, #30
    27b0:	d507      	bpl.n	27c2 <udd_ep_run+0x1ba>
					(0 == (next_trans % ptr_job->ep_size));
    27b2:	8a19      	ldrh	r1, [r3, #16]
    27b4:	0038      	movs	r0, r7
    27b6:	4b1d      	ldr	r3, [pc, #116]	; (282c <udd_ep_run+0x224>)
    27b8:	4798      	blx	r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    27ba:	b289      	uxth	r1, r1
    27bc:	424a      	negs	r2, r1
    27be:	414a      	adcs	r2, r1
    27c0:	b2d2      	uxtb	r2, r2
    27c2:	9901      	ldr	r1, [sp, #4]
    27c4:	2002      	movs	r0, #2
    27c6:	468c      	mov	ip, r1
    27c8:	9b02      	ldr	r3, [sp, #8]
    27ca:	0051      	lsls	r1, r2, #1
    27cc:	4463      	add	r3, ip
    27ce:	009b      	lsls	r3, r3, #2
    27d0:	4453      	add	r3, sl
    27d2:	7c9a      	ldrb	r2, [r3, #18]
    27d4:	4382      	bics	r2, r0
    27d6:	430a      	orrs	r2, r1
    27d8:	749a      	strb	r2, [r3, #18]
    27da:	003b      	movs	r3, r7
				usb_device_endpoint_write_buffer_job(&usb_device,
    27dc:	0021      	movs	r1, r4
    27de:	464a      	mov	r2, r9
    27e0:	4658      	mov	r0, fp
    27e2:	4c13      	ldr	r4, [pc, #76]	; (2830 <udd_ep_run+0x228>)
    27e4:	47a0      	blx	r4
		return (STATUS_OK ==
    27e6:	4243      	negs	r3, r0
    27e8:	4158      	adcs	r0, r3
    27ea:	b2c0      	uxtb	r0, r0
    27ec:	e71c      	b.n	2628 <udd_ep_run+0x20>
				next_trans -= next_trans % ptr_job->ep_size;
    27ee:	0038      	movs	r0, r7
    27f0:	4b0e      	ldr	r3, [pc, #56]	; (282c <udd_ep_run+0x224>)
    27f2:	4798      	blx	r3
    27f4:	1a7f      	subs	r7, r7, r1
    27f6:	b2bb      	uxth	r3, r7
    27f8:	e790      	b.n	271c <udd_ep_run+0x114>
		} else if (true == ptr_job->b_shortpacket) {
    27fa:	7c93      	ldrb	r3, [r2, #18]
    27fc:	4662      	mov	r2, ip
    27fe:	421a      	tst	r2, r3
    2800:	d0af      	beq.n	2762 <udd_ep_run+0x15a>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    2802:	788b      	ldrb	r3, [r1, #2]
    2804:	4393      	bics	r3, r2
    2806:	708b      	strb	r3, [r1, #2]
    2808:	2300      	movs	r3, #0
    280a:	e7e7      	b.n	27dc <udd_ep_run+0x1d4>
    280c:	200010d8 	.word	0x200010d8
    2810:	00002fdd 	.word	0x00002fdd
    2814:	200000ca 	.word	0x200000ca
    2818:	20000df4 	.word	0x20000df4
    281c:	00001fff 	.word	0x00001fff
    2820:	0001cffd 	.word	0x0001cffd
    2824:	20001058 	.word	0x20001058
    2828:	000030e5 	.word	0x000030e5
    282c:	0001ce29 	.word	0x0001ce29
    2830:	00003099 	.word	0x00003099

00002834 <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    2834:	2280      	movs	r2, #128	; 0x80
    2836:	4b02      	ldr	r3, [pc, #8]	; (2840 <udd_set_address+0xc>)
    2838:	4310      	orrs	r0, r2
    283a:	681b      	ldr	r3, [r3, #0]
    283c:	7298      	strb	r0, [r3, #10]
}
    283e:	4770      	bx	lr
    2840:	200010d8 	.word	0x200010d8

00002844 <udd_getaddress>:
{
    2844:	4b02      	ldr	r3, [pc, #8]	; (2850 <udd_getaddress+0xc>)
}
    2846:	681b      	ldr	r3, [r3, #0]
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    2848:	7a98      	ldrb	r0, [r3, #10]
    284a:	0640      	lsls	r0, r0, #25
    284c:	0e40      	lsrs	r0, r0, #25
    284e:	4770      	bx	lr
    2850:	200010d8 	.word	0x200010d8

00002854 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    2854:	4b01      	ldr	r3, [pc, #4]	; (285c <udd_set_setup_payload+0x8>)
    2856:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    2858:	8199      	strh	r1, [r3, #12]
}
    285a:	4770      	bx	lr
    285c:	20001240 	.word	0x20001240

00002860 <udd_attach>:
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
}

void udd_attach(void)
{
    2860:	b570      	push	{r4, r5, r6, lr}
	enum sleepmgr_mode sleep_mode[] = {
    2862:	4b36      	ldr	r3, [pc, #216]	; (293c <udd_attach+0xdc>)
	if (udd_state == new_state) {
    2864:	4c36      	ldr	r4, [pc, #216]	; (2940 <udd_attach+0xe0>)
{
    2866:	b084      	sub	sp, #16
	enum sleepmgr_mode sleep_mode[] = {
    2868:	9301      	str	r3, [sp, #4]
	if (udd_state == new_state) {
    286a:	7823      	ldrb	r3, [r4, #0]
    286c:	2b03      	cmp	r3, #3
    286e:	d01e      	beq.n	28ae <udd_attach+0x4e>
	if(sleepmgr_locks[mode] >= 0xff) {
    2870:	4b34      	ldr	r3, [pc, #208]	; (2944 <udd_attach+0xe4>)
    2872:	785a      	ldrb	r2, [r3, #1]
    2874:	2aff      	cmp	r2, #255	; 0xff
    2876:	d047      	beq.n	2908 <udd_attach+0xa8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2878:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    287c:	4251      	negs	r1, r2
    287e:	414a      	adcs	r2, r1
    2880:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    2882:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2884:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2888:	2200      	movs	r2, #0
    288a:	492f      	ldr	r1, [pc, #188]	; (2948 <udd_attach+0xe8>)
    288c:	700a      	strb	r2, [r1, #0]
	++sleepmgr_locks[mode];
    288e:	785a      	ldrb	r2, [r3, #1]
	return flags;
    2890:	9802      	ldr	r0, [sp, #8]
    2892:	3201      	adds	r2, #1
    2894:	705a      	strb	r2, [r3, #1]
	if (cpu_irq_is_enabled_flags(flags))
    2896:	2800      	cmp	r0, #0
    2898:	d004      	beq.n	28a4 <udd_attach+0x44>
		cpu_irq_enable();
    289a:	2201      	movs	r2, #1
    289c:	700a      	strb	r2, [r1, #0]
    289e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    28a2:	b662      	cpsie	i
	if (udd_state != UDD_STATE_OFF) {
    28a4:	7822      	ldrb	r2, [r4, #0]
    28a6:	2a00      	cmp	r2, #0
    28a8:	d12f      	bne.n	290a <udd_attach+0xaa>
	udd_state = new_state;
    28aa:	2303      	movs	r3, #3
    28ac:	7023      	strb	r3, [r4, #0]
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    28ae:	2101      	movs	r1, #1
    28b0:	4c26      	ldr	r4, [pc, #152]	; (294c <udd_attach+0xec>)
	udd_sleep_mode(UDD_STATE_IDLE);
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    28b2:	4e27      	ldr	r6, [pc, #156]	; (2950 <udd_attach+0xf0>)
    28b4:	6822      	ldr	r2, [r4, #0]
    28b6:	0020      	movs	r0, r4
    28b8:	8913      	ldrh	r3, [r2, #8]
    28ba:	438b      	bics	r3, r1
    28bc:	8113      	strh	r3, [r2, #8]
    28be:	3103      	adds	r1, #3
    28c0:	4a24      	ldr	r2, [pc, #144]	; (2954 <udd_attach+0xf4>)
    28c2:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    28c4:	4a24      	ldr	r2, [pc, #144]	; (2958 <udd_attach+0xf8>)
    28c6:	2100      	movs	r1, #0
    28c8:	0020      	movs	r0, r4
    28ca:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    28cc:	4a23      	ldr	r2, [pc, #140]	; (295c <udd_attach+0xfc>)
    28ce:	2101      	movs	r1, #1
    28d0:	0020      	movs	r0, r4
    28d2:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    28d4:	4a22      	ldr	r2, [pc, #136]	; (2960 <udd_attach+0x100>)
    28d6:	2102      	movs	r1, #2
    28d8:	0020      	movs	r0, r4
    28da:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    28dc:	4d21      	ldr	r5, [pc, #132]	; (2964 <udd_attach+0x104>)
    28de:	2104      	movs	r1, #4
    28e0:	0020      	movs	r0, r4
    28e2:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    28e4:	2100      	movs	r1, #0
    28e6:	0020      	movs	r0, r4
    28e8:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    28ea:	2101      	movs	r1, #1
    28ec:	0020      	movs	r0, r4
    28ee:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    28f0:	2102      	movs	r1, #2
    28f2:	0020      	movs	r0, r4
    28f4:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    28f6:	4a1c      	ldr	r2, [pc, #112]	; (2968 <udd_attach+0x108>)
    28f8:	2106      	movs	r1, #6
    28fa:	0020      	movs	r0, r4
    28fc:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    28fe:	2106      	movs	r1, #6
    2900:	0020      	movs	r0, r4
    2902:	47a8      	blx	r5
#endif
}
    2904:	b004      	add	sp, #16
    2906:	bd70      	pop	{r4, r5, r6, pc}
    2908:	e7fe      	b.n	2908 <udd_attach+0xa8>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    290a:	a801      	add	r0, sp, #4
	if(sleepmgr_locks[mode] == 0) {
    290c:	5c82      	ldrb	r2, [r0, r2]
    290e:	5c98      	ldrb	r0, [r3, r2]
    2910:	2800      	cmp	r0, #0
    2912:	d012      	beq.n	293a <udd_attach+0xda>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2914:	f3ef 8010 	mrs	r0, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2918:	4245      	negs	r5, r0
    291a:	4168      	adcs	r0, r5
    291c:	9003      	str	r0, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    291e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2920:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2924:	2000      	movs	r0, #0
    2926:	7008      	strb	r0, [r1, #0]
	--sleepmgr_locks[mode];
    2928:	5c99      	ldrb	r1, [r3, r2]
	return flags;
    292a:	9803      	ldr	r0, [sp, #12]
    292c:	3901      	subs	r1, #1
    292e:	5499      	strb	r1, [r3, r2]
	if (cpu_irq_is_enabled_flags(flags))
    2930:	2800      	cmp	r0, #0
    2932:	d0ba      	beq.n	28aa <udd_attach+0x4a>
    2934:	4b0d      	ldr	r3, [pc, #52]	; (296c <udd_attach+0x10c>)
    2936:	4798      	blx	r3
    2938:	e7b7      	b.n	28aa <udd_attach+0x4a>
    293a:	e7fe      	b.n	293a <udd_attach+0xda>
    293c:	01010100 	.word	0x01010100
    2940:	20000e44 	.word	0x20000e44
    2944:	200013f8 	.word	0x200013f8
    2948:	200000ca 	.word	0x200000ca
    294c:	200010d8 	.word	0x200010d8
    2950:	00002b7d 	.word	0x00002b7d
    2954:	0000209d 	.word	0x0000209d
    2958:	00001dc5 	.word	0x00001dc5
    295c:	00001c05 	.word	0x00001c05
    2960:	00001fa9 	.word	0x00001fa9
    2964:	00002ba1 	.word	0x00002ba1
    2968:	00001de5 	.word	0x00001de5
    296c:	00001dd1 	.word	0x00001dd1

00002970 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    2970:	b5f0      	push	{r4, r5, r6, r7, lr}
    2972:	b087      	sub	sp, #28
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2974:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2978:	425a      	negs	r2, r3
    297a:	4153      	adcs	r3, r2
    297c:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    297e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2980:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2984:	2300      	movs	r3, #0
    2986:	4c36      	ldr	r4, [pc, #216]	; (2a60 <udd_enable+0xf0>)
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    2988:	ae01      	add	r6, sp, #4
    298a:	7023      	strb	r3, [r4, #0]
    298c:	0030      	movs	r0, r6
    298e:	4b35      	ldr	r3, [pc, #212]	; (2a64 <udd_enable+0xf4>)
	return flags;
    2990:	9d02      	ldr	r5, [sp, #8]
    2992:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    2994:	2303      	movs	r3, #3
	usb_init(&usb_device, USB, &config_usb);
    2996:	2182      	movs	r1, #130	; 0x82
    2998:	4f33      	ldr	r7, [pc, #204]	; (2a68 <udd_enable+0xf8>)
    299a:	0032      	movs	r2, r6
	config_usb.source_generator = UDD_CLOCK_GEN;
    299c:	70b3      	strb	r3, [r6, #2]
	usb_init(&usb_device, USB, &config_usb);
    299e:	05c9      	lsls	r1, r1, #23
    29a0:	4b32      	ldr	r3, [pc, #200]	; (2a6c <udd_enable+0xfc>)
    29a2:	0038      	movs	r0, r7
    29a4:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    29a6:	4b32      	ldr	r3, [pc, #200]	; (2a70 <udd_enable+0x100>)
    29a8:	0038      	movs	r0, r7
    29aa:	4798      	blx	r3
		if (!(OSCCTRL->DFLLCTRL.reg & OSCCTRL_DFLLCTRL_USBCRM)) {
    29ac:	4b31      	ldr	r3, [pc, #196]	; (2a74 <udd_enable+0x104>)
    29ae:	8b1a      	ldrh	r2, [r3, #24]
    29b0:	0692      	lsls	r2, r2, #26
    29b2:	d435      	bmi.n	2a20 <udd_enable+0xb0>
			while((OSCCTRL->STATUS.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    29b4:	21d0      	movs	r1, #208	; 0xd0
    29b6:	0109      	lsls	r1, r1, #4
    29b8:	68da      	ldr	r2, [r3, #12]
    29ba:	400a      	ands	r2, r1
    29bc:	428a      	cmp	r2, r1
    29be:	d1fb      	bne.n	29b8 <udd_enable+0x48>
	enum sleepmgr_mode sleep_mode[] = {
    29c0:	4b2d      	ldr	r3, [pc, #180]	; (2a78 <udd_enable+0x108>)
	if (udd_state == new_state) {
    29c2:	4e2e      	ldr	r6, [pc, #184]	; (2a7c <udd_enable+0x10c>)
	enum sleepmgr_mode sleep_mode[] = {
    29c4:	9303      	str	r3, [sp, #12]
	if (udd_state == new_state) {
    29c6:	7833      	ldrb	r3, [r6, #0]
    29c8:	2b01      	cmp	r3, #1
    29ca:	d01d      	beq.n	2a08 <udd_enable+0x98>
	if(sleepmgr_locks[mode] >= 0xff) {
    29cc:	4b2c      	ldr	r3, [pc, #176]	; (2a80 <udd_enable+0x110>)
    29ce:	785a      	ldrb	r2, [r3, #1]
    29d0:	2aff      	cmp	r2, #255	; 0xff
    29d2:	d024      	beq.n	2a1e <udd_enable+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    29d4:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    29d8:	4251      	negs	r1, r2
    29da:	414a      	adcs	r2, r1
    29dc:	9204      	str	r2, [sp, #16]
  __ASM volatile ("cpsid i" : : : "memory");
    29de:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    29e0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    29e4:	2200      	movs	r2, #0
    29e6:	7022      	strb	r2, [r4, #0]
	++sleepmgr_locks[mode];
    29e8:	785a      	ldrb	r2, [r3, #1]
	return flags;
    29ea:	9904      	ldr	r1, [sp, #16]
    29ec:	3201      	adds	r2, #1
    29ee:	705a      	strb	r2, [r3, #1]
	if (cpu_irq_is_enabled_flags(flags))
    29f0:	2900      	cmp	r1, #0
    29f2:	d004      	beq.n	29fe <udd_enable+0x8e>
		cpu_irq_enable();
    29f4:	2201      	movs	r2, #1
    29f6:	7022      	strb	r2, [r4, #0]
    29f8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    29fc:	b662      	cpsie	i
	if (udd_state != UDD_STATE_OFF) {
    29fe:	7832      	ldrb	r2, [r6, #0]
    2a00:	2a00      	cmp	r2, #0
    2a02:	d113      	bne.n	2a2c <udd_enable+0xbc>
	udd_state = new_state;
    2a04:	2301      	movs	r3, #1
    2a06:	7033      	strb	r3, [r6, #0]
		_uhd_vbus_handler();
	}
#else
	// No VBus detect, assume always high
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
    2a08:	4b1e      	ldr	r3, [pc, #120]	; (2a84 <udd_enable+0x114>)
    2a0a:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    2a0c:	2d00      	cmp	r5, #0
    2a0e:	d004      	beq.n	2a1a <udd_enable+0xaa>
		cpu_irq_enable();
    2a10:	2301      	movs	r3, #1
    2a12:	7023      	strb	r3, [r4, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    2a14:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2a18:	b662      	cpsie	i
# endif
#endif

	cpu_irq_restore(flags);
}
    2a1a:	b007      	add	sp, #28
    2a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a1e:	e7fe      	b.n	2a1e <udd_enable+0xae>
			while((OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY);
    2a20:	2180      	movs	r1, #128	; 0x80
    2a22:	0049      	lsls	r1, r1, #1
    2a24:	68da      	ldr	r2, [r3, #12]
    2a26:	420a      	tst	r2, r1
    2a28:	d0fc      	beq.n	2a24 <udd_enable+0xb4>
    2a2a:	e7c9      	b.n	29c0 <udd_enable+0x50>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    2a2c:	a903      	add	r1, sp, #12
	if(sleepmgr_locks[mode] == 0) {
    2a2e:	5c8a      	ldrb	r2, [r1, r2]
    2a30:	5c99      	ldrb	r1, [r3, r2]
    2a32:	2900      	cmp	r1, #0
    2a34:	d012      	beq.n	2a5c <udd_enable+0xec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2a36:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2a3a:	4248      	negs	r0, r1
    2a3c:	4141      	adcs	r1, r0
    2a3e:	9105      	str	r1, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    2a40:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2a42:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2a46:	2100      	movs	r1, #0
    2a48:	7021      	strb	r1, [r4, #0]
	--sleepmgr_locks[mode];
    2a4a:	5c99      	ldrb	r1, [r3, r2]
	return flags;
    2a4c:	9805      	ldr	r0, [sp, #20]
    2a4e:	3901      	subs	r1, #1
    2a50:	5499      	strb	r1, [r3, r2]
	if (cpu_irq_is_enabled_flags(flags))
    2a52:	2800      	cmp	r0, #0
    2a54:	d0d6      	beq.n	2a04 <udd_enable+0x94>
    2a56:	4b0c      	ldr	r3, [pc, #48]	; (2a88 <udd_enable+0x118>)
    2a58:	4798      	blx	r3
    2a5a:	e7d3      	b.n	2a04 <udd_enable+0x94>
    2a5c:	e7fe      	b.n	2a5c <udd_enable+0xec>
    2a5e:	46c0      	nop			; (mov r8, r8)
    2a60:	200000ca 	.word	0x200000ca
    2a64:	000038d1 	.word	0x000038d1
    2a68:	200010d8 	.word	0x200010d8
    2a6c:	000038e1 	.word	0x000038e1
    2a70:	0000315d 	.word	0x0000315d
    2a74:	40000c00 	.word	0x40000c00
    2a78:	01010100 	.word	0x01010100
    2a7c:	20000e44 	.word	0x20000e44
    2a80:	200013f8 	.word	0x200013f8
    2a84:	00002861 	.word	0x00002861
    2a88:	00001dd1 	.word	0x00001dd1

00002a8c <udd_disable>:
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_DETACH;
    2a8c:	2101      	movs	r1, #1

void udd_disable(void)
{
    2a8e:	b570      	push	{r4, r5, r6, lr}
	enum sleepmgr_mode sleep_mode[] = {
    2a90:	2600      	movs	r6, #0
    2a92:	4b2f      	ldr	r3, [pc, #188]	; (2b50 <udd_disable+0xc4>)
	if (udd_state == new_state) {
    2a94:	4d2f      	ldr	r5, [pc, #188]	; (2b54 <udd_disable+0xc8>)
    2a96:	681a      	ldr	r2, [r3, #0]
{
    2a98:	b084      	sub	sp, #16
    2a9a:	8913      	ldrh	r3, [r2, #8]
    2a9c:	430b      	orrs	r3, r1
    2a9e:	b29b      	uxth	r3, r3
    2aa0:	8113      	strh	r3, [r2, #8]
	if (udd_state == new_state) {
    2aa2:	782b      	ldrb	r3, [r5, #0]
	enum sleepmgr_mode sleep_mode[] = {
    2aa4:	aa01      	add	r2, sp, #4
    2aa6:	7016      	strb	r6, [r2, #0]
    2aa8:	7051      	strb	r1, [r2, #1]
    2aaa:	7091      	strb	r1, [r2, #2]
    2aac:	70d1      	strb	r1, [r2, #3]
	if (udd_state == new_state) {
    2aae:	2b01      	cmp	r3, #1
    2ab0:	d04b      	beq.n	2b4a <udd_disable+0xbe>
	if(sleepmgr_locks[mode] >= 0xff) {
    2ab2:	4b29      	ldr	r3, [pc, #164]	; (2b58 <udd_disable+0xcc>)
    2ab4:	7858      	ldrb	r0, [r3, #1]
    2ab6:	28ff      	cmp	r0, #255	; 0xff
    2ab8:	d02e      	beq.n	2b18 <udd_disable+0x8c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2aba:	f3ef 8010 	mrs	r0, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2abe:	4244      	negs	r4, r0
    2ac0:	4160      	adcs	r0, r4
    2ac2:	9002      	str	r0, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    2ac4:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2ac6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2aca:	4c24      	ldr	r4, [pc, #144]	; (2b5c <udd_disable+0xd0>)
    2acc:	7026      	strb	r6, [r4, #0]
	++sleepmgr_locks[mode];
    2ace:	7858      	ldrb	r0, [r3, #1]
	return flags;
    2ad0:	9e02      	ldr	r6, [sp, #8]
    2ad2:	3001      	adds	r0, #1
    2ad4:	7058      	strb	r0, [r3, #1]
	if (cpu_irq_is_enabled_flags(flags))
    2ad6:	2e00      	cmp	r6, #0
    2ad8:	d003      	beq.n	2ae2 <udd_disable+0x56>
		cpu_irq_enable();
    2ada:	7021      	strb	r1, [r4, #0]
    2adc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2ae0:	b662      	cpsie	i
	if (udd_state != UDD_STATE_OFF) {
    2ae2:	7829      	ldrb	r1, [r5, #0]
    2ae4:	2900      	cmp	r1, #0
    2ae6:	d118      	bne.n	2b1a <udd_disable+0x8e>
	udd_state = new_state;
    2ae8:	2301      	movs	r3, #1
    2aea:	702b      	strb	r3, [r5, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2aec:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2af0:	425a      	negs	r2, r3
    2af2:	4153      	adcs	r3, r2
    2af4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    2af6:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2af8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2afc:	2300      	movs	r3, #0
    2afe:	7023      	strb	r3, [r4, #0]
	return flags;
    2b00:	9d01      	ldr	r5, [sp, #4]
	udd_detach();

	//udd_sleep_mode(UDD_STATE_OFF);

	flags = cpu_irq_save();
	usb_dual_disable();
    2b02:	4b17      	ldr	r3, [pc, #92]	; (2b60 <udd_disable+0xd4>)
    2b04:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    2b06:	2d00      	cmp	r5, #0
    2b08:	d004      	beq.n	2b14 <udd_disable+0x88>
		cpu_irq_enable();
    2b0a:	2301      	movs	r3, #1
    2b0c:	7023      	strb	r3, [r4, #0]
    2b0e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2b12:	b662      	cpsie	i
	cpu_irq_restore(flags);
}
    2b14:	b004      	add	sp, #16
    2b16:	bd70      	pop	{r4, r5, r6, pc}
    2b18:	e7fe      	b.n	2b18 <udd_disable+0x8c>
	if(sleepmgr_locks[mode] == 0) {
    2b1a:	5c52      	ldrb	r2, [r2, r1]
    2b1c:	5c99      	ldrb	r1, [r3, r2]
    2b1e:	2900      	cmp	r1, #0
    2b20:	d012      	beq.n	2b48 <udd_disable+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2b22:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2b26:	4248      	negs	r0, r1
    2b28:	4141      	adcs	r1, r0
    2b2a:	9103      	str	r1, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    2b2c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2b2e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2b32:	2100      	movs	r1, #0
    2b34:	7021      	strb	r1, [r4, #0]
	--sleepmgr_locks[mode];
    2b36:	5c99      	ldrb	r1, [r3, r2]
	return flags;
    2b38:	9803      	ldr	r0, [sp, #12]
    2b3a:	3901      	subs	r1, #1
    2b3c:	5499      	strb	r1, [r3, r2]
	if (cpu_irq_is_enabled_flags(flags))
    2b3e:	2800      	cmp	r0, #0
    2b40:	d0d2      	beq.n	2ae8 <udd_disable+0x5c>
    2b42:	4b08      	ldr	r3, [pc, #32]	; (2b64 <udd_disable+0xd8>)
    2b44:	4798      	blx	r3
    2b46:	e7cf      	b.n	2ae8 <udd_disable+0x5c>
    2b48:	e7fe      	b.n	2b48 <udd_disable+0xbc>
    2b4a:	4c04      	ldr	r4, [pc, #16]	; (2b5c <udd_disable+0xd0>)
    2b4c:	e7ce      	b.n	2aec <udd_disable+0x60>
    2b4e:	46c0      	nop			; (mov r8, r8)
    2b50:	200010d8 	.word	0x200010d8
    2b54:	20000e44 	.word	0x20000e44
    2b58:	200013f8 	.word	0x200013f8
    2b5c:	200000ca 	.word	0x200000ca
    2b60:	00002b69 	.word	0x00002b69
    2b64:	00001dd1 	.word	0x00001dd1

00002b68 <usb_dual_disable>:
/**
 * \brief Deinitialize the dual role driver
 */
void usb_dual_disable(void)
{
	if (!_initialized) {
    2b68:	4b03      	ldr	r3, [pc, #12]	; (2b78 <usb_dual_disable+0x10>)
    2b6a:	781a      	ldrb	r2, [r3, #0]
    2b6c:	2a00      	cmp	r2, #0
    2b6e:	d001      	beq.n	2b74 <usb_dual_disable+0xc>
		return; // Dual role not initialized
	}
	_initialized = false;
    2b70:	2200      	movs	r2, #0
    2b72:	701a      	strb	r2, [r3, #0]

#if USB_ID_EIC
	extint_chan_disable_callback(USB_ID_EIC_LINE,
			EXTINT_CALLBACK_TYPE_DETECT);
#endif
}
    2b74:	4770      	bx	lr
    2b76:	46c0      	nop			; (mov r8, r8)
    2b78:	20000e45 	.word	0x20000e45

00002b7c <usb_device_register_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    2b7c:	000b      	movs	r3, r1
    2b7e:	332e      	adds	r3, #46	; 0x2e
    2b80:	009b      	lsls	r3, r3, #2
{
    2b82:	b510      	push	{r4, lr}
	module_inst->device_callback[callback_type] = callback_func;
    2b84:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    2b86:	22aa      	movs	r2, #170	; 0xaa
    2b88:	4c04      	ldr	r4, [pc, #16]	; (2b9c <usb_device_register_callback+0x20>)
    2b8a:	0052      	lsls	r2, r2, #1
    2b8c:	0049      	lsls	r1, r1, #1
    2b8e:	5a83      	ldrh	r3, [r0, r2]
    2b90:	5b09      	ldrh	r1, [r1, r4]
    2b92:	430b      	orrs	r3, r1
    2b94:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    2b96:	2000      	movs	r0, #0
    2b98:	bd10      	pop	{r4, pc}
    2b9a:	46c0      	nop			; (mov r8, r8)
    2b9c:	00024708 	.word	0x00024708

00002ba0 <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    2ba0:	4b06      	ldr	r3, [pc, #24]	; (2bbc <usb_device_enable_callback+0x1c>)
    2ba2:	0049      	lsls	r1, r1, #1
    2ba4:	5acb      	ldrh	r3, [r1, r3]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    2ba6:	21ab      	movs	r1, #171	; 0xab
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    2ba8:	6802      	ldr	r2, [r0, #0]
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    2baa:	0049      	lsls	r1, r1, #1
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    2bac:	8393      	strh	r3, [r2, #28]
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    2bae:	5a42      	ldrh	r2, [r0, r1]
    2bb0:	431a      	orrs	r2, r3
    2bb2:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    2bb4:	6802      	ldr	r2, [r0, #0]

	return STATUS_OK;
}
    2bb6:	2000      	movs	r0, #0
	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    2bb8:	8313      	strh	r3, [r2, #24]
}
    2bba:	4770      	bx	lr
    2bbc:	00024708 	.word	0x00024708

00002bc0 <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    2bc0:	4b05      	ldr	r3, [pc, #20]	; (2bd8 <usb_device_disable_callback+0x18>)
    2bc2:	0049      	lsls	r1, r1, #1
    2bc4:	5aca      	ldrh	r2, [r1, r3]
    2bc6:	21ab      	movs	r1, #171	; 0xab
    2bc8:	0049      	lsls	r1, r1, #1
    2bca:	5a43      	ldrh	r3, [r0, r1]
    2bcc:	4393      	bics	r3, r2
    2bce:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    2bd0:	6803      	ldr	r3, [r0, #0]

	return STATUS_OK;
}
    2bd2:	2000      	movs	r0, #0
	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    2bd4:	829a      	strh	r2, [r3, #20]
}
    2bd6:	4770      	bx	lr
    2bd8:	00024708 	.word	0x00024708

00002bdc <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    2bdc:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    2bde:	008c      	lsls	r4, r1, #2
    2be0:	18a4      	adds	r4, r4, r2
    2be2:	3434      	adds	r4, #52	; 0x34
    2be4:	00a4      	lsls	r4, r4, #2
    2be6:	1904      	adds	r4, r0, r4

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    2be8:	1840      	adds	r0, r0, r1
    2bea:	3059      	adds	r0, #89	; 0x59
    2bec:	4904      	ldr	r1, [pc, #16]	; (2c00 <usb_device_endpoint_register_callback+0x24>)
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    2bee:	6063      	str	r3, [r4, #4]
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    2bf0:	30ff      	adds	r0, #255	; 0xff
    2bf2:	7803      	ldrb	r3, [r0, #0]
    2bf4:	5c8a      	ldrb	r2, [r1, r2]
    2bf6:	4313      	orrs	r3, r2
    2bf8:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    2bfa:	2000      	movs	r0, #0
    2bfc:	bd10      	pop	{r4, pc}
    2bfe:	46c0      	nop			; (mov r8, r8)
    2c00:	00024718 	.word	0x00024718

00002c04 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    2c04:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    2c06:	2400      	movs	r4, #0
    2c08:	008b      	lsls	r3, r1, #2
    2c0a:	189b      	adds	r3, r3, r2
    2c0c:	3334      	adds	r3, #52	; 0x34
    2c0e:	009b      	lsls	r3, r3, #2
    2c10:	18c3      	adds	r3, r0, r3

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    2c12:	1840      	adds	r0, r0, r1
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    2c14:	605c      	str	r4, [r3, #4]
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    2c16:	3059      	adds	r0, #89	; 0x59
    2c18:	4b03      	ldr	r3, [pc, #12]	; (2c28 <usb_device_endpoint_unregister_callback+0x24>)
    2c1a:	30ff      	adds	r0, #255	; 0xff
    2c1c:	5c9a      	ldrb	r2, [r3, r2]
    2c1e:	7803      	ldrb	r3, [r0, #0]
    2c20:	4393      	bics	r3, r2
    2c22:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    2c24:	2000      	movs	r0, #0
    2c26:	bd10      	pop	{r4, pc}
    2c28:	00024718 	.word	0x00024718

00002c2c <usb_device_endpoint_enable_callback>:
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2c2c:	230f      	movs	r3, #15
{
    2c2e:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2c30:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    2c32:	18c4      	adds	r4, r0, r3
    2c34:	3461      	adds	r4, #97	; 0x61
    2c36:	4e28      	ldr	r6, [pc, #160]	; (2cd8 <usb_device_endpoint_enable_callback+0xac>)
    2c38:	34ff      	adds	r4, #255	; 0xff
    2c3a:	7825      	ldrb	r5, [r4, #0]
    2c3c:	5cb6      	ldrb	r6, [r6, r2]
    2c3e:	4335      	orrs	r5, r6
    2c40:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    2c42:	2a00      	cmp	r2, #0
    2c44:	d108      	bne.n	2c58 <usb_device_endpoint_enable_callback+0x2c>
		if (ep_num == 0) { // control endpoint
    2c46:	2b00      	cmp	r3, #0
    2c48:	d115      	bne.n	2c76 <usb_device_endpoint_enable_callback+0x4a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    2c4a:	230a      	movs	r3, #10
    2c4c:	2103      	movs	r1, #3
    2c4e:	6802      	ldr	r2, [r0, #0]
    2c50:	33ff      	adds	r3, #255	; 0xff
    2c52:	54d1      	strb	r1, [r2, r3]
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
		}
	}

	return STATUS_OK;
}
    2c54:	2000      	movs	r0, #0
    2c56:	bd70      	pop	{r4, r5, r6, pc}
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    2c58:	2a01      	cmp	r2, #1
    2c5a:	d117      	bne.n	2c8c <usb_device_endpoint_enable_callback+0x60>
		if (ep_num == 0) { // control endpoint
    2c5c:	2b00      	cmp	r3, #0
    2c5e:	d01f      	beq.n	2ca0 <usb_device_endpoint_enable_callback+0x74>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    2c60:	6802      	ldr	r2, [r0, #0]
    2c62:	015b      	lsls	r3, r3, #5
    2c64:	18d3      	adds	r3, r2, r3
    2c66:	330a      	adds	r3, #10
		} else if (ep & USB_EP_DIR_IN) {
    2c68:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    2c6a:	33ff      	adds	r3, #255	; 0xff
		} else if (ep & USB_EP_DIR_IN) {
    2c6c:	2900      	cmp	r1, #0
    2c6e:	db20      	blt.n	2cb2 <usb_device_endpoint_enable_callback+0x86>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    2c70:	2204      	movs	r2, #4
    2c72:	701a      	strb	r2, [r3, #0]
    2c74:	e7ee      	b.n	2c54 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    2c76:	6802      	ldr	r2, [r0, #0]
    2c78:	015b      	lsls	r3, r3, #5
    2c7a:	18d3      	adds	r3, r2, r3
    2c7c:	330a      	adds	r3, #10
		} else if (ep & USB_EP_DIR_IN) {
    2c7e:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    2c80:	33ff      	adds	r3, #255	; 0xff
		} else if (ep & USB_EP_DIR_IN) {
    2c82:	2900      	cmp	r1, #0
    2c84:	db12      	blt.n	2cac <usb_device_endpoint_enable_callback+0x80>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    2c86:	2201      	movs	r2, #1
    2c88:	701a      	strb	r2, [r3, #0]
    2c8a:	e7e3      	b.n	2c54 <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    2c8c:	2a02      	cmp	r2, #2
    2c8e:	d113      	bne.n	2cb8 <usb_device_endpoint_enable_callback+0x8c>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    2c90:	6802      	ldr	r2, [r0, #0]
    2c92:	015b      	lsls	r3, r3, #5
    2c94:	18d3      	adds	r3, r2, r3
    2c96:	2210      	movs	r2, #16
    2c98:	330a      	adds	r3, #10
    2c9a:	33ff      	adds	r3, #255	; 0xff
    2c9c:	701a      	strb	r2, [r3, #0]
    2c9e:	e7d9      	b.n	2c54 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    2ca0:	230a      	movs	r3, #10
    2ca2:	210c      	movs	r1, #12
    2ca4:	6802      	ldr	r2, [r0, #0]
    2ca6:	33ff      	adds	r3, #255	; 0xff
    2ca8:	54d1      	strb	r1, [r2, r3]
    2caa:	e7d3      	b.n	2c54 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    2cac:	2202      	movs	r2, #2
    2cae:	701a      	strb	r2, [r3, #0]
    2cb0:	e7d0      	b.n	2c54 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    2cb2:	2208      	movs	r2, #8
    2cb4:	701a      	strb	r2, [r3, #0]
    2cb6:	e7cd      	b.n	2c54 <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    2cb8:	2a03      	cmp	r2, #3
    2cba:	d1cb      	bne.n	2c54 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    2cbc:	6802      	ldr	r2, [r0, #0]
    2cbe:	015b      	lsls	r3, r3, #5
    2cc0:	18d3      	adds	r3, r2, r3
    2cc2:	330a      	adds	r3, #10
		if (ep & USB_EP_DIR_IN) {
    2cc4:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    2cc6:	33ff      	adds	r3, #255	; 0xff
		if (ep & USB_EP_DIR_IN) {
    2cc8:	2900      	cmp	r1, #0
    2cca:	db02      	blt.n	2cd2 <usb_device_endpoint_enable_callback+0xa6>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    2ccc:	2220      	movs	r2, #32
    2cce:	701a      	strb	r2, [r3, #0]
    2cd0:	e7c0      	b.n	2c54 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    2cd2:	2240      	movs	r2, #64	; 0x40
    2cd4:	701a      	strb	r2, [r3, #0]
    2cd6:	e7bd      	b.n	2c54 <usb_device_endpoint_enable_callback+0x28>
    2cd8:	00024718 	.word	0x00024718

00002cdc <usb_device_endpoint_disable_callback>:
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2cdc:	230f      	movs	r3, #15
{
    2cde:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2ce0:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    2ce2:	18c4      	adds	r4, r0, r3
    2ce4:	4d28      	ldr	r5, [pc, #160]	; (2d88 <usb_device_endpoint_disable_callback+0xac>)
    2ce6:	3461      	adds	r4, #97	; 0x61
    2ce8:	34ff      	adds	r4, #255	; 0xff
    2cea:	5cae      	ldrb	r6, [r5, r2]
    2cec:	7825      	ldrb	r5, [r4, #0]
    2cee:	43b5      	bics	r5, r6
    2cf0:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    2cf2:	2a00      	cmp	r2, #0
    2cf4:	d108      	bne.n	2d08 <usb_device_endpoint_disable_callback+0x2c>
		if (ep_num == 0) { // control endpoint
    2cf6:	2b00      	cmp	r3, #0
    2cf8:	d115      	bne.n	2d26 <usb_device_endpoint_disable_callback+0x4a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    2cfa:	2103      	movs	r1, #3
    2cfc:	6802      	ldr	r2, [r0, #0]
    2cfe:	3309      	adds	r3, #9
    2d00:	33ff      	adds	r3, #255	; 0xff
    2d02:	54d1      	strb	r1, [r2, r3]
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
		}
	}

	return STATUS_OK;
}
    2d04:	2000      	movs	r0, #0
    2d06:	bd70      	pop	{r4, r5, r6, pc}
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    2d08:	2a01      	cmp	r2, #1
    2d0a:	d117      	bne.n	2d3c <usb_device_endpoint_disable_callback+0x60>
		if (ep_num == 0) { // control endpoint
    2d0c:	2b00      	cmp	r3, #0
    2d0e:	d01f      	beq.n	2d50 <usb_device_endpoint_disable_callback+0x74>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    2d10:	6802      	ldr	r2, [r0, #0]
    2d12:	015b      	lsls	r3, r3, #5
    2d14:	18d3      	adds	r3, r2, r3
    2d16:	3309      	adds	r3, #9
		} else if (ep & USB_EP_DIR_IN) {
    2d18:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    2d1a:	33ff      	adds	r3, #255	; 0xff
		} else if (ep & USB_EP_DIR_IN) {
    2d1c:	2900      	cmp	r1, #0
    2d1e:	db20      	blt.n	2d62 <usb_device_endpoint_disable_callback+0x86>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    2d20:	2204      	movs	r2, #4
    2d22:	701a      	strb	r2, [r3, #0]
    2d24:	e7ee      	b.n	2d04 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    2d26:	6802      	ldr	r2, [r0, #0]
    2d28:	015b      	lsls	r3, r3, #5
    2d2a:	18d3      	adds	r3, r2, r3
    2d2c:	3309      	adds	r3, #9
		} else if (ep & USB_EP_DIR_IN) {
    2d2e:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    2d30:	33ff      	adds	r3, #255	; 0xff
		} else if (ep & USB_EP_DIR_IN) {
    2d32:	2900      	cmp	r1, #0
    2d34:	db12      	blt.n	2d5c <usb_device_endpoint_disable_callback+0x80>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    2d36:	2201      	movs	r2, #1
    2d38:	701a      	strb	r2, [r3, #0]
    2d3a:	e7e3      	b.n	2d04 <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    2d3c:	2a02      	cmp	r2, #2
    2d3e:	d113      	bne.n	2d68 <usb_device_endpoint_disable_callback+0x8c>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    2d40:	6802      	ldr	r2, [r0, #0]
    2d42:	015b      	lsls	r3, r3, #5
    2d44:	18d3      	adds	r3, r2, r3
    2d46:	2210      	movs	r2, #16
    2d48:	3309      	adds	r3, #9
    2d4a:	33ff      	adds	r3, #255	; 0xff
    2d4c:	701a      	strb	r2, [r3, #0]
    2d4e:	e7d9      	b.n	2d04 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    2d50:	210c      	movs	r1, #12
    2d52:	6802      	ldr	r2, [r0, #0]
    2d54:	3309      	adds	r3, #9
    2d56:	33ff      	adds	r3, #255	; 0xff
    2d58:	54d1      	strb	r1, [r2, r3]
    2d5a:	e7d3      	b.n	2d04 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    2d5c:	2202      	movs	r2, #2
    2d5e:	701a      	strb	r2, [r3, #0]
    2d60:	e7d0      	b.n	2d04 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    2d62:	2208      	movs	r2, #8
    2d64:	701a      	strb	r2, [r3, #0]
    2d66:	e7cd      	b.n	2d04 <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    2d68:	2a03      	cmp	r2, #3
    2d6a:	d1cb      	bne.n	2d04 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    2d6c:	6802      	ldr	r2, [r0, #0]
    2d6e:	015b      	lsls	r3, r3, #5
    2d70:	18d3      	adds	r3, r2, r3
    2d72:	3309      	adds	r3, #9
		if (ep & USB_EP_DIR_IN) {
    2d74:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    2d76:	33ff      	adds	r3, #255	; 0xff
		if (ep & USB_EP_DIR_IN) {
    2d78:	2900      	cmp	r1, #0
    2d7a:	db02      	blt.n	2d82 <usb_device_endpoint_disable_callback+0xa6>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    2d7c:	2220      	movs	r2, #32
    2d7e:	701a      	strb	r2, [r3, #0]
    2d80:	e7c0      	b.n	2d04 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    2d82:	2240      	movs	r2, #64	; 0x40
    2d84:	701a      	strb	r2, [r3, #0]
    2d86:	e7bd      	b.n	2d04 <usb_device_endpoint_disable_callback+0x28>
    2d88:	00024718 	.word	0x00024718

00002d8c <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    2d8c:	2300      	movs	r3, #0
    2d8e:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    2d90:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    2d92:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    2d94:	3301      	adds	r3, #1
    2d96:	70c3      	strb	r3, [r0, #3]
}
    2d98:	4770      	bx	lr
    2d9a:	46c0      	nop			; (mov r8, r8)

00002d9c <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    2d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d9e:	46ce      	mov	lr, r9
    2da0:	4647      	mov	r7, r8
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    2da2:	230f      	movs	r3, #15
{
    2da4:	b580      	push	{r7, lr}
	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    2da6:	780c      	ldrb	r4, [r1, #0]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;

	switch (ep_config->ep_type) {
    2da8:	78ca      	ldrb	r2, [r1, #3]
	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    2daa:	4023      	ands	r3, r4
{
    2dac:	0006      	movs	r6, r0
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    2dae:	b264      	sxtb	r4, r4
	switch (ep_config->ep_type) {
    2db0:	2a04      	cmp	r2, #4
    2db2:	d81a      	bhi.n	2dea <usb_device_endpoint_set_config+0x4e>
    2db4:	4d71      	ldr	r5, [pc, #452]	; (2f7c <usb_device_endpoint_set_config+0x1e0>)
    2db6:	0092      	lsls	r2, r2, #2
    2db8:	58aa      	ldr	r2, [r5, r2]
    2dba:	4697      	mov	pc, r2
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
			return STATUS_OK;

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2dbc:	2080      	movs	r0, #128	; 0x80
    2dbe:	0040      	lsls	r0, r0, #1
    2dc0:	4680      	mov	r8, r0
    2dc2:	5c17      	ldrb	r7, [r2, r0]
    2dc4:	3890      	subs	r0, #144	; 0x90
    2dc6:	4684      	mov	ip, r0
    2dc8:	4665      	mov	r5, ip
				return STATUS_ERR_DENIED;
    2dca:	3854      	subs	r0, #84	; 0x54
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2dcc:	423d      	tst	r5, r7
    2dce:	d124      	bne.n	2e1a <usb_device_endpoint_set_config+0x7e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    2dd0:	4640      	mov	r0, r8
    2dd2:	2720      	movs	r7, #32
    2dd4:	5c10      	ldrb	r0, [r2, r0]
			break;

		case USB_DEVICE_ENDPOINT_TYPE_BULK:
			if (ep_bank) {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    2dd6:	4645      	mov	r5, r8
    2dd8:	4338      	orrs	r0, r7
    2dda:	5550      	strb	r0, [r2, r5]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2ddc:	0018      	movs	r0, r3
    2dde:	6832      	ldr	r2, [r6, #0]
    2de0:	3008      	adds	r0, #8
    2de2:	0140      	lsls	r0, r0, #5
    2de4:	1812      	adds	r2, r2, r0
    2de6:	2080      	movs	r0, #128	; 0x80
    2de8:	7110      	strb	r0, [r2, #4]

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    2dea:	2007      	movs	r0, #7
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    2dec:	0fe2      	lsrs	r2, r4, #31
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    2dee:	005b      	lsls	r3, r3, #1
    2df0:	189b      	adds	r3, r3, r2
    2df2:	4a63      	ldr	r2, [pc, #396]	; (2f80 <usb_device_endpoint_set_config+0x1e4>)
    2df4:	784c      	ldrb	r4, [r1, #1]
    2df6:	011b      	lsls	r3, r3, #4
    2df8:	18d3      	adds	r3, r2, r3
    2dfa:	685a      	ldr	r2, [r3, #4]
    2dfc:	4020      	ands	r0, r4
    2dfe:	4c61      	ldr	r4, [pc, #388]	; (2f84 <usb_device_endpoint_set_config+0x1e8>)
    2e00:	0700      	lsls	r0, r0, #28
    2e02:	4022      	ands	r2, r4
    2e04:	4302      	orrs	r2, r0
    2e06:	605a      	str	r2, [r3, #4]

	if (true == ep_config->auto_zlp) {
    2e08:	788a      	ldrb	r2, [r1, #2]
    2e0a:	2a00      	cmp	r2, #0
    2e0c:	d000      	beq.n	2e10 <usb_device_endpoint_set_config+0x74>
    2e0e:	e084      	b.n	2f1a <usb_device_endpoint_set_config+0x17e>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
	}

	return STATUS_OK;
    2e10:	2000      	movs	r0, #0
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2e12:	685a      	ldr	r2, [r3, #4]
    2e14:	0052      	lsls	r2, r2, #1
    2e16:	0852      	lsrs	r2, r2, #1
    2e18:	605a      	str	r2, [r3, #4]
}
    2e1a:	bc0c      	pop	{r2, r3}
    2e1c:	4690      	mov	r8, r2
    2e1e:	4699      	mov	r9, r3
    2e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e22:	6800      	ldr	r0, [r0, #0]
    2e24:	015a      	lsls	r2, r3, #5
    2e26:	4684      	mov	ip, r0
    2e28:	4462      	add	r2, ip
			if (ep_bank) {
    2e2a:	2c00      	cmp	r4, #0
    2e2c:	da00      	bge.n	2e30 <usb_device_endpoint_set_config+0x94>
    2e2e:	e08a      	b.n	2f46 <usb_device_endpoint_set_config+0x1aa>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2e30:	2580      	movs	r5, #128	; 0x80
    2e32:	006d      	lsls	r5, r5, #1
    2e34:	5d57      	ldrb	r7, [r2, r5]
				return STATUS_ERR_DENIED;
    2e36:	201c      	movs	r0, #28
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2e38:	077f      	lsls	r7, r7, #29
    2e3a:	d1ee      	bne.n	2e1a <usb_device_endpoint_set_config+0x7e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    2e3c:	5d50      	ldrb	r0, [r2, r5]
    2e3e:	2703      	movs	r7, #3
    2e40:	e061      	b.n	2f06 <usb_device_endpoint_set_config+0x16a>
    2e42:	6800      	ldr	r0, [r0, #0]
    2e44:	015a      	lsls	r2, r3, #5
    2e46:	4684      	mov	ip, r0
    2e48:	4462      	add	r2, ip
			if (ep_bank) {
    2e4a:	2c00      	cmp	r4, #0
    2e4c:	db6c      	blt.n	2f28 <usb_device_endpoint_set_config+0x18c>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2e4e:	2580      	movs	r5, #128	; 0x80
    2e50:	006d      	lsls	r5, r5, #1
    2e52:	5d57      	ldrb	r7, [r2, r5]
				return STATUS_ERR_DENIED;
    2e54:	201c      	movs	r0, #28
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2e56:	077f      	lsls	r7, r7, #29
    2e58:	d1df      	bne.n	2e1a <usb_device_endpoint_set_config+0x7e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    2e5a:	5d50      	ldrb	r0, [r2, r5]
    2e5c:	2704      	movs	r7, #4
    2e5e:	e052      	b.n	2f06 <usb_device_endpoint_set_config+0x16a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    2e60:	2100      	movs	r1, #0
    2e62:	6802      	ldr	r2, [r0, #0]
    2e64:	3308      	adds	r3, #8
    2e66:	015b      	lsls	r3, r3, #5
    2e68:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    2e6a:	2000      	movs	r0, #0
    2e6c:	e7d5      	b.n	2e1a <usb_device_endpoint_set_config+0x7e>
    2e6e:	6802      	ldr	r2, [r0, #0]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    2e70:	2080      	movs	r0, #128	; 0x80
    2e72:	015d      	lsls	r5, r3, #5
    2e74:	0040      	lsls	r0, r0, #1
    2e76:	1952      	adds	r2, r2, r5
    2e78:	5c17      	ldrb	r7, [r2, r0]
    2e7a:	4681      	mov	r9, r0
				return STATUS_ERR_DENIED;
    2e7c:	38e4      	subs	r0, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    2e7e:	077f      	lsls	r7, r7, #29
    2e80:	d1cb      	bne.n	2e1a <usb_device_endpoint_set_config+0x7e>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    2e82:	464c      	mov	r4, r9
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    2e84:	2770      	movs	r7, #112	; 0x70
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    2e86:	5d14      	ldrb	r4, [r2, r4]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    2e88:	4227      	tst	r7, r4
    2e8a:	d1c6      	bne.n	2e1a <usb_device_endpoint_set_config+0x7e>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    2e8c:	464c      	mov	r4, r9
    2e8e:	380b      	subs	r0, #11
    2e90:	5510      	strb	r0, [r2, r4]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    2e92:	6832      	ldr	r2, [r6, #0]
    2e94:	3308      	adds	r3, #8
    2e96:	015b      	lsls	r3, r3, #5
    2e98:	18d2      	adds	r2, r2, r3
    2e9a:	302f      	adds	r0, #47	; 0x2f
    2e9c:	7150      	strb	r0, [r2, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2e9e:	6832      	ldr	r2, [r6, #0]
    2ea0:	18d3      	adds	r3, r2, r3
    2ea2:	2280      	movs	r2, #128	; 0x80
    2ea4:	711a      	strb	r2, [r3, #4]
			if (true == ep_config->auto_zlp) {
    2ea6:	788b      	ldrb	r3, [r1, #2]
    2ea8:	2b00      	cmp	r3, #0
    2eaa:	d05b      	beq.n	2f64 <usb_device_endpoint_set_config+0x1c8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2eac:	2080      	movs	r0, #128	; 0x80
    2eae:	4b34      	ldr	r3, [pc, #208]	; (2f80 <usb_device_endpoint_set_config+0x1e4>)
    2eb0:	0600      	lsls	r0, r0, #24
    2eb2:	195a      	adds	r2, r3, r5
    2eb4:	6854      	ldr	r4, [r2, #4]
    2eb6:	4304      	orrs	r4, r0
    2eb8:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2eba:	6954      	ldr	r4, [r2, #20]
    2ebc:	4320      	orrs	r0, r4
    2ebe:	6150      	str	r0, [r2, #20]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    2ec0:	2207      	movs	r2, #7
    2ec2:	784c      	ldrb	r4, [r1, #1]
    2ec4:	195d      	adds	r5, r3, r5
    2ec6:	6868      	ldr	r0, [r5, #4]
    2ec8:	4e2e      	ldr	r6, [pc, #184]	; (2f84 <usb_device_endpoint_set_config+0x1e8>)
    2eca:	4014      	ands	r4, r2
    2ecc:	0724      	lsls	r4, r4, #28
    2ece:	4030      	ands	r0, r6
    2ed0:	4320      	orrs	r0, r4
    2ed2:	6068      	str	r0, [r5, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    2ed4:	7849      	ldrb	r1, [r1, #1]
    2ed6:	696b      	ldr	r3, [r5, #20]
    2ed8:	400a      	ands	r2, r1
    2eda:	0712      	lsls	r2, r2, #28
    2edc:	4033      	ands	r3, r6
    2ede:	431a      	orrs	r2, r3
    2ee0:	616a      	str	r2, [r5, #20]
			return STATUS_OK;
    2ee2:	2000      	movs	r0, #0
    2ee4:	e799      	b.n	2e1a <usb_device_endpoint_set_config+0x7e>
    2ee6:	6800      	ldr	r0, [r0, #0]
    2ee8:	015a      	lsls	r2, r3, #5
    2eea:	4684      	mov	ip, r0
    2eec:	4462      	add	r2, ip
			if (ep_bank) {
    2eee:	2c00      	cmp	r4, #0
    2ef0:	da00      	bge.n	2ef4 <usb_device_endpoint_set_config+0x158>
    2ef2:	e763      	b.n	2dbc <usb_device_endpoint_set_config+0x20>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2ef4:	2580      	movs	r5, #128	; 0x80
    2ef6:	006d      	lsls	r5, r5, #1
    2ef8:	5d57      	ldrb	r7, [r2, r5]
				return STATUS_ERR_DENIED;
    2efa:	201c      	movs	r0, #28
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2efc:	077f      	lsls	r7, r7, #29
    2efe:	d000      	beq.n	2f02 <usb_device_endpoint_set_config+0x166>
    2f00:	e78b      	b.n	2e1a <usb_device_endpoint_set_config+0x7e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    2f02:	2702      	movs	r7, #2
    2f04:	5d50      	ldrb	r0, [r2, r5]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    2f06:	4338      	orrs	r0, r7
    2f08:	5550      	strb	r0, [r2, r5]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    2f0a:	0018      	movs	r0, r3
    2f0c:	6832      	ldr	r2, [r6, #0]
    2f0e:	3008      	adds	r0, #8
    2f10:	0140      	lsls	r0, r0, #5
    2f12:	1812      	adds	r2, r2, r0
    2f14:	2040      	movs	r0, #64	; 0x40
    2f16:	7150      	strb	r0, [r2, #5]
    2f18:	e767      	b.n	2dea <usb_device_endpoint_set_config+0x4e>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2f1a:	2280      	movs	r2, #128	; 0x80
    2f1c:	6859      	ldr	r1, [r3, #4]
    2f1e:	0612      	lsls	r2, r2, #24
    2f20:	430a      	orrs	r2, r1
    2f22:	605a      	str	r2, [r3, #4]
	return STATUS_OK;
    2f24:	2000      	movs	r0, #0
    2f26:	e778      	b.n	2e1a <usb_device_endpoint_set_config+0x7e>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2f28:	2080      	movs	r0, #128	; 0x80
    2f2a:	0040      	lsls	r0, r0, #1
    2f2c:	4680      	mov	r8, r0
    2f2e:	5c17      	ldrb	r7, [r2, r0]
    2f30:	3890      	subs	r0, #144	; 0x90
    2f32:	4684      	mov	ip, r0
    2f34:	4665      	mov	r5, ip
				return STATUS_ERR_DENIED;
    2f36:	3854      	subs	r0, #84	; 0x54
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2f38:	423d      	tst	r5, r7
    2f3a:	d000      	beq.n	2f3e <usb_device_endpoint_set_config+0x1a2>
    2f3c:	e76d      	b.n	2e1a <usb_device_endpoint_set_config+0x7e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    2f3e:	4640      	mov	r0, r8
    2f40:	2740      	movs	r7, #64	; 0x40
    2f42:	5c10      	ldrb	r0, [r2, r0]
    2f44:	e747      	b.n	2dd6 <usb_device_endpoint_set_config+0x3a>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2f46:	2080      	movs	r0, #128	; 0x80
    2f48:	0040      	lsls	r0, r0, #1
    2f4a:	4680      	mov	r8, r0
    2f4c:	5c17      	ldrb	r7, [r2, r0]
    2f4e:	3890      	subs	r0, #144	; 0x90
    2f50:	4684      	mov	ip, r0
    2f52:	4665      	mov	r5, ip
				return STATUS_ERR_DENIED;
    2f54:	3854      	subs	r0, #84	; 0x54
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2f56:	423d      	tst	r5, r7
    2f58:	d000      	beq.n	2f5c <usb_device_endpoint_set_config+0x1c0>
    2f5a:	e75e      	b.n	2e1a <usb_device_endpoint_set_config+0x7e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    2f5c:	4640      	mov	r0, r8
    2f5e:	2730      	movs	r7, #48	; 0x30
    2f60:	5c10      	ldrb	r0, [r2, r0]
    2f62:	e738      	b.n	2dd6 <usb_device_endpoint_set_config+0x3a>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2f64:	4b06      	ldr	r3, [pc, #24]	; (2f80 <usb_device_endpoint_set_config+0x1e4>)
    2f66:	1958      	adds	r0, r3, r5
    2f68:	6842      	ldr	r2, [r0, #4]
    2f6a:	0052      	lsls	r2, r2, #1
    2f6c:	0852      	lsrs	r2, r2, #1
    2f6e:	6042      	str	r2, [r0, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2f70:	6942      	ldr	r2, [r0, #20]
    2f72:	0052      	lsls	r2, r2, #1
    2f74:	0852      	lsrs	r2, r2, #1
    2f76:	6142      	str	r2, [r0, #20]
    2f78:	e7a2      	b.n	2ec0 <usb_device_endpoint_set_config+0x124>
    2f7a:	46c0      	nop			; (mov r8, r8)
    2f7c:	000246f4 	.word	0x000246f4
    2f80:	20001298 	.word	0x20001298
    2f84:	8fffffff 	.word	0x8fffffff

00002f88 <usb_device_endpoint_is_configured>:
 *
 * \return \c true if endpoint is configured and ready to use
 */
bool usb_device_endpoint_is_configured(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2f88:	230f      	movs	r3, #15
    2f8a:	400b      	ands	r3, r1
	uint8_t flag;

	if (ep & USB_EP_DIR_IN) {
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    2f8c:	6802      	ldr	r2, [r0, #0]
    2f8e:	3308      	adds	r3, #8
    2f90:	015b      	lsls	r3, r3, #5
	if (ep & USB_EP_DIR_IN) {
    2f92:	b249      	sxtb	r1, r1
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    2f94:	5c98      	ldrb	r0, [r3, r2]
	if (ep & USB_EP_DIR_IN) {
    2f96:	2900      	cmp	r1, #0
    2f98:	db05      	blt.n	2fa6 <usb_device_endpoint_is_configured+0x1e>
	} else {
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    2f9a:	0740      	lsls	r0, r0, #29
    2f9c:	0f40      	lsrs	r0, r0, #29
	}
	return ((enum usb_device_endpoint_type)(flag) != USB_DEVICE_ENDPOINT_TYPE_DISABLE);
    2f9e:	1e43      	subs	r3, r0, #1
    2fa0:	4198      	sbcs	r0, r3
    2fa2:	b2c0      	uxtb	r0, r0
}
    2fa4:	4770      	bx	lr
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    2fa6:	0640      	lsls	r0, r0, #25
    2fa8:	0f40      	lsrs	r0, r0, #29
    2faa:	e7f8      	b.n	2f9e <usb_device_endpoint_is_configured+0x16>

00002fac <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    2fac:	230f      	movs	r3, #15
    2fae:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2fb0:	3308      	adds	r3, #8
    2fb2:	6802      	ldr	r2, [r0, #0]
    2fb4:	015b      	lsls	r3, r3, #5
	if (ep & USB_EP_DIR_IN) {
    2fb6:	b249      	sxtb	r1, r1
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2fb8:	18d2      	adds	r2, r2, r3
	if (ep & USB_EP_DIR_IN) {
    2fba:	2900      	cmp	r1, #0
    2fbc:	db06      	blt.n	2fcc <usb_device_endpoint_abort_job+0x20>
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    2fbe:	2140      	movs	r1, #64	; 0x40
    2fc0:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    2fc2:	6802      	ldr	r2, [r0, #0]
    2fc4:	18d3      	adds	r3, r2, r3
    2fc6:	2201      	movs	r2, #1
    2fc8:	71da      	strb	r2, [r3, #7]
	}
}
    2fca:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2fcc:	2180      	movs	r1, #128	; 0x80
    2fce:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    2fd0:	6802      	ldr	r2, [r0, #0]
    2fd2:	18d3      	adds	r3, r2, r3
    2fd4:	2202      	movs	r2, #2
    2fd6:	71da      	strb	r2, [r3, #7]
    2fd8:	e7f7      	b.n	2fca <usb_device_endpoint_abort_job+0x1e>
    2fda:	46c0      	nop			; (mov r8, r8)

00002fdc <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2fdc:	230f      	movs	r3, #15
    2fde:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    2fe0:	6802      	ldr	r2, [r0, #0]
    2fe2:	3308      	adds	r3, #8
    2fe4:	015b      	lsls	r3, r3, #5
    2fe6:	18d3      	adds	r3, r2, r3
	if (ep & USB_EP_DIR_IN) {
    2fe8:	b249      	sxtb	r1, r1
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    2fea:	7998      	ldrb	r0, [r3, #6]
	if (ep & USB_EP_DIR_IN) {
    2fec:	2900      	cmp	r1, #0
    2fee:	db02      	blt.n	2ff6 <usb_device_endpoint_is_halted+0x1a>
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    2ff0:	06c0      	lsls	r0, r0, #27
    2ff2:	0fc0      	lsrs	r0, r0, #31
	}
}
    2ff4:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    2ff6:	0680      	lsls	r0, r0, #26
    2ff8:	0fc0      	lsrs	r0, r0, #31
    2ffa:	e7fb      	b.n	2ff4 <usb_device_endpoint_is_halted+0x18>

00002ffc <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2ffc:	230f      	movs	r3, #15
    2ffe:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    3000:	6802      	ldr	r2, [r0, #0]
    3002:	3308      	adds	r3, #8
    3004:	015b      	lsls	r3, r3, #5
	if (ep & USB_EP_DIR_IN) {
    3006:	b249      	sxtb	r1, r1
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    3008:	18d3      	adds	r3, r2, r3
	if (ep & USB_EP_DIR_IN) {
    300a:	2900      	cmp	r1, #0
    300c:	db02      	blt.n	3014 <usb_device_endpoint_set_halt+0x18>
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    300e:	2210      	movs	r2, #16
    3010:	715a      	strb	r2, [r3, #5]
	}
}
    3012:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    3014:	2220      	movs	r2, #32
    3016:	715a      	strb	r2, [r3, #5]
    3018:	e7fb      	b.n	3012 <usb_device_endpoint_set_halt+0x16>
    301a:	46c0      	nop			; (mov r8, r8)

0000301c <usb_device_endpoint_clear_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    301c:	230f      	movs	r3, #15
    301e:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    3020:	b249      	sxtb	r1, r1
{
    3022:	b530      	push	{r4, r5, lr}
	if (ep & USB_EP_DIR_IN) {
    3024:	2900      	cmp	r1, #0
    3026:	db1b      	blt.n	3060 <usb_device_endpoint_clear_halt+0x44>
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    3028:	2483      	movs	r4, #131	; 0x83
    302a:	6802      	ldr	r2, [r0, #0]
    302c:	0159      	lsls	r1, r3, #5
    302e:	0064      	lsls	r4, r4, #1
    3030:	1852      	adds	r2, r2, r1
    3032:	5d15      	ldrb	r5, [r2, r4]
    3034:	3cf6      	subs	r4, #246	; 0xf6
    3036:	422c      	tst	r4, r5
    3038:	d011      	beq.n	305e <usb_device_endpoint_clear_halt+0x42>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    303a:	2582      	movs	r5, #130	; 0x82
    303c:	006d      	lsls	r5, r5, #1
    303e:	5554      	strb	r4, [r2, r5]
    3040:	6802      	ldr	r2, [r0, #0]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    3042:	3410      	adds	r4, #16
    3044:	1852      	adds	r2, r2, r1
    3046:	2108      	movs	r1, #8
    3048:	31ff      	adds	r1, #255	; 0xff
    304a:	5c55      	ldrb	r5, [r2, r1]
    304c:	422c      	tst	r4, r5
    304e:	d006      	beq.n	305e <usb_device_endpoint_clear_halt+0x42>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    3050:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    3052:	6802      	ldr	r2, [r0, #0]
    3054:	3308      	adds	r3, #8
    3056:	015b      	lsls	r3, r3, #5
    3058:	18d3      	adds	r3, r2, r3
    305a:	2201      	movs	r2, #1
    305c:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    305e:	bd30      	pop	{r4, r5, pc}
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    3060:	2483      	movs	r4, #131	; 0x83
    3062:	6802      	ldr	r2, [r0, #0]
    3064:	0159      	lsls	r1, r3, #5
    3066:	0064      	lsls	r4, r4, #1
    3068:	1852      	adds	r2, r2, r1
    306a:	5d15      	ldrb	r5, [r2, r4]
    306c:	3ce6      	subs	r4, #230	; 0xe6
    306e:	422c      	tst	r4, r5
    3070:	d0f5      	beq.n	305e <usb_device_endpoint_clear_halt+0x42>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    3072:	2582      	movs	r5, #130	; 0x82
    3074:	006d      	lsls	r5, r5, #1
    3076:	5554      	strb	r4, [r2, r5]
    3078:	6802      	ldr	r2, [r0, #0]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    307a:	3420      	adds	r4, #32
    307c:	1852      	adds	r2, r2, r1
    307e:	2108      	movs	r1, #8
    3080:	31ff      	adds	r1, #255	; 0xff
    3082:	5c55      	ldrb	r5, [r2, r1]
    3084:	422c      	tst	r4, r5
    3086:	d0ea      	beq.n	305e <usb_device_endpoint_clear_halt+0x42>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    3088:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    308a:	6802      	ldr	r2, [r0, #0]
    308c:	3308      	adds	r3, #8
    308e:	015b      	lsls	r3, r3, #5
    3090:	18d3      	adds	r3, r2, r3
    3092:	2202      	movs	r2, #2
    3094:	711a      	strb	r2, [r3, #4]
    3096:	e7e2      	b.n	305e <usb_device_endpoint_clear_halt+0x42>

00003098 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    3098:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    309a:	000d      	movs	r5, r1
    309c:	6804      	ldr	r4, [r0, #0]
    309e:	3508      	adds	r5, #8
    30a0:	016d      	lsls	r5, r5, #5
    30a2:	5d2c      	ldrb	r4, [r5, r4]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    30a4:	261c      	movs	r6, #28
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    30a6:	0664      	lsls	r4, r4, #25
    30a8:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    30aa:	d101      	bne.n	30b0 <usb_device_endpoint_write_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
    30ac:	0030      	movs	r0, r6
    30ae:	bd70      	pop	{r4, r5, r6, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    30b0:	4c0a      	ldr	r4, [pc, #40]	; (30dc <usb_device_endpoint_write_buffer_job+0x44>)
    30b2:	0149      	lsls	r1, r1, #5
    30b4:	1861      	adds	r1, r4, r1
    30b6:	000c      	movs	r4, r1
    30b8:	610a      	str	r2, [r1, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    30ba:	694a      	ldr	r2, [r1, #20]
    30bc:	4908      	ldr	r1, [pc, #32]	; (30e0 <usb_device_endpoint_write_buffer_job+0x48>)
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    30be:	049b      	lsls	r3, r3, #18
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    30c0:	400a      	ands	r2, r1
    30c2:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    30c4:	6962      	ldr	r2, [r4, #20]
    30c6:	0c9b      	lsrs	r3, r3, #18
    30c8:	0b92      	lsrs	r2, r2, #14
    30ca:	0392      	lsls	r2, r2, #14
    30cc:	4313      	orrs	r3, r2
    30ce:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    30d0:	6803      	ldr	r3, [r0, #0]
	return STATUS_OK;
    30d2:	2600      	movs	r6, #0
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    30d4:	195d      	adds	r5, r3, r5
    30d6:	2380      	movs	r3, #128	; 0x80
    30d8:	716b      	strb	r3, [r5, #5]
	return STATUS_OK;
    30da:	e7e7      	b.n	30ac <usb_device_endpoint_write_buffer_job+0x14>
    30dc:	20001298 	.word	0x20001298
    30e0:	f0003fff 	.word	0xf0003fff

000030e4 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    30e4:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    30e6:	000c      	movs	r4, r1
    30e8:	6805      	ldr	r5, [r0, #0]
    30ea:	3408      	adds	r4, #8
    30ec:	0164      	lsls	r4, r4, #5
    30ee:	5d65      	ldrb	r5, [r4, r5]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    30f0:	261c      	movs	r6, #28
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    30f2:	076d      	lsls	r5, r5, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    30f4:	d101      	bne.n	30fa <usb_device_endpoint_read_buffer_job+0x16>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
    30f6:	0030      	movs	r0, r6
    30f8:	bd70      	pop	{r4, r5, r6, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    30fa:	4d0a      	ldr	r5, [pc, #40]	; (3124 <usb_device_endpoint_read_buffer_job+0x40>)
    30fc:	0149      	lsls	r1, r1, #5
    30fe:	514a      	str	r2, [r1, r5]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    3100:	1869      	adds	r1, r5, r1
    3102:	684a      	ldr	r2, [r1, #4]
    3104:	4d08      	ldr	r5, [pc, #32]	; (3128 <usb_device_endpoint_read_buffer_job+0x44>)
    3106:	049b      	lsls	r3, r3, #18
    3108:	091b      	lsrs	r3, r3, #4
    310a:	402a      	ands	r2, r5
    310c:	4313      	orrs	r3, r2
    310e:	604b      	str	r3, [r1, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    3110:	684b      	ldr	r3, [r1, #4]
	return STATUS_OK;
    3112:	2600      	movs	r6, #0
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    3114:	0b9b      	lsrs	r3, r3, #14
    3116:	039b      	lsls	r3, r3, #14
    3118:	604b      	str	r3, [r1, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    311a:	6803      	ldr	r3, [r0, #0]
    311c:	191c      	adds	r4, r3, r4
    311e:	2340      	movs	r3, #64	; 0x40
    3120:	7123      	strb	r3, [r4, #4]
	return STATUS_OK;
    3122:	e7e8      	b.n	30f6 <usb_device_endpoint_read_buffer_job+0x12>
    3124:	20001298 	.word	0x20001298
    3128:	f0003fff 	.word	0xf0003fff

0000312c <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    312c:	4b09      	ldr	r3, [pc, #36]	; (3154 <usb_device_endpoint_setup_buffer_job+0x28>)
    312e:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    3130:	685a      	ldr	r2, [r3, #4]
    3132:	4909      	ldr	r1, [pc, #36]	; (3158 <usb_device_endpoint_setup_buffer_job+0x2c>)
    3134:	4011      	ands	r1, r2
    3136:	2280      	movs	r2, #128	; 0x80
    3138:	0292      	lsls	r2, r2, #10
    313a:	430a      	orrs	r2, r1
    313c:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    313e:	685a      	ldr	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    3140:	2140      	movs	r1, #64	; 0x40
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    3142:	0b92      	lsrs	r2, r2, #14
    3144:	0392      	lsls	r2, r2, #14
    3146:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    3148:	2382      	movs	r3, #130	; 0x82
    314a:	6802      	ldr	r2, [r0, #0]
    314c:	005b      	lsls	r3, r3, #1

	return STATUS_OK;
}
    314e:	2000      	movs	r0, #0
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    3150:	54d1      	strb	r1, [r2, r3]
}
    3152:	4770      	bx	lr
    3154:	20001298 	.word	0x20001298
    3158:	f0003fff 	.word	0xf0003fff

0000315c <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    315c:	2102      	movs	r1, #2
    315e:	6802      	ldr	r2, [r0, #0]
    3160:	7813      	ldrb	r3, [r2, #0]
    3162:	430b      	orrs	r3, r1
    3164:	7013      	strb	r3, [r2, #0]
    3166:	6802      	ldr	r2, [r0, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    3168:	7893      	ldrb	r3, [r2, #2]
    316a:	2b02      	cmp	r3, #2
    316c:	d0fc      	beq.n	3168 <usb_enable+0xc>
}
    316e:	4770      	bx	lr

00003170 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    3170:	b5f0      	push	{r4, r5, r6, r7, lr}
    3172:	4657      	mov	r7, sl
    3174:	4645      	mov	r5, r8
    3176:	46de      	mov	lr, fp
    3178:	464e      	mov	r6, r9
    317a:	b5e0      	push	{r5, r6, r7, lr}
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    317c:	4c86      	ldr	r4, [pc, #536]	; (3398 <USB_Handler+0x228>)
{
    317e:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    3180:	6827      	ldr	r7, [r4, #0]
    3182:	683d      	ldr	r5, [r7, #0]
    3184:	782b      	ldrb	r3, [r5, #0]
    3186:	09db      	lsrs	r3, r3, #7
    3188:	d000      	beq.n	318c <USB_Handler+0x1c>
    318a:	e06d      	b.n	3268 <USB_Handler+0xf8>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    318c:	8c2e      	ldrh	r6, [r5, #32]
    318e:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    3190:	2e00      	cmp	r6, #0
    3192:	d136      	bne.n	3202 <USB_Handler+0x92>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    3194:	8bab      	ldrh	r3, [r5, #28]
		flags_run = flags &
    3196:	22aa      	movs	r2, #170	; 0xaa
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    3198:	b29b      	uxth	r3, r3
    319a:	4698      	mov	r8, r3
				_usb_instances->device_enabled_callback_mask &
    319c:	23ab      	movs	r3, #171	; 0xab
		flags_run = flags &
    319e:	0052      	lsls	r2, r2, #1
				_usb_instances->device_enabled_callback_mask &
    31a0:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    31a2:	5afb      	ldrh	r3, [r7, r3]
    31a4:	5abe      	ldrh	r6, [r7, r2]
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    31a6:	2500      	movs	r5, #0
		flags_run = flags &
    31a8:	401e      	ands	r6, r3
    31aa:	4643      	mov	r3, r8
    31ac:	401e      	ands	r6, r3
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    31ae:	4b7b      	ldr	r3, [pc, #492]	; (339c <USB_Handler+0x22c>)
    31b0:	4f7b      	ldr	r7, [pc, #492]	; (33a0 <USB_Handler+0x230>)
    31b2:	469b      	mov	fp, r3
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    31b4:	2380      	movs	r3, #128	; 0x80
    31b6:	005b      	lsls	r3, r3, #1
    31b8:	469a      	mov	sl, r3
    31ba:	4b7a      	ldr	r3, [pc, #488]	; (33a4 <USB_Handler+0x234>)
    31bc:	4699      	mov	r9, r3
    31be:	0033      	movs	r3, r6
    31c0:	4646      	mov	r6, r8
    31c2:	4698      	mov	r8, r3
			if (flags & _usb_device_irq_bits[i]) {
    31c4:	006b      	lsls	r3, r5, #1
    31c6:	5afb      	ldrh	r3, [r7, r3]
    31c8:	4233      	tst	r3, r6
    31ca:	d002      	beq.n	31d2 <USB_Handler+0x62>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    31cc:	6822      	ldr	r2, [r4, #0]
    31ce:	6812      	ldr	r2, [r2, #0]
    31d0:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    31d2:	4642      	mov	r2, r8
    31d4:	4213      	tst	r3, r2
    31d6:	d00a      	beq.n	31ee <USB_Handler+0x7e>
    31d8:	4649      	mov	r1, r9
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    31da:	2d06      	cmp	r5, #6
    31dc:	d100      	bne.n	31e0 <USB_Handler+0x70>
    31de:	e364      	b.n	38aa <USB_Handler+0x73a>
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    31e0:	002b      	movs	r3, r5
    31e2:	6822      	ldr	r2, [r4, #0]
    31e4:	332e      	adds	r3, #46	; 0x2e
    31e6:	009b      	lsls	r3, r3, #2
    31e8:	589b      	ldr	r3, [r3, r2]
    31ea:	0010      	movs	r0, r2
    31ec:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    31ee:	3501      	adds	r5, #1
    31f0:	2d07      	cmp	r5, #7
    31f2:	d1e7      	bne.n	31c4 <USB_Handler+0x54>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    31f4:	b003      	add	sp, #12
    31f6:	bc3c      	pop	{r2, r3, r4, r5}
    31f8:	4690      	mov	r8, r2
    31fa:	4699      	mov	r9, r3
    31fc:	46a2      	mov	sl, r4
    31fe:	46ab      	mov	fp, r5
    3200:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (ep_inst & (1 << i)) {
    3202:	2201      	movs	r2, #1
    3204:	003c      	movs	r4, r7
    3206:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    3208:	325f      	adds	r2, #95	; 0x5f
    320a:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    320c:	3a50      	subs	r2, #80	; 0x50
	if (0 == ep_inst) {
    320e:	2300      	movs	r3, #0
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3210:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    3212:	46b9      	mov	r9, r7
    3214:	46a8      	mov	r8, r5
    3216:	3459      	adds	r4, #89	; 0x59
    3218:	34ff      	adds	r4, #255	; 0xff
			if (ep_inst & (1 << i)) {
    321a:	0032      	movs	r2, r6
    321c:	4661      	mov	r1, ip
    321e:	411a      	asrs	r2, r3
    3220:	b2dd      	uxtb	r5, r3
    3222:	4211      	tst	r1, r2
    3224:	d01b      	beq.n	325e <USB_Handler+0xee>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    3226:	001f      	movs	r7, r3
    3228:	3708      	adds	r7, #8
    322a:	017a      	lsls	r2, r7, #5
    322c:	4442      	add	r2, r8
    322e:	1dd1      	adds	r1, r2, #7
    3230:	79d2      	ldrb	r2, [r2, #7]
    3232:	9100      	str	r1, [sp, #0]
    3234:	7a21      	ldrb	r1, [r4, #8]
    3236:	7820      	ldrb	r0, [r4, #0]
    3238:	b2d2      	uxtb	r2, r2
    323a:	4011      	ands	r1, r2
    323c:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    323e:	4658      	mov	r0, fp
    3240:	4210      	tst	r0, r2
    3242:	d000      	beq.n	3246 <USB_Handler+0xd6>
    3244:	e227      	b.n	3696 <USB_Handler+0x526>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3246:	4650      	mov	r0, sl
    3248:	4210      	tst	r0, r2
    324a:	d000      	beq.n	324e <USB_Handler+0xde>
    324c:	e24e      	b.n	36ec <USB_Handler+0x57c>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    324e:	2003      	movs	r0, #3
    3250:	4210      	tst	r0, r2
    3252:	d000      	beq.n	3256 <USB_Handler+0xe6>
    3254:	e263      	b.n	371e <USB_Handler+0x5ae>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    3256:	200c      	movs	r0, #12
    3258:	4210      	tst	r0, r2
    325a:	d000      	beq.n	325e <USB_Handler+0xee>
    325c:	e283      	b.n	3766 <USB_Handler+0x5f6>
    325e:	3301      	adds	r3, #1
    3260:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    3262:	2b08      	cmp	r3, #8
    3264:	d1d9      	bne.n	321a <USB_Handler+0xaa>
    3266:	e7c5      	b.n	31f4 <USB_Handler+0x84>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    3268:	8c2b      	ldrh	r3, [r5, #32]
    326a:	2b00      	cmp	r3, #0
    326c:	d100      	bne.n	3270 <USB_Handler+0x100>
    326e:	e0a1      	b.n	33b4 <USB_Handler+0x244>
    3270:	8c28      	ldrh	r0, [r5, #32]
    3272:	4b4d      	ldr	r3, [pc, #308]	; (33a8 <USB_Handler+0x238>)
    3274:	b280      	uxth	r0, r0
    3276:	4798      	blx	r3
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    3278:	2308      	movs	r3, #8
    327a:	4698      	mov	r8, r3
    327c:	4480      	add	r8, r0
    327e:	4643      	mov	r3, r8
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    3280:	2203      	movs	r2, #3
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    3282:	015b      	lsls	r3, r3, #5
    3284:	18ed      	adds	r5, r5, r3
    3286:	79ed      	ldrb	r5, [r5, #7]
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    3288:	0006      	movs	r6, r0
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    328a:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    328c:	422a      	tst	r2, r5
    328e:	d014      	beq.n	32ba <USB_Handler+0x14a>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3290:	4946      	ldr	r1, [pc, #280]	; (33ac <USB_Handler+0x23c>)
    3292:	468c      	mov	ip, r1
    3294:	2101      	movs	r1, #1
    3296:	4689      	mov	r9, r1
    3298:	4081      	lsls	r1, r0
    329a:	4660      	mov	r0, ip
    329c:	6800      	ldr	r0, [r0, #0]
    329e:	4388      	bics	r0, r1
    32a0:	0001      	movs	r1, r0
    32a2:	4660      	mov	r0, ip
    32a4:	6001      	str	r1, [r0, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    32a6:	6839      	ldr	r1, [r7, #0]
    32a8:	18c9      	adds	r1, r1, r3
    32aa:	71ca      	strb	r2, [r1, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    32ac:	4649      	mov	r1, r9
    32ae:	19ba      	adds	r2, r7, r6
    32b0:	32ae      	adds	r2, #174	; 0xae
    32b2:	7812      	ldrb	r2, [r2, #0]
    32b4:	4211      	tst	r1, r2
    32b6:	d000      	beq.n	32ba <USB_Handler+0x14a>
    32b8:	e172      	b.n	35a0 <USB_Handler+0x430>
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    32ba:	2304      	movs	r3, #4
    32bc:	422b      	tst	r3, r5
    32be:	d020      	beq.n	3302 <USB_Handler+0x192>
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    32c0:	6823      	ldr	r3, [r4, #0]
    32c2:	681f      	ldr	r7, [r3, #0]
    32c4:	469c      	mov	ip, r3
    32c6:	4643      	mov	r3, r8
    32c8:	015b      	lsls	r3, r3, #5
    32ca:	4699      	mov	r9, r3
    32cc:	5ddb      	ldrb	r3, [r3, r7]
    32ce:	069b      	lsls	r3, r3, #26
    32d0:	0f5b      	lsrs	r3, r3, #29
    32d2:	9300      	str	r3, [sp, #0]
    32d4:	2b02      	cmp	r3, #2
    32d6:	d100      	bne.n	32da <USB_Handler+0x16a>
    32d8:	e1bf      	b.n	365a <USB_Handler+0x4ea>
    32da:	4830      	ldr	r0, [pc, #192]	; (339c <USB_Handler+0x22c>)
    32dc:	0172      	lsls	r2, r6, #5
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    32de:	4643      	mov	r3, r8
    32e0:	0159      	lsls	r1, r3, #5
    32e2:	5dcb      	ldrb	r3, [r1, r7]
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    32e4:	1882      	adds	r2, r0, r2
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    32e6:	069b      	lsls	r3, r3, #26
    32e8:	0f5b      	lsrs	r3, r3, #29
    32ea:	2b03      	cmp	r3, #3
    32ec:	d100      	bne.n	32f0 <USB_Handler+0x180>
    32ee:	e1bf      	b.n	3670 <USB_Handler+0x500>
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    32f0:	2300      	movs	r3, #0
    32f2:	7293      	strb	r3, [r2, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    32f4:	4663      	mov	r3, ip
    32f6:	4642      	mov	r2, r8
    32f8:	681b      	ldr	r3, [r3, #0]
    32fa:	0152      	lsls	r2, r2, #5
    32fc:	189b      	adds	r3, r3, r2
    32fe:	2204      	movs	r2, #4
    3300:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    3302:	2308      	movs	r3, #8
    3304:	422b      	tst	r3, r5
    3306:	d012      	beq.n	332e <USB_Handler+0x1be>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3308:	2201      	movs	r2, #1
    330a:	40b2      	lsls	r2, r6
    330c:	4927      	ldr	r1, [pc, #156]	; (33ac <USB_Handler+0x23c>)
    330e:	6808      	ldr	r0, [r1, #0]
    3310:	4390      	bics	r0, r2
    3312:	6008      	str	r0, [r1, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3314:	6820      	ldr	r0, [r4, #0]
    3316:	4642      	mov	r2, r8
    3318:	6801      	ldr	r1, [r0, #0]
    331a:	0152      	lsls	r2, r2, #5
    331c:	468c      	mov	ip, r1
    331e:	4462      	add	r2, ip
    3320:	71d3      	strb	r3, [r2, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3322:	1983      	adds	r3, r0, r6
    3324:	33ae      	adds	r3, #174	; 0xae
    3326:	781b      	ldrb	r3, [r3, #0]
    3328:	079b      	lsls	r3, r3, #30
    332a:	d500      	bpl.n	332e <USB_Handler+0x1be>
    332c:	e187      	b.n	363e <USB_Handler+0x4ce>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    332e:	2310      	movs	r3, #16
    3330:	422b      	tst	r3, r5
    3332:	d012      	beq.n	335a <USB_Handler+0x1ea>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3334:	2201      	movs	r2, #1
    3336:	40b2      	lsls	r2, r6
    3338:	491c      	ldr	r1, [pc, #112]	; (33ac <USB_Handler+0x23c>)
    333a:	6808      	ldr	r0, [r1, #0]
    333c:	4390      	bics	r0, r2
    333e:	6008      	str	r0, [r1, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3340:	6820      	ldr	r0, [r4, #0]
    3342:	4642      	mov	r2, r8
    3344:	6801      	ldr	r1, [r0, #0]
    3346:	0152      	lsls	r2, r2, #5
    3348:	468c      	mov	ip, r1
    334a:	4462      	add	r2, ip
    334c:	71d3      	strb	r3, [r2, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    334e:	1983      	adds	r3, r0, r6
    3350:	33ae      	adds	r3, #174	; 0xae
    3352:	781b      	ldrb	r3, [r3, #0]
    3354:	075b      	lsls	r3, r3, #29
    3356:	d500      	bpl.n	335a <USB_Handler+0x1ea>
    3358:	e162      	b.n	3620 <USB_Handler+0x4b0>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    335a:	2220      	movs	r2, #32
    335c:	422a      	tst	r2, r5
    335e:	d100      	bne.n	3362 <USB_Handler+0x1f2>
    3360:	e748      	b.n	31f4 <USB_Handler+0x84>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3362:	2301      	movs	r3, #1
    3364:	40b3      	lsls	r3, r6
    3366:	4911      	ldr	r1, [pc, #68]	; (33ac <USB_Handler+0x23c>)
    3368:	6808      	ldr	r0, [r1, #0]
    336a:	4398      	bics	r0, r3
    336c:	6008      	str	r0, [r1, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    336e:	6820      	ldr	r0, [r4, #0]
    3370:	4643      	mov	r3, r8
    3372:	6801      	ldr	r1, [r0, #0]
    3374:	015b      	lsls	r3, r3, #5
    3376:	468c      	mov	ip, r1
    3378:	4463      	add	r3, ip
    337a:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    337c:	1983      	adds	r3, r0, r6
    337e:	33ae      	adds	r3, #174	; 0xae
    3380:	781b      	ldrb	r3, [r3, #0]
    3382:	071b      	lsls	r3, r3, #28
    3384:	d400      	bmi.n	3388 <USB_Handler+0x218>
    3386:	e735      	b.n	31f4 <USB_Handler+0x84>
				pipe_callback_para.pipe_num = pipe_int;
    3388:	4909      	ldr	r1, [pc, #36]	; (33b0 <USB_Handler+0x240>)
    338a:	700e      	strb	r6, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    338c:	0136      	lsls	r6, r6, #4
    338e:	1986      	adds	r6, r0, r6
    3390:	6b33      	ldr	r3, [r6, #48]	; 0x30
    3392:	4798      	blx	r3
    3394:	e72e      	b.n	31f4 <USB_Handler+0x84>
    3396:	46c0      	nop			; (mov r8, r8)
    3398:	20000e48 	.word	0x20000e48
    339c:	20001298 	.word	0x20001298
    33a0:	00024708 	.word	0x00024708
    33a4:	20000e4c 	.word	0x20000e4c
    33a8:	0001d135 	.word	0x0001d135
    33ac:	20000e58 	.word	0x20000e58
    33b0:	20000e5c 	.word	0x20000e5c
		if (flags & USB_HOST_INTFLAG_HSOF) {
    33b4:	2304      	movs	r3, #4
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    33b6:	8bae      	ldrh	r6, [r5, #28]
    33b8:	b2b6      	uxth	r6, r6
		if (flags & USB_HOST_INTFLAG_HSOF) {
    33ba:	4233      	tst	r3, r6
    33bc:	d100      	bne.n	33c0 <USB_Handler+0x250>
    33be:	e080      	b.n	34c2 <USB_Handler+0x352>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    33c0:	83ab      	strh	r3, [r5, #28]
    33c2:	4bc5      	ldr	r3, [pc, #788]	; (36d8 <USB_Handler+0x568>)
    33c4:	681b      	ldr	r3, [r3, #0]
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    33c6:	079a      	lsls	r2, r3, #30
    33c8:	d511      	bpl.n	33ee <USB_Handler+0x27e>
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    33ca:	2090      	movs	r0, #144	; 0x90
    33cc:	6839      	ldr	r1, [r7, #0]
    33ce:	0040      	lsls	r0, r0, #1
    33d0:	5c0a      	ldrb	r2, [r1, r0]
    33d2:	0692      	lsls	r2, r2, #26
    33d4:	0f52      	lsrs	r2, r2, #29
    33d6:	2a03      	cmp	r2, #3
    33d8:	d109      	bne.n	33ee <USB_Handler+0x27e>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
    33da:	5c0a      	ldrb	r2, [r1, r0]
    33dc:	0792      	lsls	r2, r2, #30
    33de:	0f92      	lsrs	r2, r2, #30
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    33e0:	2a01      	cmp	r2, #1
    33e2:	d104      	bne.n	33ee <USB_Handler+0x27e>
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    33e4:	3811      	subs	r0, #17
    33e6:	3224      	adds	r2, #36	; 0x24
    33e8:	38ff      	subs	r0, #255	; 0xff
    33ea:	32ff      	adds	r2, #255	; 0xff
    33ec:	5488      	strb	r0, [r1, r2]
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    33ee:	075a      	lsls	r2, r3, #29
    33f0:	d511      	bpl.n	3416 <USB_Handler+0x2a6>
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    33f2:	20a0      	movs	r0, #160	; 0xa0
    33f4:	6839      	ldr	r1, [r7, #0]
    33f6:	0040      	lsls	r0, r0, #1
    33f8:	5c0a      	ldrb	r2, [r1, r0]
    33fa:	0692      	lsls	r2, r2, #26
    33fc:	0f52      	lsrs	r2, r2, #29
    33fe:	2a03      	cmp	r2, #3
    3400:	d109      	bne.n	3416 <USB_Handler+0x2a6>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
    3402:	5c0a      	ldrb	r2, [r1, r0]
    3404:	0792      	lsls	r2, r2, #30
    3406:	0f92      	lsrs	r2, r2, #30
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    3408:	2a01      	cmp	r2, #1
    340a:	d104      	bne.n	3416 <USB_Handler+0x2a6>
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    340c:	3831      	subs	r0, #49	; 0x31
    340e:	3244      	adds	r2, #68	; 0x44
    3410:	38ff      	subs	r0, #255	; 0xff
    3412:	32ff      	adds	r2, #255	; 0xff
    3414:	5488      	strb	r0, [r1, r2]
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    3416:	071a      	lsls	r2, r3, #28
    3418:	d511      	bpl.n	343e <USB_Handler+0x2ce>
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    341a:	20b0      	movs	r0, #176	; 0xb0
    341c:	6839      	ldr	r1, [r7, #0]
    341e:	0040      	lsls	r0, r0, #1
    3420:	5c0a      	ldrb	r2, [r1, r0]
    3422:	0692      	lsls	r2, r2, #26
    3424:	0f52      	lsrs	r2, r2, #29
    3426:	2a03      	cmp	r2, #3
    3428:	d109      	bne.n	343e <USB_Handler+0x2ce>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
    342a:	5c0a      	ldrb	r2, [r1, r0]
    342c:	0792      	lsls	r2, r2, #30
    342e:	0f92      	lsrs	r2, r2, #30
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    3430:	2a01      	cmp	r2, #1
    3432:	d104      	bne.n	343e <USB_Handler+0x2ce>
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    3434:	3851      	subs	r0, #81	; 0x51
    3436:	3264      	adds	r2, #100	; 0x64
    3438:	38ff      	subs	r0, #255	; 0xff
    343a:	32ff      	adds	r2, #255	; 0xff
    343c:	5488      	strb	r0, [r1, r2]
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    343e:	2110      	movs	r1, #16
    3440:	4219      	tst	r1, r3
    3442:	d00f      	beq.n	3464 <USB_Handler+0x2f4>
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    3444:	25c0      	movs	r5, #192	; 0xc0
    3446:	6838      	ldr	r0, [r7, #0]
    3448:	006d      	lsls	r5, r5, #1
    344a:	5d42      	ldrb	r2, [r0, r5]
    344c:	0692      	lsls	r2, r2, #26
    344e:	0f52      	lsrs	r2, r2, #29
    3450:	2a03      	cmp	r2, #3
    3452:	d107      	bne.n	3464 <USB_Handler+0x2f4>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
    3454:	5d42      	ldrb	r2, [r0, r5]
    3456:	0792      	lsls	r2, r2, #30
    3458:	0f92      	lsrs	r2, r2, #30
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    345a:	2a01      	cmp	r2, #1
    345c:	d102      	bne.n	3464 <USB_Handler+0x2f4>
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    345e:	3284      	adds	r2, #132	; 0x84
    3460:	32ff      	adds	r2, #255	; 0xff
    3462:	5481      	strb	r1, [r0, r2]
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    3464:	069a      	lsls	r2, r3, #26
    3466:	d511      	bpl.n	348c <USB_Handler+0x31c>
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    3468:	20d0      	movs	r0, #208	; 0xd0
    346a:	6839      	ldr	r1, [r7, #0]
    346c:	0040      	lsls	r0, r0, #1
    346e:	5c0a      	ldrb	r2, [r1, r0]
    3470:	0692      	lsls	r2, r2, #26
    3472:	0f52      	lsrs	r2, r2, #29
    3474:	2a03      	cmp	r2, #3
    3476:	d109      	bne.n	348c <USB_Handler+0x31c>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
    3478:	5c0a      	ldrb	r2, [r1, r0]
    347a:	0792      	lsls	r2, r2, #30
    347c:	0f92      	lsrs	r2, r2, #30
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    347e:	2a01      	cmp	r2, #1
    3480:	d104      	bne.n	348c <USB_Handler+0x31c>
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    3482:	3891      	subs	r0, #145	; 0x91
    3484:	32a4      	adds	r2, #164	; 0xa4
    3486:	38ff      	subs	r0, #255	; 0xff
    3488:	32ff      	adds	r2, #255	; 0xff
    348a:	5488      	strb	r0, [r1, r2]
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    348c:	065a      	lsls	r2, r3, #25
    348e:	d511      	bpl.n	34b4 <USB_Handler+0x344>
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    3490:	20e0      	movs	r0, #224	; 0xe0
    3492:	6839      	ldr	r1, [r7, #0]
    3494:	0040      	lsls	r0, r0, #1
    3496:	5c0a      	ldrb	r2, [r1, r0]
    3498:	0692      	lsls	r2, r2, #26
    349a:	0f52      	lsrs	r2, r2, #29
    349c:	2a03      	cmp	r2, #3
    349e:	d109      	bne.n	34b4 <USB_Handler+0x344>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
    34a0:	5c0a      	ldrb	r2, [r1, r0]
    34a2:	0792      	lsls	r2, r2, #30
    34a4:	0f92      	lsrs	r2, r2, #30
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    34a6:	2a01      	cmp	r2, #1
    34a8:	d104      	bne.n	34b4 <USB_Handler+0x344>
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    34aa:	38b1      	subs	r0, #177	; 0xb1
    34ac:	32c4      	adds	r2, #196	; 0xc4
    34ae:	38ff      	subs	r0, #255	; 0xff
    34b0:	32ff      	adds	r2, #255	; 0xff
    34b2:	5488      	strb	r0, [r1, r2]
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    34b4:	061b      	lsls	r3, r3, #24
    34b6:	d460      	bmi.n	357a <USB_Handler+0x40a>
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    34b8:	23a5      	movs	r3, #165	; 0xa5
    34ba:	5cfb      	ldrb	r3, [r7, r3]
    34bc:	07db      	lsls	r3, r3, #31
    34be:	d500      	bpl.n	34c2 <USB_Handler+0x352>
    34c0:	e0aa      	b.n	3618 <USB_Handler+0x4a8>
		if (flags & USB_HOST_INTFLAG_RST) {
    34c2:	2308      	movs	r3, #8
    34c4:	4233      	tst	r3, r6
    34c6:	d00a      	beq.n	34de <USB_Handler+0x36e>
			host_pipe_job_busy_status = 0;
    34c8:	2100      	movs	r1, #0
    34ca:	4a83      	ldr	r2, [pc, #524]	; (36d8 <USB_Handler+0x568>)
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    34cc:	6820      	ldr	r0, [r4, #0]
			host_pipe_job_busy_status = 0;
    34ce:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    34d0:	6802      	ldr	r2, [r0, #0]
    34d2:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    34d4:	339d      	adds	r3, #157	; 0x9d
    34d6:	5cc3      	ldrb	r3, [r0, r3]
    34d8:	079b      	lsls	r3, r3, #30
    34da:	d500      	bpl.n	34de <USB_Handler+0x36e>
    34dc:	e099      	b.n	3612 <USB_Handler+0x4a2>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    34de:	2340      	movs	r3, #64	; 0x40
    34e0:	4233      	tst	r3, r6
    34e2:	d007      	beq.n	34f4 <USB_Handler+0x384>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    34e4:	6820      	ldr	r0, [r4, #0]
    34e6:	6802      	ldr	r2, [r0, #0]
    34e8:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    34ea:	3365      	adds	r3, #101	; 0x65
    34ec:	5cc3      	ldrb	r3, [r0, r3]
    34ee:	06db      	lsls	r3, r3, #27
    34f0:	d500      	bpl.n	34f4 <USB_Handler+0x384>
    34f2:	e08b      	b.n	360c <USB_Handler+0x49c>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    34f4:	2320      	movs	r3, #32
    34f6:	4233      	tst	r3, r6
    34f8:	d006      	beq.n	3508 <USB_Handler+0x398>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    34fa:	6820      	ldr	r0, [r4, #0]
    34fc:	6802      	ldr	r2, [r0, #0]
    34fe:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    3500:	3385      	adds	r3, #133	; 0x85
    3502:	5cc3      	ldrb	r3, [r0, r3]
    3504:	071b      	lsls	r3, r3, #28
    3506:	d47e      	bmi.n	3606 <USB_Handler+0x496>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    3508:	2310      	movs	r3, #16
    350a:	4233      	tst	r3, r6
    350c:	d006      	beq.n	351c <USB_Handler+0x3ac>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    350e:	6820      	ldr	r0, [r4, #0]
    3510:	6802      	ldr	r2, [r0, #0]
    3512:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    3514:	3395      	adds	r3, #149	; 0x95
    3516:	5cc3      	ldrb	r3, [r0, r3]
    3518:	075b      	lsls	r3, r3, #29
    351a:	d471      	bmi.n	3600 <USB_Handler+0x490>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    351c:	2380      	movs	r3, #128	; 0x80
    351e:	4233      	tst	r3, r6
    3520:	d009      	beq.n	3536 <USB_Handler+0x3c6>
			host_pipe_job_busy_status = 0;
    3522:	2100      	movs	r1, #0
    3524:	4a6c      	ldr	r2, [pc, #432]	; (36d8 <USB_Handler+0x568>)
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    3526:	6820      	ldr	r0, [r4, #0]
			host_pipe_job_busy_status = 0;
    3528:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    352a:	6802      	ldr	r2, [r0, #0]
    352c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    352e:	3325      	adds	r3, #37	; 0x25
    3530:	5cc3      	ldrb	r3, [r0, r3]
    3532:	069b      	lsls	r3, r3, #26
    3534:	d461      	bmi.n	35fa <USB_Handler+0x48a>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    3536:	2380      	movs	r3, #128	; 0x80
    3538:	005b      	lsls	r3, r3, #1
    353a:	421e      	tst	r6, r3
    353c:	d009      	beq.n	3552 <USB_Handler+0x3e2>
			host_pipe_job_busy_status = 0;
    353e:	2100      	movs	r1, #0
    3540:	4a65      	ldr	r2, [pc, #404]	; (36d8 <USB_Handler+0x568>)
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    3542:	6820      	ldr	r0, [r4, #0]
			host_pipe_job_busy_status = 0;
    3544:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    3546:	6802      	ldr	r2, [r0, #0]
    3548:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    354a:	3b5b      	subs	r3, #91	; 0x5b
    354c:	5cc3      	ldrb	r3, [r0, r3]
    354e:	065b      	lsls	r3, r3, #25
    3550:	d450      	bmi.n	35f4 <USB_Handler+0x484>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    3552:	2380      	movs	r3, #128	; 0x80
    3554:	009b      	lsls	r3, r3, #2
    3556:	421e      	tst	r6, r3
    3558:	d100      	bne.n	355c <USB_Handler+0x3ec>
    355a:	e64b      	b.n	31f4 <USB_Handler+0x84>
			host_pipe_job_busy_status = 0;
    355c:	2100      	movs	r1, #0
    355e:	4a5e      	ldr	r2, [pc, #376]	; (36d8 <USB_Handler+0x568>)
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    3560:	6820      	ldr	r0, [r4, #0]
			host_pipe_job_busy_status = 0;
    3562:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    3564:	6802      	ldr	r2, [r0, #0]
    3566:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    3568:	3b5c      	subs	r3, #92	; 0x5c
    356a:	3bff      	subs	r3, #255	; 0xff
    356c:	5cc3      	ldrb	r3, [r0, r3]
    356e:	2b7f      	cmp	r3, #127	; 0x7f
    3570:	d800      	bhi.n	3574 <USB_Handler+0x404>
    3572:	e63f      	b.n	31f4 <USB_Handler+0x84>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    3574:	6a03      	ldr	r3, [r0, #32]
    3576:	4798      	blx	r3
    3578:	e63c      	b.n	31f4 <USB_Handler+0x84>
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    357a:	21f0      	movs	r1, #240	; 0xf0
    357c:	683a      	ldr	r2, [r7, #0]
    357e:	0049      	lsls	r1, r1, #1
    3580:	5c53      	ldrb	r3, [r2, r1]
    3582:	069b      	lsls	r3, r3, #26
    3584:	0f5b      	lsrs	r3, r3, #29
    3586:	2b03      	cmp	r3, #3
    3588:	d196      	bne.n	34b8 <USB_Handler+0x348>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
    358a:	5c53      	ldrb	r3, [r2, r1]
    358c:	079b      	lsls	r3, r3, #30
    358e:	0f9b      	lsrs	r3, r3, #30
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    3590:	2b01      	cmp	r3, #1
    3592:	d191      	bne.n	34b8 <USB_Handler+0x348>
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    3594:	39d1      	subs	r1, #209	; 0xd1
    3596:	33e4      	adds	r3, #228	; 0xe4
    3598:	39ff      	subs	r1, #255	; 0xff
    359a:	33ff      	adds	r3, #255	; 0xff
    359c:	54d1      	strb	r1, [r2, r3]
    359e:	e78b      	b.n	34b8 <USB_Handler+0x348>
				pipe_callback_para.pipe_num = pipe_int;
    35a0:	494e      	ldr	r1, [pc, #312]	; (36dc <USB_Handler+0x56c>)
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    35a2:	484f      	ldr	r0, [pc, #316]	; (36e0 <USB_Handler+0x570>)
				pipe_callback_para.pipe_num = pipe_int;
    35a4:	700e      	strb	r6, [r1, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    35a6:	683a      	ldr	r2, [r7, #0]
    35a8:	5c9b      	ldrb	r3, [r3, r2]
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    35aa:	0172      	lsls	r2, r6, #5
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    35ac:	079b      	lsls	r3, r3, #30
    35ae:	0f9b      	lsrs	r3, r3, #30
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    35b0:	1882      	adds	r2, r0, r2
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    35b2:	2b01      	cmp	r3, #1
    35b4:	d100      	bne.n	35b8 <USB_Handler+0x448>
    35b6:	e109      	b.n	37cc <USB_Handler+0x65c>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    35b8:	6853      	ldr	r3, [r2, #4]
    35ba:	011b      	lsls	r3, r3, #4
    35bc:	0c9b      	lsrs	r3, r3, #18
    35be:	804b      	strh	r3, [r1, #2]
    35c0:	b298      	uxth	r0, r3
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    35c2:	6853      	ldr	r3, [r2, #4]
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    35c4:	4682      	mov	sl, r0
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    35c6:	049b      	lsls	r3, r3, #18
    35c8:	0c9b      	lsrs	r3, r3, #18
    35ca:	808b      	strh	r3, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    35cc:	6853      	ldr	r3, [r2, #4]
    35ce:	4699      	mov	r9, r3
    35d0:	4648      	mov	r0, r9
    35d2:	4b44      	ldr	r3, [pc, #272]	; (36e4 <USB_Handler+0x574>)
    35d4:	4018      	ands	r0, r3
					if (0 == pipe_callback_para.transfered_size) {
    35d6:	4653      	mov	r3, sl
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    35d8:	6050      	str	r0, [r2, #4]
					if (0 == pipe_callback_para.transfered_size) {
    35da:	2b00      	cmp	r3, #0
    35dc:	d103      	bne.n	35e6 <USB_Handler+0x476>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    35de:	6853      	ldr	r3, [r2, #4]
    35e0:	049b      	lsls	r3, r3, #18
    35e2:	0c9b      	lsrs	r3, r3, #18
    35e4:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    35e6:	1cb3      	adds	r3, r6, #2
    35e8:	011b      	lsls	r3, r3, #4
    35ea:	18fb      	adds	r3, r7, r3
    35ec:	685b      	ldr	r3, [r3, #4]
    35ee:	0038      	movs	r0, r7
    35f0:	4798      	blx	r3
    35f2:	e662      	b.n	32ba <USB_Handler+0x14a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    35f4:	69c3      	ldr	r3, [r0, #28]
    35f6:	4798      	blx	r3
    35f8:	e7ab      	b.n	3552 <USB_Handler+0x3e2>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    35fa:	6983      	ldr	r3, [r0, #24]
    35fc:	4798      	blx	r3
    35fe:	e79a      	b.n	3536 <USB_Handler+0x3c6>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    3600:	68c3      	ldr	r3, [r0, #12]
    3602:	4798      	blx	r3
    3604:	e78a      	b.n	351c <USB_Handler+0x3ac>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    3606:	6903      	ldr	r3, [r0, #16]
    3608:	4798      	blx	r3
    360a:	e77d      	b.n	3508 <USB_Handler+0x398>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    360c:	6943      	ldr	r3, [r0, #20]
    360e:	4798      	blx	r3
    3610:	e770      	b.n	34f4 <USB_Handler+0x384>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    3612:	6883      	ldr	r3, [r0, #8]
    3614:	4798      	blx	r3
    3616:	e762      	b.n	34de <USB_Handler+0x36e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    3618:	687b      	ldr	r3, [r7, #4]
    361a:	0038      	movs	r0, r7
    361c:	4798      	blx	r3
    361e:	e750      	b.n	34c2 <USB_Handler+0x352>
				pipe_callback_para.pipe_num = pipe_int;
    3620:	4a2e      	ldr	r2, [pc, #184]	; (36dc <USB_Handler+0x56c>)
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3622:	4b2f      	ldr	r3, [pc, #188]	; (36e0 <USB_Handler+0x570>)
    3624:	0171      	lsls	r1, r6, #5
				pipe_callback_para.pipe_num = pipe_int;
    3626:	7016      	strb	r6, [r2, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3628:	185b      	adds	r3, r3, r1
    362a:	685b      	ldr	r3, [r3, #4]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    362c:	2100      	movs	r1, #0
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    362e:	011b      	lsls	r3, r3, #4
    3630:	0c9b      	lsrs	r3, r3, #18
    3632:	8053      	strh	r3, [r2, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    3634:	0133      	lsls	r3, r6, #4
    3636:	18c3      	adds	r3, r0, r3
    3638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    363a:	4798      	blx	r3
    363c:	e68d      	b.n	335a <USB_Handler+0x1ea>
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    363e:	4b28      	ldr	r3, [pc, #160]	; (36e0 <USB_Handler+0x570>)
    3640:	0172      	lsls	r2, r6, #5
    3642:	189b      	adds	r3, r3, r2
    3644:	89da      	ldrh	r2, [r3, #14]
    3646:	231f      	movs	r3, #31
				pipe_callback_para.pipe_num = pipe_int;
    3648:	4924      	ldr	r1, [pc, #144]	; (36dc <USB_Handler+0x56c>)
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    364a:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    364c:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    364e:	0133      	lsls	r3, r6, #4
    3650:	18c3      	adds	r3, r0, r3
				pipe_callback_para.pipe_num = pipe_int;
    3652:	700e      	strb	r6, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    3654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3656:	4798      	blx	r3
    3658:	e669      	b.n	332e <USB_Handler+0x1be>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    365a:	464a      	mov	r2, r9
    365c:	5dd2      	ldrb	r2, [r2, r7]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.bit.CRCERR) {
    365e:	4820      	ldr	r0, [pc, #128]	; (36e0 <USB_Handler+0x570>)
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    3660:	0792      	lsls	r2, r2, #30
    3662:	0f92      	lsrs	r2, r2, #30
    3664:	4692      	mov	sl, r2
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    3666:	2a01      	cmp	r2, #1
    3668:	d100      	bne.n	366c <USB_Handler+0x4fc>
    366a:	e0f3      	b.n	3854 <USB_Handler+0x6e4>
    366c:	0172      	lsls	r2, r6, #5
    366e:	e636      	b.n	32de <USB_Handler+0x16e>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN) {
    3670:	5dcb      	ldrb	r3, [r1, r7]
    3672:	079b      	lsls	r3, r3, #30
    3674:	0f9b      	lsrs	r3, r3, #30
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    3676:	2b01      	cmp	r3, #1
    3678:	d000      	beq.n	367c <USB_Handler+0x50c>
    367a:	e639      	b.n	32f0 <USB_Handler+0x180>
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    367c:	2300      	movs	r3, #0
    367e:	7293      	strb	r3, [r2, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3680:	4663      	mov	r3, ip
    3682:	2204      	movs	r2, #4
    3684:	681b      	ldr	r3, [r3, #0]
    3686:	185b      	adds	r3, r3, r1
    3688:	71da      	strb	r2, [r3, #7]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSSET.reg = USB_HOST_PSTATUS_PFREEZE;
    368a:	4663      	mov	r3, ip
    368c:	681b      	ldr	r3, [r3, #0]
    368e:	1859      	adds	r1, r3, r1
    3690:	2310      	movs	r3, #16
    3692:	714b      	strb	r3, [r1, #5]
    3694:	e635      	b.n	3302 <USB_Handler+0x192>
    3696:	002a      	movs	r2, r5
    3698:	4645      	mov	r5, r8
    369a:	4690      	mov	r8, r2
    369c:	015a      	lsls	r2, r3, #5
    369e:	18ad      	adds	r5, r5, r2
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    36a0:	2208      	movs	r2, #8
    36a2:	2040      	movs	r0, #64	; 0x40
    36a4:	32ff      	adds	r2, #255	; 0xff
    36a6:	5cac      	ldrb	r4, [r5, r2]
    36a8:	464f      	mov	r7, r9
    36aa:	4220      	tst	r0, r4
    36ac:	d100      	bne.n	36b0 <USB_Handler+0x540>
    36ae:	e09a      	b.n	37e6 <USB_Handler+0x676>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    36b0:	54a8      	strb	r0, [r5, r2]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    36b2:	4640      	mov	r0, r8
    36b4:	3a88      	subs	r2, #136	; 0x88
    36b6:	3aff      	subs	r2, #255	; 0xff
    36b8:	4302      	orrs	r2, r0
    36ba:	480b      	ldr	r0, [pc, #44]	; (36e8 <USB_Handler+0x578>)
    36bc:	7182      	strb	r2, [r0, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    36be:	2260      	movs	r2, #96	; 0x60
    36c0:	420a      	tst	r2, r1
    36c2:	d100      	bne.n	36c6 <USB_Handler+0x556>
    36c4:	e596      	b.n	31f4 <USB_Handler+0x84>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    36c6:	011b      	lsls	r3, r3, #4
    36c8:	18fb      	adds	r3, r7, r3
    36ca:	33e0      	adds	r3, #224	; 0xe0
    36cc:	681b      	ldr	r3, [r3, #0]
    36ce:	4906      	ldr	r1, [pc, #24]	; (36e8 <USB_Handler+0x578>)
    36d0:	0038      	movs	r0, r7
    36d2:	4798      	blx	r3
    36d4:	e58e      	b.n	31f4 <USB_Handler+0x84>
    36d6:	46c0      	nop			; (mov r8, r8)
    36d8:	20000e58 	.word	0x20000e58
    36dc:	20000e5c 	.word	0x20000e5c
    36e0:	20001298 	.word	0x20001298
    36e4:	f0003fff 	.word	0xf0003fff
    36e8:	20000e50 	.word	0x20000e50
    36ec:	464f      	mov	r7, r9
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    36ee:	9a00      	ldr	r2, [sp, #0]
    36f0:	7010      	strb	r0, [r2, #0]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    36f2:	18fa      	adds	r2, r7, r3
    36f4:	3261      	adds	r2, #97	; 0x61
    36f6:	32ff      	adds	r2, #255	; 0xff
    36f8:	7812      	ldrb	r2, [r2, #0]
    36fa:	4210      	tst	r0, r2
    36fc:	d100      	bne.n	3700 <USB_Handler+0x590>
    36fe:	e579      	b.n	31f4 <USB_Handler+0x84>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    3700:	4a6e      	ldr	r2, [pc, #440]	; (38bc <USB_Handler+0x74c>)
    3702:	0159      	lsls	r1, r3, #5
    3704:	1852      	adds	r2, r2, r1
    3706:	6852      	ldr	r2, [r2, #4]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    3708:	011b      	lsls	r3, r3, #4
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    370a:	496d      	ldr	r1, [pc, #436]	; (38c0 <USB_Handler+0x750>)
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    370c:	18fb      	adds	r3, r7, r3
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    370e:	0492      	lsls	r2, r2, #18
    3710:	0c92      	lsrs	r2, r2, #18
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    3712:	33dc      	adds	r3, #220	; 0xdc
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    3714:	800a      	strh	r2, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    3716:	681b      	ldr	r3, [r3, #0]
    3718:	4648      	mov	r0, r9
    371a:	4798      	blx	r3
    371c:	e56a      	b.n	31f4 <USB_Handler+0x84>
    371e:	002a      	movs	r2, r5
    3720:	4645      	mov	r5, r8
    3722:	4690      	mov	r8, r2
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    3724:	2208      	movs	r2, #8
    3726:	2402      	movs	r4, #2
    3728:	0158      	lsls	r0, r3, #5
    372a:	182d      	adds	r5, r5, r0
    372c:	32ff      	adds	r2, #255	; 0xff
    372e:	5cae      	ldrb	r6, [r5, r2]
    3730:	464f      	mov	r7, r9
    3732:	4234      	tst	r4, r6
    3734:	d061      	beq.n	37fa <USB_Handler+0x68a>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    3736:	54ac      	strb	r4, [r5, r2]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    3738:	4645      	mov	r5, r8
    373a:	3a88      	subs	r2, #136	; 0x88
    373c:	4c60      	ldr	r4, [pc, #384]	; (38c0 <USB_Handler+0x750>)
    373e:	3aff      	subs	r2, #255	; 0xff
    3740:	432a      	orrs	r2, r5
    3742:	71a2      	strb	r2, [r4, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    3744:	4a5d      	ldr	r2, [pc, #372]	; (38bc <USB_Handler+0x74c>)
    3746:	1810      	adds	r0, r2, r0
    3748:	6942      	ldr	r2, [r0, #20]
    374a:	0492      	lsls	r2, r2, #18
    374c:	0c92      	lsrs	r2, r2, #18
    374e:	8062      	strh	r2, [r4, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    3750:	078a      	lsls	r2, r1, #30
    3752:	d100      	bne.n	3756 <USB_Handler+0x5e6>
    3754:	e54e      	b.n	31f4 <USB_Handler+0x84>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    3756:	330d      	adds	r3, #13
    3758:	011b      	lsls	r3, r3, #4
    375a:	18fb      	adds	r3, r7, r3
    375c:	685b      	ldr	r3, [r3, #4]
    375e:	4958      	ldr	r1, [pc, #352]	; (38c0 <USB_Handler+0x750>)
    3760:	0038      	movs	r0, r7
    3762:	4798      	blx	r3
    3764:	e546      	b.n	31f4 <USB_Handler+0x84>
    3766:	003a      	movs	r2, r7
    3768:	0028      	movs	r0, r5
    376a:	464f      	mov	r7, r9
    376c:	4645      	mov	r5, r8
    376e:	4691      	mov	r9, r2
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    3770:	2208      	movs	r2, #8
    3772:	2408      	movs	r4, #8
    3774:	4680      	mov	r8, r0
    3776:	0158      	lsls	r0, r3, #5
    3778:	182d      	adds	r5, r5, r0
    377a:	32ff      	adds	r2, #255	; 0xff
    377c:	5cae      	ldrb	r6, [r5, r2]
    377e:	4234      	tst	r4, r6
    3780:	d04e      	beq.n	3820 <USB_Handler+0x6b0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    3782:	54ac      	strb	r4, [r5, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    3784:	4a4d      	ldr	r2, [pc, #308]	; (38bc <USB_Handler+0x74c>)
    3786:	1810      	adds	r0, r2, r0
    3788:	2202      	movs	r2, #2
    378a:	7e84      	ldrb	r4, [r0, #26]
    378c:	4222      	tst	r2, r4
    378e:	d002      	beq.n	3796 <USB_Handler+0x626>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    3790:	7e84      	ldrb	r4, [r0, #26]
    3792:	4394      	bics	r4, r2
    3794:	7684      	strb	r4, [r0, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    3796:	2280      	movs	r2, #128	; 0x80
    3798:	4640      	mov	r0, r8
    379a:	4252      	negs	r2, r2
    379c:	4302      	orrs	r2, r0
    379e:	4848      	ldr	r0, [pc, #288]	; (38c0 <USB_Handler+0x750>)
    37a0:	7182      	strb	r2, [r0, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    37a2:	6838      	ldr	r0, [r7, #0]
    37a4:	464a      	mov	r2, r9
    37a6:	4684      	mov	ip, r0
    37a8:	0152      	lsls	r2, r2, #5
    37aa:	4462      	add	r2, ip
    37ac:	79d2      	ldrb	r2, [r2, #7]
    37ae:	0792      	lsls	r2, r2, #30
    37b0:	d500      	bpl.n	37b4 <USB_Handler+0x644>
    37b2:	e51f      	b.n	31f4 <USB_Handler+0x84>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    37b4:	220c      	movs	r2, #12
    37b6:	420a      	tst	r2, r1
    37b8:	d100      	bne.n	37bc <USB_Handler+0x64c>
    37ba:	e51b      	b.n	31f4 <USB_Handler+0x84>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    37bc:	011b      	lsls	r3, r3, #4
    37be:	18fb      	adds	r3, r7, r3
    37c0:	33d8      	adds	r3, #216	; 0xd8
    37c2:	681b      	ldr	r3, [r3, #0]
    37c4:	493e      	ldr	r1, [pc, #248]	; (38c0 <USB_Handler+0x750>)
    37c6:	0038      	movs	r0, r7
    37c8:	4798      	blx	r3
    37ca:	e513      	b.n	31f4 <USB_Handler+0x84>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    37cc:	6853      	ldr	r3, [r2, #4]
    37ce:	049b      	lsls	r3, r3, #18
    37d0:	0c9b      	lsrs	r3, r3, #18
    37d2:	804b      	strh	r3, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    37d4:	6853      	ldr	r3, [r2, #4]
    37d6:	011b      	lsls	r3, r3, #4
    37d8:	0c9b      	lsrs	r3, r3, #18
    37da:	808b      	strh	r3, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    37dc:	6853      	ldr	r3, [r2, #4]
    37de:	0b9b      	lsrs	r3, r3, #14
    37e0:	039b      	lsls	r3, r3, #14
    37e2:	6053      	str	r3, [r2, #4]
    37e4:	e6ff      	b.n	35e6 <USB_Handler+0x476>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    37e6:	2020      	movs	r0, #32
    37e8:	5cac      	ldrb	r4, [r5, r2]
    37ea:	4220      	tst	r0, r4
    37ec:	d100      	bne.n	37f0 <USB_Handler+0x680>
    37ee:	e766      	b.n	36be <USB_Handler+0x54e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    37f0:	54a8      	strb	r0, [r5, r2]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    37f2:	4640      	mov	r0, r8
    37f4:	4a32      	ldr	r2, [pc, #200]	; (38c0 <USB_Handler+0x750>)
    37f6:	7190      	strb	r0, [r2, #6]
    37f8:	e761      	b.n	36be <USB_Handler+0x54e>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    37fa:	5cac      	ldrb	r4, [r5, r2]
    37fc:	07e4      	lsls	r4, r4, #31
    37fe:	d5a7      	bpl.n	3750 <USB_Handler+0x5e0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    3800:	4664      	mov	r4, ip
    3802:	54ac      	strb	r4, [r5, r2]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    3804:	4642      	mov	r2, r8
    3806:	4c2e      	ldr	r4, [pc, #184]	; (38c0 <USB_Handler+0x750>)
    3808:	71a2      	strb	r2, [r4, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    380a:	4a2c      	ldr	r2, [pc, #176]	; (38bc <USB_Handler+0x74c>)
    380c:	1810      	adds	r0, r2, r0
    380e:	6842      	ldr	r2, [r0, #4]
    3810:	0492      	lsls	r2, r2, #18
    3812:	0c92      	lsrs	r2, r2, #18
    3814:	8022      	strh	r2, [r4, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    3816:	6842      	ldr	r2, [r0, #4]
    3818:	0112      	lsls	r2, r2, #4
    381a:	0c92      	lsrs	r2, r2, #18
    381c:	80a2      	strh	r2, [r4, #4]
    381e:	e797      	b.n	3750 <USB_Handler+0x5e0>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    3820:	2404      	movs	r4, #4
    3822:	5cae      	ldrb	r6, [r5, r2]
    3824:	4234      	tst	r4, r6
    3826:	d0c5      	beq.n	37b4 <USB_Handler+0x644>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    3828:	54ac      	strb	r4, [r5, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    382a:	4a24      	ldr	r2, [pc, #144]	; (38bc <USB_Handler+0x74c>)
    382c:	3c02      	subs	r4, #2
    382e:	1810      	adds	r0, r2, r0
    3830:	7a82      	ldrb	r2, [r0, #10]
    3832:	4214      	tst	r4, r2
    3834:	d002      	beq.n	383c <USB_Handler+0x6cc>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    3836:	7a82      	ldrb	r2, [r0, #10]
    3838:	43a2      	bics	r2, r4
    383a:	7282      	strb	r2, [r0, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    383c:	4640      	mov	r0, r8
    383e:	4a20      	ldr	r2, [pc, #128]	; (38c0 <USB_Handler+0x750>)
    3840:	7190      	strb	r0, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    3842:	6838      	ldr	r0, [r7, #0]
    3844:	464a      	mov	r2, r9
    3846:	4684      	mov	ip, r0
    3848:	0152      	lsls	r2, r2, #5
    384a:	4462      	add	r2, ip
    384c:	79d2      	ldrb	r2, [r2, #7]
    384e:	07d2      	lsls	r2, r2, #31
    3850:	d5b0      	bpl.n	37b4 <USB_Handler+0x644>
    3852:	e4cf      	b.n	31f4 <USB_Handler+0x84>
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.bit.CRCERR) {
    3854:	0172      	lsls	r2, r6, #5
    3856:	1881      	adds	r1, r0, r2
    3858:	000b      	movs	r3, r1
    385a:	2108      	movs	r1, #8
    385c:	469b      	mov	fp, r3
    385e:	9301      	str	r3, [sp, #4]
    3860:	4459      	add	r1, fp
    3862:	7889      	ldrb	r1, [r1, #2]
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    3864:	07c9      	lsls	r1, r1, #31
    3866:	d400      	bmi.n	386a <USB_Handler+0x6fa>
    3868:	e539      	b.n	32de <USB_Handler+0x16e>
				host_pipe_job_busy_status &= ~(1 << pipe_int);
    386a:	4652      	mov	r2, sl
    386c:	40b2      	lsls	r2, r6
    386e:	4815      	ldr	r0, [pc, #84]	; (38c4 <USB_Handler+0x754>)
    3870:	6801      	ldr	r1, [r0, #0]
    3872:	4391      	bics	r1, r2
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    3874:	2200      	movs	r2, #0
    3876:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3878:	4663      	mov	r3, ip
				host_pipe_job_busy_status &= ~(1 << pipe_int);
    387a:	6001      	str	r1, [r0, #0]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    387c:	681b      	ldr	r3, [r3, #0]
    387e:	444b      	add	r3, r9
    3880:	001a      	movs	r2, r3
    3882:	2304      	movs	r3, #4
    3884:	71d3      	strb	r3, [r2, #7]
				if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3886:	4663      	mov	r3, ip
    3888:	199a      	adds	r2, r3, r6
    388a:	32ae      	adds	r2, #174	; 0xae
    388c:	7812      	ldrb	r2, [r2, #0]
    388e:	9b00      	ldr	r3, [sp, #0]
    3890:	4213      	tst	r3, r2
    3892:	d100      	bne.n	3896 <USB_Handler+0x726>
    3894:	e535      	b.n	3302 <USB_Handler+0x192>
					pipe_callback_para.pipe_error_status = USB_STATUS_PIPE_CRC16ER;
    3896:	2310      	movs	r3, #16
					pipe_callback_para.pipe_num = pipe_int;
    3898:	490b      	ldr	r1, [pc, #44]	; (38c8 <USB_Handler+0x758>)
							[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    389a:	4660      	mov	r0, ip
					pipe_callback_para.pipe_error_status = USB_STATUS_PIPE_CRC16ER;
    389c:	704b      	strb	r3, [r1, #1]
							[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    389e:	0133      	lsls	r3, r6, #4
    38a0:	4463      	add	r3, ip
					pipe_callback_para.pipe_num = pipe_int;
    38a2:	700e      	strb	r6, [r1, #0]
							[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    38a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    38a6:	4798      	blx	r3
    38a8:	e52b      	b.n	3302 <USB_Handler+0x192>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    38aa:	465b      	mov	r3, fp
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    38ac:	4652      	mov	r2, sl
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    38ae:	891b      	ldrh	r3, [r3, #8]
					device_callback_lpm_wakeup_enable =
    38b0:	4906      	ldr	r1, [pc, #24]	; (38cc <USB_Handler+0x75c>)
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    38b2:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    38b4:	4013      	ands	r3, r2
    38b6:	600b      	str	r3, [r1, #0]
    38b8:	e492      	b.n	31e0 <USB_Handler+0x70>
    38ba:	46c0      	nop			; (mov r8, r8)
    38bc:	20001298 	.word	0x20001298
    38c0:	20000e50 	.word	0x20000e50
    38c4:	20000e58 	.word	0x20000e58
    38c8:	20000e5c 	.word	0x20000e5c
    38cc:	20000e4c 	.word	0x20000e4c

000038d0 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    38d0:	2300      	movs	r3, #0
	module_config->run_in_standby = 1;
	module_config->source_generator = GCLK_GENERATOR_3;
    38d2:	2203      	movs	r2, #3
	module_config->select_host_mode = 0;
    38d4:	7003      	strb	r3, [r0, #0]
	module_config->run_in_standby = 1;
    38d6:	3301      	adds	r3, #1
    38d8:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_3;
    38da:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    38dc:	70c3      	strb	r3, [r0, #3]
}
    38de:	4770      	bx	lr

000038e0 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    38e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAML22
	host_pipe_job_busy_status = 0;
    38e2:	2300      	movs	r3, #0
{
    38e4:	46ce      	mov	lr, r9
    38e6:	4647      	mov	r7, r8
    38e8:	0004      	movs	r4, r0
    38ea:	0016      	movs	r6, r2
	host_pipe_job_busy_status = 0;
    38ec:	4a90      	ldr	r2, [pc, #576]	; (3b30 <usb_init+0x250>)
{
    38ee:	b580      	push	{r7, lr}
    38f0:	000d      	movs	r5, r1
	host_pipe_job_busy_status = 0;
    38f2:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    38f4:	6021      	str	r1, [r4, #0]
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
    38f6:	2101      	movs	r1, #1
	_usb_instances = module_inst;
    38f8:	4a8e      	ldr	r2, [pc, #568]	; (3b34 <usb_init+0x254>)
{
    38fa:	b083      	sub	sp, #12
	_usb_instances = module_inst;
    38fc:	6010      	str	r0, [r2, #0]
    38fe:	488e      	ldr	r0, [pc, #568]	; (3b38 <usb_init+0x258>)
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3900:	af01      	add	r7, sp, #4
    3902:	6982      	ldr	r2, [r0, #24]
    3904:	430a      	orrs	r2, r1
    3906:	6182      	str	r2, [r0, #24]
    3908:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    390a:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    390c:	3306      	adds	r3, #6
    390e:	4699      	mov	r9, r3
    3910:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    3912:	4b8a      	ldr	r3, [pc, #552]	; (3b3c <usb_init+0x25c>)
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3914:	70b9      	strb	r1, [r7, #2]
    3916:	2018      	movs	r0, #24
    3918:	0039      	movs	r1, r7
    391a:	4698      	mov	r8, r3
    391c:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    391e:	464b      	mov	r3, r9
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    3920:	0039      	movs	r1, r7
    3922:	2019      	movs	r0, #25
	pin_config.mux_position = MUX_PA25G_USB_DP;
    3924:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    3926:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    3928:	466a      	mov	r2, sp
    392a:	78b3      	ldrb	r3, [r6, #2]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    392c:	4669      	mov	r1, sp
	gclk_chan_config.source_generator = module_config->source_generator;
    392e:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    3930:	2004      	movs	r0, #4
    3932:	4b83      	ldr	r3, [pc, #524]	; (3b40 <usb_init+0x260>)
    3934:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    3936:	4b83      	ldr	r3, [pc, #524]	; (3b44 <usb_init+0x264>)
    3938:	2004      	movs	r0, #4
    393a:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    393c:	2201      	movs	r2, #1
    393e:	782b      	ldrb	r3, [r5, #0]
    3940:	4313      	orrs	r3, r2
    3942:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    3944:	78ab      	ldrb	r3, [r5, #2]
    3946:	07db      	lsls	r3, r3, #31
    3948:	d4fc      	bmi.n	3944 <usb_init+0x64>
		/* Sync wait */
	}

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    394a:	4b7f      	ldr	r3, [pc, #508]	; (3b48 <usb_init+0x268>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    394c:	681b      	ldr	r3, [r3, #0]
    394e:	0b5b      	lsrs	r3, r3, #13
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    3950:	43da      	mvns	r2, r3
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    3952:	06d2      	lsls	r2, r2, #27
    3954:	d100      	bne.n	3958 <usb_init+0x78>
    3956:	e0e9      	b.n	3b2c <usb_init+0x24c>
    3958:	211f      	movs	r1, #31
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    395a:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    395c:	487b      	ldr	r0, [pc, #492]	; (3b4c <usb_init+0x26c>)
    395e:	400b      	ands	r3, r1
    3960:	019b      	lsls	r3, r3, #6
    3962:	4002      	ands	r2, r0
    3964:	4313      	orrs	r3, r2
    3966:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    3968:	4b77      	ldr	r3, [pc, #476]	; (3b48 <usb_init+0x268>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    396a:	681b      	ldr	r3, [r3, #0]
    396c:	0c9b      	lsrs	r3, r3, #18
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    396e:	4019      	ands	r1, r3
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    3970:	291f      	cmp	r1, #31
    3972:	d100      	bne.n	3976 <usb_init+0x96>
    3974:	e0d8      	b.n	3b28 <usb_init+0x248>
    3976:	211f      	movs	r1, #31
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    3978:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    397a:	400b      	ands	r3, r1
    397c:	438a      	bics	r2, r1
    397e:	4313      	orrs	r3, r2
    3980:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    3982:	4b71      	ldr	r3, [pc, #452]	; (3b48 <usb_init+0x268>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    3984:	6819      	ldr	r1, [r3, #0]
    3986:	0dc9      	lsrs	r1, r1, #23
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    3988:	43cb      	mvns	r3, r1
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    398a:	075b      	lsls	r3, r3, #29
    398c:	d100      	bne.n	3990 <usb_init+0xb0>
    398e:	e0c9      	b.n	3b24 <usb_init+0x244>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    3990:	2207      	movs	r2, #7
    3992:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    3994:	400a      	ands	r2, r1
    3996:	496e      	ldr	r1, [pc, #440]	; (3b50 <usb_init+0x270>)
    3998:	0312      	lsls	r2, r2, #12
    399a:	400b      	ands	r3, r1
    399c:	4313      	orrs	r3, r2
    399e:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    39a0:	237f      	movs	r3, #127	; 0x7f
    39a2:	7829      	ldrb	r1, [r5, #0]
    39a4:	7832      	ldrb	r2, [r6, #0]
    39a6:	400b      	ands	r3, r1
    39a8:	01d2      	lsls	r2, r2, #7
    39aa:	4313      	orrs	r3, r2
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    39ac:	2201      	movs	r2, #1
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    39ae:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    39b0:	7871      	ldrb	r1, [r6, #1]
    39b2:	782b      	ldrb	r3, [r5, #0]
    39b4:	400a      	ands	r2, r1
    39b6:	2104      	movs	r1, #4
    39b8:	0092      	lsls	r2, r2, #2
    39ba:	438b      	bics	r3, r1
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    39bc:	4865      	ldr	r0, [pc, #404]	; (3b54 <usb_init+0x274>)
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    39be:	4313      	orrs	r3, r2
    39c0:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    39c2:	6268      	str	r0, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    39c4:	78f3      	ldrb	r3, [r6, #3]
    39c6:	2b01      	cmp	r3, #1
    39c8:	d100      	bne.n	39cc <usb_init+0xec>
    39ca:	e0a5      	b.n	3b18 <usb_init+0x238>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    39cc:	2b00      	cmp	r3, #0
    39ce:	d106      	bne.n	39de <usb_init+0xfe>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    39d0:	210c      	movs	r1, #12
    39d2:	6822      	ldr	r2, [r4, #0]
    39d4:	8913      	ldrh	r3, [r2, #8]
    39d6:	438b      	bics	r3, r1
    39d8:	2104      	movs	r1, #4
    39da:	430b      	orrs	r3, r1
    39dc:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    39de:	2780      	movs	r7, #128	; 0x80
    39e0:	007f      	lsls	r7, r7, #1
    39e2:	4e5d      	ldr	r6, [pc, #372]	; (3b58 <usb_init+0x278>)
    39e4:	003a      	movs	r2, r7
    39e6:	2100      	movs	r1, #0
    39e8:	47b0      	blx	r6
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAML22
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    39ea:	1d20      	adds	r0, r4, #4
    39ec:	2220      	movs	r2, #32
    39ee:	2100      	movs	r1, #0
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    39f0:	2500      	movs	r5, #0
    39f2:	47b0      	blx	r6
    39f4:	2380      	movs	r3, #128	; 0x80
		}
	};
	module_inst->host_registered_callback_mask = 0;
	module_inst->host_enabled_callback_mask = 0;
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    39f6:	0020      	movs	r0, r4
			module_inst->host_pipe_callback[i][j] = NULL;
    39f8:	6265      	str	r5, [r4, #36]	; 0x24
    39fa:	62a5      	str	r5, [r4, #40]	; 0x28
    39fc:	62e5      	str	r5, [r4, #44]	; 0x2c
    39fe:	6325      	str	r5, [r4, #48]	; 0x30
    3a00:	6365      	str	r5, [r4, #52]	; 0x34
    3a02:	63a5      	str	r5, [r4, #56]	; 0x38
    3a04:	63e5      	str	r5, [r4, #60]	; 0x3c
    3a06:	6425      	str	r5, [r4, #64]	; 0x40
    3a08:	6465      	str	r5, [r4, #68]	; 0x44
    3a0a:	64a5      	str	r5, [r4, #72]	; 0x48
    3a0c:	64e5      	str	r5, [r4, #76]	; 0x4c
    3a0e:	6525      	str	r5, [r4, #80]	; 0x50
    3a10:	6565      	str	r5, [r4, #84]	; 0x54
    3a12:	65a5      	str	r5, [r4, #88]	; 0x58
    3a14:	65e5      	str	r5, [r4, #92]	; 0x5c
    3a16:	6625      	str	r5, [r4, #96]	; 0x60
    3a18:	6665      	str	r5, [r4, #100]	; 0x64
    3a1a:	66a5      	str	r5, [r4, #104]	; 0x68
    3a1c:	66e5      	str	r5, [r4, #108]	; 0x6c
    3a1e:	6725      	str	r5, [r4, #112]	; 0x70
    3a20:	6765      	str	r5, [r4, #116]	; 0x74
    3a22:	67a5      	str	r5, [r4, #120]	; 0x78
    3a24:	67e5      	str	r5, [r4, #124]	; 0x7c
    3a26:	50e5      	str	r5, [r4, r3]
    3a28:	3304      	adds	r3, #4
    3a2a:	50e5      	str	r5, [r4, r3]
    3a2c:	3304      	adds	r3, #4
    3a2e:	50e5      	str	r5, [r4, r3]
    3a30:	3304      	adds	r3, #4
    3a32:	50e5      	str	r5, [r4, r3]
    3a34:	3304      	adds	r3, #4
    3a36:	50e5      	str	r5, [r4, r3]
    3a38:	3304      	adds	r3, #4
    3a3a:	50e5      	str	r5, [r4, r3]
    3a3c:	3304      	adds	r3, #4
    3a3e:	50e5      	str	r5, [r4, r3]
    3a40:	3304      	adds	r3, #4
    3a42:	50e5      	str	r5, [r4, r3]
    3a44:	3304      	adds	r3, #4
    3a46:	50e5      	str	r5, [r4, r3]
	module_inst->host_registered_callback_mask = 0;
    3a48:	3304      	adds	r3, #4
    3a4a:	54e5      	strb	r5, [r4, r3]
	module_inst->host_enabled_callback_mask = 0;
    3a4c:	3301      	adds	r3, #1
    3a4e:	54e5      	strb	r5, [r4, r3]
    3a50:	2208      	movs	r2, #8
    3a52:	2100      	movs	r1, #0
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    3a54:	30a6      	adds	r0, #166	; 0xa6
    3a56:	47b0      	blx	r6
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    3a58:	0020      	movs	r0, r4
    3a5a:	2208      	movs	r2, #8
    3a5c:	2100      	movs	r1, #0
    3a5e:	30ae      	adds	r0, #174	; 0xae
    3a60:	47b0      	blx	r6
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    3a62:	0020      	movs	r0, r4
    3a64:	221c      	movs	r2, #28
    3a66:	2100      	movs	r1, #0
    3a68:	30b8      	adds	r0, #184	; 0xb8
    3a6a:	47b0      	blx	r6
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    3a6c:	23d4      	movs	r3, #212	; 0xd4
		}
	}
	module_inst->device_registered_callback_mask = 0;
	module_inst->device_enabled_callback_mask = 0;
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    3a6e:	0020      	movs	r0, r4
			module_inst->device_endpoint_callback[i][j] = NULL;
    3a70:	50e5      	str	r5, [r4, r3]
    3a72:	3304      	adds	r3, #4
    3a74:	50e5      	str	r5, [r4, r3]
    3a76:	3304      	adds	r3, #4
    3a78:	50e5      	str	r5, [r4, r3]
    3a7a:	3304      	adds	r3, #4
    3a7c:	50e5      	str	r5, [r4, r3]
    3a7e:	3304      	adds	r3, #4
    3a80:	50e5      	str	r5, [r4, r3]
    3a82:	3304      	adds	r3, #4
    3a84:	50e5      	str	r5, [r4, r3]
    3a86:	3304      	adds	r3, #4
    3a88:	50e5      	str	r5, [r4, r3]
    3a8a:	3304      	adds	r3, #4
    3a8c:	50e5      	str	r5, [r4, r3]
    3a8e:	3304      	adds	r3, #4
    3a90:	50e5      	str	r5, [r4, r3]
    3a92:	3304      	adds	r3, #4
    3a94:	50e5      	str	r5, [r4, r3]
    3a96:	3304      	adds	r3, #4
    3a98:	50e5      	str	r5, [r4, r3]
    3a9a:	3308      	adds	r3, #8
    3a9c:	51e5      	str	r5, [r4, r7]
    3a9e:	50e5      	str	r5, [r4, r3]
    3aa0:	3304      	adds	r3, #4
    3aa2:	50e5      	str	r5, [r4, r3]
    3aa4:	3304      	adds	r3, #4
    3aa6:	50e5      	str	r5, [r4, r3]
    3aa8:	3304      	adds	r3, #4
    3aaa:	50e5      	str	r5, [r4, r3]
    3aac:	3304      	adds	r3, #4
    3aae:	50e5      	str	r5, [r4, r3]
    3ab0:	3304      	adds	r3, #4
    3ab2:	50e5      	str	r5, [r4, r3]
    3ab4:	3304      	adds	r3, #4
    3ab6:	50e5      	str	r5, [r4, r3]
    3ab8:	3304      	adds	r3, #4
    3aba:	50e5      	str	r5, [r4, r3]
    3abc:	3304      	adds	r3, #4
    3abe:	50e5      	str	r5, [r4, r3]
    3ac0:	3304      	adds	r3, #4
    3ac2:	50e5      	str	r5, [r4, r3]
    3ac4:	3304      	adds	r3, #4
    3ac6:	50e5      	str	r5, [r4, r3]
    3ac8:	3304      	adds	r3, #4
    3aca:	50e5      	str	r5, [r4, r3]
    3acc:	3304      	adds	r3, #4
    3ace:	50e5      	str	r5, [r4, r3]
    3ad0:	3304      	adds	r3, #4
    3ad2:	50e5      	str	r5, [r4, r3]
    3ad4:	3304      	adds	r3, #4
    3ad6:	50e5      	str	r5, [r4, r3]
    3ad8:	3304      	adds	r3, #4
    3ada:	50e5      	str	r5, [r4, r3]
    3adc:	3304      	adds	r3, #4
    3ade:	50e5      	str	r5, [r4, r3]
    3ae0:	3304      	adds	r3, #4
    3ae2:	50e5      	str	r5, [r4, r3]
    3ae4:	3304      	adds	r3, #4
    3ae6:	50e5      	str	r5, [r4, r3]
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    3ae8:	3059      	adds	r0, #89	; 0x59
			module_inst->device_endpoint_callback[i][j] = NULL;
    3aea:	3304      	adds	r3, #4
    3aec:	50e5      	str	r5, [r4, r3]
    3aee:	2208      	movs	r2, #8
	module_inst->device_registered_callback_mask = 0;
    3af0:	3304      	adds	r3, #4
    3af2:	2100      	movs	r1, #0
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    3af4:	30ff      	adds	r0, #255	; 0xff
	module_inst->device_registered_callback_mask = 0;
    3af6:	50e5      	str	r5, [r4, r3]
    3af8:	47b0      	blx	r6
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    3afa:	0020      	movs	r0, r4
    3afc:	3061      	adds	r0, #97	; 0x61
    3afe:	2208      	movs	r2, #8
    3b00:	2100      	movs	r1, #0
    3b02:	30ff      	adds	r0, #255	; 0xff
    3b04:	47b0      	blx	r6
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3b06:	2240      	movs	r2, #64	; 0x40

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    3b08:	2000      	movs	r0, #0
    3b0a:	4b14      	ldr	r3, [pc, #80]	; (3b5c <usb_init+0x27c>)
    3b0c:	601a      	str	r2, [r3, #0]
    3b0e:	b003      	add	sp, #12
    3b10:	bc0c      	pop	{r2, r3}
    3b12:	4690      	mov	r8, r2
    3b14:	4699      	mov	r9, r3
    3b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    3b18:	6822      	ldr	r2, [r4, #0]
    3b1a:	3108      	adds	r1, #8
    3b1c:	8913      	ldrh	r3, [r2, #8]
    3b1e:	438b      	bics	r3, r1
    3b20:	8113      	strh	r3, [r2, #8]
    3b22:	e75c      	b.n	39de <usb_init+0xfe>
	if (pad_trim == 0x7) {
    3b24:	2103      	movs	r1, #3
    3b26:	e733      	b.n	3990 <usb_init+0xb0>
	if (pad_transp == 0x1F) {
    3b28:	231d      	movs	r3, #29
    3b2a:	e724      	b.n	3976 <usb_init+0x96>
	if (pad_transn == 0x1F) {
    3b2c:	2305      	movs	r3, #5
    3b2e:	e713      	b.n	3958 <usb_init+0x78>
    3b30:	20000e58 	.word	0x20000e58
    3b34:	20000e48 	.word	0x20000e48
    3b38:	40000400 	.word	0x40000400
    3b3c:	000169f1 	.word	0x000169f1
    3b40:	000168f5 	.word	0x000168f5
    3b44:	00016935 	.word	0x00016935
    3b48:	0080601c 	.word	0x0080601c
    3b4c:	fffff83f 	.word	0xfffff83f
    3b50:	ffff8fff 	.word	0xffff8fff
    3b54:	20001298 	.word	0x20001298
    3b58:	0001fdfd 	.word	0x0001fdfd
    3b5c:	e000e100 	.word	0xe000e100

00003b60 <wdt_set_config>:
			MCLK->APBAMASK.reg |= mask;
    3b60:	2180      	movs	r1, #128	; 0x80
 * \retval STATUS_ERR_IO  If the Watchdog module is locked to be always on
 */
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
enum status_code wdt_set_config(
		const struct wdt_conf *const config)
{
    3b62:	b510      	push	{r4, lr}
    3b64:	4a29      	ldr	r2, [pc, #164]	; (3c0c <wdt_set_config+0xac>)
    3b66:	6953      	ldr	r3, [r2, #20]
    3b68:	430b      	orrs	r3, r1
static inline bool wdt_is_locked(void)
{
	Wdt *const WDT_module = WDT;

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	return (WDT_module->CTRLA.reg & WDT_CTRLA_ALWAYSON);
    3b6a:	4929      	ldr	r1, [pc, #164]	; (3c10 <wdt_set_config+0xb0>)
    3b6c:	6153      	str	r3, [r2, #20]
    3b6e:	780b      	ldrb	r3, [r1, #0]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_WDT);

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
		return STATUS_ERR_IO;
    3b70:	2210      	movs	r2, #16
	if (wdt_is_locked()) {
    3b72:	b25b      	sxtb	r3, r3
    3b74:	2b00      	cmp	r3, #0
    3b76:	db03      	blt.n	3b80 <wdt_set_config+0x20>
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
    3b78:	7883      	ldrb	r3, [r0, #2]
		return STATUS_ERR_INVALID_ARG;
    3b7a:	3207      	adds	r2, #7
	if (config->timeout_period == WDT_PERIOD_NONE) {
    3b7c:	2b00      	cmp	r3, #0
    3b7e:	d101      	bne.n	3b84 <wdt_set_config+0x24>
	while (wdt_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}

	return STATUS_OK;
}
    3b80:	0010      	movs	r0, r2
    3b82:	bd10      	pop	{r4, pc}
	if ((config->timeout_period < config->window_period) ||
    3b84:	78c4      	ldrb	r4, [r0, #3]
    3b86:	429c      	cmp	r4, r3
    3b88:	d8fa      	bhi.n	3b80 <wdt_set_config+0x20>
    3b8a:	7904      	ldrb	r4, [r0, #4]
    3b8c:	429c      	cmp	r4, r3
    3b8e:	d8f7      	bhi.n	3b80 <wdt_set_config+0x20>
	WDT_module->CTRLA.reg &= ~WDT_CTRLA_ENABLE;
    3b90:	780b      	ldrb	r3, [r1, #0]
    3b92:	3a15      	subs	r2, #21
    3b94:	4393      	bics	r3, r2
    3b96:	700b      	strb	r3, [r1, #0]
	if (WDT_module->SYNCBUSY.reg) {
    3b98:	688b      	ldr	r3, [r1, #8]
    3b9a:	2b00      	cmp	r3, #0
    3b9c:	d1fc      	bne.n	3b98 <wdt_set_config+0x38>
	if(config->enable == false) {
    3b9e:	7843      	ldrb	r3, [r0, #1]
    3ba0:	2b00      	cmp	r3, #0
    3ba2:	d101      	bne.n	3ba8 <wdt_set_config+0x48>
		return STATUS_OK;
    3ba4:	2200      	movs	r2, #0
    3ba6:	e7eb      	b.n	3b80 <wdt_set_config+0x20>
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
    3ba8:	7883      	ldrb	r3, [r0, #2]
	if (config->window_period != WDT_PERIOD_NONE) {
    3baa:	78c2      	ldrb	r2, [r0, #3]
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
    3bac:	3b01      	subs	r3, #1
	if (config->window_period != WDT_PERIOD_NONE) {
    3bae:	2a00      	cmp	r2, #0
    3bb0:	d026      	beq.n	3c00 <wdt_set_config+0xa0>
		WDT_module->CTRLA.reg |= WDT_CTRLA_WEN;
    3bb2:	2204      	movs	r2, #4
    3bb4:	780c      	ldrb	r4, [r1, #0]
    3bb6:	4322      	orrs	r2, r4
    3bb8:	700a      	strb	r2, [r1, #0]
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
    3bba:	78c2      	ldrb	r2, [r0, #3]
    3bbc:	3a01      	subs	r2, #1
    3bbe:	0112      	lsls	r2, r2, #4
    3bc0:	4313      	orrs	r3, r2
    3bc2:	4a13      	ldr	r2, [pc, #76]	; (3c10 <wdt_set_config+0xb0>)
    3bc4:	6891      	ldr	r1, [r2, #8]
    3bc6:	2900      	cmp	r1, #0
    3bc8:	d1fc      	bne.n	3bc4 <wdt_set_config+0x64>
	WDT_module->CONFIG.reg = new_config;
    3bca:	b2db      	uxtb	r3, r3
    3bcc:	7053      	strb	r3, [r2, #1]
	if (config->early_warning_period != WDT_PERIOD_NONE) {
    3bce:	7903      	ldrb	r3, [r0, #4]
    3bd0:	2b00      	cmp	r3, #0
    3bd2:	d002      	beq.n	3bda <wdt_set_config+0x7a>
			= (config->early_warning_period - 1) << WDT_EWCTRL_EWOFFSET_Pos;
    3bd4:	3b01      	subs	r3, #1
    3bd6:	b2db      	uxtb	r3, r3
    3bd8:	7093      	strb	r3, [r2, #2]
	if (config->always_on) {
    3bda:	7803      	ldrb	r3, [r0, #0]
		WDT_module->CTRLA.reg |= WDT_CTRLA_ALWAYSON;
    3bdc:	4a0c      	ldr	r2, [pc, #48]	; (3c10 <wdt_set_config+0xb0>)
	if (config->always_on) {
    3bde:	2b00      	cmp	r3, #0
    3be0:	d009      	beq.n	3bf6 <wdt_set_config+0x96>
		WDT_module->CTRLA.reg |= WDT_CTRLA_ALWAYSON;
    3be2:	2180      	movs	r1, #128	; 0x80
    3be4:	7813      	ldrb	r3, [r2, #0]
    3be6:	430b      	orrs	r3, r1
    3be8:	7013      	strb	r3, [r2, #0]
    3bea:	4b09      	ldr	r3, [pc, #36]	; (3c10 <wdt_set_config+0xb0>)
    3bec:	689a      	ldr	r2, [r3, #8]
    3bee:	2a00      	cmp	r2, #0
    3bf0:	d1fc      	bne.n	3bec <wdt_set_config+0x8c>
		return STATUS_OK;
    3bf2:	2200      	movs	r2, #0
    3bf4:	e7c4      	b.n	3b80 <wdt_set_config+0x20>
		WDT_module->CTRLA.reg |= WDT_CTRLA_ENABLE;
    3bf6:	2302      	movs	r3, #2
    3bf8:	7811      	ldrb	r1, [r2, #0]
    3bfa:	430b      	orrs	r3, r1
    3bfc:	7013      	strb	r3, [r2, #0]
    3bfe:	e7f4      	b.n	3bea <wdt_set_config+0x8a>
		WDT_module->CTRLA.reg &= ~WDT_CTRLA_WEN;
    3c00:	2404      	movs	r4, #4
    3c02:	780a      	ldrb	r2, [r1, #0]
    3c04:	43a2      	bics	r2, r4
    3c06:	700a      	strb	r2, [r1, #0]
    3c08:	e7db      	b.n	3bc2 <wdt_set_config+0x62>
    3c0a:	46c0      	nop			; (mov r8, r8)
    3c0c:	40000400 	.word	0x40000400
    3c10:	40001c00 	.word	0x40001c00

00003c14 <wdt_reset_count>:
void wdt_reset_count(void)
{
	Wdt *const WDT_module = WDT;

	/* Disable the Watchdog module */
	WDT_module->CLEAR.reg = WDT_CLEAR_CLEAR_KEY;
    3c14:	22a5      	movs	r2, #165	; 0xa5
    3c16:	4b03      	ldr	r3, [pc, #12]	; (3c24 <wdt_reset_count+0x10>)
    3c18:	731a      	strb	r2, [r3, #12]
    3c1a:	689a      	ldr	r2, [r3, #8]
    3c1c:	2a00      	cmp	r2, #0
    3c1e:	d1fc      	bne.n	3c1a <wdt_reset_count+0x6>

	while (wdt_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    3c20:	4770      	bx	lr
    3c22:	46c0      	nop			; (mov r8, r8)
    3c24:	40001c00 	.word	0x40001c00

00003c28 <WDT_Handler>:
 */
static inline void wdt_clear_early_warning(void)
{
	Wdt *const WDT_module = WDT;

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
    3c28:	2201      	movs	r2, #1
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
    3c2a:	b510      	push	{r4, lr}
    3c2c:	4b03      	ldr	r3, [pc, #12]	; (3c3c <WDT_Handler+0x14>)
    3c2e:	719a      	strb	r2, [r3, #6]
	wdt_clear_early_warning();

	if (wdt_early_warning_callback) {
    3c30:	4b03      	ldr	r3, [pc, #12]	; (3c40 <WDT_Handler+0x18>)
    3c32:	681b      	ldr	r3, [r3, #0]
    3c34:	2b00      	cmp	r3, #0
    3c36:	d000      	beq.n	3c3a <WDT_Handler+0x12>
		wdt_early_warning_callback();
    3c38:	4798      	blx	r3
	}
}
    3c3a:	bd10      	pop	{r4, pc}
    3c3c:	40001c00 	.word	0x40001c00
    3c40:	20001398 	.word	0x20001398

00003c44 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    3c44:	e7fe      	b.n	3c44 <Dummy_Handler>
    3c46:	46c0      	nop			; (mov r8, r8)

00003c48 <Reset_Handler>:
        if (pSrc != pDest) {
    3c48:	4914      	ldr	r1, [pc, #80]	; (3c9c <Reset_Handler+0x54>)
    3c4a:	4815      	ldr	r0, [pc, #84]	; (3ca0 <Reset_Handler+0x58>)
{
    3c4c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    3c4e:	4281      	cmp	r1, r0
    3c50:	d009      	beq.n	3c66 <Reset_Handler+0x1e>
                for (; pDest < &_erelocate;) {
    3c52:	4b14      	ldr	r3, [pc, #80]	; (3ca4 <Reset_Handler+0x5c>)
    3c54:	4298      	cmp	r0, r3
    3c56:	d206      	bcs.n	3c66 <Reset_Handler+0x1e>
                        *pDest++ = *pSrc++;
    3c58:	43c2      	mvns	r2, r0
    3c5a:	18d2      	adds	r2, r2, r3
    3c5c:	0892      	lsrs	r2, r2, #2
    3c5e:	3201      	adds	r2, #1
    3c60:	0092      	lsls	r2, r2, #2
    3c62:	4b11      	ldr	r3, [pc, #68]	; (3ca8 <Reset_Handler+0x60>)
    3c64:	4798      	blx	r3
        for (pDest = &_szero; pDest < &_ezero;) {
    3c66:	4811      	ldr	r0, [pc, #68]	; (3cac <Reset_Handler+0x64>)
    3c68:	4b11      	ldr	r3, [pc, #68]	; (3cb0 <Reset_Handler+0x68>)
    3c6a:	4298      	cmp	r0, r3
    3c6c:	d207      	bcs.n	3c7e <Reset_Handler+0x36>
                *pDest++ = 0;
    3c6e:	43c2      	mvns	r2, r0
    3c70:	18d2      	adds	r2, r2, r3
    3c72:	0892      	lsrs	r2, r2, #2
    3c74:	3201      	adds	r2, #1
    3c76:	0092      	lsls	r2, r2, #2
    3c78:	2100      	movs	r1, #0
    3c7a:	4b0e      	ldr	r3, [pc, #56]	; (3cb4 <Reset_Handler+0x6c>)
    3c7c:	4798      	blx	r3
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3c7e:	21ff      	movs	r1, #255	; 0xff
    3c80:	4b0d      	ldr	r3, [pc, #52]	; (3cb8 <Reset_Handler+0x70>)
    3c82:	4a0e      	ldr	r2, [pc, #56]	; (3cbc <Reset_Handler+0x74>)
    3c84:	438b      	bics	r3, r1
    3c86:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    3c88:	4a0d      	ldr	r2, [pc, #52]	; (3cc0 <Reset_Handler+0x78>)
    3c8a:	397f      	subs	r1, #127	; 0x7f
    3c8c:	6853      	ldr	r3, [r2, #4]
    3c8e:	430b      	orrs	r3, r1
    3c90:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    3c92:	4b0c      	ldr	r3, [pc, #48]	; (3cc4 <Reset_Handler+0x7c>)
    3c94:	4798      	blx	r3
        main();
    3c96:	4b0c      	ldr	r3, [pc, #48]	; (3cc8 <Reset_Handler+0x80>)
    3c98:	4798      	blx	r3
    3c9a:	e7fe      	b.n	3c9a <Reset_Handler+0x52>
    3c9c:	00026ff4 	.word	0x00026ff4
    3ca0:	20000000 	.word	0x20000000
    3ca4:	20000d58 	.word	0x20000d58
    3ca8:	0001fd79 	.word	0x0001fd79
    3cac:	20000d58 	.word	0x20000d58
    3cb0:	20005658 	.word	0x20005658
    3cb4:	0001fdfd 	.word	0x0001fdfd
    3cb8:	00000000 	.word	0x00000000
    3cbc:	e000ed00 	.word	0xe000ed00
    3cc0:	41004000 	.word	0x41004000
    3cc4:	0001fd31 	.word	0x0001fd31
    3cc8:	00019e69 	.word	0x00019e69

00003ccc <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    3ccc:	4a04      	ldr	r2, [pc, #16]	; (3ce0 <_sbrk+0x14>)
    3cce:	6813      	ldr	r3, [r2, #0]
    3cd0:	2b00      	cmp	r3, #0
    3cd2:	d003      	beq.n	3cdc <_sbrk+0x10>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	heap += incr;
    3cd4:	1818      	adds	r0, r3, r0
    3cd6:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
    3cd8:	0018      	movs	r0, r3
    3cda:	4770      	bx	lr
    3cdc:	4b01      	ldr	r3, [pc, #4]	; (3ce4 <_sbrk+0x18>)
    3cde:	e7f9      	b.n	3cd4 <_sbrk+0x8>
    3ce0:	20000e64 	.word	0x20000e64
    3ce4:	20007658 	.word	0x20007658

00003ce8 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    3ce8:	b570      	push	{r4, r5, r6, lr}
    3cea:	0004      	movs	r4, r0
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
    3cec:	2801      	cmp	r0, #1
    3cee:	d901      	bls.n	3cf4 <disk_initialize+0xc>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    3cf0:	2001      	movs	r0, #1
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
    3cf2:	bd70      	pop	{r4, r5, r6, pc}
		mem_status = mem_test_unit_ready(drv);
    3cf4:	4d07      	ldr	r5, [pc, #28]	; (3d14 <disk_initialize+0x2c>)
    3cf6:	47a8      	blx	r5
		if (CTRL_BUSY != mem_status) {
    3cf8:	2803      	cmp	r0, #3
    3cfa:	d101      	bne.n	3d00 <disk_initialize+0x18>
		mem_status = mem_test_unit_ready(drv);
    3cfc:	0020      	movs	r0, r4
    3cfe:	47a8      	blx	r5
	if (mem_status != CTRL_GOOD) {
    3d00:	2800      	cmp	r0, #0
    3d02:	d1f5      	bne.n	3cf0 <disk_initialize+0x8>
	if (mem_wr_protect(drv)) {
    3d04:	4b04      	ldr	r3, [pc, #16]	; (3d18 <disk_initialize+0x30>)
    3d06:	0020      	movs	r0, r4
    3d08:	4798      	blx	r3
	return 0;
    3d0a:	1e43      	subs	r3, r0, #1
    3d0c:	4198      	sbcs	r0, r3
    3d0e:	0080      	lsls	r0, r0, #2
    3d10:	e7ef      	b.n	3cf2 <disk_initialize+0xa>
    3d12:	46c0      	nop			; (mov r8, r8)
    3d14:	0000f06d 	.word	0x0000f06d
    3d18:	0000f0b9 	.word	0x0000f0b9

00003d1c <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    3d1c:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
    3d1e:	4b06      	ldr	r3, [pc, #24]	; (3d38 <disk_status+0x1c>)
    3d20:	4798      	blx	r3
    3d22:	2800      	cmp	r0, #0
    3d24:	d006      	beq.n	3d34 <disk_status+0x18>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    3d26:	2303      	movs	r3, #3
	switch (mem_test_unit_ready(drv)) {
    3d28:	2802      	cmp	r0, #2
    3d2a:	d101      	bne.n	3d30 <disk_status+0x14>
	default:
		return STA_NOINIT;
	}
}
    3d2c:	0018      	movs	r0, r3
    3d2e:	bd10      	pop	{r4, pc}
		return STA_NOINIT;
    3d30:	3b02      	subs	r3, #2
    3d32:	e7fb      	b.n	3d2c <disk_status+0x10>
		return 0;
    3d34:	2300      	movs	r3, #0
    3d36:	e7f9      	b.n	3d2c <disk_status+0x10>
    3d38:	0000f06d 	.word	0x0000f06d

00003d3c <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    3d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d3e:	4645      	mov	r5, r8
    3d40:	46de      	mov	lr, fp
    3d42:	4657      	mov	r7, sl
    3d44:	464e      	mov	r6, r9
    3d46:	b5e0      	push	{r5, r6, r7, lr}
    3d48:	001f      	movs	r7, r3
    3d4a:	b083      	sub	sp, #12
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    3d4c:	4b19      	ldr	r3, [pc, #100]	; (3db4 <disk_read+0x78>)
{
    3d4e:	4680      	mov	r8, r0
    3d50:	000d      	movs	r5, r1
    3d52:	0014      	movs	r4, r2
	uint8_t uc_sector_size = mem_sector_size(drv);
    3d54:	4798      	blx	r3
    3d56:	1e06      	subs	r6, r0, #0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    3d58:	d107      	bne.n	3d6a <disk_read+0x2e>
		return RES_ERROR;
    3d5a:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    3d5c:	b003      	add	sp, #12
    3d5e:	bc3c      	pop	{r2, r3, r4, r5}
    3d60:	4690      	mov	r8, r2
    3d62:	4699      	mov	r9, r3
    3d64:	46a2      	mov	sl, r4
    3d66:	46ab      	mov	fp, r5
    3d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    3d6a:	4b13      	ldr	r3, [pc, #76]	; (3db8 <disk_read+0x7c>)
    3d6c:	a901      	add	r1, sp, #4
    3d6e:	4640      	mov	r0, r8
    3d70:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
    3d72:	0032      	movs	r2, r6
			(ul_last_sector_num + 1) * uc_sector_size) {
    3d74:	9b01      	ldr	r3, [sp, #4]
	if ((sector + count * uc_sector_size) >
    3d76:	437a      	muls	r2, r7
			(ul_last_sector_num + 1) * uc_sector_size) {
    3d78:	3301      	adds	r3, #1
    3d7a:	4373      	muls	r3, r6
	if ((sector + count * uc_sector_size) >
    3d7c:	1912      	adds	r2, r2, r4
		return RES_PARERR;
    3d7e:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    3d80:	429a      	cmp	r2, r3
    3d82:	d8eb      	bhi.n	3d5c <disk_read+0x20>
	for (i = 0; i < count; i++) {
    3d84:	2f00      	cmp	r7, #0
    3d86:	d013      	beq.n	3db0 <disk_read+0x74>
    3d88:	0273      	lsls	r3, r6, #9
    3d8a:	469b      	mov	fp, r3
    3d8c:	1c7b      	adds	r3, r7, #1
    3d8e:	4699      	mov	r9, r3
    3d90:	4b0a      	ldr	r3, [pc, #40]	; (3dbc <disk_read+0x80>)
    3d92:	2701      	movs	r7, #1
    3d94:	469a      	mov	sl, r3
    3d96:	e004      	b.n	3da2 <disk_read+0x66>
    3d98:	3701      	adds	r7, #1
    3d9a:	19a4      	adds	r4, r4, r6
    3d9c:	445d      	add	r5, fp
    3d9e:	454f      	cmp	r7, r9
    3da0:	d006      	beq.n	3db0 <disk_read+0x74>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    3da2:	002a      	movs	r2, r5
    3da4:	0021      	movs	r1, r4
    3da6:	4640      	mov	r0, r8
    3da8:	47d0      	blx	sl
    3daa:	2800      	cmp	r0, #0
    3dac:	d0f4      	beq.n	3d98 <disk_read+0x5c>
    3dae:	e7d4      	b.n	3d5a <disk_read+0x1e>
	return RES_OK;
    3db0:	2000      	movs	r0, #0
    3db2:	e7d3      	b.n	3d5c <disk_read+0x20>
    3db4:	0000f099 	.word	0x0000f099
    3db8:	0000f081 	.word	0x0000f081
    3dbc:	0000f129 	.word	0x0000f129

00003dc0 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    3dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dc2:	4645      	mov	r5, r8
    3dc4:	46de      	mov	lr, fp
    3dc6:	4657      	mov	r7, sl
    3dc8:	464e      	mov	r6, r9
    3dca:	b5e0      	push	{r5, r6, r7, lr}
    3dcc:	001f      	movs	r7, r3
    3dce:	b083      	sub	sp, #12
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    3dd0:	4b19      	ldr	r3, [pc, #100]	; (3e38 <disk_write+0x78>)
{
    3dd2:	4680      	mov	r8, r0
    3dd4:	000d      	movs	r5, r1
    3dd6:	0014      	movs	r4, r2
	uint8_t uc_sector_size = mem_sector_size(drv);
    3dd8:	4798      	blx	r3
    3dda:	1e06      	subs	r6, r0, #0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    3ddc:	d107      	bne.n	3dee <disk_write+0x2e>
		return RES_ERROR;
    3dde:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    3de0:	b003      	add	sp, #12
    3de2:	bc3c      	pop	{r2, r3, r4, r5}
    3de4:	4690      	mov	r8, r2
    3de6:	4699      	mov	r9, r3
    3de8:	46a2      	mov	sl, r4
    3dea:	46ab      	mov	fp, r5
    3dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    3dee:	4b13      	ldr	r3, [pc, #76]	; (3e3c <disk_write+0x7c>)
    3df0:	a901      	add	r1, sp, #4
    3df2:	4640      	mov	r0, r8
    3df4:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
    3df6:	0032      	movs	r2, r6
			(ul_last_sector_num + 1) * uc_sector_size) {
    3df8:	9b01      	ldr	r3, [sp, #4]
	if ((sector + count * uc_sector_size) >
    3dfa:	437a      	muls	r2, r7
			(ul_last_sector_num + 1) * uc_sector_size) {
    3dfc:	3301      	adds	r3, #1
    3dfe:	4373      	muls	r3, r6
	if ((sector + count * uc_sector_size) >
    3e00:	1912      	adds	r2, r2, r4
		return RES_PARERR;
    3e02:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    3e04:	429a      	cmp	r2, r3
    3e06:	d8eb      	bhi.n	3de0 <disk_write+0x20>
	for (i = 0; i < count; i++) {
    3e08:	2f00      	cmp	r7, #0
    3e0a:	d013      	beq.n	3e34 <disk_write+0x74>
    3e0c:	0273      	lsls	r3, r6, #9
    3e0e:	469b      	mov	fp, r3
    3e10:	1c7b      	adds	r3, r7, #1
    3e12:	4699      	mov	r9, r3
    3e14:	4b0a      	ldr	r3, [pc, #40]	; (3e40 <disk_write+0x80>)
    3e16:	2701      	movs	r7, #1
    3e18:	469a      	mov	sl, r3
    3e1a:	e004      	b.n	3e26 <disk_write+0x66>
    3e1c:	3701      	adds	r7, #1
    3e1e:	19a4      	adds	r4, r4, r6
    3e20:	445d      	add	r5, fp
    3e22:	454f      	cmp	r7, r9
    3e24:	d006      	beq.n	3e34 <disk_write+0x74>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    3e26:	002a      	movs	r2, r5
    3e28:	0021      	movs	r1, r4
    3e2a:	4640      	mov	r0, r8
    3e2c:	47d0      	blx	sl
    3e2e:	2800      	cmp	r0, #0
    3e30:	d0f4      	beq.n	3e1c <disk_write+0x5c>
    3e32:	e7d4      	b.n	3dde <disk_write+0x1e>
	return RES_OK;
    3e34:	2000      	movs	r0, #0
    3e36:	e7d3      	b.n	3de0 <disk_write+0x20>
    3e38:	0000f099 	.word	0x0000f099
    3e3c:	0000f081 	.word	0x0000f081
    3e40:	0000f145 	.word	0x0000f145

00003e44 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    3e44:	b510      	push	{r4, lr}
    3e46:	0014      	movs	r4, r2
    3e48:	b082      	sub	sp, #8
	DRESULT res = RES_PARERR;

	switch (ctrl) {
    3e4a:	2901      	cmp	r1, #1
    3e4c:	d020      	beq.n	3e90 <disk_ioctl+0x4c>
    3e4e:	2900      	cmp	r1, #0
    3e50:	d018      	beq.n	3e84 <disk_ioctl+0x40>
    3e52:	2902      	cmp	r1, #2
    3e54:	d007      	beq.n	3e66 <disk_ioctl+0x22>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
    3e56:	2004      	movs	r0, #4
	switch (ctrl) {
    3e58:	2903      	cmp	r1, #3
    3e5a:	d102      	bne.n	3e62 <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
    3e5c:	2301      	movs	r3, #1
		res = RES_OK;
    3e5e:	2000      	movs	r0, #0
		*(DWORD *)buff = 1;
    3e60:	6013      	str	r3, [r2, #0]
	}

	return res;
}
    3e62:	b002      	add	sp, #8
    3e64:	bd10      	pop	{r4, pc}
		uint8_t uc_sector_size = mem_sector_size(drv);
    3e66:	4b0f      	ldr	r3, [pc, #60]	; (3ea4 <disk_ioctl+0x60>)
    3e68:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
    3e6a:	1e43      	subs	r3, r0, #1
    3e6c:	b2db      	uxtb	r3, r3
    3e6e:	2b01      	cmp	r3, #1
    3e70:	d904      	bls.n	3e7c <disk_ioctl+0x38>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    3e72:	22fb      	movs	r2, #251	; 0xfb
    3e74:	1f03      	subs	r3, r0, #4
			return RES_ERROR;
    3e76:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
    3e78:	4213      	tst	r3, r2
    3e7a:	d1f2      	bne.n	3e62 <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    3e7c:	2300      	movs	r3, #0
		res = RES_OK;
    3e7e:	2000      	movs	r0, #0
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    3e80:	7023      	strb	r3, [r4, #0]
	break;
    3e82:	e7ee      	b.n	3e62 <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    3e84:	4b08      	ldr	r3, [pc, #32]	; (3ea8 <disk_ioctl+0x64>)
    3e86:	4798      	blx	r3
    3e88:	2800      	cmp	r0, #0
    3e8a:	d009      	beq.n	3ea0 <disk_ioctl+0x5c>
			res = RES_NOTRDY;
    3e8c:	2003      	movs	r0, #3
    3e8e:	e7e8      	b.n	3e62 <disk_ioctl+0x1e>
		mem_read_capacity(drv, &ul_last_sector_num);
    3e90:	4b06      	ldr	r3, [pc, #24]	; (3eac <disk_ioctl+0x68>)
    3e92:	a901      	add	r1, sp, #4
    3e94:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
    3e96:	9b01      	ldr	r3, [sp, #4]
		res = RES_OK;
    3e98:	2000      	movs	r0, #0
		*(DWORD *)buff = ul_last_sector_num + 1;
    3e9a:	3301      	adds	r3, #1
    3e9c:	6023      	str	r3, [r4, #0]
	break;
    3e9e:	e7e0      	b.n	3e62 <disk_ioctl+0x1e>
			res = RES_OK;
    3ea0:	2000      	movs	r0, #0
    3ea2:	e7de      	b.n	3e62 <disk_ioctl+0x1e>
    3ea4:	0000f099 	.word	0x0000f099
    3ea8:	0000f06d 	.word	0x0000f06d
    3eac:	0000f081 	.word	0x0000f081

00003eb0 <get_fattime>:
*/


// KFausnight 20200713
uint32_t get_fattime(void)
{
    3eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3eb2:	46c6      	mov	lr, r8
    3eb4:	b500      	push	{lr}
	uint32_t ul_time;

	// Format into FAT time stamp format
	ul_time = ((bcd2int(current_time.year) +20 ) << 25)
    3eb6:	4e10      	ldr	r6, [pc, #64]	; (3ef8 <get_fattime+0x48>)
    3eb8:	4d10      	ldr	r5, [pc, #64]	; (3efc <get_fattime+0x4c>)
    3eba:	79b0      	ldrb	r0, [r6, #6]
    3ebc:	47a8      	blx	r5
    3ebe:	0004      	movs	r4, r0
	| (bcd2int(current_time.month) << 21)
    3ec0:	7970      	ldrb	r0, [r6, #5]
    3ec2:	47a8      	blx	r5
    3ec4:	0007      	movs	r7, r0
	| (bcd2int(current_time.date) << 16)
    3ec6:	7930      	ldrb	r0, [r6, #4]
    3ec8:	47a8      	blx	r5
	| (bcd2int(current_time.month) << 21)
    3eca:	057f      	lsls	r7, r7, #21
	| (bcd2int(current_time.date) << 16)
    3ecc:	0400      	lsls	r0, r0, #16
    3ece:	4307      	orrs	r7, r0
    3ed0:	46b8      	mov	r8, r7
	| (bcd2int(current_time.hours) << 11)
    3ed2:	78b0      	ldrb	r0, [r6, #2]
    3ed4:	47a8      	blx	r5
    3ed6:	4643      	mov	r3, r8
    3ed8:	02c7      	lsls	r7, r0, #11
	| (bcd2int(current_time.minutes) << 5)
    3eda:	7870      	ldrb	r0, [r6, #1]
    3edc:	431f      	orrs	r7, r3
    3ede:	47a8      	blx	r5
    3ee0:	0140      	lsls	r0, r0, #5
    3ee2:	4307      	orrs	r7, r0
	| ((bcd2int(current_time.seconds) >> 1) << 0);
    3ee4:	7830      	ldrb	r0, [r6, #0]
    3ee6:	47a8      	blx	r5
	ul_time = ((bcd2int(current_time.year) +20 ) << 25)
    3ee8:	3414      	adds	r4, #20
	| ((bcd2int(current_time.seconds) >> 1) << 0);
    3eea:	0840      	lsrs	r0, r0, #1
	ul_time = ((bcd2int(current_time.year) +20 ) << 25)
    3eec:	4338      	orrs	r0, r7
    3eee:	0664      	lsls	r4, r4, #25
    3ef0:	4320      	orrs	r0, r4

	return ul_time;
}
    3ef2:	bc04      	pop	{r2}
    3ef4:	4690      	mov	r8, r2
    3ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ef8:	20002778 	.word	0x20002778
    3efc:	00007fb5 	.word	0x00007fb5

00003f00 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    3f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f02:	4647      	mov	r7, r8
    3f04:	46ce      	mov	lr, r9
    3f06:	b580      	push	{r7, lr}
	DWORD wsect;


	wsect = fs->winsect;
    3f08:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
{
    3f0a:	0004      	movs	r4, r0
    3f0c:	000f      	movs	r7, r1
	if (wsect != sector) {	/* Changed current window */
    3f0e:	428d      	cmp	r5, r1
    3f10:	d004      	beq.n	3f1c <move_window+0x1c>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    3f12:	7903      	ldrb	r3, [r0, #4]
    3f14:	2b00      	cmp	r3, #0
    3f16:	d111      	bne.n	3f3c <move_window+0x3c>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    3f18:	2f00      	cmp	r7, #0
    3f1a:	d104      	bne.n	3f26 <move_window+0x26>
				return FR_DISK_ERR;
			fs->winsect = sector;
		}
	}

	return FR_OK;
    3f1c:	2000      	movs	r0, #0
}
    3f1e:	bc0c      	pop	{r2, r3}
    3f20:	4690      	mov	r8, r2
    3f22:	4699      	mov	r9, r3
    3f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    3f26:	0021      	movs	r1, r4
    3f28:	7860      	ldrb	r0, [r4, #1]
    3f2a:	2301      	movs	r3, #1
    3f2c:	003a      	movs	r2, r7
    3f2e:	3130      	adds	r1, #48	; 0x30
    3f30:	4d14      	ldr	r5, [pc, #80]	; (3f84 <move_window+0x84>)
    3f32:	47a8      	blx	r5
    3f34:	2800      	cmp	r0, #0
    3f36:	d123      	bne.n	3f80 <move_window+0x80>
			fs->winsect = sector;
    3f38:	62e7      	str	r7, [r4, #44]	; 0x2c
    3f3a:	e7f0      	b.n	3f1e <move_window+0x1e>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    3f3c:	2330      	movs	r3, #48	; 0x30
    3f3e:	4698      	mov	r8, r3
    3f40:	4e11      	ldr	r6, [pc, #68]	; (3f88 <move_window+0x88>)
    3f42:	4480      	add	r8, r0
    3f44:	3b2f      	subs	r3, #47	; 0x2f
    3f46:	7840      	ldrb	r0, [r0, #1]
    3f48:	002a      	movs	r2, r5
    3f4a:	4641      	mov	r1, r8
    3f4c:	46b1      	mov	r9, r6
    3f4e:	47b0      	blx	r6
    3f50:	2800      	cmp	r0, #0
    3f52:	d115      	bne.n	3f80 <move_window+0x80>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    3f54:	69e3      	ldr	r3, [r4, #28]
    3f56:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
    3f58:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    3f5a:	189a      	adds	r2, r3, r2
    3f5c:	4295      	cmp	r5, r2
    3f5e:	d2db      	bcs.n	3f18 <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    3f60:	78e6      	ldrb	r6, [r4, #3]
    3f62:	2e01      	cmp	r6, #1
    3f64:	d801      	bhi.n	3f6a <move_window+0x6a>
    3f66:	e7d7      	b.n	3f18 <move_window+0x18>
    3f68:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
    3f6a:	18ed      	adds	r5, r5, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    3f6c:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    3f6e:	7860      	ldrb	r0, [r4, #1]
    3f70:	2301      	movs	r3, #1
    3f72:	002a      	movs	r2, r5
    3f74:	4641      	mov	r1, r8
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    3f76:	b2f6      	uxtb	r6, r6
					disk_write(fs->drv, fs->win, wsect, 1);
    3f78:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    3f7a:	2e01      	cmp	r6, #1
    3f7c:	d1f4      	bne.n	3f68 <move_window+0x68>
    3f7e:	e7cb      	b.n	3f18 <move_window+0x18>
				return FR_DISK_ERR;
    3f80:	2001      	movs	r0, #1
    3f82:	e7cc      	b.n	3f1e <move_window+0x1e>
    3f84:	00003d3d 	.word	0x00003d3d
    3f88:	00003dc1 	.word	0x00003dc1

00003f8c <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    3f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f8e:	46c6      	mov	lr, r8
    3f90:	b500      	push	{lr}
	wsect = fs->winsect;
    3f92:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
{
    3f94:	0004      	movs	r4, r0
	if (wsect != sector) {	/* Changed current window */
    3f96:	2d00      	cmp	r5, #0
    3f98:	d002      	beq.n	3fa0 <sync+0x14>
		if (fs->wflag) {	/* Write back dirty window if needed */
    3f9a:	7903      	ldrb	r3, [r0, #4]
    3f9c:	2b00      	cmp	r3, #0
    3f9e:	d10d      	bne.n	3fbc <sync+0x30>


	res = move_window(fs, 0);
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    3fa0:	7823      	ldrb	r3, [r4, #0]
    3fa2:	2b03      	cmp	r3, #3
    3fa4:	d02d      	beq.n	4002 <sync+0x76>
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
			fs->fsi_flag = 0;
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    3fa6:	4b34      	ldr	r3, [pc, #208]	; (4078 <sync+0xec>)
    3fa8:	7860      	ldrb	r0, [r4, #1]
    3faa:	2200      	movs	r2, #0
    3fac:	2100      	movs	r1, #0
    3fae:	4798      	blx	r3
    3fb0:	1e43      	subs	r3, r0, #1
    3fb2:	4198      	sbcs	r0, r3
    3fb4:	b2c0      	uxtb	r0, r0
			res = FR_DISK_ERR;
	}

	return res;
}
    3fb6:	bc04      	pop	{r2}
    3fb8:	4690      	mov	r8, r2
    3fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    3fbc:	0007      	movs	r7, r0
    3fbe:	3730      	adds	r7, #48	; 0x30
    3fc0:	2301      	movs	r3, #1
    3fc2:	4e2e      	ldr	r6, [pc, #184]	; (407c <sync+0xf0>)
    3fc4:	7840      	ldrb	r0, [r0, #1]
    3fc6:	002a      	movs	r2, r5
    3fc8:	0039      	movs	r1, r7
    3fca:	47b0      	blx	r6
    3fcc:	46b0      	mov	r8, r6
    3fce:	0003      	movs	r3, r0
    3fd0:	2001      	movs	r0, #1
    3fd2:	2b00      	cmp	r3, #0
    3fd4:	d1ef      	bne.n	3fb6 <sync+0x2a>
			fs->wflag = 0;
    3fd6:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    3fd8:	6a22      	ldr	r2, [r4, #32]
    3fda:	69e3      	ldr	r3, [r4, #28]
    3fdc:	189a      	adds	r2, r3, r2
    3fde:	4295      	cmp	r5, r2
    3fe0:	d2de      	bcs.n	3fa0 <sync+0x14>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    3fe2:	78e6      	ldrb	r6, [r4, #3]
    3fe4:	2e01      	cmp	r6, #1
    3fe6:	d801      	bhi.n	3fec <sync+0x60>
    3fe8:	e7da      	b.n	3fa0 <sync+0x14>
    3fea:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
    3fec:	18ed      	adds	r5, r5, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    3fee:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    3ff0:	7860      	ldrb	r0, [r4, #1]
    3ff2:	2301      	movs	r3, #1
    3ff4:	002a      	movs	r2, r5
    3ff6:	0039      	movs	r1, r7
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    3ff8:	b2f6      	uxtb	r6, r6
					disk_write(fs->drv, fs->win, wsect, 1);
    3ffa:	47c0      	blx	r8
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    3ffc:	2e01      	cmp	r6, #1
    3ffe:	d1f4      	bne.n	3fea <sync+0x5e>
    4000:	e7ce      	b.n	3fa0 <sync+0x14>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    4002:	7963      	ldrb	r3, [r4, #5]
    4004:	2b00      	cmp	r3, #0
    4006:	d0ce      	beq.n	3fa6 <sync+0x1a>
    4008:	0025      	movs	r5, r4
			fs->winsect = 0;
    400a:	2600      	movs	r6, #0
    400c:	2280      	movs	r2, #128	; 0x80
    400e:	3530      	adds	r5, #48	; 0x30
    4010:	0092      	lsls	r2, r2, #2
    4012:	2100      	movs	r1, #0
    4014:	0028      	movs	r0, r5
    4016:	4b1a      	ldr	r3, [pc, #104]	; (4080 <sync+0xf4>)
    4018:	62e6      	str	r6, [r4, #44]	; 0x2c
    401a:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    401c:	2255      	movs	r2, #85	; 0x55
    401e:	4b19      	ldr	r3, [pc, #100]	; (4084 <sync+0xf8>)
    4020:	54e2      	strb	r2, [r4, r3]
    4022:	4b19      	ldr	r3, [pc, #100]	; (4088 <sync+0xfc>)
    4024:	3255      	adds	r2, #85	; 0x55
    4026:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    4028:	4b18      	ldr	r3, [pc, #96]	; (408c <sync+0x100>)
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    402a:	4a19      	ldr	r2, [pc, #100]	; (4090 <sync+0x104>)
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    402c:	6323      	str	r3, [r4, #48]	; 0x30
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    402e:	2385      	movs	r3, #133	; 0x85
    4030:	009b      	lsls	r3, r3, #2
    4032:	50e2      	str	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    4034:	2286      	movs	r2, #134	; 0x86
    4036:	6923      	ldr	r3, [r4, #16]
    4038:	0092      	lsls	r2, r2, #2
    403a:	54a3      	strb	r3, [r4, r2]
    403c:	4a15      	ldr	r2, [pc, #84]	; (4094 <sync+0x108>)
    403e:	0a19      	lsrs	r1, r3, #8
    4040:	54a1      	strb	r1, [r4, r2]
    4042:	4a15      	ldr	r2, [pc, #84]	; (4098 <sync+0x10c>)
    4044:	0c19      	lsrs	r1, r3, #16
    4046:	54a1      	strb	r1, [r4, r2]
    4048:	4a14      	ldr	r2, [pc, #80]	; (409c <sync+0x110>)
    404a:	0e1b      	lsrs	r3, r3, #24
    404c:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    404e:	68e3      	ldr	r3, [r4, #12]
    4050:	3201      	adds	r2, #1
    4052:	54a3      	strb	r3, [r4, r2]
    4054:	4a12      	ldr	r2, [pc, #72]	; (40a0 <sync+0x114>)
    4056:	0a19      	lsrs	r1, r3, #8
    4058:	54a1      	strb	r1, [r4, r2]
    405a:	4a12      	ldr	r2, [pc, #72]	; (40a4 <sync+0x118>)
    405c:	0c19      	lsrs	r1, r3, #16
    405e:	54a1      	strb	r1, [r4, r2]
    4060:	4a11      	ldr	r2, [pc, #68]	; (40a8 <sync+0x11c>)
    4062:	0e1b      	lsrs	r3, r3, #24
    4064:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    4066:	0029      	movs	r1, r5
    4068:	7860      	ldrb	r0, [r4, #1]
    406a:	2301      	movs	r3, #1
    406c:	6962      	ldr	r2, [r4, #20]
    406e:	4d03      	ldr	r5, [pc, #12]	; (407c <sync+0xf0>)
    4070:	47a8      	blx	r5
			fs->fsi_flag = 0;
    4072:	7166      	strb	r6, [r4, #5]
    4074:	e797      	b.n	3fa6 <sync+0x1a>
    4076:	46c0      	nop			; (mov r8, r8)
    4078:	00003e45 	.word	0x00003e45
    407c:	00003dc1 	.word	0x00003dc1
    4080:	0001fdfd 	.word	0x0001fdfd
    4084:	0000022e 	.word	0x0000022e
    4088:	0000022f 	.word	0x0000022f
    408c:	41615252 	.word	0x41615252
    4090:	61417272 	.word	0x61417272
    4094:	00000219 	.word	0x00000219
    4098:	0000021a 	.word	0x0000021a
    409c:	0000021b 	.word	0x0000021b
    40a0:	0000021d 	.word	0x0000021d
    40a4:	0000021e 	.word	0x0000021e
    40a8:	0000021f 	.word	0x0000021f

000040ac <put_fat.part.4>:
/*-----------------------------------------------------------------------*/
/* FAT access - Change value of a FAT entry                              */
/*-----------------------------------------------------------------------*/
#if !_FS_READONLY

static FRESULT put_fat (
    40ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    40ae:	4657      	mov	r7, sl
    40b0:	4645      	mov	r5, r8
    40b2:	46de      	mov	lr, fp
    40b4:	464e      	mov	r6, r9
    40b6:	b5e0      	push	{r5, r6, r7, lr}

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
    40b8:	7803      	ldrb	r3, [r0, #0]
static FRESULT put_fat (
    40ba:	b083      	sub	sp, #12
    40bc:	0004      	movs	r4, r0
    40be:	000d      	movs	r5, r1
    40c0:	0017      	movs	r7, r2
		switch (fs->fs_type) {
    40c2:	2b02      	cmp	r3, #2
    40c4:	d100      	bne.n	40c8 <put_fat.part.4+0x1c>
    40c6:	e0b2      	b.n	422e <put_fat.part.4+0x182>
    40c8:	2b03      	cmp	r3, #3
    40ca:	d100      	bne.n	40ce <put_fat.part.4+0x22>
    40cc:	e07b      	b.n	41c6 <put_fat.part.4+0x11a>
			val |= LD_DWORD(p) & 0xF0000000;
			ST_DWORD(p, val);
			break;

		default :
			res = FR_INT_ERR;
    40ce:	2002      	movs	r0, #2
		switch (fs->fs_type) {
    40d0:	2b01      	cmp	r3, #1
    40d2:	d008      	beq.n	40e6 <put_fat.part.4+0x3a>
		}
		fs->wflag = 1;
    40d4:	2301      	movs	r3, #1
    40d6:	7123      	strb	r3, [r4, #4]
	}

	return res;
}
    40d8:	b003      	add	sp, #12
    40da:	bc3c      	pop	{r2, r3, r4, r5}
    40dc:	4690      	mov	r8, r2
    40de:	4699      	mov	r9, r3
    40e0:	46a2      	mov	sl, r4
    40e2:	46ab      	mov	fp, r5
    40e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bc = clst; bc += bc / 2;
    40e6:	084e      	lsrs	r6, r1, #1
    40e8:	1873      	adds	r3, r6, r1
    40ea:	9300      	str	r3, [sp, #0]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    40ec:	0a5b      	lsrs	r3, r3, #9
    40ee:	4699      	mov	r9, r3
    40f0:	6a22      	ldr	r2, [r4, #32]
	wsect = fs->winsect;
    40f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    40f4:	4491      	add	r9, r2
	wsect = fs->winsect;
    40f6:	4698      	mov	r8, r3
	if (wsect != sector) {	/* Changed current window */
    40f8:	4599      	cmp	r9, r3
    40fa:	d00a      	beq.n	4112 <put_fat.part.4+0x66>
		if (fs->wflag) {	/* Write back dirty window if needed */
    40fc:	7923      	ldrb	r3, [r4, #4]
    40fe:	2b00      	cmp	r3, #0
    4100:	d000      	beq.n	4104 <put_fat.part.4+0x58>
    4102:	e13f      	b.n	4384 <put_fat.part.4+0x2d8>
		if (sector) {
    4104:	464b      	mov	r3, r9
    4106:	2b00      	cmp	r3, #0
    4108:	d000      	beq.n	410c <put_fat.part.4+0x60>
    410a:	e16f      	b.n	43ec <put_fat.part.4+0x340>
    410c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    410e:	6a22      	ldr	r2, [r4, #32]
    4110:	4698      	mov	r8, r3
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    4112:	2101      	movs	r1, #1
			p = &fs->win[bc % SS(fs)];
    4114:	9b00      	ldr	r3, [sp, #0]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    4116:	400d      	ands	r5, r1
			p = &fs->win[bc % SS(fs)];
    4118:	05db      	lsls	r3, r3, #23
    411a:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    411c:	46a9      	mov	r9, r5
    411e:	2d00      	cmp	r5, #0
    4120:	d100      	bne.n	4124 <put_fat.part.4+0x78>
    4122:	e0ad      	b.n	4280 <put_fat.part.4+0x1d4>
    4124:	200f      	movs	r0, #15
    4126:	18e3      	adds	r3, r4, r3
    4128:	3330      	adds	r3, #48	; 0x30
    412a:	781d      	ldrb	r5, [r3, #0]
    412c:	4005      	ands	r5, r0
    412e:	0138      	lsls	r0, r7, #4
    4130:	4328      	orrs	r0, r5
    4132:	7018      	strb	r0, [r3, #0]
			bc++;
    4134:	9b00      	ldr	r3, [sp, #0]
			fs->wflag = 1;
    4136:	7121      	strb	r1, [r4, #4]
			bc++;
    4138:	3301      	adds	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    413a:	0a5d      	lsrs	r5, r3, #9
    413c:	18ad      	adds	r5, r5, r2
			bc++;
    413e:	9300      	str	r3, [sp, #0]
	if (wsect != sector) {	/* Changed current window */
    4140:	4545      	cmp	r5, r8
    4142:	d100      	bne.n	4146 <put_fat.part.4+0x9a>
    4144:	e16c      	b.n	4420 <put_fat.part.4+0x374>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    4146:	2330      	movs	r3, #48	; 0x30
    4148:	469c      	mov	ip, r3
    414a:	44a4      	add	ip, r4
    414c:	4663      	mov	r3, ip
    414e:	9301      	str	r3, [sp, #4]
    4150:	4661      	mov	r1, ip
    4152:	7860      	ldrb	r0, [r4, #1]
    4154:	2301      	movs	r3, #1
    4156:	4642      	mov	r2, r8
    4158:	4eb3      	ldr	r6, [pc, #716]	; (4428 <put_fat.part.4+0x37c>)
    415a:	47b0      	blx	r6
    415c:	2800      	cmp	r0, #0
    415e:	d000      	beq.n	4162 <put_fat.part.4+0xb6>
    4160:	e14d      	b.n	43fe <put_fat.part.4+0x352>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    4162:	69e3      	ldr	r3, [r4, #28]
    4164:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
    4166:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    4168:	189a      	adds	r2, r3, r2
    416a:	4542      	cmp	r2, r8
    416c:	d91e      	bls.n	41ac <put_fat.part.4+0x100>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    416e:	78e2      	ldrb	r2, [r4, #3]
    4170:	4693      	mov	fp, r2
    4172:	2a01      	cmp	r2, #1
    4174:	d91a      	bls.n	41ac <put_fat.part.4+0x100>
    4176:	4642      	mov	r2, r8
    4178:	0031      	movs	r1, r6
    417a:	9800      	ldr	r0, [sp, #0]
    417c:	46a8      	mov	r8, r5
    417e:	0026      	movs	r6, r4
    4180:	4682      	mov	sl, r0
    4182:	465c      	mov	r4, fp
    4184:	0015      	movs	r5, r2
    4186:	46bb      	mov	fp, r7
    4188:	000f      	movs	r7, r1
    418a:	e000      	b.n	418e <put_fat.part.4+0xe2>
    418c:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
    418e:	18ed      	adds	r5, r5, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4190:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    4192:	7870      	ldrb	r0, [r6, #1]
    4194:	2301      	movs	r3, #1
    4196:	002a      	movs	r2, r5
    4198:	9901      	ldr	r1, [sp, #4]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    419a:	b2e4      	uxtb	r4, r4
					disk_write(fs->drv, fs->win, wsect, 1);
    419c:	47b8      	blx	r7
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    419e:	2c01      	cmp	r4, #1
    41a0:	d1f4      	bne.n	418c <put_fat.part.4+0xe0>
    41a2:	4653      	mov	r3, sl
    41a4:	4645      	mov	r5, r8
    41a6:	0034      	movs	r4, r6
    41a8:	465f      	mov	r7, fp
    41aa:	9300      	str	r3, [sp, #0]
		if (sector) {
    41ac:	2d00      	cmp	r5, #0
    41ae:	d000      	beq.n	41b2 <put_fat.part.4+0x106>
    41b0:	e12c      	b.n	440c <put_fat.part.4+0x360>
			p = &fs->win[bc % SS(fs)];
    41b2:	9b00      	ldr	r3, [sp, #0]
    41b4:	05de      	lsls	r6, r3, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    41b6:	464b      	mov	r3, r9
			p = &fs->win[bc % SS(fs)];
    41b8:	0df6      	lsrs	r6, r6, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    41ba:	2b00      	cmp	r3, #0
    41bc:	d06e      	beq.n	429c <put_fat.part.4+0x1f0>
    41be:	093f      	lsrs	r7, r7, #4
    41c0:	b2ff      	uxtb	r7, r7
    41c2:	19a6      	adds	r6, r4, r6
    41c4:	e073      	b.n	42ae <put_fat.part.4+0x202>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    41c6:	6a03      	ldr	r3, [r0, #32]
    41c8:	09ce      	lsrs	r6, r1, #7
    41ca:	469c      	mov	ip, r3
    41cc:	0033      	movs	r3, r6
    41ce:	4463      	add	r3, ip
    41d0:	001a      	movs	r2, r3
    41d2:	9300      	str	r3, [sp, #0]
	wsect = fs->winsect;
    41d4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    41d6:	4698      	mov	r8, r3
	if (wsect != sector) {	/* Changed current window */
    41d8:	4542      	cmp	r2, r8
    41da:	d012      	beq.n	4202 <put_fat.part.4+0x156>
		if (fs->wflag) {	/* Write back dirty window if needed */
    41dc:	7903      	ldrb	r3, [r0, #4]
    41de:	2b00      	cmp	r3, #0
    41e0:	d169      	bne.n	42b6 <put_fat.part.4+0x20a>
		if (sector) {
    41e2:	9b00      	ldr	r3, [sp, #0]
    41e4:	2b00      	cmp	r3, #0
    41e6:	d00c      	beq.n	4202 <put_fat.part.4+0x156>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    41e8:	0021      	movs	r1, r4
    41ea:	001a      	movs	r2, r3
    41ec:	7860      	ldrb	r0, [r4, #1]
    41ee:	2301      	movs	r3, #1
    41f0:	3130      	adds	r1, #48	; 0x30
    41f2:	4e8e      	ldr	r6, [pc, #568]	; (442c <put_fat.part.4+0x380>)
    41f4:	4691      	mov	r9, r2
    41f6:	47b0      	blx	r6
    41f8:	2800      	cmp	r0, #0
    41fa:	d000      	beq.n	41fe <put_fat.part.4+0x152>
    41fc:	e0ff      	b.n	43fe <put_fat.part.4+0x352>
			fs->winsect = sector;
    41fe:	464b      	mov	r3, r9
    4200:	62e3      	str	r3, [r4, #44]	; 0x2c
			p = &fs->win[clst * 4 % SS(fs)];
    4202:	23fe      	movs	r3, #254	; 0xfe
    4204:	00ad      	lsls	r5, r5, #2
    4206:	005b      	lsls	r3, r3, #1
    4208:	401d      	ands	r5, r3
    420a:	002a      	movs	r2, r5
    420c:	3230      	adds	r2, #48	; 0x30
    420e:	18a2      	adds	r2, r4, r2
			val |= LD_DWORD(p) & 0xF0000000;
    4210:	78d3      	ldrb	r3, [r2, #3]
    4212:	1965      	adds	r5, r4, r5
    4214:	091b      	lsrs	r3, r3, #4
    4216:	071b      	lsls	r3, r3, #28
    4218:	431f      	orrs	r7, r3
			ST_DWORD(p, val);
    421a:	0a3b      	lsrs	r3, r7, #8
			val |= LD_DWORD(p) & 0xF0000000;
    421c:	3530      	adds	r5, #48	; 0x30
			ST_DWORD(p, val);
    421e:	702f      	strb	r7, [r5, #0]
    4220:	7053      	strb	r3, [r2, #1]
    4222:	0c3b      	lsrs	r3, r7, #16
    4224:	0e3f      	lsrs	r7, r7, #24
    4226:	7093      	strb	r3, [r2, #2]
    4228:	70d7      	strb	r7, [r2, #3]
    422a:	2000      	movs	r0, #0
    422c:	e752      	b.n	40d4 <put_fat.part.4+0x28>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    422e:	6a03      	ldr	r3, [r0, #32]
    4230:	0a0e      	lsrs	r6, r1, #8
    4232:	469c      	mov	ip, r3
    4234:	0033      	movs	r3, r6
    4236:	4463      	add	r3, ip
    4238:	001a      	movs	r2, r3
    423a:	9300      	str	r3, [sp, #0]
	wsect = fs->winsect;
    423c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    423e:	4698      	mov	r8, r3
	if (wsect != sector) {	/* Changed current window */
    4240:	4542      	cmp	r2, r8
    4242:	d012      	beq.n	426a <put_fat.part.4+0x1be>
		if (fs->wflag) {	/* Write back dirty window if needed */
    4244:	7903      	ldrb	r3, [r0, #4]
    4246:	2b00      	cmp	r3, #0
    4248:	d169      	bne.n	431e <put_fat.part.4+0x272>
		if (sector) {
    424a:	9b00      	ldr	r3, [sp, #0]
    424c:	2b00      	cmp	r3, #0
    424e:	d00c      	beq.n	426a <put_fat.part.4+0x1be>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    4250:	0021      	movs	r1, r4
    4252:	001a      	movs	r2, r3
    4254:	7860      	ldrb	r0, [r4, #1]
    4256:	2301      	movs	r3, #1
    4258:	3130      	adds	r1, #48	; 0x30
    425a:	4e74      	ldr	r6, [pc, #464]	; (442c <put_fat.part.4+0x380>)
    425c:	4691      	mov	r9, r2
    425e:	47b0      	blx	r6
    4260:	2800      	cmp	r0, #0
    4262:	d000      	beq.n	4266 <put_fat.part.4+0x1ba>
    4264:	e0cb      	b.n	43fe <put_fat.part.4+0x352>
			fs->winsect = sector;
    4266:	464b      	mov	r3, r9
    4268:	62e3      	str	r3, [r4, #44]	; 0x2c
			p = &fs->win[clst * 2 % SS(fs)];
    426a:	23ff      	movs	r3, #255	; 0xff
    426c:	006d      	lsls	r5, r5, #1
    426e:	005b      	lsls	r3, r3, #1
    4270:	401d      	ands	r5, r3
			ST_WORD(p, (WORD)val);
    4272:	1965      	adds	r5, r4, r5
    4274:	3530      	adds	r5, #48	; 0x30
    4276:	702f      	strb	r7, [r5, #0]
    4278:	0a3f      	lsrs	r7, r7, #8
    427a:	706f      	strb	r7, [r5, #1]
    427c:	2000      	movs	r0, #0
    427e:	e729      	b.n	40d4 <put_fat.part.4+0x28>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    4280:	18e3      	adds	r3, r4, r3
    4282:	3330      	adds	r3, #48	; 0x30
    4284:	701f      	strb	r7, [r3, #0]
			bc++;
    4286:	9b00      	ldr	r3, [sp, #0]
			fs->wflag = 1;
    4288:	7121      	strb	r1, [r4, #4]
			bc++;
    428a:	3301      	adds	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    428c:	0a5d      	lsrs	r5, r3, #9
    428e:	18ad      	adds	r5, r5, r2
			bc++;
    4290:	9300      	str	r3, [sp, #0]
	if (wsect != sector) {	/* Changed current window */
    4292:	4545      	cmp	r5, r8
    4294:	d000      	beq.n	4298 <put_fat.part.4+0x1ec>
    4296:	e756      	b.n	4146 <put_fat.part.4+0x9a>
			p = &fs->win[bc % SS(fs)];
    4298:	05de      	lsls	r6, r3, #23
    429a:	0df6      	lsrs	r6, r6, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    429c:	19a6      	adds	r6, r4, r6
    429e:	0033      	movs	r3, r6
    42a0:	220f      	movs	r2, #15
    42a2:	3330      	adds	r3, #48	; 0x30
    42a4:	781b      	ldrb	r3, [r3, #0]
    42a6:	0a3f      	lsrs	r7, r7, #8
    42a8:	4393      	bics	r3, r2
    42aa:	4017      	ands	r7, r2
    42ac:	431f      	orrs	r7, r3
    42ae:	3630      	adds	r6, #48	; 0x30
    42b0:	7037      	strb	r7, [r6, #0]
    42b2:	2000      	movs	r0, #0
    42b4:	e70e      	b.n	40d4 <put_fat.part.4+0x28>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    42b6:	2330      	movs	r3, #48	; 0x30
    42b8:	469b      	mov	fp, r3
    42ba:	4e5b      	ldr	r6, [pc, #364]	; (4428 <put_fat.part.4+0x37c>)
    42bc:	4483      	add	fp, r0
    42be:	3b2f      	subs	r3, #47	; 0x2f
    42c0:	7840      	ldrb	r0, [r0, #1]
    42c2:	4642      	mov	r2, r8
    42c4:	4659      	mov	r1, fp
    42c6:	46b2      	mov	sl, r6
    42c8:	47b0      	blx	r6
    42ca:	2800      	cmp	r0, #0
    42cc:	d000      	beq.n	42d0 <put_fat.part.4+0x224>
    42ce:	e096      	b.n	43fe <put_fat.part.4+0x352>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    42d0:	69e3      	ldr	r3, [r4, #28]
    42d2:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
    42d4:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    42d6:	189a      	adds	r2, r3, r2
    42d8:	4590      	cmp	r8, r2
    42da:	d282      	bcs.n	41e2 <put_fat.part.4+0x136>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    42dc:	78e2      	ldrb	r2, [r4, #3]
    42de:	4691      	mov	r9, r2
    42e0:	2a01      	cmp	r2, #1
    42e2:	d800      	bhi.n	42e6 <put_fat.part.4+0x23a>
    42e4:	e77d      	b.n	41e2 <put_fat.part.4+0x136>
    42e6:	9a00      	ldr	r2, [sp, #0]
    42e8:	0029      	movs	r1, r5
    42ea:	4645      	mov	r5, r8
    42ec:	4690      	mov	r8, r2
    42ee:	003a      	movs	r2, r7
    42f0:	0026      	movs	r6, r4
    42f2:	465f      	mov	r7, fp
    42f4:	464c      	mov	r4, r9
    42f6:	4693      	mov	fp, r2
    42f8:	4689      	mov	r9, r1
    42fa:	e000      	b.n	42fe <put_fat.part.4+0x252>
    42fc:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
    42fe:	18ed      	adds	r5, r5, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4300:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    4302:	7870      	ldrb	r0, [r6, #1]
    4304:	2301      	movs	r3, #1
    4306:	002a      	movs	r2, r5
    4308:	0039      	movs	r1, r7
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    430a:	b2e4      	uxtb	r4, r4
					disk_write(fs->drv, fs->win, wsect, 1);
    430c:	47d0      	blx	sl
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    430e:	2c01      	cmp	r4, #1
    4310:	d1f4      	bne.n	42fc <put_fat.part.4+0x250>
    4312:	4643      	mov	r3, r8
    4314:	0034      	movs	r4, r6
    4316:	9300      	str	r3, [sp, #0]
    4318:	464d      	mov	r5, r9
    431a:	465f      	mov	r7, fp
    431c:	e761      	b.n	41e2 <put_fat.part.4+0x136>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    431e:	2330      	movs	r3, #48	; 0x30
    4320:	469b      	mov	fp, r3
    4322:	4e41      	ldr	r6, [pc, #260]	; (4428 <put_fat.part.4+0x37c>)
    4324:	4483      	add	fp, r0
    4326:	3b2f      	subs	r3, #47	; 0x2f
    4328:	7840      	ldrb	r0, [r0, #1]
    432a:	4642      	mov	r2, r8
    432c:	4659      	mov	r1, fp
    432e:	46b2      	mov	sl, r6
    4330:	47b0      	blx	r6
    4332:	2800      	cmp	r0, #0
    4334:	d163      	bne.n	43fe <put_fat.part.4+0x352>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    4336:	69e3      	ldr	r3, [r4, #28]
    4338:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
    433a:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    433c:	189a      	adds	r2, r3, r2
    433e:	4590      	cmp	r8, r2
    4340:	d283      	bcs.n	424a <put_fat.part.4+0x19e>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4342:	78e2      	ldrb	r2, [r4, #3]
    4344:	4691      	mov	r9, r2
    4346:	2a01      	cmp	r2, #1
    4348:	d800      	bhi.n	434c <put_fat.part.4+0x2a0>
    434a:	e77e      	b.n	424a <put_fat.part.4+0x19e>
    434c:	9a00      	ldr	r2, [sp, #0]
    434e:	0029      	movs	r1, r5
    4350:	4645      	mov	r5, r8
    4352:	4690      	mov	r8, r2
    4354:	003a      	movs	r2, r7
    4356:	0026      	movs	r6, r4
    4358:	465f      	mov	r7, fp
    435a:	464c      	mov	r4, r9
    435c:	4693      	mov	fp, r2
    435e:	4689      	mov	r9, r1
    4360:	e000      	b.n	4364 <put_fat.part.4+0x2b8>
    4362:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
    4364:	18ed      	adds	r5, r5, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4366:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    4368:	7870      	ldrb	r0, [r6, #1]
    436a:	2301      	movs	r3, #1
    436c:	002a      	movs	r2, r5
    436e:	0039      	movs	r1, r7
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4370:	b2e4      	uxtb	r4, r4
					disk_write(fs->drv, fs->win, wsect, 1);
    4372:	47d0      	blx	sl
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4374:	2c01      	cmp	r4, #1
    4376:	d1f4      	bne.n	4362 <put_fat.part.4+0x2b6>
    4378:	4643      	mov	r3, r8
    437a:	0034      	movs	r4, r6
    437c:	9300      	str	r3, [sp, #0]
    437e:	464d      	mov	r5, r9
    4380:	465f      	mov	r7, fp
    4382:	e762      	b.n	424a <put_fat.part.4+0x19e>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    4384:	2330      	movs	r3, #48	; 0x30
    4386:	469c      	mov	ip, r3
    4388:	44a4      	add	ip, r4
    438a:	4663      	mov	r3, ip
    438c:	9301      	str	r3, [sp, #4]
    438e:	4661      	mov	r1, ip
    4390:	7860      	ldrb	r0, [r4, #1]
    4392:	2301      	movs	r3, #1
    4394:	4642      	mov	r2, r8
    4396:	4e24      	ldr	r6, [pc, #144]	; (4428 <put_fat.part.4+0x37c>)
    4398:	47b0      	blx	r6
    439a:	2800      	cmp	r0, #0
    439c:	d12f      	bne.n	43fe <put_fat.part.4+0x352>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    439e:	69e3      	ldr	r3, [r4, #28]
    43a0:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
    43a2:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    43a4:	189a      	adds	r2, r3, r2
    43a6:	4590      	cmp	r8, r2
    43a8:	d300      	bcc.n	43ac <put_fat.part.4+0x300>
    43aa:	e6ab      	b.n	4104 <put_fat.part.4+0x58>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    43ac:	78e2      	ldrb	r2, [r4, #3]
    43ae:	4693      	mov	fp, r2
    43b0:	2a01      	cmp	r2, #1
    43b2:	d800      	bhi.n	43b6 <put_fat.part.4+0x30a>
    43b4:	e6a6      	b.n	4104 <put_fat.part.4+0x58>
    43b6:	0032      	movs	r2, r6
    43b8:	9900      	ldr	r1, [sp, #0]
    43ba:	46aa      	mov	sl, r5
    43bc:	0026      	movs	r6, r4
    43be:	4645      	mov	r5, r8
    43c0:	465c      	mov	r4, fp
    43c2:	4688      	mov	r8, r1
    43c4:	46bb      	mov	fp, r7
    43c6:	0017      	movs	r7, r2
    43c8:	e000      	b.n	43cc <put_fat.part.4+0x320>
    43ca:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
    43cc:	18ed      	adds	r5, r5, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    43ce:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    43d0:	7870      	ldrb	r0, [r6, #1]
    43d2:	2301      	movs	r3, #1
    43d4:	002a      	movs	r2, r5
    43d6:	9901      	ldr	r1, [sp, #4]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    43d8:	b2e4      	uxtb	r4, r4
					disk_write(fs->drv, fs->win, wsect, 1);
    43da:	47b8      	blx	r7
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    43dc:	2c01      	cmp	r4, #1
    43de:	d1f4      	bne.n	43ca <put_fat.part.4+0x31e>
    43e0:	4643      	mov	r3, r8
    43e2:	0034      	movs	r4, r6
    43e4:	9300      	str	r3, [sp, #0]
    43e6:	4655      	mov	r5, sl
    43e8:	465f      	mov	r7, fp
    43ea:	e68b      	b.n	4104 <put_fat.part.4+0x58>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    43ec:	0021      	movs	r1, r4
    43ee:	7860      	ldrb	r0, [r4, #1]
    43f0:	2301      	movs	r3, #1
    43f2:	464a      	mov	r2, r9
    43f4:	3130      	adds	r1, #48	; 0x30
    43f6:	4e0d      	ldr	r6, [pc, #52]	; (442c <put_fat.part.4+0x380>)
    43f8:	47b0      	blx	r6
    43fa:	2800      	cmp	r0, #0
    43fc:	d001      	beq.n	4402 <put_fat.part.4+0x356>
			res = FR_INT_ERR;
    43fe:	2001      	movs	r0, #1
    4400:	e668      	b.n	40d4 <put_fat.part.4+0x28>
			fs->winsect = sector;
    4402:	464b      	mov	r3, r9
    4404:	6a22      	ldr	r2, [r4, #32]
    4406:	62e3      	str	r3, [r4, #44]	; 0x2c
    4408:	46c8      	mov	r8, r9
    440a:	e682      	b.n	4112 <put_fat.part.4+0x66>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    440c:	7860      	ldrb	r0, [r4, #1]
    440e:	2301      	movs	r3, #1
    4410:	002a      	movs	r2, r5
    4412:	9901      	ldr	r1, [sp, #4]
    4414:	4e05      	ldr	r6, [pc, #20]	; (442c <put_fat.part.4+0x380>)
    4416:	47b0      	blx	r6
    4418:	2800      	cmp	r0, #0
    441a:	d1f0      	bne.n	43fe <put_fat.part.4+0x352>
			fs->winsect = sector;
    441c:	62e5      	str	r5, [r4, #44]	; 0x2c
    441e:	e6c8      	b.n	41b2 <put_fat.part.4+0x106>
			p = &fs->win[bc % SS(fs)];
    4420:	9b00      	ldr	r3, [sp, #0]
    4422:	05de      	lsls	r6, r3, #23
    4424:	0df6      	lsrs	r6, r6, #23
    4426:	e6ca      	b.n	41be <put_fat.part.4+0x112>
    4428:	00003dc1 	.word	0x00003dc1
    442c:	00003d3d 	.word	0x00003d3d

00004430 <remove_chain.part.6>:
/*-----------------------------------------------------------------------*/
/* FAT handling - Remove a cluster chain                                 */
/*-----------------------------------------------------------------------*/
#if !_FS_READONLY
static
FRESULT remove_chain (
    4430:	b5f0      	push	{r4, r5, r6, r7, lr}
    4432:	4657      	mov	r7, sl
    4434:	464e      	mov	r6, r9
    4436:	46de      	mov	lr, fp
    4438:	4645      	mov	r5, r8
    443a:	0004      	movs	r4, r0
    443c:	b5e0      	push	{r5, r6, r7, lr}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    443e:	4bc7      	ldr	r3, [pc, #796]	; (475c <remove_chain.part.6+0x32c>)
FRESULT remove_chain (
    4440:	b085      	sub	sp, #20
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    4442:	469a      	mov	sl, r3
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    4444:	69a3      	ldr	r3, [r4, #24]
FRESULT remove_chain (
    4446:	000e      	movs	r6, r1
		while (clst < fs->n_fatent) {			/* Not a last link? */
    4448:	429e      	cmp	r6, r3
    444a:	d300      	bcc.n	444e <remove_chain.part.6+0x1e>
    444c:	e087      	b.n	455e <remove_chain.part.6+0x12e>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    444e:	2e01      	cmp	r6, #1
    4450:	d96f      	bls.n	4532 <remove_chain.part.6+0x102>
	switch (fs->fs_type) {
    4452:	7823      	ldrb	r3, [r4, #0]
    4454:	2b02      	cmp	r3, #2
    4456:	d100      	bne.n	445a <remove_chain.part.6+0x2a>
    4458:	e083      	b.n	4562 <remove_chain.part.6+0x132>
    445a:	2b03      	cmp	r3, #3
    445c:	d040      	beq.n	44e0 <remove_chain.part.6+0xb0>
    445e:	2b01      	cmp	r3, #1
    4460:	d007      	beq.n	4472 <remove_chain.part.6+0x42>
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    4462:	2001      	movs	r0, #1
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
    4464:	b005      	add	sp, #20
    4466:	bc3c      	pop	{r2, r3, r4, r5}
    4468:	4690      	mov	r8, r2
    446a:	4699      	mov	r9, r3
    446c:	46a2      	mov	sl, r4
    446e:	46ab      	mov	fp, r5
    4470:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bc = (UINT)clst; bc += bc / 2;
    4472:	0875      	lsrs	r5, r6, #1
    4474:	19ad      	adds	r5, r5, r6
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    4476:	0a6b      	lsrs	r3, r5, #9
    4478:	4698      	mov	r8, r3
    447a:	6a22      	ldr	r2, [r4, #32]
	wsect = fs->winsect;
    447c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    447e:	4490      	add	r8, r2
	wsect = fs->winsect;
    4480:	001f      	movs	r7, r3
	if (wsect != sector) {	/* Changed current window */
    4482:	4598      	cmp	r8, r3
    4484:	d00a      	beq.n	449c <remove_chain.part.6+0x6c>
		if (fs->wflag) {	/* Write back dirty window if needed */
    4486:	7923      	ldrb	r3, [r4, #4]
    4488:	2b00      	cmp	r3, #0
    448a:	d000      	beq.n	448e <remove_chain.part.6+0x5e>
    448c:	e102      	b.n	4694 <remove_chain.part.6+0x264>
		if (sector) {
    448e:	4643      	mov	r3, r8
    4490:	2b00      	cmp	r3, #0
    4492:	d000      	beq.n	4496 <remove_chain.part.6+0x66>
    4494:	e088      	b.n	45a8 <remove_chain.part.6+0x178>
    4496:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4498:	6a22      	ldr	r2, [r4, #32]
    449a:	001f      	movs	r7, r3
		wc = fs->win[bc % SS(fs)]; bc++;
    449c:	05eb      	lsls	r3, r5, #23
    449e:	0ddb      	lsrs	r3, r3, #23
    44a0:	18e3      	adds	r3, r4, r3
    44a2:	3330      	adds	r3, #48	; 0x30
    44a4:	781b      	ldrb	r3, [r3, #0]
    44a6:	3501      	adds	r5, #1
    44a8:	4698      	mov	r8, r3
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    44aa:	0a6b      	lsrs	r3, r5, #9
    44ac:	4699      	mov	r9, r3
    44ae:	4491      	add	r9, r2
	if (wsect != sector) {	/* Changed current window */
    44b0:	45b9      	cmp	r9, r7
    44b2:	d007      	beq.n	44c4 <remove_chain.part.6+0x94>
		if (fs->wflag) {	/* Write back dirty window if needed */
    44b4:	7923      	ldrb	r3, [r4, #4]
    44b6:	2b00      	cmp	r3, #0
    44b8:	d000      	beq.n	44bc <remove_chain.part.6+0x8c>
    44ba:	e12c      	b.n	4716 <remove_chain.part.6+0x2e6>
		if (sector) {
    44bc:	464b      	mov	r3, r9
    44be:	2b00      	cmp	r3, #0
    44c0:	d000      	beq.n	44c4 <remove_chain.part.6+0x94>
    44c2:	e11b      	b.n	46fc <remove_chain.part.6+0x2cc>
		wc |= fs->win[bc % SS(fs)] << 8;
    44c4:	4642      	mov	r2, r8
    44c6:	05ed      	lsls	r5, r5, #23
    44c8:	0ded      	lsrs	r5, r5, #23
    44ca:	1965      	adds	r5, r4, r5
    44cc:	3530      	adds	r5, #48	; 0x30
    44ce:	782b      	ldrb	r3, [r5, #0]
    44d0:	021b      	lsls	r3, r3, #8
    44d2:	4313      	orrs	r3, r2
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    44d4:	091d      	lsrs	r5, r3, #4
    44d6:	07f2      	lsls	r2, r6, #31
    44d8:	d424      	bmi.n	4524 <remove_chain.part.6+0xf4>
    44da:	051d      	lsls	r5, r3, #20
    44dc:	0d2d      	lsrs	r5, r5, #20
    44de:	e021      	b.n	4524 <remove_chain.part.6+0xf4>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    44e0:	6a23      	ldr	r3, [r4, #32]
    44e2:	09f5      	lsrs	r5, r6, #7
    44e4:	469c      	mov	ip, r3
	wsect = fs->winsect;
    44e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    44e8:	4465      	add	r5, ip
	wsect = fs->winsect;
    44ea:	469b      	mov	fp, r3
	if (wsect != sector) {	/* Changed current window */
    44ec:	429d      	cmp	r5, r3
    44ee:	d004      	beq.n	44fa <remove_chain.part.6+0xca>
		if (fs->wflag) {	/* Write back dirty window if needed */
    44f0:	7923      	ldrb	r3, [r4, #4]
    44f2:	2b00      	cmp	r3, #0
    44f4:	d173      	bne.n	45de <remove_chain.part.6+0x1ae>
		if (sector) {
    44f6:	2d00      	cmp	r5, #0
    44f8:	d165      	bne.n	45c6 <remove_chain.part.6+0x196>
		p = &fs->win[clst * 4 % SS(fs)];
    44fa:	22fe      	movs	r2, #254	; 0xfe
    44fc:	00b3      	lsls	r3, r6, #2
    44fe:	0052      	lsls	r2, r2, #1
    4500:	4013      	ands	r3, r2
    4502:	001a      	movs	r2, r3
    4504:	3230      	adds	r2, #48	; 0x30
    4506:	18a2      	adds	r2, r4, r2
		return LD_DWORD(p) & 0x0FFFFFFF;
    4508:	78d5      	ldrb	r5, [r2, #3]
    450a:	7891      	ldrb	r1, [r2, #2]
    450c:	18e3      	adds	r3, r4, r3
    450e:	3330      	adds	r3, #48	; 0x30
    4510:	781b      	ldrb	r3, [r3, #0]
    4512:	062d      	lsls	r5, r5, #24
    4514:	0409      	lsls	r1, r1, #16
    4516:	430d      	orrs	r5, r1
    4518:	431d      	orrs	r5, r3
    451a:	7853      	ldrb	r3, [r2, #1]
    451c:	021b      	lsls	r3, r3, #8
    451e:	431d      	orrs	r5, r3
    4520:	012d      	lsls	r5, r5, #4
    4522:	092d      	lsrs	r5, r5, #4
			if (nxt == 0) break;				/* Empty cluster? */
    4524:	2d00      	cmp	r5, #0
    4526:	d01a      	beq.n	455e <remove_chain.part.6+0x12e>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    4528:	2d01      	cmp	r5, #1
    452a:	d002      	beq.n	4532 <remove_chain.part.6+0x102>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    452c:	69a3      	ldr	r3, [r4, #24]
    452e:	429e      	cmp	r6, r3
    4530:	d301      	bcc.n	4536 <remove_chain.part.6+0x106>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    4532:	2002      	movs	r0, #2
    4534:	e796      	b.n	4464 <remove_chain.part.6+0x34>
    4536:	2200      	movs	r2, #0
    4538:	0031      	movs	r1, r6
    453a:	0020      	movs	r0, r4
    453c:	4b88      	ldr	r3, [pc, #544]	; (4760 <remove_chain.part.6+0x330>)
    453e:	4798      	blx	r3
			if (res != FR_OK) break;
    4540:	2800      	cmp	r0, #0
    4542:	d000      	beq.n	4546 <remove_chain.part.6+0x116>
    4544:	e78e      	b.n	4464 <remove_chain.part.6+0x34>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    4546:	6923      	ldr	r3, [r4, #16]
    4548:	1c5a      	adds	r2, r3, #1
    454a:	d003      	beq.n	4554 <remove_chain.part.6+0x124>
				fs->free_clust++;
    454c:	3301      	adds	r3, #1
    454e:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
    4550:	2301      	movs	r3, #1
    4552:	7163      	strb	r3, [r4, #5]
		while (clst < fs->n_fatent) {			/* Not a last link? */
    4554:	69a3      	ldr	r3, [r4, #24]
FRESULT remove_chain (
    4556:	002e      	movs	r6, r5
		while (clst < fs->n_fatent) {			/* Not a last link? */
    4558:	429e      	cmp	r6, r3
    455a:	d200      	bcs.n	455e <remove_chain.part.6+0x12e>
    455c:	e777      	b.n	444e <remove_chain.part.6+0x1e>
FRESULT remove_chain (
    455e:	2000      	movs	r0, #0
    4560:	e780      	b.n	4464 <remove_chain.part.6+0x34>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    4562:	6a23      	ldr	r3, [r4, #32]
    4564:	0a35      	lsrs	r5, r6, #8
    4566:	469c      	mov	ip, r3
	wsect = fs->winsect;
    4568:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    456a:	4465      	add	r5, ip
	if (wsect != sector) {	/* Changed current window */
    456c:	42bd      	cmp	r5, r7
    456e:	d004      	beq.n	457a <remove_chain.part.6+0x14a>
		if (fs->wflag) {	/* Write back dirty window if needed */
    4570:	7923      	ldrb	r3, [r4, #4]
    4572:	2b00      	cmp	r3, #0
    4574:	d162      	bne.n	463c <remove_chain.part.6+0x20c>
		if (sector) {
    4576:	2d00      	cmp	r5, #0
    4578:	d10a      	bne.n	4590 <remove_chain.part.6+0x160>
		p = &fs->win[clst * 2 % SS(fs)];
    457a:	22ff      	movs	r2, #255	; 0xff
    457c:	0073      	lsls	r3, r6, #1
    457e:	0052      	lsls	r2, r2, #1
    4580:	4013      	ands	r3, r2
		return LD_WORD(p);
    4582:	18e3      	adds	r3, r4, r3
    4584:	3330      	adds	r3, #48	; 0x30
    4586:	785d      	ldrb	r5, [r3, #1]
    4588:	781b      	ldrb	r3, [r3, #0]
    458a:	022d      	lsls	r5, r5, #8
    458c:	431d      	orrs	r5, r3
    458e:	e7c9      	b.n	4524 <remove_chain.part.6+0xf4>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    4590:	0021      	movs	r1, r4
    4592:	7860      	ldrb	r0, [r4, #1]
    4594:	2301      	movs	r3, #1
    4596:	002a      	movs	r2, r5
    4598:	3130      	adds	r1, #48	; 0x30
    459a:	4f72      	ldr	r7, [pc, #456]	; (4764 <remove_chain.part.6+0x334>)
    459c:	47b8      	blx	r7
    459e:	2800      	cmp	r0, #0
    45a0:	d000      	beq.n	45a4 <remove_chain.part.6+0x174>
    45a2:	e75e      	b.n	4462 <remove_chain.part.6+0x32>
			fs->winsect = sector;
    45a4:	62e5      	str	r5, [r4, #44]	; 0x2c
    45a6:	e7e8      	b.n	457a <remove_chain.part.6+0x14a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    45a8:	0021      	movs	r1, r4
    45aa:	7860      	ldrb	r0, [r4, #1]
    45ac:	2301      	movs	r3, #1
    45ae:	4642      	mov	r2, r8
    45b0:	3130      	adds	r1, #48	; 0x30
    45b2:	4f6c      	ldr	r7, [pc, #432]	; (4764 <remove_chain.part.6+0x334>)
    45b4:	47b8      	blx	r7
    45b6:	2800      	cmp	r0, #0
    45b8:	d000      	beq.n	45bc <remove_chain.part.6+0x18c>
    45ba:	e752      	b.n	4462 <remove_chain.part.6+0x32>
			fs->winsect = sector;
    45bc:	4643      	mov	r3, r8
    45be:	6a22      	ldr	r2, [r4, #32]
    45c0:	62e3      	str	r3, [r4, #44]	; 0x2c
    45c2:	4647      	mov	r7, r8
    45c4:	e76a      	b.n	449c <remove_chain.part.6+0x6c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    45c6:	0021      	movs	r1, r4
    45c8:	7860      	ldrb	r0, [r4, #1]
    45ca:	2301      	movs	r3, #1
    45cc:	002a      	movs	r2, r5
    45ce:	3130      	adds	r1, #48	; 0x30
    45d0:	4f64      	ldr	r7, [pc, #400]	; (4764 <remove_chain.part.6+0x334>)
    45d2:	47b8      	blx	r7
    45d4:	2800      	cmp	r0, #0
    45d6:	d000      	beq.n	45da <remove_chain.part.6+0x1aa>
    45d8:	e743      	b.n	4462 <remove_chain.part.6+0x32>
			fs->winsect = sector;
    45da:	62e5      	str	r5, [r4, #44]	; 0x2c
    45dc:	e78d      	b.n	44fa <remove_chain.part.6+0xca>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    45de:	2330      	movs	r3, #48	; 0x30
    45e0:	4699      	mov	r9, r3
    45e2:	44a1      	add	r9, r4
    45e4:	7860      	ldrb	r0, [r4, #1]
    45e6:	3b2f      	subs	r3, #47	; 0x2f
    45e8:	465a      	mov	r2, fp
    45ea:	4649      	mov	r1, r9
    45ec:	4f5b      	ldr	r7, [pc, #364]	; (475c <remove_chain.part.6+0x32c>)
    45ee:	47b8      	blx	r7
    45f0:	2800      	cmp	r0, #0
    45f2:	d000      	beq.n	45f6 <remove_chain.part.6+0x1c6>
    45f4:	e735      	b.n	4462 <remove_chain.part.6+0x32>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    45f6:	69e3      	ldr	r3, [r4, #28]
    45f8:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
    45fa:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    45fc:	189a      	adds	r2, r3, r2
    45fe:	4593      	cmp	fp, r2
    4600:	d300      	bcc.n	4604 <remove_chain.part.6+0x1d4>
    4602:	e778      	b.n	44f6 <remove_chain.part.6+0xc6>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4604:	78e2      	ldrb	r2, [r4, #3]
    4606:	2a01      	cmp	r2, #1
    4608:	d800      	bhi.n	460c <remove_chain.part.6+0x1dc>
    460a:	e774      	b.n	44f6 <remove_chain.part.6+0xc6>
    460c:	0021      	movs	r1, r4
    460e:	46a8      	mov	r8, r5
    4610:	465c      	mov	r4, fp
    4612:	0017      	movs	r7, r2
    4614:	46cb      	mov	fp, r9
    4616:	000d      	movs	r5, r1
    4618:	46b1      	mov	r9, r6
    461a:	e000      	b.n	461e <remove_chain.part.6+0x1ee>
    461c:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
    461e:	18e4      	adds	r4, r4, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4620:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    4622:	7868      	ldrb	r0, [r5, #1]
    4624:	2301      	movs	r3, #1
    4626:	0022      	movs	r2, r4
    4628:	4659      	mov	r1, fp
    462a:	4e4c      	ldr	r6, [pc, #304]	; (475c <remove_chain.part.6+0x32c>)
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    462c:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
    462e:	47b0      	blx	r6
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4630:	2f01      	cmp	r7, #1
    4632:	d1f3      	bne.n	461c <remove_chain.part.6+0x1ec>
    4634:	002c      	movs	r4, r5
    4636:	464e      	mov	r6, r9
    4638:	4645      	mov	r5, r8
    463a:	e75c      	b.n	44f6 <remove_chain.part.6+0xc6>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    463c:	2330      	movs	r3, #48	; 0x30
    463e:	4699      	mov	r9, r3
    4640:	44a1      	add	r9, r4
    4642:	7860      	ldrb	r0, [r4, #1]
    4644:	3b2f      	subs	r3, #47	; 0x2f
    4646:	003a      	movs	r2, r7
    4648:	4649      	mov	r1, r9
    464a:	47d0      	blx	sl
    464c:	2800      	cmp	r0, #0
    464e:	d000      	beq.n	4652 <remove_chain.part.6+0x222>
    4650:	e707      	b.n	4462 <remove_chain.part.6+0x32>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    4652:	69e3      	ldr	r3, [r4, #28]
    4654:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
    4656:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    4658:	189a      	adds	r2, r3, r2
    465a:	4297      	cmp	r7, r2
    465c:	d28b      	bcs.n	4576 <remove_chain.part.6+0x146>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    465e:	78e2      	ldrb	r2, [r4, #3]
    4660:	2a01      	cmp	r2, #1
    4662:	d988      	bls.n	4576 <remove_chain.part.6+0x146>
    4664:	0021      	movs	r1, r4
    4666:	003c      	movs	r4, r7
    4668:	0017      	movs	r7, r2
    466a:	0032      	movs	r2, r6
    466c:	46a8      	mov	r8, r5
    466e:	464e      	mov	r6, r9
    4670:	000d      	movs	r5, r1
    4672:	4691      	mov	r9, r2
    4674:	e000      	b.n	4678 <remove_chain.part.6+0x248>
    4676:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
    4678:	18e4      	adds	r4, r4, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    467a:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    467c:	7868      	ldrb	r0, [r5, #1]
    467e:	2301      	movs	r3, #1
    4680:	0022      	movs	r2, r4
    4682:	0031      	movs	r1, r6
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4684:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
    4686:	47d0      	blx	sl
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4688:	2f01      	cmp	r7, #1
    468a:	d1f4      	bne.n	4676 <remove_chain.part.6+0x246>
    468c:	002c      	movs	r4, r5
    468e:	464e      	mov	r6, r9
    4690:	4645      	mov	r5, r8
    4692:	e770      	b.n	4576 <remove_chain.part.6+0x146>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    4694:	2330      	movs	r3, #48	; 0x30
    4696:	469b      	mov	fp, r3
    4698:	46b9      	mov	r9, r7
    469a:	44a3      	add	fp, r4
    469c:	003a      	movs	r2, r7
    469e:	4f2f      	ldr	r7, [pc, #188]	; (475c <remove_chain.part.6+0x32c>)
    46a0:	7860      	ldrb	r0, [r4, #1]
    46a2:	3b2f      	subs	r3, #47	; 0x2f
    46a4:	4659      	mov	r1, fp
    46a6:	9701      	str	r7, [sp, #4]
    46a8:	47b8      	blx	r7
    46aa:	2800      	cmp	r0, #0
    46ac:	d000      	beq.n	46b0 <remove_chain.part.6+0x280>
    46ae:	e6d8      	b.n	4462 <remove_chain.part.6+0x32>
			fs->wflag = 0;
    46b0:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    46b2:	4648      	mov	r0, r9
    46b4:	69e3      	ldr	r3, [r4, #28]
    46b6:	6a22      	ldr	r2, [r4, #32]
    46b8:	189a      	adds	r2, r3, r2
    46ba:	4290      	cmp	r0, r2
    46bc:	d300      	bcc.n	46c0 <remove_chain.part.6+0x290>
    46be:	e6e6      	b.n	448e <remove_chain.part.6+0x5e>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    46c0:	78e2      	ldrb	r2, [r4, #3]
    46c2:	2a01      	cmp	r2, #1
    46c4:	d800      	bhi.n	46c8 <remove_chain.part.6+0x298>
    46c6:	e6e2      	b.n	448e <remove_chain.part.6+0x5e>
    46c8:	0021      	movs	r1, r4
    46ca:	0004      	movs	r4, r0
    46cc:	4658      	mov	r0, fp
    46ce:	46a9      	mov	r9, r5
    46d0:	0017      	movs	r7, r2
    46d2:	000d      	movs	r5, r1
    46d4:	9002      	str	r0, [sp, #8]
    46d6:	46b3      	mov	fp, r6
    46d8:	0001      	movs	r1, r0
    46da:	e001      	b.n	46e0 <remove_chain.part.6+0x2b0>
    46dc:	69eb      	ldr	r3, [r5, #28]
    46de:	9902      	ldr	r1, [sp, #8]
					wsect += fs->fsize;
    46e0:	18e4      	adds	r4, r4, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    46e2:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    46e4:	7868      	ldrb	r0, [r5, #1]
    46e6:	2301      	movs	r3, #1
    46e8:	0022      	movs	r2, r4
    46ea:	9e01      	ldr	r6, [sp, #4]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    46ec:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
    46ee:	47b0      	blx	r6
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    46f0:	2f01      	cmp	r7, #1
    46f2:	d1f3      	bne.n	46dc <remove_chain.part.6+0x2ac>
    46f4:	002c      	movs	r4, r5
    46f6:	465e      	mov	r6, fp
    46f8:	464d      	mov	r5, r9
    46fa:	e6c8      	b.n	448e <remove_chain.part.6+0x5e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    46fc:	0021      	movs	r1, r4
    46fe:	7860      	ldrb	r0, [r4, #1]
    4700:	2301      	movs	r3, #1
    4702:	464a      	mov	r2, r9
    4704:	3130      	adds	r1, #48	; 0x30
    4706:	4f17      	ldr	r7, [pc, #92]	; (4764 <remove_chain.part.6+0x334>)
    4708:	47b8      	blx	r7
    470a:	2800      	cmp	r0, #0
    470c:	d000      	beq.n	4710 <remove_chain.part.6+0x2e0>
    470e:	e6a8      	b.n	4462 <remove_chain.part.6+0x32>
			fs->winsect = sector;
    4710:	464b      	mov	r3, r9
    4712:	62e3      	str	r3, [r4, #44]	; 0x2c
    4714:	e6d6      	b.n	44c4 <remove_chain.part.6+0x94>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    4716:	2330      	movs	r3, #48	; 0x30
    4718:	469c      	mov	ip, r3
    471a:	44a4      	add	ip, r4
    471c:	4661      	mov	r1, ip
    471e:	46bb      	mov	fp, r7
    4720:	003a      	movs	r2, r7
    4722:	4f0e      	ldr	r7, [pc, #56]	; (475c <remove_chain.part.6+0x32c>)
    4724:	7860      	ldrb	r0, [r4, #1]
    4726:	2301      	movs	r3, #1
    4728:	9102      	str	r1, [sp, #8]
    472a:	9701      	str	r7, [sp, #4]
    472c:	47b8      	blx	r7
    472e:	2800      	cmp	r0, #0
    4730:	d000      	beq.n	4734 <remove_chain.part.6+0x304>
    4732:	e696      	b.n	4462 <remove_chain.part.6+0x32>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    4734:	69e3      	ldr	r3, [r4, #28]
    4736:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
    4738:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    473a:	189a      	adds	r2, r3, r2
    473c:	4658      	mov	r0, fp
    473e:	455a      	cmp	r2, fp
    4740:	d800      	bhi.n	4744 <remove_chain.part.6+0x314>
    4742:	e6bb      	b.n	44bc <remove_chain.part.6+0x8c>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4744:	78e2      	ldrb	r2, [r4, #3]
    4746:	4693      	mov	fp, r2
    4748:	2a01      	cmp	r2, #1
    474a:	d800      	bhi.n	474e <remove_chain.part.6+0x31e>
    474c:	e6b6      	b.n	44bc <remove_chain.part.6+0x8c>
    474e:	0022      	movs	r2, r4
    4750:	465f      	mov	r7, fp
    4752:	0004      	movs	r4, r0
    4754:	46ab      	mov	fp, r5
    4756:	9603      	str	r6, [sp, #12]
    4758:	0015      	movs	r5, r2
    475a:	e006      	b.n	476a <remove_chain.part.6+0x33a>
    475c:	00003dc1 	.word	0x00003dc1
    4760:	000040ad 	.word	0x000040ad
    4764:	00003d3d 	.word	0x00003d3d
    4768:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
    476a:	18e4      	adds	r4, r4, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    476c:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    476e:	7868      	ldrb	r0, [r5, #1]
    4770:	2301      	movs	r3, #1
    4772:	0022      	movs	r2, r4
    4774:	9902      	ldr	r1, [sp, #8]
    4776:	9e01      	ldr	r6, [sp, #4]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4778:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
    477a:	47b0      	blx	r6
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    477c:	2f01      	cmp	r7, #1
    477e:	d1f3      	bne.n	4768 <remove_chain.part.6+0x338>
    4780:	002c      	movs	r4, r5
    4782:	9e03      	ldr	r6, [sp, #12]
    4784:	465d      	mov	r5, fp
    4786:	e699      	b.n	44bc <remove_chain.part.6+0x8c>

00004788 <get_fat.part.3>:
static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
    4788:	b5f0      	push	{r4, r5, r6, r7, lr}
    478a:	4645      	mov	r5, r8
    478c:	46de      	mov	lr, fp
    478e:	4657      	mov	r7, sl
    4790:	464e      	mov	r6, r9
    4792:	b5e0      	push	{r5, r6, r7, lr}
	switch (fs->fs_type) {
    4794:	7803      	ldrb	r3, [r0, #0]
static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
    4796:	b085      	sub	sp, #20
    4798:	0004      	movs	r4, r0
    479a:	000d      	movs	r5, r1
	switch (fs->fs_type) {
    479c:	2b02      	cmp	r3, #2
    479e:	d100      	bne.n	47a2 <get_fat.part.3+0x1a>
    47a0:	e074      	b.n	488c <get_fat.part.3+0x104>
    47a2:	2b03      	cmp	r3, #3
    47a4:	d044      	beq.n	4830 <get_fat.part.3+0xa8>
    47a6:	2b01      	cmp	r3, #1
    47a8:	d008      	beq.n	47bc <get_fat.part.3+0x34>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    47aa:	2001      	movs	r0, #1
    47ac:	4240      	negs	r0, r0
}
    47ae:	b005      	add	sp, #20
    47b0:	bc3c      	pop	{r2, r3, r4, r5}
    47b2:	4690      	mov	r8, r2
    47b4:	4699      	mov	r9, r3
    47b6:	46a2      	mov	sl, r4
    47b8:	46ab      	mov	fp, r5
    47ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bc = (UINT)clst; bc += bc / 2;
    47bc:	084e      	lsrs	r6, r1, #1
    47be:	1873      	adds	r3, r6, r1
    47c0:	9301      	str	r3, [sp, #4]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    47c2:	0a5b      	lsrs	r3, r3, #9
    47c4:	469a      	mov	sl, r3
    47c6:	6a02      	ldr	r2, [r0, #32]
	wsect = fs->winsect;
    47c8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    47ca:	4492      	add	sl, r2
	if (wsect != sector) {	/* Changed current window */
    47cc:	45ba      	cmp	sl, r7
    47ce:	d009      	beq.n	47e4 <get_fat.part.3+0x5c>
		if (fs->wflag) {	/* Write back dirty window if needed */
    47d0:	7903      	ldrb	r3, [r0, #4]
    47d2:	2b00      	cmp	r3, #0
    47d4:	d000      	beq.n	47d8 <get_fat.part.3+0x50>
    47d6:	e0aa      	b.n	492e <get_fat.part.3+0x1a6>
		if (sector) {
    47d8:	4653      	mov	r3, sl
    47da:	2b00      	cmp	r3, #0
    47dc:	d000      	beq.n	47e0 <get_fat.part.3+0x58>
    47de:	e108      	b.n	49f2 <get_fat.part.3+0x26a>
    47e0:	6a22      	ldr	r2, [r4, #32]
    47e2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
		wc = fs->win[bc % SS(fs)]; bc++;
    47e4:	9901      	ldr	r1, [sp, #4]
    47e6:	05cb      	lsls	r3, r1, #23
    47e8:	0ddb      	lsrs	r3, r3, #23
    47ea:	18e3      	adds	r3, r4, r3
    47ec:	3330      	adds	r3, #48	; 0x30
    47ee:	781b      	ldrb	r3, [r3, #0]
    47f0:	469a      	mov	sl, r3
    47f2:	000b      	movs	r3, r1
    47f4:	3301      	adds	r3, #1
    47f6:	9301      	str	r3, [sp, #4]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    47f8:	0a5b      	lsrs	r3, r3, #9
    47fa:	4699      	mov	r9, r3
    47fc:	4491      	add	r9, r2
	if (wsect != sector) {	/* Changed current window */
    47fe:	45b9      	cmp	r9, r7
    4800:	d007      	beq.n	4812 <get_fat.part.3+0x8a>
		if (fs->wflag) {	/* Write back dirty window if needed */
    4802:	7923      	ldrb	r3, [r4, #4]
    4804:	2b00      	cmp	r3, #0
    4806:	d000      	beq.n	480a <get_fat.part.3+0x82>
    4808:	e10f      	b.n	4a2a <get_fat.part.3+0x2a2>
		if (sector) {
    480a:	464b      	mov	r3, r9
    480c:	2b00      	cmp	r3, #0
    480e:	d000      	beq.n	4812 <get_fat.part.3+0x8a>
    4810:	e0fe      	b.n	4a10 <get_fat.part.3+0x288>
		wc |= fs->win[bc % SS(fs)] << 8;
    4812:	4652      	mov	r2, sl
    4814:	9b01      	ldr	r3, [sp, #4]
    4816:	05de      	lsls	r6, r3, #23
    4818:	0df6      	lsrs	r6, r6, #23
    481a:	19a4      	adds	r4, r4, r6
    481c:	3430      	adds	r4, #48	; 0x30
    481e:	7823      	ldrb	r3, [r4, #0]
    4820:	021b      	lsls	r3, r3, #8
    4822:	4313      	orrs	r3, r2
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    4824:	0918      	lsrs	r0, r3, #4
    4826:	07ea      	lsls	r2, r5, #31
    4828:	d4c1      	bmi.n	47ae <get_fat.part.3+0x26>
    482a:	0518      	lsls	r0, r3, #20
    482c:	0d00      	lsrs	r0, r0, #20
    482e:	e7be      	b.n	47ae <get_fat.part.3+0x26>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    4830:	6a03      	ldr	r3, [r0, #32]
    4832:	09ce      	lsrs	r6, r1, #7
    4834:	469c      	mov	ip, r3
	wsect = fs->winsect;
    4836:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    4838:	4466      	add	r6, ip
	wsect = fs->winsect;
    483a:	469b      	mov	fp, r3
	if (wsect != sector) {	/* Changed current window */
    483c:	429e      	cmp	r6, r3
    483e:	d00f      	beq.n	4860 <get_fat.part.3+0xd8>
		if (fs->wflag) {	/* Write back dirty window if needed */
    4840:	7903      	ldrb	r3, [r0, #4]
    4842:	2b00      	cmp	r3, #0
    4844:	d000      	beq.n	4848 <get_fat.part.3+0xc0>
    4846:	e0a4      	b.n	4992 <get_fat.part.3+0x20a>
		if (sector) {
    4848:	2e00      	cmp	r6, #0
    484a:	d009      	beq.n	4860 <get_fat.part.3+0xd8>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    484c:	0021      	movs	r1, r4
    484e:	7860      	ldrb	r0, [r4, #1]
    4850:	2301      	movs	r3, #1
    4852:	0032      	movs	r2, r6
    4854:	3130      	adds	r1, #48	; 0x30
    4856:	4f90      	ldr	r7, [pc, #576]	; (4a98 <get_fat.part.3+0x310>)
    4858:	47b8      	blx	r7
    485a:	2800      	cmp	r0, #0
    485c:	d1a5      	bne.n	47aa <get_fat.part.3+0x22>
			fs->winsect = sector;
    485e:	62e6      	str	r6, [r4, #44]	; 0x2c
		p = &fs->win[clst * 4 % SS(fs)];
    4860:	23fe      	movs	r3, #254	; 0xfe
    4862:	00ad      	lsls	r5, r5, #2
    4864:	005b      	lsls	r3, r3, #1
    4866:	401d      	ands	r5, r3
    4868:	002b      	movs	r3, r5
    486a:	3330      	adds	r3, #48	; 0x30
    486c:	18e3      	adds	r3, r4, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
    486e:	78d8      	ldrb	r0, [r3, #3]
    4870:	789a      	ldrb	r2, [r3, #2]
    4872:	1964      	adds	r4, r4, r5
    4874:	0412      	lsls	r2, r2, #16
    4876:	0600      	lsls	r0, r0, #24
    4878:	3430      	adds	r4, #48	; 0x30
    487a:	4310      	orrs	r0, r2
    487c:	785b      	ldrb	r3, [r3, #1]
    487e:	7822      	ldrb	r2, [r4, #0]
    4880:	021b      	lsls	r3, r3, #8
    4882:	4310      	orrs	r0, r2
    4884:	4318      	orrs	r0, r3
    4886:	0100      	lsls	r0, r0, #4
    4888:	0900      	lsrs	r0, r0, #4
    488a:	e790      	b.n	47ae <get_fat.part.3+0x26>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    488c:	6a03      	ldr	r3, [r0, #32]
    488e:	0a0e      	lsrs	r6, r1, #8
    4890:	469c      	mov	ip, r3
	wsect = fs->winsect;
    4892:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    4894:	4466      	add	r6, ip
	wsect = fs->winsect;
    4896:	469b      	mov	fp, r3
	if (wsect != sector) {	/* Changed current window */
    4898:	429e      	cmp	r6, r3
    489a:	d00f      	beq.n	48bc <get_fat.part.3+0x134>
		if (fs->wflag) {	/* Write back dirty window if needed */
    489c:	7903      	ldrb	r3, [r0, #4]
    489e:	2b00      	cmp	r3, #0
    48a0:	d117      	bne.n	48d2 <get_fat.part.3+0x14a>
		if (sector) {
    48a2:	2e00      	cmp	r6, #0
    48a4:	d00a      	beq.n	48bc <get_fat.part.3+0x134>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    48a6:	0021      	movs	r1, r4
    48a8:	7860      	ldrb	r0, [r4, #1]
    48aa:	2301      	movs	r3, #1
    48ac:	0032      	movs	r2, r6
    48ae:	3130      	adds	r1, #48	; 0x30
    48b0:	4f79      	ldr	r7, [pc, #484]	; (4a98 <get_fat.part.3+0x310>)
    48b2:	47b8      	blx	r7
    48b4:	2800      	cmp	r0, #0
    48b6:	d000      	beq.n	48ba <get_fat.part.3+0x132>
    48b8:	e777      	b.n	47aa <get_fat.part.3+0x22>
			fs->winsect = sector;
    48ba:	62e6      	str	r6, [r4, #44]	; 0x2c
		p = &fs->win[clst * 2 % SS(fs)];
    48bc:	23ff      	movs	r3, #255	; 0xff
    48be:	006d      	lsls	r5, r5, #1
    48c0:	005b      	lsls	r3, r3, #1
    48c2:	401d      	ands	r5, r3
		return LD_WORD(p);
    48c4:	1964      	adds	r4, r4, r5
    48c6:	3430      	adds	r4, #48	; 0x30
    48c8:	7863      	ldrb	r3, [r4, #1]
    48ca:	7820      	ldrb	r0, [r4, #0]
    48cc:	021b      	lsls	r3, r3, #8
    48ce:	4318      	orrs	r0, r3
    48d0:	e76d      	b.n	47ae <get_fat.part.3+0x26>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    48d2:	2330      	movs	r3, #48	; 0x30
    48d4:	469a      	mov	sl, r3
    48d6:	4f71      	ldr	r7, [pc, #452]	; (4a9c <get_fat.part.3+0x314>)
    48d8:	4482      	add	sl, r0
    48da:	3b2f      	subs	r3, #47	; 0x2f
    48dc:	7840      	ldrb	r0, [r0, #1]
    48de:	465a      	mov	r2, fp
    48e0:	4651      	mov	r1, sl
    48e2:	46b8      	mov	r8, r7
    48e4:	47b8      	blx	r7
    48e6:	2800      	cmp	r0, #0
    48e8:	d000      	beq.n	48ec <get_fat.part.3+0x164>
    48ea:	e75e      	b.n	47aa <get_fat.part.3+0x22>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    48ec:	69e3      	ldr	r3, [r4, #28]
    48ee:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
    48f0:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    48f2:	189a      	adds	r2, r3, r2
    48f4:	4593      	cmp	fp, r2
    48f6:	d2d4      	bcs.n	48a2 <get_fat.part.3+0x11a>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    48f8:	78e2      	ldrb	r2, [r4, #3]
    48fa:	4691      	mov	r9, r2
    48fc:	2a01      	cmp	r2, #1
    48fe:	d9d0      	bls.n	48a2 <get_fat.part.3+0x11a>
    4900:	002a      	movs	r2, r5
    4902:	464f      	mov	r7, r9
    4904:	0025      	movs	r5, r4
    4906:	46b1      	mov	r9, r6
    4908:	465c      	mov	r4, fp
    490a:	4656      	mov	r6, sl
    490c:	4692      	mov	sl, r2
    490e:	e000      	b.n	4912 <get_fat.part.3+0x18a>
    4910:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
    4912:	18e4      	adds	r4, r4, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4914:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    4916:	7868      	ldrb	r0, [r5, #1]
    4918:	2301      	movs	r3, #1
    491a:	0022      	movs	r2, r4
    491c:	0031      	movs	r1, r6
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    491e:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
    4920:	47c0      	blx	r8
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4922:	2f01      	cmp	r7, #1
    4924:	d1f4      	bne.n	4910 <get_fat.part.3+0x188>
    4926:	002c      	movs	r4, r5
    4928:	464e      	mov	r6, r9
    492a:	4655      	mov	r5, sl
    492c:	e7b9      	b.n	48a2 <get_fat.part.3+0x11a>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    492e:	2330      	movs	r3, #48	; 0x30
    4930:	469b      	mov	fp, r3
    4932:	4e5a      	ldr	r6, [pc, #360]	; (4a9c <get_fat.part.3+0x314>)
    4934:	4483      	add	fp, r0
    4936:	3b2f      	subs	r3, #47	; 0x2f
    4938:	7840      	ldrb	r0, [r0, #1]
    493a:	003a      	movs	r2, r7
    493c:	4659      	mov	r1, fp
    493e:	46b0      	mov	r8, r6
    4940:	47b0      	blx	r6
    4942:	2800      	cmp	r0, #0
    4944:	d000      	beq.n	4948 <get_fat.part.3+0x1c0>
    4946:	e730      	b.n	47aa <get_fat.part.3+0x22>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    4948:	69e3      	ldr	r3, [r4, #28]
    494a:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
    494c:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    494e:	189a      	adds	r2, r3, r2
    4950:	4297      	cmp	r7, r2
    4952:	d300      	bcc.n	4956 <get_fat.part.3+0x1ce>
    4954:	e740      	b.n	47d8 <get_fat.part.3+0x50>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4956:	78e2      	ldrb	r2, [r4, #3]
    4958:	4691      	mov	r9, r2
    495a:	2a01      	cmp	r2, #1
    495c:	d800      	bhi.n	4960 <get_fat.part.3+0x1d8>
    495e:	e73b      	b.n	47d8 <get_fat.part.3+0x50>
    4960:	002a      	movs	r2, r5
    4962:	9901      	ldr	r1, [sp, #4]
    4964:	0025      	movs	r5, r4
    4966:	465e      	mov	r6, fp
    4968:	003c      	movs	r4, r7
    496a:	4693      	mov	fp, r2
    496c:	464f      	mov	r7, r9
    496e:	4689      	mov	r9, r1
    4970:	e000      	b.n	4974 <get_fat.part.3+0x1ec>
    4972:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
    4974:	18e4      	adds	r4, r4, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4976:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    4978:	7868      	ldrb	r0, [r5, #1]
    497a:	2301      	movs	r3, #1
    497c:	0022      	movs	r2, r4
    497e:	0031      	movs	r1, r6
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4980:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
    4982:	47c0      	blx	r8
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4984:	2f01      	cmp	r7, #1
    4986:	d1f4      	bne.n	4972 <get_fat.part.3+0x1ea>
    4988:	464b      	mov	r3, r9
    498a:	002c      	movs	r4, r5
    498c:	9301      	str	r3, [sp, #4]
    498e:	465d      	mov	r5, fp
    4990:	e722      	b.n	47d8 <get_fat.part.3+0x50>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    4992:	2330      	movs	r3, #48	; 0x30
    4994:	469a      	mov	sl, r3
    4996:	4f41      	ldr	r7, [pc, #260]	; (4a9c <get_fat.part.3+0x314>)
    4998:	4482      	add	sl, r0
    499a:	3b2f      	subs	r3, #47	; 0x2f
    499c:	7840      	ldrb	r0, [r0, #1]
    499e:	465a      	mov	r2, fp
    49a0:	4651      	mov	r1, sl
    49a2:	46b8      	mov	r8, r7
    49a4:	47b8      	blx	r7
    49a6:	2800      	cmp	r0, #0
    49a8:	d000      	beq.n	49ac <get_fat.part.3+0x224>
    49aa:	e6fe      	b.n	47aa <get_fat.part.3+0x22>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    49ac:	69e3      	ldr	r3, [r4, #28]
    49ae:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
    49b0:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    49b2:	189a      	adds	r2, r3, r2
    49b4:	4593      	cmp	fp, r2
    49b6:	d300      	bcc.n	49ba <get_fat.part.3+0x232>
    49b8:	e746      	b.n	4848 <get_fat.part.3+0xc0>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    49ba:	78e2      	ldrb	r2, [r4, #3]
    49bc:	4691      	mov	r9, r2
    49be:	2a01      	cmp	r2, #1
    49c0:	d800      	bhi.n	49c4 <get_fat.part.3+0x23c>
    49c2:	e741      	b.n	4848 <get_fat.part.3+0xc0>
    49c4:	002a      	movs	r2, r5
    49c6:	464f      	mov	r7, r9
    49c8:	0025      	movs	r5, r4
    49ca:	46b1      	mov	r9, r6
    49cc:	465c      	mov	r4, fp
    49ce:	4656      	mov	r6, sl
    49d0:	4692      	mov	sl, r2
    49d2:	e000      	b.n	49d6 <get_fat.part.3+0x24e>
    49d4:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
    49d6:	18e4      	adds	r4, r4, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    49d8:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    49da:	7868      	ldrb	r0, [r5, #1]
    49dc:	2301      	movs	r3, #1
    49de:	0022      	movs	r2, r4
    49e0:	0031      	movs	r1, r6
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    49e2:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
    49e4:	47c0      	blx	r8
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    49e6:	2f01      	cmp	r7, #1
    49e8:	d1f4      	bne.n	49d4 <get_fat.part.3+0x24c>
    49ea:	002c      	movs	r4, r5
    49ec:	464e      	mov	r6, r9
    49ee:	4655      	mov	r5, sl
    49f0:	e72a      	b.n	4848 <get_fat.part.3+0xc0>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    49f2:	0021      	movs	r1, r4
    49f4:	7860      	ldrb	r0, [r4, #1]
    49f6:	2301      	movs	r3, #1
    49f8:	4652      	mov	r2, sl
    49fa:	3130      	adds	r1, #48	; 0x30
    49fc:	4f26      	ldr	r7, [pc, #152]	; (4a98 <get_fat.part.3+0x310>)
    49fe:	47b8      	blx	r7
    4a00:	2800      	cmp	r0, #0
    4a02:	d000      	beq.n	4a06 <get_fat.part.3+0x27e>
    4a04:	e6d1      	b.n	47aa <get_fat.part.3+0x22>
			fs->winsect = sector;
    4a06:	4653      	mov	r3, sl
    4a08:	6a22      	ldr	r2, [r4, #32]
    4a0a:	62e3      	str	r3, [r4, #44]	; 0x2c
    4a0c:	4657      	mov	r7, sl
    4a0e:	e6e9      	b.n	47e4 <get_fat.part.3+0x5c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    4a10:	0021      	movs	r1, r4
    4a12:	7860      	ldrb	r0, [r4, #1]
    4a14:	2301      	movs	r3, #1
    4a16:	464a      	mov	r2, r9
    4a18:	3130      	adds	r1, #48	; 0x30
    4a1a:	4f1f      	ldr	r7, [pc, #124]	; (4a98 <get_fat.part.3+0x310>)
    4a1c:	47b8      	blx	r7
    4a1e:	2800      	cmp	r0, #0
    4a20:	d000      	beq.n	4a24 <get_fat.part.3+0x29c>
    4a22:	e6c2      	b.n	47aa <get_fat.part.3+0x22>
			fs->winsect = sector;
    4a24:	464b      	mov	r3, r9
    4a26:	62e3      	str	r3, [r4, #44]	; 0x2c
    4a28:	e6f3      	b.n	4812 <get_fat.part.3+0x8a>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    4a2a:	2330      	movs	r3, #48	; 0x30
    4a2c:	469c      	mov	ip, r3
    4a2e:	44a4      	add	ip, r4
    4a30:	4661      	mov	r1, ip
    4a32:	4e1a      	ldr	r6, [pc, #104]	; (4a9c <get_fat.part.3+0x314>)
    4a34:	7860      	ldrb	r0, [r4, #1]
    4a36:	2301      	movs	r3, #1
    4a38:	003a      	movs	r2, r7
    4a3a:	9102      	str	r1, [sp, #8]
    4a3c:	46b0      	mov	r8, r6
    4a3e:	47b0      	blx	r6
    4a40:	2800      	cmp	r0, #0
    4a42:	d000      	beq.n	4a46 <get_fat.part.3+0x2be>
    4a44:	e6b1      	b.n	47aa <get_fat.part.3+0x22>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    4a46:	69e3      	ldr	r3, [r4, #28]
    4a48:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
    4a4a:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    4a4c:	189a      	adds	r2, r3, r2
    4a4e:	42ba      	cmp	r2, r7
    4a50:	d800      	bhi.n	4a54 <get_fat.part.3+0x2cc>
    4a52:	e6da      	b.n	480a <get_fat.part.3+0x82>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4a54:	78e2      	ldrb	r2, [r4, #3]
    4a56:	4693      	mov	fp, r2
    4a58:	2a01      	cmp	r2, #1
    4a5a:	d800      	bhi.n	4a5e <get_fat.part.3+0x2d6>
    4a5c:	e6d5      	b.n	480a <get_fat.part.3+0x82>
    4a5e:	4652      	mov	r2, sl
    4a60:	9203      	str	r2, [sp, #12]
    4a62:	9a01      	ldr	r2, [sp, #4]
    4a64:	9e02      	ldr	r6, [sp, #8]
    4a66:	4692      	mov	sl, r2
    4a68:	002a      	movs	r2, r5
    4a6a:	0025      	movs	r5, r4
    4a6c:	003c      	movs	r4, r7
    4a6e:	465f      	mov	r7, fp
    4a70:	4693      	mov	fp, r2
    4a72:	e000      	b.n	4a76 <get_fat.part.3+0x2ee>
    4a74:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
    4a76:	18e4      	adds	r4, r4, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4a78:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    4a7a:	7868      	ldrb	r0, [r5, #1]
    4a7c:	2301      	movs	r3, #1
    4a7e:	0022      	movs	r2, r4
    4a80:	0031      	movs	r1, r6
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4a82:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
    4a84:	47c0      	blx	r8
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4a86:	2f01      	cmp	r7, #1
    4a88:	d1f4      	bne.n	4a74 <get_fat.part.3+0x2ec>
    4a8a:	4653      	mov	r3, sl
    4a8c:	9301      	str	r3, [sp, #4]
    4a8e:	9b03      	ldr	r3, [sp, #12]
    4a90:	002c      	movs	r4, r5
    4a92:	469a      	mov	sl, r3
    4a94:	465d      	mov	r5, fp
    4a96:	e6b8      	b.n	480a <get_fat.part.3+0x82>
    4a98:	00003d3d 	.word	0x00003d3d
    4a9c:	00003dc1 	.word	0x00003dc1

00004aa0 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    4aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4aa2:	0005      	movs	r5, r0
	DWORD clst;
	WORD ic;


	dj->index = idx;
    4aa4:	80e9      	strh	r1, [r5, #6]
{
    4aa6:	000c      	movs	r4, r1
	clst = dj->sclust;
    4aa8:	6881      	ldr	r1, [r0, #8]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    4aaa:	2901      	cmp	r1, #1
    4aac:	d003      	beq.n	4ab6 <dir_sdi+0x16>
    4aae:	6800      	ldr	r0, [r0, #0]
    4ab0:	6983      	ldr	r3, [r0, #24]
    4ab2:	4299      	cmp	r1, r3
    4ab4:	d301      	bcc.n	4aba <dir_sdi+0x1a>
		return FR_INT_ERR;
    4ab6:	2002      	movs	r0, #2
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */

	return FR_OK;	/* Seek succeeded */
}
    4ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    4aba:	2900      	cmp	r1, #0
    4abc:	d118      	bne.n	4af0 <dir_sdi+0x50>
    4abe:	7802      	ldrb	r2, [r0, #0]
    4ac0:	2a03      	cmp	r2, #3
    4ac2:	d012      	beq.n	4aea <dir_sdi+0x4a>
		dj->clust = clst;
    4ac4:	2300      	movs	r3, #0
    4ac6:	60eb      	str	r3, [r5, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    4ac8:	8903      	ldrh	r3, [r0, #8]
    4aca:	42a3      	cmp	r3, r4
    4acc:	d9f3      	bls.n	4ab6 <dir_sdi+0x16>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    4ace:	6a42      	ldr	r2, [r0, #36]	; 0x24
    4ad0:	0923      	lsrs	r3, r4, #4
    4ad2:	4694      	mov	ip, r2
    4ad4:	b29b      	uxth	r3, r3
    4ad6:	4463      	add	r3, ip
    4ad8:	612b      	str	r3, [r5, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    4ada:	230f      	movs	r3, #15
    4adc:	401c      	ands	r4, r3
    4ade:	3030      	adds	r0, #48	; 0x30
    4ae0:	0164      	lsls	r4, r4, #5
    4ae2:	1900      	adds	r0, r0, r4
    4ae4:	6168      	str	r0, [r5, #20]
	return FR_OK;	/* Seek succeeded */
    4ae6:	2000      	movs	r0, #0
    4ae8:	e7e6      	b.n	4ab8 <dir_sdi+0x18>
		clst = dj->fs->dirbase;
    4aea:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    4aec:	2900      	cmp	r1, #0
    4aee:	d0e9      	beq.n	4ac4 <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    4af0:	7886      	ldrb	r6, [r0, #2]
    4af2:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
    4af4:	42b4      	cmp	r4, r6
    4af6:	d317      	bcc.n	4b28 <dir_sdi+0x88>
    4af8:	1ba4      	subs	r4, r4, r6
    4afa:	b2a4      	uxth	r4, r4
    4afc:	4f13      	ldr	r7, [pc, #76]	; (4b4c <dir_sdi+0xac>)
    4afe:	e00e      	b.n	4b1e <dir_sdi+0x7e>
    4b00:	47b8      	blx	r7
    4b02:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    4b04:	1c43      	adds	r3, r0, #1
    4b06:	d01f      	beq.n	4b48 <dir_sdi+0xa8>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    4b08:	2801      	cmp	r0, #1
    4b0a:	d9d4      	bls.n	4ab6 <dir_sdi+0x16>
    4b0c:	6828      	ldr	r0, [r5, #0]
    4b0e:	6983      	ldr	r3, [r0, #24]
    4b10:	428b      	cmp	r3, r1
    4b12:	d9d0      	bls.n	4ab6 <dir_sdi+0x16>
    4b14:	1ba2      	subs	r2, r4, r6
    4b16:	b292      	uxth	r2, r2
		while (idx >= ic) {	/* Follow cluster chain */
    4b18:	42a6      	cmp	r6, r4
    4b1a:	d805      	bhi.n	4b28 <dir_sdi+0x88>
    4b1c:	0014      	movs	r4, r2
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    4b1e:	2901      	cmp	r1, #1
    4b20:	d9c9      	bls.n	4ab6 <dir_sdi+0x16>
    4b22:	4299      	cmp	r1, r3
    4b24:	d2c7      	bcs.n	4ab6 <dir_sdi+0x16>
    4b26:	e7eb      	b.n	4b00 <dir_sdi+0x60>
		dj->clust = clst;
    4b28:	60e9      	str	r1, [r5, #12]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    4b2a:	6983      	ldr	r3, [r0, #24]
	clst -= 2;
    4b2c:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    4b2e:	3b02      	subs	r3, #2
    4b30:	2200      	movs	r2, #0
    4b32:	4299      	cmp	r1, r3
    4b34:	d203      	bcs.n	4b3e <dir_sdi+0x9e>
	return clst * fs->csize + fs->database;
    4b36:	7883      	ldrb	r3, [r0, #2]
    4b38:	4359      	muls	r1, r3
    4b3a:	6a83      	ldr	r3, [r0, #40]	; 0x28
    4b3c:	18ca      	adds	r2, r1, r3
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    4b3e:	0921      	lsrs	r1, r4, #4
    4b40:	b289      	uxth	r1, r1
    4b42:	1889      	adds	r1, r1, r2
    4b44:	6129      	str	r1, [r5, #16]
    4b46:	e7c8      	b.n	4ada <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    4b48:	2001      	movs	r0, #1
    4b4a:	e7b5      	b.n	4ab8 <dir_sdi+0x18>
    4b4c:	00004789 	.word	0x00004789

00004b50 <create_chain>:
{
    4b50:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b52:	4657      	mov	r7, sl
    4b54:	4645      	mov	r5, r8
    4b56:	46de      	mov	lr, fp
    4b58:	464e      	mov	r6, r9
    4b5a:	b5e0      	push	{r5, r6, r7, lr}
    4b5c:	468a      	mov	sl, r1
    4b5e:	b085      	sub	sp, #20
    4b60:	0005      	movs	r5, r0
	if (clst == 0) {		/* Create a new chain */
    4b62:	2900      	cmp	r1, #0
    4b64:	d11d      	bne.n	4ba2 <create_chain+0x52>
		scl = fs->last_clust;			/* Get suggested start point */
    4b66:	68c3      	ldr	r3, [r0, #12]
    4b68:	469b      	mov	fp, r3
		if (!scl || scl >= fs->n_fatent) scl = 1;
    4b6a:	2b00      	cmp	r3, #0
    4b6c:	d128      	bne.n	4bc0 <create_chain+0x70>
    4b6e:	2201      	movs	r2, #1
    4b70:	4693      	mov	fp, r2
    4b72:	6983      	ldr	r3, [r0, #24]
    4b74:	465c      	mov	r4, fp
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    4b76:	465f      	mov	r7, fp
    4b78:	46d3      	mov	fp, sl
		ncl++;							/* Next cluster */
    4b7a:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    4b7c:	429c      	cmp	r4, r3
    4b7e:	d325      	bcc.n	4bcc <create_chain+0x7c>
			if (ncl > scl) return 0;	/* No free cluster */
    4b80:	2f01      	cmp	r7, #1
    4b82:	d800      	bhi.n	4b86 <create_chain+0x36>
    4b84:	e176      	b.n	4e74 <create_chain+0x324>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    4b86:	2b02      	cmp	r3, #2
    4b88:	d911      	bls.n	4bae <create_chain+0x5e>
	switch (fs->fs_type) {
    4b8a:	782b      	ldrb	r3, [r5, #0]
			ncl = 2;
    4b8c:	2402      	movs	r4, #2
	switch (fs->fs_type) {
    4b8e:	2b02      	cmp	r3, #2
    4b90:	d021      	beq.n	4bd6 <create_chain+0x86>
    4b92:	2b03      	cmp	r3, #3
    4b94:	d100      	bne.n	4b98 <create_chain+0x48>
    4b96:	e07f      	b.n	4c98 <create_chain+0x148>
    4b98:	2b01      	cmp	r3, #1
    4b9a:	d042      	beq.n	4c22 <create_chain+0xd2>
    4b9c:	2401      	movs	r4, #1
    4b9e:	4264      	negs	r4, r4
    4ba0:	e006      	b.n	4bb0 <create_chain+0x60>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    4ba2:	2901      	cmp	r1, #1
    4ba4:	d903      	bls.n	4bae <create_chain+0x5e>
    4ba6:	6983      	ldr	r3, [r0, #24]
    4ba8:	4299      	cmp	r1, r3
    4baa:	d200      	bcs.n	4bae <create_chain+0x5e>
    4bac:	e164      	b.n	4e78 <create_chain+0x328>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    4bae:	2401      	movs	r4, #1
}
    4bb0:	0020      	movs	r0, r4
    4bb2:	b005      	add	sp, #20
    4bb4:	bc3c      	pop	{r2, r3, r4, r5}
    4bb6:	4690      	mov	r8, r2
    4bb8:	4699      	mov	r9, r3
    4bba:	46a2      	mov	sl, r4
    4bbc:	46ab      	mov	fp, r5
    4bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!scl || scl >= fs->n_fatent) scl = 1;
    4bc0:	6983      	ldr	r3, [r0, #24]
    4bc2:	459b      	cmp	fp, r3
    4bc4:	d3d6      	bcc.n	4b74 <create_chain+0x24>
    4bc6:	2201      	movs	r2, #1
    4bc8:	4693      	mov	fp, r2
    4bca:	e7d3      	b.n	4b74 <create_chain+0x24>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    4bcc:	2c01      	cmp	r4, #1
    4bce:	d9ee      	bls.n	4bae <create_chain+0x5e>
	switch (fs->fs_type) {
    4bd0:	782b      	ldrb	r3, [r5, #0]
    4bd2:	2b02      	cmp	r3, #2
    4bd4:	d1dd      	bne.n	4b92 <create_chain+0x42>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    4bd6:	6a2b      	ldr	r3, [r5, #32]
    4bd8:	0a26      	lsrs	r6, r4, #8
    4bda:	469c      	mov	ip, r3
    4bdc:	0033      	movs	r3, r6
    4bde:	4463      	add	r3, ip
    4be0:	001a      	movs	r2, r3
    4be2:	9300      	str	r3, [sp, #0]
	wsect = fs->winsect;
    4be4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    4be6:	4698      	mov	r8, r3
	if (wsect != sector) {	/* Changed current window */
    4be8:	4542      	cmp	r2, r8
    4bea:	d006      	beq.n	4bfa <create_chain+0xaa>
		if (fs->wflag) {	/* Write back dirty window if needed */
    4bec:	792b      	ldrb	r3, [r5, #4]
    4bee:	2b00      	cmp	r3, #0
    4bf0:	d000      	beq.n	4bf4 <create_chain+0xa4>
    4bf2:	e10b      	b.n	4e0c <create_chain+0x2bc>
		if (sector) {
    4bf4:	9b00      	ldr	r3, [sp, #0]
    4bf6:	2b00      	cmp	r3, #0
    4bf8:	d175      	bne.n	4ce6 <create_chain+0x196>
		p = &fs->win[clst * 2 % SS(fs)];
    4bfa:	23ff      	movs	r3, #255	; 0xff
    4bfc:	0062      	lsls	r2, r4, #1
    4bfe:	005b      	lsls	r3, r3, #1
    4c00:	401a      	ands	r2, r3
		return LD_WORD(p);
    4c02:	18aa      	adds	r2, r5, r2
    4c04:	3230      	adds	r2, #48	; 0x30
    4c06:	7851      	ldrb	r1, [r2, #1]
    4c08:	7813      	ldrb	r3, [r2, #0]
    4c0a:	0209      	lsls	r1, r1, #8
    4c0c:	430b      	orrs	r3, r1
		if (cs == 0) break;				/* Found a free cluster */
    4c0e:	2b00      	cmp	r3, #0
    4c10:	d100      	bne.n	4c14 <create_chain+0xc4>
    4c12:	e178      	b.n	4f06 <create_chain+0x3b6>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    4c14:	2b01      	cmp	r3, #1
    4c16:	d0ca      	beq.n	4bae <create_chain+0x5e>
		if (ncl == scl) return 0;		/* No free cluster */
    4c18:	42a7      	cmp	r7, r4
    4c1a:	d100      	bne.n	4c1e <create_chain+0xce>
    4c1c:	e12a      	b.n	4e74 <create_chain+0x324>
    4c1e:	69ab      	ldr	r3, [r5, #24]
    4c20:	e7ab      	b.n	4b7a <create_chain+0x2a>
		bc = (UINT)clst; bc += bc / 2;
    4c22:	0866      	lsrs	r6, r4, #1
    4c24:	1933      	adds	r3, r6, r4
    4c26:	9300      	str	r3, [sp, #0]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    4c28:	0a5b      	lsrs	r3, r3, #9
    4c2a:	4699      	mov	r9, r3
    4c2c:	6a2a      	ldr	r2, [r5, #32]
	wsect = fs->winsect;
    4c2e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    4c30:	4491      	add	r9, r2
	wsect = fs->winsect;
    4c32:	4698      	mov	r8, r3
	if (wsect != sector) {	/* Changed current window */
    4c34:	4599      	cmp	r9, r3
    4c36:	d009      	beq.n	4c4c <create_chain+0xfc>
		if (fs->wflag) {	/* Write back dirty window if needed */
    4c38:	792b      	ldrb	r3, [r5, #4]
    4c3a:	2b00      	cmp	r3, #0
    4c3c:	d000      	beq.n	4c40 <create_chain+0xf0>
    4c3e:	e0af      	b.n	4da0 <create_chain+0x250>
		if (sector) {
    4c40:	464b      	mov	r3, r9
    4c42:	2b00      	cmp	r3, #0
    4c44:	d16b      	bne.n	4d1e <create_chain+0x1ce>
    4c46:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    4c48:	6a2a      	ldr	r2, [r5, #32]
    4c4a:	4698      	mov	r8, r3
		wc = fs->win[bc % SS(fs)]; bc++;
    4c4c:	9900      	ldr	r1, [sp, #0]
    4c4e:	05cb      	lsls	r3, r1, #23
    4c50:	0ddb      	lsrs	r3, r3, #23
    4c52:	18eb      	adds	r3, r5, r3
    4c54:	3330      	adds	r3, #48	; 0x30
    4c56:	781b      	ldrb	r3, [r3, #0]
    4c58:	469a      	mov	sl, r3
    4c5a:	000b      	movs	r3, r1
    4c5c:	3301      	adds	r3, #1
    4c5e:	9300      	str	r3, [sp, #0]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    4c60:	0a5b      	lsrs	r3, r3, #9
    4c62:	4699      	mov	r9, r3
    4c64:	4491      	add	r9, r2
	if (wsect != sector) {	/* Changed current window */
    4c66:	45c1      	cmp	r9, r8
    4c68:	d007      	beq.n	4c7a <create_chain+0x12a>
		if (fs->wflag) {	/* Write back dirty window if needed */
    4c6a:	792b      	ldrb	r3, [r5, #4]
    4c6c:	2b00      	cmp	r3, #0
    4c6e:	d000      	beq.n	4c72 <create_chain+0x122>
    4c70:	e11b      	b.n	4eaa <create_chain+0x35a>
		if (sector) {
    4c72:	464b      	mov	r3, r9
    4c74:	2b00      	cmp	r3, #0
    4c76:	d000      	beq.n	4c7a <create_chain+0x12a>
    4c78:	e10a      	b.n	4e90 <create_chain+0x340>
		wc |= fs->win[bc % SS(fs)] << 8;
    4c7a:	9b00      	ldr	r3, [sp, #0]
    4c7c:	05de      	lsls	r6, r3, #23
    4c7e:	4653      	mov	r3, sl
    4c80:	0df6      	lsrs	r6, r6, #23
    4c82:	19ae      	adds	r6, r5, r6
    4c84:	3630      	adds	r6, #48	; 0x30
    4c86:	7832      	ldrb	r2, [r6, #0]
    4c88:	0212      	lsls	r2, r2, #8
    4c8a:	431a      	orrs	r2, r3
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    4c8c:	0913      	lsrs	r3, r2, #4
    4c8e:	07e1      	lsls	r1, r4, #31
    4c90:	d4bd      	bmi.n	4c0e <create_chain+0xbe>
    4c92:	0513      	lsls	r3, r2, #20
    4c94:	0d1b      	lsrs	r3, r3, #20
    4c96:	e7ba      	b.n	4c0e <create_chain+0xbe>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    4c98:	6a2b      	ldr	r3, [r5, #32]
    4c9a:	09e6      	lsrs	r6, r4, #7
    4c9c:	469c      	mov	ip, r3
    4c9e:	0033      	movs	r3, r6
    4ca0:	4463      	add	r3, ip
    4ca2:	001a      	movs	r2, r3
    4ca4:	9300      	str	r3, [sp, #0]
	wsect = fs->winsect;
    4ca6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    4ca8:	4698      	mov	r8, r3
	if (wsect != sector) {	/* Changed current window */
    4caa:	4542      	cmp	r2, r8
    4cac:	d005      	beq.n	4cba <create_chain+0x16a>
		if (fs->wflag) {	/* Write back dirty window if needed */
    4cae:	792b      	ldrb	r3, [r5, #4]
    4cb0:	2b00      	cmp	r3, #0
    4cb2:	d143      	bne.n	4d3c <create_chain+0x1ec>
		if (sector) {
    4cb4:	9b00      	ldr	r3, [sp, #0]
    4cb6:	2b00      	cmp	r3, #0
    4cb8:	d123      	bne.n	4d02 <create_chain+0x1b2>
		p = &fs->win[clst * 4 % SS(fs)];
    4cba:	23fe      	movs	r3, #254	; 0xfe
    4cbc:	00a2      	lsls	r2, r4, #2
    4cbe:	005b      	lsls	r3, r3, #1
    4cc0:	401a      	ands	r2, r3
    4cc2:	0011      	movs	r1, r2
    4cc4:	3130      	adds	r1, #48	; 0x30
    4cc6:	1869      	adds	r1, r5, r1
		return LD_DWORD(p) & 0x0FFFFFFF;
    4cc8:	78cb      	ldrb	r3, [r1, #3]
    4cca:	7888      	ldrb	r0, [r1, #2]
    4ccc:	18aa      	adds	r2, r5, r2
    4cce:	3230      	adds	r2, #48	; 0x30
    4cd0:	7812      	ldrb	r2, [r2, #0]
    4cd2:	061b      	lsls	r3, r3, #24
    4cd4:	0400      	lsls	r0, r0, #16
    4cd6:	4303      	orrs	r3, r0
    4cd8:	4313      	orrs	r3, r2
    4cda:	784a      	ldrb	r2, [r1, #1]
    4cdc:	0212      	lsls	r2, r2, #8
    4cde:	4313      	orrs	r3, r2
    4ce0:	011b      	lsls	r3, r3, #4
    4ce2:	091b      	lsrs	r3, r3, #4
    4ce4:	e793      	b.n	4c0e <create_chain+0xbe>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    4ce6:	0029      	movs	r1, r5
    4ce8:	001a      	movs	r2, r3
    4cea:	7868      	ldrb	r0, [r5, #1]
    4cec:	2301      	movs	r3, #1
    4cee:	3130      	adds	r1, #48	; 0x30
    4cf0:	4e9a      	ldr	r6, [pc, #616]	; (4f5c <create_chain+0x40c>)
    4cf2:	4690      	mov	r8, r2
    4cf4:	47b0      	blx	r6
    4cf6:	2800      	cmp	r0, #0
    4cf8:	d000      	beq.n	4cfc <create_chain+0x1ac>
    4cfa:	e74f      	b.n	4b9c <create_chain+0x4c>
			fs->winsect = sector;
    4cfc:	4643      	mov	r3, r8
    4cfe:	62eb      	str	r3, [r5, #44]	; 0x2c
    4d00:	e77b      	b.n	4bfa <create_chain+0xaa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    4d02:	0029      	movs	r1, r5
    4d04:	001a      	movs	r2, r3
    4d06:	7868      	ldrb	r0, [r5, #1]
    4d08:	2301      	movs	r3, #1
    4d0a:	3130      	adds	r1, #48	; 0x30
    4d0c:	4e93      	ldr	r6, [pc, #588]	; (4f5c <create_chain+0x40c>)
    4d0e:	4691      	mov	r9, r2
    4d10:	47b0      	blx	r6
    4d12:	2800      	cmp	r0, #0
    4d14:	d000      	beq.n	4d18 <create_chain+0x1c8>
    4d16:	e741      	b.n	4b9c <create_chain+0x4c>
			fs->winsect = sector;
    4d18:	464b      	mov	r3, r9
    4d1a:	62eb      	str	r3, [r5, #44]	; 0x2c
    4d1c:	e7cd      	b.n	4cba <create_chain+0x16a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    4d1e:	0029      	movs	r1, r5
    4d20:	7868      	ldrb	r0, [r5, #1]
    4d22:	2301      	movs	r3, #1
    4d24:	464a      	mov	r2, r9
    4d26:	3130      	adds	r1, #48	; 0x30
    4d28:	4e8c      	ldr	r6, [pc, #560]	; (4f5c <create_chain+0x40c>)
    4d2a:	47b0      	blx	r6
    4d2c:	2800      	cmp	r0, #0
    4d2e:	d000      	beq.n	4d32 <create_chain+0x1e2>
    4d30:	e734      	b.n	4b9c <create_chain+0x4c>
			fs->winsect = sector;
    4d32:	464b      	mov	r3, r9
    4d34:	6a2a      	ldr	r2, [r5, #32]
    4d36:	62eb      	str	r3, [r5, #44]	; 0x2c
    4d38:	46c8      	mov	r8, r9
    4d3a:	e787      	b.n	4c4c <create_chain+0xfc>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    4d3c:	2330      	movs	r3, #48	; 0x30
    4d3e:	469a      	mov	sl, r3
    4d40:	44aa      	add	sl, r5
    4d42:	7868      	ldrb	r0, [r5, #1]
    4d44:	3b2f      	subs	r3, #47	; 0x2f
    4d46:	4642      	mov	r2, r8
    4d48:	4651      	mov	r1, sl
    4d4a:	4e85      	ldr	r6, [pc, #532]	; (4f60 <create_chain+0x410>)
    4d4c:	47b0      	blx	r6
    4d4e:	2800      	cmp	r0, #0
    4d50:	d000      	beq.n	4d54 <create_chain+0x204>
    4d52:	e723      	b.n	4b9c <create_chain+0x4c>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    4d54:	69eb      	ldr	r3, [r5, #28]
    4d56:	6a2a      	ldr	r2, [r5, #32]
			fs->wflag = 0;
    4d58:	7128      	strb	r0, [r5, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    4d5a:	189a      	adds	r2, r3, r2
    4d5c:	4590      	cmp	r8, r2
    4d5e:	d2a9      	bcs.n	4cb4 <create_chain+0x164>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4d60:	78ea      	ldrb	r2, [r5, #3]
    4d62:	4691      	mov	r9, r2
    4d64:	2a01      	cmp	r2, #1
    4d66:	d9a5      	bls.n	4cb4 <create_chain+0x164>
    4d68:	4652      	mov	r2, sl
    4d6a:	9201      	str	r2, [sp, #4]
    4d6c:	9a00      	ldr	r2, [sp, #0]
    4d6e:	002e      	movs	r6, r5
    4d70:	46a2      	mov	sl, r4
    4d72:	4645      	mov	r5, r8
    4d74:	464c      	mov	r4, r9
    4d76:	46b8      	mov	r8, r7
    4d78:	4691      	mov	r9, r2
    4d7a:	e000      	b.n	4d7e <create_chain+0x22e>
    4d7c:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
    4d7e:	18ed      	adds	r5, r5, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4d80:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    4d82:	7870      	ldrb	r0, [r6, #1]
    4d84:	2301      	movs	r3, #1
    4d86:	002a      	movs	r2, r5
    4d88:	9901      	ldr	r1, [sp, #4]
    4d8a:	4f75      	ldr	r7, [pc, #468]	; (4f60 <create_chain+0x410>)
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4d8c:	b2e4      	uxtb	r4, r4
					disk_write(fs->drv, fs->win, wsect, 1);
    4d8e:	47b8      	blx	r7
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4d90:	2c01      	cmp	r4, #1
    4d92:	d1f3      	bne.n	4d7c <create_chain+0x22c>
    4d94:	464b      	mov	r3, r9
    4d96:	4647      	mov	r7, r8
    4d98:	4654      	mov	r4, sl
    4d9a:	0035      	movs	r5, r6
    4d9c:	9300      	str	r3, [sp, #0]
    4d9e:	e789      	b.n	4cb4 <create_chain+0x164>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    4da0:	2330      	movs	r3, #48	; 0x30
    4da2:	469c      	mov	ip, r3
    4da4:	44ac      	add	ip, r5
    4da6:	4663      	mov	r3, ip
    4da8:	4e6d      	ldr	r6, [pc, #436]	; (4f60 <create_chain+0x410>)
    4daa:	9302      	str	r3, [sp, #8]
    4dac:	7868      	ldrb	r0, [r5, #1]
    4dae:	4661      	mov	r1, ip
    4db0:	2301      	movs	r3, #1
    4db2:	4642      	mov	r2, r8
    4db4:	9601      	str	r6, [sp, #4]
    4db6:	47b0      	blx	r6
    4db8:	2800      	cmp	r0, #0
    4dba:	d000      	beq.n	4dbe <create_chain+0x26e>
    4dbc:	e6ee      	b.n	4b9c <create_chain+0x4c>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    4dbe:	69eb      	ldr	r3, [r5, #28]
    4dc0:	6a2a      	ldr	r2, [r5, #32]
			fs->wflag = 0;
    4dc2:	7128      	strb	r0, [r5, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    4dc4:	189a      	adds	r2, r3, r2
    4dc6:	4590      	cmp	r8, r2
    4dc8:	d300      	bcc.n	4dcc <create_chain+0x27c>
    4dca:	e739      	b.n	4c40 <create_chain+0xf0>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4dcc:	78ea      	ldrb	r2, [r5, #3]
    4dce:	4692      	mov	sl, r2
    4dd0:	2a01      	cmp	r2, #1
    4dd2:	d800      	bhi.n	4dd6 <create_chain+0x286>
    4dd4:	e734      	b.n	4c40 <create_chain+0xf0>
    4dd6:	0022      	movs	r2, r4
    4dd8:	9900      	ldr	r1, [sp, #0]
    4dda:	4654      	mov	r4, sl
    4ddc:	002e      	movs	r6, r5
    4dde:	9703      	str	r7, [sp, #12]
    4de0:	4645      	mov	r5, r8
    4de2:	4692      	mov	sl, r2
    4de4:	4688      	mov	r8, r1
    4de6:	e000      	b.n	4dea <create_chain+0x29a>
    4de8:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
    4dea:	18ed      	adds	r5, r5, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4dec:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    4dee:	7870      	ldrb	r0, [r6, #1]
    4df0:	2301      	movs	r3, #1
    4df2:	002a      	movs	r2, r5
    4df4:	9902      	ldr	r1, [sp, #8]
    4df6:	9f01      	ldr	r7, [sp, #4]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4df8:	b2e4      	uxtb	r4, r4
					disk_write(fs->drv, fs->win, wsect, 1);
    4dfa:	47b8      	blx	r7
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4dfc:	2c01      	cmp	r4, #1
    4dfe:	d1f3      	bne.n	4de8 <create_chain+0x298>
    4e00:	4643      	mov	r3, r8
    4e02:	9f03      	ldr	r7, [sp, #12]
    4e04:	4654      	mov	r4, sl
    4e06:	0035      	movs	r5, r6
    4e08:	9300      	str	r3, [sp, #0]
    4e0a:	e719      	b.n	4c40 <create_chain+0xf0>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    4e0c:	2330      	movs	r3, #48	; 0x30
    4e0e:	469a      	mov	sl, r3
    4e10:	44aa      	add	sl, r5
    4e12:	7868      	ldrb	r0, [r5, #1]
    4e14:	3b2f      	subs	r3, #47	; 0x2f
    4e16:	4642      	mov	r2, r8
    4e18:	4651      	mov	r1, sl
    4e1a:	4e51      	ldr	r6, [pc, #324]	; (4f60 <create_chain+0x410>)
    4e1c:	47b0      	blx	r6
    4e1e:	2800      	cmp	r0, #0
    4e20:	d000      	beq.n	4e24 <create_chain+0x2d4>
    4e22:	e6bb      	b.n	4b9c <create_chain+0x4c>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    4e24:	69eb      	ldr	r3, [r5, #28]
    4e26:	6a2a      	ldr	r2, [r5, #32]
			fs->wflag = 0;
    4e28:	7128      	strb	r0, [r5, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    4e2a:	189a      	adds	r2, r3, r2
    4e2c:	4590      	cmp	r8, r2
    4e2e:	d300      	bcc.n	4e32 <create_chain+0x2e2>
    4e30:	e6e0      	b.n	4bf4 <create_chain+0xa4>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4e32:	78ea      	ldrb	r2, [r5, #3]
    4e34:	4691      	mov	r9, r2
    4e36:	2a01      	cmp	r2, #1
    4e38:	d800      	bhi.n	4e3c <create_chain+0x2ec>
    4e3a:	e6db      	b.n	4bf4 <create_chain+0xa4>
    4e3c:	4652      	mov	r2, sl
    4e3e:	9201      	str	r2, [sp, #4]
    4e40:	9a00      	ldr	r2, [sp, #0]
    4e42:	002e      	movs	r6, r5
    4e44:	46a2      	mov	sl, r4
    4e46:	4645      	mov	r5, r8
    4e48:	464c      	mov	r4, r9
    4e4a:	46b8      	mov	r8, r7
    4e4c:	4691      	mov	r9, r2
    4e4e:	e000      	b.n	4e52 <create_chain+0x302>
    4e50:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
    4e52:	18ed      	adds	r5, r5, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4e54:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    4e56:	7870      	ldrb	r0, [r6, #1]
    4e58:	2301      	movs	r3, #1
    4e5a:	002a      	movs	r2, r5
    4e5c:	9901      	ldr	r1, [sp, #4]
    4e5e:	4f40      	ldr	r7, [pc, #256]	; (4f60 <create_chain+0x410>)
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4e60:	b2e4      	uxtb	r4, r4
					disk_write(fs->drv, fs->win, wsect, 1);
    4e62:	47b8      	blx	r7
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4e64:	2c01      	cmp	r4, #1
    4e66:	d1f3      	bne.n	4e50 <create_chain+0x300>
    4e68:	464b      	mov	r3, r9
    4e6a:	4647      	mov	r7, r8
    4e6c:	4654      	mov	r4, sl
    4e6e:	0035      	movs	r5, r6
    4e70:	9300      	str	r3, [sp, #0]
    4e72:	e6bf      	b.n	4bf4 <create_chain+0xa4>
		if (ncl == scl) return 0;		/* No free cluster */
    4e74:	2400      	movs	r4, #0
    4e76:	e69b      	b.n	4bb0 <create_chain+0x60>
    4e78:	4b3a      	ldr	r3, [pc, #232]	; (4f64 <create_chain+0x414>)
    4e7a:	4798      	blx	r3
    4e7c:	0004      	movs	r4, r0
		if (cs < 2) return 1;			/* It is an invalid cluster */
    4e7e:	2801      	cmp	r0, #1
    4e80:	d800      	bhi.n	4e84 <create_chain+0x334>
    4e82:	e694      	b.n	4bae <create_chain+0x5e>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    4e84:	69ab      	ldr	r3, [r5, #24]
    4e86:	46d3      	mov	fp, sl
    4e88:	4283      	cmp	r3, r0
    4e8a:	d800      	bhi.n	4e8e <create_chain+0x33e>
    4e8c:	e672      	b.n	4b74 <create_chain+0x24>
    4e8e:	e68f      	b.n	4bb0 <create_chain+0x60>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    4e90:	0029      	movs	r1, r5
    4e92:	7868      	ldrb	r0, [r5, #1]
    4e94:	2301      	movs	r3, #1
    4e96:	464a      	mov	r2, r9
    4e98:	3130      	adds	r1, #48	; 0x30
    4e9a:	4e30      	ldr	r6, [pc, #192]	; (4f5c <create_chain+0x40c>)
    4e9c:	47b0      	blx	r6
    4e9e:	2800      	cmp	r0, #0
    4ea0:	d000      	beq.n	4ea4 <create_chain+0x354>
    4ea2:	e67b      	b.n	4b9c <create_chain+0x4c>
			fs->winsect = sector;
    4ea4:	464b      	mov	r3, r9
    4ea6:	62eb      	str	r3, [r5, #44]	; 0x2c
    4ea8:	e6e7      	b.n	4c7a <create_chain+0x12a>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    4eaa:	2330      	movs	r3, #48	; 0x30
    4eac:	469c      	mov	ip, r3
    4eae:	44ac      	add	ip, r5
    4eb0:	4661      	mov	r1, ip
    4eb2:	4e2b      	ldr	r6, [pc, #172]	; (4f60 <create_chain+0x410>)
    4eb4:	7868      	ldrb	r0, [r5, #1]
    4eb6:	2301      	movs	r3, #1
    4eb8:	4642      	mov	r2, r8
    4eba:	9102      	str	r1, [sp, #8]
    4ebc:	9601      	str	r6, [sp, #4]
    4ebe:	47b0      	blx	r6
    4ec0:	2800      	cmp	r0, #0
    4ec2:	d000      	beq.n	4ec6 <create_chain+0x376>
    4ec4:	e66a      	b.n	4b9c <create_chain+0x4c>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    4ec6:	69eb      	ldr	r3, [r5, #28]
    4ec8:	6a2a      	ldr	r2, [r5, #32]
			fs->wflag = 0;
    4eca:	7128      	strb	r0, [r5, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    4ecc:	189a      	adds	r2, r3, r2
    4ece:	4542      	cmp	r2, r8
    4ed0:	d800      	bhi.n	4ed4 <create_chain+0x384>
    4ed2:	e6ce      	b.n	4c72 <create_chain+0x122>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4ed4:	78ea      	ldrb	r2, [r5, #3]
    4ed6:	2a01      	cmp	r2, #1
    4ed8:	d800      	bhi.n	4edc <create_chain+0x38c>
    4eda:	e6ca      	b.n	4c72 <create_chain+0x122>
    4edc:	9703      	str	r7, [sp, #12]
    4ede:	0017      	movs	r7, r2
    4ee0:	0022      	movs	r2, r4
    4ee2:	4644      	mov	r4, r8
    4ee4:	4690      	mov	r8, r2
    4ee6:	e000      	b.n	4eea <create_chain+0x39a>
    4ee8:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
    4eea:	18e4      	adds	r4, r4, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4eec:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    4eee:	7868      	ldrb	r0, [r5, #1]
    4ef0:	2301      	movs	r3, #1
    4ef2:	0022      	movs	r2, r4
    4ef4:	9902      	ldr	r1, [sp, #8]
    4ef6:	9e01      	ldr	r6, [sp, #4]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4ef8:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
    4efa:	47b0      	blx	r6
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4efc:	2f01      	cmp	r7, #1
    4efe:	d1f3      	bne.n	4ee8 <create_chain+0x398>
    4f00:	9f03      	ldr	r7, [sp, #12]
    4f02:	4644      	mov	r4, r8
    4f04:	e6b5      	b.n	4c72 <create_chain+0x122>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    4f06:	69ab      	ldr	r3, [r5, #24]
    4f08:	42a3      	cmp	r3, r4
    4f0a:	d800      	bhi.n	4f0e <create_chain+0x3be>
    4f0c:	e64f      	b.n	4bae <create_chain+0x5e>
    4f0e:	4a16      	ldr	r2, [pc, #88]	; (4f68 <create_chain+0x418>)
    4f10:	0021      	movs	r1, r4
    4f12:	0028      	movs	r0, r5
    4f14:	4e15      	ldr	r6, [pc, #84]	; (4f6c <create_chain+0x41c>)
    4f16:	47b0      	blx	r6
	if (res == FR_OK && clst != 0) {
    4f18:	2800      	cmp	r0, #0
    4f1a:	d11a      	bne.n	4f52 <create_chain+0x402>
    4f1c:	465b      	mov	r3, fp
    4f1e:	2b00      	cmp	r3, #0
    4f20:	d00d      	beq.n	4f3e <create_chain+0x3ee>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    4f22:	465b      	mov	r3, fp
    4f24:	2b01      	cmp	r3, #1
    4f26:	d800      	bhi.n	4f2a <create_chain+0x3da>
    4f28:	e641      	b.n	4bae <create_chain+0x5e>
    4f2a:	69ab      	ldr	r3, [r5, #24]
    4f2c:	459b      	cmp	fp, r3
    4f2e:	d300      	bcc.n	4f32 <create_chain+0x3e2>
    4f30:	e63d      	b.n	4bae <create_chain+0x5e>
    4f32:	0022      	movs	r2, r4
    4f34:	4659      	mov	r1, fp
    4f36:	0028      	movs	r0, r5
    4f38:	47b0      	blx	r6
	if (res == FR_OK) {
    4f3a:	2800      	cmp	r0, #0
    4f3c:	d109      	bne.n	4f52 <create_chain+0x402>
		if (fs->free_clust != 0xFFFFFFFF) {
    4f3e:	692b      	ldr	r3, [r5, #16]
		fs->last_clust = ncl;			/* Update FSINFO */
    4f40:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    4f42:	1c5a      	adds	r2, r3, #1
    4f44:	d100      	bne.n	4f48 <create_chain+0x3f8>
    4f46:	e633      	b.n	4bb0 <create_chain+0x60>
			fs->free_clust--;
    4f48:	3b01      	subs	r3, #1
    4f4a:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
    4f4c:	2301      	movs	r3, #1
    4f4e:	716b      	strb	r3, [r5, #5]
    4f50:	e62e      	b.n	4bb0 <create_chain+0x60>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    4f52:	2801      	cmp	r0, #1
    4f54:	d100      	bne.n	4f58 <create_chain+0x408>
    4f56:	e621      	b.n	4b9c <create_chain+0x4c>
    4f58:	e629      	b.n	4bae <create_chain+0x5e>
    4f5a:	46c0      	nop			; (mov r8, r8)
    4f5c:	00003d3d 	.word	0x00003d3d
    4f60:	00003dc1 	.word	0x00003dc1
    4f64:	00004789 	.word	0x00004789
    4f68:	0fffffff 	.word	0x0fffffff
    4f6c:	000040ad 	.word	0x000040ad

00004f70 <dir_next.constprop.7>:
/*-----------------------------------------------------------------------*/
/* Directory handling - Move directory index next                        */
/*-----------------------------------------------------------------------*/

static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
    4f70:	b570      	push	{r4, r5, r6, lr}
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
    4f72:	88c4      	ldrh	r4, [r0, #6]
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
    4f74:	0005      	movs	r5, r0
	i = dj->index + 1;
    4f76:	3401      	adds	r4, #1
    4f78:	b2a4      	uxth	r4, r4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    4f7a:	2c00      	cmp	r4, #0
    4f7c:	d101      	bne.n	4f82 <dir_next.constprop.7+0x12>
		return FR_NO_FILE;
    4f7e:	2004      	movs	r0, #4

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;

	return FR_OK;
}
    4f80:	bd70      	pop	{r4, r5, r6, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    4f82:	6903      	ldr	r3, [r0, #16]
    4f84:	2b00      	cmp	r3, #0
    4f86:	d0fa      	beq.n	4f7e <dir_next.constprop.7+0xe>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    4f88:	260f      	movs	r6, #15
    4f8a:	4026      	ands	r6, r4
    4f8c:	d007      	beq.n	4f9e <dir_next.constprop.7+0x2e>
    4f8e:	6803      	ldr	r3, [r0, #0]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    4f90:	3330      	adds	r3, #48	; 0x30
    4f92:	0176      	lsls	r6, r6, #5
    4f94:	199e      	adds	r6, r3, r6
	dj->index = i;
    4f96:	80ec      	strh	r4, [r5, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    4f98:	616e      	str	r6, [r5, #20]
	return FR_OK;
    4f9a:	2000      	movs	r0, #0
    4f9c:	e7f0      	b.n	4f80 <dir_next.constprop.7+0x10>
		if (dj->clust == 0) {	/* Static table */
    4f9e:	68c1      	ldr	r1, [r0, #12]
		dj->sect++;					/* Next sector */
    4fa0:	3301      	adds	r3, #1
    4fa2:	6103      	str	r3, [r0, #16]
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    4fa4:	6803      	ldr	r3, [r0, #0]
		if (dj->clust == 0) {	/* Static table */
    4fa6:	2900      	cmp	r1, #0
    4fa8:	d00b      	beq.n	4fc2 <dir_next.constprop.7+0x52>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    4faa:	789a      	ldrb	r2, [r3, #2]
    4fac:	0920      	lsrs	r0, r4, #4
    4fae:	3a01      	subs	r2, #1
    4fb0:	4210      	tst	r0, r2
    4fb2:	d1ed      	bne.n	4f90 <dir_next.constprop.7+0x20>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    4fb4:	2901      	cmp	r1, #1
    4fb6:	d902      	bls.n	4fbe <dir_next.constprop.7+0x4e>
    4fb8:	699a      	ldr	r2, [r3, #24]
    4fba:	4291      	cmp	r1, r2
    4fbc:	d305      	bcc.n	4fca <dir_next.constprop.7+0x5a>
				if (clst <= 1) return FR_INT_ERR;
    4fbe:	2002      	movs	r0, #2
    4fc0:	e7de      	b.n	4f80 <dir_next.constprop.7+0x10>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    4fc2:	891a      	ldrh	r2, [r3, #8]
    4fc4:	42a2      	cmp	r2, r4
    4fc6:	d9da      	bls.n	4f7e <dir_next.constprop.7+0xe>
    4fc8:	e7e2      	b.n	4f90 <dir_next.constprop.7+0x20>
    4fca:	0018      	movs	r0, r3
    4fcc:	4b0c      	ldr	r3, [pc, #48]	; (5000 <dir_next.constprop.7+0x90>)
    4fce:	4798      	blx	r3
				if (clst <= 1) return FR_INT_ERR;
    4fd0:	2801      	cmp	r0, #1
    4fd2:	d9f4      	bls.n	4fbe <dir_next.constprop.7+0x4e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    4fd4:	1c43      	adds	r3, r0, #1
    4fd6:	d010      	beq.n	4ffa <dir_next.constprop.7+0x8a>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    4fd8:	682b      	ldr	r3, [r5, #0]
    4fda:	699a      	ldr	r2, [r3, #24]
    4fdc:	4290      	cmp	r0, r2
    4fde:	d2ce      	bcs.n	4f7e <dir_next.constprop.7+0xe>
				dj->clust = clst;				/* Initialize data for new cluster */
    4fe0:	60e8      	str	r0, [r5, #12]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    4fe2:	699a      	ldr	r2, [r3, #24]
	clst -= 2;
    4fe4:	3802      	subs	r0, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    4fe6:	3a02      	subs	r2, #2
    4fe8:	2100      	movs	r1, #0
    4fea:	4290      	cmp	r0, r2
    4fec:	d203      	bcs.n	4ff6 <dir_next.constprop.7+0x86>
	return clst * fs->csize + fs->database;
    4fee:	789a      	ldrb	r2, [r3, #2]
    4ff0:	4350      	muls	r0, r2
    4ff2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4ff4:	1881      	adds	r1, r0, r2
				dj->sect = clust2sect(dj->fs, clst);
    4ff6:	6129      	str	r1, [r5, #16]
    4ff8:	e7ca      	b.n	4f90 <dir_next.constprop.7+0x20>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    4ffa:	2001      	movs	r0, #1
    4ffc:	e7c0      	b.n	4f80 <dir_next.constprop.7+0x10>
    4ffe:	46c0      	nop			; (mov r8, r8)
    5000:	00004789 	.word	0x00004789

00005004 <dir_find.part.5>:
/*-----------------------------------------------------------------------*/
/* Directory handling - Find an object in the directory                  */
/*-----------------------------------------------------------------------*/

static
FRESULT dir_find (
    5004:	b5f0      	push	{r4, r5, r6, r7, lr}
    5006:	4657      	mov	r7, sl
    5008:	464e      	mov	r6, r9
    500a:	4645      	mov	r5, r8
    500c:	46de      	mov	lr, fp
    500e:	b5e0      	push	{r5, r6, r7, lr}
    5010:	6906      	ldr	r6, [r0, #16]
    5012:	23ff      	movs	r3, #255	; 0xff
    5014:	0005      	movs	r5, r0
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    5016:	0037      	movs	r7, r6
FRESULT dir_find (
    5018:	b085      	sub	sp, #20
    501a:	6804      	ldr	r4, [r0, #0]
    501c:	9302      	str	r3, [sp, #8]
    501e:	9301      	str	r3, [sp, #4]
	wsect = fs->winsect;
    5020:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5022:	001a      	movs	r2, r3
	if (wsect != sector) {	/* Changed current window */
    5024:	42bb      	cmp	r3, r7
    5026:	d010      	beq.n	504a <dir_find.part.5+0x46>
		if (fs->wflag) {	/* Write back dirty window if needed */
    5028:	7923      	ldrb	r3, [r4, #4]
    502a:	2b00      	cmp	r3, #0
    502c:	d000      	beq.n	5030 <dir_find.part.5+0x2c>
    502e:	e0c8      	b.n	51c2 <dir_find.part.5+0x1be>
		if (sector) {
    5030:	2f00      	cmp	r7, #0
    5032:	d00a      	beq.n	504a <dir_find.part.5+0x46>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    5034:	0021      	movs	r1, r4
    5036:	7860      	ldrb	r0, [r4, #1]
    5038:	2301      	movs	r3, #1
    503a:	003a      	movs	r2, r7
    503c:	3130      	adds	r1, #48	; 0x30
    503e:	4ec0      	ldr	r6, [pc, #768]	; (5340 <dir_find.part.5+0x33c>)
    5040:	47b0      	blx	r6
    5042:	2800      	cmp	r0, #0
    5044:	d000      	beq.n	5048 <dir_find.part.5+0x44>
    5046:	e0ea      	b.n	521e <dir_find.part.5+0x21a>
			fs->winsect = sector;
    5048:	62e7      	str	r7, [r4, #44]	; 0x2c
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    504a:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
    504c:	7823      	ldrb	r3, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    504e:	2b00      	cmp	r3, #0
    5050:	d010      	beq.n	5074 <dir_find.part.5+0x70>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
    5052:	223f      	movs	r2, #63	; 0x3f
    5054:	7ae1      	ldrb	r1, [r4, #11]
    5056:	400a      	ands	r2, r1
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    5058:	2be5      	cmp	r3, #229	; 0xe5
    505a:	d004      	beq.n	5066 <dir_find.part.5+0x62>
    505c:	0709      	lsls	r1, r1, #28
    505e:	d522      	bpl.n	50a6 <dir_find.part.5+0xa2>
    5060:	2a0f      	cmp	r2, #15
    5062:	d100      	bne.n	5066 <dir_find.part.5+0x62>
    5064:	e0dd      	b.n	5222 <dir_find.part.5+0x21e>
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    5066:	23ff      	movs	r3, #255	; 0xff
    5068:	9301      	str	r3, [sp, #4]
	i = dj->index + 1;
    506a:	88ee      	ldrh	r6, [r5, #6]
    506c:	3601      	adds	r6, #1
    506e:	b2b6      	uxth	r6, r6
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    5070:	2e00      	cmp	r6, #0
    5072:	d107      	bne.n	5084 <dir_find.part.5+0x80>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    5074:	2004      	movs	r0, #4
#endif
		res = dir_next(dj, 0);		/* Next entry */
	} while (res == FR_OK);

	return res;
}
    5076:	b005      	add	sp, #20
    5078:	bc3c      	pop	{r2, r3, r4, r5}
    507a:	4690      	mov	r8, r2
    507c:	4699      	mov	r9, r3
    507e:	46a2      	mov	sl, r4
    5080:	46ab      	mov	fp, r5
    5082:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    5084:	692f      	ldr	r7, [r5, #16]
    5086:	2f00      	cmp	r7, #0
    5088:	d0f4      	beq.n	5074 <dir_find.part.5+0x70>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    508a:	230f      	movs	r3, #15
    508c:	4033      	ands	r3, r6
    508e:	4698      	mov	r8, r3
    5090:	d100      	bne.n	5094 <dir_find.part.5+0x90>
    5092:	e10e      	b.n	52b2 <dir_find.part.5+0x2ae>
    5094:	682c      	ldr	r4, [r5, #0]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    5096:	4643      	mov	r3, r8
    5098:	015a      	lsls	r2, r3, #5
    509a:	0023      	movs	r3, r4
    509c:	3330      	adds	r3, #48	; 0x30
    509e:	189b      	adds	r3, r3, r2
	dj->index = i;
    50a0:	80ee      	strh	r6, [r5, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    50a2:	616b      	str	r3, [r5, #20]
    50a4:	e7bc      	b.n	5020 <dir_find.part.5+0x1c>
			if (a == AM_LFN) {			/* An LFN entry is found */
    50a6:	2a0f      	cmp	r2, #15
    50a8:	d100      	bne.n	50ac <dir_find.part.5+0xa8>
    50aa:	e0ba      	b.n	5222 <dir_find.part.5+0x21e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    50ac:	9a01      	ldr	r2, [sp, #4]
    50ae:	2a00      	cmp	r2, #0
    50b0:	d146      	bne.n	5140 <dir_find.part.5+0x13c>
	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    50b2:	085a      	lsrs	r2, r3, #1
    50b4:	01db      	lsls	r3, r3, #7
    50b6:	4313      	orrs	r3, r2
    50b8:	7862      	ldrb	r2, [r4, #1]
    50ba:	189b      	adds	r3, r3, r2
    50bc:	b2da      	uxtb	r2, r3
    50be:	0852      	lsrs	r2, r2, #1
    50c0:	01db      	lsls	r3, r3, #7
    50c2:	431a      	orrs	r2, r3
    50c4:	78a3      	ldrb	r3, [r4, #2]
    50c6:	b2d2      	uxtb	r2, r2
    50c8:	18d2      	adds	r2, r2, r3
    50ca:	b2d3      	uxtb	r3, r2
    50cc:	085b      	lsrs	r3, r3, #1
    50ce:	01d2      	lsls	r2, r2, #7
    50d0:	4313      	orrs	r3, r2
    50d2:	78e2      	ldrb	r2, [r4, #3]
    50d4:	b2db      	uxtb	r3, r3
    50d6:	189b      	adds	r3, r3, r2
    50d8:	b2da      	uxtb	r2, r3
    50da:	0852      	lsrs	r2, r2, #1
    50dc:	01db      	lsls	r3, r3, #7
    50de:	431a      	orrs	r2, r3
    50e0:	7923      	ldrb	r3, [r4, #4]
    50e2:	b2d2      	uxtb	r2, r2
    50e4:	18d2      	adds	r2, r2, r3
    50e6:	b2d3      	uxtb	r3, r2
    50e8:	085b      	lsrs	r3, r3, #1
    50ea:	01d2      	lsls	r2, r2, #7
    50ec:	4313      	orrs	r3, r2
    50ee:	7962      	ldrb	r2, [r4, #5]
    50f0:	b2db      	uxtb	r3, r3
    50f2:	189b      	adds	r3, r3, r2
    50f4:	b2da      	uxtb	r2, r3
    50f6:	0852      	lsrs	r2, r2, #1
    50f8:	01db      	lsls	r3, r3, #7
    50fa:	431a      	orrs	r2, r3
    50fc:	79a3      	ldrb	r3, [r4, #6]
    50fe:	b2d2      	uxtb	r2, r2
    5100:	18d2      	adds	r2, r2, r3
    5102:	b2d3      	uxtb	r3, r2
    5104:	085b      	lsrs	r3, r3, #1
    5106:	01d2      	lsls	r2, r2, #7
    5108:	4313      	orrs	r3, r2
    510a:	79e2      	ldrb	r2, [r4, #7]
    510c:	b2db      	uxtb	r3, r3
    510e:	189b      	adds	r3, r3, r2
    5110:	b2da      	uxtb	r2, r3
    5112:	0852      	lsrs	r2, r2, #1
    5114:	01db      	lsls	r3, r3, #7
    5116:	431a      	orrs	r2, r3
    5118:	7a23      	ldrb	r3, [r4, #8]
    511a:	b2d2      	uxtb	r2, r2
    511c:	18d2      	adds	r2, r2, r3
    511e:	b2d3      	uxtb	r3, r2
    5120:	085b      	lsrs	r3, r3, #1
    5122:	01d2      	lsls	r2, r2, #7
    5124:	4313      	orrs	r3, r2
    5126:	7a62      	ldrb	r2, [r4, #9]
    5128:	b2db      	uxtb	r3, r3
    512a:	189b      	adds	r3, r3, r2
    512c:	b2da      	uxtb	r2, r3
    512e:	0852      	lsrs	r2, r2, #1
    5130:	01db      	lsls	r3, r3, #7
    5132:	4313      	orrs	r3, r2
    5134:	7aa2      	ldrb	r2, [r4, #10]
    5136:	189b      	adds	r3, r3, r2
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    5138:	9a02      	ldr	r2, [sp, #8]
    513a:	b2db      	uxtb	r3, r3
    513c:	4293      	cmp	r3, r2
    513e:	d03e      	beq.n	51be <dir_find.part.5+0x1ba>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    5140:	2301      	movs	r3, #1
    5142:	425b      	negs	r3, r3
    5144:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    5146:	69ab      	ldr	r3, [r5, #24]
    5148:	7ada      	ldrb	r2, [r3, #11]
    514a:	07d2      	lsls	r2, r2, #31
    514c:	d500      	bpl.n	5150 <dir_find.part.5+0x14c>
    514e:	e78a      	b.n	5066 <dir_find.part.5+0x62>
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    5150:	7821      	ldrb	r1, [r4, #0]
    5152:	781a      	ldrb	r2, [r3, #0]
    5154:	4291      	cmp	r1, r2
    5156:	d000      	beq.n	515a <dir_find.part.5+0x156>
    5158:	e785      	b.n	5066 <dir_find.part.5+0x62>
    515a:	7861      	ldrb	r1, [r4, #1]
    515c:	785a      	ldrb	r2, [r3, #1]
    515e:	4291      	cmp	r1, r2
    5160:	d000      	beq.n	5164 <dir_find.part.5+0x160>
    5162:	e780      	b.n	5066 <dir_find.part.5+0x62>
    5164:	7899      	ldrb	r1, [r3, #2]
    5166:	78a2      	ldrb	r2, [r4, #2]
    5168:	4291      	cmp	r1, r2
    516a:	d000      	beq.n	516e <dir_find.part.5+0x16a>
    516c:	e77b      	b.n	5066 <dir_find.part.5+0x62>
    516e:	78e1      	ldrb	r1, [r4, #3]
    5170:	78da      	ldrb	r2, [r3, #3]
    5172:	4291      	cmp	r1, r2
    5174:	d000      	beq.n	5178 <dir_find.part.5+0x174>
    5176:	e776      	b.n	5066 <dir_find.part.5+0x62>
    5178:	7921      	ldrb	r1, [r4, #4]
    517a:	791a      	ldrb	r2, [r3, #4]
    517c:	4291      	cmp	r1, r2
    517e:	d000      	beq.n	5182 <dir_find.part.5+0x17e>
    5180:	e771      	b.n	5066 <dir_find.part.5+0x62>
    5182:	7961      	ldrb	r1, [r4, #5]
    5184:	795a      	ldrb	r2, [r3, #5]
    5186:	4291      	cmp	r1, r2
    5188:	d000      	beq.n	518c <dir_find.part.5+0x188>
    518a:	e76c      	b.n	5066 <dir_find.part.5+0x62>
    518c:	79a1      	ldrb	r1, [r4, #6]
    518e:	799a      	ldrb	r2, [r3, #6]
    5190:	4291      	cmp	r1, r2
    5192:	d000      	beq.n	5196 <dir_find.part.5+0x192>
    5194:	e767      	b.n	5066 <dir_find.part.5+0x62>
    5196:	79e1      	ldrb	r1, [r4, #7]
    5198:	79da      	ldrb	r2, [r3, #7]
    519a:	4291      	cmp	r1, r2
    519c:	d000      	beq.n	51a0 <dir_find.part.5+0x19c>
    519e:	e762      	b.n	5066 <dir_find.part.5+0x62>
    51a0:	7a21      	ldrb	r1, [r4, #8]
    51a2:	7a1a      	ldrb	r2, [r3, #8]
    51a4:	4291      	cmp	r1, r2
    51a6:	d000      	beq.n	51aa <dir_find.part.5+0x1a6>
    51a8:	e75d      	b.n	5066 <dir_find.part.5+0x62>
    51aa:	7a61      	ldrb	r1, [r4, #9]
    51ac:	7a5a      	ldrb	r2, [r3, #9]
    51ae:	4291      	cmp	r1, r2
    51b0:	d000      	beq.n	51b4 <dir_find.part.5+0x1b0>
    51b2:	e758      	b.n	5066 <dir_find.part.5+0x62>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    51b4:	7aa2      	ldrb	r2, [r4, #10]
    51b6:	7a9b      	ldrb	r3, [r3, #10]
    51b8:	429a      	cmp	r2, r3
    51ba:	d000      	beq.n	51be <dir_find.part.5+0x1ba>
    51bc:	e753      	b.n	5066 <dir_find.part.5+0x62>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    51be:	2000      	movs	r0, #0
    51c0:	e759      	b.n	5076 <dir_find.part.5+0x72>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    51c2:	2330      	movs	r3, #48	; 0x30
    51c4:	469a      	mov	sl, r3
    51c6:	4e5f      	ldr	r6, [pc, #380]	; (5344 <dir_find.part.5+0x340>)
    51c8:	44a2      	add	sl, r4
    51ca:	7860      	ldrb	r0, [r4, #1]
    51cc:	3b2f      	subs	r3, #47	; 0x2f
    51ce:	4651      	mov	r1, sl
    51d0:	4690      	mov	r8, r2
    51d2:	46b3      	mov	fp, r6
    51d4:	47b0      	blx	r6
    51d6:	2800      	cmp	r0, #0
    51d8:	d121      	bne.n	521e <dir_find.part.5+0x21a>
			fs->wflag = 0;
    51da:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    51dc:	4640      	mov	r0, r8
    51de:	69e3      	ldr	r3, [r4, #28]
    51e0:	6a22      	ldr	r2, [r4, #32]
    51e2:	189a      	adds	r2, r3, r2
    51e4:	4290      	cmp	r0, r2
    51e6:	d300      	bcc.n	51ea <dir_find.part.5+0x1e6>
    51e8:	e722      	b.n	5030 <dir_find.part.5+0x2c>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    51ea:	78e2      	ldrb	r2, [r4, #3]
    51ec:	2a01      	cmp	r2, #1
    51ee:	d800      	bhi.n	51f2 <dir_find.part.5+0x1ee>
    51f0:	e71e      	b.n	5030 <dir_find.part.5+0x2c>
    51f2:	46a9      	mov	r9, r5
    51f4:	46b8      	mov	r8, r7
    51f6:	0025      	movs	r5, r4
    51f8:	0016      	movs	r6, r2
    51fa:	0004      	movs	r4, r0
    51fc:	4657      	mov	r7, sl
    51fe:	e000      	b.n	5202 <dir_find.part.5+0x1fe>
    5200:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
    5202:	18e4      	adds	r4, r4, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    5204:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    5206:	7868      	ldrb	r0, [r5, #1]
    5208:	2301      	movs	r3, #1
    520a:	0022      	movs	r2, r4
    520c:	0039      	movs	r1, r7
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    520e:	b2f6      	uxtb	r6, r6
					disk_write(fs->drv, fs->win, wsect, 1);
    5210:	47d8      	blx	fp
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    5212:	2e01      	cmp	r6, #1
    5214:	d1f4      	bne.n	5200 <dir_find.part.5+0x1fc>
    5216:	002c      	movs	r4, r5
    5218:	4647      	mov	r7, r8
    521a:	464d      	mov	r5, r9
    521c:	e708      	b.n	5030 <dir_find.part.5+0x2c>
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    521e:	2001      	movs	r0, #1
    5220:	e729      	b.n	5076 <dir_find.part.5+0x72>
				if (dj->lfn) {
    5222:	69ee      	ldr	r6, [r5, #28]
    5224:	2e00      	cmp	r6, #0
    5226:	d100      	bne.n	522a <dir_find.part.5+0x226>
    5228:	e71f      	b.n	506a <dir_find.part.5+0x66>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    522a:	2240      	movs	r2, #64	; 0x40
    522c:	421a      	tst	r2, r3
    522e:	d03b      	beq.n	52a8 <dir_find.part.5+0x2a4>
						sum = dir[LDIR_Chksum];
    5230:	7b61      	ldrb	r1, [r4, #13]
						c &= ~LLE; ord = c;	/* LFN start order */
    5232:	4393      	bics	r3, r2
						sum = dir[LDIR_Chksum];
    5234:	9102      	str	r1, [sp, #8]
						c &= ~LLE; ord = c;	/* LFN start order */
    5236:	9301      	str	r3, [sp, #4]
						dj->lfn_idx = dj->index;
    5238:	88eb      	ldrh	r3, [r5, #6]
    523a:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    523c:	7b63      	ldrb	r3, [r4, #13]
    523e:	9a02      	ldr	r2, [sp, #8]
    5240:	4293      	cmp	r3, r2
    5242:	d000      	beq.n	5246 <dir_find.part.5+0x242>
    5244:	e70f      	b.n	5066 <dir_find.part.5+0x62>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    5246:	2240      	movs	r2, #64	; 0x40
    5248:	7823      	ldrb	r3, [r4, #0]
			if (uc != 0xFFFF) return 0;	/* Check filler */
    524a:	46ab      	mov	fp, r5
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    524c:	4393      	bics	r3, r2
    524e:	3b01      	subs	r3, #1
    5250:	005a      	lsls	r2, r3, #1
    5252:	18d2      	adds	r2, r2, r3
    5254:	0092      	lsls	r2, r2, #2
    5256:	18d3      	adds	r3, r2, r3
    5258:	4a3b      	ldr	r2, [pc, #236]	; (5348 <dir_find.part.5+0x344>)
	s = 0; wc = 1;
    525a:	2001      	movs	r0, #1
    525c:	4692      	mov	sl, r2
			if (uc != 0xFFFF) return 0;	/* Check filler */
    525e:	4a3b      	ldr	r2, [pc, #236]	; (534c <dir_find.part.5+0x348>)
	s = 0; wc = 1;
    5260:	2700      	movs	r7, #0
			if (uc != 0xFFFF) return 0;	/* Check filler */
    5262:	4691      	mov	r9, r2
    5264:	46b0      	mov	r8, r6
    5266:	001d      	movs	r5, r3
    5268:	e004      	b.n	5274 <dir_find.part.5+0x270>
    526a:	454b      	cmp	r3, r9
    526c:	d164      	bne.n	5338 <dir_find.part.5+0x334>
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    526e:	3701      	adds	r7, #1
    5270:	2f0d      	cmp	r7, #13
    5272:	d036      	beq.n	52e2 <dir_find.part.5+0x2de>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    5274:	4653      	mov	r3, sl
    5276:	5dda      	ldrb	r2, [r3, r7]
    5278:	18a3      	adds	r3, r4, r2
    527a:	785b      	ldrb	r3, [r3, #1]
    527c:	5ca2      	ldrb	r2, [r4, r2]
    527e:	021b      	lsls	r3, r3, #8
    5280:	4313      	orrs	r3, r2
		if (wc) {	/* Last char has not been processed */
    5282:	2800      	cmp	r0, #0
    5284:	d0f1      	beq.n	526a <dir_find.part.5+0x266>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    5286:	0018      	movs	r0, r3
    5288:	4b31      	ldr	r3, [pc, #196]	; (5350 <dir_find.part.5+0x34c>)
    528a:	4798      	blx	r3
    528c:	9003      	str	r0, [sp, #12]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    528e:	2dfe      	cmp	r5, #254	; 0xfe
    5290:	d852      	bhi.n	5338 <dir_find.part.5+0x334>
    5292:	4643      	mov	r3, r8
    5294:	1c6e      	adds	r6, r5, #1
    5296:	006d      	lsls	r5, r5, #1
    5298:	5ae8      	ldrh	r0, [r5, r3]
    529a:	4b2d      	ldr	r3, [pc, #180]	; (5350 <dir_find.part.5+0x34c>)
    529c:	4798      	blx	r3
    529e:	9b03      	ldr	r3, [sp, #12]
    52a0:	4283      	cmp	r3, r0
    52a2:	d149      	bne.n	5338 <dir_find.part.5+0x334>
    52a4:	0035      	movs	r5, r6
    52a6:	e7e2      	b.n	526e <dir_find.part.5+0x26a>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    52a8:	9a01      	ldr	r2, [sp, #4]
    52aa:	4293      	cmp	r3, r2
    52ac:	d000      	beq.n	52b0 <dir_find.part.5+0x2ac>
    52ae:	e6da      	b.n	5066 <dir_find.part.5+0x62>
    52b0:	e7c4      	b.n	523c <dir_find.part.5+0x238>
		if (dj->clust == 0) {	/* Static table */
    52b2:	68e9      	ldr	r1, [r5, #12]
		dj->sect++;					/* Next sector */
    52b4:	3701      	adds	r7, #1
    52b6:	612f      	str	r7, [r5, #16]
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    52b8:	682c      	ldr	r4, [r5, #0]
		if (dj->clust == 0) {	/* Static table */
    52ba:	2900      	cmp	r1, #0
    52bc:	d104      	bne.n	52c8 <dir_find.part.5+0x2c4>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    52be:	8923      	ldrh	r3, [r4, #8]
    52c0:	42b3      	cmp	r3, r6
    52c2:	d800      	bhi.n	52c6 <dir_find.part.5+0x2c2>
    52c4:	e6d6      	b.n	5074 <dir_find.part.5+0x70>
    52c6:	e6e6      	b.n	5096 <dir_find.part.5+0x92>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    52c8:	78a3      	ldrb	r3, [r4, #2]
    52ca:	0932      	lsrs	r2, r6, #4
    52cc:	3b01      	subs	r3, #1
    52ce:	421a      	tst	r2, r3
    52d0:	d000      	beq.n	52d4 <dir_find.part.5+0x2d0>
    52d2:	e6e0      	b.n	5096 <dir_find.part.5+0x92>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    52d4:	2901      	cmp	r1, #1
    52d6:	d902      	bls.n	52de <dir_find.part.5+0x2da>
    52d8:	69a3      	ldr	r3, [r4, #24]
    52da:	4299      	cmp	r1, r3
    52dc:	d313      	bcc.n	5306 <dir_find.part.5+0x302>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    52de:	2002      	movs	r0, #2
    52e0:	e6c9      	b.n	5076 <dir_find.part.5+0x72>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    52e2:	7823      	ldrb	r3, [r4, #0]
    52e4:	0029      	movs	r1, r5
    52e6:	4646      	mov	r6, r8
    52e8:	465d      	mov	r5, fp
    52ea:	065a      	lsls	r2, r3, #25
    52ec:	d506      	bpl.n	52fc <dir_find.part.5+0x2f8>
    52ee:	2800      	cmp	r0, #0
    52f0:	d004      	beq.n	52fc <dir_find.part.5+0x2f8>
    52f2:	004b      	lsls	r3, r1, #1
    52f4:	5b9b      	ldrh	r3, [r3, r6]
    52f6:	2b00      	cmp	r3, #0
    52f8:	d000      	beq.n	52fc <dir_find.part.5+0x2f8>
    52fa:	e6b4      	b.n	5066 <dir_find.part.5+0x62>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    52fc:	9f01      	ldr	r7, [sp, #4]
    52fe:	3f01      	subs	r7, #1
    5300:	b2fb      	uxtb	r3, r7
    5302:	9301      	str	r3, [sp, #4]
    5304:	e6b1      	b.n	506a <dir_find.part.5+0x66>
    5306:	0020      	movs	r0, r4
    5308:	4b12      	ldr	r3, [pc, #72]	; (5354 <dir_find.part.5+0x350>)
    530a:	4798      	blx	r3
				if (clst <= 1) return FR_INT_ERR;
    530c:	2801      	cmp	r0, #1
    530e:	d9e6      	bls.n	52de <dir_find.part.5+0x2da>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    5310:	1c43      	adds	r3, r0, #1
    5312:	d084      	beq.n	521e <dir_find.part.5+0x21a>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    5314:	682c      	ldr	r4, [r5, #0]
    5316:	69a3      	ldr	r3, [r4, #24]
    5318:	4298      	cmp	r0, r3
    531a:	d300      	bcc.n	531e <dir_find.part.5+0x31a>
    531c:	e6aa      	b.n	5074 <dir_find.part.5+0x70>
				dj->clust = clst;				/* Initialize data for new cluster */
    531e:	60e8      	str	r0, [r5, #12]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    5320:	69a3      	ldr	r3, [r4, #24]
	clst -= 2;
    5322:	3802      	subs	r0, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    5324:	3b02      	subs	r3, #2
    5326:	2700      	movs	r7, #0
    5328:	4298      	cmp	r0, r3
    532a:	d203      	bcs.n	5334 <dir_find.part.5+0x330>
	return clst * fs->csize + fs->database;
    532c:	78a3      	ldrb	r3, [r4, #2]
    532e:	4358      	muls	r0, r3
    5330:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5332:	18c7      	adds	r7, r0, r3
				dj->sect = clust2sect(dj->fs, clst);
    5334:	612f      	str	r7, [r5, #16]
    5336:	e6ae      	b.n	5096 <dir_find.part.5+0x92>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    5338:	23ff      	movs	r3, #255	; 0xff
    533a:	465d      	mov	r5, fp
    533c:	9301      	str	r3, [sp, #4]
    533e:	e694      	b.n	506a <dir_find.part.5+0x66>
    5340:	00003d3d 	.word	0x00003d3d
    5344:	00003dc1 	.word	0x00003dc1
    5348:	0002471c 	.word	0x0002471c
    534c:	0000ffff 	.word	0x0000ffff
    5350:	00006fa9 	.word	0x00006fa9
    5354:	00004789 	.word	0x00004789

00005358 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    5358:	b5f0      	push	{r4, r5, r6, r7, lr}
    535a:	46de      	mov	lr, fp
    535c:	464e      	mov	r6, r9
    535e:	4657      	mov	r7, sl
    5360:	4645      	mov	r5, r8
    5362:	b5e0      	push	{r5, r6, r7, lr}
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
    5364:	69c3      	ldr	r3, [r0, #28]
{
    5366:	b08b      	sub	sp, #44	; 0x2c
	fn = dj->fn; lfn = dj->lfn;
    5368:	6986      	ldr	r6, [r0, #24]
    536a:	ac07      	add	r4, sp, #28
{
    536c:	4683      	mov	fp, r0
	fn = dj->fn; lfn = dj->lfn;
    536e:	4699      	mov	r9, r3
    5370:	220c      	movs	r2, #12
    5372:	4bc0      	ldr	r3, [pc, #768]	; (5674 <dir_register+0x31c>)
    5374:	0031      	movs	r1, r6
    5376:	0020      	movs	r0, r4
    5378:	4798      	blx	r3
	mem_cpy(sn, fn, 12);

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    537a:	7ae3      	ldrb	r3, [r4, #11]
    537c:	9302      	str	r3, [sp, #8]
    537e:	07db      	lsls	r3, r3, #31
    5380:	d456      	bmi.n	5430 <dir_register+0xd8>
    5382:	4bbd      	ldr	r3, [pc, #756]	; (5678 <dir_register+0x320>)
    5384:	9301      	str	r3, [sp, #4]

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
		for (ne = 0; lfn[ne]; ne++) ;
		ne = (ne + 25) / 13;
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
    5386:	2301      	movs	r3, #1
    5388:	9300      	str	r3, [sp, #0]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    538a:	9b02      	ldr	r3, [sp, #8]
    538c:	079b      	lsls	r3, r3, #30
    538e:	d511      	bpl.n	53b4 <dir_register+0x5c>
		for (ne = 0; lfn[ne]; ne++) ;
    5390:	464b      	mov	r3, r9
    5392:	881b      	ldrh	r3, [r3, #0]
    5394:	2b00      	cmp	r3, #0
    5396:	d00d      	beq.n	53b4 <dir_register+0x5c>
    5398:	2000      	movs	r0, #0
    539a:	464a      	mov	r2, r9
    539c:	3001      	adds	r0, #1
    539e:	b280      	uxth	r0, r0
    53a0:	0043      	lsls	r3, r0, #1
    53a2:	5a9b      	ldrh	r3, [r3, r2]
    53a4:	2b00      	cmp	r3, #0
    53a6:	d1f9      	bne.n	539c <dir_register+0x44>
    53a8:	4bb4      	ldr	r3, [pc, #720]	; (567c <dir_register+0x324>)
    53aa:	3019      	adds	r0, #25
    53ac:	210d      	movs	r1, #13
    53ae:	4798      	blx	r3
    53b0:	b283      	uxth	r3, r0
    53b2:	9300      	str	r3, [sp, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
    53b4:	2100      	movs	r1, #0
    53b6:	4658      	mov	r0, fp
    53b8:	9b01      	ldr	r3, [sp, #4]
    53ba:	4798      	blx	r3
    53bc:	4682      	mov	sl, r0
	if (res != FR_OK) return res;
    53be:	2800      	cmp	r0, #0
    53c0:	d12e      	bne.n	5420 <dir_register+0xc8>
    53c2:	465b      	mov	r3, fp
    53c4:	681f      	ldr	r7, [r3, #0]
    53c6:	691b      	ldr	r3, [r3, #16]
    53c8:	465e      	mov	r6, fp
    53ca:	4699      	mov	r9, r3
    53cc:	2300      	movs	r3, #0
    53ce:	4698      	mov	r8, r3
    53d0:	9303      	str	r3, [sp, #12]
	wsect = fs->winsect;
    53d2:	6afc      	ldr	r4, [r7, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
    53d4:	454c      	cmp	r4, r9
    53d6:	d012      	beq.n	53fe <dir_register+0xa6>
		if (fs->wflag) {	/* Write back dirty window if needed */
    53d8:	793b      	ldrb	r3, [r7, #4]
    53da:	2b00      	cmp	r3, #0
    53dc:	d000      	beq.n	53e0 <dir_register+0x88>
    53de:	e2bb      	b.n	5958 <dir_register+0x600>
		if (sector) {
    53e0:	464b      	mov	r3, r9
    53e2:	2b00      	cmp	r3, #0
    53e4:	d00b      	beq.n	53fe <dir_register+0xa6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    53e6:	0039      	movs	r1, r7
    53e8:	7878      	ldrb	r0, [r7, #1]
    53ea:	2301      	movs	r3, #1
    53ec:	464a      	mov	r2, r9
    53ee:	3130      	adds	r1, #48	; 0x30
    53f0:	4ca3      	ldr	r4, [pc, #652]	; (5680 <dir_register+0x328>)
    53f2:	47a0      	blx	r4
    53f4:	2800      	cmp	r0, #0
    53f6:	d000      	beq.n	53fa <dir_register+0xa2>
    53f8:	e2ab      	b.n	5952 <dir_register+0x5fa>
			fs->winsect = sector;
    53fa:	464b      	mov	r3, r9
    53fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	n = is = 0;
	do {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		c = *dj->dir;				/* Check the entry status */
    53fe:	6973      	ldr	r3, [r6, #20]
    5400:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
    5402:	2be5      	cmp	r3, #229	; 0xe5
    5404:	d100      	bne.n	5408 <dir_register+0xb0>
    5406:	e13f      	b.n	5688 <dir_register+0x330>
    5408:	2b00      	cmp	r3, #0
    540a:	d100      	bne.n	540e <dir_register+0xb6>
    540c:	e13c      	b.n	5688 <dir_register+0x330>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
			if (++n == ne) break;	/* A contiguous entry that required count is found */
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
    540e:	2500      	movs	r5, #0
	i = dj->index + 1;
    5410:	88f4      	ldrh	r4, [r6, #6]
    5412:	3401      	adds	r4, #1
    5414:	b2a4      	uxth	r4, r4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    5416:	2c00      	cmp	r4, #0
    5418:	d000      	beq.n	541c <dir_register+0xc4>
    541a:	e27d      	b.n	5918 <dir_register+0x5c0>
		return FR_NO_FILE;
    541c:	2304      	movs	r3, #4
    541e:	469a      	mov	sl, r3
			dj->fs->wflag = 1;
		}
	}

	return res;
}
    5420:	4650      	mov	r0, sl
    5422:	b00b      	add	sp, #44	; 0x2c
    5424:	bc3c      	pop	{r2, r3, r4, r5}
    5426:	4690      	mov	r8, r2
    5428:	4699      	mov	r9, r3
    542a:	46a2      	mov	sl, r4
    542c:	46ab      	mov	fp, r5
    542e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    5430:	2300      	movs	r3, #0
    5432:	465a      	mov	r2, fp
    5434:	72f3      	strb	r3, [r6, #11]
    5436:	61d3      	str	r3, [r2, #28]
    5438:	4b8f      	ldr	r3, [pc, #572]	; (5678 <dir_register+0x320>)
		for (n = 1; n < 100; n++) {
    543a:	2701      	movs	r7, #1
    543c:	9301      	str	r3, [sp, #4]
		c = (seq % 16) + '0';
    543e:	230f      	movs	r3, #15
    5440:	4698      	mov	r8, r3
    5442:	ad05      	add	r5, sp, #20
    5444:	9700      	str	r7, [sp, #0]
		*d++ = *s++;
    5446:	7823      	ldrb	r3, [r4, #0]
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    5448:	9a00      	ldr	r2, [sp, #0]
		*d++ = *s++;
    544a:	469c      	mov	ip, r3
    544c:	7033      	strb	r3, [r6, #0]
    544e:	7863      	ldrb	r3, [r4, #1]
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    5450:	0017      	movs	r7, r2
		*d++ = *s++;
    5452:	7073      	strb	r3, [r6, #1]
    5454:	78a3      	ldrb	r3, [r4, #2]
    5456:	70b3      	strb	r3, [r6, #2]
    5458:	78e3      	ldrb	r3, [r4, #3]
    545a:	70f3      	strb	r3, [r6, #3]
    545c:	7923      	ldrb	r3, [r4, #4]
    545e:	7133      	strb	r3, [r6, #4]
    5460:	7963      	ldrb	r3, [r4, #5]
    5462:	7173      	strb	r3, [r6, #5]
    5464:	79a3      	ldrb	r3, [r4, #6]
    5466:	71b3      	strb	r3, [r6, #6]
    5468:	79e3      	ldrb	r3, [r4, #7]
    546a:	71f3      	strb	r3, [r6, #7]
    546c:	7a23      	ldrb	r3, [r4, #8]
    546e:	7233      	strb	r3, [r6, #8]
    5470:	7a63      	ldrb	r3, [r4, #9]
    5472:	7273      	strb	r3, [r6, #9]
    5474:	7aa3      	ldrb	r3, [r4, #10]
    5476:	72b3      	strb	r3, [r6, #10]
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    5478:	0013      	movs	r3, r2
    547a:	2a05      	cmp	r2, #5
    547c:	d90e      	bls.n	549c <dir_register+0x144>
    547e:	464b      	mov	r3, r9
    5480:	8818      	ldrh	r0, [r3, #0]
    5482:	0013      	movs	r3, r2
    5484:	0001      	movs	r1, r0
    5486:	464a      	mov	r2, r9
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    5488:	0858      	lsrs	r0, r3, #1
    548a:	03db      	lsls	r3, r3, #15
    548c:	4318      	orrs	r0, r3
    548e:	3202      	adds	r2, #2
    5490:	1840      	adds	r0, r0, r1
    5492:	8811      	ldrh	r1, [r2, #0]
    5494:	b283      	uxth	r3, r0
    5496:	2900      	cmp	r1, #0
    5498:	d1f6      	bne.n	5488 <dir_register+0x130>
    549a:	9700      	str	r7, [sp, #0]
		c = (seq % 16) + '0';
    549c:	4640      	mov	r0, r8
    549e:	4018      	ands	r0, r3
    54a0:	0002      	movs	r2, r0
    54a2:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
    54a4:	2a39      	cmp	r2, #57	; 0x39
    54a6:	d900      	bls.n	54aa <dir_register+0x152>
    54a8:	3207      	adds	r2, #7
		ns[i--] = c;
    54aa:	71ea      	strb	r2, [r5, #7]
		seq /= 16;
    54ac:	091a      	lsrs	r2, r3, #4
    54ae:	b292      	uxth	r2, r2
	} while (seq);
    54b0:	2a00      	cmp	r2, #0
    54b2:	d100      	bne.n	54b6 <dir_register+0x15e>
    54b4:	e0da      	b.n	566c <dir_register+0x314>
		c = (seq % 16) + '0';
    54b6:	4641      	mov	r1, r8
    54b8:	400a      	ands	r2, r1
    54ba:	0010      	movs	r0, r2
    54bc:	3030      	adds	r0, #48	; 0x30
		if (c > '9') c += 7;
    54be:	2839      	cmp	r0, #57	; 0x39
    54c0:	d901      	bls.n	54c6 <dir_register+0x16e>
    54c2:	3237      	adds	r2, #55	; 0x37
    54c4:	0010      	movs	r0, r2
		seq /= 16;
    54c6:	0a1a      	lsrs	r2, r3, #8
    54c8:	b292      	uxth	r2, r2
		ns[i--] = c;
    54ca:	71a8      	strb	r0, [r5, #6]
	} while (seq);
    54cc:	2a00      	cmp	r2, #0
    54ce:	d100      	bne.n	54d2 <dir_register+0x17a>
    54d0:	e0c9      	b.n	5666 <dir_register+0x30e>
		c = (seq % 16) + '0';
    54d2:	4641      	mov	r1, r8
    54d4:	400a      	ands	r2, r1
    54d6:	0010      	movs	r0, r2
    54d8:	3030      	adds	r0, #48	; 0x30
		if (c > '9') c += 7;
    54da:	2839      	cmp	r0, #57	; 0x39
    54dc:	d901      	bls.n	54e2 <dir_register+0x18a>
    54de:	3237      	adds	r2, #55	; 0x37
    54e0:	0010      	movs	r0, r2
		seq /= 16;
    54e2:	0b1b      	lsrs	r3, r3, #12
    54e4:	b29b      	uxth	r3, r3
		ns[i--] = c;
    54e6:	7168      	strb	r0, [r5, #5]
	} while (seq);
    54e8:	2b00      	cmp	r3, #0
    54ea:	d100      	bne.n	54ee <dir_register+0x196>
    54ec:	e0b8      	b.n	5660 <dir_register+0x308>
		c = (seq % 16) + '0';
    54ee:	b2db      	uxtb	r3, r3
    54f0:	001a      	movs	r2, r3
    54f2:	3230      	adds	r2, #48	; 0x30
    54f4:	b2d2      	uxtb	r2, r2
		if (c > '9') c += 7;
    54f6:	2a39      	cmp	r2, #57	; 0x39
    54f8:	d901      	bls.n	54fe <dir_register+0x1a6>
    54fa:	3337      	adds	r3, #55	; 0x37
    54fc:	b2da      	uxtb	r2, r3
		ns[i--] = c;
    54fe:	712a      	strb	r2, [r5, #4]
    5500:	2004      	movs	r0, #4
    5502:	2203      	movs	r2, #3
	ns[i] = '~';
    5504:	237e      	movs	r3, #126	; 0x7e
	for (j = 0; j < i && dst[j] != ' '; j++) {
    5506:	4661      	mov	r1, ip
	ns[i] = '~';
    5508:	54ab      	strb	r3, [r5, r2]
	for (j = 0; j < i && dst[j] != ' '; j++) {
    550a:	2920      	cmp	r1, #32
    550c:	d100      	bne.n	5510 <dir_register+0x1b8>
    550e:	e0a2      	b.n	5656 <dir_register+0x2fe>
    5510:	7873      	ldrb	r3, [r6, #1]
    5512:	1c71      	adds	r1, r6, #1
    5514:	2b20      	cmp	r3, #32
    5516:	d100      	bne.n	551a <dir_register+0x1c2>
    5518:	e252      	b.n	59c0 <dir_register+0x668>
    551a:	78b3      	ldrb	r3, [r6, #2]
    551c:	1cb1      	adds	r1, r6, #2
    551e:	2b20      	cmp	r3, #32
    5520:	d100      	bne.n	5524 <dir_register+0x1cc>
    5522:	e24b      	b.n	59bc <dir_register+0x664>
    5524:	2a03      	cmp	r2, #3
    5526:	d100      	bne.n	552a <dir_register+0x1d2>
    5528:	e240      	b.n	59ac <dir_register+0x654>
    552a:	78f3      	ldrb	r3, [r6, #3]
    552c:	1cf1      	adds	r1, r6, #3
    552e:	2b20      	cmp	r3, #32
    5530:	d100      	bne.n	5534 <dir_register+0x1dc>
    5532:	e23d      	b.n	59b0 <dir_register+0x658>
    5534:	2a04      	cmp	r2, #4
    5536:	d100      	bne.n	553a <dir_register+0x1e2>
    5538:	e236      	b.n	59a8 <dir_register+0x650>
    553a:	7933      	ldrb	r3, [r6, #4]
    553c:	1d31      	adds	r1, r6, #4
    553e:	2b20      	cmp	r3, #32
    5540:	d100      	bne.n	5544 <dir_register+0x1ec>
    5542:	e23f      	b.n	59c4 <dir_register+0x66c>
    5544:	2305      	movs	r3, #5
    5546:	2a06      	cmp	r2, #6
    5548:	d107      	bne.n	555a <dir_register+0x202>
    554a:	7973      	ldrb	r3, [r6, #5]
    554c:	1d71      	adds	r1, r6, #5
    554e:	469c      	mov	ip, r3
    5550:	4667      	mov	r7, ip
    5552:	2306      	movs	r3, #6
    5554:	2f20      	cmp	r7, #32
    5556:	d100      	bne.n	555a <dir_register+0x202>
    5558:	e236      	b.n	59c8 <dir_register+0x670>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    555a:	1c59      	adds	r1, r3, #1
    555c:	468c      	mov	ip, r1
    555e:	217e      	movs	r1, #126	; 0x7e
    5560:	54f1      	strb	r1, [r6, r3]
    5562:	1c97      	adds	r7, r2, #2
    5564:	46ba      	mov	sl, r7
    5566:	4667      	mov	r7, ip
    5568:	5c28      	ldrb	r0, [r5, r0]
    556a:	1c99      	adds	r1, r3, #2
    556c:	55f0      	strb	r0, [r6, r7]
	} while (j < 8);
    556e:	2908      	cmp	r1, #8
    5570:	d01e      	beq.n	55b0 <dir_register+0x258>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    5572:	4657      	mov	r7, sl
    5574:	1cd8      	adds	r0, r3, #3
    5576:	1871      	adds	r1, r6, r1
    5578:	2f08      	cmp	r7, #8
    557a:	d12e      	bne.n	55da <dir_register+0x282>
    557c:	2220      	movs	r2, #32
    557e:	700a      	strb	r2, [r1, #0]
	} while (j < 8);
    5580:	2808      	cmp	r0, #8
    5582:	d015      	beq.n	55b0 <dir_register+0x258>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    5584:	1d19      	adds	r1, r3, #4
    5586:	5432      	strb	r2, [r6, r0]
	} while (j < 8);
    5588:	2908      	cmp	r1, #8
    558a:	d011      	beq.n	55b0 <dir_register+0x258>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    558c:	1d58      	adds	r0, r3, #5
    558e:	1873      	adds	r3, r6, r1
    5590:	469c      	mov	ip, r3
    5592:	2320      	movs	r3, #32
    5594:	4662      	mov	r2, ip
    5596:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
    5598:	2808      	cmp	r0, #8
    559a:	d009      	beq.n	55b0 <dir_register+0x258>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    559c:	1c8a      	adds	r2, r1, #2
    559e:	5433      	strb	r3, [r6, r0]
	} while (j < 8);
    55a0:	2a08      	cmp	r2, #8
    55a2:	d005      	beq.n	55b0 <dir_register+0x258>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    55a4:	54b3      	strb	r3, [r6, r2]
    55a6:	1df2      	adds	r2, r6, #7
	} while (j < 8);
    55a8:	2904      	cmp	r1, #4
    55aa:	d101      	bne.n	55b0 <dir_register+0x258>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    55ac:	2320      	movs	r3, #32
    55ae:	7013      	strb	r3, [r2, #0]
	res = dir_sdi(dj, 0);			/* Rewind directory object */
    55b0:	2100      	movs	r1, #0
    55b2:	4658      	mov	r0, fp
    55b4:	9b01      	ldr	r3, [sp, #4]
    55b6:	4798      	blx	r3
	if (res != FR_OK) return res;
    55b8:	2800      	cmp	r0, #0
    55ba:	d141      	bne.n	5640 <dir_register+0x2e8>
    55bc:	4658      	mov	r0, fp
    55be:	4b31      	ldr	r3, [pc, #196]	; (5684 <dir_register+0x32c>)
    55c0:	4798      	blx	r3
			if (res != FR_OK) break;
    55c2:	2800      	cmp	r0, #0
    55c4:	d13c      	bne.n	5640 <dir_register+0x2e8>
		for (n = 1; n < 100; n++) {
    55c6:	9f00      	ldr	r7, [sp, #0]
    55c8:	3701      	adds	r7, #1
    55ca:	b2bb      	uxth	r3, r7
    55cc:	9300      	str	r3, [sp, #0]
    55ce:	2b64      	cmp	r3, #100	; 0x64
    55d0:	d000      	beq.n	55d4 <dir_register+0x27c>
    55d2:	e738      	b.n	5446 <dir_register+0xee>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    55d4:	2307      	movs	r3, #7
    55d6:	469a      	mov	sl, r3
    55d8:	e722      	b.n	5420 <dir_register+0xc8>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    55da:	1cd7      	adds	r7, r2, #3
    55dc:	46bc      	mov	ip, r7
    55de:	4657      	mov	r7, sl
    55e0:	5def      	ldrb	r7, [r5, r7]
    55e2:	700f      	strb	r7, [r1, #0]
	} while (j < 8);
    55e4:	2808      	cmp	r0, #8
    55e6:	d0e3      	beq.n	55b0 <dir_register+0x258>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    55e8:	4667      	mov	r7, ip
    55ea:	1d19      	adds	r1, r3, #4
    55ec:	1830      	adds	r0, r6, r0
    55ee:	2f08      	cmp	r7, #8
    55f0:	d112      	bne.n	5618 <dir_register+0x2c0>
    55f2:	2220      	movs	r2, #32
    55f4:	7002      	strb	r2, [r0, #0]
	} while (j < 8);
    55f6:	2908      	cmp	r1, #8
    55f8:	d0da      	beq.n	55b0 <dir_register+0x258>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    55fa:	1d58      	adds	r0, r3, #5
    55fc:	5472      	strb	r2, [r6, r1]
	} while (j < 8);
    55fe:	2808      	cmp	r0, #8
    5600:	d0d6      	beq.n	55b0 <dir_register+0x258>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    5602:	2220      	movs	r2, #32
    5604:	1831      	adds	r1, r6, r0
    5606:	3306      	adds	r3, #6
    5608:	700a      	strb	r2, [r1, #0]
	} while (j < 8);
    560a:	2b08      	cmp	r3, #8
    560c:	d0d0      	beq.n	55b0 <dir_register+0x258>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    560e:	54f2      	strb	r2, [r6, r3]
	} while (j < 8);
    5610:	2805      	cmp	r0, #5
    5612:	d1cd      	bne.n	55b0 <dir_register+0x258>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    5614:	1df2      	adds	r2, r6, #7
    5616:	e7c9      	b.n	55ac <dir_register+0x254>
    5618:	4667      	mov	r7, ip
    561a:	5def      	ldrb	r7, [r5, r7]
    561c:	7007      	strb	r7, [r0, #0]
	} while (j < 8);
    561e:	2908      	cmp	r1, #8
    5620:	d0c6      	beq.n	55b0 <dir_register+0x258>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    5622:	1877      	adds	r7, r6, r1
    5624:	1d58      	adds	r0, r3, #5
    5626:	46bc      	mov	ip, r7
    5628:	2a04      	cmp	r2, #4
    562a:	d0b2      	beq.n	5592 <dir_register+0x23a>
    562c:	79ea      	ldrb	r2, [r5, #7]
    562e:	703a      	strb	r2, [r7, #0]
	} while (j < 8);
    5630:	2808      	cmp	r0, #8
    5632:	d1e6      	bne.n	5602 <dir_register+0x2aa>
	res = dir_sdi(dj, 0);			/* Rewind directory object */
    5634:	2100      	movs	r1, #0
    5636:	4658      	mov	r0, fp
    5638:	9b01      	ldr	r3, [sp, #4]
    563a:	4798      	blx	r3
	if (res != FR_OK) return res;
    563c:	2800      	cmp	r0, #0
    563e:	d0bd      	beq.n	55bc <dir_register+0x264>
    5640:	4682      	mov	sl, r0
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    5642:	2804      	cmp	r0, #4
    5644:	d000      	beq.n	5648 <dir_register+0x2f0>
    5646:	e6eb      	b.n	5420 <dir_register+0xc8>
		fn[NS] = sn[NS]; dj->lfn = lfn;
    5648:	466b      	mov	r3, sp
    564a:	7a1b      	ldrb	r3, [r3, #8]
    564c:	464a      	mov	r2, r9
    564e:	72f3      	strb	r3, [r6, #11]
    5650:	465b      	mov	r3, fp
    5652:	61da      	str	r2, [r3, #28]
    5654:	e697      	b.n	5386 <dir_register+0x2e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    5656:	7033      	strb	r3, [r6, #0]
    5658:	2301      	movs	r3, #1
    565a:	469c      	mov	ip, r3
	for (j = 0; j < i && dst[j] != ' '; j++) {
    565c:	2300      	movs	r3, #0
    565e:	e780      	b.n	5562 <dir_register+0x20a>
	} while (seq);
    5660:	2005      	movs	r0, #5
		ns[i--] = c;
    5662:	2204      	movs	r2, #4
    5664:	e74e      	b.n	5504 <dir_register+0x1ac>
	} while (seq);
    5666:	2006      	movs	r0, #6
		ns[i--] = c;
    5668:	2205      	movs	r2, #5
    566a:	e74b      	b.n	5504 <dir_register+0x1ac>
	} while (seq);
    566c:	2007      	movs	r0, #7
		ns[i--] = c;
    566e:	2206      	movs	r2, #6
    5670:	e748      	b.n	5504 <dir_register+0x1ac>
    5672:	46c0      	nop			; (mov r8, r8)
    5674:	0001fd79 	.word	0x0001fd79
    5678:	00004aa1 	.word	0x00004aa1
    567c:	0001ce31 	.word	0x0001ce31
    5680:	00003d3d 	.word	0x00003d3d
    5684:	00005005 	.word	0x00005005
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    5688:	4643      	mov	r3, r8
    568a:	2b00      	cmp	r3, #0
    568c:	d101      	bne.n	5692 <dir_register+0x33a>
    568e:	88f3      	ldrh	r3, [r6, #6]
    5690:	9303      	str	r3, [sp, #12]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    5692:	4643      	mov	r3, r8
    5694:	1c5d      	adds	r5, r3, #1
    5696:	9b00      	ldr	r3, [sp, #0]
    5698:	b2ad      	uxth	r5, r5
    569a:	42ab      	cmp	r3, r5
    569c:	d000      	beq.n	56a0 <dir_register+0x348>
    569e:	e6b7      	b.n	5410 <dir_register+0xb8>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    56a0:	9b00      	ldr	r3, [sp, #0]
    56a2:	4644      	mov	r4, r8
    56a4:	46b3      	mov	fp, r6
    56a6:	2b01      	cmp	r3, #1
    56a8:	d100      	bne.n	56ac <dir_register+0x354>
    56aa:	e1ab      	b.n	5a04 <dir_register+0x6ac>
		res = dir_sdi(dj, is);
    56ac:	9903      	ldr	r1, [sp, #12]
    56ae:	4658      	mov	r0, fp
    56b0:	9b01      	ldr	r3, [sp, #4]
    56b2:	4798      	blx	r3
		if (res == FR_OK) {
    56b4:	2800      	cmp	r0, #0
    56b6:	d000      	beq.n	56ba <dir_register+0x362>
    56b8:	e210      	b.n	5adc <dir_register+0x784>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    56ba:	465b      	mov	r3, fp
    56bc:	6999      	ldr	r1, [r3, #24]
				res = dir_next(dj, 0);	/* Next entry */
    56be:	465d      	mov	r5, fp
	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    56c0:	780a      	ldrb	r2, [r1, #0]
				res = dir_next(dj, 0);	/* Next entry */
    56c2:	46a3      	mov	fp, r4
	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    56c4:	0853      	lsrs	r3, r2, #1
    56c6:	01d2      	lsls	r2, r2, #7
    56c8:	4313      	orrs	r3, r2
    56ca:	784a      	ldrb	r2, [r1, #1]
    56cc:	189b      	adds	r3, r3, r2
    56ce:	b2da      	uxtb	r2, r3
    56d0:	0852      	lsrs	r2, r2, #1
    56d2:	01db      	lsls	r3, r3, #7
    56d4:	431a      	orrs	r2, r3
    56d6:	788b      	ldrb	r3, [r1, #2]
    56d8:	b2d2      	uxtb	r2, r2
    56da:	18d2      	adds	r2, r2, r3
    56dc:	b2d3      	uxtb	r3, r2
    56de:	085b      	lsrs	r3, r3, #1
    56e0:	01d2      	lsls	r2, r2, #7
    56e2:	4313      	orrs	r3, r2
    56e4:	78ca      	ldrb	r2, [r1, #3]
    56e6:	b2db      	uxtb	r3, r3
    56e8:	189b      	adds	r3, r3, r2
    56ea:	b2da      	uxtb	r2, r3
    56ec:	0852      	lsrs	r2, r2, #1
    56ee:	01db      	lsls	r3, r3, #7
    56f0:	431a      	orrs	r2, r3
    56f2:	790b      	ldrb	r3, [r1, #4]
    56f4:	b2d2      	uxtb	r2, r2
    56f6:	18d2      	adds	r2, r2, r3
    56f8:	b2d3      	uxtb	r3, r2
    56fa:	085b      	lsrs	r3, r3, #1
    56fc:	01d2      	lsls	r2, r2, #7
    56fe:	4313      	orrs	r3, r2
    5700:	794a      	ldrb	r2, [r1, #5]
    5702:	b2db      	uxtb	r3, r3
    5704:	189b      	adds	r3, r3, r2
    5706:	b2da      	uxtb	r2, r3
    5708:	0852      	lsrs	r2, r2, #1
    570a:	01db      	lsls	r3, r3, #7
    570c:	431a      	orrs	r2, r3
    570e:	798b      	ldrb	r3, [r1, #6]
    5710:	b2d2      	uxtb	r2, r2
    5712:	18d2      	adds	r2, r2, r3
    5714:	b2d3      	uxtb	r3, r2
    5716:	085b      	lsrs	r3, r3, #1
    5718:	01d2      	lsls	r2, r2, #7
    571a:	4313      	orrs	r3, r2
    571c:	79ca      	ldrb	r2, [r1, #7]
    571e:	b2db      	uxtb	r3, r3
    5720:	189b      	adds	r3, r3, r2
    5722:	b2da      	uxtb	r2, r3
    5724:	0852      	lsrs	r2, r2, #1
    5726:	01db      	lsls	r3, r3, #7
    5728:	431a      	orrs	r2, r3
    572a:	7a0b      	ldrb	r3, [r1, #8]
    572c:	b2d2      	uxtb	r2, r2
    572e:	18d2      	adds	r2, r2, r3
    5730:	b2d3      	uxtb	r3, r2
    5732:	085b      	lsrs	r3, r3, #1
    5734:	01d2      	lsls	r2, r2, #7
    5736:	4313      	orrs	r3, r2
    5738:	7a4a      	ldrb	r2, [r1, #9]
    573a:	b2db      	uxtb	r3, r3
    573c:	189b      	adds	r3, r3, r2
    573e:	b2da      	uxtb	r2, r3
    5740:	0852      	lsrs	r2, r2, #1
    5742:	01db      	lsls	r3, r3, #7
    5744:	4313      	orrs	r3, r2
    5746:	7a8a      	ldrb	r2, [r1, #10]
    5748:	189b      	adds	r3, r3, r2
    574a:	b2db      	uxtb	r3, r3
    574c:	9301      	str	r3, [sp, #4]
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    574e:	4bcc      	ldr	r3, [pc, #816]	; (5a80 <dir_register+0x728>)
    5750:	4698      	mov	r8, r3
    5752:	e036      	b.n	57c2 <dir_register+0x46a>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    5754:	22ff      	movs	r2, #255	; 0xff
    5756:	70da      	strb	r2, [r3, #3]
    5758:	711a      	strb	r2, [r3, #4]
    575a:	22ff      	movs	r2, #255	; 0xff
    575c:	715a      	strb	r2, [r3, #5]
    575e:	719a      	strb	r2, [r3, #6]
    5760:	22ff      	movs	r2, #255	; 0xff
    5762:	71da      	strb	r2, [r3, #7]
    5764:	721a      	strb	r2, [r3, #8]
    5766:	22ff      	movs	r2, #255	; 0xff
    5768:	725a      	strb	r2, [r3, #9]
    576a:	729a      	strb	r2, [r3, #10]
    576c:	22ff      	movs	r2, #255	; 0xff
    576e:	739a      	strb	r2, [r3, #14]
    5770:	73da      	strb	r2, [r3, #15]
    5772:	22ff      	movs	r2, #255	; 0xff
    5774:	741a      	strb	r2, [r3, #16]
    5776:	745a      	strb	r2, [r3, #17]
    5778:	22ff      	movs	r2, #255	; 0xff
    577a:	749a      	strb	r2, [r3, #18]
    577c:	74da      	strb	r2, [r3, #19]
    577e:	22ff      	movs	r2, #255	; 0xff
    5780:	751a      	strb	r2, [r3, #20]
    5782:	755a      	strb	r2, [r3, #21]
    5784:	22ff      	movs	r2, #255	; 0xff
    5786:	759a      	strb	r2, [r3, #22]
    5788:	75da      	strb	r2, [r3, #23]
    578a:	22ff      	movs	r2, #255	; 0xff
    578c:	761a      	strb	r2, [r3, #24]
    578e:	765a      	strb	r2, [r3, #25]
    5790:	22ff      	movs	r2, #255	; 0xff
    5792:	771a      	strb	r2, [r3, #28]
    5794:	775a      	strb	r2, [r3, #29]
    5796:	22ff      	movs	r2, #255	; 0xff
    5798:	779a      	strb	r2, [r3, #30]
    579a:	77da      	strb	r2, [r3, #31]
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    579c:	2240      	movs	r2, #64	; 0x40
    579e:	4314      	orrs	r4, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    57a0:	701c      	strb	r4, [r3, #0]
				dj->fs->wflag = 1;
    57a2:	2301      	movs	r3, #1
    57a4:	682a      	ldr	r2, [r5, #0]
				res = dir_next(dj, 0);	/* Next entry */
    57a6:	0028      	movs	r0, r5
				dj->fs->wflag = 1;
    57a8:	7113      	strb	r3, [r2, #4]
				res = dir_next(dj, 0);	/* Next entry */
    57aa:	4bb6      	ldr	r3, [pc, #728]	; (5a84 <dir_register+0x72c>)
    57ac:	4798      	blx	r3
			} while (res == FR_OK && --ne);
    57ae:	2800      	cmp	r0, #0
    57b0:	d000      	beq.n	57b4 <dir_register+0x45c>
    57b2:	e193      	b.n	5adc <dir_register+0x784>
    57b4:	465b      	mov	r3, fp
    57b6:	3b01      	subs	r3, #1
    57b8:	b29b      	uxth	r3, r3
    57ba:	469b      	mov	fp, r3
    57bc:	2b00      	cmp	r3, #0
    57be:	d100      	bne.n	57c2 <dir_register+0x46a>
    57c0:	e11f      	b.n	5a02 <dir_register+0x6aa>
				res = move_window(dj->fs, dj->sect);
    57c2:	682c      	ldr	r4, [r5, #0]
    57c4:	692b      	ldr	r3, [r5, #16]
	wsect = fs->winsect;
    57c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
				res = move_window(dj->fs, dj->sect);
    57c8:	4699      	mov	r9, r3
	if (wsect != sector) {	/* Changed current window */
    57ca:	42b3      	cmp	r3, r6
    57cc:	d012      	beq.n	57f4 <dir_register+0x49c>
		if (fs->wflag) {	/* Write back dirty window if needed */
    57ce:	7923      	ldrb	r3, [r4, #4]
    57d0:	2b00      	cmp	r3, #0
    57d2:	d000      	beq.n	57d6 <dir_register+0x47e>
    57d4:	e15e      	b.n	5a94 <dir_register+0x73c>
		if (sector) {
    57d6:	464b      	mov	r3, r9
    57d8:	2b00      	cmp	r3, #0
    57da:	d00b      	beq.n	57f4 <dir_register+0x49c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    57dc:	0021      	movs	r1, r4
    57de:	7860      	ldrb	r0, [r4, #1]
    57e0:	2301      	movs	r3, #1
    57e2:	464a      	mov	r2, r9
    57e4:	3130      	adds	r1, #48	; 0x30
    57e6:	4ea8      	ldr	r6, [pc, #672]	; (5a88 <dir_register+0x730>)
    57e8:	47b0      	blx	r6
    57ea:	2800      	cmp	r0, #0
    57ec:	d000      	beq.n	57f0 <dir_register+0x498>
    57ee:	e0b0      	b.n	5952 <dir_register+0x5fa>
			fs->winsect = sector;
    57f0:	464b      	mov	r3, r9
    57f2:	62e3      	str	r3, [r4, #44]	; 0x2c
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    57f4:	4669      	mov	r1, sp
    57f6:	465a      	mov	r2, fp
    57f8:	696b      	ldr	r3, [r5, #20]
    57fa:	700a      	strb	r2, [r1, #0]
	dir[LDIR_Chksum] = sum;			/* Set check sum */
    57fc:	790a      	ldrb	r2, [r1, #4]
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    57fe:	69e8      	ldr	r0, [r5, #28]
	dir[LDIR_Chksum] = sum;			/* Set check sum */
    5800:	735a      	strb	r2, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    5802:	220f      	movs	r2, #15
    5804:	72da      	strb	r2, [r3, #11]
	dir[LDIR_Type] = 0;
    5806:	2200      	movs	r2, #0
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    5808:	780c      	ldrb	r4, [r1, #0]
	dir[LDIR_Type] = 0;
    580a:	731a      	strb	r2, [r3, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    580c:	1e61      	subs	r1, r4, #1
	ST_WORD(dir+LDIR_FstClusLO, 0);
    580e:	769a      	strb	r2, [r3, #26]
    5810:	76da      	strb	r2, [r3, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    5812:	004a      	lsls	r2, r1, #1
    5814:	1852      	adds	r2, r2, r1
    5816:	0092      	lsls	r2, r2, #2
    5818:	1852      	adds	r2, r2, r1
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    581a:	0051      	lsls	r1, r2, #1
    581c:	4689      	mov	r9, r1
    581e:	5a41      	ldrh	r1, [r0, r1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    5820:	0a0f      	lsrs	r7, r1, #8
    5822:	7059      	strb	r1, [r3, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    5824:	3901      	subs	r1, #1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    5826:	709f      	strb	r7, [r3, #2]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    5828:	b28f      	uxth	r7, r1
    582a:	4998      	ldr	r1, [pc, #608]	; (5a8c <dir_register+0x734>)
    582c:	428f      	cmp	r7, r1
    582e:	d891      	bhi.n	5754 <dir_register+0x3fc>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    5830:	3201      	adds	r2, #1
    5832:	0052      	lsls	r2, r2, #1
    5834:	5a87      	ldrh	r7, [r0, r2]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    5836:	0a3e      	lsrs	r6, r7, #8
    5838:	70df      	strb	r7, [r3, #3]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    583a:	3f01      	subs	r7, #1
    583c:	b2bf      	uxth	r7, r7
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    583e:	711e      	strb	r6, [r3, #4]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    5840:	428f      	cmp	r7, r1
    5842:	d88a      	bhi.n	575a <dir_register+0x402>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    5844:	1882      	adds	r2, r0, r2
    5846:	8857      	ldrh	r7, [r2, #2]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    5848:	0a3e      	lsrs	r6, r7, #8
    584a:	715f      	strb	r7, [r3, #5]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    584c:	3f01      	subs	r7, #1
    584e:	b2bf      	uxth	r7, r7
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    5850:	719e      	strb	r6, [r3, #6]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    5852:	428f      	cmp	r7, r1
    5854:	d884      	bhi.n	5760 <dir_register+0x408>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    5856:	8897      	ldrh	r7, [r2, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    5858:	0a3e      	lsrs	r6, r7, #8
    585a:	71df      	strb	r7, [r3, #7]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    585c:	3f01      	subs	r7, #1
    585e:	b2bf      	uxth	r7, r7
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    5860:	721e      	strb	r6, [r3, #8]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    5862:	428f      	cmp	r7, r1
    5864:	d900      	bls.n	5868 <dir_register+0x510>
    5866:	e77e      	b.n	5766 <dir_register+0x40e>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    5868:	88d7      	ldrh	r7, [r2, #6]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    586a:	0a3e      	lsrs	r6, r7, #8
    586c:	725f      	strb	r7, [r3, #9]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    586e:	3f01      	subs	r7, #1
    5870:	b2bf      	uxth	r7, r7
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    5872:	729e      	strb	r6, [r3, #10]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    5874:	428f      	cmp	r7, r1
    5876:	d900      	bls.n	587a <dir_register+0x522>
    5878:	e778      	b.n	576c <dir_register+0x414>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    587a:	8917      	ldrh	r7, [r2, #8]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    587c:	0a3e      	lsrs	r6, r7, #8
    587e:	739f      	strb	r7, [r3, #14]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    5880:	3f01      	subs	r7, #1
    5882:	b2bf      	uxth	r7, r7
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    5884:	73de      	strb	r6, [r3, #15]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    5886:	428f      	cmp	r7, r1
    5888:	d900      	bls.n	588c <dir_register+0x534>
    588a:	e772      	b.n	5772 <dir_register+0x41a>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    588c:	8957      	ldrh	r7, [r2, #10]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    588e:	0a3e      	lsrs	r6, r7, #8
    5890:	741f      	strb	r7, [r3, #16]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    5892:	3f01      	subs	r7, #1
    5894:	b2bf      	uxth	r7, r7
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    5896:	745e      	strb	r6, [r3, #17]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    5898:	428f      	cmp	r7, r1
    589a:	d900      	bls.n	589e <dir_register+0x546>
    589c:	e76c      	b.n	5778 <dir_register+0x420>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    589e:	8997      	ldrh	r7, [r2, #12]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    58a0:	0a3e      	lsrs	r6, r7, #8
    58a2:	749f      	strb	r7, [r3, #18]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    58a4:	3f01      	subs	r7, #1
    58a6:	b2bf      	uxth	r7, r7
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    58a8:	74de      	strb	r6, [r3, #19]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    58aa:	428f      	cmp	r7, r1
    58ac:	d900      	bls.n	58b0 <dir_register+0x558>
    58ae:	e766      	b.n	577e <dir_register+0x426>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    58b0:	89d7      	ldrh	r7, [r2, #14]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    58b2:	0a3e      	lsrs	r6, r7, #8
    58b4:	751f      	strb	r7, [r3, #20]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    58b6:	3f01      	subs	r7, #1
    58b8:	b2bf      	uxth	r7, r7
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    58ba:	755e      	strb	r6, [r3, #21]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    58bc:	428f      	cmp	r7, r1
    58be:	d900      	bls.n	58c2 <dir_register+0x56a>
    58c0:	e760      	b.n	5784 <dir_register+0x42c>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    58c2:	8a17      	ldrh	r7, [r2, #16]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    58c4:	0a3e      	lsrs	r6, r7, #8
    58c6:	759f      	strb	r7, [r3, #22]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    58c8:	3f01      	subs	r7, #1
    58ca:	b2bf      	uxth	r7, r7
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    58cc:	75de      	strb	r6, [r3, #23]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    58ce:	428f      	cmp	r7, r1
    58d0:	d900      	bls.n	58d4 <dir_register+0x57c>
    58d2:	e75a      	b.n	578a <dir_register+0x432>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    58d4:	8a51      	ldrh	r1, [r2, #18]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    58d6:	0a0f      	lsrs	r7, r1, #8
    58d8:	7619      	strb	r1, [r3, #24]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    58da:	3901      	subs	r1, #1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    58dc:	765f      	strb	r7, [r3, #25]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    58de:	b28f      	uxth	r7, r1
    58e0:	496a      	ldr	r1, [pc, #424]	; (5a8c <dir_register+0x734>)
    58e2:	428f      	cmp	r7, r1
    58e4:	d900      	bls.n	58e8 <dir_register+0x590>
    58e6:	e753      	b.n	5790 <dir_register+0x438>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    58e8:	8a97      	ldrh	r7, [r2, #20]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    58ea:	0a3e      	lsrs	r6, r7, #8
    58ec:	771f      	strb	r7, [r3, #28]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    58ee:	3f01      	subs	r7, #1
    58f0:	b2bf      	uxth	r7, r7
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    58f2:	775e      	strb	r6, [r3, #29]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    58f4:	428f      	cmp	r7, r1
    58f6:	d900      	bls.n	58fa <dir_register+0x5a2>
    58f8:	e74d      	b.n	5796 <dir_register+0x43e>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    58fa:	8ad2      	ldrh	r2, [r2, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    58fc:	0a17      	lsrs	r7, r2, #8
    58fe:	779a      	strb	r2, [r3, #30]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    5900:	3a01      	subs	r2, #1
    5902:	b292      	uxth	r2, r2
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    5904:	77df      	strb	r7, [r3, #31]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    5906:	428a      	cmp	r2, r1
    5908:	d900      	bls.n	590c <dir_register+0x5b4>
    590a:	e747      	b.n	579c <dir_register+0x444>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    590c:	4448      	add	r0, r9
    590e:	8b42      	ldrh	r2, [r0, #26]
    5910:	2a00      	cmp	r2, #0
    5912:	d100      	bne.n	5916 <dir_register+0x5be>
    5914:	e742      	b.n	579c <dir_register+0x444>
    5916:	e743      	b.n	57a0 <dir_register+0x448>
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    5918:	6933      	ldr	r3, [r6, #16]
    591a:	4699      	mov	r9, r3
    591c:	2b00      	cmp	r3, #0
    591e:	d100      	bne.n	5922 <dir_register+0x5ca>
    5920:	e57c      	b.n	541c <dir_register+0xc4>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    5922:	230f      	movs	r3, #15
    5924:	4023      	ands	r3, r4
    5926:	4698      	mov	r8, r3
    5928:	d050      	beq.n	59cc <dir_register+0x674>
    592a:	6837      	ldr	r7, [r6, #0]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    592c:	4643      	mov	r3, r8
    592e:	015a      	lsls	r2, r3, #5
    5930:	003b      	movs	r3, r7
    5932:	3330      	adds	r3, #48	; 0x30
    5934:	189b      	adds	r3, r3, r2
	dj->index = i;
    5936:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    5938:	6173      	str	r3, [r6, #20]
    593a:	46a8      	mov	r8, r5
    593c:	e549      	b.n	53d2 <dir_register+0x7a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    593e:	0021      	movs	r1, r4
    5940:	7860      	ldrb	r0, [r4, #1]
    5942:	2301      	movs	r3, #1
    5944:	003a      	movs	r2, r7
    5946:	3130      	adds	r1, #48	; 0x30
    5948:	4d4f      	ldr	r5, [pc, #316]	; (5a88 <dir_register+0x730>)
    594a:	47a8      	blx	r5
    594c:	2800      	cmp	r0, #0
    594e:	d100      	bne.n	5952 <dir_register+0x5fa>
    5950:	e0c6      	b.n	5ae0 <dir_register+0x788>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    5952:	2301      	movs	r3, #1
    5954:	469a      	mov	sl, r3
    5956:	e563      	b.n	5420 <dir_register+0xc8>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    5958:	2330      	movs	r3, #48	; 0x30
    595a:	469b      	mov	fp, r3
    595c:	44bb      	add	fp, r7
    595e:	7878      	ldrb	r0, [r7, #1]
    5960:	3b2f      	subs	r3, #47	; 0x2f
    5962:	0022      	movs	r2, r4
    5964:	4659      	mov	r1, fp
    5966:	4d46      	ldr	r5, [pc, #280]	; (5a80 <dir_register+0x728>)
    5968:	47a8      	blx	r5
    596a:	2800      	cmp	r0, #0
    596c:	d1f1      	bne.n	5952 <dir_register+0x5fa>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    596e:	69fb      	ldr	r3, [r7, #28]
    5970:	6a3a      	ldr	r2, [r7, #32]
			fs->wflag = 0;
    5972:	7138      	strb	r0, [r7, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    5974:	189a      	adds	r2, r3, r2
    5976:	4294      	cmp	r4, r2
    5978:	d300      	bcc.n	597c <dir_register+0x624>
    597a:	e531      	b.n	53e0 <dir_register+0x88>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    597c:	78fd      	ldrb	r5, [r7, #3]
    597e:	2d01      	cmp	r5, #1
    5980:	d800      	bhi.n	5984 <dir_register+0x62c>
    5982:	e52d      	b.n	53e0 <dir_register+0x88>
    5984:	4659      	mov	r1, fp
    5986:	46b3      	mov	fp, r6
    5988:	9102      	str	r1, [sp, #8]
    598a:	e001      	b.n	5990 <dir_register+0x638>
    598c:	69fb      	ldr	r3, [r7, #28]
    598e:	9902      	ldr	r1, [sp, #8]
					wsect += fs->fsize;
    5990:	18e4      	adds	r4, r4, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    5992:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    5994:	7878      	ldrb	r0, [r7, #1]
    5996:	2301      	movs	r3, #1
    5998:	0022      	movs	r2, r4
    599a:	4e39      	ldr	r6, [pc, #228]	; (5a80 <dir_register+0x728>)
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    599c:	b2ed      	uxtb	r5, r5
					disk_write(fs->drv, fs->win, wsect, 1);
    599e:	47b0      	blx	r6
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    59a0:	2d01      	cmp	r5, #1
    59a2:	d1f3      	bne.n	598c <dir_register+0x634>
    59a4:	465e      	mov	r6, fp
    59a6:	e51b      	b.n	53e0 <dir_register+0x88>
	for (j = 0; j < i && dst[j] != ' '; j++) {
    59a8:	2304      	movs	r3, #4
    59aa:	e5d6      	b.n	555a <dir_register+0x202>
    59ac:	2303      	movs	r3, #3
    59ae:	e5d4      	b.n	555a <dir_register+0x202>
    59b0:	2303      	movs	r3, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    59b2:	1c5f      	adds	r7, r3, #1
    59b4:	46bc      	mov	ip, r7
    59b6:	277e      	movs	r7, #126	; 0x7e
    59b8:	700f      	strb	r7, [r1, #0]
    59ba:	e5d2      	b.n	5562 <dir_register+0x20a>
	for (j = 0; j < i && dst[j] != ' '; j++) {
    59bc:	2302      	movs	r3, #2
    59be:	e7f8      	b.n	59b2 <dir_register+0x65a>
    59c0:	2301      	movs	r3, #1
    59c2:	e7f6      	b.n	59b2 <dir_register+0x65a>
    59c4:	2304      	movs	r3, #4
    59c6:	e7f4      	b.n	59b2 <dir_register+0x65a>
    59c8:	3b01      	subs	r3, #1
    59ca:	e7f2      	b.n	59b2 <dir_register+0x65a>
		dj->sect++;					/* Next sector */
    59cc:	2301      	movs	r3, #1
    59ce:	469c      	mov	ip, r3
    59d0:	44e1      	add	r9, ip
    59d2:	464b      	mov	r3, r9
		if (dj->clust == 0) {	/* Static table */
    59d4:	68f1      	ldr	r1, [r6, #12]
		dj->sect++;					/* Next sector */
    59d6:	6133      	str	r3, [r6, #16]
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    59d8:	6837      	ldr	r7, [r6, #0]
		if (dj->clust == 0) {	/* Static table */
    59da:	2900      	cmp	r1, #0
    59dc:	d00c      	beq.n	59f8 <dir_register+0x6a0>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    59de:	78bb      	ldrb	r3, [r7, #2]
    59e0:	0922      	lsrs	r2, r4, #4
    59e2:	3b01      	subs	r3, #1
    59e4:	421a      	tst	r2, r3
    59e6:	d1a1      	bne.n	592c <dir_register+0x5d4>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    59e8:	2901      	cmp	r1, #1
    59ea:	d902      	bls.n	59f2 <dir_register+0x69a>
    59ec:	69bb      	ldr	r3, [r7, #24]
    59ee:	4299      	cmp	r1, r3
    59f0:	d378      	bcc.n	5ae4 <dir_register+0x78c>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    59f2:	2302      	movs	r3, #2
    59f4:	469a      	mov	sl, r3
    59f6:	e513      	b.n	5420 <dir_register+0xc8>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    59f8:	893b      	ldrh	r3, [r7, #8]
    59fa:	42a3      	cmp	r3, r4
    59fc:	d800      	bhi.n	5a00 <dir_register+0x6a8>
    59fe:	e50d      	b.n	541c <dir_register+0xc4>
    5a00:	e794      	b.n	592c <dir_register+0x5d4>
    5a02:	46ab      	mov	fp, r5
		res = move_window(dj->fs, dj->sect);
    5a04:	465b      	mov	r3, fp
    5a06:	681c      	ldr	r4, [r3, #0]
    5a08:	691f      	ldr	r7, [r3, #16]
	wsect = fs->winsect;
    5a0a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
    5a0c:	42af      	cmp	r7, r5
    5a0e:	d005      	beq.n	5a1c <dir_register+0x6c4>
		if (fs->wflag) {	/* Write back dirty window if needed */
    5a10:	7923      	ldrb	r3, [r4, #4]
    5a12:	2b00      	cmp	r3, #0
    5a14:	d000      	beq.n	5a18 <dir_register+0x6c0>
    5a16:	e0ba      	b.n	5b8e <dir_register+0x836>
		if (sector) {
    5a18:	2f00      	cmp	r7, #0
    5a1a:	d190      	bne.n	593e <dir_register+0x5e6>
			dir = dj->dir;
    5a1c:	465b      	mov	r3, fp
    5a1e:	695c      	ldr	r4, [r3, #20]
    5a20:	2220      	movs	r2, #32
    5a22:	2100      	movs	r1, #0
    5a24:	4b1a      	ldr	r3, [pc, #104]	; (5a90 <dir_register+0x738>)
    5a26:	0020      	movs	r0, r4
    5a28:	4798      	blx	r3
    5a2a:	2200      	movs	r2, #0
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    5a2c:	465b      	mov	r3, fp
    5a2e:	0010      	movs	r0, r2
    5a30:	699b      	ldr	r3, [r3, #24]
    5a32:	1d19      	adds	r1, r3, #4
    5a34:	428c      	cmp	r4, r1
    5a36:	4150      	adcs	r0, r2
    5a38:	0001      	movs	r1, r0
    5a3a:	1d20      	adds	r0, r4, #4
    5a3c:	4283      	cmp	r3, r0
    5a3e:	4152      	adcs	r2, r2
    5a40:	430a      	orrs	r2, r1
    5a42:	b2d2      	uxtb	r2, r2
    5a44:	2a00      	cmp	r2, #0
    5a46:	d100      	bne.n	5a4a <dir_register+0x6f2>
    5a48:	e0db      	b.n	5c02 <dir_register+0x8aa>
    5a4a:	001a      	movs	r2, r3
    5a4c:	4322      	orrs	r2, r4
    5a4e:	0792      	lsls	r2, r2, #30
    5a50:	d000      	beq.n	5a54 <dir_register+0x6fc>
    5a52:	e0d6      	b.n	5c02 <dir_register+0x8aa>
		*d++ = *s++;
    5a54:	681a      	ldr	r2, [r3, #0]
    5a56:	6022      	str	r2, [r4, #0]
    5a58:	685a      	ldr	r2, [r3, #4]
    5a5a:	6062      	str	r2, [r4, #4]
    5a5c:	7a1a      	ldrb	r2, [r3, #8]
    5a5e:	7222      	strb	r2, [r4, #8]
    5a60:	7a5a      	ldrb	r2, [r3, #9]
    5a62:	7262      	strb	r2, [r4, #9]
    5a64:	7a9b      	ldrb	r3, [r3, #10]
    5a66:	72a3      	strb	r3, [r4, #10]
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    5a68:	465b      	mov	r3, fp
    5a6a:	699b      	ldr	r3, [r3, #24]
    5a6c:	7ada      	ldrb	r2, [r3, #11]
    5a6e:	2318      	movs	r3, #24
    5a70:	4013      	ands	r3, r2
    5a72:	7323      	strb	r3, [r4, #12]
			dj->fs->wflag = 1;
    5a74:	465b      	mov	r3, fp
    5a76:	2201      	movs	r2, #1
    5a78:	681b      	ldr	r3, [r3, #0]
    5a7a:	711a      	strb	r2, [r3, #4]
    5a7c:	e4d0      	b.n	5420 <dir_register+0xc8>
    5a7e:	46c0      	nop			; (mov r8, r8)
    5a80:	00003dc1 	.word	0x00003dc1
    5a84:	00004f71 	.word	0x00004f71
    5a88:	00003d3d 	.word	0x00003d3d
    5a8c:	0000fffd 	.word	0x0000fffd
    5a90:	0001fdfd 	.word	0x0001fdfd
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    5a94:	2330      	movs	r3, #48	; 0x30
    5a96:	469c      	mov	ip, r3
    5a98:	44a4      	add	ip, r4
    5a9a:	4663      	mov	r3, ip
    5a9c:	9300      	str	r3, [sp, #0]
    5a9e:	4661      	mov	r1, ip
    5aa0:	7860      	ldrb	r0, [r4, #1]
    5aa2:	2301      	movs	r3, #1
    5aa4:	0032      	movs	r2, r6
    5aa6:	47c0      	blx	r8
    5aa8:	2800      	cmp	r0, #0
    5aaa:	d000      	beq.n	5aae <dir_register+0x756>
    5aac:	e751      	b.n	5952 <dir_register+0x5fa>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    5aae:	69e3      	ldr	r3, [r4, #28]
    5ab0:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
    5ab2:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    5ab4:	189a      	adds	r2, r3, r2
    5ab6:	4296      	cmp	r6, r2
    5ab8:	d300      	bcc.n	5abc <dir_register+0x764>
    5aba:	e68c      	b.n	57d6 <dir_register+0x47e>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    5abc:	78e7      	ldrb	r7, [r4, #3]
    5abe:	2f01      	cmp	r7, #1
    5ac0:	d801      	bhi.n	5ac6 <dir_register+0x76e>
    5ac2:	e688      	b.n	57d6 <dir_register+0x47e>
    5ac4:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
    5ac6:	18f6      	adds	r6, r6, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    5ac8:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    5aca:	7860      	ldrb	r0, [r4, #1]
    5acc:	2301      	movs	r3, #1
    5ace:	0032      	movs	r2, r6
    5ad0:	9900      	ldr	r1, [sp, #0]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    5ad2:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
    5ad4:	47c0      	blx	r8
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    5ad6:	2f01      	cmp	r7, #1
    5ad8:	d1f4      	bne.n	5ac4 <dir_register+0x76c>
    5ada:	e67c      	b.n	57d6 <dir_register+0x47e>
				res = dir_next(dj, 0);	/* Next entry */
    5adc:	4682      	mov	sl, r0
    5ade:	e49f      	b.n	5420 <dir_register+0xc8>
			fs->winsect = sector;
    5ae0:	62e7      	str	r7, [r4, #44]	; 0x2c
    5ae2:	e79b      	b.n	5a1c <dir_register+0x6c4>
    5ae4:	4b52      	ldr	r3, [pc, #328]	; (5c30 <dir_register+0x8d8>)
    5ae6:	0038      	movs	r0, r7
    5ae8:	4798      	blx	r3
    5aea:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;
    5aec:	0003      	movs	r3, r0
    5aee:	2801      	cmp	r0, #1
    5af0:	d800      	bhi.n	5af4 <dir_register+0x79c>
    5af2:	e77e      	b.n	59f2 <dir_register+0x69a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    5af4:	3301      	adds	r3, #1
    5af6:	d100      	bne.n	5afa <dir_register+0x7a2>
    5af8:	e72b      	b.n	5952 <dir_register+0x5fa>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    5afa:	6837      	ldr	r7, [r6, #0]
    5afc:	69bb      	ldr	r3, [r7, #24]
    5afe:	4298      	cmp	r0, r3
    5b00:	d369      	bcc.n	5bd6 <dir_register+0x87e>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    5b02:	4b4c      	ldr	r3, [pc, #304]	; (5c34 <dir_register+0x8dc>)
    5b04:	68f1      	ldr	r1, [r6, #12]
    5b06:	0038      	movs	r0, r7
    5b08:	4798      	blx	r3
    5b0a:	4681      	mov	r9, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    5b0c:	1e03      	subs	r3, r0, #0
    5b0e:	d100      	bne.n	5b12 <dir_register+0x7ba>
    5b10:	e560      	b.n	55d4 <dir_register+0x27c>
					if (clst == 1) return FR_INT_ERR;
    5b12:	2801      	cmp	r0, #1
    5b14:	d100      	bne.n	5b18 <dir_register+0x7c0>
    5b16:	e76c      	b.n	59f2 <dir_register+0x69a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    5b18:	3301      	adds	r3, #1
    5b1a:	d100      	bne.n	5b1e <dir_register+0x7c6>
    5b1c:	e719      	b.n	5952 <dir_register+0x5fa>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    5b1e:	2100      	movs	r1, #0
    5b20:	6830      	ldr	r0, [r6, #0]
    5b22:	4b45      	ldr	r3, [pc, #276]	; (5c38 <dir_register+0x8e0>)
    5b24:	4798      	blx	r3
    5b26:	2800      	cmp	r0, #0
    5b28:	d000      	beq.n	5b2c <dir_register+0x7d4>
    5b2a:	e712      	b.n	5952 <dir_register+0x5fa>
    5b2c:	2280      	movs	r2, #128	; 0x80
		*d++ = (BYTE)val;
    5b2e:	6830      	ldr	r0, [r6, #0]
    5b30:	0092      	lsls	r2, r2, #2
    5b32:	2100      	movs	r1, #0
    5b34:	4b41      	ldr	r3, [pc, #260]	; (5c3c <dir_register+0x8e4>)
    5b36:	3030      	adds	r0, #48	; 0x30
    5b38:	4798      	blx	r3
	clst -= 2;
    5b3a:	2302      	movs	r3, #2
    5b3c:	425b      	negs	r3, r3
    5b3e:	444b      	add	r3, r9
    5b40:	469b      	mov	fp, r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    5b42:	6832      	ldr	r2, [r6, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    5b44:	6993      	ldr	r3, [r2, #24]
    5b46:	1e99      	subs	r1, r3, #2
    5b48:	2300      	movs	r3, #0
    5b4a:	458b      	cmp	fp, r1
    5b4c:	d205      	bcs.n	5b5a <dir_register+0x802>
	return clst * fs->csize + fs->database;
    5b4e:	4659      	mov	r1, fp
    5b50:	7893      	ldrb	r3, [r2, #2]
    5b52:	434b      	muls	r3, r1
    5b54:	6a91      	ldr	r1, [r2, #40]	; 0x28
    5b56:	468c      	mov	ip, r1
    5b58:	4463      	add	r3, ip
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    5b5a:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    5b5c:	6833      	ldr	r3, [r6, #0]
    5b5e:	2700      	movs	r7, #0
    5b60:	789a      	ldrb	r2, [r3, #2]
    5b62:	2a00      	cmp	r2, #0
    5b64:	d10a      	bne.n	5b7c <dir_register+0x824>
    5b66:	e05d      	b.n	5c24 <dir_register+0x8cc>
						dj->fs->winsect++;
    5b68:	6832      	ldr	r2, [r6, #0]
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    5b6a:	3701      	adds	r7, #1
						dj->fs->winsect++;
    5b6c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    5b6e:	b2ff      	uxtb	r7, r7
						dj->fs->winsect++;
    5b70:	3301      	adds	r3, #1
    5b72:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    5b74:	6833      	ldr	r3, [r6, #0]
    5b76:	789a      	ldrb	r2, [r3, #2]
    5b78:	42ba      	cmp	r2, r7
    5b7a:	d953      	bls.n	5c24 <dir_register+0x8cc>
						dj->fs->wflag = 1;
    5b7c:	2201      	movs	r2, #1
    5b7e:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    5b80:	2100      	movs	r1, #0
    5b82:	6830      	ldr	r0, [r6, #0]
    5b84:	4b2c      	ldr	r3, [pc, #176]	; (5c38 <dir_register+0x8e0>)
    5b86:	4798      	blx	r3
    5b88:	2800      	cmp	r0, #0
    5b8a:	d0ed      	beq.n	5b68 <dir_register+0x810>
    5b8c:	e6e1      	b.n	5952 <dir_register+0x5fa>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    5b8e:	2330      	movs	r3, #48	; 0x30
    5b90:	4698      	mov	r8, r3
    5b92:	4e2b      	ldr	r6, [pc, #172]	; (5c40 <dir_register+0x8e8>)
    5b94:	44a0      	add	r8, r4
    5b96:	7860      	ldrb	r0, [r4, #1]
    5b98:	3b2f      	subs	r3, #47	; 0x2f
    5b9a:	002a      	movs	r2, r5
    5b9c:	4641      	mov	r1, r8
    5b9e:	46b1      	mov	r9, r6
    5ba0:	47b0      	blx	r6
    5ba2:	2800      	cmp	r0, #0
    5ba4:	d000      	beq.n	5ba8 <dir_register+0x850>
    5ba6:	e6d4      	b.n	5952 <dir_register+0x5fa>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    5ba8:	69e3      	ldr	r3, [r4, #28]
    5baa:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
    5bac:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    5bae:	189a      	adds	r2, r3, r2
    5bb0:	4295      	cmp	r5, r2
    5bb2:	d300      	bcc.n	5bb6 <dir_register+0x85e>
    5bb4:	e730      	b.n	5a18 <dir_register+0x6c0>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    5bb6:	78e6      	ldrb	r6, [r4, #3]
    5bb8:	2e01      	cmp	r6, #1
    5bba:	d801      	bhi.n	5bc0 <dir_register+0x868>
    5bbc:	e72c      	b.n	5a18 <dir_register+0x6c0>
    5bbe:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
    5bc0:	18ed      	adds	r5, r5, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    5bc2:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    5bc4:	7860      	ldrb	r0, [r4, #1]
    5bc6:	2301      	movs	r3, #1
    5bc8:	002a      	movs	r2, r5
    5bca:	4641      	mov	r1, r8
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    5bcc:	b2f6      	uxtb	r6, r6
					disk_write(fs->drv, fs->win, wsect, 1);
    5bce:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    5bd0:	2e01      	cmp	r6, #1
    5bd2:	d1f4      	bne.n	5bbe <dir_register+0x866>
    5bd4:	e720      	b.n	5a18 <dir_register+0x6c0>
    5bd6:	2302      	movs	r3, #2
    5bd8:	425b      	negs	r3, r3
    5bda:	444b      	add	r3, r9
    5bdc:	469b      	mov	fp, r3
				dj->clust = clst;				/* Initialize data for new cluster */
    5bde:	464b      	mov	r3, r9
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    5be0:	2200      	movs	r2, #0
				dj->clust = clst;				/* Initialize data for new cluster */
    5be2:	60f3      	str	r3, [r6, #12]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    5be4:	69bb      	ldr	r3, [r7, #24]
    5be6:	4691      	mov	r9, r2
    5be8:	3b02      	subs	r3, #2
    5bea:	455b      	cmp	r3, fp
    5bec:	d906      	bls.n	5bfc <dir_register+0x8a4>
	return clst * fs->csize + fs->database;
    5bee:	465a      	mov	r2, fp
    5bf0:	78bb      	ldrb	r3, [r7, #2]
    5bf2:	435a      	muls	r2, r3
    5bf4:	0013      	movs	r3, r2
    5bf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    5bf8:	4691      	mov	r9, r2
    5bfa:	4499      	add	r9, r3
				dj->sect = clust2sect(dj->fs, clst);
    5bfc:	464b      	mov	r3, r9
    5bfe:	6133      	str	r3, [r6, #16]
    5c00:	e694      	b.n	592c <dir_register+0x5d4>
		*d++ = *s++;
    5c02:	781a      	ldrb	r2, [r3, #0]
    5c04:	7022      	strb	r2, [r4, #0]
    5c06:	785a      	ldrb	r2, [r3, #1]
    5c08:	7062      	strb	r2, [r4, #1]
    5c0a:	789a      	ldrb	r2, [r3, #2]
    5c0c:	70a2      	strb	r2, [r4, #2]
    5c0e:	78da      	ldrb	r2, [r3, #3]
    5c10:	70e2      	strb	r2, [r4, #3]
    5c12:	791a      	ldrb	r2, [r3, #4]
    5c14:	7122      	strb	r2, [r4, #4]
    5c16:	795a      	ldrb	r2, [r3, #5]
    5c18:	7162      	strb	r2, [r4, #5]
    5c1a:	799a      	ldrb	r2, [r3, #6]
    5c1c:	71a2      	strb	r2, [r4, #6]
    5c1e:	79da      	ldrb	r2, [r3, #7]
    5c20:	71e2      	strb	r2, [r4, #7]
    5c22:	e71b      	b.n	5a5c <dir_register+0x704>
					dj->fs->winsect -= c;						/* Rewind window address */
    5c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5c26:	1bd7      	subs	r7, r2, r7
    5c28:	62df      	str	r7, [r3, #44]	; 0x2c
    5c2a:	6837      	ldr	r7, [r6, #0]
    5c2c:	e7d7      	b.n	5bde <dir_register+0x886>
    5c2e:	46c0      	nop			; (mov r8, r8)
    5c30:	00004789 	.word	0x00004789
    5c34:	00004b51 	.word	0x00004b51
    5c38:	00003f01 	.word	0x00003f01
    5c3c:	0001fdfd 	.word	0x0001fdfd
    5c40:	00003dc1 	.word	0x00003dc1

00005c44 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
    5c44:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c46:	46de      	mov	lr, fp
    5c48:	4645      	mov	r5, r8
    5c4a:	4657      	mov	r7, sl
    5c4c:	464e      	mov	r6, r9
    5c4e:	b5e0      	push	{r5, r6, r7, lr}
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    5c50:	780b      	ldrb	r3, [r1, #0]
{
    5c52:	b083      	sub	sp, #12
    5c54:	4683      	mov	fp, r0
    5c56:	000d      	movs	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    5c58:	2b2f      	cmp	r3, #47	; 0x2f
    5c5a:	d100      	bne.n	5c5e <follow_path+0x1a>
    5c5c:	e13f      	b.n	5ede <follow_path+0x29a>
    5c5e:	2b5c      	cmp	r3, #92	; 0x5c
    5c60:	d100      	bne.n	5c64 <follow_path+0x20>
    5c62:	e13c      	b.n	5ede <follow_path+0x29a>
		path++;
	dj->sclust = 0;						/* Start from the root dir */
    5c64:	465b      	mov	r3, fp
    5c66:	2400      	movs	r4, #0
    5c68:	609c      	str	r4, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    5c6a:	782b      	ldrb	r3, [r5, #0]
    5c6c:	2b1f      	cmp	r3, #31
    5c6e:	d800      	bhi.n	5c72 <follow_path+0x2e>
    5c70:	e13d      	b.n	5eee <follow_path+0x2aa>
    5c72:	4bb2      	ldr	r3, [pc, #712]	; (5f3c <follow_path+0x2f8>)
    5c74:	4698      	mov	r8, r3
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    5c76:	7828      	ldrb	r0, [r5, #0]
    5c78:	282f      	cmp	r0, #47	; 0x2f
    5c7a:	d001      	beq.n	5c80 <follow_path+0x3c>
    5c7c:	285c      	cmp	r0, #92	; 0x5c
    5c7e:	d101      	bne.n	5c84 <follow_path+0x40>
    5c80:	3501      	adds	r5, #1
    5c82:	e7f8      	b.n	5c76 <follow_path+0x32>
	lfn = dj->lfn;
    5c84:	465b      	mov	r3, fp
    5c86:	69db      	ldr	r3, [r3, #28]
		w = p[si++];					/* Get a character */
    5c88:	b280      	uxth	r0, r0
	lfn = dj->lfn;
    5c8a:	9300      	str	r3, [sp, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    5c8c:	281f      	cmp	r0, #31
    5c8e:	d92d      	bls.n	5cec <follow_path+0xa8>
    5c90:	282f      	cmp	r0, #47	; 0x2f
    5c92:	d02b      	beq.n	5cec <follow_path+0xa8>
    5c94:	285c      	cmp	r0, #92	; 0x5c
    5c96:	d029      	beq.n	5cec <follow_path+0xa8>
    5c98:	001e      	movs	r6, r3
    5c9a:	4699      	mov	r9, r3
		if (di >= _MAX_LFN)				/* Reject too long name */
    5c9c:	2380      	movs	r3, #128	; 0x80
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    5c9e:	2101      	movs	r1, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    5ca0:	005b      	lsls	r3, r3, #1
    5ca2:	1c6f      	adds	r7, r5, #1
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    5ca4:	2401      	movs	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    5ca6:	469a      	mov	sl, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    5ca8:	47c0      	blx	r8
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    5caa:	2800      	cmp	r0, #0
    5cac:	d01e      	beq.n	5cec <follow_path+0xa8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    5cae:	287f      	cmp	r0, #127	; 0x7f
    5cb0:	d809      	bhi.n	5cc6 <follow_path+0x82>
	while (*str && *str != chr) str++;
    5cb2:	2822      	cmp	r0, #34	; 0x22
    5cb4:	d01a      	beq.n	5cec <follow_path+0xa8>
    5cb6:	232a      	movs	r3, #42	; 0x2a
    5cb8:	4aa1      	ldr	r2, [pc, #644]	; (5f40 <follow_path+0x2fc>)
    5cba:	4298      	cmp	r0, r3
    5cbc:	d016      	beq.n	5cec <follow_path+0xa8>
    5cbe:	3201      	adds	r2, #1
    5cc0:	7813      	ldrb	r3, [r2, #0]
    5cc2:	2b00      	cmp	r3, #0
    5cc4:	d1f9      	bne.n	5cba <follow_path+0x76>
		lfn[di++] = w;					/* Store the Unicode char */
    5cc6:	8030      	strh	r0, [r6, #0]
		w = p[si++];					/* Get a character */
    5cc8:	7838      	ldrb	r0, [r7, #0]
    5cca:	1c63      	adds	r3, r4, #1
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    5ccc:	281f      	cmp	r0, #31
    5cce:	d800      	bhi.n	5cd2 <follow_path+0x8e>
    5cd0:	e0dc      	b.n	5e8c <follow_path+0x248>
    5cd2:	282f      	cmp	r0, #47	; 0x2f
    5cd4:	d012      	beq.n	5cfc <follow_path+0xb8>
    5cd6:	285c      	cmp	r0, #92	; 0x5c
    5cd8:	d010      	beq.n	5cfc <follow_path+0xb8>
    5cda:	3602      	adds	r6, #2
    5cdc:	3701      	adds	r7, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    5cde:	4553      	cmp	r3, sl
    5ce0:	d004      	beq.n	5cec <follow_path+0xa8>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    5ce2:	2101      	movs	r1, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    5ce4:	001c      	movs	r4, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    5ce6:	47c0      	blx	r8
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    5ce8:	2800      	cmp	r0, #0
    5cea:	d1e0      	bne.n	5cae <follow_path+0x6a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    5cec:	2006      	movs	r0, #6
			dj->sclust = LD_CLUST(dir);
		}
	}

	return res;
}
    5cee:	b003      	add	sp, #12
    5cf0:	bc3c      	pop	{r2, r3, r4, r5}
    5cf2:	4690      	mov	r8, r2
    5cf4:	4699      	mov	r9, r3
    5cf6:	46a2      	mov	sl, r4
    5cf8:	46ab      	mov	fp, r5
    5cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    5cfc:	2700      	movs	r7, #0
	*path = &p[si];						/* Return pointer to the next segment */
    5cfe:	18ed      	adds	r5, r5, r3
    5d00:	9a00      	ldr	r2, [sp, #0]
    5d02:	4b90      	ldr	r3, [pc, #576]	; (5f44 <follow_path+0x300>)
    5d04:	4694      	mov	ip, r2
    5d06:	18e3      	adds	r3, r4, r3
    5d08:	005b      	lsls	r3, r3, #1
    5d0a:	4463      	add	r3, ip
		w = lfn[di-1];
    5d0c:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    5d0e:	2a20      	cmp	r2, #32
    5d10:	d001      	beq.n	5d16 <follow_path+0xd2>
    5d12:	2a2e      	cmp	r2, #46	; 0x2e
    5d14:	d104      	bne.n	5d20 <follow_path+0xdc>
		di--;
    5d16:	3c01      	subs	r4, #1
    5d18:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
    5d1a:	2c00      	cmp	r4, #0
    5d1c:	d1f6      	bne.n	5d0c <follow_path+0xc8>
    5d1e:	e7e5      	b.n	5cec <follow_path+0xa8>
	lfn[di] = 0;						/* LFN is created */
    5d20:	2200      	movs	r2, #0
    5d22:	9900      	ldr	r1, [sp, #0]
    5d24:	0063      	lsls	r3, r4, #1
    5d26:	52ca      	strh	r2, [r1, r3]
	mem_set(dj->fn, ' ', 11);
    5d28:	465a      	mov	r2, fp
		*d++ = (BYTE)val;
    5d2a:	2120      	movs	r1, #32
	mem_set(dj->fn, ' ', 11);
    5d2c:	6992      	ldr	r2, [r2, #24]
		*d++ = (BYTE)val;
    5d2e:	2600      	movs	r6, #0
    5d30:	7011      	strb	r1, [r2, #0]
    5d32:	7051      	strb	r1, [r2, #1]
    5d34:	7091      	strb	r1, [r2, #2]
    5d36:	70d1      	strb	r1, [r2, #3]
    5d38:	7111      	strb	r1, [r2, #4]
    5d3a:	7151      	strb	r1, [r2, #5]
    5d3c:	7191      	strb	r1, [r2, #6]
    5d3e:	71d1      	strb	r1, [r2, #7]
    5d40:	7211      	strb	r1, [r2, #8]
    5d42:	7251      	strb	r1, [r2, #9]
    5d44:	7291      	strb	r1, [r2, #10]
    5d46:	464a      	mov	r2, r9
    5d48:	e001      	b.n	5d4e <follow_path+0x10a>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    5d4a:	3601      	adds	r6, #1
    5d4c:	3202      	adds	r2, #2
    5d4e:	8810      	ldrh	r0, [r2, #0]
    5d50:	2820      	cmp	r0, #32
    5d52:	d0fa      	beq.n	5d4a <follow_path+0x106>
    5d54:	282e      	cmp	r0, #46	; 0x2e
    5d56:	d0f8      	beq.n	5d4a <follow_path+0x106>
	if (si) cf |= NS_LOSS | NS_LFN;
    5d58:	2e00      	cmp	r6, #0
    5d5a:	d001      	beq.n	5d60 <follow_path+0x11c>
    5d5c:	2203      	movs	r2, #3
    5d5e:	4317      	orrs	r7, r2
    5d60:	9a00      	ldr	r2, [sp, #0]
    5d62:	3b02      	subs	r3, #2
    5d64:	4694      	mov	ip, r2
    5d66:	4463      	add	r3, ip
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    5d68:	881a      	ldrh	r2, [r3, #0]
    5d6a:	2a2e      	cmp	r2, #46	; 0x2e
    5d6c:	d003      	beq.n	5d76 <follow_path+0x132>
    5d6e:	3c01      	subs	r4, #1
    5d70:	3b02      	subs	r3, #2
    5d72:	2c00      	cmp	r4, #0
    5d74:	d1f8      	bne.n	5d68 <follow_path+0x124>
		dj->fn[i++] = (BYTE)w;
    5d76:	2308      	movs	r3, #8
    5d78:	469a      	mov	sl, r3
    5d7a:	2300      	movs	r3, #0
    5d7c:	4699      	mov	r9, r3
    5d7e:	9301      	str	r3, [sp, #4]
    5d80:	002b      	movs	r3, r5
    5d82:	0025      	movs	r5, r4
    5d84:	464c      	mov	r4, r9
    5d86:	4699      	mov	r9, r3
		w = lfn[si++];					/* Get an LFN char */
    5d88:	3601      	adds	r6, #1
		if (!w) break;					/* Break on end of the LFN */
    5d8a:	2800      	cmp	r0, #0
    5d8c:	d035      	beq.n	5dfa <follow_path+0x1b6>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    5d8e:	2820      	cmp	r0, #32
    5d90:	d022      	beq.n	5dd8 <follow_path+0x194>
    5d92:	282e      	cmp	r0, #46	; 0x2e
    5d94:	d01e      	beq.n	5dd4 <follow_path+0x190>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
    5d96:	4554      	cmp	r4, sl
    5d98:	d224      	bcs.n	5de4 <follow_path+0x1a0>
    5d9a:	42ae      	cmp	r6, r5
    5d9c:	d079      	beq.n	5e92 <follow_path+0x24e>
		if (w >= 0x80) {				/* Non ASCII char */
    5d9e:	287f      	cmp	r0, #127	; 0x7f
    5da0:	d900      	bls.n	5da4 <follow_path+0x160>
    5da2:	e08a      	b.n	5eba <follow_path+0x276>
	while (*str && *str != chr) str++;
    5da4:	282b      	cmp	r0, #43	; 0x2b
    5da6:	d009      	beq.n	5dbc <follow_path+0x178>
    5da8:	232c      	movs	r3, #44	; 0x2c
    5daa:	4a67      	ldr	r2, [pc, #412]	; (5f48 <follow_path+0x304>)
    5dac:	e004      	b.n	5db8 <follow_path+0x174>
    5dae:	3201      	adds	r2, #1
    5db0:	7813      	ldrb	r3, [r2, #0]
    5db2:	2b00      	cmp	r3, #0
    5db4:	d100      	bne.n	5db8 <follow_path+0x174>
    5db6:	e0a6      	b.n	5f06 <follow_path+0x2c2>
    5db8:	4283      	cmp	r3, r0
    5dba:	d1f8      	bne.n	5dae <follow_path+0x16a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    5dbc:	2303      	movs	r3, #3
    5dbe:	205f      	movs	r0, #95	; 0x5f
    5dc0:	431f      	orrs	r7, r3
    5dc2:	b2ff      	uxtb	r7, r7
		dj->fn[i++] = (BYTE)w;
    5dc4:	465b      	mov	r3, fp
    5dc6:	699b      	ldr	r3, [r3, #24]
    5dc8:	5518      	strb	r0, [r3, r4]
    5dca:	3401      	adds	r4, #1
    5dcc:	9a00      	ldr	r2, [sp, #0]
    5dce:	0073      	lsls	r3, r6, #1
    5dd0:	5a98      	ldrh	r0, [r3, r2]
    5dd2:	e7d9      	b.n	5d88 <follow_path+0x144>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    5dd4:	42ae      	cmp	r6, r5
    5dd6:	d003      	beq.n	5de0 <follow_path+0x19c>
			cf |= NS_LOSS | NS_LFN; continue;
    5dd8:	2303      	movs	r3, #3
    5dda:	431f      	orrs	r7, r3
    5ddc:	b2ff      	uxtb	r7, r7
    5dde:	e7f5      	b.n	5dcc <follow_path+0x188>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
    5de0:	4554      	cmp	r4, sl
    5de2:	d356      	bcc.n	5e92 <follow_path+0x24e>
			if (ni == 11) {				/* Long extension */
    5de4:	4653      	mov	r3, sl
    5de6:	2b0b      	cmp	r3, #11
    5de8:	d100      	bne.n	5dec <follow_path+0x1a8>
    5dea:	e0b5      	b.n	5f58 <follow_path+0x314>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    5dec:	42ae      	cmp	r6, r5
    5dee:	d053      	beq.n	5e98 <follow_path+0x254>
    5df0:	2303      	movs	r3, #3
    5df2:	431f      	orrs	r7, r3
    5df4:	b2ff      	uxtb	r7, r7
			if (si > di) break;			/* No extension */
    5df6:	42ae      	cmp	r6, r5
    5df8:	d94e      	bls.n	5e98 <follow_path+0x254>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    5dfa:	465b      	mov	r3, fp
    5dfc:	699b      	ldr	r3, [r3, #24]
    5dfe:	464d      	mov	r5, r9
    5e00:	781a      	ldrb	r2, [r3, #0]
    5e02:	2ae5      	cmp	r2, #229	; 0xe5
    5e04:	d07a      	beq.n	5efc <follow_path+0x2b8>
	if (ni == 8) b <<= 2;
    5e06:	4652      	mov	r2, sl
    5e08:	2a08      	cmp	r2, #8
    5e0a:	d051      	beq.n	5eb0 <follow_path+0x26c>
    5e0c:	220c      	movs	r2, #12
    5e0e:	9901      	ldr	r1, [sp, #4]
    5e10:	400a      	ands	r2, r1
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    5e12:	2a0c      	cmp	r2, #12
    5e14:	d049      	beq.n	5eaa <follow_path+0x266>
    5e16:	43c9      	mvns	r1, r1
    5e18:	0789      	lsls	r1, r1, #30
    5e1a:	d046      	beq.n	5eaa <follow_path+0x266>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    5e1c:	07b9      	lsls	r1, r7, #30
    5e1e:	d406      	bmi.n	5e2e <follow_path+0x1ea>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    5e20:	2103      	movs	r1, #3
    5e22:	9801      	ldr	r0, [sp, #4]
    5e24:	4001      	ands	r1, r0
    5e26:	2901      	cmp	r1, #1
    5e28:	d07a      	beq.n	5f20 <follow_path+0x2dc>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    5e2a:	2a04      	cmp	r2, #4
    5e2c:	d075      	beq.n	5f1a <follow_path+0x2d6>
	dj->fn[NS] = cf;	/* SFN is created */
    5e2e:	72df      	strb	r7, [r3, #11]
	res = dir_sdi(dj, 0);			/* Rewind directory object */
    5e30:	2100      	movs	r1, #0
    5e32:	4658      	mov	r0, fp
    5e34:	4b45      	ldr	r3, [pc, #276]	; (5f4c <follow_path+0x308>)
    5e36:	4798      	blx	r3
	if (res != FR_OK) return res;
    5e38:	2800      	cmp	r0, #0
    5e3a:	d11c      	bne.n	5e76 <follow_path+0x232>
    5e3c:	4b44      	ldr	r3, [pc, #272]	; (5f50 <follow_path+0x30c>)
    5e3e:	4658      	mov	r0, fp
    5e40:	4798      	blx	r3
			ns = *(dj->fn+NS);
    5e42:	465b      	mov	r3, fp
    5e44:	699b      	ldr	r3, [r3, #24]
    5e46:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
    5e48:	2800      	cmp	r0, #0
    5e4a:	d117      	bne.n	5e7c <follow_path+0x238>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    5e4c:	075b      	lsls	r3, r3, #29
    5e4e:	d500      	bpl.n	5e52 <follow_path+0x20e>
    5e50:	e74d      	b.n	5cee <follow_path+0xaa>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    5e52:	465b      	mov	r3, fp
    5e54:	695a      	ldr	r2, [r3, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    5e56:	7ad3      	ldrb	r3, [r2, #11]
    5e58:	06db      	lsls	r3, r3, #27
    5e5a:	d515      	bpl.n	5e88 <follow_path+0x244>
			dj->sclust = LD_CLUST(dir);
    5e5c:	7d51      	ldrb	r1, [r2, #21]
    5e5e:	7d13      	ldrb	r3, [r2, #20]
    5e60:	0209      	lsls	r1, r1, #8
    5e62:	430b      	orrs	r3, r1
    5e64:	7ed1      	ldrb	r1, [r2, #27]
    5e66:	7e92      	ldrb	r2, [r2, #26]
    5e68:	0209      	lsls	r1, r1, #8
    5e6a:	430a      	orrs	r2, r1
    5e6c:	041b      	lsls	r3, r3, #16
    5e6e:	4313      	orrs	r3, r2
    5e70:	465a      	mov	r2, fp
    5e72:	6093      	str	r3, [r2, #8]
			res = create_name(dj, &path);	/* Get a segment */
    5e74:	e6ff      	b.n	5c76 <follow_path+0x32>
			ns = *(dj->fn+NS);
    5e76:	465b      	mov	r3, fp
    5e78:	699b      	ldr	r3, [r3, #24]
    5e7a:	7adb      	ldrb	r3, [r3, #11]
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    5e7c:	2804      	cmp	r0, #4
    5e7e:	d000      	beq.n	5e82 <follow_path+0x23e>
    5e80:	e735      	b.n	5cee <follow_path+0xaa>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    5e82:	4218      	tst	r0, r3
    5e84:	d000      	beq.n	5e88 <follow_path+0x244>
    5e86:	e732      	b.n	5cee <follow_path+0xaa>
				res = FR_NO_PATH; break;
    5e88:	2005      	movs	r0, #5
	return res;
    5e8a:	e730      	b.n	5cee <follow_path+0xaa>
	*path = &p[si];						/* Return pointer to the next segment */
    5e8c:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    5e8e:	2704      	movs	r7, #4
    5e90:	e736      	b.n	5d00 <follow_path+0xbc>
			if (ni == 11) {				/* Long extension */
    5e92:	4653      	mov	r3, sl
    5e94:	2b0b      	cmp	r3, #11
    5e96:	d05f      	beq.n	5f58 <follow_path+0x314>
			b <<= 2; continue;
    5e98:	9b01      	ldr	r3, [sp, #4]
    5e9a:	002e      	movs	r6, r5
    5e9c:	009b      	lsls	r3, r3, #2
    5e9e:	b2db      	uxtb	r3, r3
    5ea0:	9301      	str	r3, [sp, #4]
			si = di; i = 8; ni = 11;	/* Enter extension section */
    5ea2:	230b      	movs	r3, #11
    5ea4:	2408      	movs	r4, #8
    5ea6:	469a      	mov	sl, r3
    5ea8:	e790      	b.n	5dcc <follow_path+0x188>
		cf |= NS_LFN;
    5eaa:	2102      	movs	r1, #2
    5eac:	430f      	orrs	r7, r1
    5eae:	e7b5      	b.n	5e1c <follow_path+0x1d8>
	if (ni == 8) b <<= 2;
    5eb0:	9a01      	ldr	r2, [sp, #4]
    5eb2:	0092      	lsls	r2, r2, #2
    5eb4:	b2d2      	uxtb	r2, r2
    5eb6:	9201      	str	r2, [sp, #4]
    5eb8:	e7a8      	b.n	5e0c <follow_path+0x1c8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    5eba:	2100      	movs	r1, #0
    5ebc:	47c0      	blx	r8
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    5ebe:	2800      	cmp	r0, #0
    5ec0:	d00a      	beq.n	5ed8 <follow_path+0x294>
    5ec2:	4b24      	ldr	r3, [pc, #144]	; (5f54 <follow_path+0x310>)
    5ec4:	469c      	mov	ip, r3
			cf |= NS_LFN;				/* Force create LFN entry */
    5ec6:	2302      	movs	r3, #2
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    5ec8:	4460      	add	r0, ip
    5eca:	3880      	subs	r0, #128	; 0x80
    5ecc:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
    5ece:	431f      	orrs	r7, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    5ed0:	2800      	cmp	r0, #0
    5ed2:	d100      	bne.n	5ed6 <follow_path+0x292>
    5ed4:	e772      	b.n	5dbc <follow_path+0x178>
    5ed6:	e765      	b.n	5da4 <follow_path+0x160>
			cf |= NS_LFN;				/* Force create LFN entry */
    5ed8:	2302      	movs	r3, #2
    5eda:	431f      	orrs	r7, r3
    5edc:	e76e      	b.n	5dbc <follow_path+0x178>
	dj->sclust = 0;						/* Start from the root dir */
    5ede:	465b      	mov	r3, fp
    5ee0:	2400      	movs	r4, #0
		path++;
    5ee2:	3501      	adds	r5, #1
	dj->sclust = 0;						/* Start from the root dir */
    5ee4:	609c      	str	r4, [r3, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    5ee6:	782b      	ldrb	r3, [r5, #0]
    5ee8:	2b1f      	cmp	r3, #31
    5eea:	d900      	bls.n	5eee <follow_path+0x2aa>
    5eec:	e6c1      	b.n	5c72 <follow_path+0x2e>
		res = dir_sdi(dj, 0);
    5eee:	4b17      	ldr	r3, [pc, #92]	; (5f4c <follow_path+0x308>)
    5ef0:	2100      	movs	r1, #0
    5ef2:	4658      	mov	r0, fp
    5ef4:	4798      	blx	r3
		dj->dir = 0;
    5ef6:	465b      	mov	r3, fp
    5ef8:	615c      	str	r4, [r3, #20]
    5efa:	e6f8      	b.n	5cee <follow_path+0xaa>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    5efc:	3ae0      	subs	r2, #224	; 0xe0
    5efe:	701a      	strb	r2, [r3, #0]
    5f00:	465b      	mov	r3, fp
    5f02:	699b      	ldr	r3, [r3, #24]
    5f04:	e77f      	b.n	5e06 <follow_path+0x1c2>
				if (IsUpper(w)) {		/* ASCII large capital */
    5f06:	0003      	movs	r3, r0
    5f08:	3b41      	subs	r3, #65	; 0x41
    5f0a:	2b19      	cmp	r3, #25
    5f0c:	d80b      	bhi.n	5f26 <follow_path+0x2e2>
					b |= 2;
    5f0e:	2302      	movs	r3, #2
    5f10:	9a01      	ldr	r2, [sp, #4]
    5f12:	b2c0      	uxtb	r0, r0
    5f14:	431a      	orrs	r2, r3
    5f16:	9201      	str	r2, [sp, #4]
    5f18:	e754      	b.n	5dc4 <follow_path+0x180>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    5f1a:	3204      	adds	r2, #4
    5f1c:	4317      	orrs	r7, r2
    5f1e:	e786      	b.n	5e2e <follow_path+0x1ea>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    5f20:	310f      	adds	r1, #15
    5f22:	430f      	orrs	r7, r1
    5f24:	e781      	b.n	5e2a <follow_path+0x1e6>
					if (IsLower(w)) {	/* ASCII small capital */
    5f26:	0003      	movs	r3, r0
    5f28:	3b61      	subs	r3, #97	; 0x61
    5f2a:	2b19      	cmp	r3, #25
    5f2c:	d804      	bhi.n	5f38 <follow_path+0x2f4>
						b |= 1; w -= 0x20;
    5f2e:	2301      	movs	r3, #1
    5f30:	9a01      	ldr	r2, [sp, #4]
    5f32:	3820      	subs	r0, #32
    5f34:	431a      	orrs	r2, r3
    5f36:	9201      	str	r2, [sp, #4]
    5f38:	b2c0      	uxtb	r0, r0
    5f3a:	e743      	b.n	5dc4 <follow_path+0x180>
    5f3c:	00006f69 	.word	0x00006f69
    5f40:	000247ad 	.word	0x000247ad
    5f44:	7fffffff 	.word	0x7fffffff
    5f48:	000247b9 	.word	0x000247b9
    5f4c:	00004aa1 	.word	0x00004aa1
    5f50:	00005005 	.word	0x00005005
    5f54:	0002472c 	.word	0x0002472c
				cf |= NS_LOSS | NS_LFN; break;
    5f58:	2303      	movs	r3, #3
    5f5a:	431f      	orrs	r7, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    5f5c:	465b      	mov	r3, fp
    5f5e:	699b      	ldr	r3, [r3, #24]
    5f60:	464d      	mov	r5, r9
    5f62:	781a      	ldrb	r2, [r3, #0]
    5f64:	2ae5      	cmp	r2, #229	; 0xe5
    5f66:	d000      	beq.n	5f6a <follow_path+0x326>
    5f68:	e750      	b.n	5e0c <follow_path+0x1c8>
    5f6a:	3ae0      	subs	r2, #224	; 0xe0
    5f6c:	701a      	strb	r2, [r3, #0]
    5f6e:	465b      	mov	r3, fp
    5f70:	699b      	ldr	r3, [r3, #24]
    5f72:	e74b      	b.n	5e0c <follow_path+0x1c8>

00005f74 <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    5f74:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    5f76:	2800      	cmp	r0, #0
    5f78:	d001      	beq.n	5f7e <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
    5f7a:	0018      	movs	r0, r3
    5f7c:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
    5f7e:	4b06      	ldr	r3, [pc, #24]	; (5f98 <f_mount+0x24>)
    5f80:	681a      	ldr	r2, [r3, #0]
	if (rfs) {
    5f82:	2a00      	cmp	r2, #0
    5f84:	d000      	beq.n	5f88 <f_mount+0x14>
		rfs->fs_type = 0;		/* Clear old fs object */
    5f86:	7010      	strb	r0, [r2, #0]
	if (fs) {
    5f88:	2900      	cmp	r1, #0
    5f8a:	d001      	beq.n	5f90 <f_mount+0x1c>
		fs->fs_type = 0;		/* Clear new fs object */
    5f8c:	2200      	movs	r2, #0
    5f8e:	700a      	strb	r2, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
    5f90:	6019      	str	r1, [r3, #0]
	return FR_OK;
    5f92:	2300      	movs	r3, #0
    5f94:	e7f1      	b.n	5f7a <f_mount+0x6>
    5f96:	46c0      	nop			; (mov r8, r8)
    5f98:	20000e68 	.word	0x20000e68

00005f9c <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    5f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f9e:	4657      	mov	r7, sl
    5fa0:	464e      	mov	r6, r9
    5fa2:	4645      	mov	r5, r8
    5fa4:	46de      	mov	lr, fp
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    5fa6:	2300      	movs	r3, #0
{
    5fa8:	b5e0      	push	{r5, r6, r7, lr}

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    5faa:	261f      	movs	r6, #31
	fp->fs = 0;			/* Clear file object */
    5fac:	6003      	str	r3, [r0, #0]
{
    5fae:	4cbc      	ldr	r4, [pc, #752]	; (62a0 <f_open+0x304>)
	vol = p[0] - '0';					/* Is there a drive number? */
    5fb0:	780b      	ldrb	r3, [r1, #0]
{
    5fb2:	44a5      	add	sp, r4
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    5fb4:	4016      	ands	r6, r2
	vol = p[0] - '0';					/* Is there a drive number? */
    5fb6:	3b30      	subs	r3, #48	; 0x30
{
    5fb8:	0005      	movs	r5, r0
    5fba:	000c      	movs	r4, r1
    5fbc:	0017      	movs	r7, r2
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    5fbe:	9601      	str	r6, [sp, #4]
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    5fc0:	2b09      	cmp	r3, #9
    5fc2:	d800      	bhi.n	5fc6 <f_open+0x2a>
    5fc4:	e072      	b.n	60ac <f_open+0x110>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    5fc6:	4bb7      	ldr	r3, [pc, #732]	; (62a4 <f_open+0x308>)
    5fc8:	681b      	ldr	r3, [r3, #0]
    5fca:	4699      	mov	r9, r3
    5fcc:	9309      	str	r3, [sp, #36]	; 0x24
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    5fce:	2b00      	cmp	r3, #0
    5fd0:	d100      	bne.n	5fd4 <f_open+0x38>
    5fd2:	e0a2      	b.n	611a <f_open+0x17e>
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    5fd4:	231e      	movs	r3, #30
    5fd6:	403b      	ands	r3, r7
    5fd8:	469a      	mov	sl, r3
	if (fs->fs_type) {					/* If the logical drive has been mounted */
    5fda:	464b      	mov	r3, r9
    5fdc:	781b      	ldrb	r3, [r3, #0]
    5fde:	2b00      	cmp	r3, #0
    5fe0:	d100      	bne.n	5fe4 <f_open+0x48>
    5fe2:	e087      	b.n	60f4 <f_open+0x158>
		stat = disk_status(fs->drv);
    5fe4:	464b      	mov	r3, r9
    5fe6:	7858      	ldrb	r0, [r3, #1]
    5fe8:	4baf      	ldr	r3, [pc, #700]	; (62a8 <f_open+0x30c>)
    5fea:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    5fec:	07c3      	lsls	r3, r0, #31
    5fee:	d500      	bpl.n	5ff2 <f_open+0x56>
    5ff0:	e080      	b.n	60f4 <f_open+0x158>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    5ff2:	4653      	mov	r3, sl
    5ff4:	2b00      	cmp	r3, #0
    5ff6:	d002      	beq.n	5ffe <f_open+0x62>
    5ff8:	0743      	lsls	r3, r0, #29
    5ffa:	d500      	bpl.n	5ffe <f_open+0x62>
    5ffc:	e08a      	b.n	6114 <f_open+0x178>
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    5ffe:	ab09      	add	r3, sp, #36	; 0x24
    6000:	4699      	mov	r9, r3
    6002:	aa06      	add	r2, sp, #24
    6004:	920f      	str	r2, [sp, #60]	; 0x3c
    6006:	464a      	mov	r2, r9
    6008:	ab12      	add	r3, sp, #72	; 0x48
    600a:	61d3      	str	r3, [r2, #28]
	if (res == FR_OK)
		res = follow_path(&dj, path);	/* Follow the file path */
    600c:	0021      	movs	r1, r4
    600e:	4ba7      	ldr	r3, [pc, #668]	; (62ac <f_open+0x310>)
    6010:	4648      	mov	r0, r9
    6012:	4798      	blx	r3
	dir = dj.dir;
    6014:	464b      	mov	r3, r9
		res = follow_path(&dj, path);	/* Follow the file path */
    6016:	4680      	mov	r8, r0
	dir = dj.dir;
    6018:	695c      	ldr	r4, [r3, #20]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
    601a:	2800      	cmp	r0, #0
    601c:	d000      	beq.n	6020 <f_open+0x84>
    601e:	e2e5      	b.n	65ec <f_open+0x650>
		if (!dir)	/* Current dir itself */
    6020:	2c00      	cmp	r4, #0
    6022:	d100      	bne.n	6026 <f_open+0x8a>
    6024:	e092      	b.n	614c <f_open+0x1b0>
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    6026:	231c      	movs	r3, #28
    6028:	423b      	tst	r3, r7
    602a:	d100      	bne.n	602e <f_open+0x92>
    602c:	e078      	b.n	6120 <f_open+0x184>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
			dir = dj.dir;					/* New entry */
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
				res = FR_DENIED;
    602e:	2107      	movs	r1, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    6030:	2211      	movs	r2, #17
    6032:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_DENIED;
    6034:	4688      	mov	r8, r1
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    6036:	421a      	tst	r2, r3
    6038:	d12e      	bne.n	6098 <f_open+0xfc>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
					res = FR_EXIST;
    603a:	2308      	movs	r3, #8
    603c:	4698      	mov	r8, r3
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    603e:	077b      	lsls	r3, r7, #29
    6040:	d42a      	bmi.n	6098 <f_open+0xfc>
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    6042:	9b01      	ldr	r3, [sp, #4]
    6044:	071b      	lsls	r3, r3, #28
    6046:	d500      	bpl.n	604a <f_open+0xae>
    6048:	e083      	b.n	6152 <f_open+0x1b6>
    604a:	9f09      	ldr	r7, [sp, #36]	; 0x24
    604c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    604e:	4698      	mov	r8, r3
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
			mode |= FA__WRITTEN;
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    6050:	4643      	mov	r3, r8
    6052:	61eb      	str	r3, [r5, #28]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
    6054:	466b      	mov	r3, sp
    6056:	791b      	ldrb	r3, [r3, #4]
		fp->dir_ptr = dir;
    6058:	622c      	str	r4, [r5, #32]
		fp->flag = mode;					/* File access mode */
    605a:	71ab      	strb	r3, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    605c:	7d62      	ldrb	r2, [r4, #21]
    605e:	7d23      	ldrb	r3, [r4, #20]
    6060:	7ee1      	ldrb	r1, [r4, #27]
    6062:	0212      	lsls	r2, r2, #8
    6064:	4313      	orrs	r3, r2
    6066:	7ea2      	ldrb	r2, [r4, #26]
    6068:	0209      	lsls	r1, r1, #8
    606a:	430a      	orrs	r2, r1
    606c:	041b      	lsls	r3, r3, #16
    606e:	4313      	orrs	r3, r2
    6070:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    6072:	7f62      	ldrb	r2, [r4, #29]
    6074:	7f23      	ldrb	r3, [r4, #28]
    6076:	0212      	lsls	r2, r2, #8
    6078:	431a      	orrs	r2, r3
    607a:	7fa3      	ldrb	r3, [r4, #30]
    607c:	041b      	lsls	r3, r3, #16
    607e:	431a      	orrs	r2, r3
    6080:	7fe3      	ldrb	r3, [r4, #31]
		fp->fptr = 0;						/* File pointer */
		fp->dsect = 0;
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    6082:	602f      	str	r7, [r5, #0]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    6084:	061b      	lsls	r3, r3, #24
    6086:	4313      	orrs	r3, r2
    6088:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
    608a:	2300      	movs	r3, #0
    608c:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
    608e:	61ab      	str	r3, [r5, #24]
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    6090:	88fb      	ldrh	r3, [r7, #6]
    6092:	80ab      	strh	r3, [r5, #4]
    6094:	2300      	movs	r3, #0
    6096:	4698      	mov	r8, r3
	}

	LEAVE_FF(dj.fs, res);
}
    6098:	4640      	mov	r0, r8
    609a:	2393      	movs	r3, #147	; 0x93
    609c:	009b      	lsls	r3, r3, #2
    609e:	449d      	add	sp, r3
    60a0:	bc3c      	pop	{r2, r3, r4, r5}
    60a2:	4690      	mov	r8, r2
    60a4:	4699      	mov	r9, r3
    60a6:	46a2      	mov	sl, r4
    60a8:	46ab      	mov	fp, r5
    60aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    60ac:	784a      	ldrb	r2, [r1, #1]
    60ae:	2a3a      	cmp	r2, #58	; 0x3a
    60b0:	d000      	beq.n	60b4 <f_open+0x118>
    60b2:	e788      	b.n	5fc6 <f_open+0x2a>
		return FR_INVALID_DRIVE;
    60b4:	3a2f      	subs	r2, #47	; 0x2f
    60b6:	4690      	mov	r8, r2
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    60b8:	2b00      	cmp	r3, #0
    60ba:	d100      	bne.n	60be <f_open+0x122>
    60bc:	e29b      	b.n	65f6 <f_open+0x65a>
	INIT_BUF(dj);
    60be:	ab09      	add	r3, sp, #36	; 0x24
    60c0:	4699      	mov	r9, r3
    60c2:	aa06      	add	r2, sp, #24
    60c4:	920f      	str	r2, [sp, #60]	; 0x3c
    60c6:	464a      	mov	r2, r9
    60c8:	ab12      	add	r3, sp, #72	; 0x48
    60ca:	61d3      	str	r3, [r2, #28]
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    60cc:	231c      	movs	r3, #28
    60ce:	423b      	tst	r3, r7
    60d0:	d0e2      	beq.n	6098 <f_open+0xfc>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    60d2:	4643      	mov	r3, r8
    60d4:	2b04      	cmp	r3, #4
    60d6:	d1df      	bne.n	6098 <f_open+0xfc>
				res = dir_register(&dj);
    60d8:	4648      	mov	r0, r9
    60da:	4b75      	ldr	r3, [pc, #468]	; (62b0 <f_open+0x314>)
    60dc:	4798      	blx	r3
    60de:	ab09      	add	r3, sp, #36	; 0x24
    60e0:	4699      	mov	r9, r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    60e2:	2308      	movs	r3, #8
    60e4:	9a01      	ldr	r2, [sp, #4]
				res = dir_register(&dj);
    60e6:	4680      	mov	r8, r0
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    60e8:	431a      	orrs	r2, r3
    60ea:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    60ec:	9201      	str	r2, [sp, #4]
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    60ee:	2800      	cmp	r0, #0
    60f0:	d0a7      	beq.n	6042 <f_open+0xa6>
    60f2:	e7d1      	b.n	6098 <f_open+0xfc>
	fs->fs_type = 0;					/* Clear the file system object */
    60f4:	2300      	movs	r3, #0
    60f6:	464a      	mov	r2, r9
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    60f8:	2000      	movs	r0, #0
	fs->fs_type = 0;					/* Clear the file system object */
    60fa:	7013      	strb	r3, [r2, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    60fc:	7053      	strb	r3, [r2, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    60fe:	4b6d      	ldr	r3, [pc, #436]	; (62b4 <f_open+0x318>)
    6100:	4798      	blx	r3
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    6102:	2303      	movs	r3, #3
    6104:	4698      	mov	r8, r3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    6106:	07c3      	lsls	r3, r0, #31
    6108:	d4d9      	bmi.n	60be <f_open+0x122>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    610a:	4653      	mov	r3, sl
    610c:	2b00      	cmp	r3, #0
    610e:	d073      	beq.n	61f8 <f_open+0x25c>
    6110:	0743      	lsls	r3, r0, #29
    6112:	d571      	bpl.n	61f8 <f_open+0x25c>
				return FR_WRITE_PROTECTED;
    6114:	230a      	movs	r3, #10
    6116:	4698      	mov	r8, r3
    6118:	e7d1      	b.n	60be <f_open+0x122>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    611a:	230c      	movs	r3, #12
    611c:	4698      	mov	r8, r3
    611e:	e7ce      	b.n	60be <f_open+0x122>
				res = FR_NO_FILE;
    6120:	2204      	movs	r2, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    6122:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
    6124:	4690      	mov	r8, r2
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    6126:	06da      	lsls	r2, r3, #27
    6128:	d4b6      	bmi.n	6098 <f_open+0xfc>
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    612a:	07ba      	lsls	r2, r7, #30
    612c:	d503      	bpl.n	6136 <f_open+0x19a>
				res = FR_DENIED;
    612e:	2207      	movs	r2, #7
    6130:	4690      	mov	r8, r2
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    6132:	07db      	lsls	r3, r3, #31
    6134:	d4b0      	bmi.n	6098 <f_open+0xfc>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    6136:	073b      	lsls	r3, r7, #28
    6138:	d400      	bmi.n	613c <f_open+0x1a0>
    613a:	e786      	b.n	604a <f_open+0xae>
    613c:	9f09      	ldr	r7, [sp, #36]	; 0x24
    613e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6140:	4698      	mov	r8, r3
			mode |= FA__WRITTEN;
    6142:	2320      	movs	r3, #32
    6144:	9a01      	ldr	r2, [sp, #4]
    6146:	431a      	orrs	r2, r3
    6148:	9201      	str	r2, [sp, #4]
    614a:	e781      	b.n	6050 <f_open+0xb4>
			res = FR_INVALID_NAME;
    614c:	2306      	movs	r3, #6
    614e:	4698      	mov	r8, r3
    6150:	e7a2      	b.n	6098 <f_open+0xfc>
			dw = get_fattime();					/* Created time */
    6152:	4b59      	ldr	r3, [pc, #356]	; (62b8 <f_open+0x31c>)
    6154:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
    6156:	0a03      	lsrs	r3, r0, #8
    6158:	73e3      	strb	r3, [r4, #15]
    615a:	0c03      	lsrs	r3, r0, #16
    615c:	7423      	strb	r3, [r4, #16]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    615e:	2300      	movs	r3, #0
			cl = LD_CLUST(dir);					/* Get start cluster */
    6160:	7d61      	ldrb	r1, [r4, #21]
    6162:	7d22      	ldrb	r2, [r4, #20]
			ST_DWORD(dir+DIR_CrtTime, dw);
    6164:	73a0      	strb	r0, [r4, #14]
    6166:	0e00      	lsrs	r0, r0, #24
    6168:	7460      	strb	r0, [r4, #17]
			cl = LD_CLUST(dir);					/* Get start cluster */
    616a:	0209      	lsls	r1, r1, #8
    616c:	7ee0      	ldrb	r0, [r4, #27]
    616e:	430a      	orrs	r2, r1
    6170:	7ea1      	ldrb	r1, [r4, #26]
    6172:	0200      	lsls	r0, r0, #8
    6174:	0412      	lsls	r2, r2, #16
    6176:	4301      	orrs	r1, r0
			dj.fs->wflag = 1;
    6178:	9f09      	ldr	r7, [sp, #36]	; 0x24
			dir[DIR_Attr] = 0;					/* Reset attribute */
    617a:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    617c:	7723      	strb	r3, [r4, #28]
    617e:	7763      	strb	r3, [r4, #29]
    6180:	77a3      	strb	r3, [r4, #30]
    6182:	77e3      	strb	r3, [r4, #31]
			ST_CLUST(dir, 0);					/* cluster = 0 */
    6184:	76a3      	strb	r3, [r4, #26]
    6186:	76e3      	strb	r3, [r4, #27]
    6188:	7523      	strb	r3, [r4, #20]
    618a:	7563      	strb	r3, [r4, #21]
			cl = LD_CLUST(dir);					/* Get start cluster */
    618c:	430a      	orrs	r2, r1
			dj.fs->wflag = 1;
    618e:	3301      	adds	r3, #1
			cl = LD_CLUST(dir);					/* Get start cluster */
    6190:	4693      	mov	fp, r2
			dj.fs->wflag = 1;
    6192:	713b      	strb	r3, [r7, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    6194:	2a00      	cmp	r2, #0
    6196:	d0d2      	beq.n	613e <f_open+0x1a2>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    6198:	2a01      	cmp	r2, #1
    619a:	d04c      	beq.n	6236 <f_open+0x29a>
    619c:	2302      	movs	r3, #2
    619e:	4698      	mov	r8, r3
    61a0:	69bb      	ldr	r3, [r7, #24]
    61a2:	429a      	cmp	r2, r3
    61a4:	d300      	bcc.n	61a8 <f_open+0x20c>
    61a6:	e777      	b.n	6098 <f_open+0xfc>
				dw = dj.fs->winsect;
    61a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    61aa:	0011      	movs	r1, r2
    61ac:	469a      	mov	sl, r3
    61ae:	0038      	movs	r0, r7
    61b0:	4b42      	ldr	r3, [pc, #264]	; (62bc <f_open+0x320>)
    61b2:	4798      	blx	r3
    61b4:	4680      	mov	r8, r0
				if (res == FR_OK) {
    61b6:	2800      	cmp	r0, #0
    61b8:	d000      	beq.n	61bc <f_open+0x220>
    61ba:	e76d      	b.n	6098 <f_open+0xfc>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    61bc:	464b      	mov	r3, r9
    61be:	681f      	ldr	r7, [r3, #0]
    61c0:	465b      	mov	r3, fp
    61c2:	3b01      	subs	r3, #1
    61c4:	60fb      	str	r3, [r7, #12]
	wsect = fs->winsect;
    61c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    61c8:	4698      	mov	r8, r3
	if (wsect != sector) {	/* Changed current window */
    61ca:	459a      	cmp	sl, r3
    61cc:	d0b9      	beq.n	6142 <f_open+0x1a6>
		if (fs->wflag) {	/* Write back dirty window if needed */
    61ce:	793b      	ldrb	r3, [r7, #4]
    61d0:	2b00      	cmp	r3, #0
    61d2:	d133      	bne.n	623c <f_open+0x2a0>
		if (sector) {
    61d4:	4653      	mov	r3, sl
    61d6:	2b00      	cmp	r3, #0
    61d8:	d0b0      	beq.n	613c <f_open+0x1a0>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    61da:	0039      	movs	r1, r7
    61dc:	7878      	ldrb	r0, [r7, #1]
    61de:	2301      	movs	r3, #1
    61e0:	4652      	mov	r2, sl
    61e2:	3130      	adds	r1, #48	; 0x30
    61e4:	4e36      	ldr	r6, [pc, #216]	; (62c0 <f_open+0x324>)
    61e6:	47b0      	blx	r6
    61e8:	2800      	cmp	r0, #0
    61ea:	d155      	bne.n	6298 <f_open+0x2fc>
			fs->winsect = sector;
    61ec:	4653      	mov	r3, sl
    61ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    61f0:	9f09      	ldr	r7, [sp, #36]	; 0x24
    61f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    61f4:	4698      	mov	r8, r3
    61f6:	e7a4      	b.n	6142 <f_open+0x1a6>
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    61f8:	2330      	movs	r3, #48	; 0x30
    61fa:	444b      	add	r3, r9
    61fc:	469b      	mov	fp, r3
    61fe:	464b      	mov	r3, r9
    6200:	4e2f      	ldr	r6, [pc, #188]	; (62c0 <f_open+0x324>)
    6202:	7858      	ldrb	r0, [r3, #1]
    6204:	2200      	movs	r2, #0
    6206:	2301      	movs	r3, #1
    6208:	4659      	mov	r1, fp
    620a:	47b0      	blx	r6
	if (fmt == 3) return FR_DISK_ERR;
    620c:	2301      	movs	r3, #1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    620e:	46b2      	mov	sl, r6
	if (fmt == 3) return FR_DISK_ERR;
    6210:	4698      	mov	r8, r3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    6212:	2800      	cmp	r0, #0
    6214:	d000      	beq.n	6218 <f_open+0x27c>
    6216:	e752      	b.n	60be <f_open+0x122>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    6218:	464b      	mov	r3, r9
    621a:	4a2a      	ldr	r2, [pc, #168]	; (62c4 <f_open+0x328>)
    621c:	492a      	ldr	r1, [pc, #168]	; (62c8 <f_open+0x32c>)
    621e:	5c9a      	ldrb	r2, [r3, r2]
    6220:	5c5b      	ldrb	r3, [r3, r1]
    6222:	0212      	lsls	r2, r2, #8
    6224:	4313      	orrs	r3, r2
    6226:	4a29      	ldr	r2, [pc, #164]	; (62cc <f_open+0x330>)
    6228:	b21b      	sxth	r3, r3
    622a:	001e      	movs	r6, r3
    622c:	4293      	cmp	r3, r2
    622e:	d051      	beq.n	62d4 <f_open+0x338>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    6230:	230d      	movs	r3, #13
    6232:	4698      	mov	r8, r3
    6234:	e743      	b.n	60be <f_open+0x122>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    6236:	2302      	movs	r3, #2
    6238:	4698      	mov	r8, r3
    623a:	e72d      	b.n	6098 <f_open+0xfc>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    623c:	2330      	movs	r3, #48	; 0x30
    623e:	469c      	mov	ip, r3
    6240:	44bc      	add	ip, r7
    6242:	4663      	mov	r3, ip
    6244:	4e22      	ldr	r6, [pc, #136]	; (62d0 <f_open+0x334>)
    6246:	9302      	str	r3, [sp, #8]
    6248:	4661      	mov	r1, ip
    624a:	7878      	ldrb	r0, [r7, #1]
    624c:	2301      	movs	r3, #1
    624e:	4642      	mov	r2, r8
    6250:	46b3      	mov	fp, r6
    6252:	47b0      	blx	r6
    6254:	2800      	cmp	r0, #0
    6256:	d11f      	bne.n	6298 <f_open+0x2fc>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    6258:	69fb      	ldr	r3, [r7, #28]
    625a:	6a3a      	ldr	r2, [r7, #32]
			fs->wflag = 0;
    625c:	7138      	strb	r0, [r7, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    625e:	18d2      	adds	r2, r2, r3
    6260:	4590      	cmp	r8, r2
    6262:	d2b7      	bcs.n	61d4 <f_open+0x238>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    6264:	78fa      	ldrb	r2, [r7, #3]
    6266:	4691      	mov	r9, r2
    6268:	2a01      	cmp	r2, #1
    626a:	d9b3      	bls.n	61d4 <f_open+0x238>
    626c:	002a      	movs	r2, r5
    626e:	9e01      	ldr	r6, [sp, #4]
    6270:	4645      	mov	r5, r8
    6272:	46a0      	mov	r8, r4
    6274:	464c      	mov	r4, r9
    6276:	4691      	mov	r9, r2
    6278:	e000      	b.n	627c <f_open+0x2e0>
    627a:	69fb      	ldr	r3, [r7, #28]
					wsect += fs->fsize;
    627c:	18ed      	adds	r5, r5, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    627e:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    6280:	7878      	ldrb	r0, [r7, #1]
    6282:	2301      	movs	r3, #1
    6284:	002a      	movs	r2, r5
    6286:	9902      	ldr	r1, [sp, #8]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    6288:	b2e4      	uxtb	r4, r4
					disk_write(fs->drv, fs->win, wsect, 1);
    628a:	47d8      	blx	fp
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    628c:	2c01      	cmp	r4, #1
    628e:	d1f4      	bne.n	627a <f_open+0x2de>
    6290:	9601      	str	r6, [sp, #4]
    6292:	4644      	mov	r4, r8
    6294:	464d      	mov	r5, r9
    6296:	e79d      	b.n	61d4 <f_open+0x238>
				return FR_DISK_ERR;
    6298:	2301      	movs	r3, #1
    629a:	4698      	mov	r8, r3
    629c:	e6fc      	b.n	6098 <f_open+0xfc>
    629e:	46c0      	nop			; (mov r8, r8)
    62a0:	fffffdb4 	.word	0xfffffdb4
    62a4:	20000e68 	.word	0x20000e68
    62a8:	00003d1d 	.word	0x00003d1d
    62ac:	00005c45 	.word	0x00005c45
    62b0:	00005359 	.word	0x00005359
    62b4:	00003ce9 	.word	0x00003ce9
    62b8:	00003eb1 	.word	0x00003eb1
    62bc:	00004431 	.word	0x00004431
    62c0:	00003d3d 	.word	0x00003d3d
    62c4:	0000022f 	.word	0x0000022f
    62c8:	0000022e 	.word	0x0000022e
    62cc:	ffffaa55 	.word	0xffffaa55
    62d0:	00003dc1 	.word	0x00003dc1
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    62d4:	2366      	movs	r3, #102	; 0x66
    62d6:	444b      	add	r3, r9
    62d8:	881a      	ldrh	r2, [r3, #0]
    62da:	9304      	str	r3, [sp, #16]
    62dc:	885b      	ldrh	r3, [r3, #2]
    62de:	041b      	lsls	r3, r3, #16
    62e0:	4313      	orrs	r3, r2
    62e2:	4ac6      	ldr	r2, [pc, #792]	; (65fc <f_open+0x660>)
    62e4:	021b      	lsls	r3, r3, #8
    62e6:	0a1b      	lsrs	r3, r3, #8
    62e8:	4293      	cmp	r3, r2
    62ea:	d100      	bne.n	62ee <f_open+0x352>
    62ec:	e103      	b.n	64f6 <f_open+0x55a>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    62ee:	464b      	mov	r3, r9
    62f0:	2282      	movs	r2, #130	; 0x82
    62f2:	5a9a      	ldrh	r2, [r3, r2]
    62f4:	2382      	movs	r3, #130	; 0x82
    62f6:	444b      	add	r3, r9
    62f8:	9302      	str	r3, [sp, #8]
    62fa:	885b      	ldrh	r3, [r3, #2]
    62fc:	041b      	lsls	r3, r3, #16
    62fe:	4313      	orrs	r3, r2
    6300:	4abe      	ldr	r2, [pc, #760]	; (65fc <f_open+0x660>)
    6302:	021b      	lsls	r3, r3, #8
    6304:	0a1b      	lsrs	r3, r3, #8
    6306:	4293      	cmp	r3, r2
    6308:	d100      	bne.n	630c <f_open+0x370>
    630a:	e0f4      	b.n	64f6 <f_open+0x55a>
		if (tbl[4]) {						/* Is the partition existing? */
    630c:	23f9      	movs	r3, #249	; 0xf9
    630e:	464a      	mov	r2, r9
    6310:	005b      	lsls	r3, r3, #1
    6312:	5cd3      	ldrb	r3, [r2, r3]
    6314:	2b00      	cmp	r3, #0
    6316:	d08b      	beq.n	6230 <f_open+0x294>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    6318:	4649      	mov	r1, r9
    631a:	23fb      	movs	r3, #251	; 0xfb
    631c:	464a      	mov	r2, r9
    631e:	31f7      	adds	r1, #247	; 0xf7
    6320:	31ff      	adds	r1, #255	; 0xff
    6322:	005b      	lsls	r3, r3, #1
    6324:	5cd3      	ldrb	r3, [r2, r3]
    6326:	784a      	ldrb	r2, [r1, #1]
    6328:	0212      	lsls	r2, r2, #8
    632a:	4313      	orrs	r3, r2
    632c:	788a      	ldrb	r2, [r1, #2]
    632e:	0412      	lsls	r2, r2, #16
    6330:	431a      	orrs	r2, r3
    6332:	78cb      	ldrb	r3, [r1, #3]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    6334:	4659      	mov	r1, fp
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    6336:	061b      	lsls	r3, r3, #24
    6338:	4313      	orrs	r3, r2
    633a:	9303      	str	r3, [sp, #12]
    633c:	001a      	movs	r2, r3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    633e:	464b      	mov	r3, r9
    6340:	7858      	ldrb	r0, [r3, #1]
    6342:	2301      	movs	r3, #1
    6344:	47d0      	blx	sl
    6346:	2800      	cmp	r0, #0
    6348:	d000      	beq.n	634c <f_open+0x3b0>
    634a:	e6a5      	b.n	6098 <f_open+0xfc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    634c:	464b      	mov	r3, r9
    634e:	4aac      	ldr	r2, [pc, #688]	; (6600 <f_open+0x664>)
    6350:	49ac      	ldr	r1, [pc, #688]	; (6604 <f_open+0x668>)
    6352:	5c9a      	ldrb	r2, [r3, r2]
    6354:	5c5b      	ldrb	r3, [r3, r1]
    6356:	0212      	lsls	r2, r2, #8
    6358:	4313      	orrs	r3, r2
    635a:	b21b      	sxth	r3, r3
    635c:	42b3      	cmp	r3, r6
    635e:	d000      	beq.n	6362 <f_open+0x3c6>
    6360:	e766      	b.n	6230 <f_open+0x294>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    6362:	9b04      	ldr	r3, [sp, #16]
    6364:	881a      	ldrh	r2, [r3, #0]
    6366:	885b      	ldrh	r3, [r3, #2]
    6368:	041b      	lsls	r3, r3, #16
    636a:	4313      	orrs	r3, r2
    636c:	4aa3      	ldr	r2, [pc, #652]	; (65fc <f_open+0x660>)
    636e:	021b      	lsls	r3, r3, #8
    6370:	0a1b      	lsrs	r3, r3, #8
    6372:	4293      	cmp	r3, r2
    6374:	d00c      	beq.n	6390 <f_open+0x3f4>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    6376:	464b      	mov	r3, r9
    6378:	2282      	movs	r2, #130	; 0x82
    637a:	5a9a      	ldrh	r2, [r3, r2]
    637c:	9b02      	ldr	r3, [sp, #8]
    637e:	885b      	ldrh	r3, [r3, #2]
    6380:	041b      	lsls	r3, r3, #16
    6382:	4313      	orrs	r3, r2
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    6384:	4a9d      	ldr	r2, [pc, #628]	; (65fc <f_open+0x660>)
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    6386:	021b      	lsls	r3, r3, #8
    6388:	0a1b      	lsrs	r3, r3, #8
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    638a:	4293      	cmp	r3, r2
    638c:	d000      	beq.n	6390 <f_open+0x3f4>
    638e:	e74f      	b.n	6230 <f_open+0x294>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    6390:	233c      	movs	r3, #60	; 0x3c
    6392:	464a      	mov	r2, r9
    6394:	4649      	mov	r1, r9
    6396:	5cd2      	ldrb	r2, [r2, r3]
    6398:	3b01      	subs	r3, #1
    639a:	5ccb      	ldrb	r3, [r1, r3]
    639c:	0212      	lsls	r2, r2, #8
    639e:	4313      	orrs	r3, r2
    63a0:	2280      	movs	r2, #128	; 0x80
    63a2:	b21b      	sxth	r3, r3
    63a4:	0092      	lsls	r2, r2, #2
    63a6:	4293      	cmp	r3, r2
    63a8:	d000      	beq.n	63ac <f_open+0x410>
    63aa:	e741      	b.n	6230 <f_open+0x294>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    63ac:	2347      	movs	r3, #71	; 0x47
    63ae:	5cca      	ldrb	r2, [r1, r3]
    63b0:	3b01      	subs	r3, #1
    63b2:	5ccb      	ldrb	r3, [r1, r3]
    63b4:	0212      	lsls	r2, r2, #8
    63b6:	4313      	orrs	r3, r2
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    63b8:	d100      	bne.n	63bc <f_open+0x420>
    63ba:	6d4b      	ldr	r3, [r1, #84]	; 0x54
    63bc:	001a      	movs	r2, r3
    63be:	9302      	str	r3, [sp, #8]
	fs->fsize = fasize;
    63c0:	464b      	mov	r3, r9
    63c2:	61da      	str	r2, [r3, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    63c4:	464a      	mov	r2, r9
    63c6:	2340      	movs	r3, #64	; 0x40
    63c8:	5cd3      	ldrb	r3, [r2, r3]
    63ca:	70d3      	strb	r3, [r2, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    63cc:	1e5a      	subs	r2, r3, #1
    63ce:	2a01      	cmp	r2, #1
    63d0:	d900      	bls.n	63d4 <f_open+0x438>
    63d2:	e72d      	b.n	6230 <f_open+0x294>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    63d4:	223d      	movs	r2, #61	; 0x3d
    63d6:	4649      	mov	r1, r9
    63d8:	5c89      	ldrb	r1, [r1, r2]
    63da:	464a      	mov	r2, r9
    63dc:	7091      	strb	r1, [r2, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    63de:	2900      	cmp	r1, #0
    63e0:	d100      	bne.n	63e4 <f_open+0x448>
    63e2:	e725      	b.n	6230 <f_open+0x294>
    63e4:	1e4a      	subs	r2, r1, #1
    63e6:	4211      	tst	r1, r2
    63e8:	d000      	beq.n	63ec <f_open+0x450>
    63ea:	e721      	b.n	6230 <f_open+0x294>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    63ec:	4648      	mov	r0, r9
    63ee:	2242      	movs	r2, #66	; 0x42
    63f0:	464e      	mov	r6, r9
    63f2:	5c82      	ldrb	r2, [r0, r2]
    63f4:	2041      	movs	r0, #65	; 0x41
    63f6:	5c30      	ldrb	r0, [r6, r0]
    63f8:	0212      	lsls	r2, r2, #8
    63fa:	4310      	orrs	r0, r2
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    63fc:	0002      	movs	r2, r0
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    63fe:	4680      	mov	r8, r0
    6400:	8130      	strh	r0, [r6, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    6402:	0712      	lsls	r2, r2, #28
    6404:	d000      	beq.n	6408 <f_open+0x46c>
    6406:	e713      	b.n	6230 <f_open+0x294>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    6408:	2244      	movs	r2, #68	; 0x44
    640a:	2043      	movs	r0, #67	; 0x43
    640c:	5cb2      	ldrb	r2, [r6, r2]
    640e:	5c30      	ldrb	r0, [r6, r0]
    6410:	0212      	lsls	r2, r2, #8
    6412:	4310      	orrs	r0, r2
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    6414:	d100      	bne.n	6418 <f_open+0x47c>
    6416:	6d30      	ldr	r0, [r6, #80]	; 0x50
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    6418:	464e      	mov	r6, r9
    641a:	223f      	movs	r2, #63	; 0x3f
    641c:	5cb2      	ldrb	r2, [r6, r2]
    641e:	263e      	movs	r6, #62	; 0x3e
    6420:	46b4      	mov	ip, r6
    6422:	0212      	lsls	r2, r2, #8
    6424:	9204      	str	r2, [sp, #16]
    6426:	464e      	mov	r6, r9
    6428:	4662      	mov	r2, ip
    642a:	5cb2      	ldrb	r2, [r6, r2]
    642c:	0016      	movs	r6, r2
    642e:	9a04      	ldr	r2, [sp, #16]
    6430:	4316      	orrs	r6, r2
    6432:	9604      	str	r6, [sp, #16]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    6434:	d100      	bne.n	6438 <f_open+0x49c>
    6436:	e6fb      	b.n	6230 <f_open+0x294>
	fasize *= b;										/* Number of sectors for FAT area */
    6438:	9a02      	ldr	r2, [sp, #8]
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    643a:	46b4      	mov	ip, r6
	fasize *= b;										/* Number of sectors for FAT area */
    643c:	435a      	muls	r2, r3
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    643e:	4643      	mov	r3, r8
    6440:	091b      	lsrs	r3, r3, #4
    6442:	4463      	add	r3, ip
    6444:	4694      	mov	ip, r2
    6446:	4463      	add	r3, ip
	fasize *= b;										/* Number of sectors for FAT area */
    6448:	9205      	str	r2, [sp, #20]
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    644a:	001e      	movs	r6, r3
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    644c:	4283      	cmp	r3, r0
    644e:	d900      	bls.n	6452 <f_open+0x4b6>
    6450:	e6ee      	b.n	6230 <f_open+0x294>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    6452:	1ac0      	subs	r0, r0, r3
    6454:	4b6c      	ldr	r3, [pc, #432]	; (6608 <f_open+0x66c>)
    6456:	4798      	blx	r3
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    6458:	2800      	cmp	r0, #0
    645a:	d100      	bne.n	645e <f_open+0x4c2>
    645c:	e6e8      	b.n	6230 <f_open+0x294>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    645e:	4b6b      	ldr	r3, [pc, #428]	; (660c <f_open+0x670>)
    6460:	4298      	cmp	r0, r3
    6462:	d800      	bhi.n	6466 <f_open+0x4ca>
    6464:	e095      	b.n	6592 <f_open+0x5f6>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    6466:	4b6a      	ldr	r3, [pc, #424]	; (6610 <f_open+0x674>)
    6468:	4298      	cmp	r0, r3
    646a:	d96b      	bls.n	6544 <f_open+0x5a8>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    646c:	464b      	mov	r3, r9
	fs->database = bsect + sysect;						/* Data start sector */
    646e:	9903      	ldr	r1, [sp, #12]
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    6470:	3002      	adds	r0, #2
    6472:	6198      	str	r0, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    6474:	468c      	mov	ip, r1
    6476:	0033      	movs	r3, r6
    6478:	464a      	mov	r2, r9
    647a:	4463      	add	r3, ip
    647c:	6293      	str	r3, [r2, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    647e:	464a      	mov	r2, r9
    6480:	9b04      	ldr	r3, [sp, #16]
    6482:	4463      	add	r3, ip
    6484:	6213      	str	r3, [r2, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    6486:	4643      	mov	r3, r8
    6488:	2b00      	cmp	r3, #0
    648a:	d000      	beq.n	648e <f_open+0x4f2>
    648c:	e6d0      	b.n	6230 <f_open+0x294>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    648e:	464b      	mov	r3, r9
    6490:	6dda      	ldr	r2, [r3, #92]	; 0x5c
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    6492:	0080      	lsls	r0, r0, #2
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    6494:	625a      	str	r2, [r3, #36]	; 0x24
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    6496:	4b5f      	ldr	r3, [pc, #380]	; (6614 <f_open+0x678>)
    6498:	9a02      	ldr	r2, [sp, #8]
    649a:	18c3      	adds	r3, r0, r3
    649c:	0a5b      	lsrs	r3, r3, #9
    649e:	429a      	cmp	r2, r3
    64a0:	d200      	bcs.n	64a4 <f_open+0x508>
    64a2:	e6c5      	b.n	6230 <f_open+0x294>
	fs->free_clust = 0xFFFFFFFF;
    64a4:	2301      	movs	r3, #1
    64a6:	464a      	mov	r2, r9
    64a8:	425b      	negs	r3, r3
    64aa:	6113      	str	r3, [r2, #16]
	fs->last_clust = 0;
    64ac:	464b      	mov	r3, r9
    64ae:	4642      	mov	r2, r8
    64b0:	60da      	str	r2, [r3, #12]
	 	fs->fsi_flag = 0;
    64b2:	4642      	mov	r2, r8
    64b4:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    64b6:	464a      	mov	r2, r9
    64b8:	2361      	movs	r3, #97	; 0x61
    64ba:	4649      	mov	r1, r9
    64bc:	5cd3      	ldrb	r3, [r2, r3]
    64be:	2260      	movs	r2, #96	; 0x60
    64c0:	5c8a      	ldrb	r2, [r1, r2]
    64c2:	021b      	lsls	r3, r3, #8
    64c4:	431a      	orrs	r2, r3
    64c6:	9b03      	ldr	r3, [sp, #12]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    64c8:	7848      	ldrb	r0, [r1, #1]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    64ca:	469c      	mov	ip, r3
    64cc:	4462      	add	r2, ip
    64ce:	614a      	str	r2, [r1, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    64d0:	2301      	movs	r3, #1
    64d2:	4659      	mov	r1, fp
    64d4:	47d0      	blx	sl
    64d6:	2303      	movs	r3, #3
    64d8:	2800      	cmp	r0, #0
    64da:	d00f      	beq.n	64fc <f_open+0x560>
	fs->fs_type = fmt;		/* FAT sub-type */
    64dc:	464a      	mov	r2, r9
    64de:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    64e0:	4a4d      	ldr	r2, [pc, #308]	; (6618 <f_open+0x67c>)
    64e2:	8813      	ldrh	r3, [r2, #0]
    64e4:	3301      	adds	r3, #1
    64e6:	b29b      	uxth	r3, r3
    64e8:	8013      	strh	r3, [r2, #0]
    64ea:	464a      	mov	r2, r9
    64ec:	80d3      	strh	r3, [r2, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    64ee:	2300      	movs	r3, #0
    64f0:	62d3      	str	r3, [r2, #44]	; 0x2c
	fs->wflag = 0;
    64f2:	7113      	strb	r3, [r2, #4]
    64f4:	e583      	b.n	5ffe <f_open+0x62>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    64f6:	2300      	movs	r3, #0
    64f8:	9303      	str	r3, [sp, #12]
    64fa:	e749      	b.n	6390 <f_open+0x3f4>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    64fc:	464a      	mov	r2, r9
    64fe:	4649      	mov	r1, r9
    6500:	4b3f      	ldr	r3, [pc, #252]	; (6600 <f_open+0x664>)
    6502:	5cd3      	ldrb	r3, [r2, r3]
    6504:	4a3f      	ldr	r2, [pc, #252]	; (6604 <f_open+0x668>)
    6506:	021b      	lsls	r3, r3, #8
    6508:	5c8a      	ldrb	r2, [r1, r2]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    650a:	4944      	ldr	r1, [pc, #272]	; (661c <f_open+0x680>)
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    650c:	431a      	orrs	r2, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    650e:	b212      	sxth	r2, r2
    6510:	2303      	movs	r3, #3
    6512:	428a      	cmp	r2, r1
    6514:	d1e2      	bne.n	64dc <f_open+0x540>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    6516:	4649      	mov	r1, r9
    6518:	4a41      	ldr	r2, [pc, #260]	; (6620 <f_open+0x684>)
    651a:	6b09      	ldr	r1, [r1, #48]	; 0x30
    651c:	4291      	cmp	r1, r2
    651e:	d1dd      	bne.n	64dc <f_open+0x540>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    6520:	2385      	movs	r3, #133	; 0x85
    6522:	4649      	mov	r1, r9
    6524:	009b      	lsls	r3, r3, #2
    6526:	58c9      	ldr	r1, [r1, r3]
    6528:	4a3e      	ldr	r2, [pc, #248]	; (6624 <f_open+0x688>)
    652a:	2303      	movs	r3, #3
    652c:	4291      	cmp	r1, r2
    652e:	d1d5      	bne.n	64dc <f_open+0x540>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    6530:	2287      	movs	r2, #135	; 0x87
    6532:	4649      	mov	r1, r9
    6534:	0092      	lsls	r2, r2, #2
    6536:	588a      	ldr	r2, [r1, r2]
    6538:	60ca      	str	r2, [r1, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    653a:	2286      	movs	r2, #134	; 0x86
    653c:	0092      	lsls	r2, r2, #2
    653e:	588a      	ldr	r2, [r1, r2]
    6540:	610a      	str	r2, [r1, #16]
    6542:	e7cb      	b.n	64dc <f_open+0x540>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    6544:	464b      	mov	r3, r9
	fs->database = bsect + sysect;						/* Data start sector */
    6546:	9903      	ldr	r1, [sp, #12]
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    6548:	3002      	adds	r0, #2
    654a:	6198      	str	r0, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    654c:	468c      	mov	ip, r1
    654e:	0033      	movs	r3, r6
    6550:	464a      	mov	r2, r9
    6552:	4463      	add	r3, ip
    6554:	6293      	str	r3, [r2, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    6556:	9b04      	ldr	r3, [sp, #16]
    6558:	001a      	movs	r2, r3
    655a:	464b      	mov	r3, r9
    655c:	4462      	add	r2, ip
    655e:	621a      	str	r2, [r3, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    6560:	4643      	mov	r3, r8
    6562:	2b00      	cmp	r3, #0
    6564:	d100      	bne.n	6568 <f_open+0x5cc>
    6566:	e663      	b.n	6230 <f_open+0x294>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    6568:	9b05      	ldr	r3, [sp, #20]
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    656a:	0040      	lsls	r0, r0, #1
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    656c:	469c      	mov	ip, r3
    656e:	464b      	mov	r3, r9
    6570:	4462      	add	r2, ip
    6572:	625a      	str	r2, [r3, #36]	; 0x24
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    6574:	4b27      	ldr	r3, [pc, #156]	; (6614 <f_open+0x678>)
    6576:	9a02      	ldr	r2, [sp, #8]
    6578:	18c3      	adds	r3, r0, r3
    657a:	0a5b      	lsrs	r3, r3, #9
    657c:	4293      	cmp	r3, r2
    657e:	d900      	bls.n	6582 <f_open+0x5e6>
    6580:	e656      	b.n	6230 <f_open+0x294>
	fs->free_clust = 0xFFFFFFFF;
    6582:	2301      	movs	r3, #1
    6584:	464a      	mov	r2, r9
    6586:	425b      	negs	r3, r3
    6588:	6113      	str	r3, [r2, #16]
	fs->last_clust = 0;
    658a:	2300      	movs	r3, #0
    658c:	60d3      	str	r3, [r2, #12]
    658e:	3302      	adds	r3, #2
    6590:	e7a4      	b.n	64dc <f_open+0x540>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    6592:	464b      	mov	r3, r9
	fs->database = bsect + sysect;						/* Data start sector */
    6594:	9903      	ldr	r1, [sp, #12]
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    6596:	3002      	adds	r0, #2
    6598:	6198      	str	r0, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    659a:	468c      	mov	ip, r1
    659c:	0033      	movs	r3, r6
    659e:	464a      	mov	r2, r9
    65a0:	4463      	add	r3, ip
    65a2:	6293      	str	r3, [r2, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    65a4:	9b04      	ldr	r3, [sp, #16]
    65a6:	001a      	movs	r2, r3
    65a8:	464b      	mov	r3, r9
    65aa:	4462      	add	r2, ip
    65ac:	621a      	str	r2, [r3, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    65ae:	4643      	mov	r3, r8
    65b0:	2b00      	cmp	r3, #0
    65b2:	d100      	bne.n	65b6 <f_open+0x61a>
    65b4:	e63c      	b.n	6230 <f_open+0x294>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    65b6:	9b05      	ldr	r3, [sp, #20]
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    65b8:	4916      	ldr	r1, [pc, #88]	; (6614 <f_open+0x678>)
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    65ba:	469c      	mov	ip, r3
    65bc:	464b      	mov	r3, r9
    65be:	4462      	add	r2, ip
    65c0:	625a      	str	r2, [r3, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    65c2:	2303      	movs	r3, #3
    65c4:	2201      	movs	r2, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    65c6:	468c      	mov	ip, r1
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    65c8:	4343      	muls	r3, r0
    65ca:	4010      	ands	r0, r2
    65cc:	085b      	lsrs	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    65ce:	4460      	add	r0, ip
    65d0:	9902      	ldr	r1, [sp, #8]
    65d2:	181b      	adds	r3, r3, r0
    65d4:	0a5b      	lsrs	r3, r3, #9
    65d6:	4299      	cmp	r1, r3
    65d8:	d200      	bcs.n	65dc <f_open+0x640>
    65da:	e629      	b.n	6230 <f_open+0x294>
	fs->free_clust = 0xFFFFFFFF;
    65dc:	2301      	movs	r3, #1
    65de:	4649      	mov	r1, r9
    65e0:	425b      	negs	r3, r3
    65e2:	610b      	str	r3, [r1, #16]
	fs->last_clust = 0;
    65e4:	2300      	movs	r3, #0
    65e6:	60cb      	str	r3, [r1, #12]
	fmt = FS_FAT12;
    65e8:	0013      	movs	r3, r2
    65ea:	e777      	b.n	64dc <f_open+0x540>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    65ec:	231c      	movs	r3, #28
    65ee:	421f      	tst	r7, r3
    65f0:	d100      	bne.n	65f4 <f_open+0x658>
    65f2:	e551      	b.n	6098 <f_open+0xfc>
    65f4:	e56d      	b.n	60d2 <f_open+0x136>
		p += 2; *path = p;				/* Return pointer to the path name */
    65f6:	3402      	adds	r4, #2
    65f8:	e4e5      	b.n	5fc6 <f_open+0x2a>
    65fa:	46c0      	nop			; (mov r8, r8)
    65fc:	00544146 	.word	0x00544146
    6600:	0000022f 	.word	0x0000022f
    6604:	0000022e 	.word	0x0000022e
    6608:	0001cd1d 	.word	0x0001cd1d
    660c:	00000ff5 	.word	0x00000ff5
    6610:	0000fff5 	.word	0x0000fff5
    6614:	000001ff 	.word	0x000001ff
    6618:	20000e6c 	.word	0x20000e6c
    661c:	ffffaa55 	.word	0xffffaa55
    6620:	41615252 	.word	0x41615252
    6624:	61417272 	.word	0x61417272

00006628 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    6628:	b5f0      	push	{r4, r5, r6, r7, lr}
    662a:	4657      	mov	r7, sl
    662c:	469a      	mov	sl, r3
    662e:	464e      	mov	r6, r9
    6630:	4645      	mov	r5, r8
    6632:	46de      	mov	lr, fp
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */
    6634:	2300      	movs	r3, #0
{
    6636:	0014      	movs	r4, r2
	*br = 0;	/* Initialize byte counter */
    6638:	4652      	mov	r2, sl
{
    663a:	b5e0      	push	{r5, r6, r7, lr}
	*br = 0;	/* Initialize byte counter */
    663c:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);				/* Check validity */
    663e:	6803      	ldr	r3, [r0, #0]
{
    6640:	b083      	sub	sp, #12
    6642:	0005      	movs	r5, r0
    6644:	000e      	movs	r6, r1
	if (!fs || !fs->fs_type || fs->id != id)
    6646:	2b00      	cmp	r3, #0
    6648:	d100      	bne.n	664c <f_read+0x24>
    664a:	e11f      	b.n	688c <f_read+0x264>
    664c:	781a      	ldrb	r2, [r3, #0]
		return FR_INVALID_OBJECT;
    664e:	2009      	movs	r0, #9
	if (!fs || !fs->fs_type || fs->id != id)
    6650:	2a00      	cmp	r2, #0
    6652:	d106      	bne.n	6662 <f_read+0x3a>
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    6654:	b003      	add	sp, #12
    6656:	bc3c      	pop	{r2, r3, r4, r5}
    6658:	4690      	mov	r8, r2
    665a:	4699      	mov	r9, r3
    665c:	46a2      	mov	sl, r4
    665e:	46ab      	mov	fp, r5
    6660:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!fs || !fs->fs_type || fs->id != id)
    6662:	88a9      	ldrh	r1, [r5, #4]
    6664:	88da      	ldrh	r2, [r3, #6]
    6666:	4291      	cmp	r1, r2
    6668:	d1f4      	bne.n	6654 <f_read+0x2c>
	if (disk_status(fs->drv) & STA_NOINIT)
    666a:	7858      	ldrb	r0, [r3, #1]
    666c:	4bad      	ldr	r3, [pc, #692]	; (6924 <f_read+0x2fc>)
    666e:	4798      	blx	r3
    6670:	2101      	movs	r1, #1
    6672:	0003      	movs	r3, r0
		return FR_NOT_READY;
    6674:	2003      	movs	r0, #3
	if (disk_status(fs->drv) & STA_NOINIT)
    6676:	4219      	tst	r1, r3
    6678:	d1ec      	bne.n	6654 <f_read+0x2c>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    667a:	79ab      	ldrb	r3, [r5, #6]
		LEAVE_FF(fp->fs, FR_INT_ERR);
    667c:	2002      	movs	r0, #2
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    667e:	b25a      	sxtb	r2, r3
    6680:	2a00      	cmp	r2, #0
    6682:	dbe7      	blt.n	6654 <f_read+0x2c>
		LEAVE_FF(fp->fs, FR_DENIED);
    6684:	2007      	movs	r0, #7
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    6686:	4219      	tst	r1, r3
    6688:	d0e4      	beq.n	6654 <f_read+0x2c>
	remain = fp->fsize - fp->fptr;
    668a:	68ab      	ldr	r3, [r5, #8]
    668c:	68ea      	ldr	r2, [r5, #12]
    668e:	1ad2      	subs	r2, r2, r3
    6690:	4690      	mov	r8, r2
    6692:	42a2      	cmp	r2, r4
    6694:	d900      	bls.n	6698 <f_read+0x70>
    6696:	46a0      	mov	r8, r4
	for ( ;  btr;								/* Repeat until all data read */
    6698:	4642      	mov	r2, r8
    669a:	2a00      	cmp	r2, #0
    669c:	d100      	bne.n	66a0 <f_read+0x78>
    669e:	e12a      	b.n	68f6 <f_read+0x2ce>
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    66a0:	05da      	lsls	r2, r3, #23
    66a2:	4647      	mov	r7, r8
    66a4:	0dd2      	lsrs	r2, r2, #23
    66a6:	d000      	beq.n	66aa <f_read+0x82>
    66a8:	e087      	b.n	67ba <f_read+0x192>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    66aa:	682a      	ldr	r2, [r5, #0]
    66ac:	0a59      	lsrs	r1, r3, #9
    66ae:	7890      	ldrb	r0, [r2, #2]
    66b0:	3801      	subs	r0, #1
    66b2:	4001      	ands	r1, r0
    66b4:	b2c9      	uxtb	r1, r1
    66b6:	4688      	mov	r8, r1
			if (!csect) {						/* On the cluster boundary? */
    66b8:	2900      	cmp	r1, #0
    66ba:	d000      	beq.n	66be <f_read+0x96>
    66bc:	e0ca      	b.n	6854 <f_read+0x22c>
				if (fp->fptr == 0) {			/* On the top of the file? */
    66be:	2b00      	cmp	r3, #0
    66c0:	d000      	beq.n	66c4 <f_read+0x9c>
    66c2:	e0ef      	b.n	68a4 <f_read+0x27c>
					clst = fp->sclust;			/* Follow from the origin */
    66c4:	6928      	ldr	r0, [r5, #16]
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    66c6:	2801      	cmp	r0, #1
    66c8:	d800      	bhi.n	66cc <f_read+0xa4>
    66ca:	e0f1      	b.n	68b0 <f_read+0x288>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    66cc:	1c43      	adds	r3, r0, #1
    66ce:	d100      	bne.n	66d2 <f_read+0xaa>
    66d0:	e120      	b.n	6914 <f_read+0x2ec>
    66d2:	682a      	ldr	r2, [r5, #0]
				fp->clust = clst;				/* Update current cluster */
    66d4:	6168      	str	r0, [r5, #20]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    66d6:	6993      	ldr	r3, [r2, #24]
	clst -= 2;
    66d8:	3802      	subs	r0, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    66da:	3b02      	subs	r3, #2
    66dc:	4298      	cmp	r0, r3
    66de:	d300      	bcc.n	66e2 <f_read+0xba>
    66e0:	e0e6      	b.n	68b0 <f_read+0x288>
	return clst * fs->csize + fs->database;
    66e2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    66e4:	7891      	ldrb	r1, [r2, #2]
    66e6:	469b      	mov	fp, r3
    66e8:	4348      	muls	r0, r1
    66ea:	9001      	str	r0, [sp, #4]
    66ec:	4458      	add	r0, fp
    66ee:	1e03      	subs	r3, r0, #0
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    66f0:	d100      	bne.n	66f4 <f_read+0xcc>
    66f2:	e0dd      	b.n	68b0 <f_read+0x288>
			sect += csect;
    66f4:	4443      	add	r3, r8
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    66f6:	0a78      	lsrs	r0, r7, #9
			sect += csect;
    66f8:	4699      	mov	r9, r3
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    66fa:	9000      	str	r0, [sp, #0]
			if (cc) {							/* Read maximum contiguous sectors directly */
    66fc:	d100      	bne.n	6700 <f_read+0xd8>
    66fe:	e0ab      	b.n	6858 <f_read+0x230>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    6700:	4643      	mov	r3, r8
    6702:	4684      	mov	ip, r0
    6704:	4463      	add	r3, ip
    6706:	428b      	cmp	r3, r1
    6708:	d902      	bls.n	6710 <f_read+0xe8>
					cc = fp->fs->csize - csect;
    670a:	4643      	mov	r3, r8
    670c:	1acb      	subs	r3, r1, r3
    670e:	9300      	str	r3, [sp, #0]
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    6710:	466b      	mov	r3, sp
    6712:	7850      	ldrb	r0, [r2, #1]
    6714:	0031      	movs	r1, r6
    6716:	781b      	ldrb	r3, [r3, #0]
    6718:	464a      	mov	r2, r9
    671a:	4c83      	ldr	r4, [pc, #524]	; (6928 <f_read+0x300>)
    671c:	47a0      	blx	r4
    671e:	1e01      	subs	r1, r0, #0
    6720:	d000      	beq.n	6724 <f_read+0xfc>
    6722:	e0cc      	b.n	68be <f_read+0x296>
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
    6724:	79ab      	ldrb	r3, [r5, #6]
    6726:	065b      	lsls	r3, r3, #25
    6728:	d534      	bpl.n	6794 <f_read+0x16c>
    672a:	464a      	mov	r2, r9
    672c:	69ab      	ldr	r3, [r5, #24]
    672e:	1a98      	subs	r0, r3, r2
    6730:	9a00      	ldr	r2, [sp, #0]
    6732:	4282      	cmp	r2, r0
    6734:	d92e      	bls.n	6794 <f_read+0x16c>
    6736:	4644      	mov	r4, r8
    6738:	1b1b      	subs	r3, r3, r4
    673a:	465c      	mov	r4, fp
    673c:	1b1b      	subs	r3, r3, r4
    673e:	9c01      	ldr	r4, [sp, #4]
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
    6740:	0240      	lsls	r0, r0, #9
    6742:	1b1b      	subs	r3, r3, r4
    6744:	2404      	movs	r4, #4
    6746:	025b      	lsls	r3, r3, #9
    6748:	469b      	mov	fp, r3
    674a:	46a4      	mov	ip, r4
    674c:	44e3      	add	fp, ip
    674e:	002a      	movs	r2, r5
    6750:	44b3      	add	fp, r6
    6752:	4681      	mov	r9, r0
    6754:	000c      	movs	r4, r1
    6756:	4658      	mov	r0, fp
    6758:	3224      	adds	r2, #36	; 0x24
    675a:	4282      	cmp	r2, r0
    675c:	414c      	adcs	r4, r1
    675e:	2028      	movs	r0, #40	; 0x28
    6760:	4680      	mov	r8, r0
    6762:	44a8      	add	r8, r5
    6764:	4640      	mov	r0, r8
    6766:	18f3      	adds	r3, r6, r3
    6768:	4283      	cmp	r3, r0
    676a:	4149      	adcs	r1, r1
    676c:	4321      	orrs	r1, r4
    676e:	b2c9      	uxtb	r1, r1
    6770:	44b1      	add	r9, r6
    6772:	2900      	cmp	r1, #0
    6774:	d100      	bne.n	6778 <f_read+0x150>
    6776:	e0c0      	b.n	68fa <f_read+0x2d2>
    6778:	0019      	movs	r1, r3
    677a:	4311      	orrs	r1, r2
    677c:	0789      	lsls	r1, r1, #30
    677e:	d000      	beq.n	6782 <f_read+0x15a>
    6780:	e0bb      	b.n	68fa <f_read+0x2d2>
    6782:	2189      	movs	r1, #137	; 0x89
    6784:	9c00      	ldr	r4, [sp, #0]
    6786:	0089      	lsls	r1, r1, #2
    6788:	1868      	adds	r0, r5, r1
		*d++ = *s++;
    678a:	ca02      	ldmia	r2!, {r1}
    678c:	c302      	stmia	r3!, {r1}
    678e:	4290      	cmp	r0, r2
    6790:	d1fb      	bne.n	678a <f_read+0x162>
    6792:	9400      	str	r4, [sp, #0]
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    6794:	9b00      	ldr	r3, [sp, #0]
    6796:	025c      	lsls	r4, r3, #9
    6798:	68ab      	ldr	r3, [r5, #8]
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    679a:	18e3      	adds	r3, r4, r3
    679c:	60ab      	str	r3, [r5, #8]
    679e:	4653      	mov	r3, sl
    67a0:	4652      	mov	r2, sl
    67a2:	681b      	ldr	r3, [r3, #0]
    67a4:	1936      	adds	r6, r6, r4
    67a6:	191b      	adds	r3, r3, r4
    67a8:	6013      	str	r3, [r2, #0]
    67aa:	1b3f      	subs	r7, r7, r4
	for ( ;  btr;								/* Repeat until all data read */
    67ac:	d100      	bne.n	67b0 <f_read+0x188>
    67ae:	e0a2      	b.n	68f6 <f_read+0x2ce>
    67b0:	68ab      	ldr	r3, [r5, #8]
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    67b2:	05da      	lsls	r2, r3, #23
    67b4:	0dd2      	lsrs	r2, r2, #23
    67b6:	d100      	bne.n	67ba <f_read+0x192>
    67b8:	e777      	b.n	66aa <f_read+0x82>
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    67ba:	2480      	movs	r4, #128	; 0x80
    67bc:	00a4      	lsls	r4, r4, #2
    67be:	1aa4      	subs	r4, r4, r2
    67c0:	42bc      	cmp	r4, r7
    67c2:	d900      	bls.n	67c6 <f_read+0x19e>
    67c4:	003c      	movs	r4, r7
	while (cnt--)
    67c6:	1e61      	subs	r1, r4, #1
    67c8:	4689      	mov	r9, r1
    67ca:	2100      	movs	r1, #0
    67cc:	0008      	movs	r0, r1
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    67ce:	0013      	movs	r3, r2
    67d0:	3228      	adds	r2, #40	; 0x28
    67d2:	18aa      	adds	r2, r5, r2
    67d4:	4296      	cmp	r6, r2
    67d6:	4148      	adcs	r0, r1
    67d8:	3324      	adds	r3, #36	; 0x24
    67da:	0002      	movs	r2, r0
    67dc:	18eb      	adds	r3, r5, r3
    67de:	1d30      	adds	r0, r6, #4
    67e0:	4283      	cmp	r3, r0
    67e2:	4149      	adcs	r1, r1
    67e4:	4311      	orrs	r1, r2
    67e6:	2209      	movs	r2, #9
    67e8:	42a2      	cmp	r2, r4
    67ea:	4192      	sbcs	r2, r2
    67ec:	4252      	negs	r2, r2
    67ee:	420a      	tst	r2, r1
    67f0:	d050      	beq.n	6894 <f_read+0x26c>
    67f2:	0032      	movs	r2, r6
    67f4:	431a      	orrs	r2, r3
    67f6:	0792      	lsls	r2, r2, #30
    67f8:	d14c      	bne.n	6894 <f_read+0x26c>
    67fa:	1f22      	subs	r2, r4, #4
    67fc:	0892      	lsrs	r2, r2, #2
    67fe:	3201      	adds	r2, #1
    6800:	0091      	lsls	r1, r2, #2
    6802:	4688      	mov	r8, r1
    6804:	4649      	mov	r1, r9
    6806:	2902      	cmp	r1, #2
    6808:	d942      	bls.n	6890 <f_read+0x268>
	while (cnt--)
    680a:	2000      	movs	r0, #0
    680c:	4684      	mov	ip, r0
    680e:	2100      	movs	r1, #0
    6810:	0010      	movs	r0, r2
    6812:	46a3      	mov	fp, r4
    6814:	4662      	mov	r2, ip
    6816:	46cc      	mov	ip, r9
		*d++ = *s++;
    6818:	585c      	ldr	r4, [r3, r1]
    681a:	3201      	adds	r2, #1
    681c:	5074      	str	r4, [r6, r1]
    681e:	3104      	adds	r1, #4
    6820:	4290      	cmp	r0, r2
    6822:	d8f9      	bhi.n	6818 <f_read+0x1f0>
    6824:	4641      	mov	r1, r8
    6826:	4660      	mov	r0, ip
    6828:	4642      	mov	r2, r8
    682a:	465c      	mov	r4, fp
    682c:	1a41      	subs	r1, r0, r1
    682e:	18b2      	adds	r2, r6, r2
    6830:	4443      	add	r3, r8
    6832:	4689      	mov	r9, r1
    6834:	4544      	cmp	r4, r8
    6836:	d00b      	beq.n	6850 <f_read+0x228>
    6838:	7819      	ldrb	r1, [r3, #0]
    683a:	7011      	strb	r1, [r2, #0]
	while (cnt--)
    683c:	4649      	mov	r1, r9
    683e:	2900      	cmp	r1, #0
    6840:	d006      	beq.n	6850 <f_read+0x228>
		*d++ = *s++;
    6842:	7859      	ldrb	r1, [r3, #1]
    6844:	7051      	strb	r1, [r2, #1]
	while (cnt--)
    6846:	4649      	mov	r1, r9
    6848:	2901      	cmp	r1, #1
    684a:	d001      	beq.n	6850 <f_read+0x228>
		*d++ = *s++;
    684c:	789b      	ldrb	r3, [r3, #2]
    684e:	7093      	strb	r3, [r2, #2]
    6850:	68ab      	ldr	r3, [r5, #8]
    6852:	e7a2      	b.n	679a <f_read+0x172>
    6854:	6968      	ldr	r0, [r5, #20]
    6856:	e73e      	b.n	66d6 <f_read+0xae>
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
    6858:	69a9      	ldr	r1, [r5, #24]
    685a:	428b      	cmp	r3, r1
    685c:	d010      	beq.n	6880 <f_read+0x258>
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
    685e:	2340      	movs	r3, #64	; 0x40
    6860:	469b      	mov	fp, r3
    6862:	4658      	mov	r0, fp
    6864:	79ab      	ldrb	r3, [r5, #6]
    6866:	4218      	tst	r0, r3
    6868:	d130      	bne.n	68cc <f_read+0x2a4>
    686a:	2324      	movs	r3, #36	; 0x24
    686c:	4698      	mov	r8, r3
    686e:	44a8      	add	r8, r5
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
    6870:	7850      	ldrb	r0, [r2, #1]
    6872:	2301      	movs	r3, #1
    6874:	464a      	mov	r2, r9
    6876:	4641      	mov	r1, r8
    6878:	4c2b      	ldr	r4, [pc, #172]	; (6928 <f_read+0x300>)
    687a:	47a0      	blx	r4
    687c:	2800      	cmp	r0, #0
    687e:	d11e      	bne.n	68be <f_read+0x296>
			fp->dsect = sect;
    6880:	464b      	mov	r3, r9
    6882:	61ab      	str	r3, [r5, #24]
    6884:	68ab      	ldr	r3, [r5, #8]
    6886:	05da      	lsls	r2, r3, #23
    6888:	0dd2      	lsrs	r2, r2, #23
    688a:	e796      	b.n	67ba <f_read+0x192>
		return FR_INVALID_OBJECT;
    688c:	2009      	movs	r0, #9
    688e:	e6e1      	b.n	6654 <f_read+0x2c>
	while (cnt--)
    6890:	0032      	movs	r2, r6
    6892:	e7d1      	b.n	6838 <f_read+0x210>
    6894:	2200      	movs	r2, #0
		*d++ = *s++;
    6896:	5c99      	ldrb	r1, [r3, r2]
    6898:	54b1      	strb	r1, [r6, r2]
    689a:	3201      	adds	r2, #1
	while (cnt--)
    689c:	42a2      	cmp	r2, r4
    689e:	d1fa      	bne.n	6896 <f_read+0x26e>
    68a0:	68ab      	ldr	r3, [r5, #8]
    68a2:	e77a      	b.n	679a <f_read+0x172>
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    68a4:	6969      	ldr	r1, [r5, #20]
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    68a6:	2901      	cmp	r1, #1
    68a8:	d902      	bls.n	68b0 <f_read+0x288>
    68aa:	6993      	ldr	r3, [r2, #24]
    68ac:	4299      	cmp	r1, r3
    68ae:	d31e      	bcc.n	68ee <f_read+0x2c6>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    68b0:	2380      	movs	r3, #128	; 0x80
    68b2:	79aa      	ldrb	r2, [r5, #6]
    68b4:	425b      	negs	r3, r3
    68b6:	4313      	orrs	r3, r2
    68b8:	71ab      	strb	r3, [r5, #6]
    68ba:	2002      	movs	r0, #2
    68bc:	e6ca      	b.n	6654 <f_read+0x2c>
					ABORT(fp->fs, FR_DISK_ERR);
    68be:	2380      	movs	r3, #128	; 0x80
    68c0:	79aa      	ldrb	r2, [r5, #6]
    68c2:	425b      	negs	r3, r3
    68c4:	4313      	orrs	r3, r2
    68c6:	71ab      	strb	r3, [r5, #6]
    68c8:	2001      	movs	r0, #1
    68ca:	e6c3      	b.n	6654 <f_read+0x2c>
					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    68cc:	2324      	movs	r3, #36	; 0x24
    68ce:	4698      	mov	r8, r3
    68d0:	44a8      	add	r8, r5
    68d2:	7850      	ldrb	r0, [r2, #1]
    68d4:	3b23      	subs	r3, #35	; 0x23
    68d6:	000a      	movs	r2, r1
    68d8:	4c14      	ldr	r4, [pc, #80]	; (692c <f_read+0x304>)
    68da:	4641      	mov	r1, r8
    68dc:	47a0      	blx	r4
    68de:	2800      	cmp	r0, #0
    68e0:	d1ed      	bne.n	68be <f_read+0x296>
					fp->flag &= ~FA__DIRTY;
    68e2:	465a      	mov	r2, fp
    68e4:	79ab      	ldrb	r3, [r5, #6]
    68e6:	4393      	bics	r3, r2
    68e8:	71ab      	strb	r3, [r5, #6]
    68ea:	682a      	ldr	r2, [r5, #0]
    68ec:	e7c0      	b.n	6870 <f_read+0x248>
    68ee:	0010      	movs	r0, r2
    68f0:	4b0f      	ldr	r3, [pc, #60]	; (6930 <f_read+0x308>)
    68f2:	4798      	blx	r3
    68f4:	e6e7      	b.n	66c6 <f_read+0x9e>
	LEAVE_FF(fp->fs, FR_OK);
    68f6:	2000      	movs	r0, #0
    68f8:	e6ac      	b.n	6654 <f_read+0x2c>
	while (cnt--)
    68fa:	2180      	movs	r1, #128	; 0x80
    68fc:	0089      	lsls	r1, r1, #2
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
    68fe:	2300      	movs	r3, #0
	while (cnt--)
    6900:	468c      	mov	ip, r1
    6902:	4648      	mov	r0, r9
    6904:	9c00      	ldr	r4, [sp, #0]
		*d++ = *s++;
    6906:	5cd1      	ldrb	r1, [r2, r3]
    6908:	54c1      	strb	r1, [r0, r3]
    690a:	3301      	adds	r3, #1
	while (cnt--)
    690c:	4563      	cmp	r3, ip
    690e:	d1fa      	bne.n	6906 <f_read+0x2de>
    6910:	9400      	str	r4, [sp, #0]
    6912:	e73f      	b.n	6794 <f_read+0x16c>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    6914:	2380      	movs	r3, #128	; 0x80
    6916:	79aa      	ldrb	r2, [r5, #6]
    6918:	425b      	negs	r3, r3
    691a:	4313      	orrs	r3, r2
    691c:	71ab      	strb	r3, [r5, #6]
    691e:	3002      	adds	r0, #2
    6920:	e698      	b.n	6654 <f_read+0x2c>
    6922:	46c0      	nop			; (mov r8, r8)
    6924:	00003d1d 	.word	0x00003d1d
    6928:	00003d3d 	.word	0x00003d3d
    692c:	00003dc1 	.word	0x00003dc1
    6930:	00004789 	.word	0x00004789

00006934 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    6934:	b5f0      	push	{r4, r5, r6, r7, lr}
    6936:	46de      	mov	lr, fp
    6938:	469b      	mov	fp, r3
    693a:	4645      	mov	r5, r8
    693c:	4657      	mov	r7, sl
    693e:	464e      	mov	r6, r9
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    6940:	2300      	movs	r3, #0
{
    6942:	4690      	mov	r8, r2
	*bw = 0;	/* Initialize byte counter */
    6944:	465a      	mov	r2, fp
{
    6946:	b5e0      	push	{r5, r6, r7, lr}
	*bw = 0;	/* Initialize byte counter */
    6948:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
    694a:	6803      	ldr	r3, [r0, #0]
{
    694c:	b083      	sub	sp, #12
    694e:	0004      	movs	r4, r0
    6950:	000d      	movs	r5, r1
	if (!fs || !fs->fs_type || fs->id != id)
    6952:	2b00      	cmp	r3, #0
    6954:	d02c      	beq.n	69b0 <f_write+0x7c>
    6956:	781a      	ldrb	r2, [r3, #0]
		return FR_INVALID_OBJECT;
    6958:	2009      	movs	r0, #9
	if (!fs || !fs->fs_type || fs->id != id)
    695a:	2a00      	cmp	r2, #0
    695c:	d106      	bne.n	696c <f_write+0x38>

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    695e:	b003      	add	sp, #12
    6960:	bc3c      	pop	{r2, r3, r4, r5}
    6962:	4690      	mov	r8, r2
    6964:	4699      	mov	r9, r3
    6966:	46a2      	mov	sl, r4
    6968:	46ab      	mov	fp, r5
    696a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!fs || !fs->fs_type || fs->id != id)
    696c:	88a1      	ldrh	r1, [r4, #4]
    696e:	88da      	ldrh	r2, [r3, #6]
    6970:	4291      	cmp	r1, r2
    6972:	d1f4      	bne.n	695e <f_write+0x2a>
	if (disk_status(fs->drv) & STA_NOINIT)
    6974:	7858      	ldrb	r0, [r3, #1]
    6976:	4bab      	ldr	r3, [pc, #684]	; (6c24 <f_write+0x2f0>)
    6978:	4798      	blx	r3
    697a:	0003      	movs	r3, r0
		return FR_NOT_READY;
    697c:	2003      	movs	r0, #3
	if (disk_status(fs->drv) & STA_NOINIT)
    697e:	07db      	lsls	r3, r3, #31
    6980:	d4ed      	bmi.n	695e <f_write+0x2a>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    6982:	79a3      	ldrb	r3, [r4, #6]
		LEAVE_FF(fp->fs, FR_INT_ERR);
    6984:	2002      	movs	r0, #2
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    6986:	b25a      	sxtb	r2, r3
    6988:	2a00      	cmp	r2, #0
    698a:	dbe8      	blt.n	695e <f_write+0x2a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    698c:	0002      	movs	r2, r0
		LEAVE_FF(fp->fs, FR_DENIED);
    698e:	2007      	movs	r0, #7
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    6990:	401a      	ands	r2, r3
    6992:	d0e4      	beq.n	695e <f_write+0x2a>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    6994:	4641      	mov	r1, r8
    6996:	68e2      	ldr	r2, [r4, #12]
    6998:	1851      	adds	r1, r2, r1
    699a:	428a      	cmp	r2, r1
    699c:	d90a      	bls.n	69b4 <f_write+0x80>
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    699e:	68a1      	ldr	r1, [r4, #8]
    69a0:	4291      	cmp	r1, r2
    69a2:	d900      	bls.n	69a6 <f_write+0x72>
    69a4:	60e1      	str	r1, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    69a6:	2220      	movs	r2, #32
    69a8:	4313      	orrs	r3, r2
    69aa:	71a3      	strb	r3, [r4, #6]
	LEAVE_FF(fp->fs, FR_OK);
    69ac:	2000      	movs	r0, #0
    69ae:	e7d6      	b.n	695e <f_write+0x2a>
		return FR_INVALID_OBJECT;
    69b0:	2009      	movs	r0, #9
    69b2:	e7d4      	b.n	695e <f_write+0x2a>
	for ( ;  btw;							/* Repeat until all data written */
    69b4:	4641      	mov	r1, r8
    69b6:	2900      	cmp	r1, #0
    69b8:	d0f1      	beq.n	699e <f_write+0x6a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    69ba:	002e      	movs	r6, r5
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    69bc:	68a2      	ldr	r2, [r4, #8]
    69be:	05d3      	lsls	r3, r2, #23
    69c0:	0ddb      	lsrs	r3, r3, #23
    69c2:	d000      	beq.n	69c6 <f_write+0x92>
    69c4:	e084      	b.n	6ad0 <f_write+0x19c>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    69c6:	6820      	ldr	r0, [r4, #0]
    69c8:	0a53      	lsrs	r3, r2, #9
    69ca:	7881      	ldrb	r1, [r0, #2]
    69cc:	3901      	subs	r1, #1
    69ce:	400b      	ands	r3, r1
    69d0:	b2db      	uxtb	r3, r3
    69d2:	4699      	mov	r9, r3
			if (!csect) {					/* On the cluster boundary? */
    69d4:	2b00      	cmp	r3, #0
    69d6:	d10e      	bne.n	69f6 <f_write+0xc2>
				if (fp->fptr == 0) {		/* On the top of the file? */
    69d8:	2a00      	cmp	r2, #0
    69da:	d000      	beq.n	69de <f_write+0xaa>
    69dc:	e0f7      	b.n	6bce <f_write+0x29a>
					clst = fp->sclust;		/* Follow from the origin */
    69de:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
    69e0:	2b00      	cmp	r3, #0
    69e2:	d100      	bne.n	69e6 <f_write+0xb2>
    69e4:	e105      	b.n	6bf2 <f_write+0x2be>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    69e6:	2b01      	cmp	r3, #1
    69e8:	d100      	bne.n	69ec <f_write+0xb8>
    69ea:	e10e      	b.n	6c0a <f_write+0x2d6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    69ec:	1c5a      	adds	r2, r3, #1
    69ee:	d100      	bne.n	69f2 <f_write+0xbe>
    69f0:	e111      	b.n	6c16 <f_write+0x2e2>
    69f2:	6820      	ldr	r0, [r4, #0]
				fp->clust = clst;			/* Update current cluster */
    69f4:	6163      	str	r3, [r4, #20]
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
    69f6:	2540      	movs	r5, #64	; 0x40
    69f8:	79a2      	ldrb	r2, [r4, #6]
    69fa:	4215      	tst	r5, r2
    69fc:	d000      	beq.n	6a00 <f_write+0xcc>
    69fe:	e0c6      	b.n	6b8e <f_write+0x25a>
	clst -= 2;
    6a00:	6963      	ldr	r3, [r4, #20]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    6a02:	6981      	ldr	r1, [r0, #24]
	clst -= 2;
    6a04:	3b02      	subs	r3, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    6a06:	3902      	subs	r1, #2
    6a08:	428b      	cmp	r3, r1
    6a0a:	d300      	bcc.n	6a0e <f_write+0xda>
    6a0c:	e0f7      	b.n	6bfe <f_write+0x2ca>
	return clst * fs->csize + fs->database;
    6a0e:	6a85      	ldr	r5, [r0, #40]	; 0x28
    6a10:	7881      	ldrb	r1, [r0, #2]
    6a12:	46aa      	mov	sl, r5
    6a14:	434b      	muls	r3, r1
    6a16:	9301      	str	r3, [sp, #4]
    6a18:	4453      	add	r3, sl
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    6a1a:	2b00      	cmp	r3, #0
    6a1c:	d100      	bne.n	6a20 <f_write+0xec>
    6a1e:	e0ee      	b.n	6bfe <f_write+0x2ca>
			sect += csect;
    6a20:	444b      	add	r3, r9
    6a22:	9300      	str	r3, [sp, #0]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    6a24:	4643      	mov	r3, r8
    6a26:	0a5d      	lsrs	r5, r3, #9
			if (cc) {						/* Write maximum contiguous sectors directly */
    6a28:	d046      	beq.n	6ab8 <f_write+0x184>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    6a2a:	464b      	mov	r3, r9
    6a2c:	195b      	adds	r3, r3, r5
    6a2e:	428b      	cmp	r3, r1
    6a30:	d901      	bls.n	6a36 <f_write+0x102>
					cc = fp->fs->csize - csect;
    6a32:	464b      	mov	r3, r9
    6a34:	1acd      	subs	r5, r1, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    6a36:	b2eb      	uxtb	r3, r5
    6a38:	7840      	ldrb	r0, [r0, #1]
    6a3a:	9a00      	ldr	r2, [sp, #0]
    6a3c:	0031      	movs	r1, r6
    6a3e:	4f7a      	ldr	r7, [pc, #488]	; (6c28 <f_write+0x2f4>)
    6a40:	47b8      	blx	r7
    6a42:	2800      	cmp	r0, #0
    6a44:	d000      	beq.n	6a48 <f_write+0x114>
    6a46:	e0bb      	b.n	6bc0 <f_write+0x28c>
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
    6a48:	69a3      	ldr	r3, [r4, #24]
    6a4a:	9a00      	ldr	r2, [sp, #0]
    6a4c:	1a9f      	subs	r7, r3, r2
    6a4e:	42bd      	cmp	r5, r7
    6a50:	d92f      	bls.n	6ab2 <f_write+0x17e>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
    6a52:	027f      	lsls	r7, r7, #9
    6a54:	19f1      	adds	r1, r6, r7
    6a56:	9100      	str	r1, [sp, #0]
    6a58:	4649      	mov	r1, r9
    6a5a:	1a5b      	subs	r3, r3, r1
    6a5c:	4651      	mov	r1, sl
    6a5e:	0022      	movs	r2, r4
    6a60:	0007      	movs	r7, r0
    6a62:	1a5b      	subs	r3, r3, r1
    6a64:	9901      	ldr	r1, [sp, #4]
    6a66:	3224      	adds	r2, #36	; 0x24
    6a68:	1a5b      	subs	r3, r3, r1
    6a6a:	025b      	lsls	r3, r3, #9
    6a6c:	18f1      	adds	r1, r6, r3
    6a6e:	3304      	adds	r3, #4
    6a70:	18f3      	adds	r3, r6, r3
    6a72:	429a      	cmp	r2, r3
    6a74:	4147      	adcs	r7, r0
    6a76:	003b      	movs	r3, r7
    6a78:	2728      	movs	r7, #40	; 0x28
    6a7a:	46bc      	mov	ip, r7
    6a7c:	44a4      	add	ip, r4
    6a7e:	4667      	mov	r7, ip
    6a80:	42b9      	cmp	r1, r7
    6a82:	4140      	adcs	r0, r0
    6a84:	4318      	orrs	r0, r3
    6a86:	b2c0      	uxtb	r0, r0
    6a88:	2800      	cmp	r0, #0
    6a8a:	d100      	bne.n	6a8e <f_write+0x15a>
    6a8c:	e0a7      	b.n	6bde <f_write+0x2aa>
    6a8e:	0013      	movs	r3, r2
    6a90:	430b      	orrs	r3, r1
    6a92:	079b      	lsls	r3, r3, #30
    6a94:	d000      	beq.n	6a98 <f_write+0x164>
    6a96:	e0a2      	b.n	6bde <f_write+0x2aa>
    6a98:	0013      	movs	r3, r2
    6a9a:	000a      	movs	r2, r1
    6a9c:	2189      	movs	r1, #137	; 0x89
    6a9e:	0089      	lsls	r1, r1, #2
    6aa0:	1860      	adds	r0, r4, r1
		*d++ = *s++;
    6aa2:	ca02      	ldmia	r2!, {r1}
    6aa4:	c302      	stmia	r3!, {r1}
    6aa6:	4283      	cmp	r3, r0
    6aa8:	d1fb      	bne.n	6aa2 <f_write+0x16e>
					fp->flag &= ~FA__DIRTY;
    6aaa:	2240      	movs	r2, #64	; 0x40
    6aac:	79a3      	ldrb	r3, [r4, #6]
    6aae:	4393      	bics	r3, r2
    6ab0:	71a3      	strb	r3, [r4, #6]
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    6ab2:	026d      	lsls	r5, r5, #9
    6ab4:	68a3      	ldr	r3, [r4, #8]
				continue;
    6ab6:	e051      	b.n	6b5c <f_write+0x228>
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
    6ab8:	69a3      	ldr	r3, [r4, #24]
    6aba:	9a00      	ldr	r2, [sp, #0]
    6abc:	429a      	cmp	r2, r3
    6abe:	d07d      	beq.n	6bbc <f_write+0x288>
				if (fp->fptr < fp->fsize &&
    6ac0:	68a3      	ldr	r3, [r4, #8]
    6ac2:	68e2      	ldr	r2, [r4, #12]
    6ac4:	4293      	cmp	r3, r2
    6ac6:	d370      	bcc.n	6baa <f_write+0x276>
			fp->dsect = sect;
    6ac8:	9a00      	ldr	r2, [sp, #0]
    6aca:	05db      	lsls	r3, r3, #23
    6acc:	61a2      	str	r2, [r4, #24]
    6ace:	0ddb      	lsrs	r3, r3, #23
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    6ad0:	2580      	movs	r5, #128	; 0x80
    6ad2:	00ad      	lsls	r5, r5, #2
    6ad4:	1aed      	subs	r5, r5, r3
    6ad6:	4545      	cmp	r5, r8
    6ad8:	d900      	bls.n	6adc <f_write+0x1a8>
    6ada:	4645      	mov	r5, r8
    6adc:	2100      	movs	r1, #0
    6ade:	000f      	movs	r7, r1
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    6ae0:	001a      	movs	r2, r3
    6ae2:	3328      	adds	r3, #40	; 0x28
    6ae4:	18e3      	adds	r3, r4, r3
    6ae6:	429e      	cmp	r6, r3
    6ae8:	414f      	adcs	r7, r1
    6aea:	3224      	adds	r2, #36	; 0x24
    6aec:	003b      	movs	r3, r7
    6aee:	18a2      	adds	r2, r4, r2
    6af0:	1d37      	adds	r7, r6, #4
    6af2:	42ba      	cmp	r2, r7
    6af4:	4149      	adcs	r1, r1
    6af6:	4319      	orrs	r1, r3
    6af8:	2309      	movs	r3, #9
    6afa:	42ab      	cmp	r3, r5
    6afc:	419b      	sbcs	r3, r3
    6afe:	425b      	negs	r3, r3
	while (cnt--)
    6b00:	1e68      	subs	r0, r5, #1
    6b02:	420b      	tst	r3, r1
    6b04:	d03c      	beq.n	6b80 <f_write+0x24c>
    6b06:	0013      	movs	r3, r2
    6b08:	4333      	orrs	r3, r6
    6b0a:	079b      	lsls	r3, r3, #30
    6b0c:	d138      	bne.n	6b80 <f_write+0x24c>
    6b0e:	1f2b      	subs	r3, r5, #4
    6b10:	089b      	lsrs	r3, r3, #2
    6b12:	3301      	adds	r3, #1
    6b14:	0099      	lsls	r1, r3, #2
    6b16:	468c      	mov	ip, r1
    6b18:	2802      	cmp	r0, #2
    6b1a:	d92f      	bls.n	6b7c <f_write+0x248>
    6b1c:	2100      	movs	r1, #0
    6b1e:	2700      	movs	r7, #0
    6b20:	4681      	mov	r9, r0
		*d++ = *s++;
    6b22:	5870      	ldr	r0, [r6, r1]
    6b24:	3701      	adds	r7, #1
    6b26:	5050      	str	r0, [r2, r1]
    6b28:	3104      	adds	r1, #4
    6b2a:	42bb      	cmp	r3, r7
    6b2c:	d8f9      	bhi.n	6b22 <f_write+0x1ee>
    6b2e:	4648      	mov	r0, r9
    6b30:	4663      	mov	r3, ip
    6b32:	4661      	mov	r1, ip
    6b34:	4462      	add	r2, ip
    6b36:	18f3      	adds	r3, r6, r3
    6b38:	1a40      	subs	r0, r0, r1
    6b3a:	45ac      	cmp	ip, r5
    6b3c:	d009      	beq.n	6b52 <f_write+0x21e>
    6b3e:	7819      	ldrb	r1, [r3, #0]
    6b40:	7011      	strb	r1, [r2, #0]
	while (cnt--)
    6b42:	2800      	cmp	r0, #0
    6b44:	d005      	beq.n	6b52 <f_write+0x21e>
		*d++ = *s++;
    6b46:	7859      	ldrb	r1, [r3, #1]
    6b48:	7051      	strb	r1, [r2, #1]
	while (cnt--)
    6b4a:	2801      	cmp	r0, #1
    6b4c:	d001      	beq.n	6b52 <f_write+0x21e>
		*d++ = *s++;
    6b4e:	789b      	ldrb	r3, [r3, #2]
    6b50:	7093      	strb	r3, [r2, #2]
		fp->flag |= FA__DIRTY;
    6b52:	2140      	movs	r1, #64	; 0x40
    6b54:	79a2      	ldrb	r2, [r4, #6]
    6b56:	68a3      	ldr	r3, [r4, #8]
    6b58:	430a      	orrs	r2, r1
    6b5a:	71a2      	strb	r2, [r4, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    6b5c:	18eb      	adds	r3, r5, r3
    6b5e:	60a3      	str	r3, [r4, #8]
    6b60:	465b      	mov	r3, fp
    6b62:	465a      	mov	r2, fp
    6b64:	681b      	ldr	r3, [r3, #0]
    6b66:	1976      	adds	r6, r6, r5
    6b68:	195b      	adds	r3, r3, r5
    6b6a:	6013      	str	r3, [r2, #0]
    6b6c:	4643      	mov	r3, r8
    6b6e:	1b5b      	subs	r3, r3, r5
    6b70:	4698      	mov	r8, r3
	for ( ;  btw;							/* Repeat until all data written */
    6b72:	d000      	beq.n	6b76 <f_write+0x242>
    6b74:	e722      	b.n	69bc <f_write+0x88>
    6b76:	68e2      	ldr	r2, [r4, #12]
    6b78:	79a3      	ldrb	r3, [r4, #6]
    6b7a:	e710      	b.n	699e <f_write+0x6a>
	while (cnt--)
    6b7c:	0033      	movs	r3, r6
    6b7e:	e7de      	b.n	6b3e <f_write+0x20a>
    6b80:	2300      	movs	r3, #0
		*d++ = *s++;
    6b82:	5cf1      	ldrb	r1, [r6, r3]
    6b84:	54d1      	strb	r1, [r2, r3]
    6b86:	3301      	adds	r3, #1
	while (cnt--)
    6b88:	429d      	cmp	r5, r3
    6b8a:	d1fa      	bne.n	6b82 <f_write+0x24e>
    6b8c:	e7e1      	b.n	6b52 <f_write+0x21e>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    6b8e:	0021      	movs	r1, r4
    6b90:	69a2      	ldr	r2, [r4, #24]
    6b92:	7840      	ldrb	r0, [r0, #1]
    6b94:	2301      	movs	r3, #1
    6b96:	3124      	adds	r1, #36	; 0x24
    6b98:	4f23      	ldr	r7, [pc, #140]	; (6c28 <f_write+0x2f4>)
    6b9a:	47b8      	blx	r7
					ABORT(fp->fs, FR_DISK_ERR);
    6b9c:	79a2      	ldrb	r2, [r4, #6]
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    6b9e:	2800      	cmp	r0, #0
    6ba0:	d10f      	bne.n	6bc2 <f_write+0x28e>
				fp->flag &= ~FA__DIRTY;
    6ba2:	43aa      	bics	r2, r5
    6ba4:	71a2      	strb	r2, [r4, #6]
    6ba6:	6820      	ldr	r0, [r4, #0]
    6ba8:	e72a      	b.n	6a00 <f_write+0xcc>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
    6baa:	0021      	movs	r1, r4
    6bac:	7840      	ldrb	r0, [r0, #1]
    6bae:	2301      	movs	r3, #1
    6bb0:	9a00      	ldr	r2, [sp, #0]
    6bb2:	3124      	adds	r1, #36	; 0x24
    6bb4:	4d1d      	ldr	r5, [pc, #116]	; (6c2c <f_write+0x2f8>)
    6bb6:	47a8      	blx	r5
				if (fp->fptr < fp->fsize &&
    6bb8:	2800      	cmp	r0, #0
    6bba:	d101      	bne.n	6bc0 <f_write+0x28c>
    6bbc:	68a3      	ldr	r3, [r4, #8]
    6bbe:	e783      	b.n	6ac8 <f_write+0x194>
					ABORT(fp->fs, FR_DISK_ERR);
    6bc0:	79a2      	ldrb	r2, [r4, #6]
    6bc2:	2380      	movs	r3, #128	; 0x80
    6bc4:	425b      	negs	r3, r3
    6bc6:	4313      	orrs	r3, r2
    6bc8:	71a3      	strb	r3, [r4, #6]
    6bca:	2001      	movs	r0, #1
    6bcc:	e6c7      	b.n	695e <f_write+0x2a>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    6bce:	4b18      	ldr	r3, [pc, #96]	; (6c30 <f_write+0x2fc>)
    6bd0:	6961      	ldr	r1, [r4, #20]
    6bd2:	4798      	blx	r3
    6bd4:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    6bd6:	2b00      	cmp	r3, #0
    6bd8:	d000      	beq.n	6bdc <f_write+0x2a8>
    6bda:	e704      	b.n	69e6 <f_write+0xb2>
    6bdc:	e7cb      	b.n	6b76 <f_write+0x242>
	while (cnt--)
    6bde:	2080      	movs	r0, #128	; 0x80
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
    6be0:	2300      	movs	r3, #0
	while (cnt--)
    6be2:	9f00      	ldr	r7, [sp, #0]
    6be4:	0080      	lsls	r0, r0, #2
		*d++ = *s++;
    6be6:	5cf9      	ldrb	r1, [r7, r3]
    6be8:	54d1      	strb	r1, [r2, r3]
    6bea:	3301      	adds	r3, #1
	while (cnt--)
    6bec:	4283      	cmp	r3, r0
    6bee:	d1fa      	bne.n	6be6 <f_write+0x2b2>
    6bf0:	e75b      	b.n	6aaa <f_write+0x176>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    6bf2:	4b0f      	ldr	r3, [pc, #60]	; (6c30 <f_write+0x2fc>)
    6bf4:	2100      	movs	r1, #0
    6bf6:	4798      	blx	r3
    6bf8:	0003      	movs	r3, r0
    6bfa:	6120      	str	r0, [r4, #16]
    6bfc:	e7eb      	b.n	6bd6 <f_write+0x2a2>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    6bfe:	2380      	movs	r3, #128	; 0x80
    6c00:	425b      	negs	r3, r3
    6c02:	431a      	orrs	r2, r3
    6c04:	71a2      	strb	r2, [r4, #6]
    6c06:	2002      	movs	r0, #2
    6c08:	e6a9      	b.n	695e <f_write+0x2a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    6c0a:	79a2      	ldrb	r2, [r4, #6]
    6c0c:	3b81      	subs	r3, #129	; 0x81
    6c0e:	4313      	orrs	r3, r2
    6c10:	71a3      	strb	r3, [r4, #6]
    6c12:	2002      	movs	r0, #2
    6c14:	e6a3      	b.n	695e <f_write+0x2a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    6c16:	79a2      	ldrb	r2, [r4, #6]
    6c18:	3b7f      	subs	r3, #127	; 0x7f
    6c1a:	4313      	orrs	r3, r2
    6c1c:	71a3      	strb	r3, [r4, #6]
    6c1e:	2001      	movs	r0, #1
    6c20:	e69d      	b.n	695e <f_write+0x2a>
    6c22:	46c0      	nop			; (mov r8, r8)
    6c24:	00003d1d 	.word	0x00003d1d
    6c28:	00003dc1 	.word	0x00003dc1
    6c2c:	00003d3d 	.word	0x00003d3d
    6c30:	00004b51 	.word	0x00004b51

00006c34 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    6c34:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c36:	46d6      	mov	lr, sl
    6c38:	464f      	mov	r7, r9
    6c3a:	4646      	mov	r6, r8
    6c3c:	b5c0      	push	{r6, r7, lr}
	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    6c3e:	6803      	ldr	r3, [r0, #0]
{
    6c40:	0004      	movs	r4, r0
	if (!fs || !fs->fs_type || fs->id != id)
    6c42:	2b00      	cmp	r3, #0
    6c44:	d063      	beq.n	6d0e <f_close+0xda>
    6c46:	781a      	ldrb	r2, [r3, #0]
		return FR_INVALID_OBJECT;
    6c48:	2009      	movs	r0, #9
	if (!fs || !fs->fs_type || fs->id != id)
    6c4a:	2a00      	cmp	r2, #0
    6c4c:	d104      	bne.n	6c58 <f_close+0x24>
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	return res;
#endif
}
    6c4e:	bc1c      	pop	{r2, r3, r4}
    6c50:	4690      	mov	r8, r2
    6c52:	4699      	mov	r9, r3
    6c54:	46a2      	mov	sl, r4
    6c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!fs || !fs->fs_type || fs->id != id)
    6c58:	88a1      	ldrh	r1, [r4, #4]
    6c5a:	88da      	ldrh	r2, [r3, #6]
    6c5c:	4291      	cmp	r1, r2
    6c5e:	d1f6      	bne.n	6c4e <f_close+0x1a>
	if (disk_status(fs->drv) & STA_NOINIT)
    6c60:	7858      	ldrb	r0, [r3, #1]
    6c62:	4b44      	ldr	r3, [pc, #272]	; (6d74 <f_close+0x140>)
    6c64:	4798      	blx	r3
    6c66:	0003      	movs	r3, r0
		return FR_NOT_READY;
    6c68:	2003      	movs	r0, #3
	if (disk_status(fs->drv) & STA_NOINIT)
    6c6a:	07db      	lsls	r3, r3, #31
    6c6c:	d4ef      	bmi.n	6c4e <f_close+0x1a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    6c6e:	79a3      	ldrb	r3, [r4, #6]
    6c70:	069a      	lsls	r2, r3, #26
    6c72:	d548      	bpl.n	6d06 <f_close+0xd2>
			if (fp->flag & FA__DIRTY) {
    6c74:	2540      	movs	r5, #64	; 0x40
    6c76:	421d      	tst	r5, r3
    6c78:	d00c      	beq.n	6c94 <f_close+0x60>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    6c7a:	0021      	movs	r1, r4
    6c7c:	6823      	ldr	r3, [r4, #0]
    6c7e:	69a2      	ldr	r2, [r4, #24]
    6c80:	7858      	ldrb	r0, [r3, #1]
    6c82:	3124      	adds	r1, #36	; 0x24
    6c84:	2301      	movs	r3, #1
    6c86:	4e3c      	ldr	r6, [pc, #240]	; (6d78 <f_close+0x144>)
    6c88:	47b0      	blx	r6
    6c8a:	2800      	cmp	r0, #0
    6c8c:	d14d      	bne.n	6d2a <f_close+0xf6>
				fp->flag &= ~FA__DIRTY;
    6c8e:	79a3      	ldrb	r3, [r4, #6]
    6c90:	43ab      	bics	r3, r5
    6c92:	71a3      	strb	r3, [r4, #6]
			res = move_window(fp->fs, fp->dir_sect);
    6c94:	6825      	ldr	r5, [r4, #0]
    6c96:	69e3      	ldr	r3, [r4, #28]
	wsect = fs->winsect;
    6c98:	6aee      	ldr	r6, [r5, #44]	; 0x2c
			res = move_window(fp->fs, fp->dir_sect);
    6c9a:	4698      	mov	r8, r3
	if (wsect != sector) {	/* Changed current window */
    6c9c:	42b3      	cmp	r3, r6
    6c9e:	d005      	beq.n	6cac <f_close+0x78>
		if (fs->wflag) {	/* Write back dirty window if needed */
    6ca0:	792b      	ldrb	r3, [r5, #4]
    6ca2:	2b00      	cmp	r3, #0
    6ca4:	d135      	bne.n	6d12 <f_close+0xde>
		if (sector) {
    6ca6:	4643      	mov	r3, r8
    6ca8:	2b00      	cmp	r3, #0
    6caa:	d140      	bne.n	6d2e <f_close+0xfa>
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    6cac:	2220      	movs	r2, #32
				dir = fp->dir_ptr;
    6cae:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    6cb0:	7aeb      	ldrb	r3, [r5, #11]
    6cb2:	4313      	orrs	r3, r2
    6cb4:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    6cb6:	7b23      	ldrb	r3, [r4, #12]
    6cb8:	772b      	strb	r3, [r5, #28]
    6cba:	89a3      	ldrh	r3, [r4, #12]
    6cbc:	0a1b      	lsrs	r3, r3, #8
    6cbe:	776b      	strb	r3, [r5, #29]
    6cc0:	89e3      	ldrh	r3, [r4, #14]
    6cc2:	77ab      	strb	r3, [r5, #30]
    6cc4:	7be3      	ldrb	r3, [r4, #15]
    6cc6:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    6cc8:	7c23      	ldrb	r3, [r4, #16]
    6cca:	76ab      	strb	r3, [r5, #26]
    6ccc:	8a23      	ldrh	r3, [r4, #16]
    6cce:	0a1b      	lsrs	r3, r3, #8
    6cd0:	76eb      	strb	r3, [r5, #27]
    6cd2:	8a63      	ldrh	r3, [r4, #18]
    6cd4:	752b      	strb	r3, [r5, #20]
    6cd6:	8a63      	ldrh	r3, [r4, #18]
    6cd8:	0a1b      	lsrs	r3, r3, #8
    6cda:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
    6cdc:	4b27      	ldr	r3, [pc, #156]	; (6d7c <f_close+0x148>)
    6cde:	4798      	blx	r3
				fp->flag &= ~FA__WRITTEN;
    6ce0:	2220      	movs	r2, #32
				ST_DWORD(dir+DIR_WrtTime, tim);
    6ce2:	0a03      	lsrs	r3, r0, #8
    6ce4:	75a8      	strb	r0, [r5, #22]
    6ce6:	75eb      	strb	r3, [r5, #23]
    6ce8:	0c03      	lsrs	r3, r0, #16
    6cea:	0e00      	lsrs	r0, r0, #24
    6cec:	762b      	strb	r3, [r5, #24]
    6cee:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
    6cf0:	79a3      	ldrb	r3, [r4, #6]
    6cf2:	4393      	bics	r3, r2
    6cf4:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
    6cf6:	2301      	movs	r3, #1
    6cf8:	6822      	ldr	r2, [r4, #0]
    6cfa:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
    6cfc:	6820      	ldr	r0, [r4, #0]
    6cfe:	4b20      	ldr	r3, [pc, #128]	; (6d80 <f_close+0x14c>)
    6d00:	4798      	blx	r3
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    6d02:	2800      	cmp	r0, #0
    6d04:	d1a3      	bne.n	6c4e <f_close+0x1a>
    6d06:	2300      	movs	r3, #0
    6d08:	2000      	movs	r0, #0
    6d0a:	6023      	str	r3, [r4, #0]
    6d0c:	e79f      	b.n	6c4e <f_close+0x1a>
		return FR_INVALID_OBJECT;
    6d0e:	2009      	movs	r0, #9
    6d10:	e79d      	b.n	6c4e <f_close+0x1a>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    6d12:	2330      	movs	r3, #48	; 0x30
    6d14:	4699      	mov	r9, r3
    6d16:	4f18      	ldr	r7, [pc, #96]	; (6d78 <f_close+0x144>)
    6d18:	44a9      	add	r9, r5
    6d1a:	7868      	ldrb	r0, [r5, #1]
    6d1c:	3b2f      	subs	r3, #47	; 0x2f
    6d1e:	0032      	movs	r2, r6
    6d20:	4649      	mov	r1, r9
    6d22:	46ba      	mov	sl, r7
    6d24:	47b8      	blx	r7
    6d26:	2800      	cmp	r0, #0
    6d28:	d00d      	beq.n	6d46 <f_close+0x112>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
    6d2a:	2001      	movs	r0, #1
    6d2c:	e78f      	b.n	6c4e <f_close+0x1a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    6d2e:	0029      	movs	r1, r5
    6d30:	7868      	ldrb	r0, [r5, #1]
    6d32:	2301      	movs	r3, #1
    6d34:	4642      	mov	r2, r8
    6d36:	3130      	adds	r1, #48	; 0x30
    6d38:	4e12      	ldr	r6, [pc, #72]	; (6d84 <f_close+0x150>)
    6d3a:	47b0      	blx	r6
    6d3c:	2800      	cmp	r0, #0
    6d3e:	d1f4      	bne.n	6d2a <f_close+0xf6>
			fs->winsect = sector;
    6d40:	4643      	mov	r3, r8
    6d42:	62eb      	str	r3, [r5, #44]	; 0x2c
    6d44:	e7b2      	b.n	6cac <f_close+0x78>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    6d46:	69eb      	ldr	r3, [r5, #28]
    6d48:	6a2a      	ldr	r2, [r5, #32]
			fs->wflag = 0;
    6d4a:	7128      	strb	r0, [r5, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    6d4c:	189a      	adds	r2, r3, r2
    6d4e:	4296      	cmp	r6, r2
    6d50:	d2a9      	bcs.n	6ca6 <f_close+0x72>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    6d52:	78ef      	ldrb	r7, [r5, #3]
    6d54:	2f01      	cmp	r7, #1
    6d56:	d801      	bhi.n	6d5c <f_close+0x128>
    6d58:	e7a5      	b.n	6ca6 <f_close+0x72>
    6d5a:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
    6d5c:	18f6      	adds	r6, r6, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    6d5e:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
    6d60:	7868      	ldrb	r0, [r5, #1]
    6d62:	2301      	movs	r3, #1
    6d64:	0032      	movs	r2, r6
    6d66:	4649      	mov	r1, r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    6d68:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
    6d6a:	47d0      	blx	sl
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    6d6c:	2f01      	cmp	r7, #1
    6d6e:	d1f4      	bne.n	6d5a <f_close+0x126>
    6d70:	e799      	b.n	6ca6 <f_close+0x72>
    6d72:	46c0      	nop			; (mov r8, r8)
    6d74:	00003d1d 	.word	0x00003d1d
    6d78:	00003dc1 	.word	0x00003dc1
    6d7c:	00003eb1 	.word	0x00003eb1
    6d80:	00003f8d 	.word	0x00003f8d
    6d84:	00003d3d 	.word	0x00003d3d

00006d88 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    6d88:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d8a:	4646      	mov	r6, r8
    6d8c:	46d6      	mov	lr, sl
    6d8e:	464f      	mov	r7, r9
    6d90:	b5c0      	push	{r6, r7, lr}
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    6d92:	6803      	ldr	r3, [r0, #0]
{
    6d94:	0004      	movs	r4, r0
    6d96:	000e      	movs	r6, r1
	if (!fs || !fs->fs_type || fs->id != id)
    6d98:	2b00      	cmp	r3, #0
    6d9a:	d100      	bne.n	6d9e <f_lseek+0x16>
    6d9c:	e078      	b.n	6e90 <f_lseek+0x108>
    6d9e:	781a      	ldrb	r2, [r3, #0]
		return FR_INVALID_OBJECT;
    6da0:	2009      	movs	r0, #9
	if (!fs || !fs->fs_type || fs->id != id)
    6da2:	2a00      	cmp	r2, #0
    6da4:	d104      	bne.n	6db0 <f_lseek+0x28>
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    6da6:	bc1c      	pop	{r2, r3, r4}
    6da8:	4690      	mov	r8, r2
    6daa:	4699      	mov	r9, r3
    6dac:	46a2      	mov	sl, r4
    6dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!fs || !fs->fs_type || fs->id != id)
    6db0:	88a1      	ldrh	r1, [r4, #4]
    6db2:	88da      	ldrh	r2, [r3, #6]
    6db4:	4291      	cmp	r1, r2
    6db6:	d1f6      	bne.n	6da6 <f_lseek+0x1e>
	if (disk_status(fs->drv) & STA_NOINIT)
    6db8:	7858      	ldrb	r0, [r3, #1]
    6dba:	4b65      	ldr	r3, [pc, #404]	; (6f50 <f_lseek+0x1c8>)
    6dbc:	4798      	blx	r3
    6dbe:	0003      	movs	r3, r0
		return FR_NOT_READY;
    6dc0:	2003      	movs	r0, #3
	if (disk_status(fs->drv) & STA_NOINIT)
    6dc2:	07db      	lsls	r3, r3, #31
    6dc4:	d4ef      	bmi.n	6da6 <f_lseek+0x1e>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    6dc6:	79a3      	ldrb	r3, [r4, #6]
		LEAVE_FF(fp->fs, FR_INT_ERR);
    6dc8:	2002      	movs	r0, #2
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    6dca:	b25a      	sxtb	r2, r3
    6dcc:	2a00      	cmp	r2, #0
    6dce:	dbea      	blt.n	6da6 <f_lseek+0x1e>
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    6dd0:	68e2      	ldr	r2, [r4, #12]
    6dd2:	42b2      	cmp	r2, r6
    6dd4:	d202      	bcs.n	6ddc <f_lseek+0x54>
			 && !(fp->flag & FA_WRITE)
    6dd6:	4218      	tst	r0, r3
    6dd8:	d100      	bne.n	6ddc <f_lseek+0x54>
    6dda:	0016      	movs	r6, r2
		fp->fptr = nsect = 0;
    6ddc:	2300      	movs	r3, #0
		ifptr = fp->fptr;
    6dde:	68a5      	ldr	r5, [r4, #8]
    6de0:	2000      	movs	r0, #0
		fp->fptr = nsect = 0;
    6de2:	60a3      	str	r3, [r4, #8]
		if (ofs) {
    6de4:	2e00      	cmp	r6, #0
    6de6:	d0de      	beq.n	6da6 <f_lseek+0x1e>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    6de8:	6823      	ldr	r3, [r4, #0]
    6dea:	789f      	ldrb	r7, [r3, #2]
    6dec:	4698      	mov	r8, r3
    6dee:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
    6df0:	2d00      	cmp	r5, #0
    6df2:	d011      	beq.n	6e18 <f_lseek+0x90>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    6df4:	4b57      	ldr	r3, [pc, #348]	; (6f54 <f_lseek+0x1cc>)
    6df6:	0039      	movs	r1, r7
    6df8:	1e70      	subs	r0, r6, #1
    6dfa:	4699      	mov	r9, r3
    6dfc:	4798      	blx	r3
    6dfe:	3d01      	subs	r5, #1
    6e00:	4682      	mov	sl, r0
    6e02:	0039      	movs	r1, r7
    6e04:	0028      	movs	r0, r5
    6e06:	47c8      	blx	r9
			if (ifptr > 0 &&
    6e08:	4582      	cmp	sl, r0
    6e0a:	d305      	bcc.n	6e18 <f_lseek+0x90>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    6e0c:	427a      	negs	r2, r7
    6e0e:	402a      	ands	r2, r5
    6e10:	60a2      	str	r2, [r4, #8]
				ofs -= fp->fptr;
    6e12:	1ab6      	subs	r6, r6, r2
				clst = fp->clust;
    6e14:	6965      	ldr	r5, [r4, #20]
    6e16:	e003      	b.n	6e20 <f_lseek+0x98>
				clst = fp->sclust;						/* start from the first cluster */
    6e18:	6925      	ldr	r5, [r4, #16]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    6e1a:	2d00      	cmp	r5, #0
    6e1c:	d07c      	beq.n	6f18 <f_lseek+0x190>
				fp->clust = clst;
    6e1e:	6165      	str	r5, [r4, #20]
			if (clst != 0) {
    6e20:	2d00      	cmp	r5, #0
    6e22:	d137      	bne.n	6e94 <f_lseek+0x10c>
    6e24:	68a3      	ldr	r3, [r4, #8]
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    6e26:	05da      	lsls	r2, r3, #23
    6e28:	d021      	beq.n	6e6e <f_lseek+0xe6>
    6e2a:	69a2      	ldr	r2, [r4, #24]
    6e2c:	4295      	cmp	r5, r2
    6e2e:	d01e      	beq.n	6e6e <f_lseek+0xe6>
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
    6e30:	2340      	movs	r3, #64	; 0x40
    6e32:	4699      	mov	r9, r3
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    6e34:	0026      	movs	r6, r4
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
    6e36:	4649      	mov	r1, r9
    6e38:	79a3      	ldrb	r3, [r4, #6]
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    6e3a:	3624      	adds	r6, #36	; 0x24
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
    6e3c:	4219      	tst	r1, r3
    6e3e:	d00b      	beq.n	6e58 <f_lseek+0xd0>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    6e40:	6823      	ldr	r3, [r4, #0]
    6e42:	0031      	movs	r1, r6
    6e44:	7858      	ldrb	r0, [r3, #1]
    6e46:	4f44      	ldr	r7, [pc, #272]	; (6f58 <f_lseek+0x1d0>)
    6e48:	2301      	movs	r3, #1
    6e4a:	47b8      	blx	r7
    6e4c:	2800      	cmp	r0, #0
    6e4e:	d118      	bne.n	6e82 <f_lseek+0xfa>
				fp->flag &= ~FA__DIRTY;
    6e50:	464a      	mov	r2, r9
    6e52:	79a3      	ldrb	r3, [r4, #6]
    6e54:	4393      	bics	r3, r2
    6e56:	71a3      	strb	r3, [r4, #6]
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
    6e58:	6823      	ldr	r3, [r4, #0]
    6e5a:	0031      	movs	r1, r6
    6e5c:	7858      	ldrb	r0, [r3, #1]
    6e5e:	002a      	movs	r2, r5
    6e60:	2301      	movs	r3, #1
    6e62:	4e3e      	ldr	r6, [pc, #248]	; (6f5c <f_lseek+0x1d4>)
    6e64:	47b0      	blx	r6
    6e66:	2800      	cmp	r0, #0
    6e68:	d10b      	bne.n	6e82 <f_lseek+0xfa>
    6e6a:	68a3      	ldr	r3, [r4, #8]
			fp->dsect = nsect;
    6e6c:	61a5      	str	r5, [r4, #24]
    6e6e:	68e2      	ldr	r2, [r4, #12]
    6e70:	2000      	movs	r0, #0
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    6e72:	4293      	cmp	r3, r2
    6e74:	d997      	bls.n	6da6 <f_lseek+0x1e>
			fp->flag |= FA__WRITTEN;
    6e76:	2220      	movs	r2, #32
			fp->fsize = fp->fptr;
    6e78:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA__WRITTEN;
    6e7a:	79a3      	ldrb	r3, [r4, #6]
    6e7c:	4313      	orrs	r3, r2
    6e7e:	71a3      	strb	r3, [r4, #6]
    6e80:	e791      	b.n	6da6 <f_lseek+0x1e>
				ABORT(fp->fs, FR_DISK_ERR);
    6e82:	2380      	movs	r3, #128	; 0x80
    6e84:	79a2      	ldrb	r2, [r4, #6]
    6e86:	425b      	negs	r3, r3
    6e88:	4313      	orrs	r3, r2
    6e8a:	71a3      	strb	r3, [r4, #6]
    6e8c:	2001      	movs	r0, #1
    6e8e:	e78a      	b.n	6da6 <f_lseek+0x1e>
		return FR_INVALID_OBJECT;
    6e90:	2009      	movs	r0, #9
    6e92:	e788      	b.n	6da6 <f_lseek+0x1e>
				while (ofs > bcs) {						/* Cluster following loop */
    6e94:	42be      	cmp	r6, r7
    6e96:	d958      	bls.n	6f4a <f_lseek+0x1c2>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    6e98:	2302      	movs	r3, #2
    6e9a:	4698      	mov	r8, r3
    6e9c:	4b30      	ldr	r3, [pc, #192]	; (6f60 <f_lseek+0x1d8>)
    6e9e:	6820      	ldr	r0, [r4, #0]
    6ea0:	469a      	mov	sl, r3
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    6ea2:	4b30      	ldr	r3, [pc, #192]	; (6f64 <f_lseek+0x1dc>)
    6ea4:	4699      	mov	r9, r3
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    6ea6:	4642      	mov	r2, r8
    6ea8:	79a3      	ldrb	r3, [r4, #6]
    6eaa:	421a      	tst	r2, r3
    6eac:	d10a      	bne.n	6ec4 <f_lseek+0x13c>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    6eae:	2d01      	cmp	r5, #1
    6eb0:	d902      	bls.n	6eb8 <f_lseek+0x130>
    6eb2:	6982      	ldr	r2, [r0, #24]
    6eb4:	42aa      	cmp	r2, r5
    6eb6:	d82b      	bhi.n	6f10 <f_lseek+0x188>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    6eb8:	2280      	movs	r2, #128	; 0x80
    6eba:	4252      	negs	r2, r2
    6ebc:	4313      	orrs	r3, r2
    6ebe:	71a3      	strb	r3, [r4, #6]
    6ec0:	2002      	movs	r0, #2
    6ec2:	e770      	b.n	6da6 <f_lseek+0x1e>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    6ec4:	0029      	movs	r1, r5
    6ec6:	47c8      	blx	r9
    6ec8:	1e05      	subs	r5, r0, #0
						if (clst == 0) {				/* When disk gets full, clip file size */
    6eca:	d03b      	beq.n	6f44 <f_lseek+0x1bc>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    6ecc:	1c6b      	adds	r3, r5, #1
    6ece:	d0d8      	beq.n	6e82 <f_lseek+0xfa>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    6ed0:	2d01      	cmp	r5, #1
    6ed2:	d92c      	bls.n	6f2e <f_lseek+0x1a6>
    6ed4:	6820      	ldr	r0, [r4, #0]
    6ed6:	6983      	ldr	r3, [r0, #24]
    6ed8:	429d      	cmp	r5, r3
    6eda:	d228      	bcs.n	6f2e <f_lseek+0x1a6>
					fp->fptr += bcs;
    6edc:	68a3      	ldr	r3, [r4, #8]
					fp->clust = clst;
    6ede:	6165      	str	r5, [r4, #20]
					fp->fptr += bcs;
    6ee0:	18fb      	adds	r3, r7, r3
    6ee2:	60a3      	str	r3, [r4, #8]
					ofs -= bcs;
    6ee4:	1bf6      	subs	r6, r6, r7
				while (ofs > bcs) {						/* Cluster following loop */
    6ee6:	42b7      	cmp	r7, r6
    6ee8:	d3dd      	bcc.n	6ea6 <f_lseek+0x11e>
				fp->fptr += ofs;
    6eea:	18f3      	adds	r3, r6, r3
    6eec:	60a3      	str	r3, [r4, #8]
				if (ofs % SS(fp->fs)) {
    6eee:	05f2      	lsls	r2, r6, #23
    6ef0:	d026      	beq.n	6f40 <f_lseek+0x1b8>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    6ef2:	6821      	ldr	r1, [r4, #0]
	clst -= 2;
    6ef4:	3d02      	subs	r5, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    6ef6:	698a      	ldr	r2, [r1, #24]
    6ef8:	3a02      	subs	r2, #2
    6efa:	4295      	cmp	r5, r2
    6efc:	d219      	bcs.n	6f32 <f_lseek+0x1aa>
	return clst * fs->csize + fs->database;
    6efe:	788a      	ldrb	r2, [r1, #2]
    6f00:	4355      	muls	r5, r2
    6f02:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    6f04:	18ad      	adds	r5, r5, r2
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    6f06:	2d00      	cmp	r5, #0
    6f08:	d013      	beq.n	6f32 <f_lseek+0x1aa>
					nsect += ofs / SS(fp->fs);
    6f0a:	0a76      	lsrs	r6, r6, #9
    6f0c:	1975      	adds	r5, r6, r5
    6f0e:	e78a      	b.n	6e26 <f_lseek+0x9e>
    6f10:	0029      	movs	r1, r5
    6f12:	47d0      	blx	sl
    6f14:	0005      	movs	r5, r0
    6f16:	e7d9      	b.n	6ecc <f_lseek+0x144>
					clst = create_chain(fp->fs, 0);
    6f18:	2100      	movs	r1, #0
    6f1a:	4640      	mov	r0, r8
    6f1c:	4b11      	ldr	r3, [pc, #68]	; (6f64 <f_lseek+0x1dc>)
    6f1e:	4798      	blx	r3
    6f20:	0005      	movs	r5, r0
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    6f22:	2801      	cmp	r0, #1
    6f24:	d005      	beq.n	6f32 <f_lseek+0x1aa>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    6f26:	1c43      	adds	r3, r0, #1
    6f28:	d0ab      	beq.n	6e82 <f_lseek+0xfa>
					fp->sclust = clst;
    6f2a:	6120      	str	r0, [r4, #16]
    6f2c:	e777      	b.n	6e1e <f_lseek+0x96>
    6f2e:	79a3      	ldrb	r3, [r4, #6]
    6f30:	e7c2      	b.n	6eb8 <f_lseek+0x130>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    6f32:	2380      	movs	r3, #128	; 0x80
    6f34:	79a2      	ldrb	r2, [r4, #6]
    6f36:	425b      	negs	r3, r3
    6f38:	4313      	orrs	r3, r2
    6f3a:	71a3      	strb	r3, [r4, #6]
    6f3c:	2002      	movs	r0, #2
    6f3e:	e732      	b.n	6da6 <f_lseek+0x1e>
		fp->fptr = nsect = 0;
    6f40:	2500      	movs	r5, #0
    6f42:	e770      	b.n	6e26 <f_lseek+0x9e>
    6f44:	68a3      	ldr	r3, [r4, #8]
						if (clst == 0) {				/* When disk gets full, clip file size */
    6f46:	003e      	movs	r6, r7
    6f48:	e7cf      	b.n	6eea <f_lseek+0x162>
    6f4a:	68a3      	ldr	r3, [r4, #8]
    6f4c:	e7cd      	b.n	6eea <f_lseek+0x162>
    6f4e:	46c0      	nop			; (mov r8, r8)
    6f50:	00003d1d 	.word	0x00003d1d
    6f54:	0001cd1d 	.word	0x0001cd1d
    6f58:	00003dc1 	.word	0x00003dc1
    6f5c:	00003d3d 	.word	0x00003d3d
    6f60:	00004789 	.word	0x00004789
    6f64:	00004b51 	.word	0x00004b51

00006f68 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
    6f68:	0003      	movs	r3, r0
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
    6f6a:	287f      	cmp	r0, #127	; 0x7f
    6f6c:	d90e      	bls.n	6f8c <ff_convert+0x24>
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
    6f6e:	2900      	cmp	r1, #0
    6f70:	d10e      	bne.n	6f90 <ff_convert+0x28>
    6f72:	4a0c      	ldr	r2, [pc, #48]	; (6fa4 <ff_convert+0x3c>)
    6f74:	2300      	movs	r3, #0
    6f76:	e004      	b.n	6f82 <ff_convert+0x1a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
    6f78:	3301      	adds	r3, #1
    6f7a:	b29b      	uxth	r3, r3
    6f7c:	3202      	adds	r2, #2
    6f7e:	2b80      	cmp	r3, #128	; 0x80
    6f80:	d00e      	beq.n	6fa0 <ff_convert+0x38>
				if (src == Tbl[c]) break;
    6f82:	8811      	ldrh	r1, [r2, #0]
    6f84:	4281      	cmp	r1, r0
    6f86:	d1f7      	bne.n	6f78 <ff_convert+0x10>
    6f88:	3380      	adds	r3, #128	; 0x80
    6f8a:	b29b      	uxth	r3, r3
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    6f8c:	0018      	movs	r0, r3
    6f8e:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    6f90:	2300      	movs	r3, #0
    6f92:	28ff      	cmp	r0, #255	; 0xff
    6f94:	d8fa      	bhi.n	6f8c <ff_convert+0x24>
    6f96:	3880      	subs	r0, #128	; 0x80
    6f98:	4b02      	ldr	r3, [pc, #8]	; (6fa4 <ff_convert+0x3c>)
    6f9a:	0040      	lsls	r0, r0, #1
    6f9c:	5ac3      	ldrh	r3, [r0, r3]
    6f9e:	e7f5      	b.n	6f8c <ff_convert+0x24>
    6fa0:	2300      	movs	r3, #0
    6fa2:	e7f3      	b.n	6f8c <ff_convert+0x24>
    6fa4:	000247c0 	.word	0x000247c0

00006fa8 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    6fa8:	2861      	cmp	r0, #97	; 0x61
    6faa:	d010      	beq.n	6fce <ff_wtoupper+0x26>
    6fac:	2101      	movs	r1, #1
    6fae:	2262      	movs	r2, #98	; 0x62
    6fb0:	4b08      	ldr	r3, [pc, #32]	; (6fd4 <ff_wtoupper+0x2c>)
    6fb2:	3304      	adds	r3, #4
    6fb4:	4290      	cmp	r0, r2
    6fb6:	d006      	beq.n	6fc6 <ff_wtoupper+0x1e>
    6fb8:	3302      	adds	r3, #2
    6fba:	1e9a      	subs	r2, r3, #2
    6fbc:	8812      	ldrh	r2, [r2, #0]
    6fbe:	3101      	adds	r1, #1
    6fc0:	2a00      	cmp	r2, #0
    6fc2:	d1f7      	bne.n	6fb4 <ff_wtoupper+0xc>

	return tbl_lower[i] ? tbl_upper[i] : chr;
}
    6fc4:	4770      	bx	lr
    6fc6:	4b04      	ldr	r3, [pc, #16]	; (6fd8 <ff_wtoupper+0x30>)
    6fc8:	0049      	lsls	r1, r1, #1
    6fca:	5ac8      	ldrh	r0, [r1, r3]
    6fcc:	e7fa      	b.n	6fc4 <ff_wtoupper+0x1c>
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    6fce:	3820      	subs	r0, #32
    6fd0:	e7f8      	b.n	6fc4 <ff_wtoupper+0x1c>
    6fd2:	46c0      	nop			; (mov r8, r8)
    6fd4:	000248c0 	.word	0x000248c0
    6fd8:	00024aa0 	.word	0x00024aa0

00006fdc <backlightCustomAdjust>:


struct BACKLIGHT_COLOR * backlightCustomAdjust(char color, int8_t adjustment){
	uint8_t * colorPtr;
	
	switch (color){
    6fdc:	2862      	cmp	r0, #98	; 0x62
    6fde:	d017      	beq.n	7010 <backlightCustomAdjust+0x34>
    6fe0:	2867      	cmp	r0, #103	; 0x67
    6fe2:	d009      	beq.n	6ff8 <backlightCustomAdjust+0x1c>
		case 'r':
			colorPtr = &colorCustom.red;
    6fe4:	480c      	ldr	r0, [pc, #48]	; (7018 <backlightCustomAdjust+0x3c>)
    6fe6:	1d02      	adds	r2, r0, #4
			break;	
		default:
			colorPtr = &colorCustom.red;
	}
	
	if (adjustment>0){
    6fe8:	2900      	cmp	r1, #0
    6fea:	dd09      	ble.n	7000 <backlightCustomAdjust+0x24>
		if (*colorPtr < COLOR_MAX){
    6fec:	7813      	ldrb	r3, [r2, #0]
    6fee:	2b1d      	cmp	r3, #29
    6ff0:	d801      	bhi.n	6ff6 <backlightCustomAdjust+0x1a>
			(*colorPtr)++;
    6ff2:	3301      	adds	r3, #1
    6ff4:	7013      	strb	r3, [r2, #0]
	}
	
	return &colorCustom;
	
	
}
    6ff6:	4770      	bx	lr
			colorPtr = &colorCustom.green;
    6ff8:	4807      	ldr	r0, [pc, #28]	; (7018 <backlightCustomAdjust+0x3c>)
    6ffa:	1d82      	adds	r2, r0, #6
	if (adjustment>0){
    6ffc:	2900      	cmp	r1, #0
    6ffe:	dcf5      	bgt.n	6fec <backlightCustomAdjust+0x10>
	}else if (adjustment<0){
    7000:	2900      	cmp	r1, #0
    7002:	d0f8      	beq.n	6ff6 <backlightCustomAdjust+0x1a>
		if (*colorPtr>0){
    7004:	7813      	ldrb	r3, [r2, #0]
    7006:	2b00      	cmp	r3, #0
    7008:	d0f5      	beq.n	6ff6 <backlightCustomAdjust+0x1a>
			(*colorPtr)--;
    700a:	3b01      	subs	r3, #1
    700c:	7013      	strb	r3, [r2, #0]
    700e:	e7f2      	b.n	6ff6 <backlightCustomAdjust+0x1a>
			colorPtr = &colorCustom.blue;
    7010:	4801      	ldr	r0, [pc, #4]	; (7018 <backlightCustomAdjust+0x3c>)
    7012:	1d42      	adds	r2, r0, #5
    7014:	e7e8      	b.n	6fe8 <backlightCustomAdjust+0xc>
    7016:	46c0      	nop			; (mov r8, r8)
    7018:	200000d4 	.word	0x200000d4

0000701c <backlightColorToggle>:


void backlightColorToggle(struct BACKLIGHT_SETTING *blset){
    701c:	b5f0      	push	{r4, r5, r6, r7, lr}
    701e:	46d6      	mov	lr, sl
    7020:	464f      	mov	r7, r9
    7022:	4646      	mov	r6, r8
    7024:	b5c0      	push	{r6, r7, lr}
	blset->colorRef ++;
    7026:	7843      	ldrb	r3, [r0, #1]
void backlightColorToggle(struct BACKLIGHT_SETTING *blset){
    7028:	b084      	sub	sp, #16
	blset->colorRef ++;
    702a:	3301      	adds	r3, #1
    702c:	b2db      	uxtb	r3, r3
void backlightColorToggle(struct BACKLIGHT_SETTING *blset){
    702e:	0005      	movs	r5, r0

	if ((blset->colorRef) >= (sizeof(colorOptions)/sizeof(&colorCustom))){
    7030:	2b06      	cmp	r3, #6
    7032:	d900      	bls.n	7036 <backlightColorToggle+0x1a>
		blset->colorRef = 1;
    7034:	2301      	movs	r3, #1
void backlightOn(struct BACKLIGHT_SETTING *blset){
	uint8_t u8blue, u8green, u8red;
	float fred, fblue, fgreen, brightness;
	float scale;
	
	fred = colorOptions[blset->colorRef]->red;
    7036:	4a2e      	ldr	r2, [pc, #184]	; (70f0 <backlightColorToggle+0xd4>)
		blset->colorRef = 1;
    7038:	706b      	strb	r3, [r5, #1]
	fred = colorOptions[blset->colorRef]->red;
    703a:	009b      	lsls	r3, r3, #2
    703c:	589e      	ldr	r6, [r3, r2]
    703e:	4c2d      	ldr	r4, [pc, #180]	; (70f4 <backlightColorToggle+0xd8>)
    7040:	7930      	ldrb	r0, [r6, #4]
    7042:	47a0      	blx	r4
    7044:	1c07      	adds	r7, r0, #0
	fgreen = colorOptions[blset->colorRef]->green;
    7046:	79b0      	ldrb	r0, [r6, #6]
    7048:	47a0      	blx	r4
    704a:	4680      	mov	r8, r0
	fblue = colorOptions[blset->colorRef]->blue;	
    704c:	7970      	ldrb	r0, [r6, #5]
    704e:	47a0      	blx	r4
    7050:	4682      	mov	sl, r0
	brightness = blset->brightness;
	
	
	scale = 1/(fred+fgreen+fblue);
    7052:	4e29      	ldr	r6, [pc, #164]	; (70f8 <backlightColorToggle+0xdc>)
    7054:	4641      	mov	r1, r8
    7056:	1c38      	adds	r0, r7, #0
    7058:	47b0      	blx	r6
    705a:	4651      	mov	r1, sl
    705c:	47b0      	blx	r6
    705e:	1c01      	adds	r1, r0, #0
    7060:	20fe      	movs	r0, #254	; 0xfe
    7062:	4e26      	ldr	r6, [pc, #152]	; (70fc <backlightColorToggle+0xe0>)
    7064:	0580      	lsls	r0, r0, #22
    7066:	47b0      	blx	r6
    7068:	4681      	mov	r9, r0
	brightness = blset->brightness;
    706a:	7828      	ldrb	r0, [r5, #0]
    706c:	47a0      	blx	r4
	scale = (scale*brightness)/BRIGHT_MAX;
    706e:	4d24      	ldr	r5, [pc, #144]	; (7100 <backlightColorToggle+0xe4>)
	brightness = blset->brightness;
    7070:	1c01      	adds	r1, r0, #0
	scale = (scale*brightness)/BRIGHT_MAX;
    7072:	4648      	mov	r0, r9
    7074:	47a8      	blx	r5
    7076:	4923      	ldr	r1, [pc, #140]	; (7104 <backlightColorToggle+0xe8>)
    7078:	47b0      	blx	r6
	fred = scale*fred;
    707a:	1c01      	adds	r1, r0, #0
	scale = (scale*brightness)/BRIGHT_MAX;
    707c:	4681      	mov	r9, r0
	fred = scale*fred;
    707e:	1c38      	adds	r0, r7, #0
    7080:	47a8      	blx	r5
	fblue = scale*fblue;
	fgreen = scale*fgreen;
	
	u8red = fred*LED_MAX;
    7082:	4921      	ldr	r1, [pc, #132]	; (7108 <backlightColorToggle+0xec>)
    7084:	47a8      	blx	r5
    7086:	4f21      	ldr	r7, [pc, #132]	; (710c <backlightColorToggle+0xf0>)
    7088:	47b8      	blx	r7
	fblue = scale*fblue;
    708a:	4649      	mov	r1, r9
	u8red = fred*LED_MAX;
    708c:	b2c6      	uxtb	r6, r0
	fblue = scale*fblue;
    708e:	4650      	mov	r0, sl
    7090:	47a8      	blx	r5
	u8blue = fblue*LED_MAX;
    7092:	491d      	ldr	r1, [pc, #116]	; (7108 <backlightColorToggle+0xec>)
    7094:	47a8      	blx	r5
    7096:	47b8      	blx	r7
	if (u8blue>LED_MAX){u8blue = LED_MAX;}
	if (u8blue>LED_MAX){u8blue = LED_MAX;}
	
	uint16_t mes_len = 10;
	uint8_t temp_buf[mes_len];
	temp_buf[0]= 0x80;  //control register 0b10000000
    7098:	2380      	movs	r3, #128	; 0x80
    709a:	ac01      	add	r4, sp, #4
	u8blue = fblue*LED_MAX;
    709c:	b2c0      	uxtb	r0, r0
	temp_buf[0]= 0x80;  //control register 0b10000000
    709e:	7023      	strb	r3, [r4, #0]
	temp_buf[1]= 0x80; //Mode1: 0b10000000
    70a0:	7063      	strb	r3, [r4, #1]
	temp_buf[2]= 0x08; //Mode2: 0b00001000
    70a2:	3b78      	subs	r3, #120	; 0x78
    70a4:	70a3      	strb	r3, [r4, #2]
	temp_buf[3]= u8blue; //PWM0 - blue
    70a6:	1c03      	adds	r3, r0, #0
    70a8:	28e1      	cmp	r0, #225	; 0xe1
    70aa:	d901      	bls.n	70b0 <backlightColorToggle+0x94>
    70ac:	4b18      	ldr	r3, [pc, #96]	; (7110 <backlightColorToggle+0xf4>)
    70ae:	781b      	ldrb	r3, [r3, #0]
    70b0:	70e3      	strb	r3, [r4, #3]
	fgreen = scale*fgreen;
    70b2:	4649      	mov	r1, r9
    70b4:	4640      	mov	r0, r8
    70b6:	47a8      	blx	r5
	u8green = fgreen*LED_MAX;
    70b8:	4913      	ldr	r1, [pc, #76]	; (7108 <backlightColorToggle+0xec>)
    70ba:	47a8      	blx	r5
    70bc:	47b8      	blx	r7
	temp_buf[4]= u8green; //PWM1 - green
	temp_buf[5]= u8red; //PWM2 - red
    70be:	1c33      	adds	r3, r6, #0
	temp_buf[4]= u8green; //PWM1 - green
    70c0:	7120      	strb	r0, [r4, #4]
	temp_buf[5]= u8red; //PWM2 - red
    70c2:	2ee1      	cmp	r6, #225	; 0xe1
    70c4:	d901      	bls.n	70ca <backlightColorToggle+0xae>
    70c6:	4b12      	ldr	r3, [pc, #72]	; (7110 <backlightColorToggle+0xf4>)
    70c8:	781b      	ldrb	r3, [r3, #0]
    70ca:	7163      	strb	r3, [r4, #5]
	temp_buf[6]= 0x00; //PWM3
    70cc:	2300      	movs	r3, #0
    70ce:	71a3      	strb	r3, [r4, #6]
	temp_buf[7]= 0x00; //GRPPWM
    70d0:	71e3      	strb	r3, [r4, #7]
	temp_buf[8]= 0x00; //FRPFREQ
    70d2:	7223      	strb	r3, [r4, #8]
	temp_buf[9]= 0x2A; //LEDOUT: 0b00101010
    70d4:	332a      	adds	r3, #42	; 0x2a
    70d6:	7263      	strb	r3, [r4, #9]
	
	i2c_read_write(writep, led_add,temp_buf, mes_len);
    70d8:	0022      	movs	r2, r4
    70da:	3b20      	subs	r3, #32
    70dc:	2162      	movs	r1, #98	; 0x62
    70de:	2001      	movs	r0, #1
    70e0:	4c0c      	ldr	r4, [pc, #48]	; (7114 <backlightColorToggle+0xf8>)
    70e2:	47a0      	blx	r4
}
    70e4:	b004      	add	sp, #16
    70e6:	bc1c      	pop	{r2, r3, r4}
    70e8:	4690      	mov	r8, r2
    70ea:	4699      	mov	r9, r3
    70ec:	46a2      	mov	sl, r4
    70ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    70f0:	200000ec 	.word	0x200000ec
    70f4:	0001df91 	.word	0x0001df91
    70f8:	0001d235 	.word	0x0001d235
    70fc:	0001d559 	.word	0x0001d559
    7100:	0001d939 	.word	0x0001d939
    7104:	40a00000 	.word	0x40a00000
    7108:	43610000 	.word	0x43610000
    710c:	0001d1c9 	.word	0x0001d1c9
    7110:	00024c80 	.word	0x00024c80
    7114:	000131a9 	.word	0x000131a9

00007118 <backlightPlus>:
void backlightPlus(struct BACKLIGHT_SETTING *blset){
    7118:	b5f0      	push	{r4, r5, r6, r7, lr}
    711a:	46d6      	mov	lr, sl
    711c:	464f      	mov	r7, r9
    711e:	4646      	mov	r6, r8
    7120:	b5c0      	push	{r6, r7, lr}
	if ((blset->brightness) < BRIGHT_MAX){
    7122:	7804      	ldrb	r4, [r0, #0]
void backlightPlus(struct BACKLIGHT_SETTING *blset){
    7124:	b084      	sub	sp, #16
	if ((blset->brightness) < BRIGHT_MAX){
    7126:	2c04      	cmp	r4, #4
    7128:	d802      	bhi.n	7130 <backlightPlus+0x18>
		blset->brightness++;
    712a:	3401      	adds	r4, #1
    712c:	b2e4      	uxtb	r4, r4
    712e:	7004      	strb	r4, [r0, #0]
	fred = colorOptions[blset->colorRef]->red;
    7130:	7843      	ldrb	r3, [r0, #1]
    7132:	4a2e      	ldr	r2, [pc, #184]	; (71ec <backlightPlus+0xd4>)
    7134:	009b      	lsls	r3, r3, #2
    7136:	589e      	ldr	r6, [r3, r2]
    7138:	4d2d      	ldr	r5, [pc, #180]	; (71f0 <backlightPlus+0xd8>)
    713a:	7930      	ldrb	r0, [r6, #4]
    713c:	47a8      	blx	r5
    713e:	4680      	mov	r8, r0
	fgreen = colorOptions[blset->colorRef]->green;
    7140:	79b0      	ldrb	r0, [r6, #6]
    7142:	47a8      	blx	r5
    7144:	1c07      	adds	r7, r0, #0
	fblue = colorOptions[blset->colorRef]->blue;	
    7146:	7970      	ldrb	r0, [r6, #5]
    7148:	47a8      	blx	r5
    714a:	4682      	mov	sl, r0
	scale = 1/(fred+fgreen+fblue);
    714c:	4e29      	ldr	r6, [pc, #164]	; (71f4 <backlightPlus+0xdc>)
    714e:	1c39      	adds	r1, r7, #0
    7150:	4640      	mov	r0, r8
    7152:	47b0      	blx	r6
    7154:	4651      	mov	r1, sl
    7156:	47b0      	blx	r6
    7158:	1c01      	adds	r1, r0, #0
    715a:	20fe      	movs	r0, #254	; 0xfe
    715c:	4e26      	ldr	r6, [pc, #152]	; (71f8 <backlightPlus+0xe0>)
    715e:	0580      	lsls	r0, r0, #22
    7160:	47b0      	blx	r6
    7162:	4681      	mov	r9, r0
	brightness = blset->brightness;
    7164:	0020      	movs	r0, r4
    7166:	47a8      	blx	r5
	scale = (scale*brightness)/BRIGHT_MAX;
    7168:	4d24      	ldr	r5, [pc, #144]	; (71fc <backlightPlus+0xe4>)
	brightness = blset->brightness;
    716a:	1c01      	adds	r1, r0, #0
	scale = (scale*brightness)/BRIGHT_MAX;
    716c:	4648      	mov	r0, r9
    716e:	47a8      	blx	r5
    7170:	4923      	ldr	r1, [pc, #140]	; (7200 <backlightPlus+0xe8>)
    7172:	47b0      	blx	r6
	fred = scale*fred;
    7174:	1c01      	adds	r1, r0, #0
	scale = (scale*brightness)/BRIGHT_MAX;
    7176:	4681      	mov	r9, r0
	fred = scale*fred;
    7178:	4640      	mov	r0, r8
    717a:	47a8      	blx	r5
	u8red = fred*LED_MAX;
    717c:	4921      	ldr	r1, [pc, #132]	; (7204 <backlightPlus+0xec>)
    717e:	47a8      	blx	r5
    7180:	4b21      	ldr	r3, [pc, #132]	; (7208 <backlightPlus+0xf0>)
	temp_buf[0]= 0x80;  //control register 0b10000000
    7182:	ac01      	add	r4, sp, #4
	u8red = fred*LED_MAX;
    7184:	4698      	mov	r8, r3
    7186:	4798      	blx	r3
	fblue = scale*fblue;
    7188:	4649      	mov	r1, r9
	u8red = fred*LED_MAX;
    718a:	b2c6      	uxtb	r6, r0
	fblue = scale*fblue;
    718c:	4650      	mov	r0, sl
    718e:	47a8      	blx	r5
	u8blue = fblue*LED_MAX;
    7190:	491c      	ldr	r1, [pc, #112]	; (7204 <backlightPlus+0xec>)
    7192:	47a8      	blx	r5
    7194:	47c0      	blx	r8
	temp_buf[0]= 0x80;  //control register 0b10000000
    7196:	2380      	movs	r3, #128	; 0x80
	u8blue = fblue*LED_MAX;
    7198:	b2c0      	uxtb	r0, r0
	temp_buf[0]= 0x80;  //control register 0b10000000
    719a:	7023      	strb	r3, [r4, #0]
	temp_buf[1]= 0x80; //Mode1: 0b10000000
    719c:	7063      	strb	r3, [r4, #1]
	temp_buf[2]= 0x08; //Mode2: 0b00001000
    719e:	3b78      	subs	r3, #120	; 0x78
    71a0:	70a3      	strb	r3, [r4, #2]
	temp_buf[3]= u8blue; //PWM0 - blue
    71a2:	1c03      	adds	r3, r0, #0
    71a4:	28e1      	cmp	r0, #225	; 0xe1
    71a6:	d901      	bls.n	71ac <backlightPlus+0x94>
    71a8:	4b18      	ldr	r3, [pc, #96]	; (720c <backlightPlus+0xf4>)
    71aa:	781b      	ldrb	r3, [r3, #0]
    71ac:	70e3      	strb	r3, [r4, #3]
	fgreen = scale*fgreen;
    71ae:	4649      	mov	r1, r9
    71b0:	1c38      	adds	r0, r7, #0
    71b2:	47a8      	blx	r5
	u8green = fgreen*LED_MAX;
    71b4:	4913      	ldr	r1, [pc, #76]	; (7204 <backlightPlus+0xec>)
    71b6:	47a8      	blx	r5
    71b8:	47c0      	blx	r8
	temp_buf[5]= u8red; //PWM2 - red
    71ba:	1c33      	adds	r3, r6, #0
	temp_buf[4]= u8green; //PWM1 - green
    71bc:	7120      	strb	r0, [r4, #4]
	temp_buf[5]= u8red; //PWM2 - red
    71be:	2ee1      	cmp	r6, #225	; 0xe1
    71c0:	d901      	bls.n	71c6 <backlightPlus+0xae>
    71c2:	4b12      	ldr	r3, [pc, #72]	; (720c <backlightPlus+0xf4>)
    71c4:	781b      	ldrb	r3, [r3, #0]
    71c6:	7163      	strb	r3, [r4, #5]
	temp_buf[6]= 0x00; //PWM3
    71c8:	2300      	movs	r3, #0
    71ca:	71a3      	strb	r3, [r4, #6]
	temp_buf[7]= 0x00; //GRPPWM
    71cc:	71e3      	strb	r3, [r4, #7]
	temp_buf[8]= 0x00; //FRPFREQ
    71ce:	7223      	strb	r3, [r4, #8]
	temp_buf[9]= 0x2A; //LEDOUT: 0b00101010
    71d0:	332a      	adds	r3, #42	; 0x2a
    71d2:	7263      	strb	r3, [r4, #9]
	i2c_read_write(writep, led_add,temp_buf, mes_len);
    71d4:	0022      	movs	r2, r4
    71d6:	3b20      	subs	r3, #32
    71d8:	2162      	movs	r1, #98	; 0x62
    71da:	2001      	movs	r0, #1
    71dc:	4c0c      	ldr	r4, [pc, #48]	; (7210 <backlightPlus+0xf8>)
    71de:	47a0      	blx	r4
}
    71e0:	b004      	add	sp, #16
    71e2:	bc1c      	pop	{r2, r3, r4}
    71e4:	4690      	mov	r8, r2
    71e6:	4699      	mov	r9, r3
    71e8:	46a2      	mov	sl, r4
    71ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    71ec:	200000ec 	.word	0x200000ec
    71f0:	0001df91 	.word	0x0001df91
    71f4:	0001d235 	.word	0x0001d235
    71f8:	0001d559 	.word	0x0001d559
    71fc:	0001d939 	.word	0x0001d939
    7200:	40a00000 	.word	0x40a00000
    7204:	43610000 	.word	0x43610000
    7208:	0001d1c9 	.word	0x0001d1c9
    720c:	00024c80 	.word	0x00024c80
    7210:	000131a9 	.word	0x000131a9

00007214 <backlightMinus>:
void backlightMinus(struct BACKLIGHT_SETTING *blset){	
    7214:	b5f0      	push	{r4, r5, r6, r7, lr}
    7216:	46d6      	mov	lr, sl
    7218:	464f      	mov	r7, r9
    721a:	4646      	mov	r6, r8
    721c:	b5c0      	push	{r6, r7, lr}
	if ((blset->brightness) > 0){
    721e:	7804      	ldrb	r4, [r0, #0]
void backlightMinus(struct BACKLIGHT_SETTING *blset){	
    7220:	b084      	sub	sp, #16
	if ((blset->brightness) > 0){
    7222:	2c00      	cmp	r4, #0
    7224:	d002      	beq.n	722c <backlightMinus+0x18>
		blset->brightness--;
    7226:	3c01      	subs	r4, #1
    7228:	b2e4      	uxtb	r4, r4
    722a:	7004      	strb	r4, [r0, #0]
	fred = colorOptions[blset->colorRef]->red;
    722c:	7843      	ldrb	r3, [r0, #1]
    722e:	4a2e      	ldr	r2, [pc, #184]	; (72e8 <backlightMinus+0xd4>)
    7230:	009b      	lsls	r3, r3, #2
    7232:	589e      	ldr	r6, [r3, r2]
    7234:	4d2d      	ldr	r5, [pc, #180]	; (72ec <backlightMinus+0xd8>)
    7236:	7930      	ldrb	r0, [r6, #4]
    7238:	47a8      	blx	r5
    723a:	4680      	mov	r8, r0
	fgreen = colorOptions[blset->colorRef]->green;
    723c:	79b0      	ldrb	r0, [r6, #6]
    723e:	47a8      	blx	r5
    7240:	1c07      	adds	r7, r0, #0
	fblue = colorOptions[blset->colorRef]->blue;	
    7242:	7970      	ldrb	r0, [r6, #5]
    7244:	47a8      	blx	r5
    7246:	4682      	mov	sl, r0
	scale = 1/(fred+fgreen+fblue);
    7248:	4e29      	ldr	r6, [pc, #164]	; (72f0 <backlightMinus+0xdc>)
    724a:	1c39      	adds	r1, r7, #0
    724c:	4640      	mov	r0, r8
    724e:	47b0      	blx	r6
    7250:	4651      	mov	r1, sl
    7252:	47b0      	blx	r6
    7254:	1c01      	adds	r1, r0, #0
    7256:	20fe      	movs	r0, #254	; 0xfe
    7258:	4e26      	ldr	r6, [pc, #152]	; (72f4 <backlightMinus+0xe0>)
    725a:	0580      	lsls	r0, r0, #22
    725c:	47b0      	blx	r6
    725e:	4681      	mov	r9, r0
	brightness = blset->brightness;
    7260:	0020      	movs	r0, r4
    7262:	47a8      	blx	r5
	scale = (scale*brightness)/BRIGHT_MAX;
    7264:	4d24      	ldr	r5, [pc, #144]	; (72f8 <backlightMinus+0xe4>)
	brightness = blset->brightness;
    7266:	1c01      	adds	r1, r0, #0
	scale = (scale*brightness)/BRIGHT_MAX;
    7268:	4648      	mov	r0, r9
    726a:	47a8      	blx	r5
    726c:	4923      	ldr	r1, [pc, #140]	; (72fc <backlightMinus+0xe8>)
    726e:	47b0      	blx	r6
	fred = scale*fred;
    7270:	1c01      	adds	r1, r0, #0
	scale = (scale*brightness)/BRIGHT_MAX;
    7272:	4681      	mov	r9, r0
	fred = scale*fred;
    7274:	4640      	mov	r0, r8
    7276:	47a8      	blx	r5
	u8red = fred*LED_MAX;
    7278:	4921      	ldr	r1, [pc, #132]	; (7300 <backlightMinus+0xec>)
    727a:	47a8      	blx	r5
    727c:	4b21      	ldr	r3, [pc, #132]	; (7304 <backlightMinus+0xf0>)
	temp_buf[0]= 0x80;  //control register 0b10000000
    727e:	ac01      	add	r4, sp, #4
	u8red = fred*LED_MAX;
    7280:	4698      	mov	r8, r3
    7282:	4798      	blx	r3
	fblue = scale*fblue;
    7284:	4649      	mov	r1, r9
	u8red = fred*LED_MAX;
    7286:	b2c6      	uxtb	r6, r0
	fblue = scale*fblue;
    7288:	4650      	mov	r0, sl
    728a:	47a8      	blx	r5
	u8blue = fblue*LED_MAX;
    728c:	491c      	ldr	r1, [pc, #112]	; (7300 <backlightMinus+0xec>)
    728e:	47a8      	blx	r5
    7290:	47c0      	blx	r8
	temp_buf[0]= 0x80;  //control register 0b10000000
    7292:	2380      	movs	r3, #128	; 0x80
	u8blue = fblue*LED_MAX;
    7294:	b2c0      	uxtb	r0, r0
	temp_buf[0]= 0x80;  //control register 0b10000000
    7296:	7023      	strb	r3, [r4, #0]
	temp_buf[1]= 0x80; //Mode1: 0b10000000
    7298:	7063      	strb	r3, [r4, #1]
	temp_buf[2]= 0x08; //Mode2: 0b00001000
    729a:	3b78      	subs	r3, #120	; 0x78
    729c:	70a3      	strb	r3, [r4, #2]
	temp_buf[3]= u8blue; //PWM0 - blue
    729e:	1c03      	adds	r3, r0, #0
    72a0:	28e1      	cmp	r0, #225	; 0xe1
    72a2:	d901      	bls.n	72a8 <backlightMinus+0x94>
    72a4:	4b18      	ldr	r3, [pc, #96]	; (7308 <backlightMinus+0xf4>)
    72a6:	781b      	ldrb	r3, [r3, #0]
    72a8:	70e3      	strb	r3, [r4, #3]
	fgreen = scale*fgreen;
    72aa:	4649      	mov	r1, r9
    72ac:	1c38      	adds	r0, r7, #0
    72ae:	47a8      	blx	r5
	u8green = fgreen*LED_MAX;
    72b0:	4913      	ldr	r1, [pc, #76]	; (7300 <backlightMinus+0xec>)
    72b2:	47a8      	blx	r5
    72b4:	47c0      	blx	r8
	temp_buf[5]= u8red; //PWM2 - red
    72b6:	1c33      	adds	r3, r6, #0
	temp_buf[4]= u8green; //PWM1 - green
    72b8:	7120      	strb	r0, [r4, #4]
	temp_buf[5]= u8red; //PWM2 - red
    72ba:	2ee1      	cmp	r6, #225	; 0xe1
    72bc:	d901      	bls.n	72c2 <backlightMinus+0xae>
    72be:	4b12      	ldr	r3, [pc, #72]	; (7308 <backlightMinus+0xf4>)
    72c0:	781b      	ldrb	r3, [r3, #0]
    72c2:	7163      	strb	r3, [r4, #5]
	temp_buf[6]= 0x00; //PWM3
    72c4:	2300      	movs	r3, #0
    72c6:	71a3      	strb	r3, [r4, #6]
	temp_buf[7]= 0x00; //GRPPWM
    72c8:	71e3      	strb	r3, [r4, #7]
	temp_buf[8]= 0x00; //FRPFREQ
    72ca:	7223      	strb	r3, [r4, #8]
	temp_buf[9]= 0x2A; //LEDOUT: 0b00101010
    72cc:	332a      	adds	r3, #42	; 0x2a
    72ce:	7263      	strb	r3, [r4, #9]
	i2c_read_write(writep, led_add,temp_buf, mes_len);
    72d0:	0022      	movs	r2, r4
    72d2:	3b20      	subs	r3, #32
    72d4:	2162      	movs	r1, #98	; 0x62
    72d6:	2001      	movs	r0, #1
    72d8:	4c0c      	ldr	r4, [pc, #48]	; (730c <backlightMinus+0xf8>)
    72da:	47a0      	blx	r4
}
    72dc:	b004      	add	sp, #16
    72de:	bc1c      	pop	{r2, r3, r4}
    72e0:	4690      	mov	r8, r2
    72e2:	4699      	mov	r9, r3
    72e4:	46a2      	mov	sl, r4
    72e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    72e8:	200000ec 	.word	0x200000ec
    72ec:	0001df91 	.word	0x0001df91
    72f0:	0001d235 	.word	0x0001d235
    72f4:	0001d559 	.word	0x0001d559
    72f8:	0001d939 	.word	0x0001d939
    72fc:	40a00000 	.word	0x40a00000
    7300:	43610000 	.word	0x43610000
    7304:	0001d1c9 	.word	0x0001d1c9
    7308:	00024c80 	.word	0x00024c80
    730c:	000131a9 	.word	0x000131a9

00007310 <backlightLevelToggle>:
void backlightLevelToggle(struct BACKLIGHT_SETTING *blset){
    7310:	b5f0      	push	{r4, r5, r6, r7, lr}
    7312:	46d6      	mov	lr, sl
    7314:	464f      	mov	r7, r9
    7316:	4646      	mov	r6, r8
    7318:	b5c0      	push	{r6, r7, lr}
	blset->brightness++;
    731a:	7804      	ldrb	r4, [r0, #0]
void backlightLevelToggle(struct BACKLIGHT_SETTING *blset){
    731c:	b084      	sub	sp, #16
	blset->brightness++;
    731e:	3401      	adds	r4, #1
    7320:	b2e4      	uxtb	r4, r4
	if ((blset->brightness) > BRIGHT_MAX){
    7322:	2c05      	cmp	r4, #5
    7324:	d960      	bls.n	73e8 <backlightLevelToggle+0xd8>
		blset->brightness = 0;
    7326:	2300      	movs	r3, #0
    7328:	2400      	movs	r4, #0
    732a:	7003      	strb	r3, [r0, #0]
	fred = colorOptions[blset->colorRef]->red;
    732c:	7843      	ldrb	r3, [r0, #1]
    732e:	4a2f      	ldr	r2, [pc, #188]	; (73ec <backlightLevelToggle+0xdc>)
    7330:	009b      	lsls	r3, r3, #2
    7332:	589e      	ldr	r6, [r3, r2]
    7334:	4d2e      	ldr	r5, [pc, #184]	; (73f0 <backlightLevelToggle+0xe0>)
    7336:	7930      	ldrb	r0, [r6, #4]
    7338:	47a8      	blx	r5
    733a:	4680      	mov	r8, r0
	fgreen = colorOptions[blset->colorRef]->green;
    733c:	79b0      	ldrb	r0, [r6, #6]
    733e:	47a8      	blx	r5
    7340:	1c07      	adds	r7, r0, #0
	fblue = colorOptions[blset->colorRef]->blue;	
    7342:	7970      	ldrb	r0, [r6, #5]
    7344:	47a8      	blx	r5
    7346:	4682      	mov	sl, r0
	scale = 1/(fred+fgreen+fblue);
    7348:	4e2a      	ldr	r6, [pc, #168]	; (73f4 <backlightLevelToggle+0xe4>)
    734a:	1c39      	adds	r1, r7, #0
    734c:	4640      	mov	r0, r8
    734e:	47b0      	blx	r6
    7350:	4651      	mov	r1, sl
    7352:	47b0      	blx	r6
    7354:	1c01      	adds	r1, r0, #0
    7356:	20fe      	movs	r0, #254	; 0xfe
    7358:	4e27      	ldr	r6, [pc, #156]	; (73f8 <backlightLevelToggle+0xe8>)
    735a:	0580      	lsls	r0, r0, #22
    735c:	47b0      	blx	r6
    735e:	4681      	mov	r9, r0
	brightness = blset->brightness;
    7360:	0020      	movs	r0, r4
    7362:	47a8      	blx	r5
	scale = (scale*brightness)/BRIGHT_MAX;
    7364:	4d25      	ldr	r5, [pc, #148]	; (73fc <backlightLevelToggle+0xec>)
	brightness = blset->brightness;
    7366:	1c01      	adds	r1, r0, #0
	scale = (scale*brightness)/BRIGHT_MAX;
    7368:	4648      	mov	r0, r9
    736a:	47a8      	blx	r5
    736c:	4924      	ldr	r1, [pc, #144]	; (7400 <backlightLevelToggle+0xf0>)
    736e:	47b0      	blx	r6
	fred = scale*fred;
    7370:	1c01      	adds	r1, r0, #0
	scale = (scale*brightness)/BRIGHT_MAX;
    7372:	4681      	mov	r9, r0
	fred = scale*fred;
    7374:	4640      	mov	r0, r8
    7376:	47a8      	blx	r5
	u8red = fred*LED_MAX;
    7378:	4922      	ldr	r1, [pc, #136]	; (7404 <backlightLevelToggle+0xf4>)
    737a:	47a8      	blx	r5
    737c:	4b22      	ldr	r3, [pc, #136]	; (7408 <backlightLevelToggle+0xf8>)
	temp_buf[0]= 0x80;  //control register 0b10000000
    737e:	ac01      	add	r4, sp, #4
	u8red = fred*LED_MAX;
    7380:	4698      	mov	r8, r3
    7382:	4798      	blx	r3
	fblue = scale*fblue;
    7384:	4649      	mov	r1, r9
	u8red = fred*LED_MAX;
    7386:	b2c6      	uxtb	r6, r0
	fblue = scale*fblue;
    7388:	4650      	mov	r0, sl
    738a:	47a8      	blx	r5
	u8blue = fblue*LED_MAX;
    738c:	491d      	ldr	r1, [pc, #116]	; (7404 <backlightLevelToggle+0xf4>)
    738e:	47a8      	blx	r5
    7390:	47c0      	blx	r8
	temp_buf[0]= 0x80;  //control register 0b10000000
    7392:	2380      	movs	r3, #128	; 0x80
	u8blue = fblue*LED_MAX;
    7394:	b2c0      	uxtb	r0, r0
	temp_buf[0]= 0x80;  //control register 0b10000000
    7396:	7023      	strb	r3, [r4, #0]
	temp_buf[1]= 0x80; //Mode1: 0b10000000
    7398:	7063      	strb	r3, [r4, #1]
	temp_buf[2]= 0x08; //Mode2: 0b00001000
    739a:	3b78      	subs	r3, #120	; 0x78
    739c:	70a3      	strb	r3, [r4, #2]
	temp_buf[3]= u8blue; //PWM0 - blue
    739e:	1c03      	adds	r3, r0, #0
    73a0:	28e1      	cmp	r0, #225	; 0xe1
    73a2:	d901      	bls.n	73a8 <backlightLevelToggle+0x98>
    73a4:	4b19      	ldr	r3, [pc, #100]	; (740c <backlightLevelToggle+0xfc>)
    73a6:	781b      	ldrb	r3, [r3, #0]
    73a8:	70e3      	strb	r3, [r4, #3]
	fgreen = scale*fgreen;
    73aa:	4649      	mov	r1, r9
    73ac:	1c38      	adds	r0, r7, #0
    73ae:	47a8      	blx	r5
	u8green = fgreen*LED_MAX;
    73b0:	4914      	ldr	r1, [pc, #80]	; (7404 <backlightLevelToggle+0xf4>)
    73b2:	47a8      	blx	r5
    73b4:	47c0      	blx	r8
	temp_buf[5]= u8red; //PWM2 - red
    73b6:	1c33      	adds	r3, r6, #0
	temp_buf[4]= u8green; //PWM1 - green
    73b8:	7120      	strb	r0, [r4, #4]
	temp_buf[5]= u8red; //PWM2 - red
    73ba:	2ee1      	cmp	r6, #225	; 0xe1
    73bc:	d901      	bls.n	73c2 <backlightLevelToggle+0xb2>
    73be:	4b13      	ldr	r3, [pc, #76]	; (740c <backlightLevelToggle+0xfc>)
    73c0:	781b      	ldrb	r3, [r3, #0]
    73c2:	7163      	strb	r3, [r4, #5]
	temp_buf[6]= 0x00; //PWM3
    73c4:	2300      	movs	r3, #0
    73c6:	71a3      	strb	r3, [r4, #6]
	temp_buf[7]= 0x00; //GRPPWM
    73c8:	71e3      	strb	r3, [r4, #7]
	temp_buf[8]= 0x00; //FRPFREQ
    73ca:	7223      	strb	r3, [r4, #8]
	temp_buf[9]= 0x2A; //LEDOUT: 0b00101010
    73cc:	332a      	adds	r3, #42	; 0x2a
    73ce:	7263      	strb	r3, [r4, #9]
	i2c_read_write(writep, led_add,temp_buf, mes_len);
    73d0:	0022      	movs	r2, r4
    73d2:	3b20      	subs	r3, #32
    73d4:	2162      	movs	r1, #98	; 0x62
    73d6:	2001      	movs	r0, #1
    73d8:	4c0d      	ldr	r4, [pc, #52]	; (7410 <backlightLevelToggle+0x100>)
    73da:	47a0      	blx	r4
}
    73dc:	b004      	add	sp, #16
    73de:	bc1c      	pop	{r2, r3, r4}
    73e0:	4690      	mov	r8, r2
    73e2:	4699      	mov	r9, r3
    73e4:	46a2      	mov	sl, r4
    73e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	blset->brightness++;
    73e8:	7004      	strb	r4, [r0, #0]
    73ea:	e79f      	b.n	732c <backlightLevelToggle+0x1c>
    73ec:	200000ec 	.word	0x200000ec
    73f0:	0001df91 	.word	0x0001df91
    73f4:	0001d235 	.word	0x0001d235
    73f8:	0001d559 	.word	0x0001d559
    73fc:	0001d939 	.word	0x0001d939
    7400:	40a00000 	.word	0x40a00000
    7404:	43610000 	.word	0x43610000
    7408:	0001d1c9 	.word	0x0001d1c9
    740c:	00024c80 	.word	0x00024c80
    7410:	000131a9 	.word	0x000131a9

00007414 <backlightGetCurrentColor>:
	strPtr = colorOptions[blset->colorRef]->colorStringPtr;
    7414:	7843      	ldrb	r3, [r0, #1]
    7416:	4a02      	ldr	r2, [pc, #8]	; (7420 <backlightGetCurrentColor+0xc>)
    7418:	009b      	lsls	r3, r3, #2
    741a:	589b      	ldr	r3, [r3, r2]
	return strPtr;	
    741c:	6818      	ldr	r0, [r3, #0]
}
    741e:	4770      	bx	lr
    7420:	200000ec 	.word	0x200000ec

00007424 <backlightOn>:
void backlightOn(struct BACKLIGHT_SETTING *blset){
    7424:	b5f0      	push	{r4, r5, r6, r7, lr}
    7426:	46de      	mov	lr, fp
    7428:	4657      	mov	r7, sl
    742a:	464e      	mov	r6, r9
    742c:	4645      	mov	r5, r8
    742e:	b5e0      	push	{r5, r6, r7, lr}
	fred = colorOptions[blset->colorRef]->red;
    7430:	7843      	ldrb	r3, [r0, #1]
    7432:	4a30      	ldr	r2, [pc, #192]	; (74f4 <backlightOn+0xd0>)
    7434:	009b      	lsls	r3, r3, #2
    7436:	589d      	ldr	r5, [r3, r2]
void backlightOn(struct BACKLIGHT_SETTING *blset){
    7438:	b085      	sub	sp, #20
	fred = colorOptions[blset->colorRef]->red;
    743a:	4c2f      	ldr	r4, [pc, #188]	; (74f8 <backlightOn+0xd4>)
void backlightOn(struct BACKLIGHT_SETTING *blset){
    743c:	0007      	movs	r7, r0
	fred = colorOptions[blset->colorRef]->red;
    743e:	7928      	ldrb	r0, [r5, #4]
    7440:	47a0      	blx	r4
    7442:	1c06      	adds	r6, r0, #0
	fgreen = colorOptions[blset->colorRef]->green;
    7444:	79a8      	ldrb	r0, [r5, #6]
    7446:	47a0      	blx	r4
    7448:	4680      	mov	r8, r0
	fblue = colorOptions[blset->colorRef]->blue;	
    744a:	7968      	ldrb	r0, [r5, #5]
    744c:	47a0      	blx	r4
    744e:	4682      	mov	sl, r0
	scale = 1/(fred+fgreen+fblue);
    7450:	4d2a      	ldr	r5, [pc, #168]	; (74fc <backlightOn+0xd8>)
    7452:	4641      	mov	r1, r8
    7454:	1c30      	adds	r0, r6, #0
    7456:	47a8      	blx	r5
    7458:	4651      	mov	r1, sl
    745a:	47a8      	blx	r5
    745c:	1c01      	adds	r1, r0, #0
    745e:	20fe      	movs	r0, #254	; 0xfe
    7460:	4b27      	ldr	r3, [pc, #156]	; (7500 <backlightOn+0xdc>)
    7462:	0580      	lsls	r0, r0, #22
    7464:	4699      	mov	r9, r3
    7466:	4798      	blx	r3
    7468:	4683      	mov	fp, r0
	brightness = blset->brightness;
    746a:	7838      	ldrb	r0, [r7, #0]
    746c:	47a0      	blx	r4
	scale = (scale*brightness)/BRIGHT_MAX;
    746e:	4d25      	ldr	r5, [pc, #148]	; (7504 <backlightOn+0xe0>)
	brightness = blset->brightness;
    7470:	1c01      	adds	r1, r0, #0
	scale = (scale*brightness)/BRIGHT_MAX;
    7472:	4658      	mov	r0, fp
    7474:	47a8      	blx	r5
    7476:	4924      	ldr	r1, [pc, #144]	; (7508 <backlightOn+0xe4>)
    7478:	47c8      	blx	r9
	fred = scale*fred;
    747a:	1c01      	adds	r1, r0, #0
	scale = (scale*brightness)/BRIGHT_MAX;
    747c:	4681      	mov	r9, r0
	fred = scale*fred;
    747e:	1c30      	adds	r0, r6, #0
    7480:	47a8      	blx	r5
	u8red = fred*LED_MAX;
    7482:	4922      	ldr	r1, [pc, #136]	; (750c <backlightOn+0xe8>)
    7484:	47a8      	blx	r5
    7486:	4f22      	ldr	r7, [pc, #136]	; (7510 <backlightOn+0xec>)
    7488:	47b8      	blx	r7
	fblue = scale*fblue;
    748a:	4649      	mov	r1, r9
	u8red = fred*LED_MAX;
    748c:	b2c6      	uxtb	r6, r0
	fblue = scale*fblue;
    748e:	4650      	mov	r0, sl
    7490:	47a8      	blx	r5
	u8blue = fblue*LED_MAX;
    7492:	491e      	ldr	r1, [pc, #120]	; (750c <backlightOn+0xe8>)
    7494:	47a8      	blx	r5
    7496:	47b8      	blx	r7
	temp_buf[0]= 0x80;  //control register 0b10000000
    7498:	2380      	movs	r3, #128	; 0x80
    749a:	ac01      	add	r4, sp, #4
	u8blue = fblue*LED_MAX;
    749c:	b2c0      	uxtb	r0, r0
	temp_buf[0]= 0x80;  //control register 0b10000000
    749e:	7023      	strb	r3, [r4, #0]
	temp_buf[1]= 0x80; //Mode1: 0b10000000
    74a0:	7063      	strb	r3, [r4, #1]
	temp_buf[2]= 0x08; //Mode2: 0b00001000
    74a2:	3b78      	subs	r3, #120	; 0x78
    74a4:	70a3      	strb	r3, [r4, #2]
	temp_buf[3]= u8blue; //PWM0 - blue
    74a6:	1c03      	adds	r3, r0, #0
    74a8:	28e1      	cmp	r0, #225	; 0xe1
    74aa:	d901      	bls.n	74b0 <backlightOn+0x8c>
    74ac:	4b19      	ldr	r3, [pc, #100]	; (7514 <backlightOn+0xf0>)
    74ae:	781b      	ldrb	r3, [r3, #0]
    74b0:	70e3      	strb	r3, [r4, #3]
	fgreen = scale*fgreen;
    74b2:	4649      	mov	r1, r9
    74b4:	4640      	mov	r0, r8
    74b6:	47a8      	blx	r5
	u8green = fgreen*LED_MAX;
    74b8:	4914      	ldr	r1, [pc, #80]	; (750c <backlightOn+0xe8>)
    74ba:	47a8      	blx	r5
    74bc:	47b8      	blx	r7
	temp_buf[5]= u8red; //PWM2 - red
    74be:	1c33      	adds	r3, r6, #0
	temp_buf[4]= u8green; //PWM1 - green
    74c0:	7120      	strb	r0, [r4, #4]
	temp_buf[5]= u8red; //PWM2 - red
    74c2:	2ee1      	cmp	r6, #225	; 0xe1
    74c4:	d901      	bls.n	74ca <backlightOn+0xa6>
    74c6:	4b13      	ldr	r3, [pc, #76]	; (7514 <backlightOn+0xf0>)
    74c8:	781b      	ldrb	r3, [r3, #0]
    74ca:	7163      	strb	r3, [r4, #5]
	temp_buf[6]= 0x00; //PWM3
    74cc:	2300      	movs	r3, #0
    74ce:	71a3      	strb	r3, [r4, #6]
	temp_buf[7]= 0x00; //GRPPWM
    74d0:	71e3      	strb	r3, [r4, #7]
	temp_buf[8]= 0x00; //FRPFREQ
    74d2:	7223      	strb	r3, [r4, #8]
	temp_buf[9]= 0x2A; //LEDOUT: 0b00101010
    74d4:	332a      	adds	r3, #42	; 0x2a
    74d6:	7263      	strb	r3, [r4, #9]
	i2c_read_write(writep, led_add,temp_buf, mes_len);
    74d8:	0022      	movs	r2, r4
    74da:	3b20      	subs	r3, #32
    74dc:	2162      	movs	r1, #98	; 0x62
    74de:	2001      	movs	r0, #1
    74e0:	4c0d      	ldr	r4, [pc, #52]	; (7518 <backlightOn+0xf4>)
    74e2:	47a0      	blx	r4
	

}
    74e4:	b005      	add	sp, #20
    74e6:	bc3c      	pop	{r2, r3, r4, r5}
    74e8:	4690      	mov	r8, r2
    74ea:	4699      	mov	r9, r3
    74ec:	46a2      	mov	sl, r4
    74ee:	46ab      	mov	fp, r5
    74f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    74f2:	46c0      	nop			; (mov r8, r8)
    74f4:	200000ec 	.word	0x200000ec
    74f8:	0001df91 	.word	0x0001df91
    74fc:	0001d235 	.word	0x0001d235
    7500:	0001d559 	.word	0x0001d559
    7504:	0001d939 	.word	0x0001d939
    7508:	40a00000 	.word	0x40a00000
    750c:	43610000 	.word	0x43610000
    7510:	0001d1c9 	.word	0x0001d1c9
    7514:	00024c80 	.word	0x00024c80
    7518:	000131a9 	.word	0x000131a9

0000751c <backlightOff>:

void backlightOff(void){
		
	uint16_t mes_len = 10;
	uint8_t temp_buf[mes_len];
	temp_buf[0]= 0x80;  //control register 0b10000000
    751c:	2380      	movs	r3, #128	; 0x80
void backlightOff(void){
    751e:	b510      	push	{r4, lr}
    7520:	b084      	sub	sp, #16
	temp_buf[0]= 0x80;  //control register 0b10000000
    7522:	aa01      	add	r2, sp, #4
    7524:	7013      	strb	r3, [r2, #0]
	temp_buf[1]= 0x80; //Mode1: 0b10000000
    7526:	7053      	strb	r3, [r2, #1]
	temp_buf[2]= 0x08; //Mode2: 0b00001000
    7528:	3b78      	subs	r3, #120	; 0x78
    752a:	7093      	strb	r3, [r2, #2]
	temp_buf[3]= 0x00; //PWM0 - blue
    752c:	2300      	movs	r3, #0
    752e:	70d3      	strb	r3, [r2, #3]
	temp_buf[4]= 0x00; //PWM1 - green
    7530:	7113      	strb	r3, [r2, #4]
	temp_buf[5]= 0x00; //PWM2 - red
    7532:	7153      	strb	r3, [r2, #5]
	temp_buf[6]= 0x00; //PWM3
    7534:	7193      	strb	r3, [r2, #6]
	temp_buf[7]= 0x00; //GRPPWM
    7536:	71d3      	strb	r3, [r2, #7]
	temp_buf[8]= 0x00; //FRPFREQ
    7538:	7213      	strb	r3, [r2, #8]
	temp_buf[9]= 0x2A; //LEDOUT: 0b00101010
    753a:	332a      	adds	r3, #42	; 0x2a
    753c:	7253      	strb	r3, [r2, #9]
	
	i2c_read_write(writep, led_add,temp_buf, mes_len);
    753e:	2162      	movs	r1, #98	; 0x62
    7540:	3b20      	subs	r3, #32
    7542:	2001      	movs	r0, #1
    7544:	4c01      	ldr	r4, [pc, #4]	; (754c <backlightOff+0x30>)
    7546:	47a0      	blx	r4
	
}
    7548:	b004      	add	sp, #16
    754a:	bd10      	pop	{r4, pc}
    754c:	000131a9 	.word	0x000131a9

00007550 <config_batt>:
	data1=data1 & 0xFFFD;//clear POR bit
	max17055_reg_read_write(writep ,0x00, &data1);
	
}

void config_batt(void){
    7550:	b5f0      	push	{r4, r5, r6, r7, lr}
    7552:	46ce      	mov	lr, r9
    7554:	4647      	mov	r7, r8
    7556:	b580      	push	{r7, lr}
    7558:	b083      	sub	sp, #12
	uint16_t data1;
	max17055_reg_read_write(readp, 0x3D, &data1);//check DNR bit 0x3D bit 1
    755a:	466b      	mov	r3, sp
    755c:	1d9c      	adds	r4, r3, #6
    755e:	0022      	movs	r2, r4
    7560:	213d      	movs	r1, #61	; 0x3d
    7562:	2000      	movs	r0, #0
    7564:	4d34      	ldr	r5, [pc, #208]	; (7638 <config_batt+0xe8>)
    7566:	47a8      	blx	r5
	while(data1 & 0x0001){
    7568:	8823      	ldrh	r3, [r4, #0]
    756a:	4e34      	ldr	r6, [pc, #208]	; (763c <config_batt+0xec>)
    756c:	07db      	lsls	r3, r3, #31
    756e:	d509      	bpl.n	7584 <config_batt+0x34>
    7570:	2701      	movs	r7, #1
		delay_ms(10);
    7572:	200a      	movs	r0, #10
    7574:	47b0      	blx	r6
		max17055_reg_read_write(readp, 0x3D, &data1);
    7576:	0022      	movs	r2, r4
    7578:	213d      	movs	r1, #61	; 0x3d
    757a:	2000      	movs	r0, #0
    757c:	47a8      	blx	r5
	while(data1 & 0x0001){
    757e:	8823      	ldrh	r3, [r4, #0]
    7580:	421f      	tst	r7, r3
    7582:	d1f6      	bne.n	7572 <config_batt+0x22>
	}
	max17055_reg_read_write(writep, 0x18, &DesignCap);//Write design capacity register 0x18
    7584:	4b2e      	ldr	r3, [pc, #184]	; (7640 <config_batt+0xf0>)
    7586:	2118      	movs	r1, #24
    7588:	4699      	mov	r9, r3
    758a:	001a      	movs	r2, r3
    758c:	2001      	movs	r0, #1
    758e:	47a8      	blx	r5
	data1=DesignCap/32;
    7590:	464b      	mov	r3, r9
    7592:	881b      	ldrh	r3, [r3, #0]
	max17055_reg_read_write(writep, 0x45, &data1);//write dQacc register 0x45
    7594:	0022      	movs	r2, r4
	data1=DesignCap/32;
    7596:	095b      	lsrs	r3, r3, #5
	max17055_reg_read_write(writep, 0x45, &data1);//write dQacc register 0x45
    7598:	2145      	movs	r1, #69	; 0x45
    759a:	2001      	movs	r0, #1
	data1=DesignCap/32;
    759c:	8023      	strh	r3, [r4, #0]
	max17055_reg_read_write(writep, 0x45, &data1);//write dQacc register 0x45
    759e:	47a8      	blx	r5
	max17055_reg_read_write(writep, 0x1E, &IchgTerm);//Write termination charge register 0x1E
    75a0:	4a28      	ldr	r2, [pc, #160]	; (7644 <config_batt+0xf4>)
    75a2:	211e      	movs	r1, #30
    75a4:	2001      	movs	r0, #1
    75a6:	47a8      	blx	r5
	max17055_reg_read_write(writep, 0x3A, &VEmpty);//Write empty voltage, register 0x3A
    75a8:	4a27      	ldr	r2, [pc, #156]	; (7648 <config_batt+0xf8>)
    75aa:	213a      	movs	r1, #58	; 0x3a
    75ac:	2001      	movs	r0, #1
    75ae:	47a8      	blx	r5
	max17055_reg_read_write(readp, 0xBA, &HibCFG);//Save hibernation configuration
    75b0:	4f26      	ldr	r7, [pc, #152]	; (764c <config_batt+0xfc>)
    75b2:	21ba      	movs	r1, #186	; 0xba
    75b4:	003a      	movs	r2, r7
    75b6:	2000      	movs	r0, #0
    75b8:	47a8      	blx	r5
	data1=0x90;
    75ba:	2390      	movs	r3, #144	; 0x90
	max17055_reg_read_write(writep, 0x60, &data1);//Exit hibernate mode step 1
    75bc:	0022      	movs	r2, r4
    75be:	2160      	movs	r1, #96	; 0x60
    75c0:	2001      	movs	r0, #1
	data1=0x90;
    75c2:	8023      	strh	r3, [r4, #0]
	max17055_reg_read_write(writep, 0x60, &data1);//Exit hibernate mode step 1
    75c4:	47a8      	blx	r5
	data1=0x00;
    75c6:	2300      	movs	r3, #0
    75c8:	4698      	mov	r8, r3
	max17055_reg_read_write(writep,0xBA, &data1);//exit hibernate mode step 2
    75ca:	0022      	movs	r2, r4
    75cc:	21ba      	movs	r1, #186	; 0xba
    75ce:	2001      	movs	r0, #1
	data1=0x00;
    75d0:	8023      	strh	r3, [r4, #0]
	max17055_reg_read_write(writep,0xBA, &data1);//exit hibernate mode step 2
    75d2:	47a8      	blx	r5
	data1=0x00;
    75d4:	4643      	mov	r3, r8
	max17055_reg_read_write(writep, 0x60, &data1);//exit hibernate mode step 3
    75d6:	0022      	movs	r2, r4
    75d8:	2160      	movs	r1, #96	; 0x60
    75da:	2001      	movs	r0, #1
	data1=0x00;
    75dc:	8023      	strh	r3, [r4, #0]
	max17055_reg_read_write(writep, 0x60, &data1);//exit hibernate mode step 3
    75de:	47a8      	blx	r5
	data1=DesignCap/32;
    75e0:	464b      	mov	r3, r9
    75e2:	8819      	ldrh	r1, [r3, #0]
	data1=data1*44138;
    75e4:	481a      	ldr	r0, [pc, #104]	; (7650 <config_batt+0x100>)
	data1=DesignCap/32;
    75e6:	094b      	lsrs	r3, r1, #5
	data1=data1*44138;
    75e8:	4358      	muls	r0, r3
	data1=data1/DesignCap;
    75ea:	4b1a      	ldr	r3, [pc, #104]	; (7654 <config_batt+0x104>)
    75ec:	b280      	uxth	r0, r0
    75ee:	4798      	blx	r3
	max17055_reg_read_write(writep, 0x46, &data1);//write dPAcc register 0x46
    75f0:	0022      	movs	r2, r4
	data1=data1/DesignCap;
    75f2:	8020      	strh	r0, [r4, #0]
	max17055_reg_read_write(writep, 0x46, &data1);//write dPAcc register 0x46
    75f4:	2146      	movs	r1, #70	; 0x46
    75f6:	2001      	movs	r0, #1
    75f8:	47a8      	blx	r5
	data1=0x8000;//model 0
    75fa:	4b17      	ldr	r3, [pc, #92]	; (7658 <config_batt+0x108>)
	max17055_reg_read_write(writep, 0xD8, &data1);//write model configuration at register D8
    75fc:	0022      	movs	r2, r4
    75fe:	21d8      	movs	r1, #216	; 0xd8
    7600:	2001      	movs	r0, #1
	data1=0x8000;//model 0
    7602:	8023      	strh	r3, [r4, #0]
	max17055_reg_read_write(writep, 0xD8, &data1);//write model configuration at register D8
    7604:	47a8      	blx	r5
	//wait for model to refresh
	data1=0x0000;
    7606:	4643      	mov	r3, r8
    7608:	8023      	strh	r3, [r4, #0]
	while(!data1){
		delay_ms(10);
    760a:	200a      	movs	r0, #10
    760c:	47b0      	blx	r6
		max17055_reg_read_write(readp,0xD8,&data1);
    760e:	0022      	movs	r2, r4
    7610:	21d8      	movs	r1, #216	; 0xd8
    7612:	2000      	movs	r0, #0
    7614:	47a8      	blx	r5
		data1=data1 & 0x8000;
    7616:	8823      	ldrh	r3, [r4, #0]
    7618:	0bda      	lsrs	r2, r3, #15
    761a:	03d2      	lsls	r2, r2, #15
	while(!data1){
    761c:	b21b      	sxth	r3, r3
		data1=data1 & 0x8000;
    761e:	8022      	strh	r2, [r4, #0]
	while(!data1){
    7620:	2b00      	cmp	r3, #0
    7622:	daf2      	bge.n	760a <config_batt+0xba>
	}
	max17055_reg_read_write(writep, 0xBA, &HibCFG);//restore hiberation configuration at register 0xBA
    7624:	003a      	movs	r2, r7
    7626:	21ba      	movs	r1, #186	; 0xba
    7628:	2001      	movs	r0, #1
    762a:	47a8      	blx	r5
}
    762c:	b003      	add	sp, #12
    762e:	bc0c      	pop	{r2, r3}
    7630:	4690      	mov	r8, r2
    7632:	4699      	mov	r9, r3
    7634:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7636:	46c0      	nop			; (mov r8, r8)
    7638:	0001324d 	.word	0x0001324d
    763c:	000161e9 	.word	0x000161e9
    7640:	20000158 	.word	0x20000158
    7644:	2000015a 	.word	0x2000015a
    7648:	2000015c 	.word	0x2000015c
    764c:	200013a0 	.word	0x200013a0
    7650:	ffffac6a 	.word	0xffffac6a
    7654:	0001cd1d 	.word	0x0001cd1d
    7658:	ffff8000 	.word	0xffff8000

0000765c <setup_batt>:
void setup_batt(void){
    765c:	b530      	push	{r4, r5, lr}
    765e:	b083      	sub	sp, #12
	max17055_reg_read_write(readp, 0x00, &data1);
    7660:	466b      	mov	r3, sp
    7662:	1d9c      	adds	r4, r3, #6
    7664:	0022      	movs	r2, r4
    7666:	2100      	movs	r1, #0
    7668:	2000      	movs	r0, #0
    766a:	4d0b      	ldr	r5, [pc, #44]	; (7698 <setup_batt+0x3c>)
    766c:	47a8      	blx	r5
	data1=data1 & 0x0002;//bit two is POR
    766e:	2302      	movs	r3, #2
    7670:	8822      	ldrh	r2, [r4, #0]
    7672:	4013      	ands	r3, r2
    7674:	8023      	strh	r3, [r4, #0]
	if (data1){
    7676:	d001      	beq.n	767c <setup_batt+0x20>
		config_batt();
    7678:	4b08      	ldr	r3, [pc, #32]	; (769c <setup_batt+0x40>)
    767a:	4798      	blx	r3
	max17055_reg_read_write(readp, 0x00, &data1);
    767c:	0022      	movs	r2, r4
    767e:	2100      	movs	r1, #0
    7680:	2000      	movs	r0, #0
    7682:	47a8      	blx	r5
	data1=data1 & 0xFFFD;//clear POR bit
    7684:	2202      	movs	r2, #2
    7686:	8823      	ldrh	r3, [r4, #0]
	max17055_reg_read_write(writep ,0x00, &data1);
    7688:	2100      	movs	r1, #0
	data1=data1 & 0xFFFD;//clear POR bit
    768a:	4393      	bics	r3, r2
	max17055_reg_read_write(writep ,0x00, &data1);
    768c:	2001      	movs	r0, #1
    768e:	0022      	movs	r2, r4
	data1=data1 & 0xFFFD;//clear POR bit
    7690:	8023      	strh	r3, [r4, #0]
	max17055_reg_read_write(writep ,0x00, &data1);
    7692:	47a8      	blx	r5
}
    7694:	b003      	add	sp, #12
    7696:	bd30      	pop	{r4, r5, pc}
    7698:	0001324d 	.word	0x0001324d
    769c:	00007551 	.word	0x00007551

000076a0 <getBatteryLevel>:

uint16_t getBatteryLevel(void){
    76a0:	b510      	push	{r4, lr}
    76a2:	b082      	sub	sp, #8
	//  Reads back battery state of charge in %, 0-100
	uint16_t batt_SOC;
	max17055_reg_read_write(readp, 0x06, &batt_SOC);
    76a4:	466b      	mov	r3, sp
    76a6:	1d9c      	adds	r4, r3, #6
    76a8:	0022      	movs	r2, r4
    76aa:	2106      	movs	r1, #6
    76ac:	2000      	movs	r0, #0
    76ae:	4b0a      	ldr	r3, [pc, #40]	; (76d8 <getBatteryLevel+0x38>)
    76b0:	4798      	blx	r3
	batt_SOC=batt_SOC>>8;
    76b2:	8820      	ldrh	r0, [r4, #0]
	//  Add margin to show topped-off battery
	batt_SOC = batt_SOC*1.03;  
    76b4:	4b09      	ldr	r3, [pc, #36]	; (76dc <getBatteryLevel+0x3c>)
    76b6:	0a00      	lsrs	r0, r0, #8
    76b8:	4798      	blx	r3
    76ba:	4a09      	ldr	r2, [pc, #36]	; (76e0 <getBatteryLevel+0x40>)
    76bc:	4b09      	ldr	r3, [pc, #36]	; (76e4 <getBatteryLevel+0x44>)
    76be:	4c0a      	ldr	r4, [pc, #40]	; (76e8 <getBatteryLevel+0x48>)
    76c0:	47a0      	blx	r4
    76c2:	4b0a      	ldr	r3, [pc, #40]	; (76ec <getBatteryLevel+0x4c>)
    76c4:	4798      	blx	r3
    76c6:	b282      	uxth	r2, r0
    76c8:	2364      	movs	r3, #100	; 0x64
    76ca:	2a63      	cmp	r2, #99	; 0x63
    76cc:	d800      	bhi.n	76d0 <getBatteryLevel+0x30>
    76ce:	1c03      	adds	r3, r0, #0
    76d0:	b298      	uxth	r0, r3
	if (batt_SOC>100){
		batt_SOC = 100;
	}
	
	return batt_SOC;
}
    76d2:	b002      	add	sp, #8
    76d4:	bd10      	pop	{r4, pc}
    76d6:	46c0      	nop			; (mov r8, r8)
    76d8:	0001324d 	.word	0x0001324d
    76dc:	0001fa79 	.word	0x0001fa79
    76e0:	47ae147b 	.word	0x47ae147b
    76e4:	3ff07ae1 	.word	0x3ff07ae1
    76e8:	0001eea5 	.word	0x0001eea5
    76ec:	0001d1f9 	.word	0x0001d1f9

000076f0 <setChargeCurrent>:


void setChargeCurrent(uint32_t chargeCurrent){
	// ILIM is lower 3 bits of addr 0x02
	uint8_t data;
	if (chargeCurrent==500){
    76f0:	23fa      	movs	r3, #250	; 0xfa
void setChargeCurrent(uint32_t chargeCurrent){
    76f2:	b500      	push	{lr}
	if (chargeCurrent==500){
    76f4:	005b      	lsls	r3, r3, #1
void setChargeCurrent(uint32_t chargeCurrent){
    76f6:	b083      	sub	sp, #12
	if (chargeCurrent==500){
    76f8:	4298      	cmp	r0, r3
    76fa:	d009      	beq.n	7710 <setChargeCurrent+0x20>
		data = 0x06;
	}else{
		data = 0x00;
    76fc:	2300      	movs	r3, #0
    76fe:	466a      	mov	r2, sp
    7700:	3207      	adds	r2, #7
    7702:	7013      	strb	r3, [r2, #0]
	}
	adp5062_reg_read_write(writep, 0x02, &data);
    7704:	2102      	movs	r1, #2
    7706:	2001      	movs	r0, #1
    7708:	4b02      	ldr	r3, [pc, #8]	; (7714 <setChargeCurrent+0x24>)
    770a:	4798      	blx	r3
	
	
	
}
    770c:	b003      	add	sp, #12
    770e:	bd00      	pop	{pc}
		data = 0x06;
    7710:	2306      	movs	r3, #6
    7712:	e7f4      	b.n	76fe <setChargeCurrent+0xe>
    7714:	00013319 	.word	0x00013319

00007718 <getChargerStatus>:

uint8_t getChargerStatus(void){
    7718:	b510      	push	{r4, lr}
    771a:	b082      	sub	sp, #8

uint8_t getChargerRegister(uint8_t address){
	//  Read data from address on Charger
	uint8_t registerData;
	
	adp5062_reg_read_write(readp, address, &registerData); 
    771c:	466b      	mov	r3, sp
    771e:	1ddc      	adds	r4, r3, #7
    7720:	0022      	movs	r2, r4
    7722:	210b      	movs	r1, #11
    7724:	2000      	movs	r0, #0
    7726:	4b03      	ldr	r3, [pc, #12]	; (7734 <getChargerStatus+0x1c>)
    7728:	4798      	blx	r3
	return status;
    772a:	2007      	movs	r0, #7
	
	return registerData;
    772c:	7823      	ldrb	r3, [r4, #0]
	return status;
    772e:	4018      	ands	r0, r3
}
    7730:	b002      	add	sp, #8
    7732:	bd10      	pop	{r4, pc}
    7734:	00013319 	.word	0x00013319

00007738 <getChargerRegister>:
uint8_t getChargerRegister(uint8_t address){
    7738:	b510      	push	{r4, lr}
    773a:	b082      	sub	sp, #8
	adp5062_reg_read_write(readp, address, &registerData); 
    773c:	466b      	mov	r3, sp
    773e:	1ddc      	adds	r4, r3, #7
uint8_t getChargerRegister(uint8_t address){
    7740:	0001      	movs	r1, r0
	adp5062_reg_read_write(readp, address, &registerData); 
    7742:	0022      	movs	r2, r4
    7744:	2000      	movs	r0, #0
    7746:	4b02      	ldr	r3, [pc, #8]	; (7750 <getChargerRegister+0x18>)
    7748:	4798      	blx	r3
	return registerData;
    774a:	7820      	ldrb	r0, [r4, #0]
}
    774c:	b002      	add	sp, #8
    774e:	bd10      	pop	{r4, pc}
    7750:	00013319 	.word	0x00013319

00007754 <bin2str>:
void  bin2str(uint8_t data, char *strPtr){
	uint8_t i;
	uint8_t shifter = 128;
	
	for (i=0;i<8;i++){
		if (data&shifter){
    7754:	b243      	sxtb	r3, r0
    7756:	2b00      	cmp	r3, #0
    7758:	db20      	blt.n	779c <bin2str+0x48>
			strPtr[i] = '1';
		}else{
			strPtr[i] = '0';
    775a:	2330      	movs	r3, #48	; 0x30
    775c:	700b      	strb	r3, [r1, #0]
		if (data&shifter){
    775e:	0643      	lsls	r3, r0, #25
    7760:	d420      	bmi.n	77a4 <bin2str+0x50>
			strPtr[i] = '0';
    7762:	2330      	movs	r3, #48	; 0x30
    7764:	704b      	strb	r3, [r1, #1]
		if (data&shifter){
    7766:	0683      	lsls	r3, r0, #26
    7768:	d420      	bmi.n	77ac <bin2str+0x58>
			strPtr[i] = '0';
    776a:	2330      	movs	r3, #48	; 0x30
    776c:	708b      	strb	r3, [r1, #2]
		if (data&shifter){
    776e:	06c3      	lsls	r3, r0, #27
    7770:	d420      	bmi.n	77b4 <bin2str+0x60>
			strPtr[i] = '0';
    7772:	2330      	movs	r3, #48	; 0x30
    7774:	70cb      	strb	r3, [r1, #3]
		if (data&shifter){
    7776:	0703      	lsls	r3, r0, #28
    7778:	d420      	bmi.n	77bc <bin2str+0x68>
			strPtr[i] = '0';
    777a:	2330      	movs	r3, #48	; 0x30
    777c:	710b      	strb	r3, [r1, #4]
		if (data&shifter){
    777e:	0743      	lsls	r3, r0, #29
    7780:	d420      	bmi.n	77c4 <bin2str+0x70>
			strPtr[i] = '0';
    7782:	2330      	movs	r3, #48	; 0x30
    7784:	714b      	strb	r3, [r1, #5]
		if (data&shifter){
    7786:	0783      	lsls	r3, r0, #30
    7788:	d420      	bmi.n	77cc <bin2str+0x78>
			strPtr[i] = '0';
    778a:	2330      	movs	r3, #48	; 0x30
    778c:	718b      	strb	r3, [r1, #6]
		if (data&shifter){
    778e:	07c3      	lsls	r3, r0, #31
    7790:	d520      	bpl.n	77d4 <bin2str+0x80>
			strPtr[i] = '1';
    7792:	2331      	movs	r3, #49	; 0x31
    7794:	71cb      	strb	r3, [r1, #7]
		}
		shifter = shifter>>1;
	}
	strPtr[8] = '\0';
    7796:	2300      	movs	r3, #0
    7798:	720b      	strb	r3, [r1, #8]
	
}
    779a:	4770      	bx	lr
			strPtr[i] = '1';
    779c:	2331      	movs	r3, #49	; 0x31
    779e:	700b      	strb	r3, [r1, #0]
		if (data&shifter){
    77a0:	0643      	lsls	r3, r0, #25
    77a2:	d5de      	bpl.n	7762 <bin2str+0xe>
			strPtr[i] = '1';
    77a4:	2331      	movs	r3, #49	; 0x31
    77a6:	704b      	strb	r3, [r1, #1]
		if (data&shifter){
    77a8:	0683      	lsls	r3, r0, #26
    77aa:	d5de      	bpl.n	776a <bin2str+0x16>
			strPtr[i] = '1';
    77ac:	2331      	movs	r3, #49	; 0x31
    77ae:	708b      	strb	r3, [r1, #2]
		if (data&shifter){
    77b0:	06c3      	lsls	r3, r0, #27
    77b2:	d5de      	bpl.n	7772 <bin2str+0x1e>
			strPtr[i] = '1';
    77b4:	2331      	movs	r3, #49	; 0x31
    77b6:	70cb      	strb	r3, [r1, #3]
		if (data&shifter){
    77b8:	0703      	lsls	r3, r0, #28
    77ba:	d5de      	bpl.n	777a <bin2str+0x26>
			strPtr[i] = '1';
    77bc:	2331      	movs	r3, #49	; 0x31
    77be:	710b      	strb	r3, [r1, #4]
		if (data&shifter){
    77c0:	0743      	lsls	r3, r0, #29
    77c2:	d5de      	bpl.n	7782 <bin2str+0x2e>
			strPtr[i] = '1';
    77c4:	2331      	movs	r3, #49	; 0x31
    77c6:	714b      	strb	r3, [r1, #5]
		if (data&shifter){
    77c8:	0783      	lsls	r3, r0, #30
    77ca:	d5de      	bpl.n	778a <bin2str+0x36>
			strPtr[i] = '1';
    77cc:	2331      	movs	r3, #49	; 0x31
    77ce:	718b      	strb	r3, [r1, #6]
		if (data&shifter){
    77d0:	07c3      	lsls	r3, r0, #31
    77d2:	d4de      	bmi.n	7792 <bin2str+0x3e>
			strPtr[i] = '0';
    77d4:	2330      	movs	r3, #48	; 0x30
    77d6:	71cb      	strb	r3, [r1, #7]
    77d8:	e7dd      	b.n	7796 <bin2str+0x42>
    77da:	46c0      	nop			; (mov r8, r8)

000077dc <BLE_handleMessage>:
 */ 

#include <BLE_func.h>


void BLE_handleMessage(void){
    77dc:	b510      	push	{r4, lr}
	uint8_t debug;
	//  First check that there is anything to be done
	if(!isBleReceiveComplete()){
    77de:	4b10      	ldr	r3, [pc, #64]	; (7820 <BLE_handleMessage+0x44>)
void BLE_handleMessage(void){
    77e0:	b082      	sub	sp, #8
	if(!isBleReceiveComplete()){
    77e2:	4798      	blx	r3
    77e4:	2800      	cmp	r0, #0
    77e6:	d019      	beq.n	781c <BLE_handleMessage+0x40>
		return;
	}
	enum status_code writeStatus;
	
	//  
	if (strstr(rxBufferBle,"info")){
    77e8:	490e      	ldr	r1, [pc, #56]	; (7824 <BLE_handleMessage+0x48>)
    77ea:	480f      	ldr	r0, [pc, #60]	; (7828 <BLE_handleMessage+0x4c>)
    77ec:	4b0f      	ldr	r3, [pc, #60]	; (782c <BLE_handleMessage+0x50>)
    77ee:	4798      	blx	r3
    77f0:	2800      	cmp	r0, #0
    77f2:	d013      	beq.n	781c <BLE_handleMessage+0x40>
		sprintf(write_str1,"BRIC4\n SN: %04d\n Software version %f\n", options.SerialNumber, SOFTWARE_VERSION);
    77f4:	2000      	movs	r0, #0
    77f6:	4c0e      	ldr	r4, [pc, #56]	; (7830 <BLE_handleMessage+0x54>)
    77f8:	4b0e      	ldr	r3, [pc, #56]	; (7834 <BLE_handleMessage+0x58>)
    77fa:	490f      	ldr	r1, [pc, #60]	; (7838 <BLE_handleMessage+0x5c>)
    77fc:	681a      	ldr	r2, [r3, #0]
    77fe:	9000      	str	r0, [sp, #0]
    7800:	9101      	str	r1, [sp, #4]
    7802:	4b0e      	ldr	r3, [pc, #56]	; (783c <BLE_handleMessage+0x60>)
    7804:	490e      	ldr	r1, [pc, #56]	; (7840 <BLE_handleMessage+0x64>)
    7806:	0020      	movs	r0, r4
    7808:	4798      	blx	r3
		writeBle(write_str1, strlen(write_str1));
    780a:	4b0e      	ldr	r3, [pc, #56]	; (7844 <BLE_handleMessage+0x68>)
    780c:	0020      	movs	r0, r4
    780e:	4798      	blx	r3
    7810:	4b0d      	ldr	r3, [pc, #52]	; (7848 <BLE_handleMessage+0x6c>)
    7812:	b281      	uxth	r1, r0
    7814:	0020      	movs	r0, r4
    7816:	4798      	blx	r3
		
	}else{
		return;
	}
	
	rxBufferBleClear();
    7818:	4b0c      	ldr	r3, [pc, #48]	; (784c <BLE_handleMessage+0x70>)
    781a:	4798      	blx	r3
	
	
}
    781c:	b002      	add	sp, #8
    781e:	bd10      	pop	{r4, pc}
    7820:	00013059 	.word	0x00013059
    7824:	00024c84 	.word	0x00024c84
    7828:	20003f78 	.word	0x20003f78
    782c:	00020325 	.word	0x00020325
    7830:	20003188 	.word	0x20003188
    7834:	2000332c 	.word	0x2000332c
    7838:	40100000 	.word	0x40100000
    783c:	0001fe91 	.word	0x0001fe91
    7840:	00024c8c 	.word	0x00024c8c
    7844:	0001fffd 	.word	0x0001fffd
    7848:	00013015 	.word	0x00013015
    784c:	00013081 	.word	0x00013081

00007850 <ble_error>:

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    7850:	2380      	movs	r3, #128	; 0x80

void ble_error(void){
    7852:	b570      	push	{r4, r5, r6, lr}
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    7854:	2508      	movs	r5, #8
    7856:	4c26      	ldr	r4, [pc, #152]	; (78f0 <ble_error+0xa0>)
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    7858:	01db      	lsls	r3, r3, #7
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    785a:	6165      	str	r5, [r4, #20]
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    785c:	61a3      	str	r3, [r4, #24]
    785e:	2380      	movs	r3, #128	; 0x80
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    7860:	4a24      	ldr	r2, [pc, #144]	; (78f4 <ble_error+0xa4>)
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    7862:	03db      	lsls	r3, r3, #15
    7864:	61a3      	str	r3, [r4, #24]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    7866:	6153      	str	r3, [r2, #20]
	//  Turn on Command MOde
	ioport_set_pin_level(BLE_COMMAND_MODE, true);//  Start in Command Mode
	//  Diable OTA programming
	ioport_set_pin_level(BLE_ota, false);// low to disable programming over BLE
	//  Isolate UART for debug/programming interface
	BLE_usart_isolate();
    7868:	4b23      	ldr	r3, [pc, #140]	; (78f8 <ble_error+0xa8>)
    786a:	4798      	blx	r3
	
	// Turn on Module
	delay_ms(100);
    786c:	2064      	movs	r0, #100	; 0x64
    786e:	4b23      	ldr	r3, [pc, #140]	; (78fc <ble_error+0xac>)
    7870:	4798      	blx	r3
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    7872:	61a5      	str	r5, [r4, #24]
	ioport_set_pin_level(BLE_reset, true);
	
	wdt_disable();
    7874:	4b22      	ldr	r3, [pc, #136]	; (7900 <ble_error+0xb0>)
    7876:	4798      	blx	r3
	
	glcd_clear_buffer();
    7878:	4b22      	ldr	r3, [pc, #136]	; (7904 <ble_error+0xb4>)
    787a:	4798      	blx	r3
	
	sprintf(display_str, "BLE Error");
    787c:	4c22      	ldr	r4, [pc, #136]	; (7908 <ble_error+0xb8>)
    787e:	4e23      	ldr	r6, [pc, #140]	; (790c <ble_error+0xbc>)
    7880:	220a      	movs	r2, #10
    7882:	4923      	ldr	r1, [pc, #140]	; (7910 <ble_error+0xc0>)
    7884:	0020      	movs	r0, r4
    7886:	47b0      	blx	r6
	glcd_tiny_draw_string(0,1,display_str);
    7888:	4d22      	ldr	r5, [pc, #136]	; (7914 <ble_error+0xc4>)
    788a:	0022      	movs	r2, r4
    788c:	2101      	movs	r1, #1
    788e:	2000      	movs	r0, #0
    7890:	47a8      	blx	r5
	sprintf(display_str, "Setting BLE in");
    7892:	220f      	movs	r2, #15
    7894:	4920      	ldr	r1, [pc, #128]	; (7918 <ble_error+0xc8>)
    7896:	0020      	movs	r0, r4
    7898:	47b0      	blx	r6
	glcd_tiny_draw_string(0,2,display_str);
    789a:	0022      	movs	r2, r4
    789c:	2102      	movs	r1, #2
    789e:	2000      	movs	r0, #0
    78a0:	47a8      	blx	r5
	sprintf(display_str, "AT Mode for program");
    78a2:	2214      	movs	r2, #20
    78a4:	491d      	ldr	r1, [pc, #116]	; (791c <ble_error+0xcc>)
    78a6:	0020      	movs	r0, r4
    78a8:	47b0      	blx	r6
	glcd_tiny_draw_string(0,3,display_str);
    78aa:	0022      	movs	r2, r4
    78ac:	2103      	movs	r1, #3
    78ae:	2000      	movs	r0, #0
    78b0:	47a8      	blx	r5
	sprintf(display_str, "Reset after program");
    78b2:	2214      	movs	r2, #20
    78b4:	491a      	ldr	r1, [pc, #104]	; (7920 <ble_error+0xd0>)
    78b6:	0020      	movs	r0, r4
    78b8:	47b0      	blx	r6
	glcd_tiny_draw_string(0,5,display_str);
    78ba:	0022      	movs	r2, r4
    78bc:	2105      	movs	r1, #5
    78be:	2000      	movs	r0, #0
    78c0:	47a8      	blx	r5
	
	

	//hold here until an input
	sprintf(display_str, "Press any button...");
    78c2:	2214      	movs	r2, #20
    78c4:	4917      	ldr	r1, [pc, #92]	; (7924 <ble_error+0xd4>)
    78c6:	0020      	movs	r0, r4
    78c8:	47b0      	blx	r6
	glcd_tiny_draw_string(10,7,display_str);
    78ca:	0022      	movs	r2, r4
    78cc:	2107      	movs	r1, #7
    78ce:	200a      	movs	r0, #10
    78d0:	47a8      	blx	r5
	glcd_write();
    78d2:	4b15      	ldr	r3, [pc, #84]	; (7928 <ble_error+0xd8>)
    78d4:	4798      	blx	r3
    78d6:	4a15      	ldr	r2, [pc, #84]	; (792c <ble_error+0xdc>)
	while((current_input == input_none) || (current_input == input_1sec));
    78d8:	6813      	ldr	r3, [r2, #0]
    78da:	2b00      	cmp	r3, #0
    78dc:	d0fc      	beq.n	78d8 <ble_error+0x88>
    78de:	6813      	ldr	r3, [r2, #0]
    78e0:	2b07      	cmp	r3, #7
    78e2:	d0f9      	beq.n	78d8 <ble_error+0x88>
	
	//Resume normal operation
	current_input = input_none;
    78e4:	2300      	movs	r3, #0
    78e6:	6013      	str	r3, [r2, #0]
	wdt_enable();
    78e8:	4b11      	ldr	r3, [pc, #68]	; (7930 <ble_error+0xe0>)
    78ea:	4798      	blx	r3
	
}
    78ec:	bd70      	pop	{r4, r5, r6, pc}
    78ee:	46c0      	nop			; (mov r8, r8)
    78f0:	40002800 	.word	0x40002800
    78f4:	40002880 	.word	0x40002880
    78f8:	00012f59 	.word	0x00012f59
    78fc:	000161e9 	.word	0x000161e9
    7900:	0000d87d 	.word	0x0000d87d
    7904:	00013805 	.word	0x00013805
    7908:	200033a8 	.word	0x200033a8
    790c:	0001fd79 	.word	0x0001fd79
    7910:	00024d20 	.word	0x00024d20
    7914:	000150a1 	.word	0x000150a1
    7918:	00024d2c 	.word	0x00024d2c
    791c:	00024d3c 	.word	0x00024d3c
    7920:	00024d50 	.word	0x00024d50
    7924:	00024d64 	.word	0x00024d64
    7928:	0001493d 	.word	0x0001493d
    792c:	2000403c 	.word	0x2000403c
    7930:	0000d855 	.word	0x0000d855

00007934 <BLE_init>:


void BLE_init(void){
    7934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7936:	464e      	mov	r6, r9
    7938:	4645      	mov	r5, r8
    793a:	46de      	mov	lr, fp
    793c:	4657      	mov	r7, sl
    793e:	b5e0      	push	{r5, r6, r7, lr}
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    7940:	2580      	movs	r5, #128	; 0x80
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
    7942:	2456      	movs	r4, #86	; 0x56
    7944:	2602      	movs	r6, #2
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    7946:	2280      	movs	r2, #128	; 0x80
    7948:	483f      	ldr	r0, [pc, #252]	; (7a48 <BLE_init+0x114>)
    794a:	03ed      	lsls	r5, r5, #15
    794c:	6085      	str	r5, [r0, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
    794e:	5d03      	ldrb	r3, [r0, r4]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    7950:	01d2      	lsls	r2, r2, #7
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
    7952:	4333      	orrs	r3, r6
    7954:	b2db      	uxtb	r3, r3
    7956:	5503      	strb	r3, [r0, r4]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    7958:	4b3c      	ldr	r3, [pc, #240]	; (7a4c <BLE_init+0x118>)
    795a:	609a      	str	r2, [r3, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
    795c:	224e      	movs	r2, #78	; 0x4e
    795e:	5c99      	ldrb	r1, [r3, r2]
    7960:	4331      	orrs	r1, r6
    7962:	b2c9      	uxtb	r1, r1
    7964:	5499      	strb	r1, [r3, r2]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    7966:	3a46      	subs	r2, #70	; 0x46
    7968:	609a      	str	r2, [r3, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
    796a:	323b      	adds	r2, #59	; 0x3b
    796c:	5c99      	ldrb	r1, [r3, r2]
    796e:	4331      	orrs	r1, r6
    7970:	b2c9      	uxtb	r1, r1
    7972:	5499      	strb	r1, [r3, r2]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    7974:	609d      	str	r5, [r3, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
    7976:	5d1a      	ldrb	r2, [r3, r4]
    7978:	4332      	orrs	r2, r6
    797a:	b2d2      	uxtb	r2, r2
    797c:	551a      	strb	r2, [r3, r4]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    797e:	6145      	str	r5, [r0, #20]
	ioport_set_pin_dir(BLE_autorun, IOPORT_DIR_OUTPUT);	
	ioport_set_pin_dir(BLE_reset, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(BLE_COMMAND_MODE, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(BLE_ota, false);// low to disable programming over BLE
	
	if (!isBleCommEnabled()){
    7980:	4b33      	ldr	r3, [pc, #204]	; (7a50 <BLE_init+0x11c>)
    7982:	4798      	blx	r3
    7984:	2800      	cmp	r0, #0
    7986:	d05b      	beq.n	7a40 <BLE_init+0x10c>
    7988:	2380      	movs	r3, #128	; 0x80
    798a:	2508      	movs	r5, #8
    798c:	4c2f      	ldr	r4, [pc, #188]	; (7a4c <BLE_init+0x118>)
    798e:	01db      	lsls	r3, r3, #7
    7990:	6165      	str	r5, [r4, #20]
    7992:	6163      	str	r3, [r4, #20]
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    7994:	2380      	movs	r3, #128	; 0x80
    7996:	03db      	lsls	r3, r3, #15
    7998:	61a3      	str	r3, [r4, #24]
	ioport_set_pin_level(BLE_reset, false);
	//  Turn on Autorun
	ioport_set_pin_level(BLE_autorun, false);//low for autorun enabled, high for development mode
	//  Turn on Command MOde
	ioport_set_pin_level(BLE_COMMAND_MODE, true);//  Start in Command Mode
	delay_ms(100);			
    799a:	2064      	movs	r0, #100	; 0x64
    799c:	4e2d      	ldr	r6, [pc, #180]	; (7a54 <BLE_init+0x120>)
    799e:	47b0      	blx	r6
	// Turn on Module
	ioport_set_pin_level(BLE_reset, true);
	delay_ms(500);
    79a0:	20fa      	movs	r0, #250	; 0xfa
    79a2:	61a5      	str	r5, [r4, #24]
    79a4:	0040      	lsls	r0, r0, #1
    79a6:	47b0      	blx	r6
	//  Assign Device Name
	sprintf(write_str1,"cfg$ wr  1 BRIC4_%04d\r\n", options.SerialNumber);
    79a8:	4b2b      	ldr	r3, [pc, #172]	; (7a58 <BLE_init+0x124>)
    79aa:	492c      	ldr	r1, [pc, #176]	; (7a5c <BLE_init+0x128>)
    79ac:	681a      	ldr	r2, [r3, #0]
    79ae:	4b2c      	ldr	r3, [pc, #176]	; (7a60 <BLE_init+0x12c>)
    79b0:	469a      	mov	sl, r3
    79b2:	0018      	movs	r0, r3
    79b4:	4b2b      	ldr	r3, [pc, #172]	; (7a64 <BLE_init+0x130>)
    79b6:	4798      	blx	r3
	rxBufferBleClear();
    79b8:	4b2b      	ldr	r3, [pc, #172]	; (7a68 <BLE_init+0x134>)
    79ba:	469b      	mov	fp, r3
    79bc:	4798      	blx	r3
	writeBle(write_str1, strlen(write_str1));
    79be:	4b2b      	ldr	r3, [pc, #172]	; (7a6c <BLE_init+0x138>)
    79c0:	4650      	mov	r0, sl
    79c2:	4798      	blx	r3
    79c4:	4b2a      	ldr	r3, [pc, #168]	; (7a70 <BLE_init+0x13c>)
    79c6:	b281      	uxth	r1, r0
    79c8:	4650      	mov	r0, sl
    79ca:	4798      	blx	r3
    79cc:	4d29      	ldr	r5, [pc, #164]	; (7a74 <BLE_init+0x140>)
	while(!isBleTransmitComplete());	
    79ce:	47a8      	blx	r5
    79d0:	2800      	cmp	r0, #0
    79d2:	d0fc      	beq.n	79ce <BLE_init+0x9a>
    79d4:	4b28      	ldr	r3, [pc, #160]	; (7a78 <BLE_init+0x144>)
    79d6:	2415      	movs	r4, #21
    79d8:	4699      	mov	r9, r3
    79da:	4b28      	ldr	r3, [pc, #160]	; (7a7c <BLE_init+0x148>)
    79dc:	4f28      	ldr	r7, [pc, #160]	; (7a80 <BLE_init+0x14c>)
    79de:	4698      	mov	r8, r3
	ms_counter = 0;
	while(!strstr(rxBufferBle,"OK")){
    79e0:	4649      	mov	r1, r9
    79e2:	4640      	mov	r0, r8
    79e4:	47b8      	blx	r7
    79e6:	2800      	cmp	r0, #0
    79e8:	d10c      	bne.n	7a04 <BLE_init+0xd0>
		delay_ms(100);
    79ea:	2064      	movs	r0, #100	; 0x64
    79ec:	3c01      	subs	r4, #1
    79ee:	47b0      	blx	r6
		ms_counter += 100;
		if(ms_counter>2000){
    79f0:	2c00      	cmp	r4, #0
    79f2:	d1f5      	bne.n	79e0 <BLE_init+0xac>
			ble_error();			
    79f4:	4b23      	ldr	r3, [pc, #140]	; (7a84 <BLE_init+0x150>)
    79f6:	4798      	blx	r3
	//  Turn off Command Mode
	ioport_set_pin_level(BLE_COMMAND_MODE, false);//  Start in Command Mode
	
	
	
}
    79f8:	bc3c      	pop	{r2, r3, r4, r5}
    79fa:	4690      	mov	r8, r2
    79fc:	4699      	mov	r9, r3
    79fe:	46a2      	mov	sl, r4
    7a00:	46ab      	mov	fp, r5
    7a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7a04:	4c20      	ldr	r4, [pc, #128]	; (7a88 <BLE_init+0x154>)
	while(!isBleReceiveComplete());	
    7a06:	47a0      	blx	r4
    7a08:	2800      	cmp	r0, #0
    7a0a:	d0fc      	beq.n	7a06 <BLE_init+0xd2>
	rxBufferBleClear();
    7a0c:	47d8      	blx	fp
	sprintf(write_str1,"connect\r\n");
    7a0e:	491f      	ldr	r1, [pc, #124]	; (7a8c <BLE_init+0x158>)
    7a10:	220a      	movs	r2, #10
    7a12:	4b1f      	ldr	r3, [pc, #124]	; (7a90 <BLE_init+0x15c>)
    7a14:	4650      	mov	r0, sl
    7a16:	4798      	blx	r3
	rxBufferBleClear();
    7a18:	47d8      	blx	fp
	writeBle(write_str1, strlen(write_str1));
    7a1a:	4b14      	ldr	r3, [pc, #80]	; (7a6c <BLE_init+0x138>)
    7a1c:	4650      	mov	r0, sl
    7a1e:	4798      	blx	r3
    7a20:	4b13      	ldr	r3, [pc, #76]	; (7a70 <BLE_init+0x13c>)
    7a22:	b281      	uxth	r1, r0
    7a24:	4650      	mov	r0, sl
    7a26:	4798      	blx	r3
	while(!isBleTransmitComplete());	
    7a28:	47a8      	blx	r5
    7a2a:	2800      	cmp	r0, #0
    7a2c:	d0fc      	beq.n	7a28 <BLE_init+0xf4>
	while(!isBleReceiveComplete());	
    7a2e:	47a0      	blx	r4
    7a30:	2800      	cmp	r0, #0
    7a32:	d0fc      	beq.n	7a2e <BLE_init+0xfa>
	rxBufferBleClear();
    7a34:	47d8      	blx	fp
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    7a36:	2280      	movs	r2, #128	; 0x80
    7a38:	4b04      	ldr	r3, [pc, #16]	; (7a4c <BLE_init+0x118>)
    7a3a:	03d2      	lsls	r2, r2, #15
    7a3c:	615a      	str	r2, [r3, #20]
    7a3e:	e7db      	b.n	79f8 <BLE_init+0xc4>
		configure_usart_BLE();
    7a40:	4b14      	ldr	r3, [pc, #80]	; (7a94 <BLE_init+0x160>)
    7a42:	4798      	blx	r3
    7a44:	e7a0      	b.n	7988 <BLE_init+0x54>
    7a46:	46c0      	nop			; (mov r8, r8)
    7a48:	40002880 	.word	0x40002880
    7a4c:	40002800 	.word	0x40002800
    7a50:	000130c9 	.word	0x000130c9
    7a54:	000161e9 	.word	0x000161e9
    7a58:	2000332c 	.word	0x2000332c
    7a5c:	00024cb4 	.word	0x00024cb4
    7a60:	20003188 	.word	0x20003188
    7a64:	0001fe91 	.word	0x0001fe91
    7a68:	00013081 	.word	0x00013081
    7a6c:	0001fffd 	.word	0x0001fffd
    7a70:	00013015 	.word	0x00013015
    7a74:	0001304d 	.word	0x0001304d
    7a78:	00024ccc 	.word	0x00024ccc
    7a7c:	20003f78 	.word	0x20003f78
    7a80:	00020325 	.word	0x00020325
    7a84:	00007851 	.word	0x00007851
    7a88:	00013059 	.word	0x00013059
    7a8c:	00024cd0 	.word	0x00024cd0
    7a90:	0001fd79 	.word	0x0001fd79
    7a94:	00012e45 	.word	0x00012e45

00007a98 <BLE_sendMeas>:


void BLE_sendMeas(struct MEASUREMENT *meas){
    7a98:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a9a:	46c6      	mov	lr, r8
    7a9c:	b500      	push	{lr}
	enum status_code writeStatus;
	
	sprintf(write_str1,"Posix:%d, Ref:%d, Dist:%0.2f, Azm: %0.3f, Inc: %0.3f, Dec: %0.3f\n",
    7a9e:	6803      	ldr	r3, [r0, #0]
void BLE_sendMeas(struct MEASUREMENT *meas){
    7aa0:	b088      	sub	sp, #32
	sprintf(write_str1,"Posix:%d, Ref:%d, Dist:%0.2f, Azm: %0.3f, Inc: %0.3f, Dec: %0.3f\n",
    7aa2:	6847      	ldr	r7, [r0, #4]
void BLE_sendMeas(struct MEASUREMENT *meas){
    7aa4:	0004      	movs	r4, r0
	sprintf(write_str1,"Posix:%d, Ref:%d, Dist:%0.2f, Azm: %0.3f, Inc: %0.3f, Dec: %0.3f\n",
    7aa6:	4d14      	ldr	r5, [pc, #80]	; (7af8 <BLE_sendMeas+0x60>)
    7aa8:	6980      	ldr	r0, [r0, #24]
    7aaa:	4698      	mov	r8, r3
    7aac:	47a8      	blx	r5
    7aae:	9006      	str	r0, [sp, #24]
    7ab0:	9107      	str	r1, [sp, #28]
    7ab2:	6920      	ldr	r0, [r4, #16]
    7ab4:	47a8      	blx	r5
    7ab6:	9004      	str	r0, [sp, #16]
    7ab8:	9105      	str	r1, [sp, #20]
    7aba:	68e0      	ldr	r0, [r4, #12]
    7abc:	47a8      	blx	r5
    7abe:	9002      	str	r0, [sp, #8]
    7ac0:	9103      	str	r1, [sp, #12]
    7ac2:	6a20      	ldr	r0, [r4, #32]
    7ac4:	47a8      	blx	r5
    7ac6:	4e0d      	ldr	r6, [pc, #52]	; (7afc <BLE_sendMeas+0x64>)
    7ac8:	9000      	str	r0, [sp, #0]
    7aca:	9101      	str	r1, [sp, #4]
    7acc:	003a      	movs	r2, r7
    7ace:	490c      	ldr	r1, [pc, #48]	; (7b00 <BLE_sendMeas+0x68>)
    7ad0:	4643      	mov	r3, r8
    7ad2:	4c0c      	ldr	r4, [pc, #48]	; (7b04 <BLE_sendMeas+0x6c>)
    7ad4:	0030      	movs	r0, r6
    7ad6:	47a0      	blx	r4
		meas->posix_time, meas->index_ref, meas->distCal, meas->azimuth, meas->inclination,	meas->declination);
		
	
	writeStatus = writeBle(write_str1, strlen(write_str1));
    7ad8:	4b0b      	ldr	r3, [pc, #44]	; (7b08 <BLE_sendMeas+0x70>)
    7ada:	0030      	movs	r0, r6
    7adc:	4798      	blx	r3
    7ade:	4b0b      	ldr	r3, [pc, #44]	; (7b0c <BLE_sendMeas+0x74>)
    7ae0:	b281      	uxth	r1, r0
    7ae2:	0030      	movs	r0, r6
    7ae4:	4798      	blx	r3
    7ae6:	4c0a      	ldr	r4, [pc, #40]	; (7b10 <BLE_sendMeas+0x78>)
		
	while(!isBleTransmitComplete());
    7ae8:	47a0      	blx	r4
    7aea:	2800      	cmp	r0, #0
    7aec:	d0fc      	beq.n	7ae8 <BLE_sendMeas+0x50>
	
	//clear_rx_buffer();
	
	
	
}
    7aee:	b008      	add	sp, #32
    7af0:	bc04      	pop	{r2}
    7af2:	4690      	mov	r8, r2
    7af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7af6:	46c0      	nop			; (mov r8, r8)
    7af8:	0001fb6d 	.word	0x0001fb6d
    7afc:	20003188 	.word	0x20003188
    7b00:	00024cdc 	.word	0x00024cdc
    7b04:	0001fe91 	.word	0x0001fe91
    7b08:	0001fffd 	.word	0x0001fffd
    7b0c:	00013015 	.word	0x00013015
    7b10:	0001304d 	.word	0x0001304d

00007b14 <mainClockPowerdown>:
void mainClockPowerdown(void){
	struct system_gclk_gen_config gclk_conf; 
	
	//  Set GCLK 0 to use ULP32k
	system_gclk_gen_get_config_defaults(&gclk_conf);                  \
	gclk_conf.source_clock    = SYSTEM_CLOCK_SOURCE_ULP32K;   \
    7b14:	2303      	movs	r3, #3
void mainClockPowerdown(void){
    7b16:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    7b18:	2400      	movs	r4, #0
	config->division_factor    = 1;
    7b1a:	2501      	movs	r5, #1
    7b1c:	b085      	sub	sp, #20
    7b1e:	a901      	add	r1, sp, #4
	gclk_conf.source_clock    = SYSTEM_CLOCK_SOURCE_ULP32K;   \
    7b20:	700b      	strb	r3, [r1, #0]
	gclk_conf.division_factor = 1;      \
	gclk_conf.run_in_standby  = true; \
	gclk_conf.output_enable   = false;  \
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);       \
    7b22:	2000      	movs	r0, #0
    7b24:	4b10      	ldr	r3, [pc, #64]	; (7b68 <mainClockPowerdown+0x54>)
    7b26:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    7b28:	704c      	strb	r4, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
	config->output_enable      = false;
    7b2a:	724c      	strb	r4, [r1, #9]
	gclk_conf.run_in_standby  = true; \
    7b2c:	720d      	strb	r5, [r1, #8]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);       \
    7b2e:	4798      	blx	r3
	system_gclk_gen_enable(GCLK_GENERATOR_0);   
    7b30:	4b0e      	ldr	r3, [pc, #56]	; (7b6c <mainClockPowerdown+0x58>)
    7b32:	2000      	movs	r0, #0
    7b34:	4798      	blx	r3
	
	//  Turn off DFLL	
	OSCCTRL->DFLLCTRL.reg = OSCCTRL->DFLLCTRL.reg & (!dfllctrEnable);
    7b36:	4b0e      	ldr	r3, [pc, #56]	; (7b70 <mainClockPowerdown+0x5c>)
    7b38:	2100      	movs	r1, #0
    7b3a:	8b1a      	ldrh	r2, [r3, #24]
    7b3c:	831c      	strh	r4, [r3, #24]
	
	//  Turn off 16MHZ oscillator
	//  Should already be turned off
	OSCCTRL->OSC16MCTRL.reg = OSCCTRL->OSC16MCTRL.reg &(!0x02);
    7b3e:	7d1a      	ldrb	r2, [r3, #20]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    7b40:	2280      	movs	r2, #128	; 0x80
    7b42:	7519      	strb	r1, [r3, #20]
    7b44:	05d2      	lsls	r2, r2, #23
    7b46:	7893      	ldrb	r3, [r2, #2]
    7b48:	2b00      	cmp	r3, #0
    7b4a:	d008      	beq.n	7b5e <mainClockPowerdown+0x4a>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    7b4c:	7893      	ldrb	r3, [r2, #2]
    7b4e:	b25b      	sxtb	r3, r3
    7b50:	2b00      	cmp	r3, #0
    7b52:	db04      	blt.n	7b5e <mainClockPowerdown+0x4a>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    7b54:	7195      	strb	r5, [r2, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    7b56:	7091      	strb	r1, [r2, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    7b58:	7993      	ldrb	r3, [r2, #6]
    7b5a:	2b00      	cmp	r3, #0
    7b5c:	d0fc      	beq.n	7b58 <mainClockPowerdown+0x44>
	
	//  Set performance level
	system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	
	//  Re-initialize delay with new main clock
	delay_init();
    7b5e:	4b05      	ldr	r3, [pc, #20]	; (7b74 <mainClockPowerdown+0x60>)
    7b60:	4798      	blx	r3
}
    7b62:	b005      	add	sp, #20
    7b64:	bd30      	pop	{r4, r5, pc}
    7b66:	46c0      	nop			; (mov r8, r8)
    7b68:	0001679d 	.word	0x0001679d
    7b6c:	00016849 	.word	0x00016849
    7b70:	40000c00 	.word	0x40000c00
    7b74:	00016179 	.word	0x00016179

00007b78 <DFLL_Enable>:
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    7b78:	2380      	movs	r3, #128	; 0x80
	
	
}


void DFLL_Enable(void){
    7b7a:	b510      	push	{r4, lr}
    7b7c:	05db      	lsls	r3, r3, #23
    7b7e:	789a      	ldrb	r2, [r3, #2]
    7b80:	b086      	sub	sp, #24
    7b82:	2a02      	cmp	r2, #2
    7b84:	d00a      	beq.n	7b9c <DFLL_Enable+0x24>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    7b86:	789a      	ldrb	r2, [r3, #2]
    7b88:	b252      	sxtb	r2, r2
    7b8a:	2a00      	cmp	r2, #0
    7b8c:	db06      	blt.n	7b9c <DFLL_Enable+0x24>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    7b8e:	2201      	movs	r2, #1
    7b90:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    7b92:	3201      	adds	r2, #1
    7b94:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    7b96:	799a      	ldrb	r2, [r3, #6]
    7b98:	2a00      	cmp	r2, #0
    7b9a:	d0fc      	beq.n	7b96 <DFLL_Enable+0x1e>
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    7b9c:	2300      	movs	r3, #0
	config->fine_value      = 0xff / 4; /* Midpoint */
    7b9e:	223f      	movs	r2, #63	; 0x3f
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    7ba0:	a801      	add	r0, sp, #4
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    7ba2:	9302      	str	r3, [sp, #8]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    7ba4:	7203      	strb	r3, [r0, #8]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    7ba6:	7243      	strb	r3, [r0, #9]
	config->run_in_stanby   = false;
    7ba8:	7083      	strb	r3, [r0, #2]
	config->fine_value      = 0xff / 4; /* Midpoint */
    7baa:	8182      	strh	r2, [r0, #12]
	
		struct system_clock_source_dfll_config dfll_conf;
		system_clock_source_dfll_get_config_defaults(&dfll_conf);
	
		dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
		dfll_conf.on_demand      = false;
    7bac:	7043      	strb	r3, [r0, #1]
		dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    7bae:	3a3b      	subs	r2, #59	; 0x3b
		// Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
		// in DFLL.COARSE helps to output a frequency close to 48 MHz.
	#define NVM_DFLL_COARSE_POS    26 // DFLL48M Coarse calibration value bit position.
	#define NVM_DFLL_COARSE_SIZE   6  // DFLL48M Coarse calibration value bit size.

		uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP5)
    7bb0:	4b11      	ldr	r3, [pc, #68]	; (7bf8 <DFLL_Enable+0x80>)
		dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    7bb2:	7002      	strb	r2, [r0, #0]
		uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP5)
    7bb4:	681b      	ldr	r3, [r3, #0]
    7bb6:	0e9b      	lsrs	r3, r3, #26
				+ (NVM_DFLL_COARSE_POS / 32))
				>> (NVM_DFLL_COARSE_POS % 32))
				& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
		// In some revision chip, the Calibration value is not correct 
		if (coarse == 0x3f) {
    7bb8:	2b3f      	cmp	r3, #63	; 0x3f
    7bba:	d01a      	beq.n	7bf2 <DFLL_Enable+0x7a>
			coarse = 0x1f;
		}

		dfll_conf.coarse_value = coarse;
    7bbc:	7283      	strb	r3, [r0, #10]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
	#  endif
		
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;

		dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    7bbe:	2307      	movs	r3, #7
    7bc0:	7383      	strb	r3, [r0, #14]
		dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    7bc2:	4b0e      	ldr	r3, [pc, #56]	; (7bfc <DFLL_Enable+0x84>)
    7bc4:	9305      	str	r3, [sp, #20]


		system_clock_source_dfll_set_config(&dfll_conf);
    7bc6:	4b0e      	ldr	r3, [pc, #56]	; (7c00 <DFLL_Enable+0x88>)
    7bc8:	4798      	blx	r3
	
	
		//  Set up clock channel for closed loop
		struct system_gclk_chan_config dfll_gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    7bca:	466a      	mov	r2, sp
    7bcc:	2302      	movs	r3, #2
		system_gclk_chan_set_config(OSCCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    7bce:	4669      	mov	r1, sp
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    7bd0:	7013      	strb	r3, [r2, #0]
		system_gclk_chan_set_config(OSCCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    7bd2:	2000      	movs	r0, #0
    7bd4:	4b0b      	ldr	r3, [pc, #44]	; (7c04 <DFLL_Enable+0x8c>)
    7bd6:	4798      	blx	r3
		system_gclk_chan_enable(OSCCTRL_GCLK_ID_DFLL48);
    7bd8:	2000      	movs	r0, #0
    7bda:	4b0b      	ldr	r3, [pc, #44]	; (7c08 <DFLL_Enable+0x90>)
    7bdc:	4798      	blx	r3
	
		//  Turn on closed loop mode	
		system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    7bde:	2007      	movs	r0, #7
    7be0:	4b0a      	ldr	r3, [pc, #40]	; (7c0c <DFLL_Enable+0x94>)
    7be2:	4798      	blx	r3
    7be4:	4c0a      	ldr	r4, [pc, #40]	; (7c10 <DFLL_Enable+0x98>)
		while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    7be6:	2007      	movs	r0, #7
    7be8:	47a0      	blx	r4
    7bea:	2800      	cmp	r0, #0
    7bec:	d0fb      	beq.n	7be6 <DFLL_Enable+0x6e>
		if (CONF_CLOCK_DFLL_ON_DEMAND) {
			OSCCTRL->DFLLCTRL.bit.ONDEMAND = 1;
		}
	
}
    7bee:	b006      	add	sp, #24
    7bf0:	bd10      	pop	{r4, pc}
		if (coarse == 0x3f) {
    7bf2:	3b20      	subs	r3, #32
    7bf4:	e7e2      	b.n	7bbc <DFLL_Enable+0x44>
    7bf6:	46c0      	nop			; (mov r8, r8)
    7bf8:	00806020 	.word	0x00806020
    7bfc:	05b8003f 	.word	0x05b8003f
    7c00:	00016369 	.word	0x00016369
    7c04:	000168f5 	.word	0x000168f5
    7c08:	00016935 	.word	0x00016935
    7c0c:	000163e9 	.word	0x000163e9
    7c10:	00016525 	.word	0x00016525

00007c14 <mainClockPowerup>:
void mainClockPowerup(void){
    7c14:	b500      	push	{lr}
	if (!(OSCCTRL->DFLLCTRL.reg & dfllctrEnable)){
    7c16:	4b0d      	ldr	r3, [pc, #52]	; (7c4c <mainClockPowerup+0x38>)
void mainClockPowerup(void){
    7c18:	b085      	sub	sp, #20
	if (!(OSCCTRL->DFLLCTRL.reg & dfllctrEnable)){
    7c1a:	8b1b      	ldrh	r3, [r3, #24]
    7c1c:	079b      	lsls	r3, r3, #30
    7c1e:	d401      	bmi.n	7c24 <mainClockPowerup+0x10>
		DFLL_Enable();
    7c20:	4b0b      	ldr	r3, [pc, #44]	; (7c50 <mainClockPowerup+0x3c>)
    7c22:	4798      	blx	r3
	config->division_factor    = 1;
    7c24:	2301      	movs	r3, #1
    7c26:	a901      	add	r1, sp, #4
    7c28:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    7c2a:	2300      	movs	r3, #0
    7c2c:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    7c2e:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    7c30:	724b      	strb	r3, [r1, #9]
	gclk_conf.source_clock    = CONF_CLOCK_GCLK_0_CLOCK_SOURCE;   \
    7c32:	3307      	adds	r3, #7
    7c34:	700b      	strb	r3, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);       \
    7c36:	2000      	movs	r0, #0
    7c38:	4b06      	ldr	r3, [pc, #24]	; (7c54 <mainClockPowerup+0x40>)
    7c3a:	4798      	blx	r3
	system_gclk_gen_enable(GCLK_GENERATOR_0);                       \
    7c3c:	2000      	movs	r0, #0
    7c3e:	4b06      	ldr	r3, [pc, #24]	; (7c58 <mainClockPowerup+0x44>)
    7c40:	4798      	blx	r3
	delay_init();
    7c42:	4b06      	ldr	r3, [pc, #24]	; (7c5c <mainClockPowerup+0x48>)
    7c44:	4798      	blx	r3
}
    7c46:	b005      	add	sp, #20
    7c48:	bd00      	pop	{pc}
    7c4a:	46c0      	nop			; (mov r8, r8)
    7c4c:	40000c00 	.word	0x40000c00
    7c50:	00007b79 	.word	0x00007b79
    7c54:	0001679d 	.word	0x0001679d
    7c58:	00016849 	.word	0x00016849
    7c5c:	00016179 	.word	0x00016179

00007c60 <get_time>:
//  External Clock Functions *************************************************************

void get_time(void){
	uint8_t temp_buf[20];
	int16_t temp_var16;
	temp_buf[0]=0x00;
    7c60:	2300      	movs	r3, #0
void get_time(void){
    7c62:	b530      	push	{r4, r5, lr}
    7c64:	b087      	sub	sp, #28
	temp_buf[0]=0x00;
    7c66:	ac01      	add	r4, sp, #4
    7c68:	7023      	strb	r3, [r4, #0]
	i2c_read_write(readp, rtc_add, temp_buf, 19);
    7c6a:	0022      	movs	r2, r4
    7c6c:	2168      	movs	r1, #104	; 0x68
    7c6e:	3313      	adds	r3, #19
    7c70:	2000      	movs	r0, #0
    7c72:	4d18      	ldr	r5, [pc, #96]	; (7cd4 <get_time+0x74>)
    7c74:	47a8      	blx	r5
	//Parse Data
	current_time.seconds=	temp_buf[0x01];
    7c76:	7863      	ldrb	r3, [r4, #1]
    7c78:	4d17      	ldr	r5, [pc, #92]	; (7cd8 <get_time+0x78>)
    7c7a:	702b      	strb	r3, [r5, #0]
	current_time.minutes=	temp_buf[0x02];
    7c7c:	78a3      	ldrb	r3, [r4, #2]
    7c7e:	706b      	strb	r3, [r5, #1]
	current_time.hours=		temp_buf[0x03];
    7c80:	78e3      	ldrb	r3, [r4, #3]
    7c82:	70ab      	strb	r3, [r5, #2]
	current_time.date=		temp_buf[0x05] ;
    7c84:	7963      	ldrb	r3, [r4, #5]
    7c86:	712b      	strb	r3, [r5, #4]
	current_time.month=		temp_buf[0x06] & 0x7F;//mask out first "century" bit
    7c88:	237f      	movs	r3, #127	; 0x7f
    7c8a:	79a2      	ldrb	r2, [r4, #6]
    7c8c:	4013      	ands	r3, r2
    7c8e:	716b      	strb	r3, [r5, #5]
	current_time.year=		temp_buf[0x07];
    7c90:	79e3      	ldrb	r3, [r4, #7]
    7c92:	71ab      	strb	r3, [r5, #6]
	current_time.control=	temp_buf[0x0F];
    7c94:	7be3      	ldrb	r3, [r4, #15]
    7c96:	71eb      	strb	r3, [r5, #7]
	current_time.control_status=	temp_buf[0x10];
    7c98:	7c23      	ldrb	r3, [r4, #16]
    7c9a:	722b      	strb	r3, [r5, #8]
	temp_var16=temp_buf[0x12];
	temp_var16=temp_var16<<8;
    7c9c:	7ca3      	ldrb	r3, [r4, #18]
	temp_var16=temp_var16+temp_buf[0x13];
    7c9e:	7ce0      	ldrb	r0, [r4, #19]
	temp_var16=temp_var16<<8;
    7ca0:	021b      	lsls	r3, r3, #8
	temp_var16=temp_var16+temp_buf[0x13];
    7ca2:	18c0      	adds	r0, r0, r3
	current_time.temperatureC=temp_var16;
    7ca4:	b200      	sxth	r0, r0
    7ca6:	4b0d      	ldr	r3, [pc, #52]	; (7cdc <get_time+0x7c>)
    7ca8:	4798      	blx	r3
	current_time.temperatureC=current_time.temperatureC/256;
    7caa:	21ee      	movs	r1, #238	; 0xee
    7cac:	4b0c      	ldr	r3, [pc, #48]	; (7ce0 <get_time+0x80>)
    7cae:	0589      	lsls	r1, r1, #22
    7cb0:	4798      	blx	r3
	current_time.temperatureF=current_time.temperatureC*1.8+32;
    7cb2:	4b0c      	ldr	r3, [pc, #48]	; (7ce4 <get_time+0x84>)
	current_time.temperatureC=current_time.temperatureC/256;
    7cb4:	60e8      	str	r0, [r5, #12]
	current_time.temperatureF=current_time.temperatureC*1.8+32;
    7cb6:	4798      	blx	r3
    7cb8:	4c0b      	ldr	r4, [pc, #44]	; (7ce8 <get_time+0x88>)
    7cba:	4a0c      	ldr	r2, [pc, #48]	; (7cec <get_time+0x8c>)
    7cbc:	4b0c      	ldr	r3, [pc, #48]	; (7cf0 <get_time+0x90>)
    7cbe:	47a0      	blx	r4
    7cc0:	2200      	movs	r2, #0
    7cc2:	4b0c      	ldr	r3, [pc, #48]	; (7cf4 <get_time+0x94>)
    7cc4:	4c0c      	ldr	r4, [pc, #48]	; (7cf8 <get_time+0x98>)
    7cc6:	47a0      	blx	r4
    7cc8:	4b0c      	ldr	r3, [pc, #48]	; (7cfc <get_time+0x9c>)
    7cca:	4798      	blx	r3
    7ccc:	6128      	str	r0, [r5, #16]
	
}
    7cce:	b007      	add	sp, #28
    7cd0:	bd30      	pop	{r4, r5, pc}
    7cd2:	46c0      	nop			; (mov r8, r8)
    7cd4:	000131a9 	.word	0x000131a9
    7cd8:	20002778 	.word	0x20002778
    7cdc:	0001def1 	.word	0x0001def1
    7ce0:	0001d939 	.word	0x0001d939
    7ce4:	0001fb6d 	.word	0x0001fb6d
    7ce8:	0001eea5 	.word	0x0001eea5
    7cec:	cccccccd 	.word	0xcccccccd
    7cf0:	3ffccccc 	.word	0x3ffccccc
    7cf4:	40400000 	.word	0x40400000
    7cf8:	0001e01d 	.word	0x0001e01d
    7cfc:	0001fc11 	.word	0x0001fc11

00007d00 <set_time>:

void set_time(void){
	uint8_t temp_buf[20];

	temp_buf[0]=0x00;
    7d00:	2300      	movs	r3, #0
void set_time(void){
    7d02:	b510      	push	{r4, lr}
    7d04:	b086      	sub	sp, #24
	temp_buf[0]=0x00;
    7d06:	aa01      	add	r2, sp, #4
    7d08:	7013      	strb	r3, [r2, #0]

	//Parse Data
	temp_buf[0x01]=temp_time.seconds;
    7d0a:	4b0b      	ldr	r3, [pc, #44]	; (7d38 <set_time+0x38>)
	temp_buf[0x03]=temp_time.hours;
	temp_buf[0x04]=temp_time.day;
	temp_buf[0x05]=temp_time.date;
	temp_buf[0x06]=temp_time.month;
	temp_buf[0x07]=temp_time.year;
	i2c_read_write(writep, rtc_add, temp_buf, 8);
    7d0c:	2001      	movs	r0, #1
	temp_buf[0x01]=temp_time.seconds;
    7d0e:	7819      	ldrb	r1, [r3, #0]
	i2c_read_write(writep, rtc_add, temp_buf, 8);
    7d10:	4c0a      	ldr	r4, [pc, #40]	; (7d3c <set_time+0x3c>)
	temp_buf[0x01]=temp_time.seconds;
    7d12:	7051      	strb	r1, [r2, #1]
	temp_buf[0x02]=temp_time.minutes;
    7d14:	7859      	ldrb	r1, [r3, #1]
    7d16:	7091      	strb	r1, [r2, #2]
	temp_buf[0x03]=temp_time.hours;
    7d18:	7899      	ldrb	r1, [r3, #2]
    7d1a:	70d1      	strb	r1, [r2, #3]
	temp_buf[0x04]=temp_time.day;
    7d1c:	78d9      	ldrb	r1, [r3, #3]
    7d1e:	7111      	strb	r1, [r2, #4]
	temp_buf[0x05]=temp_time.date;
    7d20:	7919      	ldrb	r1, [r3, #4]
    7d22:	7151      	strb	r1, [r2, #5]
	temp_buf[0x06]=temp_time.month;
    7d24:	7959      	ldrb	r1, [r3, #5]
    7d26:	7191      	strb	r1, [r2, #6]
	temp_buf[0x07]=temp_time.year;
    7d28:	799b      	ldrb	r3, [r3, #6]
	i2c_read_write(writep, rtc_add, temp_buf, 8);
    7d2a:	2168      	movs	r1, #104	; 0x68
	temp_buf[0x07]=temp_time.year;
    7d2c:	71d3      	strb	r3, [r2, #7]
	i2c_read_write(writep, rtc_add, temp_buf, 8);
    7d2e:	2308      	movs	r3, #8
    7d30:	47a0      	blx	r4
	
}
    7d32:	b006      	add	sp, #24
    7d34:	bd10      	pop	{r4, pc}
    7d36:	46c0      	nop			; (mov r8, r8)
    7d38:	20003174 	.word	0x20003174
    7d3c:	000131a9 	.word	0x000131a9

00007d40 <ext_osc_onoff>:


void ext_osc_onoff(bool onoff){
    7d40:	b530      	push	{r4, r5, lr}
    7d42:	0004      	movs	r4, r0
    7d44:	b085      	sub	sp, #20
	
	///////////////////////////////////////////////////////////////////////////
	//  Switch over 32k source to internal clock if turning off external oscillator
	if (!onoff){
    7d46:	2800      	cmp	r0, #0
    7d48:	d03e      	beq.n	7dc8 <ext_osc_onoff+0x88>
	
	///////////////////////////////////////////////////////////////////
	//  Turn on external oscillator (RTC chip)
	uint8_t temp_buf[3];

	temp_buf[0] = 0x0E;
    7d4a:	466a      	mov	r2, sp
    7d4c:	230e      	movs	r3, #14
	//Register 0x0Fh
	//0b00001000 = 0x08; 32kHz osc on
	//0b00000000 = 0x00; 32kHz osc off
	if (onoff){
		temp_buf[2] = 0x08;
		isExtClockEnabled = true;
    7d4e:	2501      	movs	r5, #1
	temp_buf[0] = 0x0E;
    7d50:	7013      	strb	r3, [r2, #0]
	temp_buf[1] = 0x04;
    7d52:	3b0a      	subs	r3, #10
    7d54:	7053      	strb	r3, [r2, #1]
		temp_buf[2] = 0x08;
    7d56:	3304      	adds	r3, #4
    7d58:	7093      	strb	r3, [r2, #2]
		isExtClockEnabled = true;
    7d5a:	4b2c      	ldr	r3, [pc, #176]	; (7e0c <ext_osc_onoff+0xcc>)
	}else{
		temp_buf[2] = 0x00;
		isExtClockEnabled = false;
	}	
	i2c_read_write(writep, rtc_add, temp_buf, 3);
    7d5c:	2168      	movs	r1, #104	; 0x68
		isExtClockEnabled = true;
    7d5e:	701d      	strb	r5, [r3, #0]
	i2c_read_write(writep, rtc_add, temp_buf, 3);
    7d60:	4c2b      	ldr	r4, [pc, #172]	; (7e10 <ext_osc_onoff+0xd0>)
    7d62:	2303      	movs	r3, #3
    7d64:	2001      	movs	r0, #1
    7d66:	47a0      	blx	r4
	delay_ms(10);	
    7d68:	200a      	movs	r0, #10
    7d6a:	4b2a      	ldr	r3, [pc, #168]	; (7e14 <ext_osc_onoff+0xd4>)
    7d6c:	4798      	blx	r3
	config->frequency           = 32768UL;
    7d6e:	2380      	movs	r3, #128	; 0x80
    7d70:	ac01      	add	r4, sp, #4
    7d72:	021b      	lsls	r3, r3, #8
    7d74:	6063      	str	r3, [r4, #4]
	config->write_once          = false;
    7d76:	2300      	movs	r3, #0
		xosc32k_conf.enable_1khz_output  = true;//CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
		xosc32k_conf.enable_32khz_output = true;//CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
		xosc32k_conf.on_demand           = false;
		xosc32k_conf.run_in_standby      = true;//CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

		system_clock_source_xosc32k_set_config(&xosc32k_conf);
    7d78:	0020      	movs	r0, r4
    7d7a:	72a3      	strb	r3, [r4, #10]
		xosc32k_conf.startup_time        = SYSTEM_XOSC32K_STARTUP_2048;//CONF_CLOCK_XOSC32K_STARTUP_TIME;
    7d7c:	7063      	strb	r3, [r4, #1]
		xosc32k_conf.on_demand           = false;
    7d7e:	7263      	strb	r3, [r4, #9]
		system_clock_source_xosc32k_set_config(&xosc32k_conf);
    7d80:	4b25      	ldr	r3, [pc, #148]	; (7e18 <ext_osc_onoff+0xd8>)
	config->enable_32khz_output = true;
    7d82:	70e5      	strb	r5, [r4, #3]
		xosc32k_conf.external_clock      = SYSTEM_CLOCK_EXTERNAL_CLOCK;//CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    7d84:	7025      	strb	r5, [r4, #0]
		xosc32k_conf.enable_1khz_output  = true;//CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    7d86:	70a5      	strb	r5, [r4, #2]
		xosc32k_conf.run_in_standby      = true;//CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    7d88:	7225      	strb	r5, [r4, #8]
		system_clock_source_xosc32k_set_config(&xosc32k_conf);
    7d8a:	4798      	blx	r3
		system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    7d8c:	2005      	movs	r0, #5
    7d8e:	4b23      	ldr	r3, [pc, #140]	; (7e1c <ext_osc_onoff+0xdc>)
    7d90:	4798      	blx	r3
    7d92:	4d23      	ldr	r5, [pc, #140]	; (7e20 <ext_osc_onoff+0xe0>)
		while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    7d94:	2005      	movs	r0, #5
    7d96:	47a8      	blx	r5
    7d98:	2800      	cmp	r0, #0
    7d9a:	d0fb      	beq.n	7d94 <ext_osc_onoff+0x54>
		OSC32KCTRL->XOSC32K.bit.ONDEMAND = 1;
    7d9c:	2180      	movs	r1, #128	; 0x80
    7d9e:	4a21      	ldr	r2, [pc, #132]	; (7e24 <ext_osc_onoff+0xe4>)
	system_gclk_gen_set_config(GCLK_FOR_32khz, &gclock_gen_conf);
    7da0:	2002      	movs	r0, #2
		OSC32KCTRL->XOSC32K.bit.ONDEMAND = 1;
    7da2:	6953      	ldr	r3, [r2, #20]
    7da4:	430b      	orrs	r3, r1
    7da6:	6153      	str	r3, [r2, #20]
	config->division_factor    = 1;
    7da8:	2301      	movs	r3, #1
	config->high_when_disabled = false;
    7daa:	2200      	movs	r2, #0
	config->division_factor    = 1;
    7dac:	6063      	str	r3, [r4, #4]
	gclock_gen_conf.run_in_standby = true;
    7dae:	7223      	strb	r3, [r4, #8]
		gclock_gen_conf.source_clock = SYSTEM_CLOCK_SOURCE_XOSC32K;
    7db0:	3304      	adds	r3, #4
    7db2:	7023      	strb	r3, [r4, #0]
	system_gclk_gen_set_config(GCLK_FOR_32khz, &gclock_gen_conf);
    7db4:	0021      	movs	r1, r4
    7db6:	4b1c      	ldr	r3, [pc, #112]	; (7e28 <ext_osc_onoff+0xe8>)
	config->high_when_disabled = false;
    7db8:	7062      	strb	r2, [r4, #1]
	config->output_enable      = false;
    7dba:	7262      	strb	r2, [r4, #9]
    7dbc:	4798      	blx	r3
	system_gclk_gen_enable(GCLK_FOR_32khz);
    7dbe:	2002      	movs	r0, #2
    7dc0:	4b1a      	ldr	r3, [pc, #104]	; (7e2c <ext_osc_onoff+0xec>)
    7dc2:	4798      	blx	r3
	if (onoff){
		clock_32k_source(clock_ext);
	}
	

}
    7dc4:	b005      	add	sp, #20
    7dc6:	bd30      	pop	{r4, r5, pc}
	config->division_factor    = 1;
    7dc8:	2301      	movs	r3, #1
    7dca:	a901      	add	r1, sp, #4
    7dcc:	604b      	str	r3, [r1, #4]
	gclock_gen_conf.run_in_standby = true;
    7dce:	720b      	strb	r3, [r1, #8]
		gclock_gen_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    7dd0:	3302      	adds	r3, #2
	config->high_when_disabled = false;
    7dd2:	7048      	strb	r0, [r1, #1]
	config->output_enable      = false;
    7dd4:	7248      	strb	r0, [r1, #9]
    7dd6:	700b      	strb	r3, [r1, #0]
	system_gclk_gen_set_config(GCLK_FOR_32khz, &gclock_gen_conf);
    7dd8:	2002      	movs	r0, #2
    7dda:	4b13      	ldr	r3, [pc, #76]	; (7e28 <ext_osc_onoff+0xe8>)
    7ddc:	4798      	blx	r3
	system_gclk_gen_enable(GCLK_FOR_32khz);
    7dde:	2002      	movs	r0, #2
    7de0:	4b12      	ldr	r3, [pc, #72]	; (7e2c <ext_osc_onoff+0xec>)
    7de2:	4798      	blx	r3
	temp_buf[0] = 0x0E;
    7de4:	466a      	mov	r2, sp
    7de6:	230e      	movs	r3, #14
    7de8:	7013      	strb	r3, [r2, #0]
	temp_buf[1] = 0x04;
    7dea:	3b0a      	subs	r3, #10
    7dec:	7053      	strb	r3, [r2, #1]
		isExtClockEnabled = false;
    7dee:	4b07      	ldr	r3, [pc, #28]	; (7e0c <ext_osc_onoff+0xcc>)
		temp_buf[2] = 0x00;
    7df0:	7094      	strb	r4, [r2, #2]
		isExtClockEnabled = false;
    7df2:	701c      	strb	r4, [r3, #0]
	i2c_read_write(writep, rtc_add, temp_buf, 3);
    7df4:	2168      	movs	r1, #104	; 0x68
    7df6:	2303      	movs	r3, #3
    7df8:	2001      	movs	r0, #1
    7dfa:	4c05      	ldr	r4, [pc, #20]	; (7e10 <ext_osc_onoff+0xd0>)
    7dfc:	47a0      	blx	r4
	delay_ms(10);	
    7dfe:	200a      	movs	r0, #10
    7e00:	4b04      	ldr	r3, [pc, #16]	; (7e14 <ext_osc_onoff+0xd4>)
    7e02:	4798      	blx	r3
		system_clock_source_disable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    7e04:	4b0a      	ldr	r3, [pc, #40]	; (7e30 <ext_osc_onoff+0xf0>)
    7e06:	2005      	movs	r0, #5
    7e08:	4798      	blx	r3
    7e0a:	e7db      	b.n	7dc4 <ext_osc_onoff+0x84>
    7e0c:	20000e6e 	.word	0x20000e6e
    7e10:	000131a9 	.word	0x000131a9
    7e14:	000161e9 	.word	0x000161e9
    7e18:	000162cd 	.word	0x000162cd
    7e1c:	000163e9 	.word	0x000163e9
    7e20:	00016525 	.word	0x00016525
    7e24:	40001000 	.word	0x40001000
    7e28:	0001679d 	.word	0x0001679d
    7e2c:	00016849 	.word	0x00016849
    7e30:	000164a5 	.word	0x000164a5

00007e34 <gen_posix_time>:



uint32_t gen_posix_time(struct TIME *time_inst){
    7e34:	b5f0      	push	{r4, r5, r6, r7, lr}
    7e36:	46de      	mov	lr, fp
    7e38:	4657      	mov	r7, sl
    7e3a:	464e      	mov	r6, r9
    7e3c:	4645      	mov	r5, r8
    7e3e:	b5e0      	push	{r5, r6, r7, lr}
	//https://stackoverflow.com/questions/21975472/how-to-calculate-epoch-day
	uint32_t posix_time;
	uint32_t tm_sec, tm_min, tm_hour, tm_yday, tm_year, tm_month;
	
	tm_sec = bcd2int(time_inst->seconds);
    7e40:	7803      	ldrb	r3, [r0, #0]
uint32_t gen_posix_time(struct TIME *time_inst){
    7e42:	b083      	sub	sp, #12
	tm_sec = bcd2int(time_inst->seconds);
    7e44:	4698      	mov	r8, r3

uint32_t bcd2int(uint8_t bcd_var){
	uint8_t dec;
	dec = bcd_var & 0xF0;
	dec = dec>>4;
	dec = dec*10;
    7e46:	091b      	lsrs	r3, r3, #4
    7e48:	009a      	lsls	r2, r3, #2
    7e4a:	189b      	adds	r3, r3, r2
    7e4c:	005b      	lsls	r3, r3, #1
    7e4e:	9301      	str	r3, [sp, #4]
	tm_min = bcd2int(time_inst->minutes);
    7e50:	7842      	ldrb	r2, [r0, #1]
    7e52:	4691      	mov	r9, r2
	dec = dec*10;
    7e54:	0916      	lsrs	r6, r2, #4
	tm_hour = bcd2int(time_inst->hours);
    7e56:	7882      	ldrb	r2, [r0, #2]
	dec = dec*10;
    7e58:	00b3      	lsls	r3, r6, #2
    7e5a:	0917      	lsrs	r7, r2, #4
    7e5c:	18f6      	adds	r6, r6, r3
    7e5e:	00bb      	lsls	r3, r7, #2
    7e60:	18ff      	adds	r7, r7, r3
	tm_hour = bcd2int(time_inst->hours);
    7e62:	4692      	mov	sl, r2
	dec = dec*10;
    7e64:	007a      	lsls	r2, r7, #1
	dec = dec + (bcd_var & 0x0F);
    7e66:	270f      	movs	r7, #15
	dec = dec*10;
    7e68:	9200      	str	r2, [sp, #0]
	tm_year = bcd2int(time_inst->year)+100;//  Years since 1900, time_inst->year is years since 2000
    7e6a:	7982      	ldrb	r2, [r0, #6]
	tm_month = bcd2int(time_inst->month);
    7e6c:	7941      	ldrb	r1, [r0, #5]
	dec = dec*10;
    7e6e:	0913      	lsrs	r3, r2, #4
    7e70:	009d      	lsls	r5, r3, #2
    7e72:	195d      	adds	r5, r3, r5
	dec = dec + (bcd_var & 0x0F);
    7e74:	403a      	ands	r2, r7
	dec = dec*10;
    7e76:	006d      	lsls	r5, r5, #1
	dec = dec + (bcd_var & 0x0F);
    7e78:	18ad      	adds	r5, r5, r2
	tm_yday = bcd2int(time_inst->date);
    7e7a:	7902      	ldrb	r2, [r0, #4]
	
	return dec;
    7e7c:	b2ed      	uxtb	r5, r5
	dec = dec*10;
    7e7e:	0914      	lsrs	r4, r2, #4
    7e80:	00a3      	lsls	r3, r4, #2
    7e82:	18e4      	adds	r4, r4, r3
    7e84:	090b      	lsrs	r3, r1, #4
    7e86:	0098      	lsls	r0, r3, #2
    7e88:	181b      	adds	r3, r3, r0
	dec = dec + (bcd_var & 0x0F);
    7e8a:	4039      	ands	r1, r7
	dec = dec*10;
    7e8c:	005b      	lsls	r3, r3, #1
	dec = dec + (bcd_var & 0x0F);
    7e8e:	185b      	adds	r3, r3, r1
    7e90:	403a      	ands	r2, r7
	dec = dec*10;
    7e92:	0064      	lsls	r4, r4, #1
	return dec;
    7e94:	b2db      	uxtb	r3, r3
	dec = dec + (bcd_var & 0x0F);
    7e96:	18a4      	adds	r4, r4, r2
	tm_yday = tm_yday + days_per_month_acc[(tm_month-1)] -1;
    7e98:	3b01      	subs	r3, #1
    7e9a:	4a21      	ldr	r2, [pc, #132]	; (7f20 <gen_posix_time+0xec>)
    7e9c:	009b      	lsls	r3, r3, #2
    7e9e:	5898      	ldr	r0, [r3, r2]
	return dec;
    7ea0:	b2e4      	uxtb	r4, r4
	tm_yday = tm_yday + days_per_month_acc[(tm_month-1)] -1;
    7ea2:	3c01      	subs	r4, #1
    7ea4:	1824      	adds	r4, r4, r0
	posix_time += ((tm_year-69)/4)*86400 -((tm_year-1)/100)*86400 + ((tm_year+299)/400)*86400;
    7ea6:	0028      	movs	r0, r5
    7ea8:	301f      	adds	r0, #31
    7eaa:	491e      	ldr	r1, [pc, #120]	; (7f24 <gen_posix_time+0xf0>)
    7eac:	0880      	lsrs	r0, r0, #2
    7eae:	1824      	adds	r4, r4, r0
    7eb0:	0028      	movs	r0, r5
    7eb2:	468b      	mov	fp, r1
    7eb4:	21c8      	movs	r1, #200	; 0xc8
    7eb6:	3090      	adds	r0, #144	; 0x90
    7eb8:	0049      	lsls	r1, r1, #1
    7eba:	30ff      	adds	r0, #255	; 0xff
    7ebc:	47d8      	blx	fp
    7ebe:	1824      	adds	r4, r4, r0
    7ec0:	0028      	movs	r0, r5
    7ec2:	2164      	movs	r1, #100	; 0x64
    7ec4:	3063      	adds	r0, #99	; 0x63
    7ec6:	47d8      	blx	fp
    7ec8:	1a20      	subs	r0, r4, r0
    7eca:	4c17      	ldr	r4, [pc, #92]	; (7f28 <gen_posix_time+0xf4>)
	dec = dec*10;
    7ecc:	0076      	lsls	r6, r6, #1
	posix_time += ((tm_year-69)/4)*86400 -((tm_year-1)/100)*86400 + ((tm_year+299)/400)*86400;
    7ece:	4344      	muls	r4, r0
	dec = dec + (bcd_var & 0x0F);
    7ed0:	4648      	mov	r0, r9
    7ed2:	4038      	ands	r0, r7
    7ed4:	1830      	adds	r0, r6, r0
	return dec;
    7ed6:	b2c0      	uxtb	r0, r0
	dec = dec + (bcd_var & 0x0F);
    7ed8:	9b01      	ldr	r3, [sp, #4]
	posix_time = tm_sec+tm_min*60+tm_hour*3600+tm_yday*86400 + (tm_year-70)*31536000;
    7eda:	0106      	lsls	r6, r0, #4
    7edc:	1a36      	subs	r6, r6, r0
	dec = dec + (bcd_var & 0x0F);
    7ede:	4640      	mov	r0, r8
    7ee0:	469c      	mov	ip, r3
	posix_time += ((tm_year-69)/4)*86400 -((tm_year-1)/100)*86400 + ((tm_year+299)/400)*86400;
    7ee2:	4b12      	ldr	r3, [pc, #72]	; (7f2c <gen_posix_time+0xf8>)
	dec = dec + (bcd_var & 0x0F);
    7ee4:	4038      	ands	r0, r7
    7ee6:	4460      	add	r0, ip
	posix_time += ((tm_year-69)/4)*86400 -((tm_year-1)/100)*86400 + ((tm_year+299)/400)*86400;
    7ee8:	469c      	mov	ip, r3
	dec = dec + (bcd_var & 0x0F);
    7eea:	9a00      	ldr	r2, [sp, #0]
    7eec:	4653      	mov	r3, sl
	return dec;
    7eee:	b2c0      	uxtb	r0, r0
	posix_time += ((tm_year-69)/4)*86400 -((tm_year-1)/100)*86400 + ((tm_year+299)/400)*86400;
    7ef0:	4460      	add	r0, ip
	posix_time = tm_sec+tm_min*60+tm_hour*3600+tm_yday*86400 + (tm_year-70)*31536000;
    7ef2:	00b6      	lsls	r6, r6, #2
	dec = dec + (bcd_var & 0x0F);
    7ef4:	4694      	mov	ip, r2
	posix_time += ((tm_year-69)/4)*86400 -((tm_year-1)/100)*86400 + ((tm_year+299)/400)*86400;
    7ef6:	1836      	adds	r6, r6, r0
	posix_time = tm_sec+tm_min*60+tm_hour*3600+tm_yday*86400 + (tm_year-70)*31536000;
    7ef8:	20e1      	movs	r0, #225	; 0xe1
	dec = dec + (bcd_var & 0x0F);
    7efa:	401f      	ands	r7, r3
    7efc:	4467      	add	r7, ip
	posix_time = tm_sec+tm_min*60+tm_hour*3600+tm_yday*86400 + (tm_year-70)*31536000;
    7efe:	0100      	lsls	r0, r0, #4
	return dec;
    7f00:	b2ff      	uxtb	r7, r7
	posix_time = tm_sec+tm_min*60+tm_hour*3600+tm_yday*86400 + (tm_year-70)*31536000;
    7f02:	4347      	muls	r7, r0
    7f04:	480a      	ldr	r0, [pc, #40]	; (7f30 <gen_posix_time+0xfc>)
	tm_year = bcd2int(time_inst->year)+100;//  Years since 1900, time_inst->year is years since 2000
    7f06:	3564      	adds	r5, #100	; 0x64
	posix_time = tm_sec+tm_min*60+tm_hour*3600+tm_yday*86400 + (tm_year-70)*31536000;
    7f08:	4368      	muls	r0, r5
	posix_time += ((tm_year-69)/4)*86400 -((tm_year-1)/100)*86400 + ((tm_year+299)/400)*86400;
    7f0a:	19f7      	adds	r7, r6, r7
    7f0c:	1838      	adds	r0, r7, r0
    7f0e:	1820      	adds	r0, r4, r0
}
    7f10:	b003      	add	sp, #12
    7f12:	bc3c      	pop	{r2, r3, r4, r5}
    7f14:	4690      	mov	r8, r2
    7f16:	4699      	mov	r9, r3
    7f18:	46a2      	mov	sl, r4
    7f1a:	46ab      	mov	fp, r5
    7f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7f1e:	46c0      	nop			; (mov r8, r8)
    7f20:	20000160 	.word	0x20000160
    7f24:	0001cd1d 	.word	0x0001cd1d
    7f28:	00015180 	.word	0x00015180
    7f2c:	7c6beb00 	.word	0x7c6beb00
    7f30:	01e13380 	.word	0x01e13380

00007f34 <incBcdData>:
uint8_t incBcdData(uint8_t bcdData, int8_t increment, uint8_t dataMin, uint8_t dataMax){
    7f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7f36:	0014      	movs	r4, r2
	dec = dec*10;
    7f38:	0902      	lsrs	r2, r0, #4
uint8_t incBcdData(uint8_t bcdData, int8_t increment, uint8_t dataMin, uint8_t dataMax){
    7f3a:	0005      	movs	r5, r0
	dec = dec*10;
    7f3c:	0090      	lsls	r0, r2, #2
    7f3e:	1812      	adds	r2, r2, r0
	dec = dec + (bcd_var & 0x0F);
    7f40:	200f      	movs	r0, #15
uint8_t incBcdData(uint8_t bcdData, int8_t increment, uint8_t dataMin, uint8_t dataMax){
    7f42:	46ce      	mov	lr, r9
    7f44:	4647      	mov	r7, r8
	dec = dec*10;
    7f46:	0052      	lsls	r2, r2, #1
	dec = dec + (bcd_var & 0x0F);
    7f48:	4028      	ands	r0, r5
    7f4a:	1810      	adds	r0, r2, r0
uint8_t incBcdData(uint8_t bcdData, int8_t increment, uint8_t dataMin, uint8_t dataMax){
    7f4c:	b580      	push	{r7, lr}
	dec = dec + (bcd_var & 0x0F);
    7f4e:	b2c0      	uxtb	r0, r0
	if (increment<0){
    7f50:	2900      	cmp	r1, #0
    7f52:	db22      	blt.n	7f9a <incBcdData+0x66>
		if (intData<dataMax){
    7f54:	4283      	cmp	r3, r0
    7f56:	d81d      	bhi.n	7f94 <incBcdData+0x60>
	while (binaryInput > 0) {
    7f58:	2c00      	cmp	r4, #0
    7f5a:	d025      	beq.n	7fa8 <incBcdData+0x74>
    7f5c:	4b13      	ldr	r3, [pc, #76]	; (7fac <incBcdData+0x78>)
    7f5e:	2600      	movs	r6, #0
    7f60:	4699      	mov	r9, r3
    7f62:	4b13      	ldr	r3, [pc, #76]	; (7fb0 <incBcdData+0x7c>)
    7f64:	2700      	movs	r7, #0
    7f66:	4698      	mov	r8, r3
		bcdResult |= (binaryInput % 10) << (shift++ << 2);
    7f68:	0020      	movs	r0, r4
    7f6a:	210a      	movs	r1, #10
    7f6c:	47c8      	blx	r9
    7f6e:	1c7d      	adds	r5, r7, #1
    7f70:	b2c9      	uxtb	r1, r1
    7f72:	00bf      	lsls	r7, r7, #2
    7f74:	40b9      	lsls	r1, r7
		binaryInput /= 10;
    7f76:	0020      	movs	r0, r4
		bcdResult |= (binaryInput % 10) << (shift++ << 2);
    7f78:	430e      	orrs	r6, r1
		binaryInput /= 10;
    7f7a:	210a      	movs	r1, #10
    7f7c:	47c0      	blx	r8
		bcdResult |= (binaryInput % 10) << (shift++ << 2);
    7f7e:	b2ed      	uxtb	r5, r5
		binaryInput /= 10;
    7f80:	b2c4      	uxtb	r4, r0
		bcdResult |= (binaryInput % 10) << (shift++ << 2);
    7f82:	b2f6      	uxtb	r6, r6
    7f84:	002f      	movs	r7, r5
	while (binaryInput > 0) {
    7f86:	2c00      	cmp	r4, #0
    7f88:	d1ee      	bne.n	7f68 <incBcdData+0x34>
}
    7f8a:	0030      	movs	r0, r6
    7f8c:	bc0c      	pop	{r2, r3}
    7f8e:	4690      	mov	r8, r2
    7f90:	4699      	mov	r9, r3
    7f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			intData = intData+1;
    7f94:	3001      	adds	r0, #1
    7f96:	b2c4      	uxtb	r4, r0
    7f98:	e7e0      	b.n	7f5c <incBcdData+0x28>
		if (intData>dataMin){
    7f9a:	4284      	cmp	r4, r0
    7f9c:	d202      	bcs.n	7fa4 <incBcdData+0x70>
			intData = intData-1;
    7f9e:	3801      	subs	r0, #1
    7fa0:	b2c4      	uxtb	r4, r0
    7fa2:	e7d9      	b.n	7f58 <incBcdData+0x24>
    7fa4:	001c      	movs	r4, r3
    7fa6:	e7d7      	b.n	7f58 <incBcdData+0x24>
	while (binaryInput > 0) {
    7fa8:	2600      	movs	r6, #0
    7faa:	e7ee      	b.n	7f8a <incBcdData+0x56>
    7fac:	0001ce29 	.word	0x0001ce29
    7fb0:	0001cd1d 	.word	0x0001cd1d

00007fb4 <bcd2int>:
	dec = dec*10;
    7fb4:	0903      	lsrs	r3, r0, #4
uint32_t bcd2int(uint8_t bcd_var){
    7fb6:	0002      	movs	r2, r0
	dec = dec*10;
    7fb8:	0098      	lsls	r0, r3, #2
    7fba:	181b      	adds	r3, r3, r0
	dec = dec + (bcd_var & 0x0F);
    7fbc:	200f      	movs	r0, #15
	dec = dec*10;
    7fbe:	005b      	lsls	r3, r3, #1
	dec = dec + (bcd_var & 0x0F);
    7fc0:	4010      	ands	r0, r2
    7fc2:	1818      	adds	r0, r3, r0
	return dec;
    7fc4:	b2c0      	uxtb	r0, r0
}
    7fc6:	4770      	bx	lr

00007fc8 <getDispX>:
const uint8_t yLine[] = {1, 16, 32, 48, 64};




float getDispX(float XYZ[3], uint8_t boxMin, uint8_t boxWidth, bool invert){
    7fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    7fca:	46de      	mov	lr, fp
    7fcc:	4657      	mov	r7, sl
    7fce:	464e      	mov	r6, r9
    7fd0:	4645      	mov	r5, r8
    7fd2:	4680      	mov	r8, r0
    7fd4:	b5e0      	push	{r5, r6, r7, lr}
    7fd6:	469a      	mov	sl, r3
	//  X is displacement of vector along X axis
	//  Returned X dimension normalized to box width and offset by box min
	float magnitude, xPos;
	
	//  Total magnitude of vector
	magnitude = sqrt(pow(XYZ[0],2)+pow(XYZ[1],2)+pow(XYZ[2],2));
    7fd8:	4b2e      	ldr	r3, [pc, #184]	; (8094 <getDispX+0xcc>)
float getDispX(float XYZ[3], uint8_t boxMin, uint8_t boxWidth, bool invert){
    7fda:	b085      	sub	sp, #20
	magnitude = sqrt(pow(XYZ[0],2)+pow(XYZ[1],2)+pow(XYZ[2],2));
    7fdc:	4699      	mov	r9, r3
    7fde:	6800      	ldr	r0, [r0, #0]
float getDispX(float XYZ[3], uint8_t boxMin, uint8_t boxWidth, bool invert){
    7fe0:	9103      	str	r1, [sp, #12]
    7fe2:	4693      	mov	fp, r2
	magnitude = sqrt(pow(XYZ[0],2)+pow(XYZ[1],2)+pow(XYZ[2],2));
    7fe4:	47c8      	blx	r9
    7fe6:	4643      	mov	r3, r8
    7fe8:	0004      	movs	r4, r0
    7fea:	6858      	ldr	r0, [r3, #4]
    7fec:	000d      	movs	r5, r1
    7fee:	47c8      	blx	r9
    7ff0:	4643      	mov	r3, r8
    7ff2:	0006      	movs	r6, r0
    7ff4:	6898      	ldr	r0, [r3, #8]
    7ff6:	000f      	movs	r7, r1
    7ff8:	47c8      	blx	r9
    7ffa:	4b27      	ldr	r3, [pc, #156]	; (8098 <getDispX+0xd0>)
    7ffc:	9000      	str	r0, [sp, #0]
    7ffe:	9101      	str	r1, [sp, #4]
    8000:	4699      	mov	r9, r3
    8002:	0022      	movs	r2, r4
    8004:	002b      	movs	r3, r5
    8006:	0020      	movs	r0, r4
    8008:	0029      	movs	r1, r5
    800a:	47c8      	blx	r9
    800c:	0032      	movs	r2, r6
    800e:	0004      	movs	r4, r0
    8010:	000d      	movs	r5, r1
    8012:	003b      	movs	r3, r7
    8014:	0030      	movs	r0, r6
    8016:	0039      	movs	r1, r7
    8018:	47c8      	blx	r9
    801a:	4e20      	ldr	r6, [pc, #128]	; (809c <getDispX+0xd4>)
    801c:	0002      	movs	r2, r0
    801e:	000b      	movs	r3, r1
    8020:	0020      	movs	r0, r4
    8022:	0029      	movs	r1, r5
    8024:	47b0      	blx	r6
    8026:	0004      	movs	r4, r0
    8028:	000d      	movs	r5, r1
    802a:	9800      	ldr	r0, [sp, #0]
    802c:	9901      	ldr	r1, [sp, #4]
    802e:	0002      	movs	r2, r0
    8030:	000b      	movs	r3, r1
    8032:	47c8      	blx	r9
    8034:	0002      	movs	r2, r0
    8036:	000b      	movs	r3, r1
    8038:	0020      	movs	r0, r4
    803a:	0029      	movs	r1, r5
    803c:	47b0      	blx	r6
    803e:	4b18      	ldr	r3, [pc, #96]	; (80a0 <getDispX+0xd8>)
    8040:	4798      	blx	r3
    8042:	4b18      	ldr	r3, [pc, #96]	; (80a4 <getDispX+0xdc>)
    8044:	4798      	blx	r3
	// Normalize X dimension by magnitude
	// Scale -1:1
	xPos = XYZ[0]/magnitude;
    8046:	4643      	mov	r3, r8
	magnitude = sqrt(pow(XYZ[0],2)+pow(XYZ[1],2)+pow(XYZ[2],2));
    8048:	1c01      	adds	r1, r0, #0
	xPos = XYZ[0]/magnitude;
    804a:	6818      	ldr	r0, [r3, #0]
    804c:	4b16      	ldr	r3, [pc, #88]	; (80a8 <getDispX+0xe0>)
    804e:	4798      	blx	r3
	if (invert){
    8050:	4653      	mov	r3, sl
    8052:	2b00      	cmp	r3, #0
    8054:	d003      	beq.n	805e <getDispX+0x96>
		xPos = -1*xPos;
    8056:	2380      	movs	r3, #128	; 0x80
    8058:	061b      	lsls	r3, r3, #24
    805a:	469c      	mov	ip, r3
    805c:	4460      	add	r0, ip
	}
	//  Normalize to requested range
	xPos = ((xPos+1)/2) ;
    805e:	21fe      	movs	r1, #254	; 0xfe
    8060:	4c12      	ldr	r4, [pc, #72]	; (80ac <getDispX+0xe4>)
    8062:	0589      	lsls	r1, r1, #22
    8064:	47a0      	blx	r4
    8066:	21fc      	movs	r1, #252	; 0xfc
    8068:	4e11      	ldr	r6, [pc, #68]	; (80b0 <getDispX+0xe8>)
    806a:	0589      	lsls	r1, r1, #22
    806c:	47b0      	blx	r6
	xPos = xPos*boxWidth+boxMin;
    806e:	4d11      	ldr	r5, [pc, #68]	; (80b4 <getDispX+0xec>)
	xPos = ((xPos+1)/2) ;
    8070:	1c07      	adds	r7, r0, #0
	xPos = xPos*boxWidth+boxMin;
    8072:	4658      	mov	r0, fp
    8074:	47a8      	blx	r5
    8076:	1c01      	adds	r1, r0, #0
    8078:	1c38      	adds	r0, r7, #0
    807a:	47b0      	blx	r6
    807c:	1c06      	adds	r6, r0, #0
    807e:	9803      	ldr	r0, [sp, #12]
    8080:	47a8      	blx	r5
    8082:	1c31      	adds	r1, r6, #0
    8084:	47a0      	blx	r4
	
	return xPos;
	
}
    8086:	b005      	add	sp, #20
    8088:	bc3c      	pop	{r2, r3, r4, r5}
    808a:	4690      	mov	r8, r2
    808c:	4699      	mov	r9, r3
    808e:	46a2      	mov	sl, r4
    8090:	46ab      	mov	fp, r5
    8092:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8094:	0001fb6d 	.word	0x0001fb6d
    8098:	0001eea5 	.word	0x0001eea5
    809c:	0001e01d 	.word	0x0001e01d
    80a0:	0001a745 	.word	0x0001a745
    80a4:	0001fc11 	.word	0x0001fc11
    80a8:	0001d559 	.word	0x0001d559
    80ac:	0001d235 	.word	0x0001d235
    80b0:	0001d939 	.word	0x0001d939
    80b4:	0001def1 	.word	0x0001def1

000080b8 <drawSoftKeys>:
	glcd_draw_line(xLine, yLine[button-1], xLine, yLine[button], BLACK); //  Vertical
	
}


void drawSoftKeys(char *str1, char *str2, char *str3, char *str4){
    80b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    80ba:	46de      	mov	lr, fp
    80bc:	4657      	mov	r7, sl
    80be:	464e      	mov	r6, r9
    80c0:	4645      	mov	r5, r8
    80c2:	b5e0      	push	{r5, r6, r7, lr}
	
	
	uint8_t strLength[4];
	char *strPtr[4];
	
	strLength[0] = strlen(str1);
    80c4:	4c44      	ldr	r4, [pc, #272]	; (81d8 <drawSoftKeys+0x120>)
void drawSoftKeys(char *str1, char *str2, char *str3, char *str4){
    80c6:	b089      	sub	sp, #36	; 0x24
    80c8:	4688      	mov	r8, r1
    80ca:	0016      	movs	r6, r2
    80cc:	001d      	movs	r5, r3
    80ce:	4681      	mov	r9, r0
	strLength[0] = strlen(str1);
    80d0:	47a0      	blx	r4
    80d2:	466b      	mov	r3, sp
    80d4:	7318      	strb	r0, [r3, #12]
	strLength[1] = strlen(str2);
    80d6:	4640      	mov	r0, r8
    80d8:	47a0      	blx	r4
    80da:	466b      	mov	r3, sp
    80dc:	7358      	strb	r0, [r3, #13]
	strLength[2] = strlen(str3);
    80de:	0030      	movs	r0, r6
    80e0:	47a0      	blx	r4
    80e2:	466b      	mov	r3, sp
    80e4:	7398      	strb	r0, [r3, #14]
	strLength[3] = strlen(str4);
    80e6:	0028      	movs	r0, r5
    80e8:	47a0      	blx	r4
    80ea:	466b      	mov	r3, sp
    80ec:	73d8      	strb	r0, [r3, #15]
	
	strPtr[0] = str1;
    80ee:	464b      	mov	r3, r9
    80f0:	9304      	str	r3, [sp, #16]
	strPtr[1] = str2;
    80f2:	4643      	mov	r3, r8
	strPtr[2] = str3;
	strPtr[3] = str4;
    80f4:	2400      	movs	r4, #0
	strPtr[0] = str1;
    80f6:	af04      	add	r7, sp, #16
	strPtr[3] = str4;
    80f8:	60fd      	str	r5, [r7, #12]
    80fa:	4d38      	ldr	r5, [pc, #224]	; (81dc <drawSoftKeys+0x124>)
	strPtr[1] = str2;
    80fc:	607b      	str	r3, [r7, #4]
	strPtr[2] = str3;
    80fe:	60be      	str	r6, [r7, #8]
	
	for (i=0;i<4;i++){
		if (strLength[i]>0){
    8100:	466b      	mov	r3, sp
    8102:	220c      	movs	r2, #12
    8104:	189b      	adds	r3, r3, r2
    8106:	5d1e      	ldrb	r6, [r3, r4]
    8108:	2e00      	cmp	r6, #0
    810a:	d041      	beq.n	8190 <drawSoftKeys+0xd8>
			//  Draw Box
			xLine = 128-(strLength[i]*6)-1;
			
			//  Draw Text
			if (!strcmp(strPtr[i],"<")){
    810c:	00a3      	lsls	r3, r4, #2
    810e:	58fb      	ldr	r3, [r7, r3]
    8110:	4933      	ldr	r1, [pc, #204]	; (81e0 <drawSoftKeys+0x128>)
    8112:	4698      	mov	r8, r3
    8114:	0018      	movs	r0, r3
    8116:	4b33      	ldr	r3, [pc, #204]	; (81e4 <drawSoftKeys+0x12c>)
    8118:	4798      	blx	r3
    811a:	2800      	cmp	r0, #0
    811c:	d055      	beq.n	81ca <drawSoftKeys+0x112>
				//  Arrow Up
				xLine = 117;
				glcd_draw_line(119, yLine[i]+10, 123, yLine[i]+6, BLACK);
				glcd_draw_line(123, yLine[i]+6, 127, yLine[i]+10, BLACK);
			}else if (!strcmp(strPtr[i],">")){
    811e:	4932      	ldr	r1, [pc, #200]	; (81e8 <drawSoftKeys+0x130>)
    8120:	4640      	mov	r0, r8
    8122:	4b30      	ldr	r3, [pc, #192]	; (81e4 <drawSoftKeys+0x12c>)
    8124:	4798      	blx	r3
    8126:	2800      	cmp	r0, #0
    8128:	d13d      	bne.n	81a6 <drawSoftKeys+0xee>
				//  Arrow Down
				xLine = 117;
				glcd_draw_line(119, yLine[i]+6, 123, yLine[i]+10, BLACK);
    812a:	782e      	ldrb	r6, [r5, #0]
    812c:	1db3      	adds	r3, r6, #6
    812e:	b2db      	uxtb	r3, r3
    8130:	4699      	mov	r9, r3
    8132:	360a      	adds	r6, #10
    8134:	b2f3      	uxtb	r3, r6
    8136:	469b      	mov	fp, r3
    8138:	2301      	movs	r3, #1
    813a:	469a      	mov	sl, r3
    813c:	4e2b      	ldr	r6, [pc, #172]	; (81ec <drawSoftKeys+0x134>)
    813e:	9300      	str	r3, [sp, #0]
    8140:	227b      	movs	r2, #123	; 0x7b
    8142:	465b      	mov	r3, fp
    8144:	4649      	mov	r1, r9
    8146:	3077      	adds	r0, #119	; 0x77
    8148:	47b0      	blx	r6
				glcd_draw_line(123, yLine[i]+10, 127, yLine[i]+6, BLACK);
    814a:	4653      	mov	r3, sl
    814c:	227f      	movs	r2, #127	; 0x7f
    814e:	9300      	str	r3, [sp, #0]
    8150:	4659      	mov	r1, fp
    8152:	464b      	mov	r3, r9
    8154:	207b      	movs	r0, #123	; 0x7b
				glcd_draw_line(119, yLine[i]+6, 123, yLine[i]+10, BLACK);
    8156:	46b0      	mov	r8, r6
				glcd_draw_line(123, yLine[i]+10, 127, yLine[i]+6, BLACK);
    8158:	47b0      	blx	r6
				xLine = 117;
    815a:	2675      	movs	r6, #117	; 0x75
	glcd_draw_line(xLine, yLine[button-1],   128, yLine[button-1],   BLACK);//  Horizontal Top
    815c:	782b      	ldrb	r3, [r5, #0]
    815e:	2280      	movs	r2, #128	; 0x80
    8160:	4699      	mov	r9, r3
    8162:	2301      	movs	r3, #1
    8164:	469b      	mov	fp, r3
    8166:	9300      	str	r3, [sp, #0]
    8168:	4649      	mov	r1, r9
    816a:	464b      	mov	r3, r9
    816c:	0030      	movs	r0, r6
    816e:	47c0      	blx	r8
	glcd_draw_line(xLine, yLine[button], 128, yLine[button], BLACK);//  Horizontal Bottom
    8170:	786b      	ldrb	r3, [r5, #1]
    8172:	2280      	movs	r2, #128	; 0x80
    8174:	469a      	mov	sl, r3
    8176:	465b      	mov	r3, fp
    8178:	4651      	mov	r1, sl
    817a:	9300      	str	r3, [sp, #0]
    817c:	0030      	movs	r0, r6
    817e:	4653      	mov	r3, sl
    8180:	47c0      	blx	r8
	glcd_draw_line(xLine, yLine[button-1], xLine, yLine[button], BLACK); //  Vertical
    8182:	465b      	mov	r3, fp
    8184:	0032      	movs	r2, r6
    8186:	9300      	str	r3, [sp, #0]
    8188:	4649      	mov	r1, r9
    818a:	4653      	mov	r3, sl
    818c:	0030      	movs	r0, r6
    818e:	47c0      	blx	r8
    8190:	3401      	adds	r4, #1
    8192:	3501      	adds	r5, #1
	for (i=0;i<4;i++){
    8194:	2c04      	cmp	r4, #4
    8196:	d1b3      	bne.n	8100 <drawSoftKeys+0x48>
			
			
		}
	}
	
}
    8198:	b009      	add	sp, #36	; 0x24
    819a:	bc3c      	pop	{r2, r3, r4, r5}
    819c:	4690      	mov	r8, r2
    819e:	4699      	mov	r9, r3
    81a0:	46a2      	mov	sl, r4
    81a2:	46ab      	mov	fp, r5
    81a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xLine = 128-(strLength[i]*6)-1;
    81a6:	00b0      	lsls	r0, r6, #2
    81a8:	1a36      	subs	r6, r6, r0
    81aa:	0076      	lsls	r6, r6, #1
    81ac:	b2f0      	uxtb	r0, r6
    81ae:	0006      	movs	r6, r0
				glcd_draw_string_xy(xLine+2,yLine[i]+4,strPtr[i]);
    81b0:	7829      	ldrb	r1, [r5, #0]
    81b2:	387f      	subs	r0, #127	; 0x7f
    81b4:	3104      	adds	r1, #4
    81b6:	4642      	mov	r2, r8
    81b8:	4b0d      	ldr	r3, [pc, #52]	; (81f0 <drawSoftKeys+0x138>)
    81ba:	b2c9      	uxtb	r1, r1
    81bc:	b2c0      	uxtb	r0, r0
    81be:	4798      	blx	r3
    81c0:	4b0a      	ldr	r3, [pc, #40]	; (81ec <drawSoftKeys+0x134>)
			xLine = 128-(strLength[i]*6)-1;
    81c2:	367f      	adds	r6, #127	; 0x7f
    81c4:	b2f6      	uxtb	r6, r6
    81c6:	4698      	mov	r8, r3
    81c8:	e7c8      	b.n	815c <drawSoftKeys+0xa4>
				glcd_draw_line(119, yLine[i]+10, 123, yLine[i]+6, BLACK);
    81ca:	782e      	ldrb	r6, [r5, #0]
    81cc:	0033      	movs	r3, r6
    81ce:	330a      	adds	r3, #10
    81d0:	b2db      	uxtb	r3, r3
    81d2:	4699      	mov	r9, r3
    81d4:	3606      	adds	r6, #6
    81d6:	e7ad      	b.n	8134 <drawSoftKeys+0x7c>
    81d8:	0001fffd 	.word	0x0001fffd
    81dc:	00024d80 	.word	0x00024d80
    81e0:	00024d78 	.word	0x00024d78
    81e4:	0001ff65 	.word	0x0001ff65
    81e8:	00024d7c 	.word	0x00024d7c
    81ec:	000138b1 	.word	0x000138b1
    81f0:	00014fa9 	.word	0x00014fa9

000081f4 <draw2LineSoftKey>:


void draw2LineSoftKey(char *str1, char *str2, uint8_t button){
    81f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    81f6:	4645      	mov	r5, r8
    81f8:	46de      	mov	lr, fp
    81fa:	4657      	mov	r7, sl
    81fc:	464e      	mov	r6, r9
    81fe:	b5e0      	push	{r5, r6, r7, lr}
	uint8_t strLength;
	uint8_t xLine;
	
	if (strlen(str1)>strlen(str2)){
    8200:	4c24      	ldr	r4, [pc, #144]	; (8294 <draw2LineSoftKey+0xa0>)
void draw2LineSoftKey(char *str1, char *str2, uint8_t button){
    8202:	b085      	sub	sp, #20
    8204:	4688      	mov	r8, r1
    8206:	4681      	mov	r9, r0
    8208:	4692      	mov	sl, r2
	if (strlen(str1)>strlen(str2)){
    820a:	47a0      	blx	r4
    820c:	0005      	movs	r5, r0
    820e:	4640      	mov	r0, r8
    8210:	47a0      	blx	r4
    8212:	4285      	cmp	r5, r0
    8214:	d83c      	bhi.n	8290 <draw2LineSoftKey+0x9c>
		strLength = strlen(str1);
	}else{
		strLength = strlen(str2);
    8216:	b2c0      	uxtb	r0, r0
	}
	
	xLine = 128-(strLength*6)-1;	
    8218:	0083      	lsls	r3, r0, #2
	glcd_draw_line(xLine, yLine[button-1],   128, yLine[button-1],   BLACK);//  Horizontal Top
    821a:	4a1f      	ldr	r2, [pc, #124]	; (8298 <draw2LineSoftKey+0xa4>)
	xLine = 128-(strLength*6)-1;	
    821c:	1ac0      	subs	r0, r0, r3
    821e:	0040      	lsls	r0, r0, #1
    8220:	b2c3      	uxtb	r3, r0
	glcd_draw_line(xLine, yLine[button-1],   128, yLine[button-1],   BLACK);//  Horizontal Top
    8222:	4693      	mov	fp, r2
    8224:	4452      	add	r2, sl
	xLine = 128-(strLength*6)-1;	
    8226:	9303      	str	r3, [sp, #12]
    8228:	001d      	movs	r5, r3
	glcd_draw_line(xLine, yLine[button-1],   128, yLine[button-1],   BLACK);//  Horizontal Top
    822a:	0013      	movs	r3, r2
    822c:	2701      	movs	r7, #1
    822e:	3b01      	subs	r3, #1
    8230:	781c      	ldrb	r4, [r3, #0]
	xLine = 128-(strLength*6)-1;	
    8232:	357f      	adds	r5, #127	; 0x7f
    8234:	b2ed      	uxtb	r5, r5
	glcd_draw_line(xLine, yLine[button-1],   128, yLine[button-1],   BLACK);//  Horizontal Top
    8236:	4e19      	ldr	r6, [pc, #100]	; (829c <draw2LineSoftKey+0xa8>)
    8238:	0023      	movs	r3, r4
    823a:	0021      	movs	r1, r4
    823c:	0028      	movs	r0, r5
    823e:	9700      	str	r7, [sp, #0]
    8240:	2280      	movs	r2, #128	; 0x80
    8242:	47b0      	blx	r6
	glcd_draw_line(xLine, yLine[button], 128, yLine[button], BLACK);//  Horizontal Bottom
    8244:	4651      	mov	r1, sl
    8246:	465a      	mov	r2, fp
    8248:	5c52      	ldrb	r2, [r2, r1]
    824a:	0028      	movs	r0, r5
    824c:	4692      	mov	sl, r2
    824e:	0013      	movs	r3, r2
    8250:	4651      	mov	r1, sl
    8252:	9700      	str	r7, [sp, #0]
    8254:	2280      	movs	r2, #128	; 0x80
    8256:	47b0      	blx	r6
	glcd_draw_line(xLine, yLine[button-1], xLine, yLine[button], BLACK); //  Vertical
    8258:	4653      	mov	r3, sl
    825a:	002a      	movs	r2, r5
    825c:	0021      	movs	r1, r4
    825e:	0028      	movs	r0, r5
    8260:	9700      	str	r7, [sp, #0]
    8262:	47b0      	blx	r6
	
	drawBox(xLine, button);
	
	glcd_draw_string_xy(xLine+2,yLine[button-1]+1,str1);
    8264:	9d03      	ldr	r5, [sp, #12]
    8266:	1c61      	adds	r1, r4, #1
    8268:	3d7f      	subs	r5, #127	; 0x7f
    826a:	b2ed      	uxtb	r5, r5
    826c:	464a      	mov	r2, r9
    826e:	0028      	movs	r0, r5
    8270:	4e0b      	ldr	r6, [pc, #44]	; (82a0 <draw2LineSoftKey+0xac>)
    8272:	b2c9      	uxtb	r1, r1
    8274:	47b0      	blx	r6
	glcd_draw_string_xy(xLine+2,yLine[button-1]+8,str2);
    8276:	0021      	movs	r1, r4
    8278:	3108      	adds	r1, #8
    827a:	b2c9      	uxtb	r1, r1
    827c:	4642      	mov	r2, r8
    827e:	0028      	movs	r0, r5
    8280:	47b0      	blx	r6
}
    8282:	b005      	add	sp, #20
    8284:	bc3c      	pop	{r2, r3, r4, r5}
    8286:	4690      	mov	r8, r2
    8288:	4699      	mov	r9, r3
    828a:	46a2      	mov	sl, r4
    828c:	46ab      	mov	fp, r5
    828e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strLength = strlen(str1);
    8290:	b2e8      	uxtb	r0, r5
    8292:	e7c1      	b.n	8218 <draw2LineSoftKey+0x24>
    8294:	0001fffd 	.word	0x0001fffd
    8298:	00024d80 	.word	0x00024d80
    829c:	000138b1 	.word	0x000138b1
    82a0:	00014fa9 	.word	0x00014fa9

000082a4 <EEPROM_saveCalRawData>:
	}
	return tempAddr;
}


void EEPROM_saveCalRawData(enum CALTYPE caltype){
    82a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    82a6:	46de      	mov	lr, fp
    82a8:	4657      	mov	r7, sl
    82aa:	464e      	mov	r6, r9
    82ac:	4645      	mov	r5, r8
    82ae:	b5e0      	push	{r5, r6, r7, lr}
    82b0:	b0a7      	sub	sp, #156	; 0x9c
	switch (caltype){
    82b2:	2800      	cmp	r0, #0
    82b4:	d100      	bne.n	82b8 <EEPROM_saveCalRawData+0x14>
    82b6:	e13c      	b.n	8532 <EEPROM_saveCalRawData+0x28e>
    82b8:	2801      	cmp	r0, #1
    82ba:	d100      	bne.n	82be <EEPROM_saveCalRawData+0x1a>
    82bc:	e110      	b.n	84e0 <EEPROM_saveCalRawData+0x23c>
    82be:	23e1      	movs	r3, #225	; 0xe1
    82c0:	011b      	lsls	r3, r3, #4
    82c2:	469b      	mov	fp, r3
    82c4:	2396      	movs	r3, #150	; 0x96
    82c6:	011b      	lsls	r3, r3, #4
    82c8:	9300      	str	r3, [sp, #0]
			tempAddr = 0;
    82ca:	2300      	movs	r3, #0
    82cc:	2696      	movs	r6, #150	; 0x96
    82ce:	4698      	mov	r8, r3
    82d0:	00f6      	lsls	r6, r6, #3
	uint8_t send_buf[PAGE_SIZE+2];
	uint16_t timeout;
	
	//  Packet template
	struct i2c_master_packet packet;
	packet.data = send_buf;
    82d2:	ab05      	add	r3, sp, #20
    82d4:	9303      	str	r3, [sp, #12]
	packet.ten_bit_address = false;
    82d6:	2300      	movs	r3, #0
    82d8:	aa02      	add	r2, sp, #8
    82da:	7213      	strb	r3, [r2, #8]
	packet.high_speed = false;
    82dc:	7253      	strb	r3, [r2, #9]
	packet.hs_master_code = 0x0;
    82de:	7293      	strb	r3, [r2, #10]
	packet.address = EEPROM_add;
    82e0:	3357      	adds	r3, #87	; 0x57
    82e2:	8013      	strh	r3, [r2, #0]


	//  Initialize variables
	bytes_written = 0;
    82e4:	2300      	movs	r3, #0
	address_packet = address_init;
	bytes_remainder = bytes_to_write;
    82e6:	2296      	movs	r2, #150	; 0x96
    82e8:	46b1      	mov	r9, r6
	bytes_written = 0;
    82ea:	469a      	mov	sl, r3
    82ec:	4646      	mov	r6, r8
    82ee:	4c96      	ldr	r4, [pc, #600]	; (8548 <EEPROM_saveCalRawData+0x2a4>)
    82f0:	4d96      	ldr	r5, [pc, #600]	; (854c <EEPROM_saveCalRawData+0x2a8>)
	bytes_remainder = bytes_to_write;
    82f2:	00d2      	lsls	r2, r2, #3
	
	//  Send packets until everything is written
	while(bytes_written<bytes_to_write){
		//  Can only send in 32-byte page increments 
		//  Cannot pass page boundaries
		bytes_possible = PAGE_SIZE-(address_packet & 0x7F);
    82f4:	237f      	movs	r3, #127	; 0x7f
    82f6:	2780      	movs	r7, #128	; 0x80
    82f8:	4033      	ands	r3, r6
    82fa:	1aff      	subs	r7, r7, r3
    82fc:	b2bf      	uxth	r7, r7
		//  Determine number of bytes to send in packet
		if (bytes_possible<bytes_remainder){
    82fe:	46b8      	mov	r8, r7
    8300:	4297      	cmp	r7, r2
    8302:	d200      	bcs.n	8306 <EEPROM_saveCalRawData+0x62>
    8304:	e10d      	b.n	8522 <EEPROM_saveCalRawData+0x27e>
			bytes_packet = bytes_possible;
		}else{
			bytes_packet = bytes_remainder;
    8306:	b297      	uxth	r7, r2
    8308:	0412      	lsls	r2, r2, #16
    830a:	0c13      	lsrs	r3, r2, #16
    830c:	4698      	mov	r8, r3
		}
		//  Set up Packet
		send_buf[0] = address_packet>>8;
    830e:	aa02      	add	r2, sp, #8
    8310:	0a33      	lsrs	r3, r6, #8
    8312:	7313      	strb	r3, [r2, #12]
		send_buf[1] = address_packet & 0x00FF;
		packet.data_length = bytes_packet+2; //2 for data address
    8314:	1cbb      	adds	r3, r7, #2
		send_buf[1] = address_packet & 0x00FF;
    8316:	7356      	strb	r6, [r2, #13]
		packet.data_length = bytes_packet+2; //2 for data address
    8318:	8053      	strh	r3, [r2, #2]
		for (i=0;i<bytes_packet;i++){
    831a:	2f00      	cmp	r7, #0
    831c:	d00b      	beq.n	8336 <EEPROM_saveCalRawData+0x92>
    831e:	4b8c      	ldr	r3, [pc, #560]	; (8550 <EEPROM_saveCalRawData+0x2ac>)
    8320:	200e      	movs	r0, #14
    8322:	4453      	add	r3, sl
    8324:	0019      	movs	r1, r3
    8326:	ab02      	add	r3, sp, #8
    8328:	469c      	mov	ip, r3
			send_buf[i+2] = data_buf[bytes_written+i];
    832a:	1e7a      	subs	r2, r7, #1
    832c:	b292      	uxth	r2, r2
    832e:	3201      	adds	r2, #1
    8330:	4460      	add	r0, ip
    8332:	4b88      	ldr	r3, [pc, #544]	; (8554 <EEPROM_saveCalRawData+0x2b0>)
    8334:	4798      	blx	r3
		}
		
		// Send Packet
		timeout=0;
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    8336:	a902      	add	r1, sp, #8
    8338:	0020      	movs	r0, r4
    833a:	47a8      	blx	r5
    833c:	2800      	cmp	r0, #0
    833e:	d1fa      	bne.n	8336 <EEPROM_saveCalRawData+0x92>
			//if (timeout++ == 0xFFFF) {   break;   }
		}
		//  Increment Variables
		bytes_written = bytes_written+bytes_packet;
    8340:	44c2      	add	sl, r8
		bytes_remainder = bytes_to_write-bytes_written;
    8342:	2196      	movs	r1, #150	; 0x96
    8344:	4653      	mov	r3, sl
    8346:	00c9      	lsls	r1, r1, #3
    8348:	1aca      	subs	r2, r1, r3
	while(bytes_written<bytes_to_write){
    834a:	4b83      	ldr	r3, [pc, #524]	; (8558 <EEPROM_saveCalRawData+0x2b4>)
		address_packet = address_packet+bytes_packet;
    834c:	19be      	adds	r6, r7, r6
    834e:	b2b6      	uxth	r6, r6
	while(bytes_written<bytes_to_write){
    8350:	459a      	cmp	sl, r3
    8352:	d9cf      	bls.n	82f4 <EEPROM_saveCalRawData+0x50>
	packet.data = send_buf;
    8354:	ab05      	add	r3, sp, #20
    8356:	9303      	str	r3, [sp, #12]
	packet.ten_bit_address = false;
    8358:	ab02      	add	r3, sp, #8
    835a:	7218      	strb	r0, [r3, #8]
	packet.high_speed = false;
    835c:	7258      	strb	r0, [r3, #9]
	packet.hs_master_code = 0x0;
    835e:	7298      	strb	r0, [r3, #10]
	packet.address = EEPROM_add;
    8360:	2357      	movs	r3, #87	; 0x57
    8362:	aa02      	add	r2, sp, #8
    8364:	8013      	strh	r3, [r2, #0]
	bytes_written = 0;
    8366:	2300      	movs	r3, #0
    8368:	464e      	mov	r6, r9
    836a:	4699      	mov	r9, r3
		bytes_possible = PAGE_SIZE-(address_packet & 0x7F);
    836c:	337f      	adds	r3, #127	; 0x7f
    836e:	469a      	mov	sl, r3
    8370:	4653      	mov	r3, sl
    8372:	2780      	movs	r7, #128	; 0x80
    8374:	4033      	ands	r3, r6
    8376:	1aff      	subs	r7, r7, r3
    8378:	b2bf      	uxth	r7, r7
		if (bytes_possible<bytes_remainder){
    837a:	46b8      	mov	r8, r7
    837c:	428f      	cmp	r7, r1
    837e:	d200      	bcs.n	8382 <EEPROM_saveCalRawData+0xde>
    8380:	e0c7      	b.n	8512 <EEPROM_saveCalRawData+0x26e>
			bytes_packet = bytes_remainder;
    8382:	b28f      	uxth	r7, r1
    8384:	0409      	lsls	r1, r1, #16
    8386:	0c0b      	lsrs	r3, r1, #16
		send_buf[0] = address_packet>>8;
    8388:	aa02      	add	r2, sp, #8
    838a:	4698      	mov	r8, r3
    838c:	0a33      	lsrs	r3, r6, #8
    838e:	7313      	strb	r3, [r2, #12]
		packet.data_length = bytes_packet+2; //2 for data address
    8390:	1cbb      	adds	r3, r7, #2
		send_buf[1] = address_packet & 0x00FF;
    8392:	7356      	strb	r6, [r2, #13]
		packet.data_length = bytes_packet+2; //2 for data address
    8394:	8053      	strh	r3, [r2, #2]
		for (i=0;i<bytes_packet;i++){
    8396:	2f00      	cmp	r7, #0
    8398:	d00b      	beq.n	83b2 <EEPROM_saveCalRawData+0x10e>
    839a:	4b70      	ldr	r3, [pc, #448]	; (855c <EEPROM_saveCalRawData+0x2b8>)
    839c:	200e      	movs	r0, #14
    839e:	444b      	add	r3, r9
    83a0:	0019      	movs	r1, r3
    83a2:	ab02      	add	r3, sp, #8
    83a4:	469c      	mov	ip, r3
			send_buf[i+2] = data_buf[bytes_written+i];
    83a6:	1e7a      	subs	r2, r7, #1
    83a8:	b292      	uxth	r2, r2
    83aa:	3201      	adds	r2, #1
    83ac:	4460      	add	r0, ip
    83ae:	4b69      	ldr	r3, [pc, #420]	; (8554 <EEPROM_saveCalRawData+0x2b0>)
    83b0:	4798      	blx	r3
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    83b2:	a902      	add	r1, sp, #8
    83b4:	0020      	movs	r0, r4
    83b6:	47a8      	blx	r5
    83b8:	2800      	cmp	r0, #0
    83ba:	d1fa      	bne.n	83b2 <EEPROM_saveCalRawData+0x10e>
		bytes_written = bytes_written+bytes_packet;
    83bc:	44c1      	add	r9, r8
		bytes_remainder = bytes_to_write-bytes_written;
    83be:	2296      	movs	r2, #150	; 0x96
    83c0:	464b      	mov	r3, r9
    83c2:	00d2      	lsls	r2, r2, #3
    83c4:	1ad1      	subs	r1, r2, r3
	while(bytes_written<bytes_to_write){
    83c6:	4b64      	ldr	r3, [pc, #400]	; (8558 <EEPROM_saveCalRawData+0x2b4>)
		address_packet = address_packet+bytes_packet;
    83c8:	19be      	adds	r6, r7, r6
    83ca:	b2b6      	uxth	r6, r6
	while(bytes_written<bytes_to_write){
    83cc:	4599      	cmp	r9, r3
    83ce:	d9cf      	bls.n	8370 <EEPROM_saveCalRawData+0xcc>
	packet.data = send_buf;
    83d0:	ab05      	add	r3, sp, #20
    83d2:	9303      	str	r3, [sp, #12]
	packet.ten_bit_address = false;
    83d4:	ab02      	add	r3, sp, #8
    83d6:	7218      	strb	r0, [r3, #8]
	packet.high_speed = false;
    83d8:	7258      	strb	r0, [r3, #9]
	packet.hs_master_code = 0x0;
    83da:	7298      	strb	r0, [r3, #10]
	packet.address = EEPROM_add;
    83dc:	2357      	movs	r3, #87	; 0x57
    83de:	a902      	add	r1, sp, #8
    83e0:	800b      	strh	r3, [r1, #0]
	bytes_written = 0;
    83e2:	2300      	movs	r3, #0
    83e4:	4698      	mov	r8, r3
		bytes_possible = PAGE_SIZE-(address_packet & 0x7F);
    83e6:	337f      	adds	r3, #127	; 0x7f
    83e8:	4699      	mov	r9, r3
    83ea:	4b5a      	ldr	r3, [pc, #360]	; (8554 <EEPROM_saveCalRawData+0x2b0>)
    83ec:	9f00      	ldr	r7, [sp, #0]
    83ee:	469a      	mov	sl, r3
    83f0:	465b      	mov	r3, fp
    83f2:	9301      	str	r3, [sp, #4]
    83f4:	464b      	mov	r3, r9
    83f6:	2680      	movs	r6, #128	; 0x80
    83f8:	403b      	ands	r3, r7
    83fa:	1af6      	subs	r6, r6, r3
    83fc:	b2b6      	uxth	r6, r6
		if (bytes_possible<bytes_remainder){
    83fe:	46b3      	mov	fp, r6
    8400:	4296      	cmp	r6, r2
    8402:	d200      	bcs.n	8406 <EEPROM_saveCalRawData+0x162>
    8404:	e07d      	b.n	8502 <EEPROM_saveCalRawData+0x25e>
			bytes_packet = bytes_remainder;
    8406:	b296      	uxth	r6, r2
    8408:	0412      	lsls	r2, r2, #16
    840a:	0c13      	lsrs	r3, r2, #16
    840c:	469b      	mov	fp, r3
		send_buf[0] = address_packet>>8;
    840e:	aa02      	add	r2, sp, #8
    8410:	0a3b      	lsrs	r3, r7, #8
    8412:	7313      	strb	r3, [r2, #12]
		packet.data_length = bytes_packet+2; //2 for data address
    8414:	1cb3      	adds	r3, r6, #2
		send_buf[1] = address_packet & 0x00FF;
    8416:	7357      	strb	r7, [r2, #13]
		packet.data_length = bytes_packet+2; //2 for data address
    8418:	8053      	strh	r3, [r2, #2]
		for (i=0;i<bytes_packet;i++){
    841a:	2e00      	cmp	r6, #0
    841c:	d00a      	beq.n	8434 <EEPROM_saveCalRawData+0x190>
    841e:	4b50      	ldr	r3, [pc, #320]	; (8560 <EEPROM_saveCalRawData+0x2bc>)
    8420:	200e      	movs	r0, #14
    8422:	4443      	add	r3, r8
    8424:	0019      	movs	r1, r3
    8426:	ab02      	add	r3, sp, #8
    8428:	469c      	mov	ip, r3
			send_buf[i+2] = data_buf[bytes_written+i];
    842a:	1e72      	subs	r2, r6, #1
    842c:	b292      	uxth	r2, r2
    842e:	3201      	adds	r2, #1
    8430:	4460      	add	r0, ip
    8432:	47d0      	blx	sl
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    8434:	a902      	add	r1, sp, #8
    8436:	0020      	movs	r0, r4
    8438:	47a8      	blx	r5
    843a:	2800      	cmp	r0, #0
    843c:	d1fa      	bne.n	8434 <EEPROM_saveCalRawData+0x190>
		bytes_written = bytes_written+bytes_packet;
    843e:	44d8      	add	r8, fp
		bytes_remainder = bytes_to_write-bytes_written;
    8440:	2396      	movs	r3, #150	; 0x96
    8442:	4642      	mov	r2, r8
	while(bytes_written<bytes_to_write){
    8444:	4944      	ldr	r1, [pc, #272]	; (8558 <EEPROM_saveCalRawData+0x2b4>)
		bytes_remainder = bytes_to_write-bytes_written;
    8446:	00db      	lsls	r3, r3, #3
		address_packet = address_packet+bytes_packet;
    8448:	19f7      	adds	r7, r6, r7
		bytes_remainder = bytes_to_write-bytes_written;
    844a:	1a9a      	subs	r2, r3, r2
		address_packet = address_packet+bytes_packet;
    844c:	b2bf      	uxth	r7, r7
	while(bytes_written<bytes_to_write){
    844e:	4588      	cmp	r8, r1
    8450:	d9d0      	bls.n	83f4 <EEPROM_saveCalRawData+0x150>
    8452:	9a01      	ldr	r2, [sp, #4]
	packet.address = EEPROM_add;
    8454:	a902      	add	r1, sp, #8
    8456:	4693      	mov	fp, r2
	packet.data = send_buf;
    8458:	aa05      	add	r2, sp, #20
    845a:	9203      	str	r2, [sp, #12]
	packet.ten_bit_address = false;
    845c:	aa02      	add	r2, sp, #8
    845e:	7210      	strb	r0, [r2, #8]
	packet.high_speed = false;
    8460:	7250      	strb	r0, [r2, #9]
	packet.hs_master_code = 0x0;
    8462:	7290      	strb	r0, [r2, #10]
	packet.address = EEPROM_add;
    8464:	2257      	movs	r2, #87	; 0x57
    8466:	800a      	strh	r2, [r1, #0]
	bytes_written = 0;
    8468:	2200      	movs	r2, #0
    846a:	4690      	mov	r8, r2
		bytes_possible = PAGE_SIZE-(address_packet & 0x7F);
    846c:	327f      	adds	r2, #127	; 0x7f
    846e:	4691      	mov	r9, r2
    8470:	4a38      	ldr	r2, [pc, #224]	; (8554 <EEPROM_saveCalRawData+0x2b0>)
    8472:	465f      	mov	r7, fp
    8474:	4692      	mov	sl, r2
    8476:	464a      	mov	r2, r9
    8478:	2680      	movs	r6, #128	; 0x80
    847a:	403a      	ands	r2, r7
    847c:	1ab6      	subs	r6, r6, r2
    847e:	b2b6      	uxth	r6, r6
		if (bytes_possible<bytes_remainder){
    8480:	46b3      	mov	fp, r6
    8482:	429e      	cmp	r6, r3
    8484:	d335      	bcc.n	84f2 <EEPROM_saveCalRawData+0x24e>
			bytes_packet = bytes_remainder;
    8486:	b29e      	uxth	r6, r3
    8488:	041b      	lsls	r3, r3, #16
    848a:	0c1b      	lsrs	r3, r3, #16
		send_buf[0] = address_packet>>8;
    848c:	aa02      	add	r2, sp, #8
    848e:	469b      	mov	fp, r3
    8490:	0a3b      	lsrs	r3, r7, #8
    8492:	7313      	strb	r3, [r2, #12]
		packet.data_length = bytes_packet+2; //2 for data address
    8494:	1cb3      	adds	r3, r6, #2
		send_buf[1] = address_packet & 0x00FF;
    8496:	7357      	strb	r7, [r2, #13]
		packet.data_length = bytes_packet+2; //2 for data address
    8498:	8053      	strh	r3, [r2, #2]
		for (i=0;i<bytes_packet;i++){
    849a:	2e00      	cmp	r6, #0
    849c:	d00a      	beq.n	84b4 <EEPROM_saveCalRawData+0x210>
    849e:	4b31      	ldr	r3, [pc, #196]	; (8564 <EEPROM_saveCalRawData+0x2c0>)
    84a0:	200e      	movs	r0, #14
    84a2:	4443      	add	r3, r8
    84a4:	0019      	movs	r1, r3
    84a6:	ab02      	add	r3, sp, #8
    84a8:	469c      	mov	ip, r3
			send_buf[i+2] = data_buf[bytes_written+i];
    84aa:	1e72      	subs	r2, r6, #1
    84ac:	b292      	uxth	r2, r2
    84ae:	3201      	adds	r2, #1
    84b0:	4460      	add	r0, ip
    84b2:	47d0      	blx	sl
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    84b4:	a902      	add	r1, sp, #8
    84b6:	0020      	movs	r0, r4
    84b8:	47a8      	blx	r5
    84ba:	2800      	cmp	r0, #0
    84bc:	d1fa      	bne.n	84b4 <EEPROM_saveCalRawData+0x210>
		bytes_written = bytes_written+bytes_packet;
    84be:	44d8      	add	r8, fp
		bytes_remainder = bytes_to_write-bytes_written;
    84c0:	2396      	movs	r3, #150	; 0x96
    84c2:	4642      	mov	r2, r8
    84c4:	00db      	lsls	r3, r3, #3
    84c6:	1a9b      	subs	r3, r3, r2
	while(bytes_written<bytes_to_write){
    84c8:	4a23      	ldr	r2, [pc, #140]	; (8558 <EEPROM_saveCalRawData+0x2b4>)
		address_packet = address_packet+bytes_packet;
    84ca:	19f7      	adds	r7, r6, r7
    84cc:	b2bf      	uxth	r7, r7
	while(bytes_written<bytes_to_write){
    84ce:	4590      	cmp	r8, r2
    84d0:	d9d1      	bls.n	8476 <EEPROM_saveCalRawData+0x1d2>
}
    84d2:	b027      	add	sp, #156	; 0x9c
    84d4:	bc3c      	pop	{r2, r3, r4, r5}
    84d6:	4690      	mov	r8, r2
    84d8:	4699      	mov	r9, r3
    84da:	46a2      	mov	sl, r4
    84dc:	46ab      	mov	fp, r5
    84de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (caltype){
    84e0:	4b21      	ldr	r3, [pc, #132]	; (8568 <EEPROM_saveCalRawData+0x2c4>)
    84e2:	4e22      	ldr	r6, [pc, #136]	; (856c <EEPROM_saveCalRawData+0x2c8>)
    84e4:	469b      	mov	fp, r3
    84e6:	4b22      	ldr	r3, [pc, #136]	; (8570 <EEPROM_saveCalRawData+0x2cc>)
    84e8:	9300      	str	r3, [sp, #0]
			tempAddr = add_calRawData_qazm;
    84ea:	2394      	movs	r3, #148	; 0x94
    84ec:	019b      	lsls	r3, r3, #6
    84ee:	4698      	mov	r8, r3
    84f0:	e6ef      	b.n	82d2 <EEPROM_saveCalRawData+0x2e>
		send_buf[0] = address_packet>>8;
    84f2:	a902      	add	r1, sp, #8
    84f4:	0a3b      	lsrs	r3, r7, #8
    84f6:	730b      	strb	r3, [r1, #12]
		packet.data_length = bytes_packet+2; //2 for data address
    84f8:	2382      	movs	r3, #130	; 0x82
    84fa:	1a9a      	subs	r2, r3, r2
		send_buf[1] = address_packet & 0x00FF;
    84fc:	734f      	strb	r7, [r1, #13]
		packet.data_length = bytes_packet+2; //2 for data address
    84fe:	804a      	strh	r2, [r1, #2]
    8500:	e7cd      	b.n	849e <EEPROM_saveCalRawData+0x1fa>
		send_buf[0] = address_packet>>8;
    8502:	a902      	add	r1, sp, #8
    8504:	0a3a      	lsrs	r2, r7, #8
    8506:	730a      	strb	r2, [r1, #12]
		packet.data_length = bytes_packet+2; //2 for data address
    8508:	2282      	movs	r2, #130	; 0x82
    850a:	1ad3      	subs	r3, r2, r3
		send_buf[1] = address_packet & 0x00FF;
    850c:	734f      	strb	r7, [r1, #13]
		packet.data_length = bytes_packet+2; //2 for data address
    850e:	804b      	strh	r3, [r1, #2]
    8510:	e785      	b.n	841e <EEPROM_saveCalRawData+0x17a>
		send_buf[0] = address_packet>>8;
    8512:	a902      	add	r1, sp, #8
    8514:	0a32      	lsrs	r2, r6, #8
    8516:	730a      	strb	r2, [r1, #12]
		packet.data_length = bytes_packet+2; //2 for data address
    8518:	2282      	movs	r2, #130	; 0x82
    851a:	1ad3      	subs	r3, r2, r3
		send_buf[1] = address_packet & 0x00FF;
    851c:	734e      	strb	r6, [r1, #13]
		packet.data_length = bytes_packet+2; //2 for data address
    851e:	804b      	strh	r3, [r1, #2]
    8520:	e73b      	b.n	839a <EEPROM_saveCalRawData+0xf6>
		send_buf[0] = address_packet>>8;
    8522:	a902      	add	r1, sp, #8
    8524:	0a32      	lsrs	r2, r6, #8
    8526:	730a      	strb	r2, [r1, #12]
		packet.data_length = bytes_packet+2; //2 for data address
    8528:	2282      	movs	r2, #130	; 0x82
    852a:	1ad3      	subs	r3, r2, r3
		send_buf[1] = address_packet & 0x00FF;
    852c:	734e      	strb	r6, [r1, #13]
		packet.data_length = bytes_packet+2; //2 for data address
    852e:	804b      	strh	r3, [r1, #2]
    8530:	e6f5      	b.n	831e <EEPROM_saveCalRawData+0x7a>
	switch (caltype){
    8532:	4b10      	ldr	r3, [pc, #64]	; (8574 <EEPROM_saveCalRawData+0x2d0>)
    8534:	4e10      	ldr	r6, [pc, #64]	; (8578 <EEPROM_saveCalRawData+0x2d4>)
    8536:	469b      	mov	fp, r3
    8538:	23cb      	movs	r3, #203	; 0xcb
    853a:	015b      	lsls	r3, r3, #5
    853c:	9300      	str	r3, [sp, #0]
			tempAddr = add_calRawData_full;
    853e:	2380      	movs	r3, #128	; 0x80
    8540:	015b      	lsls	r3, r3, #5
    8542:	4698      	mov	r8, r3
    8544:	e6c5      	b.n	82d2 <EEPROM_saveCalRawData+0x2e>
    8546:	46c0      	nop			; (mov r8, r8)
    8548:	20000fb8 	.word	0x20000fb8
    854c:	0000fb81 	.word	0x0000fb81
    8550:	20004040 	.word	0x20004040
    8554:	0001fd79 	.word	0x0001fd79
    8558:	000004af 	.word	0x000004af
    855c:	200022c8 	.word	0x200022c8
    8560:	20003470 	.word	0x20003470
    8564:	20001c88 	.word	0x20001c88
    8568:	00003310 	.word	0x00003310
    856c:	000029b0 	.word	0x000029b0
    8570:	00002e60 	.word	0x00002e60
    8574:	00001e10 	.word	0x00001e10
    8578:	000014b0 	.word	0x000014b0

0000857c <EEPROM_loadCalRawData>:
void EEPROM_loadCalRawData(enum CALTYPE caltype){
    857c:	b5f0      	push	{r4, r5, r6, r7, lr}
    857e:	46de      	mov	lr, fp
    8580:	4657      	mov	r7, sl
    8582:	464e      	mov	r6, r9
    8584:	4645      	mov	r5, r8
    8586:	b5e0      	push	{r5, r6, r7, lr}
    8588:	b085      	sub	sp, #20
	switch (caltype){
    858a:	2800      	cmp	r0, #0
    858c:	d100      	bne.n	8590 <EEPROM_loadCalRawData+0x14>
    858e:	e088      	b.n	86a2 <EEPROM_loadCalRawData+0x126>
    8590:	2801      	cmp	r0, #1
    8592:	d100      	bne.n	8596 <EEPROM_loadCalRawData+0x1a>
    8594:	e082      	b.n	869c <EEPROM_loadCalRawData+0x120>
    8596:	2500      	movs	r5, #0
    8598:	2304      	movs	r3, #4
    859a:	469b      	mov	fp, r3
    859c:	3305      	adds	r3, #5
    859e:	469a      	mov	sl, r3
    85a0:	3305      	adds	r3, #5
	struct i2c_master_packet packet = {
    85a2:	ac01      	add	r4, sp, #4
	switch (caltype){
    85a4:	4699      	mov	r9, r3
	struct i2c_master_packet packet = {
    85a6:	4b40      	ldr	r3, [pc, #256]	; (86a8 <EEPROM_loadCalRawData+0x12c>)
    85a8:	220c      	movs	r2, #12
    85aa:	2100      	movs	r1, #0
    85ac:	0020      	movs	r0, r4
    85ae:	4698      	mov	r8, r3
    85b0:	4798      	blx	r3
	add_buf[0] = data_address>>8;//high byte
    85b2:	466b      	mov	r3, sp
	add_buf[1] = data_address & 0xff;//low byte
    85b4:	466a      	mov	r2, sp
	add_buf[0] = data_address>>8;//high byte
    85b6:	701d      	strb	r5, [r3, #0]
	add_buf[1] = data_address & 0xff;//low byte
    85b8:	2300      	movs	r3, #0
    85ba:	7053      	strb	r3, [r2, #1]
	struct i2c_master_packet packet = {
    85bc:	4b3b      	ldr	r3, [pc, #236]	; (86ac <EEPROM_loadCalRawData+0x130>)
    85be:	4d3c      	ldr	r5, [pc, #240]	; (86b0 <EEPROM_loadCalRawData+0x134>)
    85c0:	4f3c      	ldr	r7, [pc, #240]	; (86b4 <EEPROM_loadCalRawData+0x138>)
	packet.data = add_buf;
    85c2:	6062      	str	r2, [r4, #4]
	struct i2c_master_packet packet = {
    85c4:	9301      	str	r3, [sp, #4]
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    85c6:	0021      	movs	r1, r4
    85c8:	0028      	movs	r0, r5
    85ca:	47b8      	blx	r7
    85cc:	2800      	cmp	r0, #0
    85ce:	d1fa      	bne.n	85c6 <EEPROM_loadCalRawData+0x4a>
	packet.data = data_buf;
    85d0:	4b39      	ldr	r3, [pc, #228]	; (86b8 <EEPROM_loadCalRawData+0x13c>)
    85d2:	4e3a      	ldr	r6, [pc, #232]	; (86bc <EEPROM_loadCalRawData+0x140>)
    85d4:	6063      	str	r3, [r4, #4]
	packet.data_length=bytes_to_read;
    85d6:	2396      	movs	r3, #150	; 0x96
    85d8:	00db      	lsls	r3, r3, #3
    85da:	8063      	strh	r3, [r4, #2]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    85dc:	0021      	movs	r1, r4
    85de:	0028      	movs	r0, r5
    85e0:	47b0      	blx	r6
    85e2:	2800      	cmp	r0, #0
    85e4:	d1fa      	bne.n	85dc <EEPROM_loadCalRawData+0x60>
	struct i2c_master_packet packet = {
    85e6:	220c      	movs	r2, #12
    85e8:	2100      	movs	r1, #0
    85ea:	0020      	movs	r0, r4
    85ec:	47c0      	blx	r8
	add_buf[0] = data_address>>8;//high byte
    85ee:	466b      	mov	r3, sp
    85f0:	465a      	mov	r2, fp
    85f2:	701a      	strb	r2, [r3, #0]
	add_buf[1] = data_address & 0xff;//low byte
    85f4:	23b0      	movs	r3, #176	; 0xb0
    85f6:	466a      	mov	r2, sp
    85f8:	7053      	strb	r3, [r2, #1]
	struct i2c_master_packet packet = {
    85fa:	4b2c      	ldr	r3, [pc, #176]	; (86ac <EEPROM_loadCalRawData+0x130>)
	packet.data = add_buf;
    85fc:	6062      	str	r2, [r4, #4]
	struct i2c_master_packet packet = {
    85fe:	9301      	str	r3, [sp, #4]
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    8600:	0021      	movs	r1, r4
    8602:	0028      	movs	r0, r5
    8604:	47b8      	blx	r7
    8606:	2800      	cmp	r0, #0
    8608:	d1fa      	bne.n	8600 <EEPROM_loadCalRawData+0x84>
	packet.data = data_buf;
    860a:	4b2d      	ldr	r3, [pc, #180]	; (86c0 <EEPROM_loadCalRawData+0x144>)
    860c:	6063      	str	r3, [r4, #4]
	packet.data_length=bytes_to_read;
    860e:	2396      	movs	r3, #150	; 0x96
    8610:	00db      	lsls	r3, r3, #3
    8612:	8063      	strh	r3, [r4, #2]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    8614:	0021      	movs	r1, r4
    8616:	0028      	movs	r0, r5
    8618:	47b0      	blx	r6
    861a:	2800      	cmp	r0, #0
    861c:	d1fa      	bne.n	8614 <EEPROM_loadCalRawData+0x98>
	struct i2c_master_packet packet = {
    861e:	220c      	movs	r2, #12
    8620:	2100      	movs	r1, #0
    8622:	0020      	movs	r0, r4
    8624:	47c0      	blx	r8
	add_buf[0] = data_address>>8;//high byte
    8626:	466b      	mov	r3, sp
    8628:	4652      	mov	r2, sl
    862a:	701a      	strb	r2, [r3, #0]
	add_buf[1] = data_address & 0xff;//low byte
    862c:	2360      	movs	r3, #96	; 0x60
    862e:	466a      	mov	r2, sp
    8630:	7053      	strb	r3, [r2, #1]
	struct i2c_master_packet packet = {
    8632:	4b1e      	ldr	r3, [pc, #120]	; (86ac <EEPROM_loadCalRawData+0x130>)
	packet.data = add_buf;
    8634:	6062      	str	r2, [r4, #4]
	struct i2c_master_packet packet = {
    8636:	9301      	str	r3, [sp, #4]
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    8638:	0021      	movs	r1, r4
    863a:	0028      	movs	r0, r5
    863c:	47b8      	blx	r7
    863e:	2800      	cmp	r0, #0
    8640:	d1fa      	bne.n	8638 <EEPROM_loadCalRawData+0xbc>
	packet.data = data_buf;
    8642:	4b20      	ldr	r3, [pc, #128]	; (86c4 <EEPROM_loadCalRawData+0x148>)
    8644:	6063      	str	r3, [r4, #4]
	packet.data_length=bytes_to_read;
    8646:	2396      	movs	r3, #150	; 0x96
    8648:	00db      	lsls	r3, r3, #3
    864a:	8063      	strh	r3, [r4, #2]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    864c:	0021      	movs	r1, r4
    864e:	0028      	movs	r0, r5
    8650:	47b0      	blx	r6
    8652:	2800      	cmp	r0, #0
    8654:	d1fa      	bne.n	864c <EEPROM_loadCalRawData+0xd0>
	struct i2c_master_packet packet = {
    8656:	220c      	movs	r2, #12
    8658:	2100      	movs	r1, #0
    865a:	0020      	movs	r0, r4
    865c:	47c0      	blx	r8
	add_buf[0] = data_address>>8;//high byte
    865e:	466b      	mov	r3, sp
    8660:	464a      	mov	r2, r9
    8662:	701a      	strb	r2, [r3, #0]
	add_buf[1] = data_address & 0xff;//low byte
    8664:	2310      	movs	r3, #16
    8666:	466a      	mov	r2, sp
    8668:	7053      	strb	r3, [r2, #1]
	struct i2c_master_packet packet = {
    866a:	4b10      	ldr	r3, [pc, #64]	; (86ac <EEPROM_loadCalRawData+0x130>)
	packet.data = add_buf;
    866c:	6062      	str	r2, [r4, #4]
	struct i2c_master_packet packet = {
    866e:	9301      	str	r3, [sp, #4]
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    8670:	0021      	movs	r1, r4
    8672:	0028      	movs	r0, r5
    8674:	47b8      	blx	r7
    8676:	2800      	cmp	r0, #0
    8678:	d1fa      	bne.n	8670 <EEPROM_loadCalRawData+0xf4>
	packet.data = data_buf;
    867a:	4b13      	ldr	r3, [pc, #76]	; (86c8 <EEPROM_loadCalRawData+0x14c>)
    867c:	6063      	str	r3, [r4, #4]
	packet.data_length=bytes_to_read;
    867e:	2396      	movs	r3, #150	; 0x96
    8680:	00db      	lsls	r3, r3, #3
    8682:	8063      	strh	r3, [r4, #2]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    8684:	0021      	movs	r1, r4
    8686:	0028      	movs	r0, r5
    8688:	47b0      	blx	r6
    868a:	2800      	cmp	r0, #0
    868c:	d1fa      	bne.n	8684 <EEPROM_loadCalRawData+0x108>
}
    868e:	b005      	add	sp, #20
    8690:	bc3c      	pop	{r2, r3, r4, r5}
    8692:	4690      	mov	r8, r2
    8694:	4699      	mov	r9, r3
    8696:	46a2      	mov	sl, r4
    8698:	46ab      	mov	fp, r5
    869a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (caltype){
    869c:	2525      	movs	r5, #37	; 0x25
    869e:	2329      	movs	r3, #41	; 0x29
    86a0:	e77b      	b.n	859a <EEPROM_loadCalRawData+0x1e>
    86a2:	2510      	movs	r5, #16
    86a4:	2314      	movs	r3, #20
    86a6:	e778      	b.n	859a <EEPROM_loadCalRawData+0x1e>
    86a8:	0001fdfd 	.word	0x0001fdfd
    86ac:	00020057 	.word	0x00020057
    86b0:	20000fb8 	.word	0x20000fb8
    86b4:	0000fb81 	.word	0x0000fb81
    86b8:	20004040 	.word	0x20004040
    86bc:	0000fb61 	.word	0x0000fb61
    86c0:	200022c8 	.word	0x200022c8
    86c4:	20003470 	.word	0x20003470
    86c8:	20001c88 	.word	0x20001c88

000086cc <load_user_settings>:
void load_user_settings(void){
    86cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    86ce:	46de      	mov	lr, fp
    86d0:	4657      	mov	r7, sl
    86d2:	464e      	mov	r6, r9
    86d4:	4645      	mov	r5, r8
    86d6:	b5e0      	push	{r5, r6, r7, lr}
	getDefaultOptions(&tempOptions);
    86d8:	4b26      	ldr	r3, [pc, #152]	; (8774 <load_user_settings+0xa8>)
void load_user_settings(void){
    86da:	b0ab      	sub	sp, #172	; 0xac
	getDefaultOptions(&tempOptions);
    86dc:	a804      	add	r0, sp, #16
	struct i2c_master_packet packet = {
    86de:	af09      	add	r7, sp, #36	; 0x24
	getDefaultOptions(&tempOptions);
    86e0:	469b      	mov	fp, r3
    86e2:	4798      	blx	r3
	struct i2c_master_packet packet = {
    86e4:	4b24      	ldr	r3, [pc, #144]	; (8778 <load_user_settings+0xac>)
    86e6:	220c      	movs	r2, #12
    86e8:	2100      	movs	r1, #0
    86ea:	0038      	movs	r0, r7
    86ec:	4798      	blx	r3
	add_buf[0] = data_address>>8;//high byte
    86ee:	2301      	movs	r3, #1
    86f0:	ac01      	add	r4, sp, #4
    86f2:	7023      	strb	r3, [r4, #0]
	add_buf[1] = data_address & 0xff;//low byte
    86f4:	2300      	movs	r3, #0
    86f6:	7063      	strb	r3, [r4, #1]
	struct i2c_master_packet packet = {
    86f8:	4b20      	ldr	r3, [pc, #128]	; (877c <load_user_settings+0xb0>)
    86fa:	4d21      	ldr	r5, [pc, #132]	; (8780 <load_user_settings+0xb4>)
    86fc:	4e21      	ldr	r6, [pc, #132]	; (8784 <load_user_settings+0xb8>)
	packet.data = add_buf;
    86fe:	607c      	str	r4, [r7, #4]
	struct i2c_master_packet packet = {
    8700:	9309      	str	r3, [sp, #36]	; 0x24
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    8702:	0039      	movs	r1, r7
    8704:	0028      	movs	r0, r5
    8706:	47b0      	blx	r6
    8708:	2800      	cmp	r0, #0
    870a:	d1fa      	bne.n	8702 <load_user_settings+0x36>
	packet.data = data_buf;
    870c:	4b1e      	ldr	r3, [pc, #120]	; (8788 <load_user_settings+0xbc>)
    870e:	4699      	mov	r9, r3
    8710:	607b      	str	r3, [r7, #4]
	packet.data_length=bytes_to_read;
    8712:	2314      	movs	r3, #20
    8714:	807b      	strh	r3, [r7, #2]
    8716:	4b1d      	ldr	r3, [pc, #116]	; (878c <load_user_settings+0xc0>)
    8718:	469a      	mov	sl, r3
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    871a:	0039      	movs	r1, r7
    871c:	0028      	movs	r0, r5
    871e:	47d0      	blx	sl
    8720:	4680      	mov	r8, r0
    8722:	2800      	cmp	r0, #0
    8724:	d1f9      	bne.n	871a <load_user_settings+0x4e>
	if (options.Settings_Initialized_Key != tempOptions.Settings_Initialized_Key){
    8726:	464b      	mov	r3, r9
    8728:	2122      	movs	r1, #34	; 0x22
    872a:	7c9a      	ldrb	r2, [r3, #18]
    872c:	466b      	mov	r3, sp
    872e:	185b      	adds	r3, r3, r1
    8730:	781b      	ldrb	r3, [r3, #0]
    8732:	429a      	cmp	r2, r3
    8734:	d017      	beq.n	8766 <load_user_settings+0x9a>
		getDefaultOptions(&options);
    8736:	4648      	mov	r0, r9
    8738:	47d8      	blx	fp
	packet.ten_bit_address = false;
    873a:	4643      	mov	r3, r8
    873c:	7223      	strb	r3, [r4, #8]
	packet.high_speed = false;
    873e:	7263      	strb	r3, [r4, #9]
	packet.hs_master_code = 0x0;
    8740:	72a3      	strb	r3, [r4, #10]
		send_buf[0] = address_packet>>8;
    8742:	2301      	movs	r3, #1
    8744:	703b      	strb	r3, [r7, #0]
		send_buf[1] = address_packet & 0x00FF;
    8746:	4643      	mov	r3, r8
    8748:	2026      	movs	r0, #38	; 0x26
    874a:	707b      	strb	r3, [r7, #1]
	packet.address = EEPROM_add;
    874c:	4b10      	ldr	r3, [pc, #64]	; (8790 <load_user_settings+0xc4>)
	packet.data = send_buf;
    874e:	6067      	str	r7, [r4, #4]
    8750:	2214      	movs	r2, #20
	packet.address = EEPROM_add;
    8752:	9301      	str	r3, [sp, #4]
    8754:	4649      	mov	r1, r9
    8756:	4468      	add	r0, sp
    8758:	4b0e      	ldr	r3, [pc, #56]	; (8794 <load_user_settings+0xc8>)
    875a:	4798      	blx	r3
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    875c:	0021      	movs	r1, r4
    875e:	0028      	movs	r0, r5
    8760:	47b0      	blx	r6
    8762:	2800      	cmp	r0, #0
    8764:	d1fa      	bne.n	875c <load_user_settings+0x90>
}
    8766:	b02b      	add	sp, #172	; 0xac
    8768:	bc3c      	pop	{r2, r3, r4, r5}
    876a:	4690      	mov	r8, r2
    876c:	4699      	mov	r9, r3
    876e:	46a2      	mov	sl, r4
    8770:	46ab      	mov	fp, r5
    8772:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8774:	0001a27d 	.word	0x0001a27d
    8778:	0001fdfd 	.word	0x0001fdfd
    877c:	00020057 	.word	0x00020057
    8780:	20000fb8 	.word	0x20000fb8
    8784:	0000fb81 	.word	0x0000fb81
    8788:	2000332c 	.word	0x2000332c
    878c:	0000fb61 	.word	0x0000fb61
    8790:	00160057 	.word	0x00160057
    8794:	0001fd79 	.word	0x0001fd79

00008798 <save_user_settings>:
void save_user_settings(void){
    8798:	b530      	push	{r4, r5, lr}
    879a:	b0a5      	sub	sp, #148	; 0x94
	packet.ten_bit_address = false;
    879c:	2300      	movs	r3, #0
    879e:	4669      	mov	r1, sp
    87a0:	200e      	movs	r0, #14
    87a2:	720b      	strb	r3, [r1, #8]
	packet.high_speed = false;
    87a4:	724b      	strb	r3, [r1, #9]
	packet.hs_master_code = 0x0;
    87a6:	728b      	strb	r3, [r1, #10]
		send_buf[0] = address_packet>>8;
    87a8:	2101      	movs	r1, #1
	packet.data = send_buf;
    87aa:	aa03      	add	r2, sp, #12
		send_buf[1] = address_packet & 0x00FF;
    87ac:	7053      	strb	r3, [r2, #1]
	packet.address = EEPROM_add;
    87ae:	4b09      	ldr	r3, [pc, #36]	; (87d4 <save_user_settings+0x3c>)
		send_buf[0] = address_packet>>8;
    87b0:	7011      	strb	r1, [r2, #0]
	packet.data = send_buf;
    87b2:	9201      	str	r2, [sp, #4]
	packet.address = EEPROM_add;
    87b4:	9300      	str	r3, [sp, #0]
    87b6:	2214      	movs	r2, #20
    87b8:	4907      	ldr	r1, [pc, #28]	; (87d8 <save_user_settings+0x40>)
    87ba:	4468      	add	r0, sp
    87bc:	4b07      	ldr	r3, [pc, #28]	; (87dc <save_user_settings+0x44>)
    87be:	4798      	blx	r3
    87c0:	4d07      	ldr	r5, [pc, #28]	; (87e0 <save_user_settings+0x48>)
    87c2:	4c08      	ldr	r4, [pc, #32]	; (87e4 <save_user_settings+0x4c>)
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    87c4:	4669      	mov	r1, sp
    87c6:	0028      	movs	r0, r5
    87c8:	47a0      	blx	r4
    87ca:	2800      	cmp	r0, #0
    87cc:	d1fa      	bne.n	87c4 <save_user_settings+0x2c>
}
    87ce:	b025      	add	sp, #148	; 0x94
    87d0:	bd30      	pop	{r4, r5, pc}
    87d2:	46c0      	nop			; (mov r8, r8)
    87d4:	00160057 	.word	0x00160057
    87d8:	2000332c 	.word	0x2000332c
    87dc:	0001fd79 	.word	0x0001fd79
    87e0:	20000fb8 	.word	0x20000fb8
    87e4:	0000fb81 	.word	0x0000fb81

000087e8 <load_calibration>:
void load_calibration(void){
    87e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    87ea:	46de      	mov	lr, fp
    87ec:	4657      	mov	r7, sl
    87ee:	464e      	mov	r6, r9
    87f0:	4645      	mov	r5, r8
    87f2:	b5e0      	push	{r5, r6, r7, lr}
	cal_init_struct(&tempCal);
    87f4:	4bb5      	ldr	r3, [pc, #724]	; (8acc <load_calibration+0x2e4>)
void load_calibration(void){
    87f6:	b0bd      	sub	sp, #244	; 0xf4
	cal_init_struct(&tempCal);
    87f8:	a804      	add	r0, sp, #16
	struct i2c_master_packet packet = {
    87fa:	af1b      	add	r7, sp, #108	; 0x6c
	cal_init_struct(&tempCal);
    87fc:	469b      	mov	fp, r3
    87fe:	4798      	blx	r3
	struct i2c_master_packet packet = {
    8800:	4bb3      	ldr	r3, [pc, #716]	; (8ad0 <load_calibration+0x2e8>)
    8802:	220c      	movs	r2, #12
    8804:	2100      	movs	r1, #0
    8806:	0038      	movs	r0, r7
    8808:	4798      	blx	r3
	add_buf[0] = data_address>>8;//high byte
    880a:	2303      	movs	r3, #3
    880c:	ac01      	add	r4, sp, #4
    880e:	7023      	strb	r3, [r4, #0]
	add_buf[1] = data_address & 0xff;//low byte
    8810:	2300      	movs	r3, #0
    8812:	7063      	strb	r3, [r4, #1]
	struct i2c_master_packet packet = {
    8814:	4baf      	ldr	r3, [pc, #700]	; (8ad4 <load_calibration+0x2ec>)
    8816:	4db0      	ldr	r5, [pc, #704]	; (8ad8 <load_calibration+0x2f0>)
    8818:	4eb0      	ldr	r6, [pc, #704]	; (8adc <load_calibration+0x2f4>)
	packet.data = add_buf;
    881a:	607c      	str	r4, [r7, #4]
	struct i2c_master_packet packet = {
    881c:	931b      	str	r3, [sp, #108]	; 0x6c
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    881e:	0039      	movs	r1, r7
    8820:	0028      	movs	r0, r5
    8822:	47b0      	blx	r6
    8824:	2800      	cmp	r0, #0
    8826:	d1fa      	bne.n	881e <load_calibration+0x36>
	packet.data = data_buf;
    8828:	4bad      	ldr	r3, [pc, #692]	; (8ae0 <load_calibration+0x2f8>)
    882a:	469a      	mov	sl, r3
    882c:	607b      	str	r3, [r7, #4]
	packet.data_length=bytes_to_read;
    882e:	235c      	movs	r3, #92	; 0x5c
    8830:	807b      	strh	r3, [r7, #2]
    8832:	4bac      	ldr	r3, [pc, #688]	; (8ae4 <load_calibration+0x2fc>)
    8834:	4698      	mov	r8, r3
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    8836:	0039      	movs	r1, r7
    8838:	0028      	movs	r0, r5
    883a:	47c0      	blx	r8
    883c:	2800      	cmp	r0, #0
    883e:	d1fa      	bne.n	8836 <load_calibration+0x4e>
    8840:	4681      	mov	r9, r0
	struct i2c_master_packet packet = {
    8842:	4ba3      	ldr	r3, [pc, #652]	; (8ad0 <load_calibration+0x2e8>)
    8844:	220c      	movs	r2, #12
    8846:	2100      	movs	r1, #0
    8848:	0038      	movs	r0, r7
    884a:	4798      	blx	r3
	add_buf[0] = data_address>>8;//high byte
    884c:	2304      	movs	r3, #4
    884e:	7023      	strb	r3, [r4, #0]
	add_buf[1] = data_address & 0xff;//low byte
    8850:	464b      	mov	r3, r9
    8852:	7063      	strb	r3, [r4, #1]
	struct i2c_master_packet packet = {
    8854:	4b9f      	ldr	r3, [pc, #636]	; (8ad4 <load_calibration+0x2ec>)
	packet.data = add_buf;
    8856:	607c      	str	r4, [r7, #4]
	struct i2c_master_packet packet = {
    8858:	931b      	str	r3, [sp, #108]	; 0x6c
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    885a:	0039      	movs	r1, r7
    885c:	0028      	movs	r0, r5
    885e:	47b0      	blx	r6
    8860:	2800      	cmp	r0, #0
    8862:	d1fa      	bne.n	885a <load_calibration+0x72>
	packet.data = data_buf;
    8864:	4ba0      	ldr	r3, [pc, #640]	; (8ae8 <load_calibration+0x300>)
    8866:	607b      	str	r3, [r7, #4]
	packet.data_length=bytes_to_read;
    8868:	235c      	movs	r3, #92	; 0x5c
    886a:	807b      	strh	r3, [r7, #2]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    886c:	0039      	movs	r1, r7
    886e:	0028      	movs	r0, r5
    8870:	47c0      	blx	r8
    8872:	2800      	cmp	r0, #0
    8874:	d1fa      	bne.n	886c <load_calibration+0x84>
    8876:	4681      	mov	r9, r0
	struct i2c_master_packet packet = {
    8878:	4b95      	ldr	r3, [pc, #596]	; (8ad0 <load_calibration+0x2e8>)
    887a:	220c      	movs	r2, #12
    887c:	2100      	movs	r1, #0
    887e:	0038      	movs	r0, r7
    8880:	4798      	blx	r3
	add_buf[0] = data_address>>8;//high byte
    8882:	2305      	movs	r3, #5
    8884:	7023      	strb	r3, [r4, #0]
	add_buf[1] = data_address & 0xff;//low byte
    8886:	464b      	mov	r3, r9
    8888:	7063      	strb	r3, [r4, #1]
	struct i2c_master_packet packet = {
    888a:	4b92      	ldr	r3, [pc, #584]	; (8ad4 <load_calibration+0x2ec>)
	packet.data = add_buf;
    888c:	607c      	str	r4, [r7, #4]
	struct i2c_master_packet packet = {
    888e:	931b      	str	r3, [sp, #108]	; 0x6c
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    8890:	0039      	movs	r1, r7
    8892:	0028      	movs	r0, r5
    8894:	47b0      	blx	r6
    8896:	2800      	cmp	r0, #0
    8898:	d1fa      	bne.n	8890 <load_calibration+0xa8>
	packet.data = data_buf;
    889a:	4b94      	ldr	r3, [pc, #592]	; (8aec <load_calibration+0x304>)
    889c:	607b      	str	r3, [r7, #4]
	packet.data_length=bytes_to_read;
    889e:	235c      	movs	r3, #92	; 0x5c
    88a0:	807b      	strh	r3, [r7, #2]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    88a2:	0039      	movs	r1, r7
    88a4:	0028      	movs	r0, r5
    88a6:	47c0      	blx	r8
    88a8:	2800      	cmp	r0, #0
    88aa:	d1fa      	bne.n	88a2 <load_calibration+0xba>
    88ac:	4681      	mov	r9, r0
	struct i2c_master_packet packet = {
    88ae:	4b88      	ldr	r3, [pc, #544]	; (8ad0 <load_calibration+0x2e8>)
    88b0:	220c      	movs	r2, #12
    88b2:	2100      	movs	r1, #0
    88b4:	0038      	movs	r0, r7
    88b6:	4798      	blx	r3
	add_buf[0] = data_address>>8;//high byte
    88b8:	2306      	movs	r3, #6
    88ba:	7023      	strb	r3, [r4, #0]
	add_buf[1] = data_address & 0xff;//low byte
    88bc:	464b      	mov	r3, r9
    88be:	7063      	strb	r3, [r4, #1]
	struct i2c_master_packet packet = {
    88c0:	4b84      	ldr	r3, [pc, #528]	; (8ad4 <load_calibration+0x2ec>)
	packet.data = add_buf;
    88c2:	607c      	str	r4, [r7, #4]
	struct i2c_master_packet packet = {
    88c4:	931b      	str	r3, [sp, #108]	; 0x6c
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    88c6:	0039      	movs	r1, r7
    88c8:	0028      	movs	r0, r5
    88ca:	47b0      	blx	r6
    88cc:	2800      	cmp	r0, #0
    88ce:	d1fa      	bne.n	88c6 <load_calibration+0xde>
	packet.data = data_buf;
    88d0:	4b87      	ldr	r3, [pc, #540]	; (8af0 <load_calibration+0x308>)
    88d2:	607b      	str	r3, [r7, #4]
	packet.data_length=bytes_to_read;
    88d4:	235c      	movs	r3, #92	; 0x5c
    88d6:	807b      	strh	r3, [r7, #2]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    88d8:	0039      	movs	r1, r7
    88da:	0028      	movs	r0, r5
    88dc:	47c0      	blx	r8
    88de:	2800      	cmp	r0, #0
    88e0:	d1fa      	bne.n	88d8 <load_calibration+0xf0>
    88e2:	4681      	mov	r9, r0
	struct i2c_master_packet packet = {
    88e4:	4b7a      	ldr	r3, [pc, #488]	; (8ad0 <load_calibration+0x2e8>)
    88e6:	220c      	movs	r2, #12
    88e8:	2100      	movs	r1, #0
    88ea:	0038      	movs	r0, r7
    88ec:	4798      	blx	r3
	add_buf[0] = data_address>>8;//high byte
    88ee:	2307      	movs	r3, #7
    88f0:	7023      	strb	r3, [r4, #0]
	add_buf[1] = data_address & 0xff;//low byte
    88f2:	464b      	mov	r3, r9
    88f4:	7063      	strb	r3, [r4, #1]
	struct i2c_master_packet packet = {
    88f6:	4b77      	ldr	r3, [pc, #476]	; (8ad4 <load_calibration+0x2ec>)
	packet.data = add_buf;
    88f8:	607c      	str	r4, [r7, #4]
	struct i2c_master_packet packet = {
    88fa:	931b      	str	r3, [sp, #108]	; 0x6c
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    88fc:	0039      	movs	r1, r7
    88fe:	0028      	movs	r0, r5
    8900:	47b0      	blx	r6
    8902:	2800      	cmp	r0, #0
    8904:	d1fa      	bne.n	88fc <load_calibration+0x114>
	packet.data = data_buf;
    8906:	4b7b      	ldr	r3, [pc, #492]	; (8af4 <load_calibration+0x30c>)
    8908:	607b      	str	r3, [r7, #4]
	packet.data_length=bytes_to_read;
    890a:	235c      	movs	r3, #92	; 0x5c
    890c:	807b      	strh	r3, [r7, #2]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    890e:	0039      	movs	r1, r7
    8910:	0028      	movs	r0, r5
    8912:	47c0      	blx	r8
    8914:	2800      	cmp	r0, #0
    8916:	d1fa      	bne.n	890e <load_calibration+0x126>
    8918:	4681      	mov	r9, r0
	struct i2c_master_packet packet = {
    891a:	4b6d      	ldr	r3, [pc, #436]	; (8ad0 <load_calibration+0x2e8>)
    891c:	220c      	movs	r2, #12
    891e:	2100      	movs	r1, #0
    8920:	0038      	movs	r0, r7
    8922:	4798      	blx	r3
	add_buf[0] = data_address>>8;//high byte
    8924:	2308      	movs	r3, #8
    8926:	7023      	strb	r3, [r4, #0]
	add_buf[1] = data_address & 0xff;//low byte
    8928:	464b      	mov	r3, r9
    892a:	7063      	strb	r3, [r4, #1]
	struct i2c_master_packet packet = {
    892c:	4b69      	ldr	r3, [pc, #420]	; (8ad4 <load_calibration+0x2ec>)
	packet.data = add_buf;
    892e:	607c      	str	r4, [r7, #4]
	struct i2c_master_packet packet = {
    8930:	931b      	str	r3, [sp, #108]	; 0x6c
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    8932:	0039      	movs	r1, r7
    8934:	0028      	movs	r0, r5
    8936:	47b0      	blx	r6
    8938:	2800      	cmp	r0, #0
    893a:	d1fa      	bne.n	8932 <load_calibration+0x14a>
	packet.data = data_buf;
    893c:	4b6e      	ldr	r3, [pc, #440]	; (8af8 <load_calibration+0x310>)
    893e:	607b      	str	r3, [r7, #4]
	packet.data_length=bytes_to_read;
    8940:	238c      	movs	r3, #140	; 0x8c
    8942:	807b      	strh	r3, [r7, #2]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    8944:	0039      	movs	r1, r7
    8946:	0028      	movs	r0, r5
    8948:	47c0      	blx	r8
    894a:	2800      	cmp	r0, #0
    894c:	d1fa      	bne.n	8944 <load_calibration+0x15c>
	if(tempCal.Cal_Initialized_Key != a1_calst.Cal_Initialized_Key){
    894e:	466b      	mov	r3, sp
    8950:	7c1a      	ldrb	r2, [r3, #16]
    8952:	4653      	mov	r3, sl
    8954:	781b      	ldrb	r3, [r3, #0]
    8956:	4681      	mov	r9, r0
    8958:	429a      	cmp	r2, r3
    895a:	d100      	bne.n	895e <load_calibration+0x176>
    895c:	e0af      	b.n	8abe <load_calibration+0x2d6>
		cal_init_struct(&a1_calst);
    895e:	4650      	mov	r0, sl
    8960:	47d8      	blx	fp
		cal_init_struct(&a2_calst);
    8962:	4861      	ldr	r0, [pc, #388]	; (8ae8 <load_calibration+0x300>)
    8964:	47d8      	blx	fp
		cal_init_struct(&m1_calst);
    8966:	4861      	ldr	r0, [pc, #388]	; (8aec <load_calibration+0x304>)
    8968:	47d8      	blx	fp
		cal_init_struct(&m2_calst);
    896a:	4861      	ldr	r0, [pc, #388]	; (8af0 <load_calibration+0x308>)
    896c:	47d8      	blx	fp
		cal_init_struct(&dist_calst);
    896e:	4861      	ldr	r0, [pc, #388]	; (8af4 <load_calibration+0x30c>)
    8970:	47d8      	blx	fp
	packet.ten_bit_address = false;
    8972:	464b      	mov	r3, r9
    8974:	7223      	strb	r3, [r4, #8]
	packet.high_speed = false;
    8976:	7263      	strb	r3, [r4, #9]
	packet.hs_master_code = 0x0;
    8978:	72a3      	strb	r3, [r4, #10]
		send_buf[0] = address_packet>>8;
    897a:	2303      	movs	r3, #3
    897c:	703b      	strb	r3, [r7, #0]
		send_buf[1] = address_packet & 0x00FF;
    897e:	464b      	mov	r3, r9
    8980:	707b      	strb	r3, [r7, #1]
	packet.address = EEPROM_add;
    8982:	4b5e      	ldr	r3, [pc, #376]	; (8afc <load_calibration+0x314>)
	packet.data = send_buf;
    8984:	6067      	str	r7, [r4, #4]
	packet.address = EEPROM_add;
    8986:	9301      	str	r3, [sp, #4]
    8988:	236e      	movs	r3, #110	; 0x6e
    898a:	446b      	add	r3, sp
    898c:	0018      	movs	r0, r3
    898e:	4b5c      	ldr	r3, [pc, #368]	; (8b00 <load_calibration+0x318>)
    8990:	225c      	movs	r2, #92	; 0x5c
    8992:	4651      	mov	r1, sl
    8994:	4699      	mov	r9, r3
    8996:	4798      	blx	r3
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    8998:	0021      	movs	r1, r4
    899a:	0028      	movs	r0, r5
    899c:	47b0      	blx	r6
    899e:	2800      	cmp	r0, #0
    89a0:	d1fa      	bne.n	8998 <load_calibration+0x1b0>
		send_buf[0] = address_packet>>8;
    89a2:	2304      	movs	r3, #4
    89a4:	703b      	strb	r3, [r7, #0]
	packet.address = EEPROM_add;
    89a6:	4b55      	ldr	r3, [pc, #340]	; (8afc <load_calibration+0x314>)
	packet.ten_bit_address = false;
    89a8:	7220      	strb	r0, [r4, #8]
	packet.high_speed = false;
    89aa:	7260      	strb	r0, [r4, #9]
	packet.hs_master_code = 0x0;
    89ac:	72a0      	strb	r0, [r4, #10]
	packet.data = send_buf;
    89ae:	6067      	str	r7, [r4, #4]
	packet.address = EEPROM_add;
    89b0:	9301      	str	r3, [sp, #4]
    89b2:	236e      	movs	r3, #110	; 0x6e
    89b4:	446b      	add	r3, sp
		send_buf[1] = address_packet & 0x00FF;
    89b6:	7078      	strb	r0, [r7, #1]
    89b8:	225c      	movs	r2, #92	; 0x5c
    89ba:	494b      	ldr	r1, [pc, #300]	; (8ae8 <load_calibration+0x300>)
    89bc:	0018      	movs	r0, r3
    89be:	47c8      	blx	r9
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    89c0:	0021      	movs	r1, r4
    89c2:	0028      	movs	r0, r5
    89c4:	47b0      	blx	r6
    89c6:	2800      	cmp	r0, #0
    89c8:	d1fa      	bne.n	89c0 <load_calibration+0x1d8>
		send_buf[0] = address_packet>>8;
    89ca:	2305      	movs	r3, #5
    89cc:	703b      	strb	r3, [r7, #0]
	packet.address = EEPROM_add;
    89ce:	4b4b      	ldr	r3, [pc, #300]	; (8afc <load_calibration+0x314>)
	packet.ten_bit_address = false;
    89d0:	7220      	strb	r0, [r4, #8]
	packet.high_speed = false;
    89d2:	7260      	strb	r0, [r4, #9]
	packet.hs_master_code = 0x0;
    89d4:	72a0      	strb	r0, [r4, #10]
	packet.data = send_buf;
    89d6:	6067      	str	r7, [r4, #4]
	packet.address = EEPROM_add;
    89d8:	9301      	str	r3, [sp, #4]
    89da:	236e      	movs	r3, #110	; 0x6e
    89dc:	446b      	add	r3, sp
		send_buf[1] = address_packet & 0x00FF;
    89de:	7078      	strb	r0, [r7, #1]
    89e0:	225c      	movs	r2, #92	; 0x5c
    89e2:	4942      	ldr	r1, [pc, #264]	; (8aec <load_calibration+0x304>)
    89e4:	0018      	movs	r0, r3
    89e6:	47c8      	blx	r9
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    89e8:	0021      	movs	r1, r4
    89ea:	0028      	movs	r0, r5
    89ec:	47b0      	blx	r6
    89ee:	2800      	cmp	r0, #0
    89f0:	d1fa      	bne.n	89e8 <load_calibration+0x200>
		send_buf[0] = address_packet>>8;
    89f2:	2306      	movs	r3, #6
    89f4:	703b      	strb	r3, [r7, #0]
	packet.address = EEPROM_add;
    89f6:	4b41      	ldr	r3, [pc, #260]	; (8afc <load_calibration+0x314>)
	packet.ten_bit_address = false;
    89f8:	7220      	strb	r0, [r4, #8]
	packet.high_speed = false;
    89fa:	7260      	strb	r0, [r4, #9]
	packet.hs_master_code = 0x0;
    89fc:	72a0      	strb	r0, [r4, #10]
	packet.data = send_buf;
    89fe:	6067      	str	r7, [r4, #4]
	packet.address = EEPROM_add;
    8a00:	9301      	str	r3, [sp, #4]
    8a02:	236e      	movs	r3, #110	; 0x6e
    8a04:	446b      	add	r3, sp
		send_buf[1] = address_packet & 0x00FF;
    8a06:	7078      	strb	r0, [r7, #1]
    8a08:	225c      	movs	r2, #92	; 0x5c
    8a0a:	4939      	ldr	r1, [pc, #228]	; (8af0 <load_calibration+0x308>)
    8a0c:	0018      	movs	r0, r3
    8a0e:	47c8      	blx	r9
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    8a10:	0021      	movs	r1, r4
    8a12:	0028      	movs	r0, r5
    8a14:	47b0      	blx	r6
    8a16:	2800      	cmp	r0, #0
    8a18:	d1fa      	bne.n	8a10 <load_calibration+0x228>
		send_buf[0] = address_packet>>8;
    8a1a:	2307      	movs	r3, #7
    8a1c:	703b      	strb	r3, [r7, #0]
	packet.address = EEPROM_add;
    8a1e:	4b37      	ldr	r3, [pc, #220]	; (8afc <load_calibration+0x314>)
	packet.ten_bit_address = false;
    8a20:	7220      	strb	r0, [r4, #8]
	packet.high_speed = false;
    8a22:	7260      	strb	r0, [r4, #9]
	packet.hs_master_code = 0x0;
    8a24:	72a0      	strb	r0, [r4, #10]
	packet.data = send_buf;
    8a26:	6067      	str	r7, [r4, #4]
	packet.address = EEPROM_add;
    8a28:	9301      	str	r3, [sp, #4]
    8a2a:	236e      	movs	r3, #110	; 0x6e
    8a2c:	446b      	add	r3, sp
		send_buf[1] = address_packet & 0x00FF;
    8a2e:	7078      	strb	r0, [r7, #1]
    8a30:	225c      	movs	r2, #92	; 0x5c
    8a32:	4930      	ldr	r1, [pc, #192]	; (8af4 <load_calibration+0x30c>)
    8a34:	0018      	movs	r0, r3
    8a36:	47c8      	blx	r9
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    8a38:	0021      	movs	r1, r4
    8a3a:	0028      	movs	r0, r5
    8a3c:	47b0      	blx	r6
    8a3e:	2800      	cmp	r0, #0
    8a40:	d1fa      	bne.n	8a38 <load_calibration+0x250>
	packet.address = EEPROM_add;
    8a42:	2357      	movs	r3, #87	; 0x57
    8a44:	8023      	strh	r3, [r4, #0]
	bytes_written = 0;
    8a46:	2300      	movs	r3, #0
    8a48:	469b      	mov	fp, r3
	address_packet = address_init;
    8a4a:	2380      	movs	r3, #128	; 0x80
    8a4c:	011b      	lsls	r3, r3, #4
    8a4e:	469a      	mov	sl, r3
		bytes_possible = PAGE_SIZE-(address_packet & 0x7F);
    8a50:	2380      	movs	r3, #128	; 0x80
    8a52:	4698      	mov	r8, r3
	packet.data = send_buf;
    8a54:	6067      	str	r7, [r4, #4]
	packet.ten_bit_address = false;
    8a56:	7220      	strb	r0, [r4, #8]
	packet.high_speed = false;
    8a58:	7260      	strb	r0, [r4, #9]
	packet.hs_master_code = 0x0;
    8a5a:	72a0      	strb	r0, [r4, #10]
		send_buf[0] = address_packet>>8;
    8a5c:	4653      	mov	r3, sl
    8a5e:	0a1b      	lsrs	r3, r3, #8
    8a60:	703b      	strb	r3, [r7, #0]
		send_buf[1] = address_packet & 0x00FF;
    8a62:	4653      	mov	r3, sl
    8a64:	707b      	strb	r3, [r7, #1]
		packet.data_length = bytes_packet+2; //2 for data address
    8a66:	4643      	mov	r3, r8
    8a68:	3302      	adds	r3, #2
    8a6a:	8063      	strh	r3, [r4, #2]
		for (i=0;i<bytes_packet;i++){
    8a6c:	4643      	mov	r3, r8
    8a6e:	2b00      	cmp	r3, #0
    8a70:	d009      	beq.n	8a86 <load_calibration+0x29e>
			send_buf[i+2] = data_buf[bytes_written+i];
    8a72:	1e5a      	subs	r2, r3, #1
    8a74:	4b20      	ldr	r3, [pc, #128]	; (8af8 <load_calibration+0x310>)
    8a76:	b292      	uxth	r2, r2
    8a78:	445b      	add	r3, fp
    8a7a:	0019      	movs	r1, r3
    8a7c:	236e      	movs	r3, #110	; 0x6e
    8a7e:	446b      	add	r3, sp
    8a80:	3201      	adds	r2, #1
    8a82:	0018      	movs	r0, r3
    8a84:	47c8      	blx	r9
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    8a86:	0021      	movs	r1, r4
    8a88:	0028      	movs	r0, r5
    8a8a:	47b0      	blx	r6
    8a8c:	2800      	cmp	r0, #0
    8a8e:	d1fa      	bne.n	8a86 <load_calibration+0x29e>
		bytes_written = bytes_written+bytes_packet;
    8a90:	44c3      	add	fp, r8
		bytes_remainder = bytes_to_write-bytes_written;
    8a92:	238c      	movs	r3, #140	; 0x8c
    8a94:	465a      	mov	r2, fp
    8a96:	1a9a      	subs	r2, r3, r2
		address_packet = address_packet+bytes_packet;
    8a98:	4643      	mov	r3, r8
    8a9a:	4453      	add	r3, sl
    8a9c:	b29b      	uxth	r3, r3
    8a9e:	469a      	mov	sl, r3
	while(bytes_written<bytes_to_write){
    8aa0:	465b      	mov	r3, fp
    8aa2:	2b8b      	cmp	r3, #139	; 0x8b
    8aa4:	d80b      	bhi.n	8abe <load_calibration+0x2d6>
		bytes_possible = PAGE_SIZE-(address_packet & 0x7F);
    8aa6:	4651      	mov	r1, sl
    8aa8:	237f      	movs	r3, #127	; 0x7f
    8aaa:	400b      	ands	r3, r1
    8aac:	2180      	movs	r1, #128	; 0x80
    8aae:	1acb      	subs	r3, r1, r3
    8ab0:	b29b      	uxth	r3, r3
    8ab2:	4698      	mov	r8, r3
		if (bytes_possible<bytes_remainder){
    8ab4:	4293      	cmp	r3, r2
    8ab6:	d3d1      	bcc.n	8a5c <load_calibration+0x274>
			bytes_packet = bytes_remainder;
    8ab8:	b293      	uxth	r3, r2
    8aba:	4698      	mov	r8, r3
    8abc:	e7ce      	b.n	8a5c <load_calibration+0x274>
}
    8abe:	b03d      	add	sp, #244	; 0xf4
    8ac0:	bc3c      	pop	{r2, r3, r4, r5}
    8ac2:	4690      	mov	r8, r2
    8ac4:	4699      	mov	r9, r3
    8ac6:	46a2      	mov	sl, r4
    8ac8:	46ab      	mov	fp, r5
    8aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8acc:	00011979 	.word	0x00011979
    8ad0:	0001fdfd 	.word	0x0001fdfd
    8ad4:	00020057 	.word	0x00020057
    8ad8:	20000fb8 	.word	0x20000fb8
    8adc:	0000fb81 	.word	0x0000fb81
    8ae0:	200055d0 	.word	0x200055d0
    8ae4:	0000fb61 	.word	0x0000fb61
    8ae8:	2000550c 	.word	0x2000550c
    8aec:	200054b0 	.word	0x200054b0
    8af0:	20003fe0 	.word	0x20003fe0
    8af4:	20005450 	.word	0x20005450
    8af8:	20004b4c 	.word	0x20004b4c
    8afc:	005e0057 	.word	0x005e0057
    8b00:	0001fd79 	.word	0x0001fd79

00008b04 <save_calibration>:
void save_calibration(void){
    8b04:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b06:	4645      	mov	r5, r8
    8b08:	46de      	mov	lr, fp
    8b0a:	4657      	mov	r7, sl
    8b0c:	464e      	mov	r6, r9
    8b0e:	b5e0      	push	{r5, r6, r7, lr}
    8b10:	b0a5      	sub	sp, #148	; 0x94
	packet.ten_bit_address = false;
    8b12:	2300      	movs	r3, #0
    8b14:	466a      	mov	r2, sp
	packet.data = send_buf;
    8b16:	af03      	add	r7, sp, #12
	packet.ten_bit_address = false;
    8b18:	7213      	strb	r3, [r2, #8]
	packet.high_speed = false;
    8b1a:	7253      	strb	r3, [r2, #9]
	packet.hs_master_code = 0x0;
    8b1c:	7293      	strb	r3, [r2, #10]
		send_buf[1] = address_packet & 0x00FF;
    8b1e:	707b      	strb	r3, [r7, #1]
	packet.address = EEPROM_add;
    8b20:	4b55      	ldr	r3, [pc, #340]	; (8c78 <save_calibration+0x174>)
		send_buf[0] = address_packet>>8;
    8b22:	2203      	movs	r2, #3
	packet.address = EEPROM_add;
    8b24:	9300      	str	r3, [sp, #0]
    8b26:	230e      	movs	r3, #14
    8b28:	446b      	add	r3, sp
    8b2a:	0018      	movs	r0, r3
    8b2c:	4b53      	ldr	r3, [pc, #332]	; (8c7c <save_calibration+0x178>)
		send_buf[0] = address_packet>>8;
    8b2e:	703a      	strb	r2, [r7, #0]
    8b30:	4953      	ldr	r1, [pc, #332]	; (8c80 <save_calibration+0x17c>)
    8b32:	3259      	adds	r2, #89	; 0x59
	packet.data = send_buf;
    8b34:	9701      	str	r7, [sp, #4]
    8b36:	4698      	mov	r8, r3
    8b38:	4798      	blx	r3
    8b3a:	4c52      	ldr	r4, [pc, #328]	; (8c84 <save_calibration+0x180>)
    8b3c:	4d52      	ldr	r5, [pc, #328]	; (8c88 <save_calibration+0x184>)
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    8b3e:	4669      	mov	r1, sp
    8b40:	0020      	movs	r0, r4
    8b42:	47a8      	blx	r5
    8b44:	2800      	cmp	r0, #0
    8b46:	d1fa      	bne.n	8b3e <save_calibration+0x3a>
	packet.ten_bit_address = false;
    8b48:	466b      	mov	r3, sp
    8b4a:	7218      	strb	r0, [r3, #8]
	packet.high_speed = false;
    8b4c:	7258      	strb	r0, [r3, #9]
	packet.hs_master_code = 0x0;
    8b4e:	7298      	strb	r0, [r3, #10]
		send_buf[0] = address_packet>>8;
    8b50:	2304      	movs	r3, #4
    8b52:	703b      	strb	r3, [r7, #0]
	packet.address = EEPROM_add;
    8b54:	4b48      	ldr	r3, [pc, #288]	; (8c78 <save_calibration+0x174>)
		send_buf[1] = address_packet & 0x00FF;
    8b56:	7078      	strb	r0, [r7, #1]
	packet.address = EEPROM_add;
    8b58:	9300      	str	r3, [sp, #0]
    8b5a:	230e      	movs	r3, #14
    8b5c:	446b      	add	r3, sp
    8b5e:	225c      	movs	r2, #92	; 0x5c
    8b60:	494a      	ldr	r1, [pc, #296]	; (8c8c <save_calibration+0x188>)
    8b62:	0018      	movs	r0, r3
	packet.data = send_buf;
    8b64:	9701      	str	r7, [sp, #4]
    8b66:	47c0      	blx	r8
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    8b68:	4669      	mov	r1, sp
    8b6a:	0020      	movs	r0, r4
    8b6c:	47a8      	blx	r5
    8b6e:	2800      	cmp	r0, #0
    8b70:	d1fa      	bne.n	8b68 <save_calibration+0x64>
	packet.ten_bit_address = false;
    8b72:	466b      	mov	r3, sp
    8b74:	7218      	strb	r0, [r3, #8]
	packet.high_speed = false;
    8b76:	7258      	strb	r0, [r3, #9]
	packet.hs_master_code = 0x0;
    8b78:	7298      	strb	r0, [r3, #10]
		send_buf[0] = address_packet>>8;
    8b7a:	2305      	movs	r3, #5
    8b7c:	703b      	strb	r3, [r7, #0]
	packet.address = EEPROM_add;
    8b7e:	4b3e      	ldr	r3, [pc, #248]	; (8c78 <save_calibration+0x174>)
		send_buf[1] = address_packet & 0x00FF;
    8b80:	7078      	strb	r0, [r7, #1]
	packet.address = EEPROM_add;
    8b82:	9300      	str	r3, [sp, #0]
    8b84:	230e      	movs	r3, #14
    8b86:	446b      	add	r3, sp
    8b88:	225c      	movs	r2, #92	; 0x5c
    8b8a:	4941      	ldr	r1, [pc, #260]	; (8c90 <save_calibration+0x18c>)
    8b8c:	0018      	movs	r0, r3
	packet.data = send_buf;
    8b8e:	9701      	str	r7, [sp, #4]
    8b90:	47c0      	blx	r8
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    8b92:	4669      	mov	r1, sp
    8b94:	0020      	movs	r0, r4
    8b96:	47a8      	blx	r5
    8b98:	2800      	cmp	r0, #0
    8b9a:	d1fa      	bne.n	8b92 <save_calibration+0x8e>
	packet.ten_bit_address = false;
    8b9c:	466b      	mov	r3, sp
    8b9e:	7218      	strb	r0, [r3, #8]
	packet.high_speed = false;
    8ba0:	7258      	strb	r0, [r3, #9]
	packet.hs_master_code = 0x0;
    8ba2:	7298      	strb	r0, [r3, #10]
		send_buf[0] = address_packet>>8;
    8ba4:	2306      	movs	r3, #6
    8ba6:	703b      	strb	r3, [r7, #0]
	packet.address = EEPROM_add;
    8ba8:	4b33      	ldr	r3, [pc, #204]	; (8c78 <save_calibration+0x174>)
		send_buf[1] = address_packet & 0x00FF;
    8baa:	7078      	strb	r0, [r7, #1]
	packet.address = EEPROM_add;
    8bac:	9300      	str	r3, [sp, #0]
    8bae:	230e      	movs	r3, #14
    8bb0:	446b      	add	r3, sp
    8bb2:	225c      	movs	r2, #92	; 0x5c
    8bb4:	4937      	ldr	r1, [pc, #220]	; (8c94 <save_calibration+0x190>)
    8bb6:	0018      	movs	r0, r3
	packet.data = send_buf;
    8bb8:	9701      	str	r7, [sp, #4]
    8bba:	47c0      	blx	r8
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    8bbc:	4669      	mov	r1, sp
    8bbe:	0020      	movs	r0, r4
    8bc0:	47a8      	blx	r5
    8bc2:	2800      	cmp	r0, #0
    8bc4:	d1fa      	bne.n	8bbc <save_calibration+0xb8>
	packet.ten_bit_address = false;
    8bc6:	466b      	mov	r3, sp
    8bc8:	7218      	strb	r0, [r3, #8]
	packet.high_speed = false;
    8bca:	7258      	strb	r0, [r3, #9]
	packet.hs_master_code = 0x0;
    8bcc:	7298      	strb	r0, [r3, #10]
		send_buf[0] = address_packet>>8;
    8bce:	2307      	movs	r3, #7
    8bd0:	703b      	strb	r3, [r7, #0]
	packet.address = EEPROM_add;
    8bd2:	4b29      	ldr	r3, [pc, #164]	; (8c78 <save_calibration+0x174>)
		send_buf[1] = address_packet & 0x00FF;
    8bd4:	7078      	strb	r0, [r7, #1]
	packet.address = EEPROM_add;
    8bd6:	9300      	str	r3, [sp, #0]
    8bd8:	230e      	movs	r3, #14
    8bda:	446b      	add	r3, sp
    8bdc:	225c      	movs	r2, #92	; 0x5c
    8bde:	492e      	ldr	r1, [pc, #184]	; (8c98 <save_calibration+0x194>)
    8be0:	0018      	movs	r0, r3
	packet.data = send_buf;
    8be2:	9701      	str	r7, [sp, #4]
    8be4:	47c0      	blx	r8
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    8be6:	4669      	mov	r1, sp
    8be8:	0020      	movs	r0, r4
    8bea:	47a8      	blx	r5
    8bec:	2800      	cmp	r0, #0
    8bee:	d1fa      	bne.n	8be6 <save_calibration+0xe2>
	packet.ten_bit_address = false;
    8bf0:	466b      	mov	r3, sp
	packet.address = EEPROM_add;
    8bf2:	466a      	mov	r2, sp
	packet.ten_bit_address = false;
    8bf4:	7218      	strb	r0, [r3, #8]
	packet.high_speed = false;
    8bf6:	7258      	strb	r0, [r3, #9]
	packet.hs_master_code = 0x0;
    8bf8:	7298      	strb	r0, [r3, #10]
	packet.address = EEPROM_add;
    8bfa:	2357      	movs	r3, #87	; 0x57
    8bfc:	8013      	strh	r3, [r2, #0]
	bytes_written = 0;
    8bfe:	2300      	movs	r3, #0
    8c00:	469a      	mov	sl, r3
	address_packet = address_init;
    8c02:	2380      	movs	r3, #128	; 0x80
    8c04:	011b      	lsls	r3, r3, #4
    8c06:	4699      	mov	r9, r3
		bytes_remainder = bytes_to_write-bytes_written;
    8c08:	238c      	movs	r3, #140	; 0x8c
		bytes_possible = PAGE_SIZE-(address_packet & 0x7F);
    8c0a:	2680      	movs	r6, #128	; 0x80
		bytes_remainder = bytes_to_write-bytes_written;
    8c0c:	469b      	mov	fp, r3
	packet.data = send_buf;
    8c0e:	9701      	str	r7, [sp, #4]
		send_buf[0] = address_packet>>8;
    8c10:	464b      	mov	r3, r9
    8c12:	0a1b      	lsrs	r3, r3, #8
    8c14:	703b      	strb	r3, [r7, #0]
		send_buf[1] = address_packet & 0x00FF;
    8c16:	464b      	mov	r3, r9
		packet.data_length = bytes_packet+2; //2 for data address
    8c18:	466a      	mov	r2, sp
		send_buf[1] = address_packet & 0x00FF;
    8c1a:	707b      	strb	r3, [r7, #1]
		packet.data_length = bytes_packet+2; //2 for data address
    8c1c:	1cb3      	adds	r3, r6, #2
    8c1e:	8053      	strh	r3, [r2, #2]
		for (i=0;i<bytes_packet;i++){
    8c20:	2e00      	cmp	r6, #0
    8c22:	d009      	beq.n	8c38 <save_calibration+0x134>
    8c24:	4b1d      	ldr	r3, [pc, #116]	; (8c9c <save_calibration+0x198>)
			send_buf[i+2] = data_buf[bytes_written+i];
    8c26:	1e72      	subs	r2, r6, #1
    8c28:	4453      	add	r3, sl
    8c2a:	0019      	movs	r1, r3
    8c2c:	230e      	movs	r3, #14
    8c2e:	b292      	uxth	r2, r2
    8c30:	446b      	add	r3, sp
    8c32:	3201      	adds	r2, #1
    8c34:	0018      	movs	r0, r3
    8c36:	47c0      	blx	r8
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    8c38:	4669      	mov	r1, sp
    8c3a:	0020      	movs	r0, r4
    8c3c:	47a8      	blx	r5
    8c3e:	2800      	cmp	r0, #0
    8c40:	d1fa      	bne.n	8c38 <save_calibration+0x134>
		bytes_written = bytes_written+bytes_packet;
    8c42:	44b2      	add	sl, r6
		bytes_remainder = bytes_to_write-bytes_written;
    8c44:	4652      	mov	r2, sl
    8c46:	465b      	mov	r3, fp
		address_packet = address_packet+bytes_packet;
    8c48:	444e      	add	r6, r9
		bytes_remainder = bytes_to_write-bytes_written;
    8c4a:	1a9b      	subs	r3, r3, r2
		address_packet = address_packet+bytes_packet;
    8c4c:	b2b2      	uxth	r2, r6
    8c4e:	4691      	mov	r9, r2
	while(bytes_written<bytes_to_write){
    8c50:	4652      	mov	r2, sl
    8c52:	2a8b      	cmp	r2, #139	; 0x8b
    8c54:	d809      	bhi.n	8c6a <save_calibration+0x166>
		bytes_possible = PAGE_SIZE-(address_packet & 0x7F);
    8c56:	227f      	movs	r2, #127	; 0x7f
    8c58:	4649      	mov	r1, r9
    8c5a:	2680      	movs	r6, #128	; 0x80
    8c5c:	400a      	ands	r2, r1
    8c5e:	1ab6      	subs	r6, r6, r2
    8c60:	b2b6      	uxth	r6, r6
		if (bytes_possible<bytes_remainder){
    8c62:	429e      	cmp	r6, r3
    8c64:	d3d4      	bcc.n	8c10 <save_calibration+0x10c>
			bytes_packet = bytes_remainder;
    8c66:	b29e      	uxth	r6, r3
    8c68:	e7d2      	b.n	8c10 <save_calibration+0x10c>
}
    8c6a:	b025      	add	sp, #148	; 0x94
    8c6c:	bc3c      	pop	{r2, r3, r4, r5}
    8c6e:	4690      	mov	r8, r2
    8c70:	4699      	mov	r9, r3
    8c72:	46a2      	mov	sl, r4
    8c74:	46ab      	mov	fp, r5
    8c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8c78:	005e0057 	.word	0x005e0057
    8c7c:	0001fd79 	.word	0x0001fd79
    8c80:	200055d0 	.word	0x200055d0
    8c84:	20000fb8 	.word	0x20000fb8
    8c88:	0000fb81 	.word	0x0000fb81
    8c8c:	2000550c 	.word	0x2000550c
    8c90:	200054b0 	.word	0x200054b0
    8c94:	20003fe0 	.word	0x20003fe0
    8c98:	20005450 	.word	0x20005450
    8c9c:	20004b4c 	.word	0x20004b4c

00008ca0 <save_cal_report>:
void save_cal_report(void){
    8ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
    8ca2:	4657      	mov	r7, sl
    8ca4:	464e      	mov	r6, r9
    8ca6:	46de      	mov	lr, fp
    8ca8:	b5c0      	push	{r6, r7, lr}
    8caa:	b0a4      	sub	sp, #144	; 0x90
	packet.data = send_buf;
    8cac:	ab03      	add	r3, sp, #12
	packet.ten_bit_address = false;
    8cae:	466a      	mov	r2, sp
	packet.data = send_buf;
    8cb0:	9301      	str	r3, [sp, #4]
	packet.ten_bit_address = false;
    8cb2:	2300      	movs	r3, #0
    8cb4:	7213      	strb	r3, [r2, #8]
	packet.high_speed = false;
    8cb6:	7253      	strb	r3, [r2, #9]
	packet.hs_master_code = 0x0;
    8cb8:	7293      	strb	r3, [r2, #10]
	packet.address = EEPROM_add;
    8cba:	3357      	adds	r3, #87	; 0x57
    8cbc:	8013      	strh	r3, [r2, #0]
	bytes_written = 0;
    8cbe:	2300      	movs	r3, #0
    8cc0:	4699      	mov	r9, r3
    8cc2:	4b1b      	ldr	r3, [pc, #108]	; (8d30 <save_cal_report+0x90>)
	address_packet = address_init;
    8cc4:	2780      	movs	r7, #128	; 0x80
    8cc6:	469b      	mov	fp, r3
    8cc8:	4b1a      	ldr	r3, [pc, #104]	; (8d34 <save_cal_report+0x94>)
		bytes_possible = PAGE_SIZE-(address_packet & 0x7F);
    8cca:	2480      	movs	r4, #128	; 0x80
    8ccc:	469a      	mov	sl, r3
    8cce:	4e1a      	ldr	r6, [pc, #104]	; (8d38 <save_cal_report+0x98>)
    8cd0:	4d1a      	ldr	r5, [pc, #104]	; (8d3c <save_cal_report+0x9c>)
	address_packet = address_init;
    8cd2:	013f      	lsls	r7, r7, #4
		send_buf[0] = address_packet>>8;
    8cd4:	466a      	mov	r2, sp
    8cd6:	0a3b      	lsrs	r3, r7, #8
    8cd8:	7313      	strb	r3, [r2, #12]
		packet.data_length = bytes_packet+2; //2 for data address
    8cda:	1ca3      	adds	r3, r4, #2
		send_buf[1] = address_packet & 0x00FF;
    8cdc:	7357      	strb	r7, [r2, #13]
		packet.data_length = bytes_packet+2; //2 for data address
    8cde:	8053      	strh	r3, [r2, #2]
		for (i=0;i<bytes_packet;i++){
    8ce0:	2c00      	cmp	r4, #0
    8ce2:	d008      	beq.n	8cf6 <save_cal_report+0x56>
    8ce4:	230e      	movs	r3, #14
    8ce6:	4649      	mov	r1, r9
			send_buf[i+2] = data_buf[bytes_written+i];
    8ce8:	1e62      	subs	r2, r4, #1
    8cea:	b292      	uxth	r2, r2
    8cec:	446b      	add	r3, sp
    8cee:	3201      	adds	r2, #1
    8cf0:	4459      	add	r1, fp
    8cf2:	0018      	movs	r0, r3
    8cf4:	47d0      	blx	sl
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    8cf6:	4669      	mov	r1, sp
    8cf8:	0030      	movs	r0, r6
    8cfa:	47a8      	blx	r5
    8cfc:	2800      	cmp	r0, #0
    8cfe:	d1fa      	bne.n	8cf6 <save_cal_report+0x56>
		bytes_written = bytes_written+bytes_packet;
    8d00:	44a1      	add	r9, r4
		bytes_remainder = bytes_to_write-bytes_written;
    8d02:	238c      	movs	r3, #140	; 0x8c
    8d04:	464a      	mov	r2, r9
		address_packet = address_packet+bytes_packet;
    8d06:	19e7      	adds	r7, r4, r7
		bytes_remainder = bytes_to_write-bytes_written;
    8d08:	1a9b      	subs	r3, r3, r2
		address_packet = address_packet+bytes_packet;
    8d0a:	b2bf      	uxth	r7, r7
	while(bytes_written<bytes_to_write){
    8d0c:	2a8b      	cmp	r2, #139	; 0x8b
    8d0e:	d808      	bhi.n	8d22 <save_cal_report+0x82>
		bytes_possible = PAGE_SIZE-(address_packet & 0x7F);
    8d10:	227f      	movs	r2, #127	; 0x7f
    8d12:	2480      	movs	r4, #128	; 0x80
    8d14:	403a      	ands	r2, r7
    8d16:	1aa4      	subs	r4, r4, r2
    8d18:	b2a4      	uxth	r4, r4
		if (bytes_possible<bytes_remainder){
    8d1a:	429c      	cmp	r4, r3
    8d1c:	d3da      	bcc.n	8cd4 <save_cal_report+0x34>
			bytes_packet = bytes_remainder;
    8d1e:	b29c      	uxth	r4, r3
    8d20:	e7d8      	b.n	8cd4 <save_cal_report+0x34>
}
    8d22:	b024      	add	sp, #144	; 0x90
    8d24:	bc1c      	pop	{r2, r3, r4}
    8d26:	4691      	mov	r9, r2
    8d28:	469a      	mov	sl, r3
    8d2a:	46a3      	mov	fp, r4
    8d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8d2e:	46c0      	nop			; (mov r8, r8)
    8d30:	20004b4c 	.word	0x20004b4c
    8d34:	0001fd79 	.word	0x0001fd79
    8d38:	20000fb8 	.word	0x20000fb8
    8d3c:	0000fb81 	.word	0x0000fb81

00008d40 <load_cal_report>:
void load_cal_report(void){
    8d40:	b570      	push	{r4, r5, r6, lr}
    8d42:	b084      	sub	sp, #16
	struct i2c_master_packet packet = {
    8d44:	ac01      	add	r4, sp, #4
    8d46:	220c      	movs	r2, #12
    8d48:	4b0f      	ldr	r3, [pc, #60]	; (8d88 <load_cal_report+0x48>)
    8d4a:	2100      	movs	r1, #0
    8d4c:	0020      	movs	r0, r4
    8d4e:	4798      	blx	r3
	add_buf[0] = data_address>>8;//high byte
    8d50:	466a      	mov	r2, sp
    8d52:	2308      	movs	r3, #8
    8d54:	7013      	strb	r3, [r2, #0]
	add_buf[1] = data_address & 0xff;//low byte
    8d56:	2300      	movs	r3, #0
    8d58:	7053      	strb	r3, [r2, #1]
	struct i2c_master_packet packet = {
    8d5a:	4b0c      	ldr	r3, [pc, #48]	; (8d8c <load_cal_report+0x4c>)
    8d5c:	4d0c      	ldr	r5, [pc, #48]	; (8d90 <load_cal_report+0x50>)
    8d5e:	4e0d      	ldr	r6, [pc, #52]	; (8d94 <load_cal_report+0x54>)
	packet.data = add_buf;
    8d60:	6062      	str	r2, [r4, #4]
	struct i2c_master_packet packet = {
    8d62:	9301      	str	r3, [sp, #4]
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    8d64:	0021      	movs	r1, r4
    8d66:	0028      	movs	r0, r5
    8d68:	47b0      	blx	r6
    8d6a:	2800      	cmp	r0, #0
    8d6c:	d1fa      	bne.n	8d64 <load_cal_report+0x24>
	packet.data = data_buf;
    8d6e:	4b0a      	ldr	r3, [pc, #40]	; (8d98 <load_cal_report+0x58>)
    8d70:	4e0a      	ldr	r6, [pc, #40]	; (8d9c <load_cal_report+0x5c>)
    8d72:	6063      	str	r3, [r4, #4]
	packet.data_length=bytes_to_read;
    8d74:	238c      	movs	r3, #140	; 0x8c
    8d76:	8063      	strh	r3, [r4, #2]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
    8d78:	0021      	movs	r1, r4
    8d7a:	0028      	movs	r0, r5
    8d7c:	47b0      	blx	r6
    8d7e:	2800      	cmp	r0, #0
    8d80:	d1fa      	bne.n	8d78 <load_cal_report+0x38>
}
    8d82:	b004      	add	sp, #16
    8d84:	bd70      	pop	{r4, r5, r6, pc}
    8d86:	46c0      	nop			; (mov r8, r8)
    8d88:	0001fdfd 	.word	0x0001fdfd
    8d8c:	00020057 	.word	0x00020057
    8d90:	20000fb8 	.word	0x20000fb8
    8d94:	0000fb81 	.word	0x0000fb81
    8d98:	20004b4c 	.word	0x20004b4c
    8d9c:	0000fb61 	.word	0x0000fb61

00008da0 <calc_mag_stdev>:
	*declinationP = RAD2DEG*atan2(crotXYZ[2], crxy);
	
	
}

float calc_mag_stdev(float XYZ[NBUFF][3]){
    8da0:	b5f0      	push	{r4, r5, r6, r7, lr}
    8da2:	46de      	mov	lr, fp
    8da4:	4657      	mov	r7, sl
    8da6:	464e      	mov	r6, r9
    8da8:	4645      	mov	r5, r8
    8daa:	b5e0      	push	{r5, r6, r7, lr}
	float err_mag[NBUFF];
	uint32_t p;
	float temp1;
	
	for (p=0;p<nPoints;p++){
    8dac:	4b61      	ldr	r3, [pc, #388]	; (8f34 <calc_mag_stdev+0x194>)
float calc_mag_stdev(float XYZ[NBUFF][3]){
    8dae:	b0eb      	sub	sp, #428	; 0x1ac
	for (p=0;p<nPoints;p++){
    8db0:	681b      	ldr	r3, [r3, #0]
    8db2:	9300      	str	r3, [sp, #0]
    8db4:	2b00      	cmp	r3, #0
    8db6:	d100      	bne.n	8dba <calc_mag_stdev+0x1a>
    8db8:	e0b0      	b.n	8f1c <calc_mag_stdev+0x17c>
    8dba:	2300      	movs	r3, #0
    8dbc:	4680      	mov	r8, r0
    8dbe:	4699      	mov	r9, r3
    8dc0:	4b5d      	ldr	r3, [pc, #372]	; (8f38 <calc_mag_stdev+0x198>)
    8dc2:	469a      	mov	sl, r3
    8dc4:	4b5d      	ldr	r3, [pc, #372]	; (8f3c <calc_mag_stdev+0x19c>)
    8dc6:	469b      	mov	fp, r3
    8dc8:	4b5d      	ldr	r3, [pc, #372]	; (8f40 <calc_mag_stdev+0x1a0>)
    8dca:	9302      	str	r3, [sp, #8]
    8dcc:	4b5d      	ldr	r3, [pc, #372]	; (8f44 <calc_mag_stdev+0x1a4>)
    8dce:	9303      	str	r3, [sp, #12]
		temp1 = sqrt(pow(XYZ[p][0],2)+pow(XYZ[p][1],2)+pow(XYZ[p][2],2));
    8dd0:	4643      	mov	r3, r8
    8dd2:	6818      	ldr	r0, [r3, #0]
    8dd4:	47d0      	blx	sl
    8dd6:	4643      	mov	r3, r8
    8dd8:	0004      	movs	r4, r0
    8dda:	6858      	ldr	r0, [r3, #4]
    8ddc:	000d      	movs	r5, r1
    8dde:	47d0      	blx	sl
    8de0:	4643      	mov	r3, r8
    8de2:	0006      	movs	r6, r0
    8de4:	6898      	ldr	r0, [r3, #8]
    8de6:	000f      	movs	r7, r1
    8de8:	47d0      	blx	sl
    8dea:	0022      	movs	r2, r4
    8dec:	9000      	str	r0, [sp, #0]
    8dee:	9101      	str	r1, [sp, #4]
    8df0:	002b      	movs	r3, r5
    8df2:	0020      	movs	r0, r4
    8df4:	0029      	movs	r1, r5
    8df6:	47d8      	blx	fp
    8df8:	0032      	movs	r2, r6
    8dfa:	0004      	movs	r4, r0
    8dfc:	000d      	movs	r5, r1
    8dfe:	003b      	movs	r3, r7
    8e00:	0030      	movs	r0, r6
    8e02:	0039      	movs	r1, r7
    8e04:	47d8      	blx	fp
    8e06:	0002      	movs	r2, r0
    8e08:	000b      	movs	r3, r1
    8e0a:	0020      	movs	r0, r4
    8e0c:	0029      	movs	r1, r5
    8e0e:	4c4e      	ldr	r4, [pc, #312]	; (8f48 <calc_mag_stdev+0x1a8>)
    8e10:	47a0      	blx	r4
    8e12:	0004      	movs	r4, r0
    8e14:	000d      	movs	r5, r1
    8e16:	9800      	ldr	r0, [sp, #0]
    8e18:	9901      	ldr	r1, [sp, #4]
    8e1a:	0002      	movs	r2, r0
    8e1c:	000b      	movs	r3, r1
    8e1e:	47d8      	blx	fp
    8e20:	0002      	movs	r2, r0
    8e22:	000b      	movs	r3, r1
    8e24:	0020      	movs	r0, r4
    8e26:	0029      	movs	r1, r5
    8e28:	4c47      	ldr	r4, [pc, #284]	; (8f48 <calc_mag_stdev+0x1a8>)
    8e2a:	47a0      	blx	r4
    8e2c:	9b02      	ldr	r3, [sp, #8]
    8e2e:	4798      	blx	r3
		err_mag[p] = temp1-1;
    8e30:	464b      	mov	r3, r9
    8e32:	009c      	lsls	r4, r3, #2
		temp1 = sqrt(pow(XYZ[p][0],2)+pow(XYZ[p][1],2)+pow(XYZ[p][2],2));
    8e34:	9b03      	ldr	r3, [sp, #12]
    8e36:	4798      	blx	r3
		err_mag[p] = temp1-1;
    8e38:	21fe      	movs	r1, #254	; 0xfe
    8e3a:	4b44      	ldr	r3, [pc, #272]	; (8f4c <calc_mag_stdev+0x1ac>)
    8e3c:	0589      	lsls	r1, r1, #22
    8e3e:	4798      	blx	r3
    8e40:	ab06      	add	r3, sp, #24
    8e42:	5118      	str	r0, [r3, r4]
	for (p=0;p<nPoints;p++){
    8e44:	2301      	movs	r3, #1
    8e46:	469c      	mov	ip, r3
    8e48:	4b3a      	ldr	r3, [pc, #232]	; (8f34 <calc_mag_stdev+0x194>)
    8e4a:	44e1      	add	r9, ip
    8e4c:	681c      	ldr	r4, [r3, #0]
    8e4e:	230c      	movs	r3, #12
    8e50:	469c      	mov	ip, r3
    8e52:	44e0      	add	r8, ip
    8e54:	454c      	cmp	r4, r9
    8e56:	d8bb      	bhi.n	8dd0 <calc_mag_stdev+0x30>
	uint8_t i;
	float mean;
	
	
	mean = 0;
	for (i=0;i<n_meas;i++){
    8e58:	2c00      	cmp	r4, #0
    8e5a:	d056      	beq.n	8f0a <calc_mag_stdev+0x16a>
    8e5c:	2600      	movs	r6, #0
    8e5e:	2500      	movs	r5, #0
    8e60:	2300      	movs	r3, #0
    8e62:	4f3b      	ldr	r7, [pc, #236]	; (8f50 <calc_mag_stdev+0x1b0>)
    8e64:	1c30      	adds	r0, r6, #0
		mean = mean+data[i];
    8e66:	aa6a      	add	r2, sp, #424	; 0x1a8
    8e68:	4694      	mov	ip, r2
    8e6a:	009b      	lsls	r3, r3, #2
    8e6c:	4463      	add	r3, ip
    8e6e:	3b91      	subs	r3, #145	; 0x91
    8e70:	3bff      	subs	r3, #255	; 0xff
	for (i=0;i<n_meas;i++){
    8e72:	3501      	adds	r5, #1
		mean = mean+data[i];
    8e74:	6819      	ldr	r1, [r3, #0]
	for (i=0;i<n_meas;i++){
    8e76:	b2ed      	uxtb	r5, r5
		mean = mean+data[i];
    8e78:	47b8      	blx	r7
	for (i=0;i<n_meas;i++){
    8e7a:	002b      	movs	r3, r5
    8e7c:	42ac      	cmp	r4, r5
    8e7e:	d8f2      	bhi.n	8e66 <calc_mag_stdev+0xc6>
    8e80:	1c06      	adds	r6, r0, #0
    8e82:	4b34      	ldr	r3, [pc, #208]	; (8f54 <calc_mag_stdev+0x1b4>)
    8e84:	1e60      	subs	r0, r4, #1
    8e86:	4798      	blx	r3
	}
	mean = mean/n_meas;
    8e88:	4b33      	ldr	r3, [pc, #204]	; (8f58 <calc_mag_stdev+0x1b8>)
    8e8a:	9004      	str	r0, [sp, #16]
    8e8c:	9105      	str	r1, [sp, #20]
    8e8e:	0020      	movs	r0, r4
    8e90:	4798      	blx	r3
    8e92:	4b32      	ldr	r3, [pc, #200]	; (8f5c <calc_mag_stdev+0x1bc>)
    8e94:	1c01      	adds	r1, r0, #0
    8e96:	1c30      	adds	r0, r6, #0
    8e98:	4798      	blx	r3
	mean = meanArr(data, n_meas);
    8e9a:	47d0      	blx	sl
    8e9c:	2500      	movs	r5, #0
    8e9e:	4a30      	ldr	r2, [pc, #192]	; (8f60 <calc_mag_stdev+0x1c0>)
    8ea0:	2600      	movs	r6, #0
    8ea2:	2700      	movs	r7, #0
    8ea4:	2300      	movs	r3, #0
    8ea6:	4690      	mov	r8, r2
    8ea8:	9000      	str	r0, [sp, #0]
    8eaa:	9101      	str	r1, [sp, #4]
    8eac:	46a1      	mov	r9, r4
    8eae:	002c      	movs	r4, r5
    8eb0:	4d25      	ldr	r5, [pc, #148]	; (8f48 <calc_mag_stdev+0x1a8>)
		sumsq = sumsq+pow((data[i]-mean),2);
    8eb2:	aa6a      	add	r2, sp, #424	; 0x1a8
    8eb4:	4694      	mov	ip, r2
    8eb6:	009b      	lsls	r3, r3, #2
    8eb8:	4463      	add	r3, ip
    8eba:	3b91      	subs	r3, #145	; 0x91
    8ebc:	3bff      	subs	r3, #255	; 0xff
    8ebe:	6818      	ldr	r0, [r3, #0]
    8ec0:	47d0      	blx	sl
    8ec2:	9a00      	ldr	r2, [sp, #0]
    8ec4:	9b01      	ldr	r3, [sp, #4]
    8ec6:	47c0      	blx	r8
    8ec8:	0002      	movs	r2, r0
    8eca:	000b      	movs	r3, r1
    8ecc:	47d8      	blx	fp
    8ece:	0002      	movs	r2, r0
    8ed0:	000b      	movs	r3, r1
    8ed2:	0030      	movs	r0, r6
    8ed4:	0039      	movs	r1, r7
    8ed6:	47a8      	blx	r5
	for (i=0;i<n_meas;i++){
    8ed8:	464a      	mov	r2, r9
    8eda:	3401      	adds	r4, #1
    8edc:	b2e4      	uxtb	r4, r4
		sumsq = sumsq+pow((data[i]-mean),2);
    8ede:	0006      	movs	r6, r0
    8ee0:	000f      	movs	r7, r1
	for (i=0;i<n_meas;i++){
    8ee2:	0023      	movs	r3, r4
    8ee4:	42a2      	cmp	r2, r4
    8ee6:	d8e4      	bhi.n	8eb2 <calc_mag_stdev+0x112>
    8ee8:	9a04      	ldr	r2, [sp, #16]
    8eea:	9b05      	ldr	r3, [sp, #20]
	sumsq = sumsq/(n_meas-1);
    8eec:	4c1d      	ldr	r4, [pc, #116]	; (8f64 <calc_mag_stdev+0x1c4>)
    8eee:	0030      	movs	r0, r6
    8ef0:	0039      	movs	r1, r7
    8ef2:	47a0      	blx	r4
	sumsq = sqrt(sumsq);
    8ef4:	9b02      	ldr	r3, [sp, #8]
    8ef6:	4798      	blx	r3
	return sumsq;
    8ef8:	9b03      	ldr	r3, [sp, #12]
    8efa:	4798      	blx	r3
}
    8efc:	b06b      	add	sp, #428	; 0x1ac
    8efe:	bc3c      	pop	{r2, r3, r4, r5}
    8f00:	4690      	mov	r8, r2
    8f02:	4699      	mov	r9, r3
    8f04:	46a2      	mov	sl, r4
    8f06:	46ab      	mov	fp, r5
    8f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8f0a:	4b17      	ldr	r3, [pc, #92]	; (8f68 <calc_mag_stdev+0x1c8>)
    8f0c:	4c17      	ldr	r4, [pc, #92]	; (8f6c <calc_mag_stdev+0x1cc>)
    8f0e:	001a      	movs	r2, r3
    8f10:	9304      	str	r3, [sp, #16]
    8f12:	9405      	str	r4, [sp, #20]
	sumsq = 0;
    8f14:	2600      	movs	r6, #0
    8f16:	2700      	movs	r7, #0
    8f18:	0023      	movs	r3, r4
    8f1a:	e7e7      	b.n	8eec <calc_mag_stdev+0x14c>
	for (p=0;p<nPoints;p++){
    8f1c:	4b12      	ldr	r3, [pc, #72]	; (8f68 <calc_mag_stdev+0x1c8>)
    8f1e:	4c13      	ldr	r4, [pc, #76]	; (8f6c <calc_mag_stdev+0x1cc>)
	sumsq = 0;
    8f20:	2600      	movs	r6, #0
	for (p=0;p<nPoints;p++){
    8f22:	9304      	str	r3, [sp, #16]
    8f24:	9405      	str	r4, [sp, #20]
    8f26:	4b06      	ldr	r3, [pc, #24]	; (8f40 <calc_mag_stdev+0x1a0>)
	sumsq = 0;
    8f28:	2700      	movs	r7, #0
    8f2a:	9302      	str	r3, [sp, #8]
    8f2c:	4b05      	ldr	r3, [pc, #20]	; (8f44 <calc_mag_stdev+0x1a4>)
    8f2e:	9303      	str	r3, [sp, #12]
    8f30:	e7da      	b.n	8ee8 <calc_mag_stdev+0x148>
    8f32:	46c0      	nop			; (mov r8, r8)
    8f34:	20003340 	.word	0x20003340
    8f38:	0001fb6d 	.word	0x0001fb6d
    8f3c:	0001eea5 	.word	0x0001eea5
    8f40:	0001a745 	.word	0x0001a745
    8f44:	0001fc11 	.word	0x0001fc11
    8f48:	0001e01d 	.word	0x0001e01d
    8f4c:	0001db79 	.word	0x0001db79
    8f50:	0001d235 	.word	0x0001d235
    8f54:	0001fafd 	.word	0x0001fafd
    8f58:	0001df91 	.word	0x0001df91
    8f5c:	0001d559 	.word	0x0001d559
    8f60:	0001f3a5 	.word	0x0001f3a5
    8f64:	0001e63d 	.word	0x0001e63d
    8f68:	ffe00000 	.word	0xffe00000
    8f6c:	41efffff 	.word	0x41efffff

00008f70 <calc_disp_stdev>:
float calc_disp_stdev(float XYZ1[NBUFF][3], float XYZ2[NBUFF][3], uint8_t axis){
    8f70:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f72:	4657      	mov	r7, sl
    8f74:	46de      	mov	lr, fp
    8f76:	464e      	mov	r6, r9
    8f78:	4645      	mov	r5, r8
    8f7a:	b5e0      	push	{r5, r6, r7, lr}
	for (p=0;p<nPoints;p++){
    8f7c:	4b40      	ldr	r3, [pc, #256]	; (9080 <calc_disp_stdev+0x110>)
float calc_disp_stdev(float XYZ1[NBUFF][3], float XYZ2[NBUFF][3], uint8_t axis){
    8f7e:	b0e9      	sub	sp, #420	; 0x1a4
	for (p=0;p<nPoints;p++){
    8f80:	681b      	ldr	r3, [r3, #0]
    8f82:	469a      	mov	sl, r3
    8f84:	2b00      	cmp	r3, #0
    8f86:	d100      	bne.n	8f8a <calc_disp_stdev+0x1a>
    8f88:	e070      	b.n	906c <calc_disp_stdev+0xfc>
    8f8a:	005f      	lsls	r7, r3, #1
    8f8c:	4457      	add	r7, sl
    8f8e:	00bf      	lsls	r7, r7, #2
    8f90:	4688      	mov	r8, r1
    8f92:	003b      	movs	r3, r7
    8f94:	0092      	lsls	r2, r2, #2
    8f96:	4490      	add	r8, r2
    8f98:	4681      	mov	r9, r0
    8f9a:	4647      	mov	r7, r8
    8f9c:	2400      	movs	r4, #0
    8f9e:	4698      	mov	r8, r3
    8fa0:	4d38      	ldr	r5, [pc, #224]	; (9084 <calc_disp_stdev+0x114>)
    8fa2:	ae04      	add	r6, sp, #16
    8fa4:	4491      	add	r9, r2
		err_disp[p] =  XYZ1[p][axis]-XYZ2[p][axis];
    8fa6:	464b      	mov	r3, r9
    8fa8:	5939      	ldr	r1, [r7, r4]
    8faa:	5918      	ldr	r0, [r3, r4]
    8fac:	47a8      	blx	r5
    8fae:	340c      	adds	r4, #12
    8fb0:	c601      	stmia	r6!, {r0}
	for (p=0;p<nPoints;p++){
    8fb2:	45a0      	cmp	r8, r4
    8fb4:	d1f7      	bne.n	8fa6 <calc_disp_stdev+0x36>
    8fb6:	2400      	movs	r4, #0
    8fb8:	2600      	movs	r6, #0
    8fba:	2300      	movs	r3, #0
    8fbc:	4655      	mov	r5, sl
    8fbe:	4f32      	ldr	r7, [pc, #200]	; (9088 <calc_disp_stdev+0x118>)
    8fc0:	1c20      	adds	r0, r4, #0
		mean = mean+data[i];
    8fc2:	aa68      	add	r2, sp, #416	; 0x1a0
    8fc4:	4694      	mov	ip, r2
    8fc6:	009b      	lsls	r3, r3, #2
    8fc8:	4463      	add	r3, ip
    8fca:	3b91      	subs	r3, #145	; 0x91
    8fcc:	3bff      	subs	r3, #255	; 0xff
	for (i=0;i<n_meas;i++){
    8fce:	3601      	adds	r6, #1
		mean = mean+data[i];
    8fd0:	6819      	ldr	r1, [r3, #0]
	for (i=0;i<n_meas;i++){
    8fd2:	b2f6      	uxtb	r6, r6
		mean = mean+data[i];
    8fd4:	47b8      	blx	r7
	for (i=0;i<n_meas;i++){
    8fd6:	0033      	movs	r3, r6
    8fd8:	42ae      	cmp	r6, r5
    8fda:	d3f2      	bcc.n	8fc2 <calc_disp_stdev+0x52>
    8fdc:	4655      	mov	r5, sl
    8fde:	1c04      	adds	r4, r0, #0
    8fe0:	4b2a      	ldr	r3, [pc, #168]	; (908c <calc_disp_stdev+0x11c>)
    8fe2:	1e68      	subs	r0, r5, #1
    8fe4:	4798      	blx	r3
	mean = mean/n_meas;
    8fe6:	4b2a      	ldr	r3, [pc, #168]	; (9090 <calc_disp_stdev+0x120>)
    8fe8:	9002      	str	r0, [sp, #8]
    8fea:	9103      	str	r1, [sp, #12]
    8fec:	4650      	mov	r0, sl
    8fee:	4798      	blx	r3
    8ff0:	4b28      	ldr	r3, [pc, #160]	; (9094 <calc_disp_stdev+0x124>)
    8ff2:	1c01      	adds	r1, r0, #0
    8ff4:	1c20      	adds	r0, r4, #0
    8ff6:	4798      	blx	r3
	mean = meanArr(data, n_meas);
    8ff8:	4a27      	ldr	r2, [pc, #156]	; (9098 <calc_disp_stdev+0x128>)
    8ffa:	2400      	movs	r4, #0
    8ffc:	4690      	mov	r8, r2
    8ffe:	4790      	blx	r2
    9000:	4a26      	ldr	r2, [pc, #152]	; (909c <calc_disp_stdev+0x12c>)
    9002:	2600      	movs	r6, #0
    9004:	4693      	mov	fp, r2
    9006:	4a26      	ldr	r2, [pc, #152]	; (90a0 <calc_disp_stdev+0x130>)
    9008:	2700      	movs	r7, #0
    900a:	4692      	mov	sl, r2
    900c:	4a25      	ldr	r2, [pc, #148]	; (90a4 <calc_disp_stdev+0x134>)
    900e:	2300      	movs	r3, #0
    9010:	4691      	mov	r9, r2
    9012:	9000      	str	r0, [sp, #0]
    9014:	9101      	str	r1, [sp, #4]
		sumsq = sumsq+pow((data[i]-mean),2);
    9016:	aa68      	add	r2, sp, #416	; 0x1a0
    9018:	4694      	mov	ip, r2
    901a:	009b      	lsls	r3, r3, #2
    901c:	4463      	add	r3, ip
    901e:	3b91      	subs	r3, #145	; 0x91
    9020:	3bff      	subs	r3, #255	; 0xff
    9022:	6818      	ldr	r0, [r3, #0]
    9024:	47c0      	blx	r8
    9026:	9a00      	ldr	r2, [sp, #0]
    9028:	9b01      	ldr	r3, [sp, #4]
    902a:	47d8      	blx	fp
    902c:	0002      	movs	r2, r0
    902e:	000b      	movs	r3, r1
    9030:	47d0      	blx	sl
    9032:	000b      	movs	r3, r1
    9034:	0002      	movs	r2, r0
    9036:	0039      	movs	r1, r7
    9038:	0030      	movs	r0, r6
    903a:	47c8      	blx	r9
	for (i=0;i<n_meas;i++){
    903c:	3401      	adds	r4, #1
    903e:	b2e4      	uxtb	r4, r4
		sumsq = sumsq+pow((data[i]-mean),2);
    9040:	0006      	movs	r6, r0
    9042:	000f      	movs	r7, r1
	for (i=0;i<n_meas;i++){
    9044:	0023      	movs	r3, r4
    9046:	42ac      	cmp	r4, r5
    9048:	d3e5      	bcc.n	9016 <calc_disp_stdev+0xa6>
    904a:	9a02      	ldr	r2, [sp, #8]
    904c:	9b03      	ldr	r3, [sp, #12]
	sumsq = sumsq/(n_meas-1);
    904e:	4c16      	ldr	r4, [pc, #88]	; (90a8 <calc_disp_stdev+0x138>)
    9050:	0030      	movs	r0, r6
    9052:	0039      	movs	r1, r7
    9054:	47a0      	blx	r4
	sumsq = sqrt(sumsq);
    9056:	4b15      	ldr	r3, [pc, #84]	; (90ac <calc_disp_stdev+0x13c>)
    9058:	4798      	blx	r3
	return sumsq;
    905a:	4b15      	ldr	r3, [pc, #84]	; (90b0 <calc_disp_stdev+0x140>)
    905c:	4798      	blx	r3
}
    905e:	b069      	add	sp, #420	; 0x1a4
    9060:	bc3c      	pop	{r2, r3, r4, r5}
    9062:	4690      	mov	r8, r2
    9064:	4699      	mov	r9, r3
    9066:	46a2      	mov	sl, r4
    9068:	46ab      	mov	fp, r5
    906a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (p=0;p<nPoints;p++){
    906c:	4b11      	ldr	r3, [pc, #68]	; (90b4 <calc_disp_stdev+0x144>)
    906e:	4c12      	ldr	r4, [pc, #72]	; (90b8 <calc_disp_stdev+0x148>)
    9070:	001a      	movs	r2, r3
    9072:	9302      	str	r3, [sp, #8]
    9074:	9403      	str	r4, [sp, #12]
	sumsq = 0;
    9076:	2600      	movs	r6, #0
    9078:	2700      	movs	r7, #0
    907a:	0023      	movs	r3, r4
    907c:	e7e7      	b.n	904e <calc_disp_stdev+0xde>
    907e:	46c0      	nop			; (mov r8, r8)
    9080:	20003340 	.word	0x20003340
    9084:	0001db79 	.word	0x0001db79
    9088:	0001d235 	.word	0x0001d235
    908c:	0001fafd 	.word	0x0001fafd
    9090:	0001df91 	.word	0x0001df91
    9094:	0001d559 	.word	0x0001d559
    9098:	0001fb6d 	.word	0x0001fb6d
    909c:	0001f3a5 	.word	0x0001f3a5
    90a0:	0001eea5 	.word	0x0001eea5
    90a4:	0001e01d 	.word	0x0001e01d
    90a8:	0001e63d 	.word	0x0001e63d
    90ac:	0001a745 	.word	0x0001a745
    90b0:	0001fc11 	.word	0x0001fc11
    90b4:	ffe00000 	.word	0xffe00000
    90b8:	41efffff 	.word	0x41efffff

000090bc <rotvec_theta_XY>:
void rotvec_theta_XY(float XYZ[3], float rotXYZ[3], float thetaX, float thetaY){
    90bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    90be:	46de      	mov	lr, fp
    90c0:	4657      	mov	r7, sl
    90c2:	464e      	mov	r6, r9
    90c4:	4645      	mov	r5, r8
    90c6:	b5e0      	push	{r5, r6, r7, lr}
    90c8:	b087      	sub	sp, #28
    90ca:	9305      	str	r3, [sp, #20]
	rthetaX = thetaX*DEG2RAD;
    90cc:	4d4f      	ldr	r5, [pc, #316]	; (920c <rotvec_theta_XY+0x150>)
void rotvec_theta_XY(float XYZ[3], float rotXYZ[3], float thetaX, float thetaY){
    90ce:	0004      	movs	r4, r0
    90d0:	468a      	mov	sl, r1
	rthetaX = thetaX*DEG2RAD;
    90d2:	1c10      	adds	r0, r2, #0
    90d4:	494e      	ldr	r1, [pc, #312]	; (9210 <rotvec_theta_XY+0x154>)
    90d6:	47a8      	blx	r5
	rotM[1][1] = cos(rthetaX);
    90d8:	4a4e      	ldr	r2, [pc, #312]	; (9214 <rotvec_theta_XY+0x158>)
    90da:	4790      	blx	r2
    90dc:	4a4e      	ldr	r2, [pc, #312]	; (9218 <rotvec_theta_XY+0x15c>)
    90de:	0006      	movs	r6, r0
    90e0:	000f      	movs	r7, r1
    90e2:	4790      	blx	r2
    90e4:	4a4d      	ldr	r2, [pc, #308]	; (921c <rotvec_theta_XY+0x160>)
    90e6:	4693      	mov	fp, r2
    90e8:	4790      	blx	r2
	rotM[1][2] = -1*sin(rthetaX);
    90ea:	4a4d      	ldr	r2, [pc, #308]	; (9220 <rotvec_theta_XY+0x164>)
	rotM[1][1] = cos(rthetaX);
    90ec:	9002      	str	r0, [sp, #8]
	rotM[1][2] = -1*sin(rthetaX);
    90ee:	0039      	movs	r1, r7
    90f0:	0030      	movs	r0, r6
    90f2:	4790      	blx	r2
    90f4:	47d8      	blx	fp
    90f6:	6867      	ldr	r7, [r4, #4]
    90f8:	6822      	ldr	r2, [r4, #0]
    90fa:	9003      	str	r0, [sp, #12]
			temp[i] = temp[i]+mat33[i][j]*mat3[j];
    90fc:	2100      	movs	r1, #0
    90fe:	1c38      	adds	r0, r7, #0
    9100:	4690      	mov	r8, r2
    9102:	47a8      	blx	r5
    9104:	68a6      	ldr	r6, [r4, #8]
    9106:	4681      	mov	r9, r0
    9108:	4c46      	ldr	r4, [pc, #280]	; (9224 <rotvec_theta_XY+0x168>)
    910a:	2100      	movs	r1, #0
    910c:	4640      	mov	r0, r8
    910e:	47a0      	blx	r4
    9110:	1c01      	adds	r1, r0, #0
    9112:	4648      	mov	r0, r9
    9114:	47a0      	blx	r4
    9116:	2100      	movs	r1, #0
    9118:	4681      	mov	r9, r0
    911a:	1c30      	adds	r0, r6, #0
    911c:	47a8      	blx	r5
    911e:	1c01      	adds	r1, r0, #0
    9120:	4648      	mov	r0, r9
    9122:	47a0      	blx	r4
    9124:	2100      	movs	r1, #0
    9126:	9001      	str	r0, [sp, #4]
    9128:	4640      	mov	r0, r8
    912a:	47a8      	blx	r5
    912c:	2100      	movs	r1, #0
    912e:	47a0      	blx	r4
	rotM[1][2] = -1*sin(rthetaX);
    9130:	2180      	movs	r1, #128	; 0x80
    9132:	0609      	lsls	r1, r1, #24
    9134:	468c      	mov	ip, r1
    9136:	9a03      	ldr	r2, [sp, #12]
			temp[i] = temp[i]+mat33[i][j]*mat3[j];
    9138:	4680      	mov	r8, r0
	rotM[1][2] = -1*sin(rthetaX);
    913a:	4462      	add	r2, ip
    913c:	0010      	movs	r0, r2
			temp[i] = temp[i]+mat33[i][j]*mat3[j];
    913e:	1c31      	adds	r1, r6, #0
    9140:	47a8      	blx	r5
    9142:	1c39      	adds	r1, r7, #0
    9144:	4681      	mov	r9, r0
    9146:	9802      	ldr	r0, [sp, #8]
    9148:	47a8      	blx	r5
    914a:	4641      	mov	r1, r8
    914c:	47a0      	blx	r4
    914e:	1c01      	adds	r1, r0, #0
    9150:	4648      	mov	r0, r9
    9152:	47a0      	blx	r4
    9154:	1c39      	adds	r1, r7, #0
    9156:	9004      	str	r0, [sp, #16]
    9158:	9803      	ldr	r0, [sp, #12]
    915a:	47a8      	blx	r5
    915c:	4641      	mov	r1, r8
    915e:	47a0      	blx	r4
    9160:	1c31      	adds	r1, r6, #0
    9162:	1c07      	adds	r7, r0, #0
    9164:	9802      	ldr	r0, [sp, #8]
    9166:	47a8      	blx	r5
    9168:	1c01      	adds	r1, r0, #0
    916a:	1c38      	adds	r0, r7, #0
    916c:	47a0      	blx	r4
	rthetaY = thetaY*DEG2RAD;
    916e:	4928      	ldr	r1, [pc, #160]	; (9210 <rotvec_theta_XY+0x154>)
			temp[i] = temp[i]+mat33[i][j]*mat3[j];
    9170:	4680      	mov	r8, r0
	rthetaY = thetaY*DEG2RAD;
    9172:	9805      	ldr	r0, [sp, #20]
    9174:	47a8      	blx	r5
	rotM[0][0] = cos(rthetaY);
    9176:	4b27      	ldr	r3, [pc, #156]	; (9214 <rotvec_theta_XY+0x158>)
    9178:	4798      	blx	r3
    917a:	4b27      	ldr	r3, [pc, #156]	; (9218 <rotvec_theta_XY+0x15c>)
    917c:	0006      	movs	r6, r0
    917e:	000f      	movs	r7, r1
    9180:	4798      	blx	r3
    9182:	47d8      	blx	fp
	rotM[0][2] = sin(rthetaY);
    9184:	4b26      	ldr	r3, [pc, #152]	; (9220 <rotvec_theta_XY+0x164>)
	rotM[0][0] = cos(rthetaY);
    9186:	4681      	mov	r9, r0
	rotM[0][2] = sin(rthetaY);
    9188:	0039      	movs	r1, r7
    918a:	0030      	movs	r0, r6
    918c:	4798      	blx	r3
    918e:	47d8      	blx	fp
			temp[i] = temp[i]+mat33[i][j]*mat3[j];
    9190:	2100      	movs	r1, #0
	rotM[0][2] = sin(rthetaY);
    9192:	1c06      	adds	r6, r0, #0
			temp[i] = temp[i]+mat33[i][j]*mat3[j];
    9194:	9804      	ldr	r0, [sp, #16]
    9196:	47a8      	blx	r5
    9198:	9901      	ldr	r1, [sp, #4]
    919a:	1c07      	adds	r7, r0, #0
    919c:	4648      	mov	r0, r9
    919e:	47a8      	blx	r5
    91a0:	2100      	movs	r1, #0
    91a2:	47a0      	blx	r4
    91a4:	1c39      	adds	r1, r7, #0
    91a6:	47a0      	blx	r4
    91a8:	4641      	mov	r1, r8
    91aa:	4683      	mov	fp, r0
    91ac:	1c30      	adds	r0, r6, #0
    91ae:	47a8      	blx	r5
    91b0:	1c01      	adds	r1, r0, #0
    91b2:	4658      	mov	r0, fp
    91b4:	47a0      	blx	r4
		ret3[i] = temp[i];
    91b6:	4653      	mov	r3, sl
			temp[i] = temp[i]+mat33[i][j]*mat3[j];
    91b8:	2100      	movs	r1, #0
		ret3[i] = temp[i];
    91ba:	6018      	str	r0, [r3, #0]
			temp[i] = temp[i]+mat33[i][j]*mat3[j];
    91bc:	9801      	ldr	r0, [sp, #4]
    91be:	47a8      	blx	r5
    91c0:	2100      	movs	r1, #0
    91c2:	47a0      	blx	r4
    91c4:	9904      	ldr	r1, [sp, #16]
    91c6:	47a0      	blx	r4
    91c8:	2100      	movs	r1, #0
    91ca:	4683      	mov	fp, r0
    91cc:	4640      	mov	r0, r8
    91ce:	47a8      	blx	r5
    91d0:	1c01      	adds	r1, r0, #0
    91d2:	4658      	mov	r0, fp
    91d4:	47a0      	blx	r4
		ret3[i] = temp[i];
    91d6:	4653      	mov	r3, sl
    91d8:	6058      	str	r0, [r3, #4]
	rotM[2][0] = -1*sin(rthetaY);
    91da:	2380      	movs	r3, #128	; 0x80
    91dc:	061b      	lsls	r3, r3, #24
    91de:	18f0      	adds	r0, r6, r3
			temp[i] = temp[i]+mat33[i][j]*mat3[j];
    91e0:	9901      	ldr	r1, [sp, #4]
    91e2:	47a8      	blx	r5
    91e4:	2100      	movs	r1, #0
    91e6:	47a0      	blx	r4
    91e8:	1c39      	adds	r1, r7, #0
    91ea:	47a0      	blx	r4
    91ec:	4641      	mov	r1, r8
    91ee:	1c06      	adds	r6, r0, #0
    91f0:	4648      	mov	r0, r9
    91f2:	47a8      	blx	r5
    91f4:	1c01      	adds	r1, r0, #0
    91f6:	1c30      	adds	r0, r6, #0
    91f8:	47a0      	blx	r4
		ret3[i] = temp[i];
    91fa:	4653      	mov	r3, sl
    91fc:	6098      	str	r0, [r3, #8]
}
    91fe:	b007      	add	sp, #28
    9200:	bc3c      	pop	{r2, r3, r4, r5}
    9202:	4690      	mov	r8, r2
    9204:	4699      	mov	r9, r3
    9206:	46a2      	mov	sl, r4
    9208:	46ab      	mov	fp, r5
    920a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    920c:	0001d939 	.word	0x0001d939
    9210:	3c8efa35 	.word	0x3c8efa35
    9214:	0001fb6d 	.word	0x0001fb6d
    9218:	0001a2c9 	.word	0x0001a2c9
    921c:	0001fc11 	.word	0x0001fc11
    9220:	0001a355 	.word	0x0001a355
    9224:	0001d235 	.word	0x0001d235

00009228 <calc_azm_inc_roll_dec>:
void calc_azm_inc_roll_dec(float aXYZ[3], float cXYZ[3], float *azimuthP, float *inclinationP, float *rollP, float *declinationP){
    9228:	b5f0      	push	{r4, r5, r6, r7, lr}
    922a:	46de      	mov	lr, fp
    922c:	4657      	mov	r7, sl
    922e:	464e      	mov	r6, r9
    9230:	4645      	mov	r5, r8
    9232:	4683      	mov	fp, r0
    9234:	b5e0      	push	{r5, r6, r7, lr}
    9236:	b08b      	sub	sp, #44	; 0x2c
    9238:	9205      	str	r2, [sp, #20]
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    923a:	4a57      	ldr	r2, [pc, #348]	; (9398 <calc_azm_inc_roll_dec+0x170>)
void calc_azm_inc_roll_dec(float aXYZ[3], float cXYZ[3], float *azimuthP, float *inclinationP, float *rollP, float *declinationP){
    923c:	9304      	str	r3, [sp, #16]
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    923e:	4690      	mov	r8, r2
    9240:	6840      	ldr	r0, [r0, #4]
void calc_azm_inc_roll_dec(float aXYZ[3], float cXYZ[3], float *azimuthP, float *inclinationP, float *rollP, float *declinationP){
    9242:	9103      	str	r1, [sp, #12]
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    9244:	47c0      	blx	r8
    9246:	465a      	mov	r2, fp
    9248:	0004      	movs	r4, r0
    924a:	6890      	ldr	r0, [r2, #8]
    924c:	000d      	movs	r5, r1
    924e:	47c0      	blx	r8
    9250:	4a52      	ldr	r2, [pc, #328]	; (939c <calc_azm_inc_roll_dec+0x174>)
    9252:	0006      	movs	r6, r0
    9254:	4691      	mov	r9, r2
    9256:	000f      	movs	r7, r1
    9258:	0022      	movs	r2, r4
    925a:	002b      	movs	r3, r5
    925c:	0020      	movs	r0, r4
    925e:	0029      	movs	r1, r5
    9260:	47c8      	blx	r9
    9262:	0032      	movs	r2, r6
    9264:	0004      	movs	r4, r0
    9266:	000d      	movs	r5, r1
    9268:	003b      	movs	r3, r7
    926a:	0030      	movs	r0, r6
    926c:	0039      	movs	r1, r7
    926e:	47c8      	blx	r9
    9270:	000b      	movs	r3, r1
    9272:	0002      	movs	r2, r0
    9274:	0029      	movs	r1, r5
    9276:	0020      	movs	r0, r4
    9278:	4c49      	ldr	r4, [pc, #292]	; (93a0 <calc_azm_inc_roll_dec+0x178>)
    927a:	47a0      	blx	r4
    927c:	4a49      	ldr	r2, [pc, #292]	; (93a4 <calc_azm_inc_roll_dec+0x17c>)
    927e:	4790      	blx	r2
	*thetaX = RAD2DEG*atan2(XYZ[1], XYZ[2]);
    9280:	465a      	mov	r2, fp
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    9282:	9000      	str	r0, [sp, #0]
    9284:	9101      	str	r1, [sp, #4]
	*thetaX = RAD2DEG*atan2(XYZ[1], XYZ[2]);
    9286:	6890      	ldr	r0, [r2, #8]
    9288:	47c0      	blx	r8
    928a:	465a      	mov	r2, fp
    928c:	0004      	movs	r4, r0
    928e:	000d      	movs	r5, r1
    9290:	6850      	ldr	r0, [r2, #4]
    9292:	47c0      	blx	r8
    9294:	0022      	movs	r2, r4
    9296:	002b      	movs	r3, r5
    9298:	4c43      	ldr	r4, [pc, #268]	; (93a8 <calc_azm_inc_roll_dec+0x180>)
    929a:	47a0      	blx	r4
    929c:	4b43      	ldr	r3, [pc, #268]	; (93ac <calc_azm_inc_roll_dec+0x184>)
    929e:	2200      	movs	r2, #0
    92a0:	47c8      	blx	r9
    92a2:	4a43      	ldr	r2, [pc, #268]	; (93b0 <calc_azm_inc_roll_dec+0x188>)
    92a4:	4692      	mov	sl, r2
    92a6:	4790      	blx	r2
    92a8:	1c06      	adds	r6, r0, #0
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    92aa:	9800      	ldr	r0, [sp, #0]
    92ac:	9901      	ldr	r1, [sp, #4]
    92ae:	47d0      	blx	sl
	*thetaY = -1*RAD2DEG*atan2(XYZ[0], ryz);
    92b0:	47c0      	blx	r8
    92b2:	465a      	mov	r2, fp
    92b4:	0004      	movs	r4, r0
    92b6:	000d      	movs	r5, r1
    92b8:	6810      	ldr	r0, [r2, #0]
    92ba:	47c0      	blx	r8
    92bc:	0022      	movs	r2, r4
    92be:	002b      	movs	r3, r5
    92c0:	4c39      	ldr	r4, [pc, #228]	; (93a8 <calc_azm_inc_roll_dec+0x180>)
    92c2:	47a0      	blx	r4
    92c4:	2200      	movs	r2, #0
    92c6:	4b3b      	ldr	r3, [pc, #236]	; (93b4 <calc_azm_inc_roll_dec+0x18c>)
    92c8:	47c8      	blx	r9
    92ca:	47d0      	blx	sl
	*inclinationP = -1*thetaY;
    92cc:	2280      	movs	r2, #128	; 0x80
    92ce:	0612      	lsls	r2, r2, #24
    92d0:	1883      	adds	r3, r0, r2
    92d2:	9a04      	ldr	r2, [sp, #16]
	*thetaY = -1*RAD2DEG*atan2(XYZ[0], ryz);
    92d4:	1c04      	adds	r4, r0, #0
	*inclinationP = -1*thetaY;
    92d6:	6013      	str	r3, [r2, #0]
	if ((*rollP)<0){
    92d8:	4f37      	ldr	r7, [pc, #220]	; (93b8 <calc_azm_inc_roll_dec+0x190>)
    92da:	2100      	movs	r1, #0
    92dc:	1c30      	adds	r0, r6, #0
    92de:	47b8      	blx	r7
    92e0:	2800      	cmp	r0, #0
    92e2:	d152      	bne.n	938a <calc_azm_inc_roll_dec+0x162>
	*rollP = thetaX;
    92e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    92e6:	601e      	str	r6, [r3, #0]
	rotvec_theta_XY(cXYZ, crotXYZ, thetaX, thetaY);
    92e8:	1c23      	adds	r3, r4, #0
    92ea:	1c32      	adds	r2, r6, #0
    92ec:	a907      	add	r1, sp, #28
    92ee:	9803      	ldr	r0, [sp, #12]
    92f0:	4c32      	ldr	r4, [pc, #200]	; (93bc <calc_azm_inc_roll_dec+0x194>)
    92f2:	47a0      	blx	r4
	*azimuthP = RAD2DEG*atan2(crotXYZ[1], crotXYZ[0]);
    92f4:	9807      	ldr	r0, [sp, #28]
    92f6:	47c0      	blx	r8
    92f8:	0004      	movs	r4, r0
    92fa:	000d      	movs	r5, r1
    92fc:	9808      	ldr	r0, [sp, #32]
    92fe:	47c0      	blx	r8
    9300:	0022      	movs	r2, r4
    9302:	002b      	movs	r3, r5
    9304:	4c28      	ldr	r4, [pc, #160]	; (93a8 <calc_azm_inc_roll_dec+0x180>)
    9306:	47a0      	blx	r4
    9308:	2200      	movs	r2, #0
    930a:	4b28      	ldr	r3, [pc, #160]	; (93ac <calc_azm_inc_roll_dec+0x184>)
    930c:	47c8      	blx	r9
    930e:	47d0      	blx	sl
	if ((*azimuthP)<0){
    9310:	2100      	movs	r1, #0
	*azimuthP = RAD2DEG*atan2(crotXYZ[1], crotXYZ[0]);
    9312:	1c04      	adds	r4, r0, #0
	if ((*azimuthP)<0){
    9314:	47b8      	blx	r7
    9316:	2800      	cmp	r0, #0
    9318:	d130      	bne.n	937c <calc_azm_inc_roll_dec+0x154>
	*azimuthP = RAD2DEG*atan2(crotXYZ[1], crotXYZ[0]);
    931a:	9b05      	ldr	r3, [sp, #20]
    931c:	601c      	str	r4, [r3, #0]
	crxy= sqrt(pow(crotXYZ[0],2)+pow(crotXYZ[1],2));
    931e:	9807      	ldr	r0, [sp, #28]
    9320:	47c0      	blx	r8
    9322:	0004      	movs	r4, r0
    9324:	9808      	ldr	r0, [sp, #32]
    9326:	000d      	movs	r5, r1
    9328:	47c0      	blx	r8
    932a:	0002      	movs	r2, r0
    932c:	000b      	movs	r3, r1
    932e:	47c8      	blx	r9
    9330:	0022      	movs	r2, r4
    9332:	0006      	movs	r6, r0
    9334:	000f      	movs	r7, r1
    9336:	002b      	movs	r3, r5
    9338:	0020      	movs	r0, r4
    933a:	0029      	movs	r1, r5
    933c:	47c8      	blx	r9
    933e:	4c18      	ldr	r4, [pc, #96]	; (93a0 <calc_azm_inc_roll_dec+0x178>)
    9340:	0002      	movs	r2, r0
    9342:	000b      	movs	r3, r1
    9344:	0030      	movs	r0, r6
    9346:	0039      	movs	r1, r7
    9348:	47a0      	blx	r4
    934a:	4b16      	ldr	r3, [pc, #88]	; (93a4 <calc_azm_inc_roll_dec+0x17c>)
    934c:	4798      	blx	r3
    934e:	47d0      	blx	sl
	*declinationP = RAD2DEG*atan2(crotXYZ[2], crxy);
    9350:	47c0      	blx	r8
    9352:	0004      	movs	r4, r0
    9354:	000d      	movs	r5, r1
    9356:	9809      	ldr	r0, [sp, #36]	; 0x24
    9358:	47c0      	blx	r8
    935a:	0022      	movs	r2, r4
    935c:	002b      	movs	r3, r5
    935e:	4c12      	ldr	r4, [pc, #72]	; (93a8 <calc_azm_inc_roll_dec+0x180>)
    9360:	47a0      	blx	r4
    9362:	2200      	movs	r2, #0
    9364:	4b11      	ldr	r3, [pc, #68]	; (93ac <calc_azm_inc_roll_dec+0x184>)
    9366:	47c8      	blx	r9
    9368:	47d0      	blx	sl
    936a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    936c:	6018      	str	r0, [r3, #0]
}
    936e:	b00b      	add	sp, #44	; 0x2c
    9370:	bc3c      	pop	{r2, r3, r4, r5}
    9372:	4690      	mov	r8, r2
    9374:	4699      	mov	r9, r3
    9376:	46a2      	mov	sl, r4
    9378:	46ab      	mov	fp, r5
    937a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*azimuthP = *azimuthP+360;
    937c:	4b10      	ldr	r3, [pc, #64]	; (93c0 <calc_azm_inc_roll_dec+0x198>)
    937e:	4911      	ldr	r1, [pc, #68]	; (93c4 <calc_azm_inc_roll_dec+0x19c>)
    9380:	1c20      	adds	r0, r4, #0
    9382:	4798      	blx	r3
    9384:	9b05      	ldr	r3, [sp, #20]
    9386:	6018      	str	r0, [r3, #0]
    9388:	e7c9      	b.n	931e <calc_azm_inc_roll_dec+0xf6>
		*rollP = *rollP+360;
    938a:	4b0d      	ldr	r3, [pc, #52]	; (93c0 <calc_azm_inc_roll_dec+0x198>)
    938c:	490d      	ldr	r1, [pc, #52]	; (93c4 <calc_azm_inc_roll_dec+0x19c>)
    938e:	1c30      	adds	r0, r6, #0
    9390:	4798      	blx	r3
    9392:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9394:	6018      	str	r0, [r3, #0]
    9396:	e7a7      	b.n	92e8 <calc_azm_inc_roll_dec+0xc0>
    9398:	0001fb6d 	.word	0x0001fb6d
    939c:	0001eea5 	.word	0x0001eea5
    93a0:	0001e01d 	.word	0x0001e01d
    93a4:	0001a745 	.word	0x0001a745
    93a8:	0001a3e5 	.word	0x0001a3e5
    93ac:	404ca5dc 	.word	0x404ca5dc
    93b0:	0001fc11 	.word	0x0001fc11
    93b4:	c04ca5dc 	.word	0xc04ca5dc
    93b8:	0001d0a9 	.word	0x0001d0a9
    93bc:	000090bd 	.word	0x000090bd
    93c0:	0001d235 	.word	0x0001d235
    93c4:	43b40000 	.word	0x43b40000

000093c8 <calc_orientation>:
void calc_orientation(struct MEASUREMENT *meas_inst){
    93c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    93ca:	46de      	mov	lr, fp
    93cc:	4657      	mov	r7, sl
    93ce:	464e      	mov	r6, r9
    93d0:	4645      	mov	r5, r8
    93d2:	b5e0      	push	{r5, r6, r7, lr}
    93d4:	4680      	mov	r8, r0
    93d6:	b08d      	sub	sp, #52	; 0x34
		aXYZ[i] = 0.5*(meas_inst->a1Cal[i]+meas_inst->a2Cal[i]);
    93d8:	6d41      	ldr	r1, [r0, #84]	; 0x54
    93da:	4b6d      	ldr	r3, [pc, #436]	; (9590 <calc_orientation+0x1c8>)
    93dc:	6e00      	ldr	r0, [r0, #96]	; 0x60
    93de:	4798      	blx	r3
    93e0:	21fc      	movs	r1, #252	; 0xfc
    93e2:	4c6c      	ldr	r4, [pc, #432]	; (9594 <calc_orientation+0x1cc>)
    93e4:	0589      	lsls	r1, r1, #22
    93e6:	47a0      	blx	r4
		cXYZ[i] = 0.5*(meas_inst->m1Cal[i]+meas_inst->m2Cal[i]);
    93e8:	4643      	mov	r3, r8
		aXYZ[i] = 0.5*(meas_inst->a1Cal[i]+meas_inst->a2Cal[i]);
    93ea:	9005      	str	r0, [sp, #20]
		cXYZ[i] = 0.5*(meas_inst->m1Cal[i]+meas_inst->m2Cal[i]);
    93ec:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
    93ee:	6f98      	ldr	r0, [r3, #120]	; 0x78
    93f0:	4b67      	ldr	r3, [pc, #412]	; (9590 <calc_orientation+0x1c8>)
    93f2:	4798      	blx	r3
    93f4:	21fc      	movs	r1, #252	; 0xfc
    93f6:	0589      	lsls	r1, r1, #22
    93f8:	47a0      	blx	r4
		aXYZ[i] = 0.5*(meas_inst->a1Cal[i]+meas_inst->a2Cal[i]);
    93fa:	4643      	mov	r3, r8
		cXYZ[i] = 0.5*(meas_inst->m1Cal[i]+meas_inst->m2Cal[i]);
    93fc:	9006      	str	r0, [sp, #24]
		aXYZ[i] = 0.5*(meas_inst->a1Cal[i]+meas_inst->a2Cal[i]);
    93fe:	6e59      	ldr	r1, [r3, #100]	; 0x64
    9400:	6d98      	ldr	r0, [r3, #88]	; 0x58
    9402:	4b63      	ldr	r3, [pc, #396]	; (9590 <calc_orientation+0x1c8>)
    9404:	4798      	blx	r3
    9406:	21fc      	movs	r1, #252	; 0xfc
    9408:	0589      	lsls	r1, r1, #22
    940a:	47a0      	blx	r4
		cXYZ[i] = 0.5*(meas_inst->m1Cal[i]+meas_inst->m2Cal[i]);
    940c:	4643      	mov	r3, r8
		aXYZ[i] = 0.5*(meas_inst->a1Cal[i]+meas_inst->a2Cal[i]);
    940e:	1c05      	adds	r5, r0, #0
		cXYZ[i] = 0.5*(meas_inst->m1Cal[i]+meas_inst->m2Cal[i]);
    9410:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
    9412:	6f18      	ldr	r0, [r3, #112]	; 0x70
    9414:	4b5e      	ldr	r3, [pc, #376]	; (9590 <calc_orientation+0x1c8>)
    9416:	4798      	blx	r3
    9418:	21fc      	movs	r1, #252	; 0xfc
    941a:	0589      	lsls	r1, r1, #22
    941c:	47a0      	blx	r4
		aXYZ[i] = 0.5*(meas_inst->a1Cal[i]+meas_inst->a2Cal[i]);
    941e:	4643      	mov	r3, r8
		cXYZ[i] = 0.5*(meas_inst->m1Cal[i]+meas_inst->m2Cal[i]);
    9420:	9007      	str	r0, [sp, #28]
		aXYZ[i] = 0.5*(meas_inst->a1Cal[i]+meas_inst->a2Cal[i]);
    9422:	6e99      	ldr	r1, [r3, #104]	; 0x68
    9424:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
    9426:	4b5a      	ldr	r3, [pc, #360]	; (9590 <calc_orientation+0x1c8>)
    9428:	4798      	blx	r3
    942a:	21fc      	movs	r1, #252	; 0xfc
    942c:	0589      	lsls	r1, r1, #22
    942e:	47a0      	blx	r4
		cXYZ[i] = 0.5*(meas_inst->m1Cal[i]+meas_inst->m2Cal[i]);
    9430:	4642      	mov	r2, r8
    9432:	2380      	movs	r3, #128	; 0x80
		aXYZ[i] = 0.5*(meas_inst->a1Cal[i]+meas_inst->a2Cal[i]);
    9434:	1c06      	adds	r6, r0, #0
		cXYZ[i] = 0.5*(meas_inst->m1Cal[i]+meas_inst->m2Cal[i]);
    9436:	58d1      	ldr	r1, [r2, r3]
    9438:	6f50      	ldr	r0, [r2, #116]	; 0x74
    943a:	4b55      	ldr	r3, [pc, #340]	; (9590 <calc_orientation+0x1c8>)
    943c:	4798      	blx	r3
    943e:	21fc      	movs	r1, #252	; 0xfc
    9440:	0589      	lsls	r1, r1, #22
    9442:	47a0      	blx	r4
    9444:	9008      	str	r0, [sp, #32]
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    9446:	4b54      	ldr	r3, [pc, #336]	; (9598 <calc_orientation+0x1d0>)
    9448:	1c28      	adds	r0, r5, #0
    944a:	4699      	mov	r9, r3
    944c:	4798      	blx	r3
    944e:	9000      	str	r0, [sp, #0]
    9450:	9101      	str	r1, [sp, #4]
    9452:	1c30      	adds	r0, r6, #0
    9454:	47c8      	blx	r9
    9456:	4b51      	ldr	r3, [pc, #324]	; (959c <calc_orientation+0x1d4>)
    9458:	0006      	movs	r6, r0
    945a:	000f      	movs	r7, r1
    945c:	469a      	mov	sl, r3
    945e:	9a00      	ldr	r2, [sp, #0]
    9460:	9b01      	ldr	r3, [sp, #4]
    9462:	0010      	movs	r0, r2
    9464:	0019      	movs	r1, r3
    9466:	47d0      	blx	sl
    9468:	0032      	movs	r2, r6
    946a:	0004      	movs	r4, r0
    946c:	000d      	movs	r5, r1
    946e:	003b      	movs	r3, r7
    9470:	0030      	movs	r0, r6
    9472:	0039      	movs	r1, r7
    9474:	47d0      	blx	sl
    9476:	0002      	movs	r2, r0
    9478:	000b      	movs	r3, r1
    947a:	0020      	movs	r0, r4
    947c:	0029      	movs	r1, r5
    947e:	4c48      	ldr	r4, [pc, #288]	; (95a0 <calc_orientation+0x1d8>)
    9480:	47a0      	blx	r4
    9482:	4b48      	ldr	r3, [pc, #288]	; (95a4 <calc_orientation+0x1dc>)
    9484:	4798      	blx	r3
	*thetaX = RAD2DEG*atan2(XYZ[1], XYZ[2]);
    9486:	0032      	movs	r2, r6
    9488:	003b      	movs	r3, r7
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    948a:	9002      	str	r0, [sp, #8]
    948c:	9103      	str	r1, [sp, #12]
	*thetaX = RAD2DEG*atan2(XYZ[1], XYZ[2]);
    948e:	9800      	ldr	r0, [sp, #0]
    9490:	9901      	ldr	r1, [sp, #4]
    9492:	4c45      	ldr	r4, [pc, #276]	; (95a8 <calc_orientation+0x1e0>)
    9494:	47a0      	blx	r4
    9496:	2200      	movs	r2, #0
    9498:	4b44      	ldr	r3, [pc, #272]	; (95ac <calc_orientation+0x1e4>)
    949a:	47d0      	blx	sl
    949c:	4b44      	ldr	r3, [pc, #272]	; (95b0 <calc_orientation+0x1e8>)
    949e:	469b      	mov	fp, r3
    94a0:	4798      	blx	r3
    94a2:	1c06      	adds	r6, r0, #0
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    94a4:	9802      	ldr	r0, [sp, #8]
    94a6:	9903      	ldr	r1, [sp, #12]
    94a8:	47d8      	blx	fp
	*thetaY = -1*RAD2DEG*atan2(XYZ[0], ryz);
    94aa:	47c8      	blx	r9
    94ac:	0004      	movs	r4, r0
    94ae:	000d      	movs	r5, r1
    94b0:	9805      	ldr	r0, [sp, #20]
    94b2:	47c8      	blx	r9
    94b4:	0022      	movs	r2, r4
    94b6:	002b      	movs	r3, r5
    94b8:	4c3b      	ldr	r4, [pc, #236]	; (95a8 <calc_orientation+0x1e0>)
    94ba:	47a0      	blx	r4
    94bc:	2200      	movs	r2, #0
    94be:	4b3d      	ldr	r3, [pc, #244]	; (95b4 <calc_orientation+0x1ec>)
    94c0:	47d0      	blx	sl
    94c2:	47d8      	blx	fp
	*inclinationP = -1*thetaY;
    94c4:	2380      	movs	r3, #128	; 0x80
    94c6:	4642      	mov	r2, r8
    94c8:	061b      	lsls	r3, r3, #24
    94ca:	18c3      	adds	r3, r0, r3
	*thetaY = -1*RAD2DEG*atan2(XYZ[0], ryz);
    94cc:	1c04      	adds	r4, r0, #0
	*inclinationP = -1*thetaY;
    94ce:	6113      	str	r3, [r2, #16]
	if ((*rollP)<0){
    94d0:	4f39      	ldr	r7, [pc, #228]	; (95b8 <calc_orientation+0x1f0>)
    94d2:	2100      	movs	r1, #0
    94d4:	1c30      	adds	r0, r6, #0
    94d6:	47b8      	blx	r7
    94d8:	2800      	cmp	r0, #0
    94da:	d152      	bne.n	9582 <calc_orientation+0x1ba>
	*rollP = thetaX;
    94dc:	4643      	mov	r3, r8
    94de:	615e      	str	r6, [r3, #20]
	rotvec_theta_XY(cXYZ, crotXYZ, thetaX, thetaY);
    94e0:	1c23      	adds	r3, r4, #0
    94e2:	1c32      	adds	r2, r6, #0
    94e4:	a909      	add	r1, sp, #36	; 0x24
    94e6:	a806      	add	r0, sp, #24
    94e8:	4c34      	ldr	r4, [pc, #208]	; (95bc <calc_orientation+0x1f4>)
    94ea:	47a0      	blx	r4
	*azimuthP = RAD2DEG*atan2(crotXYZ[1], crotXYZ[0]);
    94ec:	9809      	ldr	r0, [sp, #36]	; 0x24
    94ee:	47c8      	blx	r9
    94f0:	0004      	movs	r4, r0
    94f2:	000d      	movs	r5, r1
    94f4:	980a      	ldr	r0, [sp, #40]	; 0x28
    94f6:	47c8      	blx	r9
    94f8:	0022      	movs	r2, r4
    94fa:	002b      	movs	r3, r5
    94fc:	4c2a      	ldr	r4, [pc, #168]	; (95a8 <calc_orientation+0x1e0>)
    94fe:	47a0      	blx	r4
    9500:	2200      	movs	r2, #0
    9502:	4b2a      	ldr	r3, [pc, #168]	; (95ac <calc_orientation+0x1e4>)
    9504:	47d0      	blx	sl
    9506:	47d8      	blx	fp
	if ((*azimuthP)<0){
    9508:	2100      	movs	r1, #0
	*azimuthP = RAD2DEG*atan2(crotXYZ[1], crotXYZ[0]);
    950a:	1c04      	adds	r4, r0, #0
	if ((*azimuthP)<0){
    950c:	47b8      	blx	r7
    950e:	2800      	cmp	r0, #0
    9510:	d130      	bne.n	9574 <calc_orientation+0x1ac>
	*azimuthP = RAD2DEG*atan2(crotXYZ[1], crotXYZ[0]);
    9512:	4643      	mov	r3, r8
    9514:	60dc      	str	r4, [r3, #12]
	crxy= sqrt(pow(crotXYZ[0],2)+pow(crotXYZ[1],2));
    9516:	9809      	ldr	r0, [sp, #36]	; 0x24
    9518:	47c8      	blx	r9
    951a:	0004      	movs	r4, r0
    951c:	980a      	ldr	r0, [sp, #40]	; 0x28
    951e:	000d      	movs	r5, r1
    9520:	47c8      	blx	r9
    9522:	0002      	movs	r2, r0
    9524:	000b      	movs	r3, r1
    9526:	47d0      	blx	sl
    9528:	0022      	movs	r2, r4
    952a:	0006      	movs	r6, r0
    952c:	000f      	movs	r7, r1
    952e:	002b      	movs	r3, r5
    9530:	0020      	movs	r0, r4
    9532:	0029      	movs	r1, r5
    9534:	47d0      	blx	sl
    9536:	4c1a      	ldr	r4, [pc, #104]	; (95a0 <calc_orientation+0x1d8>)
    9538:	0002      	movs	r2, r0
    953a:	000b      	movs	r3, r1
    953c:	0030      	movs	r0, r6
    953e:	0039      	movs	r1, r7
    9540:	47a0      	blx	r4
    9542:	4b18      	ldr	r3, [pc, #96]	; (95a4 <calc_orientation+0x1dc>)
    9544:	4798      	blx	r3
    9546:	47d8      	blx	fp
	*declinationP = RAD2DEG*atan2(crotXYZ[2], crxy);
    9548:	47c8      	blx	r9
    954a:	0004      	movs	r4, r0
    954c:	000d      	movs	r5, r1
    954e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9550:	47c8      	blx	r9
    9552:	0022      	movs	r2, r4
    9554:	002b      	movs	r3, r5
    9556:	4c14      	ldr	r4, [pc, #80]	; (95a8 <calc_orientation+0x1e0>)
    9558:	47a0      	blx	r4
    955a:	2200      	movs	r2, #0
    955c:	4b13      	ldr	r3, [pc, #76]	; (95ac <calc_orientation+0x1e4>)
    955e:	47d0      	blx	sl
    9560:	47d8      	blx	fp
    9562:	4643      	mov	r3, r8
    9564:	6198      	str	r0, [r3, #24]
}
    9566:	b00d      	add	sp, #52	; 0x34
    9568:	bc3c      	pop	{r2, r3, r4, r5}
    956a:	4690      	mov	r8, r2
    956c:	4699      	mov	r9, r3
    956e:	46a2      	mov	sl, r4
    9570:	46ab      	mov	fp, r5
    9572:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*azimuthP = *azimuthP+360;
    9574:	4b06      	ldr	r3, [pc, #24]	; (9590 <calc_orientation+0x1c8>)
    9576:	4912      	ldr	r1, [pc, #72]	; (95c0 <calc_orientation+0x1f8>)
    9578:	1c20      	adds	r0, r4, #0
    957a:	4798      	blx	r3
    957c:	4643      	mov	r3, r8
    957e:	60d8      	str	r0, [r3, #12]
    9580:	e7c9      	b.n	9516 <calc_orientation+0x14e>
		*rollP = *rollP+360;
    9582:	4b03      	ldr	r3, [pc, #12]	; (9590 <calc_orientation+0x1c8>)
    9584:	490e      	ldr	r1, [pc, #56]	; (95c0 <calc_orientation+0x1f8>)
    9586:	1c30      	adds	r0, r6, #0
    9588:	4798      	blx	r3
    958a:	4643      	mov	r3, r8
    958c:	6158      	str	r0, [r3, #20]
    958e:	e7a7      	b.n	94e0 <calc_orientation+0x118>
    9590:	0001d235 	.word	0x0001d235
    9594:	0001d939 	.word	0x0001d939
    9598:	0001fb6d 	.word	0x0001fb6d
    959c:	0001eea5 	.word	0x0001eea5
    95a0:	0001e01d 	.word	0x0001e01d
    95a4:	0001a745 	.word	0x0001a745
    95a8:	0001a3e5 	.word	0x0001a3e5
    95ac:	404ca5dc 	.word	0x404ca5dc
    95b0:	0001fc11 	.word	0x0001fc11
    95b4:	c04ca5dc 	.word	0xc04ca5dc
    95b8:	0001d0a9 	.word	0x0001d0a9
    95bc:	000090bd 	.word	0x000090bd
    95c0:	43b40000 	.word	0x43b40000

000095c4 <mat_mult_33_31>:
void mat_mult_33_31(float mat33[3][3], float mat3[3], float ret3[3]){
    95c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    95c6:	46de      	mov	lr, fp
    95c8:	4657      	mov	r7, sl
    95ca:	464e      	mov	r6, r9
    95cc:	4645      	mov	r5, r8
    95ce:	b5e0      	push	{r5, r6, r7, lr}
    95d0:	680b      	ldr	r3, [r1, #0]
    95d2:	b083      	sub	sp, #12
    95d4:	469a      	mov	sl, r3
    95d6:	684b      	ldr	r3, [r1, #4]
			temp[i] = temp[i]+mat33[i][j]*mat3[j];
    95d8:	4d26      	ldr	r5, [pc, #152]	; (9674 <mat_mult_33_31+0xb0>)
    95da:	4699      	mov	r9, r3
    95dc:	688b      	ldr	r3, [r1, #8]
void mat_mult_33_31(float mat33[3][3], float mat3[3], float ret3[3]){
    95de:	0006      	movs	r6, r0
			temp[i] = temp[i]+mat33[i][j]*mat3[j];
    95e0:	68c1      	ldr	r1, [r0, #12]
    95e2:	4650      	mov	r0, sl
    95e4:	4698      	mov	r8, r3
void mat_mult_33_31(float mat33[3][3], float mat3[3], float ret3[3]){
    95e6:	0017      	movs	r7, r2
			temp[i] = temp[i]+mat33[i][j]*mat3[j];
    95e8:	47a8      	blx	r5
    95ea:	4c23      	ldr	r4, [pc, #140]	; (9678 <mat_mult_33_31+0xb4>)
    95ec:	2100      	movs	r1, #0
    95ee:	47a0      	blx	r4
    95f0:	6931      	ldr	r1, [r6, #16]
    95f2:	4683      	mov	fp, r0
    95f4:	4648      	mov	r0, r9
    95f6:	47a8      	blx	r5
    95f8:	1c01      	adds	r1, r0, #0
    95fa:	4658      	mov	r0, fp
    95fc:	47a0      	blx	r4
    95fe:	6971      	ldr	r1, [r6, #20]
    9600:	4683      	mov	fp, r0
    9602:	4640      	mov	r0, r8
    9604:	47a8      	blx	r5
    9606:	1c01      	adds	r1, r0, #0
    9608:	4658      	mov	r0, fp
    960a:	47a0      	blx	r4
    960c:	69b1      	ldr	r1, [r6, #24]
    960e:	9001      	str	r0, [sp, #4]
    9610:	4650      	mov	r0, sl
    9612:	47a8      	blx	r5
    9614:	2100      	movs	r1, #0
    9616:	47a0      	blx	r4
    9618:	69f1      	ldr	r1, [r6, #28]
    961a:	4683      	mov	fp, r0
    961c:	4648      	mov	r0, r9
    961e:	47a8      	blx	r5
    9620:	1c01      	adds	r1, r0, #0
    9622:	4658      	mov	r0, fp
    9624:	47a0      	blx	r4
    9626:	6a31      	ldr	r1, [r6, #32]
    9628:	4683      	mov	fp, r0
    962a:	4640      	mov	r0, r8
    962c:	47a8      	blx	r5
    962e:	1c01      	adds	r1, r0, #0
    9630:	4658      	mov	r0, fp
    9632:	47a0      	blx	r4
    9634:	6831      	ldr	r1, [r6, #0]
    9636:	4683      	mov	fp, r0
    9638:	4650      	mov	r0, sl
    963a:	47a8      	blx	r5
    963c:	2100      	movs	r1, #0
    963e:	47a0      	blx	r4
    9640:	6871      	ldr	r1, [r6, #4]
    9642:	4682      	mov	sl, r0
    9644:	4648      	mov	r0, r9
    9646:	47a8      	blx	r5
    9648:	1c01      	adds	r1, r0, #0
    964a:	4650      	mov	r0, sl
    964c:	47a0      	blx	r4
    964e:	68b1      	ldr	r1, [r6, #8]
    9650:	4681      	mov	r9, r0
    9652:	4640      	mov	r0, r8
    9654:	47a8      	blx	r5
    9656:	1c01      	adds	r1, r0, #0
    9658:	4648      	mov	r0, r9
    965a:	47a0      	blx	r4
		ret3[i] = temp[i];
    965c:	6038      	str	r0, [r7, #0]
    965e:	9b01      	ldr	r3, [sp, #4]
    9660:	607b      	str	r3, [r7, #4]
    9662:	465b      	mov	r3, fp
    9664:	60bb      	str	r3, [r7, #8]
}
    9666:	b003      	add	sp, #12
    9668:	bc3c      	pop	{r2, r3, r4, r5}
    966a:	4690      	mov	r8, r2
    966c:	4699      	mov	r9, r3
    966e:	46a2      	mov	sl, r4
    9670:	46ab      	mov	fp, r5
    9672:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9674:	0001d939 	.word	0x0001d939
    9678:	0001d235 	.word	0x0001d235

0000967c <calc_theta_XY>:
void calc_theta_XY(float XYZ[3], float *thetaX, float *thetaY){
    967c:	b5f0      	push	{r4, r5, r6, r7, lr}
    967e:	46de      	mov	lr, fp
    9680:	4657      	mov	r7, sl
    9682:	464e      	mov	r6, r9
    9684:	4645      	mov	r5, r8
    9686:	4681      	mov	r9, r0
    9688:	b5e0      	push	{r5, r6, r7, lr}
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    968a:	4b29      	ldr	r3, [pc, #164]	; (9730 <calc_theta_XY+0xb4>)
void calc_theta_XY(float XYZ[3], float *thetaX, float *thetaY){
    968c:	b083      	sub	sp, #12
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    968e:	4698      	mov	r8, r3
void calc_theta_XY(float XYZ[3], float *thetaX, float *thetaY){
    9690:	9201      	str	r2, [sp, #4]
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    9692:	6840      	ldr	r0, [r0, #4]
void calc_theta_XY(float XYZ[3], float *thetaX, float *thetaY){
    9694:	468b      	mov	fp, r1
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    9696:	47c0      	blx	r8
    9698:	464b      	mov	r3, r9
    969a:	0004      	movs	r4, r0
    969c:	6898      	ldr	r0, [r3, #8]
    969e:	000d      	movs	r5, r1
    96a0:	47c0      	blx	r8
    96a2:	4b24      	ldr	r3, [pc, #144]	; (9734 <calc_theta_XY+0xb8>)
    96a4:	0006      	movs	r6, r0
    96a6:	469a      	mov	sl, r3
    96a8:	000f      	movs	r7, r1
    96aa:	0022      	movs	r2, r4
    96ac:	002b      	movs	r3, r5
    96ae:	0020      	movs	r0, r4
    96b0:	0029      	movs	r1, r5
    96b2:	47d0      	blx	sl
    96b4:	0032      	movs	r2, r6
    96b6:	0004      	movs	r4, r0
    96b8:	000d      	movs	r5, r1
    96ba:	003b      	movs	r3, r7
    96bc:	0030      	movs	r0, r6
    96be:	0039      	movs	r1, r7
    96c0:	47d0      	blx	sl
    96c2:	0002      	movs	r2, r0
    96c4:	000b      	movs	r3, r1
    96c6:	0020      	movs	r0, r4
    96c8:	0029      	movs	r1, r5
    96ca:	4c1b      	ldr	r4, [pc, #108]	; (9738 <calc_theta_XY+0xbc>)
    96cc:	47a0      	blx	r4
    96ce:	4b1b      	ldr	r3, [pc, #108]	; (973c <calc_theta_XY+0xc0>)
    96d0:	4798      	blx	r3
	*thetaX = RAD2DEG*atan2(XYZ[1], XYZ[2]);
    96d2:	464b      	mov	r3, r9
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    96d4:	0004      	movs	r4, r0
	*thetaX = RAD2DEG*atan2(XYZ[1], XYZ[2]);
    96d6:	6898      	ldr	r0, [r3, #8]
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    96d8:	000d      	movs	r5, r1
	*thetaX = RAD2DEG*atan2(XYZ[1], XYZ[2]);
    96da:	47c0      	blx	r8
    96dc:	464b      	mov	r3, r9
    96de:	0006      	movs	r6, r0
    96e0:	000f      	movs	r7, r1
    96e2:	6858      	ldr	r0, [r3, #4]
    96e4:	47c0      	blx	r8
    96e6:	0032      	movs	r2, r6
    96e8:	003b      	movs	r3, r7
    96ea:	4f15      	ldr	r7, [pc, #84]	; (9740 <calc_theta_XY+0xc4>)
    96ec:	47b8      	blx	r7
    96ee:	2200      	movs	r2, #0
    96f0:	4b14      	ldr	r3, [pc, #80]	; (9744 <calc_theta_XY+0xc8>)
    96f2:	47d0      	blx	sl
    96f4:	4e14      	ldr	r6, [pc, #80]	; (9748 <calc_theta_XY+0xcc>)
    96f6:	47b0      	blx	r6
    96f8:	465b      	mov	r3, fp
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    96fa:	0029      	movs	r1, r5
	*thetaX = RAD2DEG*atan2(XYZ[1], XYZ[2]);
    96fc:	6018      	str	r0, [r3, #0]
	ryz = sqrt(pow(XYZ[1],2) + pow(XYZ[2],2));
    96fe:	0020      	movs	r0, r4
    9700:	47b0      	blx	r6
	*thetaY = -1*RAD2DEG*atan2(XYZ[0], ryz);
    9702:	47c0      	blx	r8
    9704:	464b      	mov	r3, r9
    9706:	0004      	movs	r4, r0
    9708:	000d      	movs	r5, r1
    970a:	6818      	ldr	r0, [r3, #0]
    970c:	47c0      	blx	r8
    970e:	0022      	movs	r2, r4
    9710:	002b      	movs	r3, r5
    9712:	47b8      	blx	r7
    9714:	2200      	movs	r2, #0
    9716:	4b0d      	ldr	r3, [pc, #52]	; (974c <calc_theta_XY+0xd0>)
    9718:	47d0      	blx	sl
    971a:	47b0      	blx	r6
    971c:	9b01      	ldr	r3, [sp, #4]
    971e:	6018      	str	r0, [r3, #0]
}
    9720:	b003      	add	sp, #12
    9722:	bc3c      	pop	{r2, r3, r4, r5}
    9724:	4690      	mov	r8, r2
    9726:	4699      	mov	r9, r3
    9728:	46a2      	mov	sl, r4
    972a:	46ab      	mov	fp, r5
    972c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    972e:	46c0      	nop			; (mov r8, r8)
    9730:	0001fb6d 	.word	0x0001fb6d
    9734:	0001eea5 	.word	0x0001eea5
    9738:	0001e01d 	.word	0x0001e01d
    973c:	0001a745 	.word	0x0001a745
    9740:	0001a3e5 	.word	0x0001a3e5
    9744:	404ca5dc 	.word	0x404ca5dc
    9748:	0001fc11 	.word	0x0001fc11
    974c:	c04ca5dc 	.word	0xc04ca5dc

00009750 <stdev>:
float stdev(float data[], uint32_t n_meas){
    9750:	b5f0      	push	{r4, r5, r6, r7, lr}
    9752:	4645      	mov	r5, r8
    9754:	46de      	mov	lr, fp
    9756:	4657      	mov	r7, sl
    9758:	464e      	mov	r6, r9
    975a:	b5e0      	push	{r5, r6, r7, lr}
    975c:	4680      	mov	r8, r0
    975e:	b083      	sub	sp, #12
    9760:	1e0d      	subs	r5, r1, #0
	for (i=0;i<n_meas;i++){
    9762:	d04e      	beq.n	9802 <stdev+0xb2>
    9764:	2600      	movs	r6, #0
    9766:	2400      	movs	r4, #0
    9768:	1c30      	adds	r0, r6, #0
    976a:	2300      	movs	r3, #0
    976c:	4646      	mov	r6, r8
    976e:	4f26      	ldr	r7, [pc, #152]	; (9808 <stdev+0xb8>)
		mean = mean+data[i];
    9770:	009b      	lsls	r3, r3, #2
	for (i=0;i<n_meas;i++){
    9772:	3401      	adds	r4, #1
		mean = mean+data[i];
    9774:	5999      	ldr	r1, [r3, r6]
	for (i=0;i<n_meas;i++){
    9776:	b2e4      	uxtb	r4, r4
		mean = mean+data[i];
    9778:	47b8      	blx	r7
	for (i=0;i<n_meas;i++){
    977a:	0023      	movs	r3, r4
    977c:	42a5      	cmp	r5, r4
    977e:	d8f7      	bhi.n	9770 <stdev+0x20>
	mean = mean/n_meas;
    9780:	4b22      	ldr	r3, [pc, #136]	; (980c <stdev+0xbc>)
    9782:	46b0      	mov	r8, r6
    9784:	1c06      	adds	r6, r0, #0
    9786:	0028      	movs	r0, r5
    9788:	4798      	blx	r3
    978a:	4b21      	ldr	r3, [pc, #132]	; (9810 <stdev+0xc0>)
    978c:	1c01      	adds	r1, r0, #0
    978e:	1c30      	adds	r0, r6, #0
    9790:	4798      	blx	r3
	mean = meanArr(data, n_meas);
    9792:	4b20      	ldr	r3, [pc, #128]	; (9814 <stdev+0xc4>)
    9794:	2600      	movs	r6, #0
    9796:	4699      	mov	r9, r3
    9798:	4798      	blx	r3
    979a:	4a1f      	ldr	r2, [pc, #124]	; (9818 <stdev+0xc8>)
    979c:	2300      	movs	r3, #0
    979e:	4693      	mov	fp, r2
    97a0:	4a1e      	ldr	r2, [pc, #120]	; (981c <stdev+0xcc>)
    97a2:	2700      	movs	r7, #0
    97a4:	2400      	movs	r4, #0
    97a6:	4692      	mov	sl, r2
    97a8:	9000      	str	r0, [sp, #0]
    97aa:	9101      	str	r1, [sp, #4]
		sumsq = sumsq+pow((data[i]-mean),2);
    97ac:	4642      	mov	r2, r8
    97ae:	009b      	lsls	r3, r3, #2
    97b0:	5898      	ldr	r0, [r3, r2]
    97b2:	47c8      	blx	r9
    97b4:	9a00      	ldr	r2, [sp, #0]
    97b6:	9b01      	ldr	r3, [sp, #4]
    97b8:	47d8      	blx	fp
    97ba:	0002      	movs	r2, r0
    97bc:	000b      	movs	r3, r1
    97be:	47d0      	blx	sl
    97c0:	000b      	movs	r3, r1
    97c2:	0002      	movs	r2, r0
    97c4:	0039      	movs	r1, r7
    97c6:	0030      	movs	r0, r6
    97c8:	4e15      	ldr	r6, [pc, #84]	; (9820 <stdev+0xd0>)
    97ca:	47b0      	blx	r6
	for (i=0;i<n_meas;i++){
    97cc:	3401      	adds	r4, #1
    97ce:	b2e4      	uxtb	r4, r4
		sumsq = sumsq+pow((data[i]-mean),2);
    97d0:	0006      	movs	r6, r0
    97d2:	000f      	movs	r7, r1
	for (i=0;i<n_meas;i++){
    97d4:	0023      	movs	r3, r4
    97d6:	42a5      	cmp	r5, r4
    97d8:	d8e8      	bhi.n	97ac <stdev+0x5c>
	sumsq = sumsq/(n_meas-1);
    97da:	4b12      	ldr	r3, [pc, #72]	; (9824 <stdev+0xd4>)
    97dc:	1e68      	subs	r0, r5, #1
    97de:	4798      	blx	r3
    97e0:	4c11      	ldr	r4, [pc, #68]	; (9828 <stdev+0xd8>)
    97e2:	0002      	movs	r2, r0
    97e4:	000b      	movs	r3, r1
    97e6:	0030      	movs	r0, r6
    97e8:	0039      	movs	r1, r7
    97ea:	47a0      	blx	r4
	sumsq = sqrt(sumsq);
    97ec:	4b0f      	ldr	r3, [pc, #60]	; (982c <stdev+0xdc>)
    97ee:	4798      	blx	r3
	return sumsq;
    97f0:	4b0f      	ldr	r3, [pc, #60]	; (9830 <stdev+0xe0>)
    97f2:	4798      	blx	r3
}
    97f4:	b003      	add	sp, #12
    97f6:	bc3c      	pop	{r2, r3, r4, r5}
    97f8:	4690      	mov	r8, r2
    97fa:	4699      	mov	r9, r3
    97fc:	46a2      	mov	sl, r4
    97fe:	46ab      	mov	fp, r5
    9800:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sumsq = 0;
    9802:	2600      	movs	r6, #0
    9804:	2700      	movs	r7, #0
    9806:	e7e8      	b.n	97da <stdev+0x8a>
    9808:	0001d235 	.word	0x0001d235
    980c:	0001df91 	.word	0x0001df91
    9810:	0001d559 	.word	0x0001d559
    9814:	0001fb6d 	.word	0x0001fb6d
    9818:	0001f3a5 	.word	0x0001f3a5
    981c:	0001eea5 	.word	0x0001eea5
    9820:	0001e01d 	.word	0x0001e01d
    9824:	0001fafd 	.word	0x0001fafd
    9828:	0001e63d 	.word	0x0001e63d
    982c:	0001a745 	.word	0x0001a745
    9830:	0001fc11 	.word	0x0001fc11

00009834 <meanArr>:
float meanArr(float data[], uint32_t n_meas){
    9834:	b5f0      	push	{r4, r5, r6, r7, lr}
    9836:	46c6      	mov	lr, r8
    9838:	0007      	movs	r7, r0
    983a:	b500      	push	{lr}
    983c:	1e0e      	subs	r6, r1, #0
	for (i=0;i<n_meas;i++){
    983e:	d018      	beq.n	9872 <meanArr+0x3e>
    9840:	4a0d      	ldr	r2, [pc, #52]	; (9878 <meanArr+0x44>)
    9842:	2300      	movs	r3, #0
    9844:	2500      	movs	r5, #0
    9846:	2400      	movs	r4, #0
    9848:	4690      	mov	r8, r2
		mean = mean+data[i];
    984a:	009b      	lsls	r3, r3, #2
    984c:	59d9      	ldr	r1, [r3, r7]
    984e:	1c28      	adds	r0, r5, #0
    9850:	47c0      	blx	r8
	for (i=0;i<n_meas;i++){
    9852:	3401      	adds	r4, #1
    9854:	b2e4      	uxtb	r4, r4
		mean = mean+data[i];
    9856:	1c05      	adds	r5, r0, #0
	for (i=0;i<n_meas;i++){
    9858:	0023      	movs	r3, r4
    985a:	42b4      	cmp	r4, r6
    985c:	d3f5      	bcc.n	984a <meanArr+0x16>
	mean = mean/n_meas;
    985e:	0030      	movs	r0, r6
    9860:	4b06      	ldr	r3, [pc, #24]	; (987c <meanArr+0x48>)
    9862:	4798      	blx	r3
    9864:	4b06      	ldr	r3, [pc, #24]	; (9880 <meanArr+0x4c>)
    9866:	1c01      	adds	r1, r0, #0
    9868:	1c28      	adds	r0, r5, #0
    986a:	4798      	blx	r3
	return mean;
	
}
    986c:	bc04      	pop	{r2}
    986e:	4690      	mov	r8, r2
    9870:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mean = 0;
    9872:	2500      	movs	r5, #0
    9874:	e7f3      	b.n	985e <meanArr+0x2a>
    9876:	46c0      	nop			; (mov r8, r8)
    9878:	0001d235 	.word	0x0001d235
    987c:	0001df91 	.word	0x0001df91
    9880:	0001d559 	.word	0x0001d559

00009884 <determinant>:
	
}


float determinant(float a[6][6], uint8_t k)
{
    9884:	b5f0      	push	{r4, r5, r6, r7, lr}
    9886:	46de      	mov	lr, fp
    9888:	4657      	mov	r7, sl
    988a:	464e      	mov	r6, r9
    988c:	4645      	mov	r5, r8
    988e:	b5e0      	push	{r5, r6, r7, lr}
    9890:	4ce0      	ldr	r4, [pc, #896]	; (9c14 <determinant+0x390>)
    9892:	44a5      	add	sp, r4
    9894:	9017      	str	r0, [sp, #92]	; 0x5c
    9896:	911c      	str	r1, [sp, #112]	; 0x70
	float s = 1, det = 0, b[6][6];
	uint8_t i, j, m, n, c;
	if (k == 1)
    9898:	2901      	cmp	r1, #1
    989a:	d100      	bne.n	989e <determinant+0x1a>
    989c:	e1ed      	b.n	9c7a <determinant+0x3f6>
		return (a[0][0]);
	}
	else
	{
		det = 0;
		for (c = 0; c < k; c++)
    989e:	2900      	cmp	r1, #0
    98a0:	d100      	bne.n	98a4 <determinant+0x20>
    98a2:	e1d9      	b.n	9c58 <determinant+0x3d4>
							m++;
						}
					}
				}
			}
			det = det + s * (a[0][c] * determinant(b, k - 1));
    98a4:	000b      	movs	r3, r1
    98a6:	000a      	movs	r2, r1
    98a8:	3b01      	subs	r3, #1
    98aa:	b2db      	uxtb	r3, r3
    98ac:	0019      	movs	r1, r3
    98ae:	930e      	str	r3, [sp, #56]	; 0x38
    98b0:	0013      	movs	r3, r2
    98b2:	3a02      	subs	r2, #2
    98b4:	9222      	str	r2, [sp, #136]	; 0x88
    98b6:	b2d2      	uxtb	r2, r2
    98b8:	9214      	str	r2, [sp, #80]	; 0x50
    98ba:	001a      	movs	r2, r3
    98bc:	3b03      	subs	r3, #3
    98be:	b2db      	uxtb	r3, r3
    98c0:	9315      	str	r3, [sp, #84]	; 0x54
    98c2:	0013      	movs	r3, r2
    98c4:	3b04      	subs	r3, #4
    98c6:	b2db      	uxtb	r3, r3
    98c8:	930b      	str	r3, [sp, #44]	; 0x2c
    98ca:	0013      	movs	r3, r2
    98cc:	3b05      	subs	r3, #5
    98ce:	b2db      	uxtb	r3, r3
    98d0:	469a      	mov	sl, r3
    98d2:	000b      	movs	r3, r1
    98d4:	3301      	adds	r3, #1
    98d6:	9321      	str	r3, [sp, #132]	; 0x84
    98d8:	2300      	movs	r3, #0
    98da:	9306      	str	r3, [sp, #24]
    98dc:	2300      	movs	r3, #0
    98de:	930d      	str	r3, [sp, #52]	; 0x34
    98e0:	23fe      	movs	r3, #254	; 0xfe
    98e2:	059b      	lsls	r3, r3, #22
    98e4:	9318      	str	r3, [sp, #96]	; 0x60
			for (i = 0;i < k; i++)
    98e6:	2000      	movs	r0, #0
    98e8:	466b      	mov	r3, sp
    98ea:	900c      	str	r0, [sp, #48]	; 0x30
					b[i][j] = 0;
    98ec:	2000      	movs	r0, #0
    98ee:	7e1e      	ldrb	r6, [r3, #24]
    98f0:	9d1c      	ldr	r5, [sp, #112]	; 0x70
    98f2:	46b0      	mov	r8, r6
    98f4:	46ac      	mov	ip, r5
    98f6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    98f8:	9d22      	ldr	r5, [sp, #136]	; 0x88
			for (i = 0;i < k; i++)
    98fa:	a924      	add	r1, sp, #144	; 0x90
    98fc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    98fe:	2300      	movs	r3, #0
    9900:	2200      	movs	r2, #0
    9902:	46a9      	mov	r9, r5
					b[i][j] = 0;
    9904:	6008      	str	r0, [r1, #0]
					if (i != 0 && j != c)
    9906:	2e00      	cmp	r6, #0
    9908:	d100      	bne.n	990c <determinant+0x88>
    990a:	e08c      	b.n	9a26 <determinant+0x1a2>
    990c:	9e06      	ldr	r6, [sp, #24]
    990e:	2e00      	cmp	r6, #0
    9910:	d100      	bne.n	9914 <determinant+0x90>
    9912:	e190      	b.n	9c36 <determinant+0x3b2>
						b[m][n] = a[i][j];
    9914:	0056      	lsls	r6, r2, #1
    9916:	18b6      	adds	r6, r6, r2
    9918:	0076      	lsls	r6, r6, #1
    991a:	18f6      	adds	r6, r6, r3
    991c:	6825      	ldr	r5, [r4, #0]
    991e:	00b6      	lsls	r6, r6, #2
    9920:	af24      	add	r7, sp, #144	; 0x90
    9922:	51bd      	str	r5, [r7, r6]
						if (n < (k - 2))
    9924:	454b      	cmp	r3, r9
    9926:	da00      	bge.n	992a <determinant+0xa6>
    9928:	e179      	b.n	9c1e <determinant+0x39a>
					if (i != 0 && j != c)
    992a:	4645      	mov	r5, r8
							m++;
    992c:	3201      	adds	r2, #1
    992e:	b2d2      	uxtb	r2, r2
							n = 0;
    9930:	2300      	movs	r3, #0
					b[i][j] = 0;
    9932:	6048      	str	r0, [r1, #4]
					if (i != 0 && j != c)
    9934:	2d01      	cmp	r5, #1
    9936:	d100      	bne.n	993a <determinant+0xb6>
    9938:	e178      	b.n	9c2c <determinant+0x3a8>
						b[m][n] = a[i][j];
    993a:	0056      	lsls	r6, r2, #1
    993c:	18b6      	adds	r6, r6, r2
    993e:	0076      	lsls	r6, r6, #1
    9940:	18f6      	adds	r6, r6, r3
    9942:	6867      	ldr	r7, [r4, #4]
    9944:	00b6      	lsls	r6, r6, #2
    9946:	ad24      	add	r5, sp, #144	; 0x90
    9948:	51af      	str	r7, [r5, r6]
						if (n < (k - 2))
    994a:	454b      	cmp	r3, r9
    994c:	da00      	bge.n	9950 <determinant+0xcc>
    994e:	e163      	b.n	9c18 <determinant+0x394>
							n = 0;
    9950:	2300      	movs	r3, #0
							m++;
    9952:	3201      	adds	r2, #1
    9954:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    9956:	4665      	mov	r5, ip
    9958:	2d02      	cmp	r5, #2
    995a:	d100      	bne.n	995e <determinant+0xda>
    995c:	e151      	b.n	9c02 <determinant+0x37e>
					if (i != 0 && j != c)
    995e:	9d06      	ldr	r5, [sp, #24]
					b[i][j] = 0;
    9960:	6088      	str	r0, [r1, #8]
					if (i != 0 && j != c)
    9962:	2d02      	cmp	r5, #2
    9964:	d100      	bne.n	9968 <determinant+0xe4>
    9966:	e172      	b.n	9c4e <determinant+0x3ca>
						b[m][n] = a[i][j];
    9968:	0056      	lsls	r6, r2, #1
    996a:	18b6      	adds	r6, r6, r2
    996c:	0076      	lsls	r6, r6, #1
    996e:	18f6      	adds	r6, r6, r3
    9970:	68a7      	ldr	r7, [r4, #8]
    9972:	00b6      	lsls	r6, r6, #2
    9974:	ad24      	add	r5, sp, #144	; 0x90
    9976:	51af      	str	r7, [r5, r6]
						if (n < (k - 2))
    9978:	454b      	cmp	r3, r9
    997a:	da00      	bge.n	997e <determinant+0xfa>
    997c:	e146      	b.n	9c0c <determinant+0x388>
							n = 0;
    997e:	2300      	movs	r3, #0
							m++;
    9980:	3201      	adds	r2, #1
    9982:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    9984:	4665      	mov	r5, ip
    9986:	2d03      	cmp	r5, #3
    9988:	d100      	bne.n	998c <determinant+0x108>
    998a:	e13a      	b.n	9c02 <determinant+0x37e>
					if (i != 0 && j != c)
    998c:	9d06      	ldr	r5, [sp, #24]
					b[i][j] = 0;
    998e:	60c8      	str	r0, [r1, #12]
					if (i != 0 && j != c)
    9990:	2d03      	cmp	r5, #3
    9992:	d100      	bne.n	9996 <determinant+0x112>
    9994:	e156      	b.n	9c44 <determinant+0x3c0>
						b[m][n] = a[i][j];
    9996:	0056      	lsls	r6, r2, #1
    9998:	18b6      	adds	r6, r6, r2
    999a:	0076      	lsls	r6, r6, #1
    999c:	18f6      	adds	r6, r6, r3
    999e:	68e7      	ldr	r7, [r4, #12]
    99a0:	00b6      	lsls	r6, r6, #2
    99a2:	ad24      	add	r5, sp, #144	; 0x90
    99a4:	51af      	str	r7, [r5, r6]
						if (n < (k - 2))
    99a6:	454b      	cmp	r3, r9
    99a8:	da00      	bge.n	99ac <determinant+0x128>
    99aa:	e12c      	b.n	9c06 <determinant+0x382>
							n = 0;
    99ac:	2300      	movs	r3, #0
							m++;
    99ae:	3201      	adds	r2, #1
    99b0:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    99b2:	4665      	mov	r5, ip
    99b4:	2d04      	cmp	r5, #4
    99b6:	d100      	bne.n	99ba <determinant+0x136>
    99b8:	e123      	b.n	9c02 <determinant+0x37e>
					if (i != 0 && j != c)
    99ba:	9d06      	ldr	r5, [sp, #24]
					b[i][j] = 0;
    99bc:	6108      	str	r0, [r1, #16]
					if (i != 0 && j != c)
    99be:	2d04      	cmp	r5, #4
    99c0:	d100      	bne.n	99c4 <determinant+0x140>
    99c2:	e13a      	b.n	9c3a <determinant+0x3b6>
						b[m][n] = a[i][j];
    99c4:	0056      	lsls	r6, r2, #1
    99c6:	18b6      	adds	r6, r6, r2
    99c8:	0076      	lsls	r6, r6, #1
    99ca:	18f6      	adds	r6, r6, r3
    99cc:	6927      	ldr	r7, [r4, #16]
    99ce:	00b6      	lsls	r6, r6, #2
    99d0:	ad24      	add	r5, sp, #144	; 0x90
    99d2:	51af      	str	r7, [r5, r6]
						if (n < (k - 2))
    99d4:	454b      	cmp	r3, r9
    99d6:	da00      	bge.n	99da <determinant+0x156>
    99d8:	e10d      	b.n	9bf6 <determinant+0x372>
				for (j = 0 ;j < k; j++)
    99da:	4665      	mov	r5, ip
							m++;
    99dc:	3201      	adds	r2, #1
    99de:	b2d2      	uxtb	r2, r2
							n = 0;
    99e0:	2300      	movs	r3, #0
				for (j = 0 ;j < k; j++)
    99e2:	2d05      	cmp	r5, #5
    99e4:	d100      	bne.n	99e8 <determinant+0x164>
    99e6:	e10c      	b.n	9c02 <determinant+0x37e>
					if (i != 0 && j != c)
    99e8:	9d06      	ldr	r5, [sp, #24]
					b[i][j] = 0;
    99ea:	6148      	str	r0, [r1, #20]
					if (i != 0 && j != c)
    99ec:	2d05      	cmp	r5, #5
    99ee:	d100      	bne.n	99f2 <determinant+0x16e>
    99f0:	e107      	b.n	9c02 <determinant+0x37e>
						b[m][n] = a[i][j];
    99f2:	0056      	lsls	r6, r2, #1
    99f4:	18b6      	adds	r6, r6, r2
    99f6:	0076      	lsls	r6, r6, #1
    99f8:	18f6      	adds	r6, r6, r3
    99fa:	6967      	ldr	r7, [r4, #20]
    99fc:	00b6      	lsls	r6, r6, #2
    99fe:	ad24      	add	r5, sp, #144	; 0x90
    9a00:	51af      	str	r7, [r5, r6]
						if (n < (k - 2))
    9a02:	454b      	cmp	r3, r9
    9a04:	da00      	bge.n	9a08 <determinant+0x184>
    9a06:	e0f2      	b.n	9bee <determinant+0x36a>
							n = 0;
    9a08:	2300      	movs	r3, #0
							m++;
    9a0a:	3201      	adds	r2, #1
    9a0c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    9a0e:	b2d2      	uxtb	r2, r2
			for (i = 0;i < k; i++)
    9a10:	3601      	adds	r6, #1
    9a12:	b2f6      	uxtb	r6, r6
    9a14:	3118      	adds	r1, #24
    9a16:	3418      	adds	r4, #24
    9a18:	45b4      	cmp	ip, r6
    9a1a:	d01f      	beq.n	9a5c <determinant+0x1d8>
    9a1c:	960c      	str	r6, [sp, #48]	; 0x30
					b[i][j] = 0;
    9a1e:	6008      	str	r0, [r1, #0]
					if (i != 0 && j != c)
    9a20:	2e00      	cmp	r6, #0
    9a22:	d000      	beq.n	9a26 <determinant+0x1a2>
    9a24:	e772      	b.n	990c <determinant+0x88>
				for (j = 0 ;j < k; j++)
    9a26:	4665      	mov	r5, ip
					b[i][j] = 0;
    9a28:	6048      	str	r0, [r1, #4]
				for (j = 0 ;j < k; j++)
    9a2a:	2d02      	cmp	r5, #2
    9a2c:	d100      	bne.n	9a30 <determinant+0x1ac>
    9a2e:	e11f      	b.n	9c70 <determinant+0x3ec>
    9a30:	4665      	mov	r5, ip
					b[i][j] = 0;
    9a32:	6088      	str	r0, [r1, #8]
				for (j = 0 ;j < k; j++)
    9a34:	2d03      	cmp	r5, #3
    9a36:	d100      	bne.n	9a3a <determinant+0x1b6>
    9a38:	e11a      	b.n	9c70 <determinant+0x3ec>
    9a3a:	4665      	mov	r5, ip
					b[i][j] = 0;
    9a3c:	60c8      	str	r0, [r1, #12]
				for (j = 0 ;j < k; j++)
    9a3e:	2d04      	cmp	r5, #4
    9a40:	d100      	bne.n	9a44 <determinant+0x1c0>
    9a42:	e115      	b.n	9c70 <determinant+0x3ec>
    9a44:	4665      	mov	r5, ip
					b[i][j] = 0;
    9a46:	6108      	str	r0, [r1, #16]
				for (j = 0 ;j < k; j++)
    9a48:	2d05      	cmp	r5, #5
    9a4a:	d100      	bne.n	9a4e <determinant+0x1ca>
    9a4c:	e110      	b.n	9c70 <determinant+0x3ec>
			for (i = 0;i < k; i++)
    9a4e:	3601      	adds	r6, #1
    9a50:	b2f6      	uxtb	r6, r6
					b[i][j] = 0;
    9a52:	6148      	str	r0, [r1, #20]
    9a54:	3418      	adds	r4, #24
    9a56:	3118      	adds	r1, #24
			for (i = 0;i < k; i++)
    9a58:	45b4      	cmp	ip, r6
    9a5a:	d1df      	bne.n	9a1c <determinant+0x198>
			det = det + s * (a[0][c] * determinant(b, k - 1));
    9a5c:	9b06      	ldr	r3, [sp, #24]
    9a5e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    9a60:	009b      	lsls	r3, r3, #2
    9a62:	58d3      	ldr	r3, [r2, r3]
    9a64:	931d      	str	r3, [sp, #116]	; 0x74
	if (k == 1)
    9a66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9a68:	2b01      	cmp	r3, #1
    9a6a:	d100      	bne.n	9a6e <determinant+0x1ea>
    9a6c:	e209      	b.n	9e82 <determinant+0x5fe>
    9a6e:	2300      	movs	r3, #0
    9a70:	9308      	str	r3, [sp, #32]
    9a72:	2300      	movs	r3, #0
    9a74:	2700      	movs	r7, #0
    9a76:	930f      	str	r3, [sp, #60]	; 0x3c
    9a78:	23fe      	movs	r3, #254	; 0xfe
    9a7a:	4655      	mov	r5, sl
    9a7c:	46bc      	mov	ip, r7
    9a7e:	059b      	lsls	r3, r3, #22
    9a80:	9319      	str	r3, [sp, #100]	; 0x64
    9a82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9a84:	3b02      	subs	r3, #2
    9a86:	9323      	str	r3, [sp, #140]	; 0x8c
    9a88:	2601      	movs	r6, #1
    9a8a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    9a8c:	af24      	add	r7, sp, #144	; 0x90
    9a8e:	46a2      	mov	sl, r4
    9a90:	9c23      	ldr	r4, [sp, #140]	; 0x8c
    9a92:	46b0      	mov	r8, r6
    9a94:	a948      	add	r1, sp, #288	; 0x120
    9a96:	2300      	movs	r3, #0
    9a98:	2200      	movs	r2, #0
					b[i][j] = 0;
    9a9a:	2000      	movs	r0, #0
    9a9c:	46a9      	mov	r9, r5
    9a9e:	003e      	movs	r6, r7
    9aa0:	46a3      	mov	fp, r4
    9aa2:	e081      	b.n	9ba8 <determinant+0x324>
					if (i != 0 && j != c)
    9aa4:	4664      	mov	r4, ip
							m++;
    9aa6:	3201      	adds	r2, #1
    9aa8:	b2d2      	uxtb	r2, r2
							n = 0;
    9aaa:	2300      	movs	r3, #0
					b[i][j] = 0;
    9aac:	6048      	str	r0, [r1, #4]
					if (i != 0 && j != c)
    9aae:	2c01      	cmp	r4, #1
    9ab0:	d100      	bne.n	9ab4 <determinant+0x230>
    9ab2:	e097      	b.n	9be4 <determinant+0x360>
						b[m][n] = a[i][j];
    9ab4:	2790      	movs	r7, #144	; 0x90
    9ab6:	0055      	lsls	r5, r2, #1
    9ab8:	18ad      	adds	r5, r5, r2
    9aba:	006d      	lsls	r5, r5, #1
    9abc:	ac24      	add	r4, sp, #144	; 0x90
    9abe:	19e4      	adds	r4, r4, r7
    9ac0:	18ed      	adds	r5, r5, r3
    9ac2:	6877      	ldr	r7, [r6, #4]
    9ac4:	00ad      	lsls	r5, r5, #2
    9ac6:	5167      	str	r7, [r4, r5]
						if (n < (k - 2))
    9ac8:	455b      	cmp	r3, fp
    9aca:	da00      	bge.n	9ace <determinant+0x24a>
    9acc:	e0d9      	b.n	9c82 <determinant+0x3fe>
				for (j = 0 ;j < k; j++)
    9ace:	4654      	mov	r4, sl
							m++;
    9ad0:	3201      	adds	r2, #1
    9ad2:	b2d2      	uxtb	r2, r2
							n = 0;
    9ad4:	2300      	movs	r3, #0
				for (j = 0 ;j < k; j++)
    9ad6:	2c02      	cmp	r4, #2
    9ad8:	d100      	bne.n	9adc <determinant+0x258>
    9ada:	e0d8      	b.n	9c8e <determinant+0x40a>
					if (i != 0 && j != c)
    9adc:	9c08      	ldr	r4, [sp, #32]
					b[i][j] = 0;
    9ade:	6088      	str	r0, [r1, #8]
					if (i != 0 && j != c)
    9ae0:	2c02      	cmp	r4, #2
    9ae2:	d101      	bne.n	9ae8 <determinant+0x264>
    9ae4:	f000 fed2 	bl	a88c <determinant+0x1008>
						b[m][n] = a[i][j];
    9ae8:	2790      	movs	r7, #144	; 0x90
    9aea:	0055      	lsls	r5, r2, #1
    9aec:	18ad      	adds	r5, r5, r2
    9aee:	006d      	lsls	r5, r5, #1
    9af0:	ac24      	add	r4, sp, #144	; 0x90
    9af2:	19e4      	adds	r4, r4, r7
    9af4:	18ed      	adds	r5, r5, r3
    9af6:	68b7      	ldr	r7, [r6, #8]
    9af8:	00ad      	lsls	r5, r5, #2
    9afa:	5167      	str	r7, [r4, r5]
						if (n < (k - 2))
    9afc:	455b      	cmp	r3, fp
    9afe:	da00      	bge.n	9b02 <determinant+0x27e>
    9b00:	e197      	b.n	9e32 <determinant+0x5ae>
							n = 0;
    9b02:	2300      	movs	r3, #0
							m++;
    9b04:	3201      	adds	r2, #1
    9b06:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    9b08:	4654      	mov	r4, sl
    9b0a:	2c03      	cmp	r4, #3
    9b0c:	d043      	beq.n	9b96 <determinant+0x312>
					if (i != 0 && j != c)
    9b0e:	9c08      	ldr	r4, [sp, #32]
					b[i][j] = 0;
    9b10:	60c8      	str	r0, [r1, #12]
					if (i != 0 && j != c)
    9b12:	2c03      	cmp	r4, #3
    9b14:	d100      	bne.n	9b18 <determinant+0x294>
    9b16:	e1ae      	b.n	9e76 <determinant+0x5f2>
						b[m][n] = a[i][j];
    9b18:	2790      	movs	r7, #144	; 0x90
    9b1a:	0055      	lsls	r5, r2, #1
    9b1c:	18ad      	adds	r5, r5, r2
    9b1e:	006d      	lsls	r5, r5, #1
    9b20:	ac24      	add	r4, sp, #144	; 0x90
    9b22:	19e4      	adds	r4, r4, r7
    9b24:	18ed      	adds	r5, r5, r3
    9b26:	68f7      	ldr	r7, [r6, #12]
    9b28:	00ad      	lsls	r5, r5, #2
    9b2a:	5167      	str	r7, [r4, r5]
						if (n < (k - 2))
    9b2c:	455b      	cmp	r3, fp
    9b2e:	da00      	bge.n	9b32 <determinant+0x2ae>
    9b30:	e19e      	b.n	9e70 <determinant+0x5ec>
							n = 0;
    9b32:	2300      	movs	r3, #0
							m++;
    9b34:	3201      	adds	r2, #1
    9b36:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    9b38:	4654      	mov	r4, sl
    9b3a:	2c04      	cmp	r4, #4
    9b3c:	d02b      	beq.n	9b96 <determinant+0x312>
					if (i != 0 && j != c)
    9b3e:	9c08      	ldr	r4, [sp, #32]
					b[i][j] = 0;
    9b40:	6108      	str	r0, [r1, #16]
					if (i != 0 && j != c)
    9b42:	2c04      	cmp	r4, #4
    9b44:	d100      	bne.n	9b48 <determinant+0x2c4>
    9b46:	e1b9      	b.n	9ebc <determinant+0x638>
						b[m][n] = a[i][j];
    9b48:	2790      	movs	r7, #144	; 0x90
    9b4a:	0055      	lsls	r5, r2, #1
    9b4c:	18ad      	adds	r5, r5, r2
    9b4e:	006d      	lsls	r5, r5, #1
    9b50:	ac24      	add	r4, sp, #144	; 0x90
    9b52:	19e4      	adds	r4, r4, r7
    9b54:	18ed      	adds	r5, r5, r3
    9b56:	6937      	ldr	r7, [r6, #16]
    9b58:	00ad      	lsls	r5, r5, #2
    9b5a:	5167      	str	r7, [r4, r5]
						if (n < (k - 2))
    9b5c:	455b      	cmp	r3, fp
    9b5e:	da00      	bge.n	9b62 <determinant+0x2de>
    9b60:	e183      	b.n	9e6a <determinant+0x5e6>
							n = 0;
    9b62:	2300      	movs	r3, #0
							m++;
    9b64:	3201      	adds	r2, #1
    9b66:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    9b68:	4654      	mov	r4, sl
    9b6a:	2c05      	cmp	r4, #5
    9b6c:	d013      	beq.n	9b96 <determinant+0x312>
					if (i != 0 && j != c)
    9b6e:	9c08      	ldr	r4, [sp, #32]
					b[i][j] = 0;
    9b70:	6148      	str	r0, [r1, #20]
					if (i != 0 && j != c)
    9b72:	2c05      	cmp	r4, #5
    9b74:	d00f      	beq.n	9b96 <determinant+0x312>
						b[m][n] = a[i][j];
    9b76:	2790      	movs	r7, #144	; 0x90
    9b78:	0055      	lsls	r5, r2, #1
    9b7a:	18ad      	adds	r5, r5, r2
    9b7c:	006d      	lsls	r5, r5, #1
    9b7e:	ac24      	add	r4, sp, #144	; 0x90
    9b80:	19e4      	adds	r4, r4, r7
    9b82:	18ed      	adds	r5, r5, r3
    9b84:	6977      	ldr	r7, [r6, #20]
    9b86:	00ad      	lsls	r5, r5, #2
    9b88:	5167      	str	r7, [r4, r5]
						if (n < (k - 2))
    9b8a:	455b      	cmp	r3, fp
    9b8c:	da00      	bge.n	9b90 <determinant+0x30c>
    9b8e:	e169      	b.n	9e64 <determinant+0x5e0>
							n = 0;
    9b90:	2300      	movs	r3, #0
							m++;
    9b92:	3201      	adds	r2, #1
    9b94:	b2d2      	uxtb	r2, r2
			for (i = 0;i < k; i++)
    9b96:	45c2      	cmp	sl, r8
    9b98:	d800      	bhi.n	9b9c <determinant+0x318>
    9b9a:	e078      	b.n	9c8e <determinant+0x40a>
    9b9c:	4645      	mov	r5, r8
    9b9e:	3501      	adds	r5, #1
    9ba0:	b2ed      	uxtb	r5, r5
    9ba2:	46a8      	mov	r8, r5
    9ba4:	3118      	adds	r1, #24
    9ba6:	3618      	adds	r6, #24
					if (i != 0 && j != c)
    9ba8:	4645      	mov	r5, r8
					b[i][j] = 0;
    9baa:	6008      	str	r0, [r1, #0]
					if (i != 0 && j != c)
    9bac:	2d01      	cmp	r5, #1
    9bae:	d100      	bne.n	9bb2 <determinant+0x32e>
    9bb0:	e142      	b.n	9e38 <determinant+0x5b4>
    9bb2:	9d08      	ldr	r5, [sp, #32]
    9bb4:	2d00      	cmp	r5, #0
    9bb6:	d101      	bne.n	9bbc <determinant+0x338>
    9bb8:	f000 fe70 	bl	a89c <determinant+0x1018>
						b[m][n] = a[i][j];
    9bbc:	2490      	movs	r4, #144	; 0x90
    9bbe:	0055      	lsls	r5, r2, #1
    9bc0:	18ad      	adds	r5, r5, r2
    9bc2:	006d      	lsls	r5, r5, #1
    9bc4:	af24      	add	r7, sp, #144	; 0x90
    9bc6:	193f      	adds	r7, r7, r4
    9bc8:	18ed      	adds	r5, r5, r3
    9bca:	6834      	ldr	r4, [r6, #0]
    9bcc:	00ad      	lsls	r5, r5, #2
    9bce:	517c      	str	r4, [r7, r5]
						if (n < (k - 2))
    9bd0:	455b      	cmp	r3, fp
    9bd2:	db00      	blt.n	9bd6 <determinant+0x352>
    9bd4:	e766      	b.n	9aa4 <determinant+0x220>
					if (i != 0 && j != c)
    9bd6:	4664      	mov	r4, ip
						n++;
    9bd8:	3301      	adds	r3, #1
    9bda:	b2db      	uxtb	r3, r3
					b[i][j] = 0;
    9bdc:	6048      	str	r0, [r1, #4]
					if (i != 0 && j != c)
    9bde:	2c01      	cmp	r4, #1
    9be0:	d000      	beq.n	9be4 <determinant+0x360>
    9be2:	e767      	b.n	9ab4 <determinant+0x230>
				for (j = 0 ;j < k; j++)
    9be4:	4654      	mov	r4, sl
    9be6:	2c02      	cmp	r4, #2
    9be8:	d051      	beq.n	9c8e <determinant+0x40a>
					b[i][j] = 0;
    9bea:	6088      	str	r0, [r1, #8]
    9bec:	e77c      	b.n	9ae8 <determinant+0x264>
						n++;
    9bee:	3301      	adds	r3, #1
    9bf0:	b2db      	uxtb	r3, r3
    9bf2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    9bf4:	e70c      	b.n	9a10 <determinant+0x18c>
				for (j = 0 ;j < k; j++)
    9bf6:	4665      	mov	r5, ip
						n++;
    9bf8:	3301      	adds	r3, #1
    9bfa:	b2db      	uxtb	r3, r3
				for (j = 0 ;j < k; j++)
    9bfc:	2d05      	cmp	r5, #5
    9bfe:	d000      	beq.n	9c02 <determinant+0x37e>
    9c00:	e6f2      	b.n	99e8 <determinant+0x164>
    9c02:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    9c04:	e704      	b.n	9a10 <determinant+0x18c>
						n++;
    9c06:	3301      	adds	r3, #1
    9c08:	b2db      	uxtb	r3, r3
    9c0a:	e6d2      	b.n	99b2 <determinant+0x12e>
    9c0c:	3301      	adds	r3, #1
    9c0e:	b2db      	uxtb	r3, r3
    9c10:	e6b8      	b.n	9984 <determinant+0x100>
    9c12:	46c0      	nop			; (mov r8, r8)
    9c14:	fffffc0c 	.word	0xfffffc0c
    9c18:	3301      	adds	r3, #1
    9c1a:	b2db      	uxtb	r3, r3
    9c1c:	e69b      	b.n	9956 <determinant+0xd2>
					if (i != 0 && j != c)
    9c1e:	4645      	mov	r5, r8
						n++;
    9c20:	3301      	adds	r3, #1
    9c22:	b2db      	uxtb	r3, r3
					b[i][j] = 0;
    9c24:	6048      	str	r0, [r1, #4]
					if (i != 0 && j != c)
    9c26:	2d01      	cmp	r5, #1
    9c28:	d000      	beq.n	9c2c <determinant+0x3a8>
    9c2a:	e686      	b.n	993a <determinant+0xb6>
				for (j = 0 ;j < k; j++)
    9c2c:	4665      	mov	r5, ip
    9c2e:	2d02      	cmp	r5, #2
    9c30:	d0e7      	beq.n	9c02 <determinant+0x37e>
					b[i][j] = 0;
    9c32:	6088      	str	r0, [r1, #8]
    9c34:	e698      	b.n	9968 <determinant+0xe4>
    9c36:	6048      	str	r0, [r1, #4]
    9c38:	e67f      	b.n	993a <determinant+0xb6>
				for (j = 0 ;j < k; j++)
    9c3a:	4665      	mov	r5, ip
    9c3c:	2d05      	cmp	r5, #5
    9c3e:	d0e0      	beq.n	9c02 <determinant+0x37e>
					b[i][j] = 0;
    9c40:	6148      	str	r0, [r1, #20]
    9c42:	e6d6      	b.n	99f2 <determinant+0x16e>
				for (j = 0 ;j < k; j++)
    9c44:	4665      	mov	r5, ip
    9c46:	2d04      	cmp	r5, #4
    9c48:	d0db      	beq.n	9c02 <determinant+0x37e>
					b[i][j] = 0;
    9c4a:	6108      	str	r0, [r1, #16]
    9c4c:	e6ba      	b.n	99c4 <determinant+0x140>
				for (j = 0 ;j < k; j++)
    9c4e:	4665      	mov	r5, ip
    9c50:	2d03      	cmp	r5, #3
    9c52:	d0d6      	beq.n	9c02 <determinant+0x37e>
					b[i][j] = 0;
    9c54:	60c8      	str	r0, [r1, #12]
    9c56:	e69e      	b.n	9996 <determinant+0x112>
		for (c = 0; c < k; c++)
    9c58:	2300      	movs	r3, #0
    9c5a:	930d      	str	r3, [sp, #52]	; 0x34
    9c5c:	1c18      	adds	r0, r3, #0
			s = -1 * s;
		}
	}
	
	return (det);
}
    9c5e:	23fd      	movs	r3, #253	; 0xfd
    9c60:	009b      	lsls	r3, r3, #2
    9c62:	449d      	add	sp, r3
    9c64:	bc3c      	pop	{r2, r3, r4, r5}
    9c66:	4690      	mov	r8, r2
    9c68:	4699      	mov	r9, r3
    9c6a:	46a2      	mov	sl, r4
    9c6c:	46ab      	mov	fp, r5
    9c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			for (i = 0;i < k; i++)
    9c70:	2601      	movs	r6, #1
    9c72:	3118      	adds	r1, #24
    9c74:	3418      	adds	r4, #24
    9c76:	960c      	str	r6, [sp, #48]	; 0x30
    9c78:	e6d1      	b.n	9a1e <determinant+0x19a>
		return (a[0][0]);
    9c7a:	6803      	ldr	r3, [r0, #0]
    9c7c:	930d      	str	r3, [sp, #52]	; 0x34
    9c7e:	1c18      	adds	r0, r3, #0
    9c80:	e7ed      	b.n	9c5e <determinant+0x3da>
				for (j = 0 ;j < k; j++)
    9c82:	4654      	mov	r4, sl
						n++;
    9c84:	3301      	adds	r3, #1
    9c86:	b2db      	uxtb	r3, r3
				for (j = 0 ;j < k; j++)
    9c88:	2c02      	cmp	r4, #2
    9c8a:	d000      	beq.n	9c8e <determinant+0x40a>
    9c8c:	e726      	b.n	9adc <determinant+0x258>
			det = det + s * (a[0][c] * determinant(b, k - 1));
    9c8e:	9b08      	ldr	r3, [sp, #32]
    9c90:	aa24      	add	r2, sp, #144	; 0x90
    9c92:	009b      	lsls	r3, r3, #2
    9c94:	58d3      	ldr	r3, [r2, r3]
    9c96:	464d      	mov	r5, r9
    9c98:	931e      	str	r3, [sp, #120]	; 0x78
	if (k == 1)
    9c9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9c9c:	2b01      	cmp	r3, #1
    9c9e:	d101      	bne.n	9ca4 <determinant+0x420>
    9ca0:	f000 fdf0 	bl	a884 <determinant+0x1000>
    9ca4:	2300      	movs	r3, #0
    9ca6:	9309      	str	r3, [sp, #36]	; 0x24
    9ca8:	2300      	movs	r3, #0
    9caa:	9310      	str	r3, [sp, #64]	; 0x40
    9cac:	23fe      	movs	r3, #254	; 0xfe
    9cae:	059b      	lsls	r3, r3, #22
    9cb0:	931a      	str	r3, [sp, #104]	; 0x68
    9cb2:	2300      	movs	r3, #0
    9cb4:	469c      	mov	ip, r3
					b[i][j] = 0;
    9cb6:	2000      	movs	r0, #0
							n = 0;
    9cb8:	2701      	movs	r7, #1
    9cba:	9c14      	ldr	r4, [sp, #80]	; 0x50
					b[i][j] = 0;
    9cbc:	4681      	mov	r9, r0
    9cbe:	1ea0      	subs	r0, r4, #2
    9cc0:	4680      	mov	r8, r0
    9cc2:	0038      	movs	r0, r7
							n = 0;
    9cc4:	ae48      	add	r6, sp, #288	; 0x120
    9cc6:	a96c      	add	r1, sp, #432	; 0x1b0
    9cc8:	2300      	movs	r3, #0
    9cca:	2200      	movs	r2, #0
    9ccc:	46aa      	mov	sl, r5
    9cce:	0037      	movs	r7, r6
    9cd0:	4683      	mov	fp, r0
    9cd2:	e088      	b.n	9de6 <determinant+0x562>
					b[i][j] = 0;
    9cd4:	4648      	mov	r0, r9
    9cd6:	6048      	str	r0, [r1, #4]
					if (i != 0 && j != c)
    9cd8:	4660      	mov	r0, ip
							m++;
    9cda:	3201      	adds	r2, #1
    9cdc:	b2d2      	uxtb	r2, r2
							n = 0;
    9cde:	2300      	movs	r3, #0
					if (i != 0 && j != c)
    9ce0:	2801      	cmp	r0, #1
    9ce2:	d100      	bne.n	9ce6 <determinant+0x462>
    9ce4:	e0a0      	b.n	9e28 <determinant+0x5a4>
						b[m][n] = a[i][j];
    9ce6:	2690      	movs	r6, #144	; 0x90
    9ce8:	0055      	lsls	r5, r2, #1
    9cea:	18ad      	adds	r5, r5, r2
    9cec:	0076      	lsls	r6, r6, #1
    9cee:	006d      	lsls	r5, r5, #1
    9cf0:	a824      	add	r0, sp, #144	; 0x90
    9cf2:	1980      	adds	r0, r0, r6
    9cf4:	18ed      	adds	r5, r5, r3
    9cf6:	687e      	ldr	r6, [r7, #4]
    9cf8:	00ad      	lsls	r5, r5, #2
    9cfa:	5146      	str	r6, [r0, r5]
						if (n < (k - 2))
    9cfc:	4543      	cmp	r3, r8
    9cfe:	da00      	bge.n	9d02 <determinant+0x47e>
    9d00:	e0e5      	b.n	9ece <determinant+0x64a>
							m++;
    9d02:	3201      	adds	r2, #1
    9d04:	b2d2      	uxtb	r2, r2
							n = 0;
    9d06:	2300      	movs	r3, #0
				for (j = 0 ;j < k; j++)
    9d08:	2c02      	cmp	r4, #2
    9d0a:	d100      	bne.n	9d0e <determinant+0x48a>
    9d0c:	e0e4      	b.n	9ed8 <determinant+0x654>
					b[i][j] = 0;
    9d0e:	4648      	mov	r0, r9
    9d10:	6088      	str	r0, [r1, #8]
					if (i != 0 && j != c)
    9d12:	9809      	ldr	r0, [sp, #36]	; 0x24
    9d14:	2802      	cmp	r0, #2
    9d16:	d101      	bne.n	9d1c <determinant+0x498>
    9d18:	f000 fdd3 	bl	a8c2 <determinant+0x103e>
						b[m][n] = a[i][j];
    9d1c:	2690      	movs	r6, #144	; 0x90
    9d1e:	0055      	lsls	r5, r2, #1
    9d20:	18ad      	adds	r5, r5, r2
    9d22:	0076      	lsls	r6, r6, #1
    9d24:	006d      	lsls	r5, r5, #1
    9d26:	a824      	add	r0, sp, #144	; 0x90
    9d28:	1980      	adds	r0, r0, r6
    9d2a:	18ed      	adds	r5, r5, r3
    9d2c:	68be      	ldr	r6, [r7, #8]
    9d2e:	00ad      	lsls	r5, r5, #2
    9d30:	5146      	str	r6, [r0, r5]
						if (n < (k - 2))
    9d32:	4543      	cmp	r3, r8
    9d34:	da00      	bge.n	9d38 <determinant+0x4b4>
    9d36:	e0c7      	b.n	9ec8 <determinant+0x644>
							n = 0;
    9d38:	2300      	movs	r3, #0
							m++;
    9d3a:	3201      	adds	r2, #1
    9d3c:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    9d3e:	2c03      	cmp	r4, #3
    9d40:	d049      	beq.n	9dd6 <determinant+0x552>
					b[i][j] = 0;
    9d42:	4648      	mov	r0, r9
    9d44:	60c8      	str	r0, [r1, #12]
					if (i != 0 && j != c)
    9d46:	9809      	ldr	r0, [sp, #36]	; 0x24
    9d48:	2803      	cmp	r0, #3
    9d4a:	d101      	bne.n	9d50 <determinant+0x4cc>
    9d4c:	f000 fdb1 	bl	a8b2 <determinant+0x102e>
						b[m][n] = a[i][j];
    9d50:	2690      	movs	r6, #144	; 0x90
    9d52:	0055      	lsls	r5, r2, #1
    9d54:	18ad      	adds	r5, r5, r2
    9d56:	0076      	lsls	r6, r6, #1
    9d58:	006d      	lsls	r5, r5, #1
    9d5a:	a824      	add	r0, sp, #144	; 0x90
    9d5c:	1980      	adds	r0, r0, r6
    9d5e:	18ed      	adds	r5, r5, r3
    9d60:	68fe      	ldr	r6, [r7, #12]
    9d62:	00ad      	lsls	r5, r5, #2
    9d64:	5146      	str	r6, [r0, r5]
						if (n < (k - 2))
    9d66:	4543      	cmp	r3, r8
    9d68:	da00      	bge.n	9d6c <determinant+0x4e8>
    9d6a:	e1d9      	b.n	a120 <determinant+0x89c>
							n = 0;
    9d6c:	2300      	movs	r3, #0
							m++;
    9d6e:	3201      	adds	r2, #1
    9d70:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    9d72:	2c04      	cmp	r4, #4
    9d74:	d02f      	beq.n	9dd6 <determinant+0x552>
					b[i][j] = 0;
    9d76:	4648      	mov	r0, r9
    9d78:	6108      	str	r0, [r1, #16]
					if (i != 0 && j != c)
    9d7a:	9809      	ldr	r0, [sp, #36]	; 0x24
    9d7c:	2804      	cmp	r0, #4
    9d7e:	d101      	bne.n	9d84 <determinant+0x500>
    9d80:	f000 fd8f 	bl	a8a2 <determinant+0x101e>
						b[m][n] = a[i][j];
    9d84:	2690      	movs	r6, #144	; 0x90
    9d86:	0055      	lsls	r5, r2, #1
    9d88:	18ad      	adds	r5, r5, r2
    9d8a:	0076      	lsls	r6, r6, #1
    9d8c:	006d      	lsls	r5, r5, #1
    9d8e:	a824      	add	r0, sp, #144	; 0x90
    9d90:	1980      	adds	r0, r0, r6
    9d92:	18ed      	adds	r5, r5, r3
    9d94:	693e      	ldr	r6, [r7, #16]
    9d96:	00ad      	lsls	r5, r5, #2
    9d98:	5146      	str	r6, [r0, r5]
						if (n < (k - 2))
    9d9a:	4543      	cmp	r3, r8
    9d9c:	da00      	bge.n	9da0 <determinant+0x51c>
    9d9e:	e1bc      	b.n	a11a <determinant+0x896>
							n = 0;
    9da0:	2300      	movs	r3, #0
							m++;
    9da2:	3201      	adds	r2, #1
    9da4:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    9da6:	2c05      	cmp	r4, #5
    9da8:	d015      	beq.n	9dd6 <determinant+0x552>
					b[i][j] = 0;
    9daa:	4648      	mov	r0, r9
    9dac:	6148      	str	r0, [r1, #20]
					if (i != 0 && j != c)
    9dae:	9809      	ldr	r0, [sp, #36]	; 0x24
    9db0:	2805      	cmp	r0, #5
    9db2:	d010      	beq.n	9dd6 <determinant+0x552>
						b[m][n] = a[i][j];
    9db4:	2690      	movs	r6, #144	; 0x90
    9db6:	0055      	lsls	r5, r2, #1
    9db8:	18ad      	adds	r5, r5, r2
    9dba:	0076      	lsls	r6, r6, #1
    9dbc:	006d      	lsls	r5, r5, #1
    9dbe:	a824      	add	r0, sp, #144	; 0x90
    9dc0:	1980      	adds	r0, r0, r6
    9dc2:	18ed      	adds	r5, r5, r3
    9dc4:	697e      	ldr	r6, [r7, #20]
    9dc6:	00ad      	lsls	r5, r5, #2
    9dc8:	5146      	str	r6, [r0, r5]
						if (n < (k - 2))
    9dca:	4543      	cmp	r3, r8
    9dcc:	da00      	bge.n	9dd0 <determinant+0x54c>
    9dce:	e1a1      	b.n	a114 <determinant+0x890>
							n = 0;
    9dd0:	2300      	movs	r3, #0
							m++;
    9dd2:	3201      	adds	r2, #1
    9dd4:	b2d2      	uxtb	r2, r2
			for (i = 0;i < k; i++)
    9dd6:	455c      	cmp	r4, fp
    9dd8:	d97e      	bls.n	9ed8 <determinant+0x654>
    9dda:	465e      	mov	r6, fp
    9ddc:	3601      	adds	r6, #1
    9dde:	b2f0      	uxtb	r0, r6
    9de0:	4683      	mov	fp, r0
    9de2:	3118      	adds	r1, #24
    9de4:	3718      	adds	r7, #24
					b[i][j] = 0;
    9de6:	4648      	mov	r0, r9
    9de8:	6008      	str	r0, [r1, #0]
					if (i != 0 && j != c)
    9dea:	4658      	mov	r0, fp
    9dec:	2801      	cmp	r0, #1
    9dee:	d100      	bne.n	9df2 <determinant+0x56e>
    9df0:	e199      	b.n	a126 <determinant+0x8a2>
    9df2:	9d09      	ldr	r5, [sp, #36]	; 0x24
    9df4:	2d00      	cmp	r5, #0
    9df6:	d101      	bne.n	9dfc <determinant+0x578>
    9df8:	f000 fd73 	bl	a8e2 <determinant+0x105e>
						b[m][n] = a[i][j];
    9dfc:	2090      	movs	r0, #144	; 0x90
    9dfe:	0055      	lsls	r5, r2, #1
    9e00:	18ad      	adds	r5, r5, r2
    9e02:	0040      	lsls	r0, r0, #1
    9e04:	006d      	lsls	r5, r5, #1
    9e06:	ae24      	add	r6, sp, #144	; 0x90
    9e08:	1836      	adds	r6, r6, r0
    9e0a:	18ed      	adds	r5, r5, r3
    9e0c:	6838      	ldr	r0, [r7, #0]
    9e0e:	00ad      	lsls	r5, r5, #2
    9e10:	5170      	str	r0, [r6, r5]
						if (n < (k - 2))
    9e12:	4543      	cmp	r3, r8
    9e14:	db00      	blt.n	9e18 <determinant+0x594>
    9e16:	e75d      	b.n	9cd4 <determinant+0x450>
					b[i][j] = 0;
    9e18:	4648      	mov	r0, r9
    9e1a:	6048      	str	r0, [r1, #4]
					if (i != 0 && j != c)
    9e1c:	4660      	mov	r0, ip
						n++;
    9e1e:	3301      	adds	r3, #1
    9e20:	b2db      	uxtb	r3, r3
					if (i != 0 && j != c)
    9e22:	2801      	cmp	r0, #1
    9e24:	d000      	beq.n	9e28 <determinant+0x5a4>
    9e26:	e75e      	b.n	9ce6 <determinant+0x462>
				for (j = 0 ;j < k; j++)
    9e28:	2c02      	cmp	r4, #2
    9e2a:	d055      	beq.n	9ed8 <determinant+0x654>
					b[i][j] = 0;
    9e2c:	4648      	mov	r0, r9
    9e2e:	6088      	str	r0, [r1, #8]
    9e30:	e774      	b.n	9d1c <determinant+0x498>
						n++;
    9e32:	3301      	adds	r3, #1
    9e34:	b2db      	uxtb	r3, r3
    9e36:	e667      	b.n	9b08 <determinant+0x284>
				for (j = 0 ;j < k; j++)
    9e38:	4654      	mov	r4, sl
					b[i][j] = 0;
    9e3a:	6048      	str	r0, [r1, #4]
				for (j = 0 ;j < k; j++)
    9e3c:	2c02      	cmp	r4, #2
    9e3e:	d100      	bne.n	9e42 <determinant+0x5be>
    9e40:	e6ac      	b.n	9b9c <determinant+0x318>
    9e42:	4654      	mov	r4, sl
					b[i][j] = 0;
    9e44:	6088      	str	r0, [r1, #8]
				for (j = 0 ;j < k; j++)
    9e46:	2c03      	cmp	r4, #3
    9e48:	d100      	bne.n	9e4c <determinant+0x5c8>
    9e4a:	e6a7      	b.n	9b9c <determinant+0x318>
    9e4c:	4654      	mov	r4, sl
					b[i][j] = 0;
    9e4e:	60c8      	str	r0, [r1, #12]
				for (j = 0 ;j < k; j++)
    9e50:	2c04      	cmp	r4, #4
    9e52:	d100      	bne.n	9e56 <determinant+0x5d2>
    9e54:	e6a2      	b.n	9b9c <determinant+0x318>
    9e56:	4654      	mov	r4, sl
					b[i][j] = 0;
    9e58:	6108      	str	r0, [r1, #16]
				for (j = 0 ;j < k; j++)
    9e5a:	2c05      	cmp	r4, #5
    9e5c:	d100      	bne.n	9e60 <determinant+0x5dc>
    9e5e:	e69d      	b.n	9b9c <determinant+0x318>
					b[i][j] = 0;
    9e60:	6148      	str	r0, [r1, #20]
    9e62:	e69b      	b.n	9b9c <determinant+0x318>
						n++;
    9e64:	3301      	adds	r3, #1
    9e66:	b2db      	uxtb	r3, r3
    9e68:	e695      	b.n	9b96 <determinant+0x312>
    9e6a:	3301      	adds	r3, #1
    9e6c:	b2db      	uxtb	r3, r3
    9e6e:	e67b      	b.n	9b68 <determinant+0x2e4>
    9e70:	3301      	adds	r3, #1
    9e72:	b2db      	uxtb	r3, r3
    9e74:	e660      	b.n	9b38 <determinant+0x2b4>
				for (j = 0 ;j < k; j++)
    9e76:	4654      	mov	r4, sl
    9e78:	2c04      	cmp	r4, #4
    9e7a:	d100      	bne.n	9e7e <determinant+0x5fa>
    9e7c:	e68b      	b.n	9b96 <determinant+0x312>
					b[i][j] = 0;
    9e7e:	6108      	str	r0, [r1, #16]
    9e80:	e662      	b.n	9b48 <determinant+0x2c4>
		return (a[0][0]);
    9e82:	9b24      	ldr	r3, [sp, #144]	; 0x90
    9e84:	930f      	str	r3, [sp, #60]	; 0x3c
    9e86:	1c19      	adds	r1, r3, #0
			det = det + s * (a[0][c] * determinant(b, k - 1));
    9e88:	4bcb      	ldr	r3, [pc, #812]	; (a1b8 <determinant+0x934>)
    9e8a:	981d      	ldr	r0, [sp, #116]	; 0x74
    9e8c:	4798      	blx	r3
    9e8e:	9c18      	ldr	r4, [sp, #96]	; 0x60
    9e90:	4bc9      	ldr	r3, [pc, #804]	; (a1b8 <determinant+0x934>)
    9e92:	1c21      	adds	r1, r4, #0
    9e94:	4798      	blx	r3
    9e96:	4bc9      	ldr	r3, [pc, #804]	; (a1bc <determinant+0x938>)
    9e98:	1c01      	adds	r1, r0, #0
    9e9a:	980d      	ldr	r0, [sp, #52]	; 0x34
    9e9c:	4798      	blx	r3
			s = -1 * s;
    9e9e:	2280      	movs	r2, #128	; 0x80
    9ea0:	0612      	lsls	r2, r2, #24
    9ea2:	4694      	mov	ip, r2
    9ea4:	0023      	movs	r3, r4
    9ea6:	4463      	add	r3, ip
    9ea8:	9318      	str	r3, [sp, #96]	; 0x60
    9eaa:	9b06      	ldr	r3, [sp, #24]
		for (c = 0; c < k; c++)
    9eac:	9a21      	ldr	r2, [sp, #132]	; 0x84
    9eae:	3301      	adds	r3, #1
			det = det + s * (a[0][c] * determinant(b, k - 1));
    9eb0:	900d      	str	r0, [sp, #52]	; 0x34
    9eb2:	9306      	str	r3, [sp, #24]
		for (c = 0; c < k; c++)
    9eb4:	429a      	cmp	r2, r3
    9eb6:	d000      	beq.n	9eba <determinant+0x636>
    9eb8:	e515      	b.n	98e6 <determinant+0x62>
    9eba:	e6d0      	b.n	9c5e <determinant+0x3da>
				for (j = 0 ;j < k; j++)
    9ebc:	4654      	mov	r4, sl
    9ebe:	2c05      	cmp	r4, #5
    9ec0:	d100      	bne.n	9ec4 <determinant+0x640>
    9ec2:	e668      	b.n	9b96 <determinant+0x312>
					b[i][j] = 0;
    9ec4:	6148      	str	r0, [r1, #20]
    9ec6:	e656      	b.n	9b76 <determinant+0x2f2>
						n++;
    9ec8:	3301      	adds	r3, #1
    9eca:	b2db      	uxtb	r3, r3
    9ecc:	e737      	b.n	9d3e <determinant+0x4ba>
    9ece:	3301      	adds	r3, #1
    9ed0:	b2db      	uxtb	r3, r3
				for (j = 0 ;j < k; j++)
    9ed2:	2c02      	cmp	r4, #2
    9ed4:	d000      	beq.n	9ed8 <determinant+0x654>
    9ed6:	e71a      	b.n	9d0e <determinant+0x48a>
			det = det + s * (a[0][c] * determinant(b, k - 1));
    9ed8:	2190      	movs	r1, #144	; 0x90
    9eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9edc:	aa24      	add	r2, sp, #144	; 0x90
    9ede:	009b      	lsls	r3, r3, #2
    9ee0:	1852      	adds	r2, r2, r1
    9ee2:	58d3      	ldr	r3, [r2, r3]
    9ee4:	4655      	mov	r5, sl
    9ee6:	931f      	str	r3, [sp, #124]	; 0x7c
	if (k == 1)
    9ee8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    9eea:	2b01      	cmp	r3, #1
    9eec:	d101      	bne.n	9ef2 <determinant+0x66e>
    9eee:	f000 fd2a 	bl	a946 <determinant+0x10c2>
    9ef2:	2300      	movs	r3, #0
    9ef4:	9313      	str	r3, [sp, #76]	; 0x4c
    9ef6:	2300      	movs	r3, #0
    9ef8:	9311      	str	r3, [sp, #68]	; 0x44
    9efa:	23fe      	movs	r3, #254	; 0xfe
    9efc:	059b      	lsls	r3, r3, #22
    9efe:	931b      	str	r3, [sp, #108]	; 0x6c
    9f00:	2300      	movs	r3, #0
    9f02:	46aa      	mov	sl, r5
    9f04:	469b      	mov	fp, r3
    9f06:	22ff      	movs	r2, #255	; 0xff
    9f08:	4694      	mov	ip, r2
    9f0a:	9a15      	ldr	r2, [sp, #84]	; 0x54
							n = 0;
    9f0c:	2301      	movs	r3, #1
    9f0e:	1e96      	subs	r6, r2, #2
    9f10:	9200      	str	r2, [sp, #0]
    9f12:	4652      	mov	r2, sl
    9f14:	9204      	str	r2, [sp, #16]
    9f16:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    9f18:	4699      	mov	r9, r3
    9f1a:	4692      	mov	sl, r2
    9f1c:	465a      	mov	r2, fp
    9f1e:	2000      	movs	r0, #0
    9f20:	2300      	movs	r3, #0
    9f22:	2100      	movs	r1, #0
					b[i][j] = 0;
    9f24:	2500      	movs	r5, #0
    9f26:	9203      	str	r2, [sp, #12]
    9f28:	46b0      	mov	r8, r6
    9f2a:	e0c9      	b.n	a0c0 <determinant+0x83c>
							n = 0;
    9f2c:	2300      	movs	r3, #0
							m++;
    9f2e:	3101      	adds	r1, #1
    9f30:	b2c9      	uxtb	r1, r1
					b[i][j] = 0;
    9f32:	9c01      	ldr	r4, [sp, #4]
    9f34:	1826      	adds	r6, r4, r0
    9f36:	ac90      	add	r4, sp, #576	; 0x240
    9f38:	46a3      	mov	fp, r4
    9f3a:	00f6      	lsls	r6, r6, #3
					if (i != 0 && j != c)
    9f3c:	9c03      	ldr	r4, [sp, #12]
					b[i][j] = 0;
    9f3e:	445e      	add	r6, fp
    9f40:	6075      	str	r5, [r6, #4]
					if (i != 0 && j != c)
    9f42:	4693      	mov	fp, r2
    9f44:	2c01      	cmp	r4, #1
    9f46:	d101      	bne.n	9f4c <determinant+0x6c8>
    9f48:	f000 fcc3 	bl	a8d2 <determinant+0x104e>
						b[m][n] = a[i][j];
    9f4c:	465c      	mov	r4, fp
    9f4e:	26d8      	movs	r6, #216	; 0xd8
    9f50:	6864      	ldr	r4, [r4, #4]
    9f52:	004a      	lsls	r2, r1, #1
    9f54:	1852      	adds	r2, r2, r1
    9f56:	9402      	str	r4, [sp, #8]
    9f58:	0076      	lsls	r6, r6, #1
    9f5a:	0052      	lsls	r2, r2, #1
    9f5c:	ac24      	add	r4, sp, #144	; 0x90
    9f5e:	19a4      	adds	r4, r4, r6
    9f60:	18d2      	adds	r2, r2, r3
    9f62:	9e02      	ldr	r6, [sp, #8]
    9f64:	0092      	lsls	r2, r2, #2
    9f66:	50a6      	str	r6, [r4, r2]
						if (n < (k - 2))
    9f68:	4543      	cmp	r3, r8
    9f6a:	da00      	bge.n	9f6e <determinant+0x6ea>
    9f6c:	e0f2      	b.n	a154 <determinant+0x8d0>
							n = 0;
    9f6e:	2300      	movs	r3, #0
							m++;
    9f70:	3101      	adds	r1, #1
    9f72:	b2c9      	uxtb	r1, r1
				for (j = 0 ;j < k; j++)
    9f74:	9a00      	ldr	r2, [sp, #0]
    9f76:	2a02      	cmp	r2, #2
    9f78:	d100      	bne.n	9f7c <determinant+0x6f8>
    9f7a:	e099      	b.n	a0b0 <determinant+0x82c>
					b[i][j] = 0;
    9f7c:	ac90      	add	r4, sp, #576	; 0x240
    9f7e:	46a3      	mov	fp, r4
					if (i != 0 && j != c)
    9f80:	4654      	mov	r4, sl
					b[i][j] = 0;
    9f82:	9a01      	ldr	r2, [sp, #4]
    9f84:	1812      	adds	r2, r2, r0
    9f86:	00d2      	lsls	r2, r2, #3
    9f88:	445a      	add	r2, fp
    9f8a:	6095      	str	r5, [r2, #8]
					if (i != 0 && j != c)
    9f8c:	2c02      	cmp	r4, #2
    9f8e:	d101      	bne.n	9f94 <determinant+0x710>
    9f90:	f000 fcc3 	bl	a91a <determinant+0x1096>
    9f94:	4666      	mov	r6, ip
    9f96:	ac6c      	add	r4, sp, #432	; 0x1b0
    9f98:	46a3      	mov	fp, r4
    9f9a:	4006      	ands	r6, r0
    9f9c:	0072      	lsls	r2, r6, #1
    9f9e:	1992      	adds	r2, r2, r6
    9fa0:	00d2      	lsls	r2, r2, #3
    9fa2:	445a      	add	r2, fp
						b[m][n] = a[i][j];
    9fa4:	24d8      	movs	r4, #216	; 0xd8
    9fa6:	6892      	ldr	r2, [r2, #8]
    9fa8:	004e      	lsls	r6, r1, #1
    9faa:	1876      	adds	r6, r6, r1
    9fac:	9202      	str	r2, [sp, #8]
    9fae:	0064      	lsls	r4, r4, #1
    9fb0:	0076      	lsls	r6, r6, #1
    9fb2:	aa24      	add	r2, sp, #144	; 0x90
    9fb4:	1912      	adds	r2, r2, r4
    9fb6:	18f6      	adds	r6, r6, r3
    9fb8:	9c02      	ldr	r4, [sp, #8]
    9fba:	00b6      	lsls	r6, r6, #2
    9fbc:	5194      	str	r4, [r2, r6]
						if (n < (k - 2))
    9fbe:	4543      	cmp	r3, r8
    9fc0:	da00      	bge.n	9fc4 <determinant+0x740>
    9fc2:	e1f7      	b.n	a3b4 <determinant+0xb30>
							n = 0;
    9fc4:	2300      	movs	r3, #0
							m++;
    9fc6:	3101      	adds	r1, #1
    9fc8:	b2c9      	uxtb	r1, r1
				for (j = 0 ;j < k; j++)
    9fca:	9a00      	ldr	r2, [sp, #0]
    9fcc:	2a03      	cmp	r2, #3
    9fce:	d06f      	beq.n	a0b0 <determinant+0x82c>
					b[i][j] = 0;
    9fd0:	ac90      	add	r4, sp, #576	; 0x240
    9fd2:	46a3      	mov	fp, r4
					if (i != 0 && j != c)
    9fd4:	4654      	mov	r4, sl
					b[i][j] = 0;
    9fd6:	9a01      	ldr	r2, [sp, #4]
    9fd8:	1812      	adds	r2, r2, r0
    9fda:	00d2      	lsls	r2, r2, #3
    9fdc:	445a      	add	r2, fp
    9fde:	60d5      	str	r5, [r2, #12]
					if (i != 0 && j != c)
    9fe0:	2c03      	cmp	r4, #3
    9fe2:	d101      	bne.n	9fe8 <determinant+0x764>
    9fe4:	f000 fc89 	bl	a8fa <determinant+0x1076>
						b[m][n] = a[i][j];
    9fe8:	4666      	mov	r6, ip
    9fea:	ac6c      	add	r4, sp, #432	; 0x1b0
    9fec:	46a3      	mov	fp, r4
    9fee:	27d8      	movs	r7, #216	; 0xd8
    9ff0:	4006      	ands	r6, r0
    9ff2:	0072      	lsls	r2, r6, #1
    9ff4:	1992      	adds	r2, r2, r6
    9ff6:	004e      	lsls	r6, r1, #1
    9ff8:	00d2      	lsls	r2, r2, #3
    9ffa:	1876      	adds	r6, r6, r1
    9ffc:	007f      	lsls	r7, r7, #1
    9ffe:	445a      	add	r2, fp
    a000:	0076      	lsls	r6, r6, #1
    a002:	ac24      	add	r4, sp, #144	; 0x90
    a004:	19e4      	adds	r4, r4, r7
    a006:	18f6      	adds	r6, r6, r3
    a008:	68d7      	ldr	r7, [r2, #12]
    a00a:	00b6      	lsls	r6, r6, #2
    a00c:	51a7      	str	r7, [r4, r6]
						if (n < (k - 2))
    a00e:	4543      	cmp	r3, r8
    a010:	da00      	bge.n	a014 <determinant+0x790>
    a012:	e1cc      	b.n	a3ae <determinant+0xb2a>
							n = 0;
    a014:	2300      	movs	r3, #0
							m++;
    a016:	3101      	adds	r1, #1
    a018:	b2c9      	uxtb	r1, r1
				for (j = 0 ;j < k; j++)
    a01a:	9c00      	ldr	r4, [sp, #0]
    a01c:	2c04      	cmp	r4, #4
    a01e:	d047      	beq.n	a0b0 <determinant+0x82c>
					b[i][j] = 0;
    a020:	9c01      	ldr	r4, [sp, #4]
    a022:	1826      	adds	r6, r4, r0
    a024:	ac90      	add	r4, sp, #576	; 0x240
    a026:	46a3      	mov	fp, r4
					if (i != 0 && j != c)
    a028:	4654      	mov	r4, sl
					b[i][j] = 0;
    a02a:	00f6      	lsls	r6, r6, #3
    a02c:	445e      	add	r6, fp
    a02e:	6135      	str	r5, [r6, #16]
					if (i != 0 && j != c)
    a030:	4693      	mov	fp, r2
    a032:	2c04      	cmp	r4, #4
    a034:	d101      	bne.n	a03a <determinant+0x7b6>
    a036:	f000 fc58 	bl	a8ea <determinant+0x1066>
						b[m][n] = a[i][j];
    a03a:	465c      	mov	r4, fp
    a03c:	26d8      	movs	r6, #216	; 0xd8
    a03e:	6924      	ldr	r4, [r4, #16]
    a040:	004a      	lsls	r2, r1, #1
    a042:	1852      	adds	r2, r2, r1
    a044:	9402      	str	r4, [sp, #8]
    a046:	0076      	lsls	r6, r6, #1
    a048:	0052      	lsls	r2, r2, #1
    a04a:	ac24      	add	r4, sp, #144	; 0x90
    a04c:	19a4      	adds	r4, r4, r6
    a04e:	18d2      	adds	r2, r2, r3
    a050:	9e02      	ldr	r6, [sp, #8]
    a052:	0092      	lsls	r2, r2, #2
    a054:	50a6      	str	r6, [r4, r2]
						if (n < (k - 2))
    a056:	4543      	cmp	r3, r8
    a058:	da00      	bge.n	a05c <determinant+0x7d8>
    a05a:	e1a5      	b.n	a3a8 <determinant+0xb24>
							n = 0;
    a05c:	2300      	movs	r3, #0
							m++;
    a05e:	3101      	adds	r1, #1
    a060:	b2c9      	uxtb	r1, r1
				for (j = 0 ;j < k; j++)
    a062:	9a00      	ldr	r2, [sp, #0]
    a064:	2a05      	cmp	r2, #5
    a066:	d023      	beq.n	a0b0 <determinant+0x82c>
					b[i][j] = 0;
    a068:	9a01      	ldr	r2, [sp, #4]
    a06a:	1814      	adds	r4, r2, r0
    a06c:	aa90      	add	r2, sp, #576	; 0x240
    a06e:	4693      	mov	fp, r2
					if (i != 0 && j != c)
    a070:	4652      	mov	r2, sl
					b[i][j] = 0;
    a072:	00e4      	lsls	r4, r4, #3
    a074:	445c      	add	r4, fp
    a076:	6165      	str	r5, [r4, #20]
					if (i != 0 && j != c)
    a078:	2a05      	cmp	r2, #5
    a07a:	d019      	beq.n	a0b0 <determinant+0x82c>
    a07c:	4664      	mov	r4, ip
    a07e:	4004      	ands	r4, r0
    a080:	0062      	lsls	r2, r4, #1
    a082:	1912      	adds	r2, r2, r4
    a084:	ac6c      	add	r4, sp, #432	; 0x1b0
    a086:	46a3      	mov	fp, r4
    a088:	00d2      	lsls	r2, r2, #3
    a08a:	445a      	add	r2, fp
						b[m][n] = a[i][j];
    a08c:	26d8      	movs	r6, #216	; 0xd8
    a08e:	6952      	ldr	r2, [r2, #20]
    a090:	004c      	lsls	r4, r1, #1
    a092:	1864      	adds	r4, r4, r1
    a094:	9201      	str	r2, [sp, #4]
    a096:	0076      	lsls	r6, r6, #1
    a098:	0064      	lsls	r4, r4, #1
    a09a:	aa24      	add	r2, sp, #144	; 0x90
    a09c:	1992      	adds	r2, r2, r6
    a09e:	18e4      	adds	r4, r4, r3
    a0a0:	9e01      	ldr	r6, [sp, #4]
    a0a2:	00a4      	lsls	r4, r4, #2
    a0a4:	5116      	str	r6, [r2, r4]
						if (n < (k - 2))
    a0a6:	4543      	cmp	r3, r8
    a0a8:	db57      	blt.n	a15a <determinant+0x8d6>
							n = 0;
    a0aa:	2300      	movs	r3, #0
							m++;
    a0ac:	3101      	adds	r1, #1
    a0ae:	b2c9      	uxtb	r1, r1
			for (i = 0;i < k; i++)
    a0b0:	9a00      	ldr	r2, [sp, #0]
    a0b2:	454a      	cmp	r2, r9
    a0b4:	d956      	bls.n	a164 <determinant+0x8e0>
    a0b6:	464a      	mov	r2, r9
    a0b8:	3201      	adds	r2, #1
    a0ba:	b2d2      	uxtb	r2, r2
    a0bc:	4691      	mov	r9, r2
    a0be:	3001      	adds	r0, #1
					b[i][j] = 0;
    a0c0:	27d8      	movs	r7, #216	; 0xd8
    a0c2:	0042      	lsls	r2, r0, #1
    a0c4:	9201      	str	r2, [sp, #4]
    a0c6:	ae24      	add	r6, sp, #144	; 0x90
    a0c8:	1812      	adds	r2, r2, r0
    a0ca:	007f      	lsls	r7, r7, #1
    a0cc:	00d2      	lsls	r2, r2, #3
    a0ce:	19f6      	adds	r6, r6, r7
    a0d0:	50b5      	str	r5, [r6, r2]
					if (i != 0 && j != c)
    a0d2:	2800      	cmp	r0, #0
    a0d4:	d100      	bne.n	a0d8 <determinant+0x854>
    a0d6:	e170      	b.n	a3ba <determinant+0xb36>
    a0d8:	4656      	mov	r6, sl
    a0da:	2e00      	cmp	r6, #0
    a0dc:	d101      	bne.n	a0e2 <determinant+0x85e>
    a0de:	f000 fc24 	bl	a92a <determinant+0x10a6>
						b[m][n] = a[i][j];
    a0e2:	4666      	mov	r6, ip
    a0e4:	4006      	ands	r6, r0
    a0e6:	0072      	lsls	r2, r6, #1
    a0e8:	1992      	adds	r2, r2, r6
    a0ea:	ae6c      	add	r6, sp, #432	; 0x1b0
    a0ec:	46b3      	mov	fp, r6
    a0ee:	24d8      	movs	r4, #216	; 0xd8
    a0f0:	004e      	lsls	r6, r1, #1
    a0f2:	00d2      	lsls	r2, r2, #3
    a0f4:	1876      	adds	r6, r6, r1
    a0f6:	0064      	lsls	r4, r4, #1
    a0f8:	445a      	add	r2, fp
    a0fa:	0076      	lsls	r6, r6, #1
    a0fc:	af24      	add	r7, sp, #144	; 0x90
    a0fe:	193f      	adds	r7, r7, r4
    a100:	18f6      	adds	r6, r6, r3
    a102:	6814      	ldr	r4, [r2, #0]
    a104:	00b6      	lsls	r6, r6, #2
    a106:	51bc      	str	r4, [r7, r6]
						if (n < (k - 2))
    a108:	4543      	cmp	r3, r8
    a10a:	db00      	blt.n	a10e <determinant+0x88a>
    a10c:	e70e      	b.n	9f2c <determinant+0x6a8>
						n++;
    a10e:	3301      	adds	r3, #1
    a110:	b2db      	uxtb	r3, r3
    a112:	e70e      	b.n	9f32 <determinant+0x6ae>
    a114:	3301      	adds	r3, #1
    a116:	b2db      	uxtb	r3, r3
    a118:	e65d      	b.n	9dd6 <determinant+0x552>
    a11a:	3301      	adds	r3, #1
    a11c:	b2db      	uxtb	r3, r3
    a11e:	e642      	b.n	9da6 <determinant+0x522>
    a120:	3301      	adds	r3, #1
    a122:	b2db      	uxtb	r3, r3
    a124:	e625      	b.n	9d72 <determinant+0x4ee>
					b[i][j] = 0;
    a126:	4648      	mov	r0, r9
    a128:	6048      	str	r0, [r1, #4]
				for (j = 0 ;j < k; j++)
    a12a:	2c02      	cmp	r4, #2
    a12c:	d100      	bne.n	a130 <determinant+0x8ac>
    a12e:	e654      	b.n	9dda <determinant+0x556>
					b[i][j] = 0;
    a130:	4648      	mov	r0, r9
    a132:	6088      	str	r0, [r1, #8]
				for (j = 0 ;j < k; j++)
    a134:	2c03      	cmp	r4, #3
    a136:	d100      	bne.n	a13a <determinant+0x8b6>
    a138:	e64d      	b.n	9dd6 <determinant+0x552>
					b[i][j] = 0;
    a13a:	4648      	mov	r0, r9
    a13c:	60c8      	str	r0, [r1, #12]
				for (j = 0 ;j < k; j++)
    a13e:	2c04      	cmp	r4, #4
    a140:	d100      	bne.n	a144 <determinant+0x8c0>
    a142:	e648      	b.n	9dd6 <determinant+0x552>
					b[i][j] = 0;
    a144:	4648      	mov	r0, r9
    a146:	6108      	str	r0, [r1, #16]
				for (j = 0 ;j < k; j++)
    a148:	2c05      	cmp	r4, #5
    a14a:	d100      	bne.n	a14e <determinant+0x8ca>
    a14c:	e643      	b.n	9dd6 <determinant+0x552>
					b[i][j] = 0;
    a14e:	4648      	mov	r0, r9
    a150:	6148      	str	r0, [r1, #20]
    a152:	e642      	b.n	9dda <determinant+0x556>
						n++;
    a154:	3301      	adds	r3, #1
    a156:	b2db      	uxtb	r3, r3
    a158:	e70c      	b.n	9f74 <determinant+0x6f0>
			for (i = 0;i < k; i++)
    a15a:	9a00      	ldr	r2, [sp, #0]
						n++;
    a15c:	3301      	adds	r3, #1
    a15e:	b2db      	uxtb	r3, r3
			for (i = 0;i < k; i++)
    a160:	454a      	cmp	r2, r9
    a162:	d8a8      	bhi.n	a0b6 <determinant+0x832>
			det = det + s * (a[0][c] * determinant(b, k - 1));
    a164:	2190      	movs	r1, #144	; 0x90
    a166:	9b04      	ldr	r3, [sp, #16]
    a168:	aa24      	add	r2, sp, #144	; 0x90
    a16a:	469a      	mov	sl, r3
    a16c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a16e:	0049      	lsls	r1, r1, #1
    a170:	009b      	lsls	r3, r3, #2
    a172:	1852      	adds	r2, r2, r1
    a174:	58d3      	ldr	r3, [r2, r3]
    a176:	9320      	str	r3, [sp, #128]	; 0x80
	if (k == 1)
    a178:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a17a:	2b01      	cmp	r3, #1
    a17c:	d100      	bne.n	a180 <determinant+0x8fc>
    a17e:	e323      	b.n	a7c8 <determinant+0xf44>
    a180:	2300      	movs	r3, #0
    a182:	9307      	str	r3, [sp, #28]
    a184:	2300      	movs	r3, #0
    a186:	930a      	str	r3, [sp, #40]	; 0x28
    a188:	23fe      	movs	r3, #254	; 0xfe
    a18a:	059b      	lsls	r3, r3, #22
    a18c:	9312      	str	r3, [sp, #72]	; 0x48
    a18e:	2300      	movs	r3, #0
    a190:	469b      	mov	fp, r3
    a192:	21ff      	movs	r1, #255	; 0xff
    a194:	4688      	mov	r8, r1
    a196:	990b      	ldr	r1, [sp, #44]	; 0x2c
							n = 0;
    a198:	2301      	movs	r3, #1
    a19a:	1e8e      	subs	r6, r1, #2
    a19c:	4689      	mov	r9, r1
    a19e:	4651      	mov	r1, sl
    a1a0:	9103      	str	r1, [sp, #12]
    a1a2:	9907      	ldr	r1, [sp, #28]
    a1a4:	469c      	mov	ip, r3
    a1a6:	468a      	mov	sl, r1
    a1a8:	4659      	mov	r1, fp
    a1aa:	2000      	movs	r0, #0
    a1ac:	2300      	movs	r3, #0
    a1ae:	2200      	movs	r2, #0
    a1b0:	9102      	str	r1, [sp, #8]
    a1b2:	9600      	str	r6, [sp, #0]
    a1b4:	e0ce      	b.n	a354 <determinant+0xad0>
    a1b6:	46c0      	nop			; (mov r8, r8)
    a1b8:	0001d939 	.word	0x0001d939
    a1bc:	0001d235 	.word	0x0001d235
    a1c0:	2300      	movs	r3, #0
							m++;
    a1c2:	3201      	adds	r2, #1
    a1c4:	b2d2      	uxtb	r2, r2
					b[i][j] = 0;
    a1c6:	adb4      	add	r5, sp, #720	; 0x2d0
    a1c8:	46ab      	mov	fp, r5
    a1ca:	2500      	movs	r5, #0
    a1cc:	1827      	adds	r7, r4, r0
    a1ce:	00ff      	lsls	r7, r7, #3
    a1d0:	445f      	add	r7, fp
    a1d2:	607d      	str	r5, [r7, #4]
					if (i != 0 && j != c)
    a1d4:	9d02      	ldr	r5, [sp, #8]
    a1d6:	468b      	mov	fp, r1
    a1d8:	2d01      	cmp	r5, #1
    a1da:	d100      	bne.n	a1de <determinant+0x95a>
    a1dc:	e344      	b.n	a868 <determinant+0xfe4>
						b[m][n] = a[i][j];
    a1de:	465d      	mov	r5, fp
    a1e0:	2690      	movs	r6, #144	; 0x90
    a1e2:	686d      	ldr	r5, [r5, #4]
    a1e4:	0051      	lsls	r1, r2, #1
    a1e6:	1889      	adds	r1, r1, r2
    a1e8:	9501      	str	r5, [sp, #4]
    a1ea:	00b6      	lsls	r6, r6, #2
    a1ec:	0049      	lsls	r1, r1, #1
    a1ee:	ad24      	add	r5, sp, #144	; 0x90
    a1f0:	19ad      	adds	r5, r5, r6
    a1f2:	18c9      	adds	r1, r1, r3
    a1f4:	9e01      	ldr	r6, [sp, #4]
    a1f6:	0089      	lsls	r1, r1, #2
    a1f8:	506e      	str	r6, [r5, r1]
						if (n < (k - 2))
    a1fa:	9900      	ldr	r1, [sp, #0]
    a1fc:	428b      	cmp	r3, r1
    a1fe:	da00      	bge.n	a202 <determinant+0x97e>
    a200:	e0ee      	b.n	a3e0 <determinant+0xb5c>
							n = 0;
    a202:	2300      	movs	r3, #0
							m++;
    a204:	3201      	adds	r2, #1
    a206:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    a208:	4649      	mov	r1, r9
    a20a:	2902      	cmp	r1, #2
    a20c:	d100      	bne.n	a210 <determinant+0x98c>
    a20e:	e09a      	b.n	a346 <determinant+0xac2>
					b[i][j] = 0;
    a210:	adb4      	add	r5, sp, #720	; 0x2d0
    a212:	46ab      	mov	fp, r5
    a214:	2500      	movs	r5, #0
    a216:	1821      	adds	r1, r4, r0
    a218:	00c9      	lsls	r1, r1, #3
    a21a:	4459      	add	r1, fp
    a21c:	608d      	str	r5, [r1, #8]
					if (i != 0 && j != c)
    a21e:	4655      	mov	r5, sl
    a220:	2d02      	cmp	r5, #2
    a222:	d100      	bne.n	a226 <determinant+0x9a2>
    a224:	e2e3      	b.n	a7ee <determinant+0xf6a>
    a226:	4647      	mov	r7, r8
    a228:	ad90      	add	r5, sp, #576	; 0x240
    a22a:	46ab      	mov	fp, r5
    a22c:	4007      	ands	r7, r0
    a22e:	0079      	lsls	r1, r7, #1
    a230:	19c9      	adds	r1, r1, r7
    a232:	00c9      	lsls	r1, r1, #3
    a234:	4459      	add	r1, fp
						b[m][n] = a[i][j];
    a236:	2590      	movs	r5, #144	; 0x90
    a238:	6889      	ldr	r1, [r1, #8]
    a23a:	0057      	lsls	r7, r2, #1
    a23c:	18bf      	adds	r7, r7, r2
    a23e:	9101      	str	r1, [sp, #4]
    a240:	00ad      	lsls	r5, r5, #2
    a242:	007f      	lsls	r7, r7, #1
    a244:	a924      	add	r1, sp, #144	; 0x90
    a246:	1949      	adds	r1, r1, r5
    a248:	18ff      	adds	r7, r7, r3
    a24a:	9d01      	ldr	r5, [sp, #4]
    a24c:	00bf      	lsls	r7, r7, #2
    a24e:	51cd      	str	r5, [r1, r7]
						if (n < (k - 2))
    a250:	9900      	ldr	r1, [sp, #0]
    a252:	428b      	cmp	r3, r1
    a254:	da00      	bge.n	a258 <determinant+0x9d4>
    a256:	e1cd      	b.n	a5f4 <determinant+0xd70>
							n = 0;
    a258:	2300      	movs	r3, #0
							m++;
    a25a:	3201      	adds	r2, #1
    a25c:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    a25e:	4649      	mov	r1, r9
    a260:	2903      	cmp	r1, #3
    a262:	d070      	beq.n	a346 <determinant+0xac2>
					b[i][j] = 0;
    a264:	adb4      	add	r5, sp, #720	; 0x2d0
    a266:	46ab      	mov	fp, r5
    a268:	2500      	movs	r5, #0
    a26a:	1821      	adds	r1, r4, r0
    a26c:	00c9      	lsls	r1, r1, #3
    a26e:	4459      	add	r1, fp
    a270:	60cd      	str	r5, [r1, #12]
					if (i != 0 && j != c)
    a272:	4655      	mov	r5, sl
    a274:	2d03      	cmp	r5, #3
    a276:	d100      	bne.n	a27a <determinant+0x9f6>
    a278:	e2aa      	b.n	a7d0 <determinant+0xf4c>
						b[m][n] = a[i][j];
    a27a:	4647      	mov	r7, r8
    a27c:	ad90      	add	r5, sp, #576	; 0x240
    a27e:	46ab      	mov	fp, r5
    a280:	2690      	movs	r6, #144	; 0x90
    a282:	4007      	ands	r7, r0
    a284:	0079      	lsls	r1, r7, #1
    a286:	19c9      	adds	r1, r1, r7
    a288:	0057      	lsls	r7, r2, #1
    a28a:	00c9      	lsls	r1, r1, #3
    a28c:	18bf      	adds	r7, r7, r2
    a28e:	00b6      	lsls	r6, r6, #2
    a290:	4459      	add	r1, fp
    a292:	007f      	lsls	r7, r7, #1
    a294:	ad24      	add	r5, sp, #144	; 0x90
    a296:	19ad      	adds	r5, r5, r6
    a298:	18ff      	adds	r7, r7, r3
    a29a:	68ce      	ldr	r6, [r1, #12]
    a29c:	00bf      	lsls	r7, r7, #2
    a29e:	51ee      	str	r6, [r5, r7]
						if (n < (k - 2))
    a2a0:	9d00      	ldr	r5, [sp, #0]
    a2a2:	42ab      	cmp	r3, r5
    a2a4:	da00      	bge.n	a2a8 <determinant+0xa24>
    a2a6:	e1a2      	b.n	a5ee <determinant+0xd6a>
							n = 0;
    a2a8:	2300      	movs	r3, #0
							m++;
    a2aa:	3201      	adds	r2, #1
    a2ac:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    a2ae:	464d      	mov	r5, r9
    a2b0:	2d04      	cmp	r5, #4
    a2b2:	d048      	beq.n	a346 <determinant+0xac2>
					b[i][j] = 0;
    a2b4:	adb4      	add	r5, sp, #720	; 0x2d0
    a2b6:	46ab      	mov	fp, r5
    a2b8:	2500      	movs	r5, #0
    a2ba:	1827      	adds	r7, r4, r0
    a2bc:	00ff      	lsls	r7, r7, #3
    a2be:	445f      	add	r7, fp
    a2c0:	613d      	str	r5, [r7, #16]
					if (i != 0 && j != c)
    a2c2:	4655      	mov	r5, sl
    a2c4:	468b      	mov	fp, r1
    a2c6:	2d04      	cmp	r5, #4
    a2c8:	d100      	bne.n	a2cc <determinant+0xa48>
    a2ca:	e2d4      	b.n	a876 <determinant+0xff2>
						b[m][n] = a[i][j];
    a2cc:	465d      	mov	r5, fp
    a2ce:	2690      	movs	r6, #144	; 0x90
    a2d0:	692d      	ldr	r5, [r5, #16]
    a2d2:	0051      	lsls	r1, r2, #1
    a2d4:	1889      	adds	r1, r1, r2
    a2d6:	9501      	str	r5, [sp, #4]
    a2d8:	00b6      	lsls	r6, r6, #2
    a2da:	0049      	lsls	r1, r1, #1
    a2dc:	ad24      	add	r5, sp, #144	; 0x90
    a2de:	19ad      	adds	r5, r5, r6
    a2e0:	18c9      	adds	r1, r1, r3
    a2e2:	9e01      	ldr	r6, [sp, #4]
    a2e4:	0089      	lsls	r1, r1, #2
    a2e6:	506e      	str	r6, [r5, r1]
						if (n < (k - 2))
    a2e8:	9900      	ldr	r1, [sp, #0]
    a2ea:	428b      	cmp	r3, r1
    a2ec:	da00      	bge.n	a2f0 <determinant+0xa6c>
    a2ee:	e17b      	b.n	a5e8 <determinant+0xd64>
							n = 0;
    a2f0:	2300      	movs	r3, #0
							m++;
    a2f2:	3201      	adds	r2, #1
    a2f4:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    a2f6:	4649      	mov	r1, r9
    a2f8:	2905      	cmp	r1, #5
    a2fa:	d024      	beq.n	a346 <determinant+0xac2>
					b[i][j] = 0;
    a2fc:	a9b4      	add	r1, sp, #720	; 0x2d0
    a2fe:	468b      	mov	fp, r1
    a300:	2100      	movs	r1, #0
    a302:	1824      	adds	r4, r4, r0
    a304:	00e4      	lsls	r4, r4, #3
    a306:	445c      	add	r4, fp
    a308:	6161      	str	r1, [r4, #20]
					if (i != 0 && j != c)
    a30a:	4651      	mov	r1, sl
    a30c:	2905      	cmp	r1, #5
    a30e:	d01a      	beq.n	a346 <determinant+0xac2>
    a310:	4644      	mov	r4, r8
    a312:	4004      	ands	r4, r0
    a314:	0061      	lsls	r1, r4, #1
    a316:	1909      	adds	r1, r1, r4
    a318:	ac90      	add	r4, sp, #576	; 0x240
    a31a:	46a3      	mov	fp, r4
    a31c:	00c9      	lsls	r1, r1, #3
    a31e:	4459      	add	r1, fp
						b[m][n] = a[i][j];
    a320:	2590      	movs	r5, #144	; 0x90
    a322:	6949      	ldr	r1, [r1, #20]
    a324:	0054      	lsls	r4, r2, #1
    a326:	18a4      	adds	r4, r4, r2
    a328:	9101      	str	r1, [sp, #4]
    a32a:	00ad      	lsls	r5, r5, #2
    a32c:	0064      	lsls	r4, r4, #1
    a32e:	a924      	add	r1, sp, #144	; 0x90
    a330:	1949      	adds	r1, r1, r5
    a332:	18e4      	adds	r4, r4, r3
    a334:	9d01      	ldr	r5, [sp, #4]
    a336:	00a4      	lsls	r4, r4, #2
    a338:	510d      	str	r5, [r1, r4]
						if (n < (k - 2))
    a33a:	9900      	ldr	r1, [sp, #0]
    a33c:	428b      	cmp	r3, r1
    a33e:	db52      	blt.n	a3e6 <determinant+0xb62>
							n = 0;
    a340:	2300      	movs	r3, #0
							m++;
    a342:	3201      	adds	r2, #1
    a344:	b2d2      	uxtb	r2, r2
			for (i = 0;i < k; i++)
    a346:	45e1      	cmp	r9, ip
    a348:	d951      	bls.n	a3ee <determinant+0xb6a>
    a34a:	4661      	mov	r1, ip
    a34c:	3101      	adds	r1, #1
    a34e:	b2c9      	uxtb	r1, r1
    a350:	468c      	mov	ip, r1
    a352:	3001      	adds	r0, #1
					b[i][j] = 0;
    a354:	2690      	movs	r6, #144	; 0x90
    a356:	2500      	movs	r5, #0
    a358:	0044      	lsls	r4, r0, #1
    a35a:	1821      	adds	r1, r4, r0
    a35c:	af24      	add	r7, sp, #144	; 0x90
    a35e:	00b6      	lsls	r6, r6, #2
    a360:	00c9      	lsls	r1, r1, #3
    a362:	19bf      	adds	r7, r7, r6
    a364:	507d      	str	r5, [r7, r1]
					if (i != 0 && j != c)
    a366:	2800      	cmp	r0, #0
    a368:	d100      	bne.n	a36c <determinant+0xae8>
    a36a:	e146      	b.n	a5fa <determinant+0xd76>
    a36c:	4656      	mov	r6, sl
    a36e:	2e00      	cmp	r6, #0
    a370:	d100      	bne.n	a374 <determinant+0xaf0>
    a372:	e243      	b.n	a7fc <determinant+0xf78>
						b[m][n] = a[i][j];
    a374:	4647      	mov	r7, r8
    a376:	ae90      	add	r6, sp, #576	; 0x240
    a378:	46b3      	mov	fp, r6
    a37a:	2590      	movs	r5, #144	; 0x90
    a37c:	4007      	ands	r7, r0
    a37e:	0079      	lsls	r1, r7, #1
    a380:	19c9      	adds	r1, r1, r7
    a382:	0057      	lsls	r7, r2, #1
    a384:	00c9      	lsls	r1, r1, #3
    a386:	18bf      	adds	r7, r7, r2
    a388:	00ad      	lsls	r5, r5, #2
    a38a:	4459      	add	r1, fp
    a38c:	007f      	lsls	r7, r7, #1
    a38e:	ae24      	add	r6, sp, #144	; 0x90
    a390:	1976      	adds	r6, r6, r5
    a392:	18ff      	adds	r7, r7, r3
    a394:	680d      	ldr	r5, [r1, #0]
    a396:	00bf      	lsls	r7, r7, #2
    a398:	51f5      	str	r5, [r6, r7]
						if (n < (k - 2))
    a39a:	9d00      	ldr	r5, [sp, #0]
    a39c:	42ab      	cmp	r3, r5
    a39e:	db00      	blt.n	a3a2 <determinant+0xb1e>
    a3a0:	e70e      	b.n	a1c0 <determinant+0x93c>
						n++;
    a3a2:	3301      	adds	r3, #1
    a3a4:	b2db      	uxtb	r3, r3
    a3a6:	e70e      	b.n	a1c6 <determinant+0x942>
    a3a8:	3301      	adds	r3, #1
    a3aa:	b2db      	uxtb	r3, r3
    a3ac:	e659      	b.n	a062 <determinant+0x7de>
    a3ae:	3301      	adds	r3, #1
    a3b0:	b2db      	uxtb	r3, r3
    a3b2:	e632      	b.n	a01a <determinant+0x796>
    a3b4:	3301      	adds	r3, #1
    a3b6:	b2db      	uxtb	r3, r3
    a3b8:	e607      	b.n	9fca <determinant+0x746>
				for (j = 0 ;j < k; j++)
    a3ba:	9a00      	ldr	r2, [sp, #0]
					b[i][j] = 0;
    a3bc:	9591      	str	r5, [sp, #580]	; 0x244
				for (j = 0 ;j < k; j++)
    a3be:	2a02      	cmp	r2, #2
    a3c0:	d100      	bne.n	a3c4 <determinant+0xb40>
    a3c2:	e675      	b.n	a0b0 <determinant+0x82c>
					b[i][j] = 0;
    a3c4:	9592      	str	r5, [sp, #584]	; 0x248
				for (j = 0 ;j < k; j++)
    a3c6:	2a03      	cmp	r2, #3
    a3c8:	d100      	bne.n	a3cc <determinant+0xb48>
    a3ca:	e671      	b.n	a0b0 <determinant+0x82c>
					b[i][j] = 0;
    a3cc:	9593      	str	r5, [sp, #588]	; 0x24c
				for (j = 0 ;j < k; j++)
    a3ce:	2a04      	cmp	r2, #4
    a3d0:	d100      	bne.n	a3d4 <determinant+0xb50>
    a3d2:	e66d      	b.n	a0b0 <determinant+0x82c>
					b[i][j] = 0;
    a3d4:	9594      	str	r5, [sp, #592]	; 0x250
				for (j = 0 ;j < k; j++)
    a3d6:	2a05      	cmp	r2, #5
    a3d8:	d100      	bne.n	a3dc <determinant+0xb58>
    a3da:	e669      	b.n	a0b0 <determinant+0x82c>
					b[i][j] = 0;
    a3dc:	9595      	str	r5, [sp, #596]	; 0x254
    a3de:	e66a      	b.n	a0b6 <determinant+0x832>
						n++;
    a3e0:	3301      	adds	r3, #1
    a3e2:	b2db      	uxtb	r3, r3
    a3e4:	e710      	b.n	a208 <determinant+0x984>
    a3e6:	3301      	adds	r3, #1
    a3e8:	b2db      	uxtb	r3, r3
			for (i = 0;i < k; i++)
    a3ea:	45e1      	cmp	r9, ip
    a3ec:	d8ad      	bhi.n	a34a <determinant+0xac6>
			det = det + s * (a[0][c] * determinant(b, k - 1));
    a3ee:	21d8      	movs	r1, #216	; 0xd8
    a3f0:	9b03      	ldr	r3, [sp, #12]
    a3f2:	aa24      	add	r2, sp, #144	; 0x90
    a3f4:	469a      	mov	sl, r3
    a3f6:	9b07      	ldr	r3, [sp, #28]
    a3f8:	0049      	lsls	r1, r1, #1
    a3fa:	009b      	lsls	r3, r3, #2
    a3fc:	1852      	adds	r2, r2, r1
    a3fe:	58d3      	ldr	r3, [r2, r3]
    a400:	9316      	str	r3, [sp, #88]	; 0x58
	if (k == 1)
    a402:	4653      	mov	r3, sl
    a404:	2b01      	cmp	r3, #1
    a406:	d100      	bne.n	a40a <determinant+0xb86>
    a408:	e1da      	b.n	a7c0 <determinant+0xf3c>
    a40a:	2300      	movs	r3, #0
    a40c:	9303      	str	r3, [sp, #12]
    a40e:	23fe      	movs	r3, #254	; 0xfe
    a410:	059b      	lsls	r3, r3, #22
    a412:	9304      	str	r3, [sp, #16]
    a414:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a416:	2600      	movs	r6, #0
    a418:	3b05      	subs	r3, #5
    a41a:	9305      	str	r3, [sp, #20]
    a41c:	2300      	movs	r3, #0
    a41e:	4657      	mov	r7, sl
    a420:	acd8      	add	r4, sp, #864	; 0x360
    a422:	9302      	str	r3, [sp, #8]
					b[i][j] = 0;
    a424:	2100      	movs	r1, #0
    a426:	4688      	mov	r8, r1
    a428:	21ff      	movs	r1, #255	; 0xff
							n = 0;
    a42a:	2301      	movs	r3, #1
    a42c:	468a      	mov	sl, r1
    a42e:	1eb9      	subs	r1, r7, #2
    a430:	9301      	str	r3, [sp, #4]
    a432:	2000      	movs	r0, #0
    a434:	2300      	movs	r3, #0
    a436:	2200      	movs	r2, #0
    a438:	46bc      	mov	ip, r7
    a43a:	9100      	str	r1, [sp, #0]
    a43c:	46b1      	mov	r9, r6
    a43e:	e0b1      	b.n	a5a4 <determinant+0xd20>
    a440:	2300      	movs	r3, #0
							m++;
    a442:	3201      	adds	r2, #1
    a444:	b2d2      	uxtb	r2, r2
					b[i][j] = 0;
    a446:	4647      	mov	r7, r8
    a448:	182e      	adds	r6, r5, r0
    a44a:	00f6      	lsls	r6, r6, #3
    a44c:	19a6      	adds	r6, r4, r6
    a44e:	6077      	str	r7, [r6, #4]
					if (i != 0 && j != c)
    a450:	9f02      	ldr	r7, [sp, #8]
    a452:	468b      	mov	fp, r1
    a454:	2f01      	cmp	r7, #1
    a456:	d100      	bne.n	a45a <determinant+0xbd6>
    a458:	e1ea      	b.n	a830 <determinant+0xfac>
						b[m][n] = a[i][j];
    a45a:	465e      	mov	r6, fp
    a45c:	0051      	lsls	r1, r2, #1
    a45e:	1889      	adds	r1, r1, r2
    a460:	0049      	lsls	r1, r1, #1
    a462:	18c9      	adds	r1, r1, r3
    a464:	6876      	ldr	r6, [r6, #4]
    a466:	0089      	lsls	r1, r1, #2
    a468:	5066      	str	r6, [r4, r1]
						if (n < (k - 2))
    a46a:	9900      	ldr	r1, [sp, #0]
    a46c:	428b      	cmp	r3, r1
    a46e:	da00      	bge.n	a472 <determinant+0xbee>
    a470:	e0de      	b.n	a630 <determinant+0xdac>
							n = 0;
    a472:	2300      	movs	r3, #0
							m++;
    a474:	3201      	adds	r2, #1
    a476:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    a478:	4661      	mov	r1, ip
    a47a:	2902      	cmp	r1, #2
    a47c:	d100      	bne.n	a480 <determinant+0xbfc>
    a47e:	e08a      	b.n	a596 <determinant+0xd12>
					b[i][j] = 0;
    a480:	4646      	mov	r6, r8
    a482:	1829      	adds	r1, r5, r0
    a484:	00c9      	lsls	r1, r1, #3
    a486:	1861      	adds	r1, r4, r1
    a488:	608e      	str	r6, [r1, #8]
					if (i != 0 && j != c)
    a48a:	464e      	mov	r6, r9
    a48c:	2e02      	cmp	r6, #2
    a48e:	d100      	bne.n	a492 <determinant+0xc0e>
    a490:	e1dc      	b.n	a84c <determinant+0xfc8>
    a492:	4656      	mov	r6, sl
    a494:	4006      	ands	r6, r0
    a496:	0071      	lsls	r1, r6, #1
    a498:	1989      	adds	r1, r1, r6
    a49a:	aeb4      	add	r6, sp, #720	; 0x2d0
    a49c:	46b3      	mov	fp, r6
    a49e:	00c9      	lsls	r1, r1, #3
    a4a0:	4459      	add	r1, fp
						b[m][n] = a[i][j];
    a4a2:	0056      	lsls	r6, r2, #1
    a4a4:	18b6      	adds	r6, r6, r2
    a4a6:	0076      	lsls	r6, r6, #1
    a4a8:	6889      	ldr	r1, [r1, #8]
    a4aa:	18f6      	adds	r6, r6, r3
    a4ac:	00b6      	lsls	r6, r6, #2
    a4ae:	51a1      	str	r1, [r4, r6]
						if (n < (k - 2))
    a4b0:	9900      	ldr	r1, [sp, #0]
    a4b2:	428b      	cmp	r3, r1
    a4b4:	da00      	bge.n	a4b8 <determinant+0xc34>
    a4b6:	e165      	b.n	a784 <determinant+0xf00>
							n = 0;
    a4b8:	2300      	movs	r3, #0
							m++;
    a4ba:	3201      	adds	r2, #1
    a4bc:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    a4be:	4661      	mov	r1, ip
    a4c0:	2903      	cmp	r1, #3
    a4c2:	d068      	beq.n	a596 <determinant+0xd12>
					b[i][j] = 0;
    a4c4:	4646      	mov	r6, r8
    a4c6:	1829      	adds	r1, r5, r0
    a4c8:	00c9      	lsls	r1, r1, #3
    a4ca:	1861      	adds	r1, r4, r1
    a4cc:	60ce      	str	r6, [r1, #12]
					if (i != 0 && j != c)
    a4ce:	464e      	mov	r6, r9
    a4d0:	2e03      	cmp	r6, #3
    a4d2:	d100      	bne.n	a4d6 <determinant+0xc52>
    a4d4:	e1b3      	b.n	a83e <determinant+0xfba>
						b[m][n] = a[i][j];
    a4d6:	4656      	mov	r6, sl
    a4d8:	4006      	ands	r6, r0
    a4da:	46b3      	mov	fp, r6
    a4dc:	affc      	add	r7, sp, #1008	; 0x3f0
    a4de:	0076      	lsls	r6, r6, #1
    a4e0:	445e      	add	r6, fp
    a4e2:	46bb      	mov	fp, r7
    a4e4:	00f6      	lsls	r6, r6, #3
    a4e6:	0051      	lsls	r1, r2, #1
    a4e8:	445e      	add	r6, fp
    a4ea:	1889      	adds	r1, r1, r2
    a4ec:	3e21      	subs	r6, #33	; 0x21
    a4ee:	0049      	lsls	r1, r1, #1
    a4f0:	3eff      	subs	r6, #255	; 0xff
    a4f2:	18c9      	adds	r1, r1, r3
    a4f4:	68f6      	ldr	r6, [r6, #12]
    a4f6:	0089      	lsls	r1, r1, #2
    a4f8:	5066      	str	r6, [r4, r1]
						if (n < (k - 2))
    a4fa:	9900      	ldr	r1, [sp, #0]
    a4fc:	428b      	cmp	r3, r1
    a4fe:	da00      	bge.n	a502 <determinant+0xc7e>
    a500:	e13d      	b.n	a77e <determinant+0xefa>
							n = 0;
    a502:	2300      	movs	r3, #0
							m++;
    a504:	3201      	adds	r2, #1
    a506:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    a508:	4661      	mov	r1, ip
    a50a:	2904      	cmp	r1, #4
    a50c:	d043      	beq.n	a596 <determinant+0xd12>
					b[i][j] = 0;
    a50e:	4646      	mov	r6, r8
    a510:	1829      	adds	r1, r5, r0
    a512:	00c9      	lsls	r1, r1, #3
    a514:	1861      	adds	r1, r4, r1
    a516:	610e      	str	r6, [r1, #16]
					if (i != 0 && j != c)
    a518:	464e      	mov	r6, r9
    a51a:	2e04      	cmp	r6, #4
    a51c:	d100      	bne.n	a520 <determinant+0xc9c>
    a51e:	e19c      	b.n	a85a <determinant+0xfd6>
						b[m][n] = a[i][j];
    a520:	4656      	mov	r6, sl
    a522:	4006      	ands	r6, r0
    a524:	46b3      	mov	fp, r6
    a526:	affc      	add	r7, sp, #1008	; 0x3f0
    a528:	0076      	lsls	r6, r6, #1
    a52a:	445e      	add	r6, fp
    a52c:	46bb      	mov	fp, r7
    a52e:	00f6      	lsls	r6, r6, #3
    a530:	0051      	lsls	r1, r2, #1
    a532:	445e      	add	r6, fp
    a534:	1889      	adds	r1, r1, r2
    a536:	3e21      	subs	r6, #33	; 0x21
    a538:	0049      	lsls	r1, r1, #1
    a53a:	3eff      	subs	r6, #255	; 0xff
    a53c:	18c9      	adds	r1, r1, r3
    a53e:	6936      	ldr	r6, [r6, #16]
    a540:	0089      	lsls	r1, r1, #2
    a542:	5066      	str	r6, [r4, r1]
						if (n < (k - 2))
    a544:	9900      	ldr	r1, [sp, #0]
    a546:	428b      	cmp	r3, r1
    a548:	da00      	bge.n	a54c <determinant+0xcc8>
    a54a:	e115      	b.n	a778 <determinant+0xef4>
							n = 0;
    a54c:	2300      	movs	r3, #0
							m++;
    a54e:	3201      	adds	r2, #1
    a550:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    a552:	4661      	mov	r1, ip
    a554:	2905      	cmp	r1, #5
    a556:	d01e      	beq.n	a596 <determinant+0xd12>
					b[i][j] = 0;
    a558:	4641      	mov	r1, r8
    a55a:	182d      	adds	r5, r5, r0
    a55c:	00ed      	lsls	r5, r5, #3
    a55e:	1965      	adds	r5, r4, r5
    a560:	6169      	str	r1, [r5, #20]
					if (i != 0 && j != c)
    a562:	4649      	mov	r1, r9
    a564:	2905      	cmp	r1, #5
    a566:	d016      	beq.n	a596 <determinant+0xd12>
						b[m][n] = a[i][j];
    a568:	4656      	mov	r6, sl
    a56a:	4006      	ands	r6, r0
    a56c:	0075      	lsls	r5, r6, #1
    a56e:	19ad      	adds	r5, r5, r6
    a570:	aefc      	add	r6, sp, #1008	; 0x3f0
    a572:	46b3      	mov	fp, r6
    a574:	00ed      	lsls	r5, r5, #3
    a576:	0051      	lsls	r1, r2, #1
    a578:	445d      	add	r5, fp
    a57a:	1889      	adds	r1, r1, r2
    a57c:	3d21      	subs	r5, #33	; 0x21
    a57e:	0049      	lsls	r1, r1, #1
    a580:	3dff      	subs	r5, #255	; 0xff
    a582:	18c9      	adds	r1, r1, r3
    a584:	696d      	ldr	r5, [r5, #20]
    a586:	0089      	lsls	r1, r1, #2
    a588:	5065      	str	r5, [r4, r1]
						if (n < (k - 2))
    a58a:	9900      	ldr	r1, [sp, #0]
    a58c:	428b      	cmp	r3, r1
    a58e:	db52      	blt.n	a636 <determinant+0xdb2>
							n = 0;
    a590:	2300      	movs	r3, #0
							m++;
    a592:	3201      	adds	r2, #1
    a594:	b2d2      	uxtb	r2, r2
			for (i = 0;i < k; i++)
    a596:	9901      	ldr	r1, [sp, #4]
    a598:	458c      	cmp	ip, r1
    a59a:	d951      	bls.n	a640 <determinant+0xdbc>
    a59c:	3101      	adds	r1, #1
    a59e:	b2c9      	uxtb	r1, r1
    a5a0:	3001      	adds	r0, #1
    a5a2:	9101      	str	r1, [sp, #4]
					b[i][j] = 0;
    a5a4:	4646      	mov	r6, r8
    a5a6:	0045      	lsls	r5, r0, #1
    a5a8:	1829      	adds	r1, r5, r0
    a5aa:	00c9      	lsls	r1, r1, #3
    a5ac:	5066      	str	r6, [r4, r1]
					if (i != 0 && j != c)
    a5ae:	2800      	cmp	r0, #0
    a5b0:	d100      	bne.n	a5b4 <determinant+0xd30>
    a5b2:	e0ea      	b.n	a78a <determinant+0xf06>
    a5b4:	464e      	mov	r6, r9
    a5b6:	2e00      	cmp	r6, #0
    a5b8:	d100      	bne.n	a5bc <determinant+0xd38>
    a5ba:	e12d      	b.n	a818 <determinant+0xf94>
						b[m][n] = a[i][j];
    a5bc:	4656      	mov	r6, sl
    a5be:	4006      	ands	r6, r0
    a5c0:	0071      	lsls	r1, r6, #1
    a5c2:	1989      	adds	r1, r1, r6
    a5c4:	aeb4      	add	r6, sp, #720	; 0x2d0
    a5c6:	46b3      	mov	fp, r6
    a5c8:	0056      	lsls	r6, r2, #1
    a5ca:	00c9      	lsls	r1, r1, #3
    a5cc:	18b6      	adds	r6, r6, r2
    a5ce:	4459      	add	r1, fp
    a5d0:	0076      	lsls	r6, r6, #1
    a5d2:	18f6      	adds	r6, r6, r3
    a5d4:	680f      	ldr	r7, [r1, #0]
    a5d6:	00b6      	lsls	r6, r6, #2
    a5d8:	51a7      	str	r7, [r4, r6]
						if (n < (k - 2))
    a5da:	9e00      	ldr	r6, [sp, #0]
    a5dc:	42b3      	cmp	r3, r6
    a5de:	db00      	blt.n	a5e2 <determinant+0xd5e>
    a5e0:	e72e      	b.n	a440 <determinant+0xbbc>
						n++;
    a5e2:	3301      	adds	r3, #1
    a5e4:	b2db      	uxtb	r3, r3
    a5e6:	e72e      	b.n	a446 <determinant+0xbc2>
    a5e8:	3301      	adds	r3, #1
    a5ea:	b2db      	uxtb	r3, r3
    a5ec:	e683      	b.n	a2f6 <determinant+0xa72>
    a5ee:	3301      	adds	r3, #1
    a5f0:	b2db      	uxtb	r3, r3
    a5f2:	e65c      	b.n	a2ae <determinant+0xa2a>
    a5f4:	3301      	adds	r3, #1
    a5f6:	b2db      	uxtb	r3, r3
    a5f8:	e631      	b.n	a25e <determinant+0x9da>
					b[i][j] = 0;
    a5fa:	2100      	movs	r1, #0
    a5fc:	91b5      	str	r1, [sp, #724]	; 0x2d4
				for (j = 0 ;j < k; j++)
    a5fe:	4649      	mov	r1, r9
    a600:	2902      	cmp	r1, #2
    a602:	d100      	bne.n	a606 <determinant+0xd82>
    a604:	e69f      	b.n	a346 <determinant+0xac2>
					b[i][j] = 0;
    a606:	2100      	movs	r1, #0
    a608:	91b6      	str	r1, [sp, #728]	; 0x2d8
				for (j = 0 ;j < k; j++)
    a60a:	4649      	mov	r1, r9
    a60c:	2903      	cmp	r1, #3
    a60e:	d100      	bne.n	a612 <determinant+0xd8e>
    a610:	e699      	b.n	a346 <determinant+0xac2>
					b[i][j] = 0;
    a612:	2100      	movs	r1, #0
    a614:	91b7      	str	r1, [sp, #732]	; 0x2dc
				for (j = 0 ;j < k; j++)
    a616:	4649      	mov	r1, r9
    a618:	2904      	cmp	r1, #4
    a61a:	d100      	bne.n	a61e <determinant+0xd9a>
    a61c:	e693      	b.n	a346 <determinant+0xac2>
					b[i][j] = 0;
    a61e:	2100      	movs	r1, #0
    a620:	91b8      	str	r1, [sp, #736]	; 0x2e0
				for (j = 0 ;j < k; j++)
    a622:	4649      	mov	r1, r9
    a624:	2905      	cmp	r1, #5
    a626:	d100      	bne.n	a62a <determinant+0xda6>
    a628:	e68d      	b.n	a346 <determinant+0xac2>
					b[i][j] = 0;
    a62a:	2100      	movs	r1, #0
    a62c:	91b9      	str	r1, [sp, #740]	; 0x2e4
    a62e:	e68c      	b.n	a34a <determinant+0xac6>
						n++;
    a630:	3301      	adds	r3, #1
    a632:	b2db      	uxtb	r3, r3
    a634:	e720      	b.n	a478 <determinant+0xbf4>
			for (i = 0;i < k; i++)
    a636:	9901      	ldr	r1, [sp, #4]
						n++;
    a638:	3301      	adds	r3, #1
    a63a:	b2db      	uxtb	r3, r3
			for (i = 0;i < k; i++)
    a63c:	458c      	cmp	ip, r1
    a63e:	d8ad      	bhi.n	a59c <determinant+0xd18>
			det = det + s * (a[0][c] * determinant(b, k - 1));
    a640:	466b      	mov	r3, sp
    a642:	0020      	movs	r0, r4
    a644:	7d19      	ldrb	r1, [r3, #20]
    a646:	4667      	mov	r7, ip
    a648:	f7ff f91c 	bl	9884 <determinant>
    a64c:	2190      	movs	r1, #144	; 0x90
    a64e:	464e      	mov	r6, r9
    a650:	0089      	lsls	r1, r1, #2
    a652:	aa24      	add	r2, sp, #144	; 0x90
    a654:	1852      	adds	r2, r2, r1
    a656:	00b3      	lsls	r3, r6, #2
    a658:	58d1      	ldr	r1, [r2, r3]
    a65a:	4bbd      	ldr	r3, [pc, #756]	; (a950 <determinant+0x10cc>)
    a65c:	4798      	blx	r3
    a65e:	9d04      	ldr	r5, [sp, #16]
    a660:	4bbb      	ldr	r3, [pc, #748]	; (a950 <determinant+0x10cc>)
    a662:	1c29      	adds	r1, r5, #0
    a664:	4798      	blx	r3
    a666:	4bbb      	ldr	r3, [pc, #748]	; (a954 <determinant+0x10d0>)
    a668:	1c01      	adds	r1, r0, #0
    a66a:	9803      	ldr	r0, [sp, #12]
    a66c:	4798      	blx	r3
			s = -1 * s;
    a66e:	2280      	movs	r2, #128	; 0x80
    a670:	0612      	lsls	r2, r2, #24
    a672:	002b      	movs	r3, r5
    a674:	4694      	mov	ip, r2
    a676:	3601      	adds	r6, #1
    a678:	4463      	add	r3, ip
    a67a:	9304      	str	r3, [sp, #16]
		for (c = 0; c < k; c++)
    a67c:	b2f3      	uxtb	r3, r6
			det = det + s * (a[0][c] * determinant(b, k - 1));
    a67e:	9003      	str	r0, [sp, #12]
		for (c = 0; c < k; c++)
    a680:	9302      	str	r3, [sp, #8]
    a682:	429f      	cmp	r7, r3
    a684:	d900      	bls.n	a688 <determinant+0xe04>
    a686:	e6cd      	b.n	a424 <determinant+0xba0>
    a688:	46ba      	mov	sl, r7
    a68a:	1c01      	adds	r1, r0, #0
			det = det + s * (a[0][c] * determinant(b, k - 1));
    a68c:	4bb0      	ldr	r3, [pc, #704]	; (a950 <determinant+0x10cc>)
    a68e:	9816      	ldr	r0, [sp, #88]	; 0x58
    a690:	4798      	blx	r3
    a692:	9c12      	ldr	r4, [sp, #72]	; 0x48
    a694:	4bae      	ldr	r3, [pc, #696]	; (a950 <determinant+0x10cc>)
    a696:	1c21      	adds	r1, r4, #0
    a698:	4798      	blx	r3
    a69a:	4bae      	ldr	r3, [pc, #696]	; (a954 <determinant+0x10d0>)
    a69c:	1c01      	adds	r1, r0, #0
    a69e:	980a      	ldr	r0, [sp, #40]	; 0x28
    a6a0:	4798      	blx	r3
			s = -1 * s;
    a6a2:	2280      	movs	r2, #128	; 0x80
    a6a4:	0612      	lsls	r2, r2, #24
    a6a6:	0023      	movs	r3, r4
    a6a8:	4694      	mov	ip, r2
    a6aa:	4463      	add	r3, ip
    a6ac:	9312      	str	r3, [sp, #72]	; 0x48
    a6ae:	9b07      	ldr	r3, [sp, #28]
			det = det + s * (a[0][c] * determinant(b, k - 1));
    a6b0:	900a      	str	r0, [sp, #40]	; 0x28
    a6b2:	3301      	adds	r3, #1
    a6b4:	9307      	str	r3, [sp, #28]
		for (c = 0; c < k; c++)
    a6b6:	b2db      	uxtb	r3, r3
    a6b8:	469b      	mov	fp, r3
    a6ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a6bc:	455b      	cmp	r3, fp
    a6be:	d900      	bls.n	a6c2 <determinant+0xe3e>
    a6c0:	e567      	b.n	a192 <determinant+0x90e>
    a6c2:	1c01      	adds	r1, r0, #0
			det = det + s * (a[0][c] * determinant(b, k - 1));
    a6c4:	4ba2      	ldr	r3, [pc, #648]	; (a950 <determinant+0x10cc>)
    a6c6:	9820      	ldr	r0, [sp, #128]	; 0x80
    a6c8:	4798      	blx	r3
    a6ca:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    a6cc:	4ba0      	ldr	r3, [pc, #640]	; (a950 <determinant+0x10cc>)
    a6ce:	1c21      	adds	r1, r4, #0
    a6d0:	4798      	blx	r3
    a6d2:	4ba0      	ldr	r3, [pc, #640]	; (a954 <determinant+0x10d0>)
    a6d4:	1c01      	adds	r1, r0, #0
    a6d6:	9811      	ldr	r0, [sp, #68]	; 0x44
    a6d8:	4798      	blx	r3
			s = -1 * s;
    a6da:	2280      	movs	r2, #128	; 0x80
    a6dc:	0612      	lsls	r2, r2, #24
    a6de:	0023      	movs	r3, r4
    a6e0:	4694      	mov	ip, r2
    a6e2:	4463      	add	r3, ip
    a6e4:	931b      	str	r3, [sp, #108]	; 0x6c
    a6e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
			det = det + s * (a[0][c] * determinant(b, k - 1));
    a6e8:	9011      	str	r0, [sp, #68]	; 0x44
    a6ea:	3301      	adds	r3, #1
    a6ec:	9313      	str	r3, [sp, #76]	; 0x4c
		for (c = 0; c < k; c++)
    a6ee:	b2db      	uxtb	r3, r3
    a6f0:	469b      	mov	fp, r3
    a6f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a6f4:	455b      	cmp	r3, fp
    a6f6:	d900      	bls.n	a6fa <determinant+0xe76>
    a6f8:	e405      	b.n	9f06 <determinant+0x682>
    a6fa:	4655      	mov	r5, sl
    a6fc:	1c01      	adds	r1, r0, #0
			det = det + s * (a[0][c] * determinant(b, k - 1));
    a6fe:	4b94      	ldr	r3, [pc, #592]	; (a950 <determinant+0x10cc>)
    a700:	981f      	ldr	r0, [sp, #124]	; 0x7c
    a702:	4798      	blx	r3
    a704:	9c1a      	ldr	r4, [sp, #104]	; 0x68
    a706:	4b92      	ldr	r3, [pc, #584]	; (a950 <determinant+0x10cc>)
    a708:	1c21      	adds	r1, r4, #0
    a70a:	4798      	blx	r3
    a70c:	4b91      	ldr	r3, [pc, #580]	; (a954 <determinant+0x10d0>)
    a70e:	1c01      	adds	r1, r0, #0
    a710:	9810      	ldr	r0, [sp, #64]	; 0x40
    a712:	4798      	blx	r3
			s = -1 * s;
    a714:	2280      	movs	r2, #128	; 0x80
    a716:	0612      	lsls	r2, r2, #24
    a718:	4694      	mov	ip, r2
    a71a:	0023      	movs	r3, r4
    a71c:	4463      	add	r3, ip
    a71e:	931a      	str	r3, [sp, #104]	; 0x68
    a720:	9b09      	ldr	r3, [sp, #36]	; 0x24
			det = det + s * (a[0][c] * determinant(b, k - 1));
    a722:	9010      	str	r0, [sp, #64]	; 0x40
    a724:	3301      	adds	r3, #1
    a726:	9309      	str	r3, [sp, #36]	; 0x24
		for (c = 0; c < k; c++)
    a728:	b2db      	uxtb	r3, r3
    a72a:	469c      	mov	ip, r3
    a72c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a72e:	4563      	cmp	r3, ip
    a730:	d901      	bls.n	a736 <determinant+0xeb2>
    a732:	f7ff fac0 	bl	9cb6 <determinant+0x432>
    a736:	1c01      	adds	r1, r0, #0
			det = det + s * (a[0][c] * determinant(b, k - 1));
    a738:	4b85      	ldr	r3, [pc, #532]	; (a950 <determinant+0x10cc>)
    a73a:	981e      	ldr	r0, [sp, #120]	; 0x78
    a73c:	4798      	blx	r3
    a73e:	9c19      	ldr	r4, [sp, #100]	; 0x64
    a740:	4b83      	ldr	r3, [pc, #524]	; (a950 <determinant+0x10cc>)
    a742:	1c21      	adds	r1, r4, #0
    a744:	4798      	blx	r3
    a746:	4b83      	ldr	r3, [pc, #524]	; (a954 <determinant+0x10d0>)
    a748:	1c01      	adds	r1, r0, #0
    a74a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    a74c:	4798      	blx	r3
			s = -1 * s;
    a74e:	2280      	movs	r2, #128	; 0x80
    a750:	0612      	lsls	r2, r2, #24
    a752:	4694      	mov	ip, r2
    a754:	0023      	movs	r3, r4
    a756:	4463      	add	r3, ip
    a758:	9319      	str	r3, [sp, #100]	; 0x64
    a75a:	9b08      	ldr	r3, [sp, #32]
			det = det + s * (a[0][c] * determinant(b, k - 1));
    a75c:	900f      	str	r0, [sp, #60]	; 0x3c
    a75e:	3301      	adds	r3, #1
    a760:	9308      	str	r3, [sp, #32]
		for (c = 0; c < k; c++)
    a762:	b2db      	uxtb	r3, r3
    a764:	469c      	mov	ip, r3
    a766:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a768:	4563      	cmp	r3, ip
    a76a:	d901      	bls.n	a770 <determinant+0xeec>
    a76c:	f7ff f98c 	bl	9a88 <determinant+0x204>
    a770:	46aa      	mov	sl, r5
    a772:	1c01      	adds	r1, r0, #0
    a774:	f7ff fb88 	bl	9e88 <determinant+0x604>
						n++;
    a778:	3301      	adds	r3, #1
    a77a:	b2db      	uxtb	r3, r3
    a77c:	e6e9      	b.n	a552 <determinant+0xcce>
    a77e:	3301      	adds	r3, #1
    a780:	b2db      	uxtb	r3, r3
    a782:	e6c1      	b.n	a508 <determinant+0xc84>
    a784:	3301      	adds	r3, #1
    a786:	b2db      	uxtb	r3, r3
    a788:	e699      	b.n	a4be <determinant+0xc3a>
				for (j = 0 ;j < k; j++)
    a78a:	4661      	mov	r1, ip
					b[i][j] = 0;
    a78c:	6066      	str	r6, [r4, #4]
				for (j = 0 ;j < k; j++)
    a78e:	2902      	cmp	r1, #2
    a790:	d100      	bne.n	a794 <determinant+0xf10>
    a792:	e700      	b.n	a596 <determinant+0xd12>
					b[i][j] = 0;
    a794:	4641      	mov	r1, r8
    a796:	60a1      	str	r1, [r4, #8]
				for (j = 0 ;j < k; j++)
    a798:	4661      	mov	r1, ip
    a79a:	2903      	cmp	r1, #3
    a79c:	d100      	bne.n	a7a0 <determinant+0xf1c>
    a79e:	e6fa      	b.n	a596 <determinant+0xd12>
					b[i][j] = 0;
    a7a0:	4641      	mov	r1, r8
    a7a2:	60e1      	str	r1, [r4, #12]
				for (j = 0 ;j < k; j++)
    a7a4:	4661      	mov	r1, ip
    a7a6:	2904      	cmp	r1, #4
    a7a8:	d100      	bne.n	a7ac <determinant+0xf28>
    a7aa:	e6f4      	b.n	a596 <determinant+0xd12>
					b[i][j] = 0;
    a7ac:	4641      	mov	r1, r8
    a7ae:	6121      	str	r1, [r4, #16]
				for (j = 0 ;j < k; j++)
    a7b0:	4661      	mov	r1, ip
    a7b2:	2905      	cmp	r1, #5
    a7b4:	d100      	bne.n	a7b8 <determinant+0xf34>
    a7b6:	e6ee      	b.n	a596 <determinant+0xd12>
					b[i][j] = 0;
    a7b8:	4641      	mov	r1, r8
    a7ba:	6161      	str	r1, [r4, #20]
    a7bc:	9901      	ldr	r1, [sp, #4]
    a7be:	e6ed      	b.n	a59c <determinant+0xd18>
		return (a[0][0]);
    a7c0:	9bb4      	ldr	r3, [sp, #720]	; 0x2d0
    a7c2:	9303      	str	r3, [sp, #12]
    a7c4:	1c19      	adds	r1, r3, #0
    a7c6:	e761      	b.n	a68c <determinant+0xe08>
    a7c8:	9b90      	ldr	r3, [sp, #576]	; 0x240
    a7ca:	930a      	str	r3, [sp, #40]	; 0x28
    a7cc:	1c19      	adds	r1, r3, #0
    a7ce:	e779      	b.n	a6c4 <determinant+0xe40>
				for (j = 0 ;j < k; j++)
    a7d0:	464d      	mov	r5, r9
    a7d2:	2d04      	cmp	r5, #4
    a7d4:	d100      	bne.n	a7d8 <determinant+0xf54>
    a7d6:	e5b6      	b.n	a346 <determinant+0xac2>
					b[i][j] = 0;
    a7d8:	2500      	movs	r5, #0
    a7da:	4647      	mov	r7, r8
    a7dc:	610d      	str	r5, [r1, #16]
    a7de:	ad90      	add	r5, sp, #576	; 0x240
    a7e0:	46ab      	mov	fp, r5
    a7e2:	4007      	ands	r7, r0
    a7e4:	0079      	lsls	r1, r7, #1
    a7e6:	19c9      	adds	r1, r1, r7
    a7e8:	00c9      	lsls	r1, r1, #3
    a7ea:	448b      	add	fp, r1
    a7ec:	e56e      	b.n	a2cc <determinant+0xa48>
				for (j = 0 ;j < k; j++)
    a7ee:	464d      	mov	r5, r9
    a7f0:	2d03      	cmp	r5, #3
    a7f2:	d100      	bne.n	a7f6 <determinant+0xf72>
    a7f4:	e5a7      	b.n	a346 <determinant+0xac2>
					b[i][j] = 0;
    a7f6:	2500      	movs	r5, #0
    a7f8:	60cd      	str	r5, [r1, #12]
    a7fa:	e53e      	b.n	a27a <determinant+0x9f6>
    a7fc:	adb4      	add	r5, sp, #720	; 0x2d0
    a7fe:	46ab      	mov	fp, r5
    a800:	2500      	movs	r5, #0
    a802:	4647      	mov	r7, r8
    a804:	4459      	add	r1, fp
    a806:	604d      	str	r5, [r1, #4]
    a808:	ad90      	add	r5, sp, #576	; 0x240
    a80a:	46ab      	mov	fp, r5
    a80c:	4007      	ands	r7, r0
    a80e:	0079      	lsls	r1, r7, #1
    a810:	19c9      	adds	r1, r1, r7
    a812:	00c9      	lsls	r1, r1, #3
    a814:	448b      	add	fp, r1
    a816:	e4e2      	b.n	a1de <determinant+0x95a>
    a818:	4646      	mov	r6, r8
    a81a:	1861      	adds	r1, r4, r1
    a81c:	604e      	str	r6, [r1, #4]
    a81e:	4656      	mov	r6, sl
    a820:	4006      	ands	r6, r0
    a822:	0071      	lsls	r1, r6, #1
    a824:	1989      	adds	r1, r1, r6
    a826:	aeb4      	add	r6, sp, #720	; 0x2d0
    a828:	46b3      	mov	fp, r6
    a82a:	00c9      	lsls	r1, r1, #3
    a82c:	448b      	add	fp, r1
    a82e:	e614      	b.n	a45a <determinant+0xbd6>
				for (j = 0 ;j < k; j++)
    a830:	4667      	mov	r7, ip
    a832:	2f02      	cmp	r7, #2
    a834:	d100      	bne.n	a838 <determinant+0xfb4>
    a836:	e6ae      	b.n	a596 <determinant+0xd12>
					b[i][j] = 0;
    a838:	4647      	mov	r7, r8
    a83a:	60b7      	str	r7, [r6, #8]
    a83c:	e631      	b.n	a4a2 <determinant+0xc1e>
				for (j = 0 ;j < k; j++)
    a83e:	4666      	mov	r6, ip
    a840:	2e04      	cmp	r6, #4
    a842:	d100      	bne.n	a846 <determinant+0xfc2>
    a844:	e6a7      	b.n	a596 <determinant+0xd12>
					b[i][j] = 0;
    a846:	4646      	mov	r6, r8
    a848:	610e      	str	r6, [r1, #16]
    a84a:	e669      	b.n	a520 <determinant+0xc9c>
				for (j = 0 ;j < k; j++)
    a84c:	4666      	mov	r6, ip
    a84e:	2e03      	cmp	r6, #3
    a850:	d100      	bne.n	a854 <determinant+0xfd0>
    a852:	e6a0      	b.n	a596 <determinant+0xd12>
					b[i][j] = 0;
    a854:	4646      	mov	r6, r8
    a856:	60ce      	str	r6, [r1, #12]
    a858:	e63d      	b.n	a4d6 <determinant+0xc52>
				for (j = 0 ;j < k; j++)
    a85a:	4665      	mov	r5, ip
    a85c:	2d05      	cmp	r5, #5
    a85e:	d100      	bne.n	a862 <determinant+0xfde>
    a860:	e699      	b.n	a596 <determinant+0xd12>
					b[i][j] = 0;
    a862:	4645      	mov	r5, r8
    a864:	614d      	str	r5, [r1, #20]
    a866:	e67f      	b.n	a568 <determinant+0xce4>
				for (j = 0 ;j < k; j++)
    a868:	464d      	mov	r5, r9
    a86a:	2d02      	cmp	r5, #2
    a86c:	d100      	bne.n	a870 <determinant+0xfec>
    a86e:	e56a      	b.n	a346 <determinant+0xac2>
					b[i][j] = 0;
    a870:	2500      	movs	r5, #0
    a872:	60bd      	str	r5, [r7, #8]
    a874:	e4df      	b.n	a236 <determinant+0x9b2>
				for (j = 0 ;j < k; j++)
    a876:	464c      	mov	r4, r9
    a878:	2c05      	cmp	r4, #5
    a87a:	d100      	bne.n	a87e <determinant+0xffa>
    a87c:	e563      	b.n	a346 <determinant+0xac2>
					b[i][j] = 0;
    a87e:	2400      	movs	r4, #0
    a880:	617c      	str	r4, [r7, #20]
    a882:	e54d      	b.n	a320 <determinant+0xa9c>
		return (a[0][0]);
    a884:	9b48      	ldr	r3, [sp, #288]	; 0x120
    a886:	9310      	str	r3, [sp, #64]	; 0x40
    a888:	1c19      	adds	r1, r3, #0
    a88a:	e755      	b.n	a738 <determinant+0xeb4>
				for (j = 0 ;j < k; j++)
    a88c:	4654      	mov	r4, sl
    a88e:	2c03      	cmp	r4, #3
    a890:	d101      	bne.n	a896 <determinant+0x1012>
    a892:	f7ff f980 	bl	9b96 <determinant+0x312>
					b[i][j] = 0;
    a896:	60c8      	str	r0, [r1, #12]
    a898:	f7ff f93e 	bl	9b18 <determinant+0x294>
    a89c:	6048      	str	r0, [r1, #4]
    a89e:	f7ff f909 	bl	9ab4 <determinant+0x230>
				for (j = 0 ;j < k; j++)
    a8a2:	2c05      	cmp	r4, #5
    a8a4:	d101      	bne.n	a8aa <determinant+0x1026>
    a8a6:	f7ff fa96 	bl	9dd6 <determinant+0x552>
					b[i][j] = 0;
    a8aa:	4648      	mov	r0, r9
    a8ac:	6148      	str	r0, [r1, #20]
    a8ae:	f7ff fa81 	bl	9db4 <determinant+0x530>
				for (j = 0 ;j < k; j++)
    a8b2:	2c04      	cmp	r4, #4
    a8b4:	d101      	bne.n	a8ba <determinant+0x1036>
    a8b6:	f7ff fa8e 	bl	9dd6 <determinant+0x552>
					b[i][j] = 0;
    a8ba:	4648      	mov	r0, r9
    a8bc:	6108      	str	r0, [r1, #16]
    a8be:	f7ff fa61 	bl	9d84 <determinant+0x500>
				for (j = 0 ;j < k; j++)
    a8c2:	2c03      	cmp	r4, #3
    a8c4:	d101      	bne.n	a8ca <determinant+0x1046>
    a8c6:	f7ff fa86 	bl	9dd6 <determinant+0x552>
					b[i][j] = 0;
    a8ca:	4648      	mov	r0, r9
    a8cc:	60c8      	str	r0, [r1, #12]
    a8ce:	f7ff fa3f 	bl	9d50 <determinant+0x4cc>
				for (j = 0 ;j < k; j++)
    a8d2:	9c00      	ldr	r4, [sp, #0]
    a8d4:	2c02      	cmp	r4, #2
    a8d6:	d101      	bne.n	a8dc <determinant+0x1058>
    a8d8:	f7ff fbea 	bl	a0b0 <determinant+0x82c>
					b[i][j] = 0;
    a8dc:	60b5      	str	r5, [r6, #8]
    a8de:	f7ff fb61 	bl	9fa4 <determinant+0x720>
    a8e2:	4648      	mov	r0, r9
    a8e4:	6048      	str	r0, [r1, #4]
    a8e6:	f7ff f9fe 	bl	9ce6 <determinant+0x462>
				for (j = 0 ;j < k; j++)
    a8ea:	9c00      	ldr	r4, [sp, #0]
    a8ec:	2c05      	cmp	r4, #5
    a8ee:	d101      	bne.n	a8f4 <determinant+0x1070>
    a8f0:	f7ff fbde 	bl	a0b0 <determinant+0x82c>
					b[i][j] = 0;
    a8f4:	6175      	str	r5, [r6, #20]
    a8f6:	f7ff fbc9 	bl	a08c <determinant+0x808>
				for (j = 0 ;j < k; j++)
    a8fa:	9c00      	ldr	r4, [sp, #0]
    a8fc:	2c04      	cmp	r4, #4
    a8fe:	d101      	bne.n	a904 <determinant+0x1080>
    a900:	f7ff fbd6 	bl	a0b0 <determinant+0x82c>
    a904:	4666      	mov	r6, ip
    a906:	ac6c      	add	r4, sp, #432	; 0x1b0
    a908:	46a3      	mov	fp, r4
    a90a:	4006      	ands	r6, r0
					b[i][j] = 0;
    a90c:	6115      	str	r5, [r2, #16]
    a90e:	0072      	lsls	r2, r6, #1
    a910:	1992      	adds	r2, r2, r6
    a912:	00d2      	lsls	r2, r2, #3
    a914:	4493      	add	fp, r2
    a916:	f7ff fb90 	bl	a03a <determinant+0x7b6>
				for (j = 0 ;j < k; j++)
    a91a:	9c00      	ldr	r4, [sp, #0]
    a91c:	2c03      	cmp	r4, #3
    a91e:	d101      	bne.n	a924 <determinant+0x10a0>
    a920:	f7ff fbc6 	bl	a0b0 <determinant+0x82c>
					b[i][j] = 0;
    a924:	60d5      	str	r5, [r2, #12]
    a926:	f7ff fb5f 	bl	9fe8 <determinant+0x764>
    a92a:	ac90      	add	r4, sp, #576	; 0x240
    a92c:	46a3      	mov	fp, r4
    a92e:	4666      	mov	r6, ip
    a930:	ac6c      	add	r4, sp, #432	; 0x1b0
    a932:	445a      	add	r2, fp
    a934:	46a3      	mov	fp, r4
    a936:	4006      	ands	r6, r0
    a938:	6055      	str	r5, [r2, #4]
    a93a:	0072      	lsls	r2, r6, #1
    a93c:	1992      	adds	r2, r2, r6
    a93e:	00d2      	lsls	r2, r2, #3
    a940:	4493      	add	fp, r2
    a942:	f7ff fb03 	bl	9f4c <determinant+0x6c8>
		return (a[0][0]);
    a946:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
    a948:	9311      	str	r3, [sp, #68]	; 0x44
    a94a:	1c19      	adds	r1, r3, #0
    a94c:	e6d7      	b.n	a6fe <determinant+0xe7a>
    a94e:	46c0      	nop			; (mov r8, r8)
    a950:	0001d939 	.word	0x0001d939
    a954:	0001d235 	.word	0x0001d235

0000a958 <inverse>:
{
    a958:	b5f0      	push	{r4, r5, r6, r7, lr}
    a95a:	46de      	mov	lr, fp
    a95c:	4657      	mov	r7, sl
    a95e:	464e      	mov	r6, r9
    a960:	4645      	mov	r5, r8
    a962:	b5e0      	push	{r5, r6, r7, lr}
    a964:	4c9b      	ldr	r4, [pc, #620]	; (abd4 <inverse+0x27c>)
    a966:	0013      	movs	r3, r2
    a968:	44a5      	add	sp, r4
    a96a:	9004      	str	r0, [sp, #16]
    a96c:	9109      	str	r1, [sp, #36]	; 0x24
    a96e:	920a      	str	r2, [sp, #40]	; 0x28
	for (q = 0;q < f; q++)
    a970:	2a00      	cmp	r2, #0
    a972:	d101      	bne.n	a978 <inverse+0x20>
    a974:	f000 fc36 	bl	b1e4 <inverse+0x88c>
    a978:	3b01      	subs	r3, #1
    a97a:	b2df      	uxtb	r7, r3
    a97c:	9313      	str	r3, [sp, #76]	; 0x4c
    a97e:	ab38      	add	r3, sp, #224	; 0xe0
    a980:	9310      	str	r3, [sp, #64]	; 0x40
    a982:	1c7b      	adds	r3, r7, #1
    a984:	9312      	str	r3, [sp, #72]	; 0x48
    a986:	2300      	movs	r3, #0
    a988:	003e      	movs	r6, r7
    a98a:	930c      	str	r3, [sp, #48]	; 0x30
    a98c:	466b      	mov	r3, sp
    a98e:	2230      	movs	r2, #48	; 0x30
    a990:	189b      	adds	r3, r3, r2
    a992:	781b      	ldrb	r3, [r3, #0]
    a994:	9311      	str	r3, [sp, #68]	; 0x44
		for (c = 0; c < k; c++)
    a996:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a998:	930d      	str	r3, [sp, #52]	; 0x34
    a99a:	2300      	movs	r3, #0
    a99c:	9308      	str	r3, [sp, #32]
    a99e:	2220      	movs	r2, #32
    a9a0:	466b      	mov	r3, sp
    a9a2:	189b      	adds	r3, r3, r2
    a9a4:	781d      	ldrb	r5, [r3, #0]
    a9a6:	9b04      	ldr	r3, [sp, #16]
    a9a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
    a9aa:	469c      	mov	ip, r3
							n = 0;
    a9ac:	2300      	movs	r3, #0
    a9ae:	4698      	mov	r8, r3
						if (n < (f - 2))
    a9b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a9b2:	46b2      	mov	sl, r6
    a9b4:	1e9c      	subs	r4, r3, #2
    a9b6:	0026      	movs	r6, r4
							n = 0;
    a9b8:	2100      	movs	r1, #0
    a9ba:	2000      	movs	r0, #0
    a9bc:	4691      	mov	r9, r2
    a9be:	001c      	movs	r4, r3
{
    a9c0:	4667      	mov	r7, ip
    a9c2:	2200      	movs	r2, #0
    a9c4:	45c1      	cmp	r9, r8
    a9c6:	d021      	beq.n	aa0c <inverse+0xb4>
    a9c8:	46ab      	mov	fp, r5
    a9ca:	9400      	str	r4, [sp, #0]
    a9cc:	e007      	b.n	a9de <inverse+0x86>
						n++;
    a9ce:	3101      	adds	r1, #1
    a9d0:	b2c9      	uxtb	r1, r1
				for (j = 0;j < f; j++)
    a9d2:	3201      	adds	r2, #1
    a9d4:	9b00      	ldr	r3, [sp, #0]
    a9d6:	b2d2      	uxtb	r2, r2
    a9d8:	3704      	adds	r7, #4
    a9da:	4293      	cmp	r3, r2
    a9dc:	d014      	beq.n	aa08 <inverse+0xb0>
					if (i != q && j != p)
    a9de:	4593      	cmp	fp, r2
    a9e0:	d0f7      	beq.n	a9d2 <inverse+0x7a>
						b[m][n] = source[i][j];
    a9e2:	0043      	lsls	r3, r0, #1
    a9e4:	181b      	adds	r3, r3, r0
    a9e6:	005b      	lsls	r3, r3, #1
    a9e8:	185b      	adds	r3, r3, r1
    a9ea:	683d      	ldr	r5, [r7, #0]
    a9ec:	009b      	lsls	r3, r3, #2
    a9ee:	ac14      	add	r4, sp, #80	; 0x50
    a9f0:	50e5      	str	r5, [r4, r3]
						if (n < (f - 2))
    a9f2:	42b1      	cmp	r1, r6
    a9f4:	dbeb      	blt.n	a9ce <inverse+0x76>
				for (j = 0;j < f; j++)
    a9f6:	3201      	adds	r2, #1
    a9f8:	9b00      	ldr	r3, [sp, #0]
							m++;
    a9fa:	3001      	adds	r0, #1
				for (j = 0;j < f; j++)
    a9fc:	b2d2      	uxtb	r2, r2
							m++;
    a9fe:	b2c0      	uxtb	r0, r0
							n = 0;
    aa00:	2100      	movs	r1, #0
    aa02:	3704      	adds	r7, #4
				for (j = 0;j < f; j++)
    aa04:	4293      	cmp	r3, r2
    aa06:	d1ea      	bne.n	a9de <inverse+0x86>
    aa08:	465d      	mov	r5, fp
    aa0a:	001c      	movs	r4, r3
    aa0c:	2218      	movs	r2, #24
			for (i = 0;i < f; i++)
    aa0e:	4643      	mov	r3, r8
    aa10:	4693      	mov	fp, r2
    aa12:	3301      	adds	r3, #1
    aa14:	b2db      	uxtb	r3, r3
    aa16:	44dc      	add	ip, fp
    aa18:	429c      	cmp	r4, r3
    aa1a:	d001      	beq.n	aa20 <inverse+0xc8>
    aa1c:	4698      	mov	r8, r3
    aa1e:	e7cf      	b.n	a9c0 <inverse+0x68>
			fac[q][p] = pow(-1, q + p) * determinant(b, f - 1);
    aa20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    aa22:	930b      	str	r3, [sp, #44]	; 0x2c
    aa24:	4694      	mov	ip, r2
    aa26:	9b08      	ldr	r3, [sp, #32]
    aa28:	4656      	mov	r6, sl
    aa2a:	4463      	add	r3, ip
    aa2c:	0018      	movs	r0, r3
    aa2e:	4b6a      	ldr	r3, [pc, #424]	; (abd8 <inverse+0x280>)
    aa30:	4798      	blx	r3
    aa32:	4c6a      	ldr	r4, [pc, #424]	; (abdc <inverse+0x284>)
    aa34:	0002      	movs	r2, r0
    aa36:	000b      	movs	r3, r1
    aa38:	2000      	movs	r0, #0
    aa3a:	4969      	ldr	r1, [pc, #420]	; (abe0 <inverse+0x288>)
    aa3c:	47a0      	blx	r4
    aa3e:	900e      	str	r0, [sp, #56]	; 0x38
    aa40:	910f      	str	r1, [sp, #60]	; 0x3c
	if (k == 1)
    aa42:	2e01      	cmp	r6, #1
    aa44:	d100      	bne.n	aa48 <inverse+0xf0>
    aa46:	e2de      	b.n	b006 <inverse+0x6ae>
		for (c = 0; c < k; c++)
    aa48:	2e00      	cmp	r6, #0
    aa4a:	d100      	bne.n	aa4e <inverse+0xf6>
    aa4c:	e2df      	b.n	b00e <inverse+0x6b6>
    aa4e:	2300      	movs	r3, #0
    aa50:	9301      	str	r3, [sp, #4]
    aa52:	2300      	movs	r3, #0
    aa54:	9302      	str	r3, [sp, #8]
    aa56:	23fe      	movs	r3, #254	; 0xfe
    aa58:	059b      	lsls	r3, r3, #22
    aa5a:	9303      	str	r3, [sp, #12]
    aa5c:	2300      	movs	r3, #0
    aa5e:	469b      	mov	fp, r3
    aa60:	4643      	mov	r3, r8
    aa62:	3b01      	subs	r3, #1
    aa64:	46dc      	mov	ip, fp
    aa66:	469b      	mov	fp, r3
    aa68:	4a5e      	ldr	r2, [pc, #376]	; (abe4 <inverse+0x28c>)
    aa6a:	ac80      	add	r4, sp, #512	; 0x200
    aa6c:	9207      	str	r2, [sp, #28]
    aa6e:	4a5e      	ldr	r2, [pc, #376]	; (abe8 <inverse+0x290>)
    aa70:	9206      	str	r2, [sp, #24]
    aa72:	4a5e      	ldr	r2, [pc, #376]	; (abec <inverse+0x294>)
    aa74:	9205      	str	r2, [sp, #20]
    aa76:	2301      	movs	r3, #1
					b[i][j] = 0;
    aa78:	2100      	movs	r1, #0
		for (c = 0; c < k; c++)
    aa7a:	4699      	mov	r9, r3
					b[i][j] = 0;
    aa7c:	4688      	mov	r8, r1
    aa7e:	9901      	ldr	r1, [sp, #4]
    aa80:	1eb7      	subs	r7, r6, #2
    aa82:	468a      	mov	sl, r1
    aa84:	4649      	mov	r1, r9
    aa86:	0020      	movs	r0, r4
    aa88:	46b1      	mov	r9, r6
    aa8a:	ad14      	add	r5, sp, #80	; 0x50
		for (c = 0; c < k; c++)
    aa8c:	2300      	movs	r3, #0
    aa8e:	2200      	movs	r2, #0
    aa90:	9100      	str	r1, [sp, #0]
    aa92:	003e      	movs	r6, r7
    aa94:	e078      	b.n	ab88 <inverse+0x230>
					b[i][j] = 0;
    aa96:	4641      	mov	r1, r8
    aa98:	6041      	str	r1, [r0, #4]
					if (i != 0 && j != c)
    aa9a:	4661      	mov	r1, ip
							m++;
    aa9c:	3201      	adds	r2, #1
    aa9e:	b2d2      	uxtb	r2, r2
							n = 0;
    aaa0:	2300      	movs	r3, #0
					if (i != 0 && j != c)
    aaa2:	2901      	cmp	r1, #1
    aaa4:	d100      	bne.n	aaa8 <inverse+0x150>
    aaa6:	e08c      	b.n	abc2 <inverse+0x26a>
						b[m][n] = a[i][j];
    aaa8:	0051      	lsls	r1, r2, #1
    aaaa:	1889      	adds	r1, r1, r2
    aaac:	0049      	lsls	r1, r1, #1
    aaae:	18c9      	adds	r1, r1, r3
    aab0:	686f      	ldr	r7, [r5, #4]
    aab2:	0089      	lsls	r1, r1, #2
    aab4:	5067      	str	r7, [r4, r1]
						if (n < (k - 2))
    aab6:	429e      	cmp	r6, r3
    aab8:	dd00      	ble.n	aabc <inverse+0x164>
    aaba:	e099      	b.n	abf0 <inverse+0x298>
				for (j = 0 ;j < k; j++)
    aabc:	4649      	mov	r1, r9
							m++;
    aabe:	3201      	adds	r2, #1
    aac0:	b2d2      	uxtb	r2, r2
							n = 0;
    aac2:	2300      	movs	r3, #0
				for (j = 0 ;j < k; j++)
    aac4:	2902      	cmp	r1, #2
    aac6:	d100      	bne.n	aaca <inverse+0x172>
    aac8:	e098      	b.n	abfc <inverse+0x2a4>
					b[i][j] = 0;
    aaca:	4641      	mov	r1, r8
    aacc:	6081      	str	r1, [r0, #8]
					if (i != 0 && j != c)
    aace:	4651      	mov	r1, sl
    aad0:	2902      	cmp	r1, #2
    aad2:	d101      	bne.n	aad8 <inverse+0x180>
    aad4:	f000 fc5a 	bl	b38c <inverse+0xa34>
						b[m][n] = a[i][j];
    aad8:	0051      	lsls	r1, r2, #1
    aada:	1889      	adds	r1, r1, r2
    aadc:	0049      	lsls	r1, r1, #1
    aade:	18c9      	adds	r1, r1, r3
    aae0:	68af      	ldr	r7, [r5, #8]
    aae2:	0089      	lsls	r1, r1, #2
    aae4:	5067      	str	r7, [r4, r1]
						if (n < (k - 2))
    aae6:	429e      	cmp	r6, r3
    aae8:	dc71      	bgt.n	abce <inverse+0x276>
							n = 0;
    aaea:	2300      	movs	r3, #0
							m++;
    aaec:	3201      	adds	r2, #1
    aaee:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    aaf0:	4649      	mov	r1, r9
    aaf2:	2903      	cmp	r1, #3
    aaf4:	d03f      	beq.n	ab76 <inverse+0x21e>
					b[i][j] = 0;
    aaf6:	4641      	mov	r1, r8
    aaf8:	60c1      	str	r1, [r0, #12]
					if (i != 0 && j != c)
    aafa:	4651      	mov	r1, sl
    aafc:	2903      	cmp	r1, #3
    aafe:	d101      	bne.n	ab04 <inverse+0x1ac>
    ab00:	f000 fc37 	bl	b372 <inverse+0xa1a>
						b[m][n] = a[i][j];
    ab04:	0051      	lsls	r1, r2, #1
    ab06:	1889      	adds	r1, r1, r2
    ab08:	0049      	lsls	r1, r1, #1
    ab0a:	18c9      	adds	r1, r1, r3
    ab0c:	68ef      	ldr	r7, [r5, #12]
    ab0e:	0089      	lsls	r1, r1, #2
    ab10:	5067      	str	r7, [r4, r1]
						if (n < (k - 2))
    ab12:	42b3      	cmp	r3, r6
    ab14:	da00      	bge.n	ab18 <inverse+0x1c0>
    ab16:	e24b      	b.n	afb0 <inverse+0x658>
							n = 0;
    ab18:	2300      	movs	r3, #0
							m++;
    ab1a:	3201      	adds	r2, #1
    ab1c:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    ab1e:	4649      	mov	r1, r9
    ab20:	2904      	cmp	r1, #4
    ab22:	d028      	beq.n	ab76 <inverse+0x21e>
					b[i][j] = 0;
    ab24:	4641      	mov	r1, r8
    ab26:	6101      	str	r1, [r0, #16]
					if (i != 0 && j != c)
    ab28:	4651      	mov	r1, sl
    ab2a:	2904      	cmp	r1, #4
    ab2c:	d101      	bne.n	ab32 <inverse+0x1da>
    ab2e:	f000 fc17 	bl	b360 <inverse+0xa08>
						b[m][n] = a[i][j];
    ab32:	0051      	lsls	r1, r2, #1
    ab34:	1889      	adds	r1, r1, r2
    ab36:	0049      	lsls	r1, r1, #1
    ab38:	18c9      	adds	r1, r1, r3
    ab3a:	692f      	ldr	r7, [r5, #16]
    ab3c:	0089      	lsls	r1, r1, #2
    ab3e:	5067      	str	r7, [r4, r1]
						if (n < (k - 2))
    ab40:	429e      	cmp	r6, r3
    ab42:	dd00      	ble.n	ab46 <inverse+0x1ee>
    ab44:	e231      	b.n	afaa <inverse+0x652>
							n = 0;
    ab46:	2300      	movs	r3, #0
							m++;
    ab48:	3201      	adds	r2, #1
    ab4a:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    ab4c:	4649      	mov	r1, r9
    ab4e:	2905      	cmp	r1, #5
    ab50:	d011      	beq.n	ab76 <inverse+0x21e>
					b[i][j] = 0;
    ab52:	4641      	mov	r1, r8
    ab54:	6141      	str	r1, [r0, #20]
					if (i != 0 && j != c)
    ab56:	4651      	mov	r1, sl
    ab58:	2905      	cmp	r1, #5
    ab5a:	d00c      	beq.n	ab76 <inverse+0x21e>
						b[m][n] = a[i][j];
    ab5c:	0051      	lsls	r1, r2, #1
    ab5e:	1889      	adds	r1, r1, r2
    ab60:	0049      	lsls	r1, r1, #1
    ab62:	18c9      	adds	r1, r1, r3
    ab64:	696f      	ldr	r7, [r5, #20]
    ab66:	0089      	lsls	r1, r1, #2
    ab68:	5067      	str	r7, [r4, r1]
						if (n < (k - 2))
    ab6a:	429e      	cmp	r6, r3
    ab6c:	dd00      	ble.n	ab70 <inverse+0x218>
    ab6e:	e219      	b.n	afa4 <inverse+0x64c>
							n = 0;
    ab70:	2300      	movs	r3, #0
							m++;
    ab72:	3201      	adds	r2, #1
    ab74:	b2d2      	uxtb	r2, r2
			for (i = 0;i < k; i++)
    ab76:	9900      	ldr	r1, [sp, #0]
    ab78:	4589      	cmp	r9, r1
    ab7a:	d93f      	bls.n	abfc <inverse+0x2a4>
    ab7c:	9f00      	ldr	r7, [sp, #0]
    ab7e:	3018      	adds	r0, #24
    ab80:	3701      	adds	r7, #1
    ab82:	b2f9      	uxtb	r1, r7
    ab84:	9100      	str	r1, [sp, #0]
    ab86:	3518      	adds	r5, #24
					b[i][j] = 0;
    ab88:	4641      	mov	r1, r8
    ab8a:	6001      	str	r1, [r0, #0]
					if (i != 0 && j != c)
    ab8c:	9900      	ldr	r1, [sp, #0]
    ab8e:	2901      	cmp	r1, #1
    ab90:	d100      	bne.n	ab94 <inverse+0x23c>
    ab92:	e21d      	b.n	afd0 <inverse+0x678>
    ab94:	4651      	mov	r1, sl
    ab96:	2900      	cmp	r1, #0
    ab98:	d101      	bne.n	ab9e <inverse+0x246>
    ab9a:	f000 fc00 	bl	b39e <inverse+0xa46>
						b[m][n] = a[i][j];
    ab9e:	0051      	lsls	r1, r2, #1
    aba0:	1889      	adds	r1, r1, r2
    aba2:	0049      	lsls	r1, r1, #1
    aba4:	18c9      	adds	r1, r1, r3
    aba6:	682f      	ldr	r7, [r5, #0]
    aba8:	0089      	lsls	r1, r1, #2
    abaa:	5067      	str	r7, [r4, r1]
						if (n < (k - 2))
    abac:	42b3      	cmp	r3, r6
    abae:	db00      	blt.n	abb2 <inverse+0x25a>
    abb0:	e771      	b.n	aa96 <inverse+0x13e>
					b[i][j] = 0;
    abb2:	4641      	mov	r1, r8
    abb4:	6041      	str	r1, [r0, #4]
					if (i != 0 && j != c)
    abb6:	4661      	mov	r1, ip
						n++;
    abb8:	3301      	adds	r3, #1
    abba:	b2db      	uxtb	r3, r3
					if (i != 0 && j != c)
    abbc:	2901      	cmp	r1, #1
    abbe:	d000      	beq.n	abc2 <inverse+0x26a>
    abc0:	e772      	b.n	aaa8 <inverse+0x150>
				for (j = 0 ;j < k; j++)
    abc2:	4649      	mov	r1, r9
    abc4:	2902      	cmp	r1, #2
    abc6:	d019      	beq.n	abfc <inverse+0x2a4>
					b[i][j] = 0;
    abc8:	4641      	mov	r1, r8
    abca:	6081      	str	r1, [r0, #8]
    abcc:	e784      	b.n	aad8 <inverse+0x180>
						n++;
    abce:	3301      	adds	r3, #1
    abd0:	b2db      	uxtb	r3, r3
    abd2:	e78d      	b.n	aaf0 <inverse+0x198>
    abd4:	fffffd6c 	.word	0xfffffd6c
    abd8:	0001fa79 	.word	0x0001fa79
    abdc:	0001a3ed 	.word	0x0001a3ed
    abe0:	bff00000 	.word	0xbff00000
    abe4:	00009885 	.word	0x00009885
    abe8:	0001d939 	.word	0x0001d939
    abec:	0001d235 	.word	0x0001d235
				for (j = 0 ;j < k; j++)
    abf0:	4649      	mov	r1, r9
						n++;
    abf2:	3301      	adds	r3, #1
    abf4:	b2db      	uxtb	r3, r3
				for (j = 0 ;j < k; j++)
    abf6:	2902      	cmp	r1, #2
    abf8:	d000      	beq.n	abfc <inverse+0x2a4>
    abfa:	e766      	b.n	aaca <inverse+0x172>
			det = det + s * (a[0][c] * determinant(b, k - 1));
    abfc:	466a      	mov	r2, sp
    abfe:	465b      	mov	r3, fp
    ac00:	7013      	strb	r3, [r2, #0]
    ac02:	7811      	ldrb	r1, [r2, #0]
    ac04:	9b07      	ldr	r3, [sp, #28]
    ac06:	0020      	movs	r0, r4
    ac08:	4798      	blx	r3
    ac0a:	9d01      	ldr	r5, [sp, #4]
    ac0c:	aa14      	add	r2, sp, #80	; 0x50
    ac0e:	00ab      	lsls	r3, r5, #2
    ac10:	58d1      	ldr	r1, [r2, r3]
    ac12:	9f06      	ldr	r7, [sp, #24]
    ac14:	47b8      	blx	r7
    ac16:	9b03      	ldr	r3, [sp, #12]
    ac18:	464e      	mov	r6, r9
    ac1a:	1c19      	adds	r1, r3, #0
    ac1c:	4698      	mov	r8, r3
    ac1e:	47b8      	blx	r7
    ac20:	9b05      	ldr	r3, [sp, #20]
    ac22:	1c01      	adds	r1, r0, #0
    ac24:	9802      	ldr	r0, [sp, #8]
    ac26:	4798      	blx	r3
			s = -1 * s;
    ac28:	2280      	movs	r2, #128	; 0x80
    ac2a:	0612      	lsls	r2, r2, #24
    ac2c:	4694      	mov	ip, r2
    ac2e:	4643      	mov	r3, r8
    ac30:	4463      	add	r3, ip
    ac32:	9303      	str	r3, [sp, #12]
    ac34:	002b      	movs	r3, r5
    ac36:	3301      	adds	r3, #1
    ac38:	9301      	str	r3, [sp, #4]
		for (c = 0; c < k; c++)
    ac3a:	b2db      	uxtb	r3, r3
			det = det + s * (a[0][c] * determinant(b, k - 1));
    ac3c:	9002      	str	r0, [sp, #8]
		for (c = 0; c < k; c++)
    ac3e:	469c      	mov	ip, r3
    ac40:	429e      	cmp	r6, r3
    ac42:	d900      	bls.n	ac46 <inverse+0x2ee>
    ac44:	e717      	b.n	aa76 <inverse+0x11e>
    ac46:	4bdc      	ldr	r3, [pc, #880]	; (afb8 <inverse+0x660>)
    ac48:	4798      	blx	r3
			fac[q][p] = pow(-1, q + p) * determinant(b, f - 1);
    ac4a:	0002      	movs	r2, r0
    ac4c:	000b      	movs	r3, r1
    ac4e:	980e      	ldr	r0, [sp, #56]	; 0x38
    ac50:	990f      	ldr	r1, [sp, #60]	; 0x3c
    ac52:	4cda      	ldr	r4, [pc, #872]	; (afbc <inverse+0x664>)
    ac54:	47a0      	blx	r4
    ac56:	4bda      	ldr	r3, [pc, #872]	; (afc0 <inverse+0x668>)
    ac58:	4798      	blx	r3
    ac5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		for (p = 0;p < f; p++)
    ac5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
			fac[q][p] = pow(-1, q + p) * determinant(b, f - 1);
    ac5e:	c301      	stmia	r3!, {r0}
    ac60:	930d      	str	r3, [sp, #52]	; 0x34
    ac62:	9b08      	ldr	r3, [sp, #32]
    ac64:	3301      	adds	r3, #1
    ac66:	9308      	str	r3, [sp, #32]
		for (p = 0;p < f; p++)
    ac68:	4293      	cmp	r3, r2
    ac6a:	d000      	beq.n	ac6e <inverse+0x316>
    ac6c:	e697      	b.n	a99e <inverse+0x46>
    ac6e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ac70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ac72:	3218      	adds	r2, #24
    ac74:	9210      	str	r2, [sp, #64]	; 0x40
	for (q = 0;q < f; q++)
    ac76:	9a08      	ldr	r2, [sp, #32]
    ac78:	3301      	adds	r3, #1
    ac7a:	930c      	str	r3, [sp, #48]	; 0x30
    ac7c:	429a      	cmp	r2, r3
    ac7e:	d000      	beq.n	ac82 <inverse+0x32a>
    ac80:	e684      	b.n	a98c <inverse+0x34>
    ac82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ac84:	2b01      	cmp	r3, #1
    ac86:	d100      	bne.n	ac8a <inverse+0x332>
    ac88:	e2d6      	b.n	b238 <inverse+0x8e0>
    ac8a:	2b02      	cmp	r3, #2
    ac8c:	d100      	bne.n	ac90 <inverse+0x338>
    ac8e:	e35d      	b.n	b34c <inverse+0x9f4>
    ac90:	2b03      	cmp	r3, #3
    ac92:	d100      	bne.n	ac96 <inverse+0x33e>
    ac94:	e346      	b.n	b324 <inverse+0x9cc>
    ac96:	2b04      	cmp	r3, #4
    ac98:	d100      	bne.n	ac9c <inverse+0x344>
    ac9a:	e321      	b.n	b2e0 <inverse+0x988>
			b[i][j] = fac[j][i];
    ac9c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    ac9e:	935c      	str	r3, [sp, #368]	; 0x170
    aca0:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    aca2:	935d      	str	r3, [sp, #372]	; 0x174
    aca4:	9b44      	ldr	r3, [sp, #272]	; 0x110
    aca6:	935e      	str	r3, [sp, #376]	; 0x178
    aca8:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    acaa:	935f      	str	r3, [sp, #380]	; 0x17c
    acac:	9b50      	ldr	r3, [sp, #320]	; 0x140
    acae:	9300      	str	r3, [sp, #0]
    acb0:	9360      	str	r3, [sp, #384]	; 0x180
		for (j = 0;j < r; j++)
    acb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    acb4:	2b05      	cmp	r3, #5
    acb6:	d100      	bne.n	acba <inverse+0x362>
    acb8:	e2e8      	b.n	b28c <inverse+0x934>
			b[i][j] = fac[j][i];
    acba:	2290      	movs	r2, #144	; 0x90
    acbc:	2180      	movs	r1, #128	; 0x80
    acbe:	9b56      	ldr	r3, [sp, #344]	; 0x158
    acc0:	2090      	movs	r0, #144	; 0x90
    acc2:	9361      	str	r3, [sp, #388]	; 0x184
    acc4:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    acc6:	2490      	movs	r4, #144	; 0x90
    acc8:	9362      	str	r3, [sp, #392]	; 0x188
    acca:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    accc:	9363      	str	r3, [sp, #396]	; 0x18c
    acce:	9b45      	ldr	r3, [sp, #276]	; 0x114
    acd0:	9364      	str	r3, [sp, #400]	; 0x190
    acd2:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    acd4:	9365      	str	r3, [sp, #404]	; 0x194
    acd6:	9b51      	ldr	r3, [sp, #324]	; 0x144
    acd8:	9366      	str	r3, [sp, #408]	; 0x198
    acda:	9b57      	ldr	r3, [sp, #348]	; 0x15c
    acdc:	9367      	str	r3, [sp, #412]	; 0x19c
    acde:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
    ace0:	9368      	str	r3, [sp, #416]	; 0x1a0
    ace2:	9b40      	ldr	r3, [sp, #256]	; 0x100
    ace4:	9369      	str	r3, [sp, #420]	; 0x1a4
    ace6:	9b46      	ldr	r3, [sp, #280]	; 0x118
    ace8:	936a      	str	r3, [sp, #424]	; 0x1a8
    acea:	9b4c      	ldr	r3, [sp, #304]	; 0x130
    acec:	936b      	str	r3, [sp, #428]	; 0x1ac
    acee:	9b52      	ldr	r3, [sp, #328]	; 0x148
    acf0:	936c      	str	r3, [sp, #432]	; 0x1b0
    acf2:	ab14      	add	r3, sp, #80	; 0x50
    acf4:	189b      	adds	r3, r3, r2
    acf6:	585b      	ldr	r3, [r3, r1]
    acf8:	3a0c      	subs	r2, #12
    acfa:	936d      	str	r3, [sp, #436]	; 0x1b4
    acfc:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    acfe:	936e      	str	r3, [sp, #440]	; 0x1b8
    ad00:	9b41      	ldr	r3, [sp, #260]	; 0x104
    ad02:	936f      	str	r3, [sp, #444]	; 0x1bc
    ad04:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    ad06:	9370      	str	r3, [sp, #448]	; 0x1c0
    ad08:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    ad0a:	9371      	str	r3, [sp, #452]	; 0x1c4
    ad0c:	9b53      	ldr	r3, [sp, #332]	; 0x14c
    ad0e:	9372      	str	r3, [sp, #456]	; 0x1c8
    ad10:	ab14      	add	r3, sp, #80	; 0x50
    ad12:	181b      	adds	r3, r3, r0
    ad14:	589b      	ldr	r3, [r3, r2]
    ad16:	a814      	add	r0, sp, #80	; 0x50
    ad18:	9373      	str	r3, [sp, #460]	; 0x1cc
    ad1a:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
    ad1c:	1900      	adds	r0, r0, r4
    ad1e:	9374      	str	r3, [sp, #464]	; 0x1d0
    ad20:	9b42      	ldr	r3, [sp, #264]	; 0x108
    ad22:	3490      	adds	r4, #144	; 0x90
    ad24:	9375      	str	r3, [sp, #468]	; 0x1d4
    ad26:	9b48      	ldr	r3, [sp, #288]	; 0x120
    ad28:	9376      	str	r3, [sp, #472]	; 0x1d8
    ad2a:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    ad2c:	9377      	str	r3, [sp, #476]	; 0x1dc
    ad2e:	9b54      	ldr	r3, [sp, #336]	; 0x150
    ad30:	9378      	str	r3, [sp, #480]	; 0x1e0
    ad32:	2388      	movs	r3, #136	; 0x88
    ad34:	58c0      	ldr	r0, [r0, r3]
    ad36:	9079      	str	r0, [sp, #484]	; 0x1e4
    ad38:	983d      	ldr	r0, [sp, #244]	; 0xf4
    ad3a:	907a      	str	r0, [sp, #488]	; 0x1e8
    ad3c:	9843      	ldr	r0, [sp, #268]	; 0x10c
    ad3e:	907b      	str	r0, [sp, #492]	; 0x1ec
    ad40:	9849      	ldr	r0, [sp, #292]	; 0x124
    ad42:	9000      	str	r0, [sp, #0]
    ad44:	a814      	add	r0, sp, #80	; 0x50
    ad46:	1900      	adds	r0, r0, r4
    ad48:	9c00      	ldr	r4, [sp, #0]
    ad4a:	5044      	str	r4, [r0, r1]
    ad4c:	2090      	movs	r0, #144	; 0x90
    ad4e:	994f      	ldr	r1, [sp, #316]	; 0x13c
    ad50:	0040      	lsls	r0, r0, #1
    ad52:	9100      	str	r1, [sp, #0]
    ad54:	a914      	add	r1, sp, #80	; 0x50
    ad56:	1809      	adds	r1, r1, r0
    ad58:	9800      	ldr	r0, [sp, #0]
    ad5a:	5088      	str	r0, [r1, r2]
    ad5c:	2190      	movs	r1, #144	; 0x90
    ad5e:	9a55      	ldr	r2, [sp, #340]	; 0x154
    ad60:	0049      	lsls	r1, r1, #1
    ad62:	9200      	str	r2, [sp, #0]
    ad64:	aa14      	add	r2, sp, #80	; 0x50
    ad66:	1852      	adds	r2, r2, r1
    ad68:	9900      	ldr	r1, [sp, #0]
    ad6a:	50d1      	str	r1, [r2, r3]
    ad6c:	2190      	movs	r1, #144	; 0x90
    ad6e:	aa14      	add	r2, sp, #80	; 0x50
    ad70:	3304      	adds	r3, #4
    ad72:	1852      	adds	r2, r2, r1
    ad74:	58d2      	ldr	r2, [r2, r3]
    ad76:	3190      	adds	r1, #144	; 0x90
    ad78:	9200      	str	r2, [sp, #0]
    ad7a:	aa14      	add	r2, sp, #80	; 0x50
    ad7c:	1852      	adds	r2, r2, r1
    ad7e:	9900      	ldr	r1, [sp, #0]
    ad80:	50d1      	str	r1, [r2, r3]
    ad82:	466b      	mov	r3, sp
    ad84:	224c      	movs	r2, #76	; 0x4c
    ad86:	189b      	adds	r3, r3, r2
    ad88:	781b      	ldrb	r3, [r3, #0]
    ad8a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    ad8c:	9307      	str	r3, [sp, #28]
    ad8e:	3301      	adds	r3, #1
    ad90:	9308      	str	r3, [sp, #32]
							n = 0;
    ad92:	2300      	movs	r3, #0
    ad94:	4698      	mov	r8, r3
    ad96:	2300      	movs	r3, #0
    ad98:	469b      	mov	fp, r3
    ad9a:	23fe      	movs	r3, #254	; 0xfe
    ad9c:	059b      	lsls	r3, r3, #22
    ad9e:	9305      	str	r3, [sp, #20]
    ada0:	ab80      	add	r3, sp, #512	; 0x200
    ada2:	4699      	mov	r9, r3
    ada4:	4b87      	ldr	r3, [pc, #540]	; (afc4 <inverse+0x66c>)
    ada6:	4647      	mov	r7, r8
    ada8:	930b      	str	r3, [sp, #44]	; 0x2c
    adaa:	4b87      	ldr	r3, [pc, #540]	; (afc8 <inverse+0x670>)
    adac:	464c      	mov	r4, r9
    adae:	930c      	str	r3, [sp, #48]	; 0x30
    adb0:	4b86      	ldr	r3, [pc, #536]	; (afcc <inverse+0x674>)
    adb2:	930d      	str	r3, [sp, #52]	; 0x34
    adb4:	465b      	mov	r3, fp
    adb6:	9303      	str	r3, [sp, #12]
    adb8:	b2fb      	uxtb	r3, r7
    adba:	1ea8      	subs	r0, r5, #2
    adbc:	9306      	str	r3, [sp, #24]
    adbe:	4682      	mov	sl, r0
	for (q = 0;q < f; q++)
    adc0:	2301      	movs	r3, #1
						b[m][n] = a[i][j];
    adc2:	20ff      	movs	r0, #255	; 0xff
	for (q = 0;q < f; q++)
    adc4:	9301      	str	r3, [sp, #4]
    adc6:	2100      	movs	r1, #0
    adc8:	2300      	movs	r3, #0
    adca:	2200      	movs	r2, #0
					b[i][j] = 0;
    adcc:	2600      	movs	r6, #0
						b[m][n] = a[i][j];
    adce:	4681      	mov	r9, r0
    add0:	46bc      	mov	ip, r7
    add2:	e0c1      	b.n	af58 <inverse+0x600>
							n = 0;
    add4:	2300      	movs	r3, #0
							m++;
    add6:	3201      	adds	r2, #1
    add8:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    adda:	2d01      	cmp	r5, #1
    addc:	d100      	bne.n	ade0 <inverse+0x488>
    adde:	e0b3      	b.n	af48 <inverse+0x5f0>
					b[i][j] = 0;
    ade0:	9800      	ldr	r0, [sp, #0]
    ade2:	1847      	adds	r7, r0, r1
    ade4:	00ff      	lsls	r7, r7, #3
					if (i != 0 && j != c)
    ade6:	9806      	ldr	r0, [sp, #24]
					b[i][j] = 0;
    ade8:	19e7      	adds	r7, r4, r7
    adea:	607e      	str	r6, [r7, #4]
					if (i != 0 && j != c)
    adec:	2801      	cmp	r0, #1
    adee:	d100      	bne.n	adf2 <inverse+0x49a>
    adf0:	e23d      	b.n	b26e <inverse+0x916>
						b[m][n] = a[i][j];
    adf2:	4648      	mov	r0, r9
    adf4:	4008      	ands	r0, r1
    adf6:	4683      	mov	fp, r0
    adf8:	0040      	lsls	r0, r0, #1
    adfa:	4680      	mov	r8, r0
    adfc:	44d8      	add	r8, fp
    adfe:	4640      	mov	r0, r8
    ae00:	00c0      	lsls	r0, r0, #3
    ae02:	4680      	mov	r8, r0
    ae04:	9804      	ldr	r0, [sp, #16]
    ae06:	0057      	lsls	r7, r2, #1
    ae08:	4683      	mov	fp, r0
    ae0a:	44d8      	add	r8, fp
    ae0c:	4640      	mov	r0, r8
    ae0e:	18bf      	adds	r7, r7, r2
    ae10:	007f      	lsls	r7, r7, #1
    ae12:	18ff      	adds	r7, r7, r3
    ae14:	6840      	ldr	r0, [r0, #4]
    ae16:	00bf      	lsls	r7, r7, #2
    ae18:	51e0      	str	r0, [r4, r7]
						if (n < (k - 2))
    ae1a:	4553      	cmp	r3, sl
    ae1c:	da00      	bge.n	ae20 <inverse+0x4c8>
    ae1e:	e1f3      	b.n	b208 <inverse+0x8b0>
							n = 0;
    ae20:	2300      	movs	r3, #0
							m++;
    ae22:	3201      	adds	r2, #1
    ae24:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    ae26:	2d02      	cmp	r5, #2
    ae28:	d100      	bne.n	ae2c <inverse+0x4d4>
    ae2a:	e08d      	b.n	af48 <inverse+0x5f0>
					b[i][j] = 0;
    ae2c:	9800      	ldr	r0, [sp, #0]
    ae2e:	1847      	adds	r7, r0, r1
					if (i != 0 && j != c)
    ae30:	4660      	mov	r0, ip
					b[i][j] = 0;
    ae32:	00ff      	lsls	r7, r7, #3
    ae34:	19e7      	adds	r7, r4, r7
    ae36:	60be      	str	r6, [r7, #8]
					if (i != 0 && j != c)
    ae38:	2802      	cmp	r0, #2
    ae3a:	d100      	bne.n	ae3e <inverse+0x4e6>
    ae3c:	e212      	b.n	b264 <inverse+0x90c>
						b[m][n] = a[i][j];
    ae3e:	4648      	mov	r0, r9
    ae40:	4008      	ands	r0, r1
    ae42:	4683      	mov	fp, r0
    ae44:	0040      	lsls	r0, r0, #1
    ae46:	4680      	mov	r8, r0
    ae48:	44d8      	add	r8, fp
    ae4a:	4640      	mov	r0, r8
    ae4c:	00c0      	lsls	r0, r0, #3
    ae4e:	4680      	mov	r8, r0
    ae50:	9804      	ldr	r0, [sp, #16]
    ae52:	0057      	lsls	r7, r2, #1
    ae54:	4683      	mov	fp, r0
    ae56:	44d8      	add	r8, fp
    ae58:	4640      	mov	r0, r8
    ae5a:	18bf      	adds	r7, r7, r2
    ae5c:	007f      	lsls	r7, r7, #1
    ae5e:	18ff      	adds	r7, r7, r3
    ae60:	6880      	ldr	r0, [r0, #8]
    ae62:	00bf      	lsls	r7, r7, #2
    ae64:	51e0      	str	r0, [r4, r7]
						if (n < (k - 2))
    ae66:	4553      	cmp	r3, sl
    ae68:	da00      	bge.n	ae6c <inverse+0x514>
    ae6a:	e1ca      	b.n	b202 <inverse+0x8aa>
							n = 0;
    ae6c:	2300      	movs	r3, #0
							m++;
    ae6e:	3201      	adds	r2, #1
    ae70:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    ae72:	2d03      	cmp	r5, #3
    ae74:	d068      	beq.n	af48 <inverse+0x5f0>
					b[i][j] = 0;
    ae76:	9800      	ldr	r0, [sp, #0]
    ae78:	1847      	adds	r7, r0, r1
					if (i != 0 && j != c)
    ae7a:	4660      	mov	r0, ip
					b[i][j] = 0;
    ae7c:	00ff      	lsls	r7, r7, #3
    ae7e:	19e7      	adds	r7, r4, r7
    ae80:	60fe      	str	r6, [r7, #12]
					if (i != 0 && j != c)
    ae82:	2803      	cmp	r0, #3
    ae84:	d100      	bne.n	ae88 <inverse+0x530>
    ae86:	e1fc      	b.n	b282 <inverse+0x92a>
						b[m][n] = a[i][j];
    ae88:	4648      	mov	r0, r9
    ae8a:	4008      	ands	r0, r1
    ae8c:	4683      	mov	fp, r0
    ae8e:	0040      	lsls	r0, r0, #1
    ae90:	4680      	mov	r8, r0
    ae92:	44d8      	add	r8, fp
    ae94:	4640      	mov	r0, r8
    ae96:	00c0      	lsls	r0, r0, #3
    ae98:	4680      	mov	r8, r0
    ae9a:	9804      	ldr	r0, [sp, #16]
    ae9c:	0057      	lsls	r7, r2, #1
    ae9e:	4683      	mov	fp, r0
    aea0:	44d8      	add	r8, fp
    aea2:	4640      	mov	r0, r8
    aea4:	18bf      	adds	r7, r7, r2
    aea6:	007f      	lsls	r7, r7, #1
    aea8:	18ff      	adds	r7, r7, r3
    aeaa:	68c0      	ldr	r0, [r0, #12]
    aeac:	00bf      	lsls	r7, r7, #2
    aeae:	51e0      	str	r0, [r4, r7]
						if (n < (k - 2))
    aeb0:	4553      	cmp	r3, sl
    aeb2:	da00      	bge.n	aeb6 <inverse+0x55e>
    aeb4:	e1a2      	b.n	b1fc <inverse+0x8a4>
							n = 0;
    aeb6:	2300      	movs	r3, #0
							m++;
    aeb8:	3201      	adds	r2, #1
    aeba:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    aebc:	2d04      	cmp	r5, #4
    aebe:	d043      	beq.n	af48 <inverse+0x5f0>
					b[i][j] = 0;
    aec0:	9800      	ldr	r0, [sp, #0]
    aec2:	1847      	adds	r7, r0, r1
					if (i != 0 && j != c)
    aec4:	4660      	mov	r0, ip
					b[i][j] = 0;
    aec6:	00ff      	lsls	r7, r7, #3
    aec8:	19e7      	adds	r7, r4, r7
    aeca:	613e      	str	r6, [r7, #16]
					if (i != 0 && j != c)
    aecc:	2804      	cmp	r0, #4
    aece:	d100      	bne.n	aed2 <inverse+0x57a>
    aed0:	e1d2      	b.n	b278 <inverse+0x920>
						b[m][n] = a[i][j];
    aed2:	4648      	mov	r0, r9
    aed4:	4008      	ands	r0, r1
    aed6:	4683      	mov	fp, r0
    aed8:	0040      	lsls	r0, r0, #1
    aeda:	4680      	mov	r8, r0
    aedc:	44d8      	add	r8, fp
    aede:	4640      	mov	r0, r8
    aee0:	00c0      	lsls	r0, r0, #3
    aee2:	4680      	mov	r8, r0
    aee4:	9804      	ldr	r0, [sp, #16]
    aee6:	0057      	lsls	r7, r2, #1
    aee8:	4683      	mov	fp, r0
    aeea:	44d8      	add	r8, fp
    aeec:	4640      	mov	r0, r8
    aeee:	18bf      	adds	r7, r7, r2
    aef0:	007f      	lsls	r7, r7, #1
    aef2:	18ff      	adds	r7, r7, r3
    aef4:	6900      	ldr	r0, [r0, #16]
    aef6:	00bf      	lsls	r7, r7, #2
    aef8:	51e0      	str	r0, [r4, r7]
						if (n < (k - 2))
    aefa:	4553      	cmp	r3, sl
    aefc:	da00      	bge.n	af00 <inverse+0x5a8>
    aefe:	e17a      	b.n	b1f6 <inverse+0x89e>
							n = 0;
    af00:	2300      	movs	r3, #0
							m++;
    af02:	3201      	adds	r2, #1
    af04:	b2d2      	uxtb	r2, r2
				for (j = 0 ;j < k; j++)
    af06:	2d05      	cmp	r5, #5
    af08:	d01e      	beq.n	af48 <inverse+0x5f0>
					b[i][j] = 0;
    af0a:	9800      	ldr	r0, [sp, #0]
    af0c:	1840      	adds	r0, r0, r1
    af0e:	00c0      	lsls	r0, r0, #3
    af10:	1820      	adds	r0, r4, r0
    af12:	6146      	str	r6, [r0, #20]
					if (i != 0 && j != c)
    af14:	4660      	mov	r0, ip
    af16:	2805      	cmp	r0, #5
    af18:	d016      	beq.n	af48 <inverse+0x5f0>
						b[m][n] = a[i][j];
    af1a:	464f      	mov	r7, r9
    af1c:	400f      	ands	r7, r1
    af1e:	46b8      	mov	r8, r7
    af20:	0050      	lsls	r0, r2, #1
    af22:	1880      	adds	r0, r0, r2
    af24:	0040      	lsls	r0, r0, #1
    af26:	18c0      	adds	r0, r0, r3
    af28:	0080      	lsls	r0, r0, #2
    af2a:	4683      	mov	fp, r0
    af2c:	9804      	ldr	r0, [sp, #16]
    af2e:	007f      	lsls	r7, r7, #1
    af30:	4447      	add	r7, r8
    af32:	4680      	mov	r8, r0
    af34:	00ff      	lsls	r7, r7, #3
    af36:	4447      	add	r7, r8
    af38:	6978      	ldr	r0, [r7, #20]
    af3a:	465f      	mov	r7, fp
    af3c:	51e0      	str	r0, [r4, r7]
						if (n < (k - 2))
    af3e:	4553      	cmp	r3, sl
    af40:	db68      	blt.n	b014 <inverse+0x6bc>
							n = 0;
    af42:	2300      	movs	r3, #0
							m++;
    af44:	3201      	adds	r2, #1
    af46:	b2d2      	uxtb	r2, r2
			for (i = 0;i < k; i++)
    af48:	9801      	ldr	r0, [sp, #4]
    af4a:	4285      	cmp	r5, r0
    af4c:	d967      	bls.n	b01e <inverse+0x6c6>
    af4e:	9801      	ldr	r0, [sp, #4]
    af50:	3101      	adds	r1, #1
    af52:	3001      	adds	r0, #1
    af54:	b2c0      	uxtb	r0, r0
    af56:	9001      	str	r0, [sp, #4]
					b[i][j] = 0;
    af58:	0048      	lsls	r0, r1, #1
    af5a:	1847      	adds	r7, r0, r1
    af5c:	00ff      	lsls	r7, r7, #3
    af5e:	9000      	str	r0, [sp, #0]
    af60:	51e6      	str	r6, [r4, r7]
					if (i != 0 && j != c)
    af62:	2900      	cmp	r1, #0
    af64:	d100      	bne.n	af68 <inverse+0x610>
    af66:	e152      	b.n	b20e <inverse+0x8b6>
    af68:	4660      	mov	r0, ip
    af6a:	2800      	cmp	r0, #0
    af6c:	d100      	bne.n	af70 <inverse+0x618>
    af6e:	e173      	b.n	b258 <inverse+0x900>
						b[m][n] = a[i][j];
    af70:	4648      	mov	r0, r9
    af72:	4008      	ands	r0, r1
    af74:	4683      	mov	fp, r0
    af76:	0040      	lsls	r0, r0, #1
    af78:	4680      	mov	r8, r0
    af7a:	44d8      	add	r8, fp
    af7c:	4640      	mov	r0, r8
    af7e:	00c0      	lsls	r0, r0, #3
    af80:	4680      	mov	r8, r0
    af82:	0057      	lsls	r7, r2, #1
    af84:	18bf      	adds	r7, r7, r2
    af86:	007f      	lsls	r7, r7, #1
    af88:	18ff      	adds	r7, r7, r3
    af8a:	00bf      	lsls	r7, r7, #2
    af8c:	9702      	str	r7, [sp, #8]
    af8e:	4647      	mov	r7, r8
    af90:	9804      	ldr	r0, [sp, #16]
    af92:	5838      	ldr	r0, [r7, r0]
    af94:	9f02      	ldr	r7, [sp, #8]
    af96:	51e0      	str	r0, [r4, r7]
						if (n < (k - 2))
    af98:	4553      	cmp	r3, sl
    af9a:	db00      	blt.n	af9e <inverse+0x646>
    af9c:	e71a      	b.n	add4 <inverse+0x47c>
						n++;
    af9e:	3301      	adds	r3, #1
    afa0:	b2db      	uxtb	r3, r3
    afa2:	e71a      	b.n	adda <inverse+0x482>
    afa4:	3301      	adds	r3, #1
    afa6:	b2db      	uxtb	r3, r3
    afa8:	e5e5      	b.n	ab76 <inverse+0x21e>
    afaa:	3301      	adds	r3, #1
    afac:	b2db      	uxtb	r3, r3
    afae:	e5cd      	b.n	ab4c <inverse+0x1f4>
    afb0:	3301      	adds	r3, #1
    afb2:	b2db      	uxtb	r3, r3
    afb4:	e5b3      	b.n	ab1e <inverse+0x1c6>
    afb6:	46c0      	nop			; (mov r8, r8)
    afb8:	0001fb6d 	.word	0x0001fb6d
    afbc:	0001eea5 	.word	0x0001eea5
    afc0:	0001fc11 	.word	0x0001fc11
    afc4:	00009885 	.word	0x00009885
    afc8:	0001d939 	.word	0x0001d939
    afcc:	0001d235 	.word	0x0001d235
					b[i][j] = 0;
    afd0:	4641      	mov	r1, r8
    afd2:	6041      	str	r1, [r0, #4]
				for (j = 0 ;j < k; j++)
    afd4:	4649      	mov	r1, r9
    afd6:	2902      	cmp	r1, #2
    afd8:	d100      	bne.n	afdc <inverse+0x684>
    afda:	e5cf      	b.n	ab7c <inverse+0x224>
					b[i][j] = 0;
    afdc:	4641      	mov	r1, r8
    afde:	6081      	str	r1, [r0, #8]
				for (j = 0 ;j < k; j++)
    afe0:	4649      	mov	r1, r9
    afe2:	2903      	cmp	r1, #3
    afe4:	d100      	bne.n	afe8 <inverse+0x690>
    afe6:	e5c6      	b.n	ab76 <inverse+0x21e>
					b[i][j] = 0;
    afe8:	4641      	mov	r1, r8
    afea:	60c1      	str	r1, [r0, #12]
				for (j = 0 ;j < k; j++)
    afec:	4649      	mov	r1, r9
    afee:	2904      	cmp	r1, #4
    aff0:	d100      	bne.n	aff4 <inverse+0x69c>
    aff2:	e5c0      	b.n	ab76 <inverse+0x21e>
					b[i][j] = 0;
    aff4:	4641      	mov	r1, r8
    aff6:	6101      	str	r1, [r0, #16]
				for (j = 0 ;j < k; j++)
    aff8:	4649      	mov	r1, r9
    affa:	2905      	cmp	r1, #5
    affc:	d100      	bne.n	b000 <inverse+0x6a8>
    affe:	e5ba      	b.n	ab76 <inverse+0x21e>
					b[i][j] = 0;
    b000:	4641      	mov	r1, r8
    b002:	6141      	str	r1, [r0, #20]
    b004:	e5ba      	b.n	ab7c <inverse+0x224>
    b006:	9814      	ldr	r0, [sp, #80]	; 0x50
    b008:	4bde      	ldr	r3, [pc, #888]	; (b384 <inverse+0xa2c>)
    b00a:	4798      	blx	r3
    b00c:	e61d      	b.n	ac4a <inverse+0x2f2>
		for (c = 0; c < k; c++)
    b00e:	2000      	movs	r0, #0
    b010:	2100      	movs	r1, #0
    b012:	e61a      	b.n	ac4a <inverse+0x2f2>
			for (i = 0;i < k; i++)
    b014:	9801      	ldr	r0, [sp, #4]
						n++;
    b016:	3301      	adds	r3, #1
    b018:	b2db      	uxtb	r3, r3
			for (i = 0;i < k; i++)
    b01a:	4285      	cmp	r5, r0
    b01c:	d897      	bhi.n	af4e <inverse+0x5f6>
    b01e:	4667      	mov	r7, ip
			det = det + s * (a[0][c] * determinant(b, k - 1));
    b020:	9a04      	ldr	r2, [sp, #16]
    b022:	00bb      	lsls	r3, r7, #2
    b024:	58d6      	ldr	r6, [r2, r3]
    b026:	9907      	ldr	r1, [sp, #28]
    b028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b02a:	0020      	movs	r0, r4
    b02c:	4798      	blx	r3
    b02e:	1c01      	adds	r1, r0, #0
    b030:	1c30      	adds	r0, r6, #0
    b032:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    b034:	47b0      	blx	r6
    b036:	9b05      	ldr	r3, [sp, #20]
    b038:	3701      	adds	r7, #1
    b03a:	1c19      	adds	r1, r3, #0
    b03c:	4698      	mov	r8, r3
    b03e:	47b0      	blx	r6
    b040:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b042:	1c01      	adds	r1, r0, #0
    b044:	9803      	ldr	r0, [sp, #12]
    b046:	4798      	blx	r3
			s = -1 * s;
    b048:	2280      	movs	r2, #128	; 0x80
    b04a:	0612      	lsls	r2, r2, #24
    b04c:	4643      	mov	r3, r8
    b04e:	4694      	mov	ip, r2
    b050:	4463      	add	r3, ip
    b052:	9305      	str	r3, [sp, #20]
		for (c = 0; c < k; c++)
    b054:	9b08      	ldr	r3, [sp, #32]
			det = det + s * (a[0][c] * determinant(b, k - 1));
    b056:	9003      	str	r0, [sp, #12]
		for (c = 0; c < k; c++)
    b058:	429f      	cmp	r7, r3
    b05a:	d000      	beq.n	b05e <inverse+0x706>
    b05c:	e6ac      	b.n	adb8 <inverse+0x460>
    b05e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    b060:	4683      	mov	fp, r0
    b062:	2e01      	cmp	r6, #1
    b064:	d800      	bhi.n	b068 <inverse+0x710>
    b066:	e0f0      	b.n	b24a <inverse+0x8f2>
			dest[i][j] = b[i][j] / d;
    b068:	1c01      	adds	r1, r0, #0
    b06a:	4cc7      	ldr	r4, [pc, #796]	; (b388 <inverse+0xa30>)
    b06c:	985c      	ldr	r0, [sp, #368]	; 0x170
    b06e:	2e02      	cmp	r6, #2
    b070:	d100      	bne.n	b074 <inverse+0x71c>
    b072:	e1fc      	b.n	b46e <inverse+0xb16>
    b074:	2e03      	cmp	r6, #3
    b076:	d100      	bne.n	b07a <inverse+0x722>
    b078:	e1d5      	b.n	b426 <inverse+0xace>
    b07a:	2e04      	cmp	r6, #4
    b07c:	d100      	bne.n	b080 <inverse+0x728>
    b07e:	e192      	b.n	b3a6 <inverse+0xa4e>
    b080:	47a0      	blx	r4
    b082:	9d09      	ldr	r5, [sp, #36]	; 0x24
    b084:	4659      	mov	r1, fp
    b086:	6028      	str	r0, [r5, #0]
    b088:	985d      	ldr	r0, [sp, #372]	; 0x174
    b08a:	47a0      	blx	r4
    b08c:	4659      	mov	r1, fp
    b08e:	6068      	str	r0, [r5, #4]
    b090:	985e      	ldr	r0, [sp, #376]	; 0x178
    b092:	47a0      	blx	r4
    b094:	4659      	mov	r1, fp
    b096:	60a8      	str	r0, [r5, #8]
    b098:	985f      	ldr	r0, [sp, #380]	; 0x17c
    b09a:	47a0      	blx	r4
    b09c:	4659      	mov	r1, fp
    b09e:	60e8      	str	r0, [r5, #12]
    b0a0:	9860      	ldr	r0, [sp, #384]	; 0x180
    b0a2:	47a0      	blx	r4
    b0a4:	6128      	str	r0, [r5, #16]
		for (j = 0;j < r; j++)
    b0a6:	2e05      	cmp	r6, #5
    b0a8:	d003      	beq.n	b0b2 <inverse+0x75a>
			dest[i][j] = b[i][j] / d;
    b0aa:	4659      	mov	r1, fp
    b0ac:	9861      	ldr	r0, [sp, #388]	; 0x184
    b0ae:	47a0      	blx	r4
    b0b0:	6168      	str	r0, [r5, #20]
    b0b2:	4659      	mov	r1, fp
    b0b4:	9862      	ldr	r0, [sp, #392]	; 0x188
    b0b6:	47a0      	blx	r4
    b0b8:	4659      	mov	r1, fp
    b0ba:	61a8      	str	r0, [r5, #24]
    b0bc:	9863      	ldr	r0, [sp, #396]	; 0x18c
    b0be:	47a0      	blx	r4
    b0c0:	4659      	mov	r1, fp
    b0c2:	61e8      	str	r0, [r5, #28]
    b0c4:	9864      	ldr	r0, [sp, #400]	; 0x190
    b0c6:	47a0      	blx	r4
    b0c8:	4659      	mov	r1, fp
    b0ca:	6228      	str	r0, [r5, #32]
    b0cc:	9865      	ldr	r0, [sp, #404]	; 0x194
    b0ce:	47a0      	blx	r4
    b0d0:	4659      	mov	r1, fp
    b0d2:	6268      	str	r0, [r5, #36]	; 0x24
    b0d4:	9866      	ldr	r0, [sp, #408]	; 0x198
    b0d6:	47a0      	blx	r4
		for (j = 0;j < r; j++)
    b0d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			dest[i][j] = b[i][j] / d;
    b0da:	62a8      	str	r0, [r5, #40]	; 0x28
		for (j = 0;j < r; j++)
    b0dc:	2b05      	cmp	r3, #5
    b0de:	d003      	beq.n	b0e8 <inverse+0x790>
			dest[i][j] = b[i][j] / d;
    b0e0:	4659      	mov	r1, fp
    b0e2:	9867      	ldr	r0, [sp, #412]	; 0x19c
    b0e4:	47a0      	blx	r4
    b0e6:	62e8      	str	r0, [r5, #44]	; 0x2c
    b0e8:	4659      	mov	r1, fp
    b0ea:	9868      	ldr	r0, [sp, #416]	; 0x1a0
    b0ec:	47a0      	blx	r4
    b0ee:	4659      	mov	r1, fp
    b0f0:	6328      	str	r0, [r5, #48]	; 0x30
    b0f2:	9869      	ldr	r0, [sp, #420]	; 0x1a4
    b0f4:	47a0      	blx	r4
    b0f6:	4659      	mov	r1, fp
    b0f8:	6368      	str	r0, [r5, #52]	; 0x34
    b0fa:	986a      	ldr	r0, [sp, #424]	; 0x1a8
    b0fc:	47a0      	blx	r4
    b0fe:	4659      	mov	r1, fp
    b100:	63a8      	str	r0, [r5, #56]	; 0x38
    b102:	986b      	ldr	r0, [sp, #428]	; 0x1ac
    b104:	47a0      	blx	r4
    b106:	4659      	mov	r1, fp
    b108:	63e8      	str	r0, [r5, #60]	; 0x3c
    b10a:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    b10c:	47a0      	blx	r4
		for (j = 0;j < r; j++)
    b10e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			dest[i][j] = b[i][j] / d;
    b110:	6428      	str	r0, [r5, #64]	; 0x40
		for (j = 0;j < r; j++)
    b112:	2b05      	cmp	r3, #5
    b114:	d003      	beq.n	b11e <inverse+0x7c6>
			dest[i][j] = b[i][j] / d;
    b116:	4659      	mov	r1, fp
    b118:	986d      	ldr	r0, [sp, #436]	; 0x1b4
    b11a:	47a0      	blx	r4
    b11c:	6468      	str	r0, [r5, #68]	; 0x44
    b11e:	4659      	mov	r1, fp
    b120:	986e      	ldr	r0, [sp, #440]	; 0x1b8
    b122:	47a0      	blx	r4
    b124:	4659      	mov	r1, fp
    b126:	64a8      	str	r0, [r5, #72]	; 0x48
    b128:	986f      	ldr	r0, [sp, #444]	; 0x1bc
    b12a:	47a0      	blx	r4
    b12c:	4659      	mov	r1, fp
    b12e:	64e8      	str	r0, [r5, #76]	; 0x4c
    b130:	9870      	ldr	r0, [sp, #448]	; 0x1c0
    b132:	47a0      	blx	r4
    b134:	4659      	mov	r1, fp
    b136:	6528      	str	r0, [r5, #80]	; 0x50
    b138:	9871      	ldr	r0, [sp, #452]	; 0x1c4
    b13a:	47a0      	blx	r4
    b13c:	4659      	mov	r1, fp
    b13e:	6568      	str	r0, [r5, #84]	; 0x54
    b140:	9872      	ldr	r0, [sp, #456]	; 0x1c8
    b142:	47a0      	blx	r4
		for (j = 0;j < r; j++)
    b144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			dest[i][j] = b[i][j] / d;
    b146:	65a8      	str	r0, [r5, #88]	; 0x58
		for (j = 0;j < r; j++)
    b148:	2b05      	cmp	r3, #5
    b14a:	d003      	beq.n	b154 <inverse+0x7fc>
			dest[i][j] = b[i][j] / d;
    b14c:	4659      	mov	r1, fp
    b14e:	9873      	ldr	r0, [sp, #460]	; 0x1cc
    b150:	47a0      	blx	r4
    b152:	65e8      	str	r0, [r5, #92]	; 0x5c
    b154:	4659      	mov	r1, fp
    b156:	9874      	ldr	r0, [sp, #464]	; 0x1d0
    b158:	47a0      	blx	r4
    b15a:	9e09      	ldr	r6, [sp, #36]	; 0x24
    b15c:	4659      	mov	r1, fp
    b15e:	6630      	str	r0, [r6, #96]	; 0x60
    b160:	9875      	ldr	r0, [sp, #468]	; 0x1d4
    b162:	47a0      	blx	r4
    b164:	4659      	mov	r1, fp
    b166:	6670      	str	r0, [r6, #100]	; 0x64
    b168:	9876      	ldr	r0, [sp, #472]	; 0x1d8
    b16a:	47a0      	blx	r4
    b16c:	4659      	mov	r1, fp
    b16e:	66b0      	str	r0, [r6, #104]	; 0x68
    b170:	9877      	ldr	r0, [sp, #476]	; 0x1dc
    b172:	47a0      	blx	r4
    b174:	4659      	mov	r1, fp
    b176:	66f0      	str	r0, [r6, #108]	; 0x6c
    b178:	9878      	ldr	r0, [sp, #480]	; 0x1e0
    b17a:	47a0      	blx	r4
		for (j = 0;j < r; j++)
    b17c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			dest[i][j] = b[i][j] / d;
    b17e:	6730      	str	r0, [r6, #112]	; 0x70
		for (j = 0;j < r; j++)
    b180:	2b05      	cmp	r3, #5
    b182:	d02f      	beq.n	b1e4 <inverse+0x88c>
			dest[i][j] = b[i][j] / d;
    b184:	4659      	mov	r1, fp
    b186:	9879      	ldr	r0, [sp, #484]	; 0x1e4
    b188:	47a0      	blx	r4
    b18a:	4659      	mov	r1, fp
    b18c:	6770      	str	r0, [r6, #116]	; 0x74
    b18e:	987a      	ldr	r0, [sp, #488]	; 0x1e8
    b190:	47a0      	blx	r4
    b192:	4659      	mov	r1, fp
    b194:	67b0      	str	r0, [r6, #120]	; 0x78
    b196:	987b      	ldr	r0, [sp, #492]	; 0x1ec
    b198:	47a0      	blx	r4
    b19a:	2290      	movs	r2, #144	; 0x90
    b19c:	2580      	movs	r5, #128	; 0x80
    b19e:	0052      	lsls	r2, r2, #1
    b1a0:	ab14      	add	r3, sp, #80	; 0x50
    b1a2:	189b      	adds	r3, r3, r2
    b1a4:	67f0      	str	r0, [r6, #124]	; 0x7c
    b1a6:	4659      	mov	r1, fp
    b1a8:	5958      	ldr	r0, [r3, r5]
    b1aa:	47a0      	blx	r4
    b1ac:	2290      	movs	r2, #144	; 0x90
    b1ae:	ab14      	add	r3, sp, #80	; 0x50
    b1b0:	0052      	lsls	r2, r2, #1
    b1b2:	189b      	adds	r3, r3, r2
    b1b4:	5170      	str	r0, [r6, r5]
    b1b6:	3504      	adds	r5, #4
    b1b8:	5958      	ldr	r0, [r3, r5]
    b1ba:	4659      	mov	r1, fp
    b1bc:	47a0      	blx	r4
    b1be:	2290      	movs	r2, #144	; 0x90
    b1c0:	ab14      	add	r3, sp, #80	; 0x50
    b1c2:	0052      	lsls	r2, r2, #1
    b1c4:	189b      	adds	r3, r3, r2
    b1c6:	5170      	str	r0, [r6, r5]
    b1c8:	3504      	adds	r5, #4
    b1ca:	5958      	ldr	r0, [r3, r5]
    b1cc:	4659      	mov	r1, fp
    b1ce:	47a0      	blx	r4
    b1d0:	2290      	movs	r2, #144	; 0x90
    b1d2:	ab14      	add	r3, sp, #80	; 0x50
    b1d4:	0052      	lsls	r2, r2, #1
    b1d6:	5170      	str	r0, [r6, r5]
    b1d8:	189b      	adds	r3, r3, r2
    b1da:	3504      	adds	r5, #4
    b1dc:	4659      	mov	r1, fp
    b1de:	5958      	ldr	r0, [r3, r5]
    b1e0:	47a0      	blx	r4
    b1e2:	5170      	str	r0, [r6, r5]
}
    b1e4:	23a5      	movs	r3, #165	; 0xa5
    b1e6:	009b      	lsls	r3, r3, #2
    b1e8:	449d      	add	sp, r3
    b1ea:	bc3c      	pop	{r2, r3, r4, r5}
    b1ec:	4690      	mov	r8, r2
    b1ee:	4699      	mov	r9, r3
    b1f0:	46a2      	mov	sl, r4
    b1f2:	46ab      	mov	fp, r5
    b1f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
						n++;
    b1f6:	3301      	adds	r3, #1
    b1f8:	b2db      	uxtb	r3, r3
    b1fa:	e684      	b.n	af06 <inverse+0x5ae>
    b1fc:	3301      	adds	r3, #1
    b1fe:	b2db      	uxtb	r3, r3
    b200:	e65c      	b.n	aebc <inverse+0x564>
    b202:	3301      	adds	r3, #1
    b204:	b2db      	uxtb	r3, r3
    b206:	e634      	b.n	ae72 <inverse+0x51a>
    b208:	3301      	adds	r3, #1
    b20a:	b2db      	uxtb	r3, r3
    b20c:	e60b      	b.n	ae26 <inverse+0x4ce>
				for (j = 0 ;j < k; j++)
    b20e:	2d01      	cmp	r5, #1
    b210:	d100      	bne.n	b214 <inverse+0x8bc>
    b212:	e699      	b.n	af48 <inverse+0x5f0>
					b[i][j] = 0;
    b214:	6066      	str	r6, [r4, #4]
				for (j = 0 ;j < k; j++)
    b216:	2d02      	cmp	r5, #2
    b218:	d100      	bne.n	b21c <inverse+0x8c4>
    b21a:	e698      	b.n	af4e <inverse+0x5f6>
					b[i][j] = 0;
    b21c:	60a6      	str	r6, [r4, #8]
				for (j = 0 ;j < k; j++)
    b21e:	2d03      	cmp	r5, #3
    b220:	d100      	bne.n	b224 <inverse+0x8cc>
    b222:	e694      	b.n	af4e <inverse+0x5f6>
					b[i][j] = 0;
    b224:	60e6      	str	r6, [r4, #12]
				for (j = 0 ;j < k; j++)
    b226:	2d04      	cmp	r5, #4
    b228:	d100      	bne.n	b22c <inverse+0x8d4>
    b22a:	e690      	b.n	af4e <inverse+0x5f6>
					b[i][j] = 0;
    b22c:	6126      	str	r6, [r4, #16]
				for (j = 0 ;j < k; j++)
    b22e:	2d05      	cmp	r5, #5
    b230:	d100      	bne.n	b234 <inverse+0x8dc>
    b232:	e68c      	b.n	af4e <inverse+0x5f6>
					b[i][j] = 0;
    b234:	6166      	str	r6, [r4, #20]
    b236:	e68a      	b.n	af4e <inverse+0x5f6>
			b[i][j] = fac[j][i];
    b238:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    b23a:	935c      	str	r3, [sp, #368]	; 0x170
	if (k == 1)
    b23c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b23e:	2b01      	cmp	r3, #1
    b240:	d000      	beq.n	b244 <inverse+0x8ec>
    b242:	e59e      	b.n	ad82 <inverse+0x42a>
		return (a[0][0]);
    b244:	9b04      	ldr	r3, [sp, #16]
    b246:	681b      	ldr	r3, [r3, #0]
    b248:	469b      	mov	fp, r3
			dest[i][j] = b[i][j] / d;
    b24a:	4b4f      	ldr	r3, [pc, #316]	; (b388 <inverse+0xa30>)
    b24c:	4659      	mov	r1, fp
    b24e:	985c      	ldr	r0, [sp, #368]	; 0x170
    b250:	4798      	blx	r3
    b252:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b254:	6018      	str	r0, [r3, #0]
    b256:	e7c5      	b.n	b1e4 <inverse+0x88c>
				for (j = 0 ;j < k; j++)
    b258:	2d01      	cmp	r5, #1
    b25a:	d100      	bne.n	b25e <inverse+0x906>
    b25c:	e674      	b.n	af48 <inverse+0x5f0>
					b[i][j] = 0;
    b25e:	19e7      	adds	r7, r4, r7
    b260:	607e      	str	r6, [r7, #4]
    b262:	e5c6      	b.n	adf2 <inverse+0x49a>
				for (j = 0 ;j < k; j++)
    b264:	2d03      	cmp	r5, #3
    b266:	d100      	bne.n	b26a <inverse+0x912>
    b268:	e66e      	b.n	af48 <inverse+0x5f0>
					b[i][j] = 0;
    b26a:	60fe      	str	r6, [r7, #12]
    b26c:	e60c      	b.n	ae88 <inverse+0x530>
				for (j = 0 ;j < k; j++)
    b26e:	2d02      	cmp	r5, #2
    b270:	d100      	bne.n	b274 <inverse+0x91c>
    b272:	e669      	b.n	af48 <inverse+0x5f0>
					b[i][j] = 0;
    b274:	60be      	str	r6, [r7, #8]
    b276:	e5e2      	b.n	ae3e <inverse+0x4e6>
				for (j = 0 ;j < k; j++)
    b278:	2d05      	cmp	r5, #5
    b27a:	d100      	bne.n	b27e <inverse+0x926>
    b27c:	e664      	b.n	af48 <inverse+0x5f0>
					b[i][j] = 0;
    b27e:	617e      	str	r6, [r7, #20]
    b280:	e64b      	b.n	af1a <inverse+0x5c2>
				for (j = 0 ;j < k; j++)
    b282:	2d04      	cmp	r5, #4
    b284:	d100      	bne.n	b288 <inverse+0x930>
    b286:	e65f      	b.n	af48 <inverse+0x5f0>
					b[i][j] = 0;
    b288:	613e      	str	r6, [r7, #16]
    b28a:	e622      	b.n	aed2 <inverse+0x57a>
			b[i][j] = fac[j][i];
    b28c:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    b28e:	9362      	str	r3, [sp, #392]	; 0x188
    b290:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    b292:	9363      	str	r3, [sp, #396]	; 0x18c
    b294:	9b45      	ldr	r3, [sp, #276]	; 0x114
    b296:	9364      	str	r3, [sp, #400]	; 0x190
    b298:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    b29a:	9365      	str	r3, [sp, #404]	; 0x194
    b29c:	9b51      	ldr	r3, [sp, #324]	; 0x144
    b29e:	9366      	str	r3, [sp, #408]	; 0x198
    b2a0:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
    b2a2:	9368      	str	r3, [sp, #416]	; 0x1a0
    b2a4:	9b40      	ldr	r3, [sp, #256]	; 0x100
    b2a6:	9369      	str	r3, [sp, #420]	; 0x1a4
    b2a8:	9b46      	ldr	r3, [sp, #280]	; 0x118
    b2aa:	936a      	str	r3, [sp, #424]	; 0x1a8
    b2ac:	9b4c      	ldr	r3, [sp, #304]	; 0x130
    b2ae:	936b      	str	r3, [sp, #428]	; 0x1ac
    b2b0:	9b52      	ldr	r3, [sp, #328]	; 0x148
    b2b2:	936c      	str	r3, [sp, #432]	; 0x1b0
    b2b4:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    b2b6:	936e      	str	r3, [sp, #440]	; 0x1b8
    b2b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
    b2ba:	936f      	str	r3, [sp, #444]	; 0x1bc
    b2bc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    b2be:	9370      	str	r3, [sp, #448]	; 0x1c0
    b2c0:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    b2c2:	9371      	str	r3, [sp, #452]	; 0x1c4
    b2c4:	9b53      	ldr	r3, [sp, #332]	; 0x14c
    b2c6:	9372      	str	r3, [sp, #456]	; 0x1c8
    b2c8:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
    b2ca:	9374      	str	r3, [sp, #464]	; 0x1d0
    b2cc:	9b42      	ldr	r3, [sp, #264]	; 0x108
    b2ce:	9375      	str	r3, [sp, #468]	; 0x1d4
    b2d0:	9b48      	ldr	r3, [sp, #288]	; 0x120
    b2d2:	9376      	str	r3, [sp, #472]	; 0x1d8
    b2d4:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    b2d6:	9377      	str	r3, [sp, #476]	; 0x1dc
    b2d8:	9b54      	ldr	r3, [sp, #336]	; 0x150
    b2da:	9300      	str	r3, [sp, #0]
    b2dc:	9378      	str	r3, [sp, #480]	; 0x1e0
    b2de:	e7ad      	b.n	b23c <inverse+0x8e4>
    b2e0:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    b2e2:	935c      	str	r3, [sp, #368]	; 0x170
    b2e4:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    b2e6:	935d      	str	r3, [sp, #372]	; 0x174
    b2e8:	9b44      	ldr	r3, [sp, #272]	; 0x110
    b2ea:	935e      	str	r3, [sp, #376]	; 0x178
    b2ec:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    b2ee:	935f      	str	r3, [sp, #380]	; 0x17c
    b2f0:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    b2f2:	9362      	str	r3, [sp, #392]	; 0x188
    b2f4:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    b2f6:	9363      	str	r3, [sp, #396]	; 0x18c
    b2f8:	9b45      	ldr	r3, [sp, #276]	; 0x114
    b2fa:	9364      	str	r3, [sp, #400]	; 0x190
    b2fc:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    b2fe:	9365      	str	r3, [sp, #404]	; 0x194
    b300:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
    b302:	9368      	str	r3, [sp, #416]	; 0x1a0
    b304:	9b40      	ldr	r3, [sp, #256]	; 0x100
    b306:	9369      	str	r3, [sp, #420]	; 0x1a4
    b308:	9b46      	ldr	r3, [sp, #280]	; 0x118
    b30a:	936a      	str	r3, [sp, #424]	; 0x1a8
    b30c:	9b4c      	ldr	r3, [sp, #304]	; 0x130
    b30e:	936b      	str	r3, [sp, #428]	; 0x1ac
    b310:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    b312:	936e      	str	r3, [sp, #440]	; 0x1b8
    b314:	9b41      	ldr	r3, [sp, #260]	; 0x104
    b316:	936f      	str	r3, [sp, #444]	; 0x1bc
    b318:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    b31a:	9370      	str	r3, [sp, #448]	; 0x1c0
    b31c:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    b31e:	9300      	str	r3, [sp, #0]
    b320:	9371      	str	r3, [sp, #452]	; 0x1c4
    b322:	e52e      	b.n	ad82 <inverse+0x42a>
    b324:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    b326:	935c      	str	r3, [sp, #368]	; 0x170
    b328:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    b32a:	935d      	str	r3, [sp, #372]	; 0x174
    b32c:	9b44      	ldr	r3, [sp, #272]	; 0x110
    b32e:	935e      	str	r3, [sp, #376]	; 0x178
    b330:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    b332:	9362      	str	r3, [sp, #392]	; 0x188
    b334:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    b336:	9363      	str	r3, [sp, #396]	; 0x18c
    b338:	9b45      	ldr	r3, [sp, #276]	; 0x114
    b33a:	9364      	str	r3, [sp, #400]	; 0x190
    b33c:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
    b33e:	9368      	str	r3, [sp, #416]	; 0x1a0
    b340:	9b40      	ldr	r3, [sp, #256]	; 0x100
    b342:	9369      	str	r3, [sp, #420]	; 0x1a4
    b344:	9b46      	ldr	r3, [sp, #280]	; 0x118
    b346:	9300      	str	r3, [sp, #0]
    b348:	936a      	str	r3, [sp, #424]	; 0x1a8
    b34a:	e51a      	b.n	ad82 <inverse+0x42a>
    b34c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    b34e:	935c      	str	r3, [sp, #368]	; 0x170
    b350:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    b352:	935d      	str	r3, [sp, #372]	; 0x174
    b354:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    b356:	9362      	str	r3, [sp, #392]	; 0x188
    b358:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    b35a:	9300      	str	r3, [sp, #0]
    b35c:	9363      	str	r3, [sp, #396]	; 0x18c
    b35e:	e510      	b.n	ad82 <inverse+0x42a>
				for (j = 0 ;j < k; j++)
    b360:	4649      	mov	r1, r9
    b362:	2905      	cmp	r1, #5
    b364:	d101      	bne.n	b36a <inverse+0xa12>
    b366:	f7ff fc06 	bl	ab76 <inverse+0x21e>
					b[i][j] = 0;
    b36a:	4641      	mov	r1, r8
    b36c:	6141      	str	r1, [r0, #20]
    b36e:	f7ff fbf5 	bl	ab5c <inverse+0x204>
				for (j = 0 ;j < k; j++)
    b372:	4649      	mov	r1, r9
    b374:	2904      	cmp	r1, #4
    b376:	d101      	bne.n	b37c <inverse+0xa24>
    b378:	f7ff fbfd 	bl	ab76 <inverse+0x21e>
					b[i][j] = 0;
    b37c:	4641      	mov	r1, r8
    b37e:	6101      	str	r1, [r0, #16]
    b380:	f7ff fbd7 	bl	ab32 <inverse+0x1da>
    b384:	0001fb6d 	.word	0x0001fb6d
    b388:	0001d559 	.word	0x0001d559
				for (j = 0 ;j < k; j++)
    b38c:	4649      	mov	r1, r9
    b38e:	2903      	cmp	r1, #3
    b390:	d101      	bne.n	b396 <inverse+0xa3e>
    b392:	f7ff fbf0 	bl	ab76 <inverse+0x21e>
					b[i][j] = 0;
    b396:	4641      	mov	r1, r8
    b398:	60c1      	str	r1, [r0, #12]
    b39a:	f7ff fbb3 	bl	ab04 <inverse+0x1ac>
    b39e:	4641      	mov	r1, r8
    b3a0:	6041      	str	r1, [r0, #4]
    b3a2:	f7ff fb81 	bl	aaa8 <inverse+0x150>
			dest[i][j] = b[i][j] / d;
    b3a6:	47a0      	blx	r4
    b3a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
    b3aa:	4659      	mov	r1, fp
    b3ac:	6028      	str	r0, [r5, #0]
    b3ae:	985d      	ldr	r0, [sp, #372]	; 0x174
    b3b0:	47a0      	blx	r4
    b3b2:	4659      	mov	r1, fp
    b3b4:	6068      	str	r0, [r5, #4]
    b3b6:	985e      	ldr	r0, [sp, #376]	; 0x178
    b3b8:	47a0      	blx	r4
    b3ba:	4659      	mov	r1, fp
    b3bc:	60a8      	str	r0, [r5, #8]
    b3be:	985f      	ldr	r0, [sp, #380]	; 0x17c
    b3c0:	47a0      	blx	r4
    b3c2:	4659      	mov	r1, fp
    b3c4:	60e8      	str	r0, [r5, #12]
    b3c6:	9862      	ldr	r0, [sp, #392]	; 0x188
    b3c8:	47a0      	blx	r4
    b3ca:	4659      	mov	r1, fp
    b3cc:	61a8      	str	r0, [r5, #24]
    b3ce:	9863      	ldr	r0, [sp, #396]	; 0x18c
    b3d0:	47a0      	blx	r4
    b3d2:	4659      	mov	r1, fp
    b3d4:	61e8      	str	r0, [r5, #28]
    b3d6:	9864      	ldr	r0, [sp, #400]	; 0x190
    b3d8:	47a0      	blx	r4
    b3da:	4659      	mov	r1, fp
    b3dc:	6228      	str	r0, [r5, #32]
    b3de:	9865      	ldr	r0, [sp, #404]	; 0x194
    b3e0:	47a0      	blx	r4
    b3e2:	4659      	mov	r1, fp
    b3e4:	6268      	str	r0, [r5, #36]	; 0x24
    b3e6:	9868      	ldr	r0, [sp, #416]	; 0x1a0
    b3e8:	47a0      	blx	r4
    b3ea:	4659      	mov	r1, fp
    b3ec:	6328      	str	r0, [r5, #48]	; 0x30
    b3ee:	9869      	ldr	r0, [sp, #420]	; 0x1a4
    b3f0:	47a0      	blx	r4
    b3f2:	4659      	mov	r1, fp
    b3f4:	6368      	str	r0, [r5, #52]	; 0x34
    b3f6:	986a      	ldr	r0, [sp, #424]	; 0x1a8
    b3f8:	47a0      	blx	r4
    b3fa:	4659      	mov	r1, fp
    b3fc:	63a8      	str	r0, [r5, #56]	; 0x38
    b3fe:	986b      	ldr	r0, [sp, #428]	; 0x1ac
    b400:	47a0      	blx	r4
    b402:	4659      	mov	r1, fp
    b404:	63e8      	str	r0, [r5, #60]	; 0x3c
    b406:	986e      	ldr	r0, [sp, #440]	; 0x1b8
    b408:	47a0      	blx	r4
    b40a:	4659      	mov	r1, fp
    b40c:	64a8      	str	r0, [r5, #72]	; 0x48
    b40e:	986f      	ldr	r0, [sp, #444]	; 0x1bc
    b410:	47a0      	blx	r4
    b412:	4659      	mov	r1, fp
    b414:	64e8      	str	r0, [r5, #76]	; 0x4c
    b416:	9870      	ldr	r0, [sp, #448]	; 0x1c0
    b418:	47a0      	blx	r4
    b41a:	4659      	mov	r1, fp
    b41c:	6528      	str	r0, [r5, #80]	; 0x50
    b41e:	9871      	ldr	r0, [sp, #452]	; 0x1c4
    b420:	47a0      	blx	r4
    b422:	6568      	str	r0, [r5, #84]	; 0x54
    b424:	e6de      	b.n	b1e4 <inverse+0x88c>
    b426:	47a0      	blx	r4
    b428:	9d09      	ldr	r5, [sp, #36]	; 0x24
    b42a:	4659      	mov	r1, fp
    b42c:	6028      	str	r0, [r5, #0]
    b42e:	985d      	ldr	r0, [sp, #372]	; 0x174
    b430:	47a0      	blx	r4
    b432:	4659      	mov	r1, fp
    b434:	6068      	str	r0, [r5, #4]
    b436:	985e      	ldr	r0, [sp, #376]	; 0x178
    b438:	47a0      	blx	r4
    b43a:	4659      	mov	r1, fp
    b43c:	60a8      	str	r0, [r5, #8]
    b43e:	9862      	ldr	r0, [sp, #392]	; 0x188
    b440:	47a0      	blx	r4
    b442:	4659      	mov	r1, fp
    b444:	61a8      	str	r0, [r5, #24]
    b446:	9863      	ldr	r0, [sp, #396]	; 0x18c
    b448:	47a0      	blx	r4
    b44a:	4659      	mov	r1, fp
    b44c:	61e8      	str	r0, [r5, #28]
    b44e:	9864      	ldr	r0, [sp, #400]	; 0x190
    b450:	47a0      	blx	r4
    b452:	4659      	mov	r1, fp
    b454:	6228      	str	r0, [r5, #32]
    b456:	9868      	ldr	r0, [sp, #416]	; 0x1a0
    b458:	47a0      	blx	r4
    b45a:	4659      	mov	r1, fp
    b45c:	6328      	str	r0, [r5, #48]	; 0x30
    b45e:	9869      	ldr	r0, [sp, #420]	; 0x1a4
    b460:	47a0      	blx	r4
    b462:	4659      	mov	r1, fp
    b464:	6368      	str	r0, [r5, #52]	; 0x34
    b466:	986a      	ldr	r0, [sp, #424]	; 0x1a8
    b468:	47a0      	blx	r4
    b46a:	63a8      	str	r0, [r5, #56]	; 0x38
    b46c:	e6ba      	b.n	b1e4 <inverse+0x88c>
    b46e:	47a0      	blx	r4
    b470:	9d09      	ldr	r5, [sp, #36]	; 0x24
    b472:	4659      	mov	r1, fp
    b474:	6028      	str	r0, [r5, #0]
    b476:	985d      	ldr	r0, [sp, #372]	; 0x174
    b478:	47a0      	blx	r4
    b47a:	4659      	mov	r1, fp
    b47c:	6068      	str	r0, [r5, #4]
    b47e:	9862      	ldr	r0, [sp, #392]	; 0x188
    b480:	47a0      	blx	r4
    b482:	4659      	mov	r1, fp
    b484:	61a8      	str	r0, [r5, #24]
    b486:	9863      	ldr	r0, [sp, #396]	; 0x18c
    b488:	47a0      	blx	r4
    b48a:	61e8      	str	r0, [r5, #28]
    b48c:	e6aa      	b.n	b1e4 <inverse+0x88c>
    b48e:	46c0      	nop			; (mov r8, r8)

0000b490 <SD_add_cal_history>:
#include <SDcardBRIC.h>




FRESULT SD_add_cal_history(enum CALTYPE calType){
    b490:	b5f0      	push	{r4, r5, r6, r7, lr}
    b492:	4657      	mov	r7, sl
    b494:	46de      	mov	lr, fp
    b496:	464e      	mov	r6, r9
    b498:	4645      	mov	r5, r8
    b49a:	b5e0      	push	{r5, r6, r7, lr}
    b49c:	4cbc      	ldr	r4, [pc, #752]	; (b790 <SD_add_cal_history+0x300>)
    b49e:	0007      	movs	r7, r0
    b4a0:	44a5      	add	sp, r4
	struct TIME *timePtr;
	
	//  Set up SD card
	//spi_select_slave(&spi_main, &slave_SD, true);

	diskio_status = disk_status(0);
    b4a2:	2000      	movs	r0, #0
    b4a4:	4cbb      	ldr	r4, [pc, #748]	; (b794 <SD_add_cal_history+0x304>)
    b4a6:	47a0      	blx	r4

	if(diskio_status){
    b4a8:	2800      	cmp	r0, #0
    b4aa:	d018      	beq.n	b4de <SD_add_cal_history+0x4e>


FRESULT configure_SD(void){
	FRESULT fdebug1;
	//spi_select_slave(&spi_main, &slave_SD, true);
	sd_mmc_init();
    b4ac:	4bba      	ldr	r3, [pc, #744]	; (b798 <SD_add_cal_history+0x308>)
    b4ae:	4798      	blx	r3
	
	disk_status(0);
    b4b0:	2000      	movs	r0, #0
    b4b2:	47a0      	blx	r4

	fdebug1 = f_mount(0, &FatFS);
    b4b4:	49b9      	ldr	r1, [pc, #740]	; (b79c <SD_add_cal_history+0x30c>)
    b4b6:	2000      	movs	r0, #0
    b4b8:	4bb9      	ldr	r3, [pc, #740]	; (b7a0 <SD_add_cal_history+0x310>)
    b4ba:	4798      	blx	r3
		diskio_status = disk_status(0);
    b4bc:	2000      	movs	r0, #0
    b4be:	47a0      	blx	r4
		if(diskio_status){
    b4c0:	2800      	cmp	r0, #0
    b4c2:	d00c      	beq.n	b4de <SD_add_cal_history+0x4e>
			SD_status = fdebug1;
    b4c4:	2203      	movs	r2, #3
			return fdebug1;
    b4c6:	2003      	movs	r0, #3
			SD_status = fdebug1;
    b4c8:	4bb6      	ldr	r3, [pc, #728]	; (b7a4 <SD_add_cal_history+0x314>)
    b4ca:	701a      	strb	r2, [r3, #0]
};
    b4cc:	23a7      	movs	r3, #167	; 0xa7
    b4ce:	009b      	lsls	r3, r3, #2
    b4d0:	449d      	add	sp, r3
    b4d2:	bc3c      	pop	{r2, r3, r4, r5}
    b4d4:	4690      	mov	r8, r2
    b4d6:	4699      	mov	r9, r3
    b4d8:	46a2      	mov	sl, r4
    b4da:	46ab      	mov	fp, r5
    b4dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sprintf(filename, "Calibration_History_%04d.csv", options.SerialNumber);
    b4de:	4bb2      	ldr	r3, [pc, #712]	; (b7a8 <SD_add_cal_history+0x318>)
    b4e0:	4cb2      	ldr	r4, [pc, #712]	; (b7ac <SD_add_cal_history+0x31c>)
    b4e2:	681a      	ldr	r2, [r3, #0]
    b4e4:	4bb2      	ldr	r3, [pc, #712]	; (b7b0 <SD_add_cal_history+0x320>)
    b4e6:	49b3      	ldr	r1, [pc, #716]	; (b7b4 <SD_add_cal_history+0x324>)
    b4e8:	0020      	movs	r0, r4
    b4ea:	469b      	mov	fp, r3
    b4ec:	4798      	blx	r3
	fdebug1 = f_open(&file1,filename, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
    b4ee:	4bb2      	ldr	r3, [pc, #712]	; (b7b8 <SD_add_cal_history+0x328>)
    b4f0:	2203      	movs	r2, #3
    b4f2:	0021      	movs	r1, r4
    b4f4:	a81d      	add	r0, sp, #116	; 0x74
    b4f6:	4698      	mov	r8, r3
    b4f8:	4798      	blx	r3
	if ((fdebug1!=FR_OK) && (fdebug1!=FR_NO_FILE)){
    b4fa:	2800      	cmp	r0, #0
    b4fc:	d000      	beq.n	b500 <SD_add_cal_history+0x70>
    b4fe:	e11a      	b.n	b736 <SD_add_cal_history+0x2a6>
    b500:	4bae      	ldr	r3, [pc, #696]	; (b7bc <SD_add_cal_history+0x32c>)
    b502:	469a      	mov	sl, r3
    b504:	ab19      	add	r3, sp, #100	; 0x64
    b506:	9317      	str	r3, [sp, #92]	; 0x5c
    b508:	4bad      	ldr	r3, [pc, #692]	; (b7c0 <SD_add_cal_history+0x330>)
    b50a:	9311      	str	r3, [sp, #68]	; 0x44
    b50c:	4bad      	ldr	r3, [pc, #692]	; (b7c4 <SD_add_cal_history+0x334>)
    b50e:	9316      	str	r3, [sp, #88]	; 0x58
	fdebug2 = f_lseek(&file1, f_size(&file1));
    b510:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b512:	a81d      	add	r0, sp, #116	; 0x74
    b514:	9312      	str	r3, [sp, #72]	; 0x48
    b516:	0019      	movs	r1, r3
    b518:	4bab      	ldr	r3, [pc, #684]	; (b7c8 <SD_add_cal_history+0x338>)
    b51a:	4798      	blx	r3
	switch (calType){
    b51c:	2f01      	cmp	r7, #1
    b51e:	d100      	bne.n	b522 <SD_add_cal_history+0x92>
    b520:	e115      	b.n	b74e <SD_add_cal_history+0x2be>
    b522:	2f00      	cmp	r7, #0
    b524:	d100      	bne.n	b528 <SD_add_cal_history+0x98>
    b526:	e12b      	b.n	b780 <SD_add_cal_history+0x2f0>
    b528:	2f02      	cmp	r7, #2
    b52a:	d100      	bne.n	b52e <SD_add_cal_history+0x9e>
    b52c:	e120      	b.n	b770 <SD_add_cal_history+0x2e0>
    b52e:	4fa7      	ldr	r7, [pc, #668]	; (b7cc <SD_add_cal_history+0x33c>)
	sprintf(write_str1,"\r\n20%02x.%02x.%02x,%02x:%02x:%02x,%s,%04d,%0.1f,%0.1f,%0.1f,",
    b530:	796b      	ldrb	r3, [r5, #5]
    b532:	4ca7      	ldr	r4, [pc, #668]	; (b7d0 <SD_add_cal_history+0x340>)
    b534:	4699      	mov	r9, r3
    b536:	79ab      	ldrb	r3, [r5, #6]
    b538:	6928      	ldr	r0, [r5, #16]
    b53a:	4698      	mov	r8, r3
    b53c:	47a0      	blx	r4
    b53e:	900a      	str	r0, [sp, #40]	; 0x28
    b540:	910b      	str	r1, [sp, #44]	; 0x2c
    b542:	68e8      	ldr	r0, [r5, #12]
    b544:	47a0      	blx	r4
    b546:	2200      	movs	r2, #0
    b548:	4ba2      	ldr	r3, [pc, #648]	; (b7d4 <SD_add_cal_history+0x344>)
    b54a:	9008      	str	r0, [sp, #32]
    b54c:	9109      	str	r1, [sp, #36]	; 0x24
    b54e:	9206      	str	r2, [sp, #24]
    b550:	9307      	str	r3, [sp, #28]
    b552:	4b95      	ldr	r3, [pc, #596]	; (b7a8 <SD_add_cal_history+0x318>)
    b554:	4642      	mov	r2, r8
    b556:	681b      	ldr	r3, [r3, #0]
    b558:	9704      	str	r7, [sp, #16]
    b55a:	9305      	str	r3, [sp, #20]
    b55c:	782b      	ldrb	r3, [r5, #0]
    b55e:	499e      	ldr	r1, [pc, #632]	; (b7d8 <SD_add_cal_history+0x348>)
    b560:	9303      	str	r3, [sp, #12]
    b562:	786b      	ldrb	r3, [r5, #1]
    b564:	4650      	mov	r0, sl
    b566:	9302      	str	r3, [sp, #8]
    b568:	78ab      	ldrb	r3, [r5, #2]
    b56a:	9301      	str	r3, [sp, #4]
    b56c:	792b      	ldrb	r3, [r5, #4]
    b56e:	9300      	str	r3, [sp, #0]
    b570:	464b      	mov	r3, r9
    b572:	47d8      	blx	fp
	f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
    b574:	9b16      	ldr	r3, [sp, #88]	; 0x58
    b576:	4650      	mov	r0, sl
    b578:	4798      	blx	r3
    b57a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
    b57c:	0002      	movs	r2, r0
    b57e:	0033      	movs	r3, r6
    b580:	4651      	mov	r1, sl
    b582:	9d11      	ldr	r5, [sp, #68]	; 0x44
    b584:	a81d      	add	r0, sp, #116	; 0x74
    b586:	47a8      	blx	r5
	dist_calst.dist_offset, dist_calst.dist_offset*MT2FT, cal_report.groups, cal_report.points,
    b588:	4b94      	ldr	r3, [pc, #592]	; (b7dc <SD_add_cal_history+0x34c>)
	f_write(&file1, write_str1, strlen(write_str1), &bytesWritten);
    b58a:	46b1      	mov	r9, r6
	sprintf(write_str1,"%0.6f,%0.6f,%d,%d,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,",
    b58c:	6d98      	ldr	r0, [r3, #88]	; 0x58
    b58e:	47a0      	blx	r4
	cal_report.inc_angle_err, cal_report.azm_angle_err,cal_report.mag_stdev_a1*100, cal_report.mag_stdev_a2*100, cal_report.mag_stdev_m1*100, cal_report.mag_stdev_m2*100);
    b590:	4d93      	ldr	r5, [pc, #588]	; (b7e0 <SD_add_cal_history+0x350>)
	sprintf(write_str1,"%0.6f,%0.6f,%d,%d,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,",
    b592:	9012      	str	r0, [sp, #72]	; 0x48
    b594:	9113      	str	r1, [sp, #76]	; 0x4c
	cal_report.inc_angle_err, cal_report.azm_angle_err,cal_report.mag_stdev_a1*100, cal_report.mag_stdev_a2*100, cal_report.mag_stdev_m1*100, cal_report.mag_stdev_m2*100);
    b596:	4993      	ldr	r1, [pc, #588]	; (b7e4 <SD_add_cal_history+0x354>)
    b598:	6b68      	ldr	r0, [r5, #52]	; 0x34
    b59a:	4688      	mov	r8, r1
    b59c:	4992      	ldr	r1, [pc, #584]	; (b7e8 <SD_add_cal_history+0x358>)
    b59e:	47c0      	blx	r8
	sprintf(write_str1,"%0.6f,%0.6f,%d,%d,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,",
    b5a0:	47a0      	blx	r4
    b5a2:	900e      	str	r0, [sp, #56]	; 0x38
    b5a4:	910f      	str	r1, [sp, #60]	; 0x3c
	cal_report.inc_angle_err, cal_report.azm_angle_err,cal_report.mag_stdev_a1*100, cal_report.mag_stdev_a2*100, cal_report.mag_stdev_m1*100, cal_report.mag_stdev_m2*100);
    b5a6:	4990      	ldr	r1, [pc, #576]	; (b7e8 <SD_add_cal_history+0x358>)
    b5a8:	6b28      	ldr	r0, [r5, #48]	; 0x30
    b5aa:	47c0      	blx	r8
	sprintf(write_str1,"%0.6f,%0.6f,%d,%d,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,",
    b5ac:	47a0      	blx	r4
    b5ae:	900c      	str	r0, [sp, #48]	; 0x30
    b5b0:	910d      	str	r1, [sp, #52]	; 0x34
	cal_report.inc_angle_err, cal_report.azm_angle_err,cal_report.mag_stdev_a1*100, cal_report.mag_stdev_a2*100, cal_report.mag_stdev_m1*100, cal_report.mag_stdev_m2*100);
    b5b2:	498d      	ldr	r1, [pc, #564]	; (b7e8 <SD_add_cal_history+0x358>)
    b5b4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    b5b6:	47c0      	blx	r8
	sprintf(write_str1,"%0.6f,%0.6f,%d,%d,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,",
    b5b8:	47a0      	blx	r4
    b5ba:	900a      	str	r0, [sp, #40]	; 0x28
    b5bc:	910b      	str	r1, [sp, #44]	; 0x2c
	cal_report.inc_angle_err, cal_report.azm_angle_err,cal_report.mag_stdev_a1*100, cal_report.mag_stdev_a2*100, cal_report.mag_stdev_m1*100, cal_report.mag_stdev_m2*100);
    b5be:	498a      	ldr	r1, [pc, #552]	; (b7e8 <SD_add_cal_history+0x358>)
    b5c0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    b5c2:	47c0      	blx	r8
	sprintf(write_str1,"%0.6f,%0.6f,%d,%d,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,",
    b5c4:	47a0      	blx	r4
    b5c6:	9008      	str	r0, [sp, #32]
    b5c8:	9109      	str	r1, [sp, #36]	; 0x24
    b5ca:	6a68      	ldr	r0, [r5, #36]	; 0x24
    b5cc:	47a0      	blx	r4
    b5ce:	9006      	str	r0, [sp, #24]
    b5d0:	9107      	str	r1, [sp, #28]
    b5d2:	6a28      	ldr	r0, [r5, #32]
    b5d4:	47a0      	blx	r4
    b5d6:	9004      	str	r0, [sp, #16]
    b5d8:	9105      	str	r1, [sp, #20]
    b5da:	68a9      	ldr	r1, [r5, #8]
    b5dc:	4f83      	ldr	r7, [pc, #524]	; (b7ec <SD_add_cal_history+0x35c>)
    b5de:	9103      	str	r1, [sp, #12]
    b5e0:	6869      	ldr	r1, [r5, #4]
    b5e2:	4a83      	ldr	r2, [pc, #524]	; (b7f0 <SD_add_cal_history+0x360>)
    b5e4:	9102      	str	r1, [sp, #8]
    b5e6:	4b83      	ldr	r3, [pc, #524]	; (b7f4 <SD_add_cal_history+0x364>)
    b5e8:	9812      	ldr	r0, [sp, #72]	; 0x48
    b5ea:	9913      	ldr	r1, [sp, #76]	; 0x4c
    b5ec:	47b8      	blx	r7
    b5ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
    b5f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    b5f2:	9000      	str	r0, [sp, #0]
    b5f4:	9101      	str	r1, [sp, #4]
    b5f6:	4980      	ldr	r1, [pc, #512]	; (b7f8 <SD_add_cal_history+0x368>)
    b5f8:	4650      	mov	r0, sl
    b5fa:	47d8      	blx	fp
	f_write(&file1, write_str1, strlen(write_str1), &bytesWritten);
    b5fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
    b5fe:	4650      	mov	r0, sl
    b600:	4790      	blx	r2
    b602:	0033      	movs	r3, r6
    b604:	0002      	movs	r2, r0
    b606:	4651      	mov	r1, sl
    b608:	9e11      	ldr	r6, [sp, #68]	; 0x44
    b60a:	a81d      	add	r0, sp, #116	; 0x74
    b60c:	47b0      	blx	r6
	cal_report.disp_stdev_acc[0]*100, cal_report.disp_stdev_acc[1]*100, cal_report.disp_stdev_acc[2]*100,
    b60e:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    b610:	4975      	ldr	r1, [pc, #468]	; (b7e8 <SD_add_cal_history+0x358>)
    b612:	47c0      	blx	r8
	sprintf(write_str1,"%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,",
    b614:	47a0      	blx	r4
    b616:	0006      	movs	r6, r0
    b618:	000f      	movs	r7, r1
	cal_report.disp_stdev_comp[0]*100, cal_report.disp_stdev_comp[1]*100, cal_report.disp_stdev_comp[2]*100);
    b61a:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    b61c:	4972      	ldr	r1, [pc, #456]	; (b7e8 <SD_add_cal_history+0x358>)
    b61e:	47c0      	blx	r8
	sprintf(write_str1,"%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,",
    b620:	47a0      	blx	r4
    b622:	9008      	str	r0, [sp, #32]
    b624:	9109      	str	r1, [sp, #36]	; 0x24
	cal_report.disp_stdev_comp[0]*100, cal_report.disp_stdev_comp[1]*100, cal_report.disp_stdev_comp[2]*100);
    b626:	4970      	ldr	r1, [pc, #448]	; (b7e8 <SD_add_cal_history+0x358>)
    b628:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    b62a:	47c0      	blx	r8
	sprintf(write_str1,"%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,",
    b62c:	47a0      	blx	r4
    b62e:	9006      	str	r0, [sp, #24]
    b630:	9107      	str	r1, [sp, #28]
	cal_report.disp_stdev_comp[0]*100, cal_report.disp_stdev_comp[1]*100, cal_report.disp_stdev_comp[2]*100);
    b632:	496d      	ldr	r1, [pc, #436]	; (b7e8 <SD_add_cal_history+0x358>)
    b634:	6c68      	ldr	r0, [r5, #68]	; 0x44
    b636:	47c0      	blx	r8
	sprintf(write_str1,"%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,",
    b638:	47a0      	blx	r4
    b63a:	9004      	str	r0, [sp, #16]
    b63c:	9105      	str	r1, [sp, #20]
	cal_report.disp_stdev_acc[0]*100, cal_report.disp_stdev_acc[1]*100, cal_report.disp_stdev_acc[2]*100,
    b63e:	496a      	ldr	r1, [pc, #424]	; (b7e8 <SD_add_cal_history+0x358>)
    b640:	6c28      	ldr	r0, [r5, #64]	; 0x40
    b642:	47c0      	blx	r8
	sprintf(write_str1,"%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,",
    b644:	47a0      	blx	r4
    b646:	9002      	str	r0, [sp, #8]
    b648:	9103      	str	r1, [sp, #12]
	cal_report.disp_stdev_acc[0]*100, cal_report.disp_stdev_acc[1]*100, cal_report.disp_stdev_acc[2]*100,
    b64a:	4967      	ldr	r1, [pc, #412]	; (b7e8 <SD_add_cal_history+0x358>)
    b64c:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    b64e:	47c0      	blx	r8
	sprintf(write_str1,"%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,",
    b650:	47a0      	blx	r4
    b652:	0032      	movs	r2, r6
    b654:	9000      	str	r0, [sp, #0]
    b656:	9101      	str	r1, [sp, #4]
    b658:	003b      	movs	r3, r7
    b65a:	4968      	ldr	r1, [pc, #416]	; (b7fc <SD_add_cal_history+0x36c>)
    b65c:	4650      	mov	r0, sl
    b65e:	47d8      	blx	fp
	f_write(&file1, write_str1, strlen(write_str1), &bytesWritten);
    b660:	9a16      	ldr	r2, [sp, #88]	; 0x58
    b662:	4650      	mov	r0, sl
    b664:	4790      	blx	r2
    b666:	464b      	mov	r3, r9
    b668:	0002      	movs	r2, r0
    b66a:	9e11      	ldr	r6, [sp, #68]	; 0x44
    b66c:	4651      	mov	r1, sl
    b66e:	a81d      	add	r0, sp, #116	; 0x74
    b670:	47b0      	blx	r6
	for (i=0;i<4;i++){
    b672:	2300      	movs	r3, #0
    b674:	4656      	mov	r6, sl
			calStPtr = &a1_calst;
    b676:	4d62      	ldr	r5, [pc, #392]	; (b800 <SD_add_cal_history+0x370>)
    b678:	9312      	str	r3, [sp, #72]	; 0x48
		sprintf(write_str1,"%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,",
    b67a:	6868      	ldr	r0, [r5, #4]
    b67c:	47a0      	blx	r4
    b67e:	9014      	str	r0, [sp, #80]	; 0x50
    b680:	9115      	str	r1, [sp, #84]	; 0x54
    b682:	69a8      	ldr	r0, [r5, #24]
    b684:	47a0      	blx	r4
    b686:	9008      	str	r0, [sp, #32]
    b688:	9109      	str	r1, [sp, #36]	; 0x24
    b68a:	6968      	ldr	r0, [r5, #20]
    b68c:	47a0      	blx	r4
    b68e:	9006      	str	r0, [sp, #24]
    b690:	9107      	str	r1, [sp, #28]
    b692:	6928      	ldr	r0, [r5, #16]
    b694:	47a0      	blx	r4
    b696:	9004      	str	r0, [sp, #16]
    b698:	9105      	str	r1, [sp, #20]
    b69a:	68e8      	ldr	r0, [r5, #12]
    b69c:	47a0      	blx	r4
    b69e:	9002      	str	r0, [sp, #8]
    b6a0:	9103      	str	r1, [sp, #12]
    b6a2:	68a8      	ldr	r0, [r5, #8]
    b6a4:	47a0      	blx	r4
    b6a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
    b6a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b6aa:	9000      	str	r0, [sp, #0]
    b6ac:	9101      	str	r1, [sp, #4]
    b6ae:	4953      	ldr	r1, [pc, #332]	; (b7fc <SD_add_cal_history+0x36c>)
    b6b0:	0030      	movs	r0, r6
    b6b2:	47d8      	blx	fp
		f_write(&file1, write_str1, strlen(write_str1), &bytesWritten);
    b6b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    b6b6:	0030      	movs	r0, r6
    b6b8:	4798      	blx	r3
    b6ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    b6bc:	0002      	movs	r2, r0
    b6be:	0031      	movs	r1, r6
    b6c0:	9f11      	ldr	r7, [sp, #68]	; 0x44
    b6c2:	a81d      	add	r0, sp, #116	; 0x74
    b6c4:	4699      	mov	r9, r3
    b6c6:	47b8      	blx	r7
		RAD2DEG*calStPtr->axmYX,RAD2DEG*calStPtr->axmZY, RAD2DEG*calStPtr->axmZX,
    b6c8:	69e8      	ldr	r0, [r5, #28]
    b6ca:	494e      	ldr	r1, [pc, #312]	; (b804 <SD_add_cal_history+0x374>)
    b6cc:	47c0      	blx	r8
		sprintf(write_str1,"%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,",
    b6ce:	47a0      	blx	r4
    b6d0:	9014      	str	r0, [sp, #80]	; 0x50
    b6d2:	9115      	str	r1, [sp, #84]	; 0x54
    b6d4:	6b28      	ldr	r0, [r5, #48]	; 0x30
    b6d6:	47a0      	blx	r4
    b6d8:	9008      	str	r0, [sp, #32]
    b6da:	9109      	str	r1, [sp, #36]	; 0x24
    b6dc:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    b6de:	47a0      	blx	r4
    b6e0:	9006      	str	r0, [sp, #24]
    b6e2:	9107      	str	r1, [sp, #28]
    b6e4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    b6e6:	47a0      	blx	r4
    b6e8:	9004      	str	r0, [sp, #16]
    b6ea:	9105      	str	r1, [sp, #20]
		RAD2DEG*calStPtr->axmYX,RAD2DEG*calStPtr->axmZY, RAD2DEG*calStPtr->axmZX,
    b6ec:	4945      	ldr	r1, [pc, #276]	; (b804 <SD_add_cal_history+0x374>)
    b6ee:	6a68      	ldr	r0, [r5, #36]	; 0x24
    b6f0:	47c0      	blx	r8
		sprintf(write_str1,"%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,",
    b6f2:	47a0      	blx	r4
    b6f4:	9002      	str	r0, [sp, #8]
    b6f6:	9103      	str	r1, [sp, #12]
		RAD2DEG*calStPtr->axmYX,RAD2DEG*calStPtr->axmZY, RAD2DEG*calStPtr->axmZX,
    b6f8:	4942      	ldr	r1, [pc, #264]	; (b804 <SD_add_cal_history+0x374>)
    b6fa:	6a28      	ldr	r0, [r5, #32]
    b6fc:	47c0      	blx	r8
		sprintf(write_str1,"%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,",
    b6fe:	47a0      	blx	r4
    b700:	9a14      	ldr	r2, [sp, #80]	; 0x50
    b702:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b704:	9000      	str	r0, [sp, #0]
    b706:	9101      	str	r1, [sp, #4]
    b708:	493c      	ldr	r1, [pc, #240]	; (b7fc <SD_add_cal_history+0x36c>)
    b70a:	0030      	movs	r0, r6
    b70c:	47d8      	blx	fp
		f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
    b70e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    b710:	0030      	movs	r0, r6
    b712:	4790      	blx	r2
    b714:	464b      	mov	r3, r9
    b716:	0002      	movs	r2, r0
    b718:	0031      	movs	r1, r6
    b71a:	a81d      	add	r0, sp, #116	; 0x74
    b71c:	9f11      	ldr	r7, [sp, #68]	; 0x44
    b71e:	47b8      	blx	r7
	for (i=0;i<4;i++){
    b720:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b722:	3301      	adds	r3, #1
    b724:	9312      	str	r3, [sp, #72]	; 0x48
    b726:	2b04      	cmp	r3, #4
    b728:	d019      	beq.n	b75e <SD_add_cal_history+0x2ce>
		switch (i){
    b72a:	2b02      	cmp	r3, #2
    b72c:	d01e      	beq.n	b76c <SD_add_cal_history+0x2dc>
    b72e:	2b03      	cmp	r3, #3
    b730:	d11a      	bne.n	b768 <SD_add_cal_history+0x2d8>
			calStPtr = &m2_calst;
    b732:	4d35      	ldr	r5, [pc, #212]	; (b808 <SD_add_cal_history+0x378>)
			break;
    b734:	e7a1      	b.n	b67a <SD_add_cal_history+0x1ea>
	if ((fdebug1!=FR_OK) && (fdebug1!=FR_NO_FILE)){
    b736:	2804      	cmp	r0, #4
    b738:	d000      	beq.n	b73c <SD_add_cal_history+0x2ac>
    b73a:	e6c7      	b.n	b4cc <SD_add_cal_history+0x3c>
		fdebug1 = f_open(&file1, filename, FA_CREATE_NEW | FA_READ | FA_WRITE);
    b73c:	2207      	movs	r2, #7
    b73e:	0021      	movs	r1, r4
    b740:	a81d      	add	r0, sp, #116	; 0x74
    b742:	47c0      	blx	r8
		if(fdebug1!=FR_OK){
    b744:	2800      	cmp	r0, #0
    b746:	d075      	beq.n	b834 <SD_add_cal_history+0x3a4>
			SD_status = fdebug1;
    b748:	4b16      	ldr	r3, [pc, #88]	; (b7a4 <SD_add_cal_history+0x314>)
    b74a:	7018      	strb	r0, [r3, #0]
			return fdebug1;
    b74c:	e6be      	b.n	b4cc <SD_add_cal_history+0x3c>
		strcpy(write_str2,"Azimuth Quick Calibration");
    b74e:	4f1f      	ldr	r7, [pc, #124]	; (b7cc <SD_add_cal_history+0x33c>)
    b750:	221a      	movs	r2, #26
    b752:	492e      	ldr	r1, [pc, #184]	; (b80c <SD_add_cal_history+0x37c>)
    b754:	0038      	movs	r0, r7
    b756:	4b2e      	ldr	r3, [pc, #184]	; (b810 <SD_add_cal_history+0x380>)
    b758:	4798      	blx	r3
		timePtr = &cal_report.time_quick_azm;
    b75a:	4d2e      	ldr	r5, [pc, #184]	; (b814 <SD_add_cal_history+0x384>)
		break;
    b75c:	e6e8      	b.n	b530 <SD_add_cal_history+0xa0>
	f_close(&file1);
    b75e:	a81d      	add	r0, sp, #116	; 0x74
    b760:	4b2d      	ldr	r3, [pc, #180]	; (b818 <SD_add_cal_history+0x388>)
    b762:	4798      	blx	r3
	return fdebug1;
    b764:	2000      	movs	r0, #0
    b766:	e6b1      	b.n	b4cc <SD_add_cal_history+0x3c>
			calStPtr = &a2_calst;
    b768:	4d2c      	ldr	r5, [pc, #176]	; (b81c <SD_add_cal_history+0x38c>)
    b76a:	e786      	b.n	b67a <SD_add_cal_history+0x1ea>
			calStPtr = &m1_calst;
    b76c:	4d2c      	ldr	r5, [pc, #176]	; (b820 <SD_add_cal_history+0x390>)
    b76e:	e784      	b.n	b67a <SD_add_cal_history+0x1ea>
		strcpy(write_str2,"Rangefinder Calibration");
    b770:	4f16      	ldr	r7, [pc, #88]	; (b7cc <SD_add_cal_history+0x33c>)
    b772:	2218      	movs	r2, #24
    b774:	492b      	ldr	r1, [pc, #172]	; (b824 <SD_add_cal_history+0x394>)
    b776:	0038      	movs	r0, r7
    b778:	4b25      	ldr	r3, [pc, #148]	; (b810 <SD_add_cal_history+0x380>)
    b77a:	4798      	blx	r3
		timePtr = &cal_report.time_rangeFinder;
    b77c:	4d2a      	ldr	r5, [pc, #168]	; (b828 <SD_add_cal_history+0x398>)
		break;
    b77e:	e6d7      	b.n	b530 <SD_add_cal_history+0xa0>
		strcpy(write_str2,"Inclination & Azimuth Full Calibration");
    b780:	4f12      	ldr	r7, [pc, #72]	; (b7cc <SD_add_cal_history+0x33c>)
    b782:	2227      	movs	r2, #39	; 0x27
    b784:	4929      	ldr	r1, [pc, #164]	; (b82c <SD_add_cal_history+0x39c>)
    b786:	0038      	movs	r0, r7
    b788:	4b21      	ldr	r3, [pc, #132]	; (b810 <SD_add_cal_history+0x380>)
    b78a:	4798      	blx	r3
		timePtr = &cal_report.time_inc_azm;
    b78c:	4d28      	ldr	r5, [pc, #160]	; (b830 <SD_add_cal_history+0x3a0>)
		break;
    b78e:	e6cf      	b.n	b530 <SD_add_cal_history+0xa0>
    b790:	fffffd64 	.word	0xfffffd64
    b794:	00003d1d 	.word	0x00003d1d
    b798:	0000dc55 	.word	0x0000dc55
    b79c:	2000521c 	.word	0x2000521c
    b7a0:	00005f75 	.word	0x00005f75
    b7a4:	2000403d 	.word	0x2000403d
    b7a8:	2000332c 	.word	0x2000332c
    b7ac:	20003344 	.word	0x20003344
    b7b0:	0001fe91 	.word	0x0001fe91
    b7b4:	00024d88 	.word	0x00024d88
    b7b8:	00005f9d 	.word	0x00005f9d
    b7bc:	20003188 	.word	0x20003188
    b7c0:	00006935 	.word	0x00006935
    b7c4:	0001fffd 	.word	0x0001fffd
    b7c8:	00006d89 	.word	0x00006d89
    b7cc:	200044f4 	.word	0x200044f4
    b7d0:	0001fb6d 	.word	0x0001fb6d
    b7d4:	40100000 	.word	0x40100000
    b7d8:	000250bc 	.word	0x000250bc
    b7dc:	20005450 	.word	0x20005450
    b7e0:	20004b4c 	.word	0x20004b4c
    b7e4:	0001d939 	.word	0x0001d939
    b7e8:	42c80000 	.word	0x42c80000
    b7ec:	0001eea5 	.word	0x0001eea5
    b7f0:	0abb44e5 	.word	0x0abb44e5
    b7f4:	400a3f29 	.word	0x400a3f29
    b7f8:	000250fc 	.word	0x000250fc
    b7fc:	00025134 	.word	0x00025134
    b800:	200055d0 	.word	0x200055d0
    b804:	42652ee0 	.word	0x42652ee0
    b808:	20003fe0 	.word	0x20003fe0
    b80c:	00025088 	.word	0x00025088
    b810:	0001fd79 	.word	0x0001fd79
    b814:	20004bb0 	.word	0x20004bb0
    b818:	00006c35 	.word	0x00006c35
    b81c:	2000550c 	.word	0x2000550c
    b820:	200054b0 	.word	0x200054b0
    b824:	000250a4 	.word	0x000250a4
    b828:	20004bc4 	.word	0x20004bc4
    b82c:	00025060 	.word	0x00025060
    b830:	20004b9c 	.word	0x20004b9c
		sprintf(write_str1,"YYYY.MM.DD, HH:mm:ss,Calibration Type,SN,Software Version,Temp C,Temp F, ");
    b834:	4b7e      	ldr	r3, [pc, #504]	; (ba30 <SD_add_cal_history+0x5a0>)
    b836:	224a      	movs	r2, #74	; 0x4a
    b838:	469a      	mov	sl, r3
    b83a:	497e      	ldr	r1, [pc, #504]	; (ba34 <SD_add_cal_history+0x5a4>)
    b83c:	0018      	movs	r0, r3
    b83e:	4b7e      	ldr	r3, [pc, #504]	; (ba38 <SD_add_cal_history+0x5a8>)
    b840:	4798      	blx	r3
		f_write(&file1, write_str1, strlen(write_str1), &bytesWritten);
    b842:	4c7e      	ldr	r4, [pc, #504]	; (ba3c <SD_add_cal_history+0x5ac>)
    b844:	ab19      	add	r3, sp, #100	; 0x64
    b846:	2249      	movs	r2, #73	; 0x49
    b848:	4651      	mov	r1, sl
    b84a:	a81d      	add	r0, sp, #116	; 0x74
    b84c:	001e      	movs	r6, r3
    b84e:	9317      	str	r3, [sp, #92]	; 0x5c
    b850:	9411      	str	r4, [sp, #68]	; 0x44
    b852:	47a0      	blx	r4
		sprintf(write_str1,"Rangefinder Offset (Mt), Rangefinder Offset (ft), Groups, Points,Inc Angle Error stdev (deg),Azm Angle Error stdev (deg),Acc1 magnitude stdev (%%),Acc2 magnitude stdev (%%),Mag1 magnitude stdev (%%),Mag2 magnitude stdev (%%),");
    b854:	497a      	ldr	r1, [pc, #488]	; (ba40 <SD_add_cal_history+0x5b0>)
    b856:	4650      	mov	r0, sl
    b858:	47d8      	blx	fp
		f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
    b85a:	4b7a      	ldr	r3, [pc, #488]	; (ba44 <SD_add_cal_history+0x5b4>)
    b85c:	4650      	mov	r0, sl
    b85e:	9316      	str	r3, [sp, #88]	; 0x58
    b860:	4798      	blx	r3
    b862:	0033      	movs	r3, r6
    b864:	0002      	movs	r2, r0
    b866:	4651      	mov	r1, sl
    b868:	9c11      	ldr	r4, [sp, #68]	; 0x44
    b86a:	a81d      	add	r0, sp, #116	; 0x74
    b86c:	47a0      	blx	r4
		sprintf(write_str1,"Acc X disparity (%%),Acc Y disparity (%%),Acc Z disparity (%%),Mag X disparity (%%),Mag Y disparity (%%),Mag Z disparity (%%),");
    b86e:	4976      	ldr	r1, [pc, #472]	; (ba48 <SD_add_cal_history+0x5b8>)
    b870:	4650      	mov	r0, sl
    b872:	47d8      	blx	fp
		f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
    b874:	9a16      	ldr	r2, [sp, #88]	; 0x58
    b876:	4650      	mov	r0, sl
    b878:	4790      	blx	r2
    b87a:	0033      	movs	r3, r6
    b87c:	0002      	movs	r2, r0
    b87e:	4651      	mov	r1, sl
    b880:	9c11      	ldr	r4, [sp, #68]	; 0x44
    b882:	a81d      	add	r0, sp, #116	; 0x74
    b884:	47a0      	blx	r4
    b886:	2301      	movs	r3, #1
    b888:	4698      	mov	r8, r3
				strcpy(str_temp,"Acc1");
    b88a:	4b70      	ldr	r3, [pc, #448]	; (ba4c <SD_add_cal_history+0x5bc>)
    b88c:	4642      	mov	r2, r8
    b88e:	4699      	mov	r9, r3
    b890:	4653      	mov	r3, sl
    b892:	46a8      	mov	r8, r5
    b894:	001d      	movs	r5, r3
    b896:	0013      	movs	r3, r2
			switch (i){
    b898:	3b01      	subs	r3, #1
    b89a:	ac1a      	add	r4, sp, #104	; 0x68
    b89c:	46ba      	mov	sl, r7
    b89e:	9212      	str	r2, [sp, #72]	; 0x48
    b8a0:	2b02      	cmp	r3, #2
    b8a2:	d044      	beq.n	b92e <SD_add_cal_history+0x49e>
    b8a4:	2b03      	cmp	r3, #3
    b8a6:	d100      	bne.n	b8aa <SD_add_cal_history+0x41a>
    b8a8:	e083      	b.n	b9b2 <SD_add_cal_history+0x522>
    b8aa:	2b01      	cmp	r3, #1
    b8ac:	d079      	beq.n	b9a2 <SD_add_cal_history+0x512>
				strcpy(str_temp,"Acc1");
    b8ae:	464b      	mov	r3, r9
    b8b0:	681b      	ldr	r3, [r3, #0]
			sprintf(write_str1,"%s X Offset,%s Y Offset,%s Z Offset,%s X Gain,%s Y Gain,%s Z Gain,",str_temp,str_temp,str_temp,str_temp,str_temp,str_temp);
    b8b2:	0022      	movs	r2, r4
				strcpy(str_temp,"Acc1");
    b8b4:	6023      	str	r3, [r4, #0]
    b8b6:	464b      	mov	r3, r9
    b8b8:	791b      	ldrb	r3, [r3, #4]
			sprintf(write_str1,"%s X Offset,%s Y Offset,%s Z Offset,%s X Gain,%s Y Gain,%s Z Gain,",str_temp,str_temp,str_temp,str_temp,str_temp,str_temp);
    b8ba:	4965      	ldr	r1, [pc, #404]	; (ba50 <SD_add_cal_history+0x5c0>)
				strcpy(str_temp,"Acc1");
    b8bc:	7123      	strb	r3, [r4, #4]
			sprintf(write_str1,"%s X Offset,%s Y Offset,%s Z Offset,%s X Gain,%s Y Gain,%s Z Gain,",str_temp,str_temp,str_temp,str_temp,str_temp,str_temp);
    b8be:	0028      	movs	r0, r5
    b8c0:	0023      	movs	r3, r4
    b8c2:	9403      	str	r4, [sp, #12]
    b8c4:	9402      	str	r4, [sp, #8]
    b8c6:	9401      	str	r4, [sp, #4]
    b8c8:	9400      	str	r4, [sp, #0]
    b8ca:	47d8      	blx	fp
			f_write(&file1, write_str1, strlen(write_str1), &bytesWritten);
    b8cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
    b8ce:	0028      	movs	r0, r5
    b8d0:	4798      	blx	r3
    b8d2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
    b8d4:	0002      	movs	r2, r0
    b8d6:	0033      	movs	r3, r6
    b8d8:	0029      	movs	r1, r5
    b8da:	9f11      	ldr	r7, [sp, #68]	; 0x44
    b8dc:	a81d      	add	r0, sp, #116	; 0x74
    b8de:	47b8      	blx	r7
			sprintf(write_str1,"%s YX Misalignment (deg),%s ZY Misalignment (deg),%s ZX Misalignment (deg),",str_temp,str_temp,str_temp);
    b8e0:	0023      	movs	r3, r4
    b8e2:	495c      	ldr	r1, [pc, #368]	; (ba54 <SD_add_cal_history+0x5c4>)
    b8e4:	0022      	movs	r2, r4
    b8e6:	9400      	str	r4, [sp, #0]
    b8e8:	0028      	movs	r0, r5
    b8ea:	47d8      	blx	fp
			f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
    b8ec:	9a16      	ldr	r2, [sp, #88]	; 0x58
    b8ee:	0028      	movs	r0, r5
    b8f0:	4790      	blx	r2
    b8f2:	0033      	movs	r3, r6
    b8f4:	0002      	movs	r2, r0
    b8f6:	0029      	movs	r1, r5
    b8f8:	9f11      	ldr	r7, [sp, #68]	; 0x44
    b8fa:	a81d      	add	r0, sp, #116	; 0x74
    b8fc:	47b8      	blx	r7
			sprintf(write_str1,"%s thetaX Misalignment (deg),%s thetaY Misalignment (deg),%s thetaZ Misalignment (deg),",str_temp,str_temp,str_temp);
    b8fe:	0023      	movs	r3, r4
    b900:	4955      	ldr	r1, [pc, #340]	; (ba58 <SD_add_cal_history+0x5c8>)
    b902:	0022      	movs	r2, r4
    b904:	9400      	str	r4, [sp, #0]
    b906:	0028      	movs	r0, r5
    b908:	47d8      	blx	fp
			f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
    b90a:	9a16      	ldr	r2, [sp, #88]	; 0x58
    b90c:	0028      	movs	r0, r5
    b90e:	4790      	blx	r2
    b910:	0033      	movs	r3, r6
    b912:	0002      	movs	r2, r0
    b914:	0029      	movs	r1, r5
    b916:	a81d      	add	r0, sp, #116	; 0x74
    b918:	9f11      	ldr	r7, [sp, #68]	; 0x44
    b91a:	47b8      	blx	r7
		for (i=0;i<4;i++){
    b91c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b91e:	2b04      	cmp	r3, #4
    b920:	d100      	bne.n	b924 <SD_add_cal_history+0x494>
    b922:	e080      	b.n	ba26 <SD_add_cal_history+0x596>
    b924:	3301      	adds	r3, #1
    b926:	9312      	str	r3, [sp, #72]	; 0x48
			switch (i){
    b928:	3b01      	subs	r3, #1
    b92a:	2b02      	cmp	r3, #2
    b92c:	d1ba      	bne.n	b8a4 <SD_add_cal_history+0x414>
				strcpy(str_temp,"Mag1");
    b92e:	4b4b      	ldr	r3, [pc, #300]	; (ba5c <SD_add_cal_history+0x5cc>)
    b930:	681b      	ldr	r3, [r3, #0]
    b932:	9314      	str	r3, [sp, #80]	; 0x50
    b934:	6023      	str	r3, [r4, #0]
    b936:	4b49      	ldr	r3, [pc, #292]	; (ba5c <SD_add_cal_history+0x5cc>)
    b938:	791b      	ldrb	r3, [r3, #4]
    b93a:	7123      	strb	r3, [r4, #4]
			sprintf(write_str1,"%s X Offset,%s Y Offset,%s Z Offset,%s X Gain,%s Y Gain,%s Z Gain,",str_temp,str_temp,str_temp,str_temp,str_temp,str_temp);
    b93c:	0022      	movs	r2, r4
    b93e:	4944      	ldr	r1, [pc, #272]	; (ba50 <SD_add_cal_history+0x5c0>)
    b940:	0023      	movs	r3, r4
    b942:	9403      	str	r4, [sp, #12]
    b944:	9402      	str	r4, [sp, #8]
    b946:	9401      	str	r4, [sp, #4]
    b948:	9400      	str	r4, [sp, #0]
    b94a:	0028      	movs	r0, r5
    b94c:	47d8      	blx	fp
			f_write(&file1, write_str1, strlen(write_str1), &bytesWritten);
    b94e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    b950:	0028      	movs	r0, r5
    b952:	4798      	blx	r3
    b954:	9e17      	ldr	r6, [sp, #92]	; 0x5c
    b956:	0002      	movs	r2, r0
    b958:	0033      	movs	r3, r6
    b95a:	0029      	movs	r1, r5
    b95c:	9f11      	ldr	r7, [sp, #68]	; 0x44
    b95e:	a81d      	add	r0, sp, #116	; 0x74
    b960:	47b8      	blx	r7
			sprintf(write_str1,"%s YX Misalignment (deg),%s ZY Misalignment (deg),%s ZX Misalignment (deg),",str_temp,str_temp,str_temp);
    b962:	0023      	movs	r3, r4
    b964:	493b      	ldr	r1, [pc, #236]	; (ba54 <SD_add_cal_history+0x5c4>)
    b966:	0022      	movs	r2, r4
    b968:	9400      	str	r4, [sp, #0]
    b96a:	0028      	movs	r0, r5
    b96c:	47d8      	blx	fp
			f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
    b96e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    b970:	0028      	movs	r0, r5
    b972:	4790      	blx	r2
    b974:	0033      	movs	r3, r6
    b976:	0002      	movs	r2, r0
    b978:	0029      	movs	r1, r5
    b97a:	9f11      	ldr	r7, [sp, #68]	; 0x44
    b97c:	a81d      	add	r0, sp, #116	; 0x74
    b97e:	47b8      	blx	r7
			sprintf(write_str1,"%s thetaX Misalignment (deg),%s thetaY Misalignment (deg),%s thetaZ Misalignment (deg),",str_temp,str_temp,str_temp);
    b980:	0023      	movs	r3, r4
    b982:	4935      	ldr	r1, [pc, #212]	; (ba58 <SD_add_cal_history+0x5c8>)
    b984:	0022      	movs	r2, r4
    b986:	9400      	str	r4, [sp, #0]
    b988:	0028      	movs	r0, r5
    b98a:	47d8      	blx	fp
			f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
    b98c:	9a16      	ldr	r2, [sp, #88]	; 0x58
    b98e:	0028      	movs	r0, r5
    b990:	4790      	blx	r2
    b992:	0033      	movs	r3, r6
    b994:	0002      	movs	r2, r0
    b996:	0029      	movs	r1, r5
    b998:	a81d      	add	r0, sp, #116	; 0x74
    b99a:	9f11      	ldr	r7, [sp, #68]	; 0x44
    b99c:	47b8      	blx	r7
    b99e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b9a0:	e7c0      	b.n	b924 <SD_add_cal_history+0x494>
				strcpy(str_temp,"Acc2");
    b9a2:	4b2f      	ldr	r3, [pc, #188]	; (ba60 <SD_add_cal_history+0x5d0>)
    b9a4:	681b      	ldr	r3, [r3, #0]
    b9a6:	9314      	str	r3, [sp, #80]	; 0x50
    b9a8:	6023      	str	r3, [r4, #0]
    b9aa:	4b2d      	ldr	r3, [pc, #180]	; (ba60 <SD_add_cal_history+0x5d0>)
    b9ac:	791b      	ldrb	r3, [r3, #4]
    b9ae:	7123      	strb	r3, [r4, #4]
				break;
    b9b0:	e7c4      	b.n	b93c <SD_add_cal_history+0x4ac>
    b9b2:	4657      	mov	r7, sl
    b9b4:	46aa      	mov	sl, r5
				strcpy(str_temp,"Mag2");
    b9b6:	4b2b      	ldr	r3, [pc, #172]	; (ba64 <SD_add_cal_history+0x5d4>)
			sprintf(write_str1,"%s X Offset,%s Y Offset,%s Z Offset,%s X Gain,%s Y Gain,%s Z Gain,",str_temp,str_temp,str_temp,str_temp,str_temp,str_temp);
    b9b8:	4925      	ldr	r1, [pc, #148]	; (ba50 <SD_add_cal_history+0x5c0>)
				strcpy(str_temp,"Mag2");
    b9ba:	681a      	ldr	r2, [r3, #0]
			sprintf(write_str1,"%s X Offset,%s Y Offset,%s Z Offset,%s X Gain,%s Y Gain,%s Z Gain,",str_temp,str_temp,str_temp,str_temp,str_temp,str_temp);
    b9bc:	4650      	mov	r0, sl
				strcpy(str_temp,"Mag2");
    b9be:	921a      	str	r2, [sp, #104]	; 0x68
    b9c0:	791b      	ldrb	r3, [r3, #4]
			sprintf(write_str1,"%s X Offset,%s Y Offset,%s Z Offset,%s X Gain,%s Y Gain,%s Z Gain,",str_temp,str_temp,str_temp,str_temp,str_temp,str_temp);
    b9c2:	0022      	movs	r2, r4
				strcpy(str_temp,"Mag2");
    b9c4:	7123      	strb	r3, [r4, #4]
			sprintf(write_str1,"%s X Offset,%s Y Offset,%s Z Offset,%s X Gain,%s Y Gain,%s Z Gain,",str_temp,str_temp,str_temp,str_temp,str_temp,str_temp);
    b9c6:	0023      	movs	r3, r4
    b9c8:	9403      	str	r4, [sp, #12]
    b9ca:	9402      	str	r4, [sp, #8]
    b9cc:	9401      	str	r4, [sp, #4]
    b9ce:	9400      	str	r4, [sp, #0]
    b9d0:	47d8      	blx	fp
			f_write(&file1, write_str1, strlen(write_str1), &bytesWritten);
    b9d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    b9d4:	4650      	mov	r0, sl
    b9d6:	4798      	blx	r3
    b9d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    b9da:	0002      	movs	r2, r0
    b9dc:	4651      	mov	r1, sl
    b9de:	9e11      	ldr	r6, [sp, #68]	; 0x44
    b9e0:	a81d      	add	r0, sp, #116	; 0x74
    b9e2:	4645      	mov	r5, r8
    b9e4:	4698      	mov	r8, r3
    b9e6:	47b0      	blx	r6
			sprintf(write_str1,"%s YX Misalignment (deg),%s ZY Misalignment (deg),%s ZX Misalignment (deg),",str_temp,str_temp,str_temp);
    b9e8:	0023      	movs	r3, r4
    b9ea:	0022      	movs	r2, r4
    b9ec:	4919      	ldr	r1, [pc, #100]	; (ba54 <SD_add_cal_history+0x5c4>)
    b9ee:	9400      	str	r4, [sp, #0]
    b9f0:	4650      	mov	r0, sl
    b9f2:	47d8      	blx	fp
			f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
    b9f4:	9a16      	ldr	r2, [sp, #88]	; 0x58
    b9f6:	4650      	mov	r0, sl
    b9f8:	4790      	blx	r2
    b9fa:	4643      	mov	r3, r8
    b9fc:	0002      	movs	r2, r0
    b9fe:	4651      	mov	r1, sl
    ba00:	9e11      	ldr	r6, [sp, #68]	; 0x44
    ba02:	a81d      	add	r0, sp, #116	; 0x74
    ba04:	47b0      	blx	r6
			sprintf(write_str1,"%s thetaX Misalignment (deg),%s thetaY Misalignment (deg),%s thetaZ Misalignment (deg),",str_temp,str_temp,str_temp);
    ba06:	0023      	movs	r3, r4
    ba08:	0022      	movs	r2, r4
    ba0a:	4913      	ldr	r1, [pc, #76]	; (ba58 <SD_add_cal_history+0x5c8>)
    ba0c:	9400      	str	r4, [sp, #0]
    ba0e:	4650      	mov	r0, sl
    ba10:	47d8      	blx	fp
			f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
    ba12:	9a16      	ldr	r2, [sp, #88]	; 0x58
    ba14:	4650      	mov	r0, sl
    ba16:	4790      	blx	r2
    ba18:	4643      	mov	r3, r8
    ba1a:	0002      	movs	r2, r0
    ba1c:	4651      	mov	r1, sl
    ba1e:	a81d      	add	r0, sp, #116	; 0x74
    ba20:	9e11      	ldr	r6, [sp, #68]	; 0x44
    ba22:	47b0      	blx	r6
    ba24:	e574      	b.n	b510 <SD_add_cal_history+0x80>
    ba26:	4657      	mov	r7, sl
    ba28:	46aa      	mov	sl, r5
    ba2a:	4645      	mov	r5, r8
    ba2c:	e570      	b.n	b510 <SD_add_cal_history+0x80>
    ba2e:	46c0      	nop			; (mov r8, r8)
    ba30:	20003188 	.word	0x20003188
    ba34:	00024da8 	.word	0x00024da8
    ba38:	0001fd79 	.word	0x0001fd79
    ba3c:	00006935 	.word	0x00006935
    ba40:	00024df4 	.word	0x00024df4
    ba44:	0001fffd 	.word	0x0001fffd
    ba48:	00024ed8 	.word	0x00024ed8
    ba4c:	00024f58 	.word	0x00024f58
    ba50:	00024f60 	.word	0x00024f60
    ba54:	00024fa4 	.word	0x00024fa4
    ba58:	00024ff0 	.word	0x00024ff0
    ba5c:	00025050 	.word	0x00025050
    ba60:	00025048 	.word	0x00025048
    ba64:	00025058 	.word	0x00025058

0000ba68 <SD_write_report>:
FRESULT SD_write_report(void){
    ba68:	b5f0      	push	{r4, r5, r6, r7, lr}
    ba6a:	46de      	mov	lr, fp
    ba6c:	4657      	mov	r7, sl
    ba6e:	464e      	mov	r6, r9
    ba70:	4645      	mov	r5, r8
    ba72:	b5e0      	push	{r5, r6, r7, lr}
    ba74:	4c1b      	ldr	r4, [pc, #108]	; (bae4 <SD_write_report+0x7c>)
	diskio_status = disk_status(0);
    ba76:	2000      	movs	r0, #0
FRESULT SD_write_report(void){
    ba78:	44a5      	add	sp, r4
	diskio_status = disk_status(0);
    ba7a:	4c1b      	ldr	r4, [pc, #108]	; (bae8 <SD_write_report+0x80>)
    ba7c:	47a0      	blx	r4
	if(diskio_status){
    ba7e:	2800      	cmp	r0, #0
    ba80:	d00c      	beq.n	ba9c <SD_write_report+0x34>
	sd_mmc_init();
    ba82:	4b1a      	ldr	r3, [pc, #104]	; (baec <SD_write_report+0x84>)
    ba84:	4798      	blx	r3
	disk_status(0);
    ba86:	2000      	movs	r0, #0
    ba88:	47a0      	blx	r4
	fdebug1 = f_mount(0, &FatFS);
    ba8a:	4919      	ldr	r1, [pc, #100]	; (baf0 <SD_write_report+0x88>)
    ba8c:	2000      	movs	r0, #0
    ba8e:	4b19      	ldr	r3, [pc, #100]	; (baf4 <SD_write_report+0x8c>)
    ba90:	4798      	blx	r3
		diskio_status = disk_status(0);
    ba92:	2000      	movs	r0, #0
    ba94:	47a0      	blx	r4
		if(diskio_status){
    ba96:	2800      	cmp	r0, #0
    ba98:	d000      	beq.n	ba9c <SD_write_report+0x34>
    ba9a:	e2cb      	b.n	c034 <SD_write_report+0x5cc>
	sprintf(file_name, "20%02x%02x%02x_%02x%02x%02x_SN%04d_calibration_report.txt",
    ba9c:	4c16      	ldr	r4, [pc, #88]	; (baf8 <SD_write_report+0x90>)
	current_time.year, current_time.month, current_time.date,
    ba9e:	4917      	ldr	r1, [pc, #92]	; (bafc <SD_write_report+0x94>)
	sprintf(file_name, "20%02x%02x%02x_%02x%02x%02x_SN%04d_calibration_report.txt",
    baa0:	6820      	ldr	r0, [r4, #0]
    baa2:	794b      	ldrb	r3, [r1, #5]
    baa4:	798a      	ldrb	r2, [r1, #6]
    baa6:	9004      	str	r0, [sp, #16]
    baa8:	7808      	ldrb	r0, [r1, #0]
    baaa:	4d15      	ldr	r5, [pc, #84]	; (bb00 <SD_write_report+0x98>)
    baac:	9003      	str	r0, [sp, #12]
    baae:	7848      	ldrb	r0, [r1, #1]
    bab0:	9002      	str	r0, [sp, #8]
    bab2:	7888      	ldrb	r0, [r1, #2]
    bab4:	9001      	str	r0, [sp, #4]
    bab6:	7909      	ldrb	r1, [r1, #4]
    bab8:	a814      	add	r0, sp, #80	; 0x50
    baba:	9100      	str	r1, [sp, #0]
    babc:	4911      	ldr	r1, [pc, #68]	; (bb04 <SD_write_report+0x9c>)
    babe:	47a8      	blx	r5
	fdebug2 = f_open(&file1, file_name, FA_CREATE_NEW | FA_READ | FA_WRITE);
    bac0:	2207      	movs	r2, #7
    bac2:	a914      	add	r1, sp, #80	; 0x50
    bac4:	a85b      	add	r0, sp, #364	; 0x16c
    bac6:	4b10      	ldr	r3, [pc, #64]	; (bb08 <SD_write_report+0xa0>)
    bac8:	4798      	blx	r3
	if(fdebug2!=FR_OK){
    baca:	2800      	cmp	r0, #0
    bacc:	d020      	beq.n	bb10 <SD_write_report+0xa8>
		SD_status = fdebug2;
    bace:	4b0f      	ldr	r3, [pc, #60]	; (bb0c <SD_write_report+0xa4>)
    bad0:	7018      	strb	r0, [r3, #0]
}
    bad2:	23e5      	movs	r3, #229	; 0xe5
    bad4:	009b      	lsls	r3, r3, #2
    bad6:	449d      	add	sp, r3
    bad8:	bc3c      	pop	{r2, r3, r4, r5}
    bada:	4690      	mov	r8, r2
    badc:	4699      	mov	r9, r3
    bade:	46a2      	mov	sl, r4
    bae0:	46ab      	mov	fp, r5
    bae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bae4:	fffffc6c 	.word	0xfffffc6c
    bae8:	00003d1d 	.word	0x00003d1d
    baec:	0000dc55 	.word	0x0000dc55
    baf0:	2000521c 	.word	0x2000521c
    baf4:	00005f75 	.word	0x00005f75
    baf8:	2000332c 	.word	0x2000332c
    bafc:	20002778 	.word	0x20002778
    bb00:	0001fe91 	.word	0x0001fe91
    bb04:	000251a8 	.word	0x000251a8
    bb08:	00005f9d 	.word	0x00005f9d
    bb0c:	2000403d 	.word	0x2000403d
	sprintf(write_str1,"Calibration Report\r\n\r\nDate and Time:\r\nYYYY.MM.DD@HH:mm:ss\r\n20%02x.%02x.%02x@%02x:%02x:%02x\r\n\r\n",
    bb10:	49fb      	ldr	r1, [pc, #1004]	; (bf00 <SD_write_report+0x498>)
	cal_report.time_inc_azm.year, cal_report.time_inc_azm.month, cal_report.time_inc_azm.date,
    bb12:	2355      	movs	r3, #85	; 0x55
	sprintf(write_str1,"Calibration Report\r\n\r\nDate and Time:\r\nYYYY.MM.DD@HH:mm:ss\r\n20%02x.%02x.%02x@%02x:%02x:%02x\r\n\r\n",
    bb14:	468b      	mov	fp, r1
	cal_report.time_inc_azm.hours, cal_report.time_inc_azm.minutes, cal_report.time_inc_azm.seconds);
    bb16:	2150      	movs	r1, #80	; 0x50
	cal_report.time_inc_azm.year, cal_report.time_inc_azm.month, cal_report.time_inc_azm.date,
    bb18:	2256      	movs	r2, #86	; 0x56
    bb1a:	4efa      	ldr	r6, [pc, #1000]	; (bf04 <SD_write_report+0x49c>)
	sprintf(write_str1,"Calibration Report\r\n\r\nDate and Time:\r\nYYYY.MM.DD@HH:mm:ss\r\n20%02x.%02x.%02x@%02x:%02x:%02x\r\n\r\n",
    bb1c:	4dfa      	ldr	r5, [pc, #1000]	; (bf08 <SD_write_report+0x4a0>)
    bb1e:	5c71      	ldrb	r1, [r6, r1]
    bb20:	5cb2      	ldrb	r2, [r6, r2]
    bb22:	5cf3      	ldrb	r3, [r6, r3]
    bb24:	9103      	str	r1, [sp, #12]
	cal_report.time_inc_azm.hours, cal_report.time_inc_azm.minutes, cal_report.time_inc_azm.seconds);
    bb26:	2151      	movs	r1, #81	; 0x51
	sprintf(write_str1,"Calibration Report\r\n\r\nDate and Time:\r\nYYYY.MM.DD@HH:mm:ss\r\n20%02x.%02x.%02x@%02x:%02x:%02x\r\n\r\n",
    bb28:	5c71      	ldrb	r1, [r6, r1]
    bb2a:	4658      	mov	r0, fp
    bb2c:	9102      	str	r1, [sp, #8]
	cal_report.time_inc_azm.hours, cal_report.time_inc_azm.minutes, cal_report.time_inc_azm.seconds);
    bb2e:	2152      	movs	r1, #82	; 0x52
	sprintf(write_str1,"Calibration Report\r\n\r\nDate and Time:\r\nYYYY.MM.DD@HH:mm:ss\r\n20%02x.%02x.%02x@%02x:%02x:%02x\r\n\r\n",
    bb30:	5c71      	ldrb	r1, [r6, r1]
    bb32:	9101      	str	r1, [sp, #4]
	cal_report.time_inc_azm.year, cal_report.time_inc_azm.month, cal_report.time_inc_azm.date,
    bb34:	2154      	movs	r1, #84	; 0x54
	sprintf(write_str1,"Calibration Report\r\n\r\nDate and Time:\r\nYYYY.MM.DD@HH:mm:ss\r\n20%02x.%02x.%02x@%02x:%02x:%02x\r\n\r\n",
    bb36:	5c71      	ldrb	r1, [r6, r1]
    bb38:	9100      	str	r1, [sp, #0]
    bb3a:	49f4      	ldr	r1, [pc, #976]	; (bf0c <SD_write_report+0x4a4>)
    bb3c:	47a8      	blx	r5
	fdebug3 = f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
    bb3e:	4bf4      	ldr	r3, [pc, #976]	; (bf10 <SD_write_report+0x4a8>)
    bb40:	4658      	mov	r0, fp
    bb42:	4798      	blx	r3
    bb44:	ab13      	add	r3, sp, #76	; 0x4c
    bb46:	0002      	movs	r2, r0
    bb48:	4659      	mov	r1, fp
    bb4a:	4df2      	ldr	r5, [pc, #968]	; (bf14 <SD_write_report+0x4ac>)
    bb4c:	a85b      	add	r0, sp, #364	; 0x16c
    bb4e:	47a8      	blx	r5
	sprintf(write_str1,"SN: %04d\r\nSoftware Version: %1.1f\r\n", options.SerialNumber, cal_report.software_version);
    bb50:	4bf1      	ldr	r3, [pc, #964]	; (bf18 <SD_write_report+0x4b0>)
    bb52:	6830      	ldr	r0, [r6, #0]
    bb54:	4699      	mov	r9, r3
    bb56:	4798      	blx	r3
    bb58:	6824      	ldr	r4, [r4, #0]
    bb5a:	4beb      	ldr	r3, [pc, #940]	; (bf08 <SD_write_report+0x4a0>)
    bb5c:	0022      	movs	r2, r4
    bb5e:	9000      	str	r0, [sp, #0]
    bb60:	9101      	str	r1, [sp, #4]
    bb62:	49ee      	ldr	r1, [pc, #952]	; (bf1c <SD_write_report+0x4b4>)
    bb64:	4658      	mov	r0, fp
    bb66:	4798      	blx	r3
	fdebug3 = f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
    bb68:	4be9      	ldr	r3, [pc, #932]	; (bf10 <SD_write_report+0x4a8>)
    bb6a:	4658      	mov	r0, fp
    bb6c:	4798      	blx	r3
    bb6e:	ab13      	add	r3, sp, #76	; 0x4c
    bb70:	0002      	movs	r2, r0
    bb72:	4659      	mov	r1, fp
    bb74:	4ce7      	ldr	r4, [pc, #924]	; (bf14 <SD_write_report+0x4ac>)
    bb76:	a85b      	add	r0, sp, #364	; 0x16c
    bb78:	47a0      	blx	r4
	sprintf(write_str1,"Temperature: %0.1f farenheit, %0.1f celsius\r\n\r\n", cal_report.time_inc_azm.temperatureF, cal_report.time_inc_azm.temperatureC);
    bb7a:	6e30      	ldr	r0, [r6, #96]	; 0x60
    bb7c:	47c8      	blx	r9
    bb7e:	0004      	movs	r4, r0
    bb80:	6df0      	ldr	r0, [r6, #92]	; 0x5c
    bb82:	000d      	movs	r5, r1
    bb84:	47c8      	blx	r9
    bb86:	0022      	movs	r2, r4
    bb88:	9000      	str	r0, [sp, #0]
    bb8a:	9101      	str	r1, [sp, #4]
    bb8c:	002b      	movs	r3, r5
    bb8e:	49e4      	ldr	r1, [pc, #912]	; (bf20 <SD_write_report+0x4b8>)
    bb90:	4cdd      	ldr	r4, [pc, #884]	; (bf08 <SD_write_report+0x4a0>)
    bb92:	4658      	mov	r0, fp
    bb94:	47a0      	blx	r4
	fdebug3 = f_write(&file1, write_str1, strlen(write_str1), &bytesWritten);
    bb96:	4bde      	ldr	r3, [pc, #888]	; (bf10 <SD_write_report+0x4a8>)
    bb98:	4658      	mov	r0, fp
    bb9a:	4798      	blx	r3
    bb9c:	ab13      	add	r3, sp, #76	; 0x4c
    bb9e:	0002      	movs	r2, r0
    bba0:	4659      	mov	r1, fp
    bba2:	4cdc      	ldr	r4, [pc, #880]	; (bf14 <SD_write_report+0x4ac>)
    bba4:	a85b      	add	r0, sp, #364	; 0x16c
    bba6:	47a0      	blx	r4
	sprintf(write_str1,"Measurements: %d\r\n4-Point Groups: %d\r\n\r\n",
    bba8:	68b2      	ldr	r2, [r6, #8]
    bbaa:	49de      	ldr	r1, [pc, #888]	; (bf24 <SD_write_report+0x4bc>)
    bbac:	6873      	ldr	r3, [r6, #4]
    bbae:	4cd6      	ldr	r4, [pc, #856]	; (bf08 <SD_write_report+0x4a0>)
    bbb0:	4658      	mov	r0, fp
    bbb2:	47a0      	blx	r4
	fdebug3 = f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
    bbb4:	4bd6      	ldr	r3, [pc, #856]	; (bf10 <SD_write_report+0x4a8>)
    bbb6:	4658      	mov	r0, fp
    bbb8:	4798      	blx	r3
    bbba:	ab13      	add	r3, sp, #76	; 0x4c
    bbbc:	0002      	movs	r2, r0
    bbbe:	4659      	mov	r1, fp
    bbc0:	4cd4      	ldr	r4, [pc, #848]	; (bf14 <SD_write_report+0x4ac>)
    bbc2:	a85b      	add	r0, sp, #364	; 0x16c
    bbc4:	47a0      	blx	r4
	sprintf(write_str1,"Angle Error Standard Deviation:\r\n  Azimuth: %3.6f degrees\r\n  Inclination: %3.6f degrees\r\n",
    bbc6:	6a70      	ldr	r0, [r6, #36]	; 0x24
    bbc8:	47c8      	blx	r9
    bbca:	0004      	movs	r4, r0
    bbcc:	6a30      	ldr	r0, [r6, #32]
    bbce:	000d      	movs	r5, r1
    bbd0:	47c8      	blx	r9
    bbd2:	0022      	movs	r2, r4
    bbd4:	9000      	str	r0, [sp, #0]
    bbd6:	9101      	str	r1, [sp, #4]
    bbd8:	002b      	movs	r3, r5
    bbda:	49d3      	ldr	r1, [pc, #844]	; (bf28 <SD_write_report+0x4c0>)
    bbdc:	4cca      	ldr	r4, [pc, #808]	; (bf08 <SD_write_report+0x4a0>)
    bbde:	4658      	mov	r0, fp
    bbe0:	47a0      	blx	r4
	fdebug3 = f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
    bbe2:	4bcb      	ldr	r3, [pc, #812]	; (bf10 <SD_write_report+0x4a8>)
    bbe4:	4658      	mov	r0, fp
    bbe6:	4798      	blx	r3
    bbe8:	ab13      	add	r3, sp, #76	; 0x4c
    bbea:	0002      	movs	r2, r0
    bbec:	4659      	mov	r1, fp
    bbee:	4cc9      	ldr	r4, [pc, #804]	; (bf14 <SD_write_report+0x4ac>)
    bbf0:	a85b      	add	r0, sp, #364	; 0x16c
    bbf2:	47a0      	blx	r4
	cal_report.mag_stdev_a1*100, cal_report.mag_stdev_a2*100,cal_report.mag_stdev_m1*100, cal_report.mag_stdev_m2*100);
    bbf4:	4bcd      	ldr	r3, [pc, #820]	; (bf2c <SD_write_report+0x4c4>)
    bbf6:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    bbf8:	49cd      	ldr	r1, [pc, #820]	; (bf30 <SD_write_report+0x4c8>)
    bbfa:	4698      	mov	r8, r3
    bbfc:	4798      	blx	r3
	sprintf(write_str1,"Magnitude Error Standard Deviation:\r\n  Accelerometer 1: %3.6f %%\r\n  Accelerometer 2: %3.6f %%\r\n  Compass 1: %3.6f %%\r\n  Compass 2: %3.6f %%\r\n",
    bbfe:	47c8      	blx	r9
    bc00:	0004      	movs	r4, r0
    bc02:	000d      	movs	r5, r1
	cal_report.mag_stdev_a1*100, cal_report.mag_stdev_a2*100,cal_report.mag_stdev_m1*100, cal_report.mag_stdev_m2*100);
    bc04:	6b70      	ldr	r0, [r6, #52]	; 0x34
    bc06:	49ca      	ldr	r1, [pc, #808]	; (bf30 <SD_write_report+0x4c8>)
    bc08:	47c0      	blx	r8
	sprintf(write_str1,"Magnitude Error Standard Deviation:\r\n  Accelerometer 1: %3.6f %%\r\n  Accelerometer 2: %3.6f %%\r\n  Compass 1: %3.6f %%\r\n  Compass 2: %3.6f %%\r\n",
    bc0a:	47c8      	blx	r9
    bc0c:	9004      	str	r0, [sp, #16]
    bc0e:	9105      	str	r1, [sp, #20]
	cal_report.mag_stdev_a1*100, cal_report.mag_stdev_a2*100,cal_report.mag_stdev_m1*100, cal_report.mag_stdev_m2*100);
    bc10:	49c7      	ldr	r1, [pc, #796]	; (bf30 <SD_write_report+0x4c8>)
    bc12:	6b30      	ldr	r0, [r6, #48]	; 0x30
    bc14:	47c0      	blx	r8
	sprintf(write_str1,"Magnitude Error Standard Deviation:\r\n  Accelerometer 1: %3.6f %%\r\n  Accelerometer 2: %3.6f %%\r\n  Compass 1: %3.6f %%\r\n  Compass 2: %3.6f %%\r\n",
    bc16:	47c8      	blx	r9
    bc18:	9002      	str	r0, [sp, #8]
    bc1a:	9103      	str	r1, [sp, #12]
	cal_report.mag_stdev_a1*100, cal_report.mag_stdev_a2*100,cal_report.mag_stdev_m1*100, cal_report.mag_stdev_m2*100);
    bc1c:	49c4      	ldr	r1, [pc, #784]	; (bf30 <SD_write_report+0x4c8>)
    bc1e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
    bc20:	47c0      	blx	r8
	sprintf(write_str1,"Magnitude Error Standard Deviation:\r\n  Accelerometer 1: %3.6f %%\r\n  Accelerometer 2: %3.6f %%\r\n  Compass 1: %3.6f %%\r\n  Compass 2: %3.6f %%\r\n",
    bc22:	47c8      	blx	r9
    bc24:	0022      	movs	r2, r4
    bc26:	9000      	str	r0, [sp, #0]
    bc28:	9101      	str	r1, [sp, #4]
    bc2a:	002b      	movs	r3, r5
    bc2c:	49c1      	ldr	r1, [pc, #772]	; (bf34 <SD_write_report+0x4cc>)
    bc2e:	4cb6      	ldr	r4, [pc, #728]	; (bf08 <SD_write_report+0x4a0>)
    bc30:	4658      	mov	r0, fp
    bc32:	47a0      	blx	r4
	fdebug3 = f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
    bc34:	4bb6      	ldr	r3, [pc, #728]	; (bf10 <SD_write_report+0x4a8>)
    bc36:	4658      	mov	r0, fp
    bc38:	4798      	blx	r3
    bc3a:	ab13      	add	r3, sp, #76	; 0x4c
    bc3c:	0002      	movs	r2, r0
    bc3e:	4659      	mov	r1, fp
    bc40:	4cb4      	ldr	r4, [pc, #720]	; (bf14 <SD_write_report+0x4ac>)
    bc42:	a85b      	add	r0, sp, #364	; 0x16c
    bc44:	47a0      	blx	r4
	cal_report.disp_stdev_acc[0]*100, cal_report.disp_stdev_acc[1]*100,cal_report.disp_stdev_acc[2]*100);
    bc46:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    bc48:	49b9      	ldr	r1, [pc, #740]	; (bf30 <SD_write_report+0x4c8>)
    bc4a:	47c0      	blx	r8
	sprintf(write_str1,"Axis Disparity:\r\n  Accelerometer: X-%3.6f%% Y-%3.6f%% Z-%3.6f%%\r\n",
    bc4c:	47c8      	blx	r9
    bc4e:	0004      	movs	r4, r0
    bc50:	000d      	movs	r5, r1
	cal_report.disp_stdev_acc[0]*100, cal_report.disp_stdev_acc[1]*100,cal_report.disp_stdev_acc[2]*100);
    bc52:	6c30      	ldr	r0, [r6, #64]	; 0x40
    bc54:	49b6      	ldr	r1, [pc, #728]	; (bf30 <SD_write_report+0x4c8>)
    bc56:	47c0      	blx	r8
	sprintf(write_str1,"Axis Disparity:\r\n  Accelerometer: X-%3.6f%% Y-%3.6f%% Z-%3.6f%%\r\n",
    bc58:	47c8      	blx	r9
    bc5a:	9002      	str	r0, [sp, #8]
    bc5c:	9103      	str	r1, [sp, #12]
	cal_report.disp_stdev_acc[0]*100, cal_report.disp_stdev_acc[1]*100,cal_report.disp_stdev_acc[2]*100);
    bc5e:	49b4      	ldr	r1, [pc, #720]	; (bf30 <SD_write_report+0x4c8>)
    bc60:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
    bc62:	47c0      	blx	r8
	sprintf(write_str1,"Axis Disparity:\r\n  Accelerometer: X-%3.6f%% Y-%3.6f%% Z-%3.6f%%\r\n",
    bc64:	47c8      	blx	r9
    bc66:	0022      	movs	r2, r4
    bc68:	9000      	str	r0, [sp, #0]
    bc6a:	9101      	str	r1, [sp, #4]
    bc6c:	002b      	movs	r3, r5
    bc6e:	49b2      	ldr	r1, [pc, #712]	; (bf38 <SD_write_report+0x4d0>)
    bc70:	4ca5      	ldr	r4, [pc, #660]	; (bf08 <SD_write_report+0x4a0>)
    bc72:	4658      	mov	r0, fp
    bc74:	47a0      	blx	r4
	fdebug3 = f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
    bc76:	4ba6      	ldr	r3, [pc, #664]	; (bf10 <SD_write_report+0x4a8>)
    bc78:	4658      	mov	r0, fp
    bc7a:	4798      	blx	r3
    bc7c:	ab13      	add	r3, sp, #76	; 0x4c
    bc7e:	0002      	movs	r2, r0
    bc80:	4659      	mov	r1, fp
    bc82:	4ca4      	ldr	r4, [pc, #656]	; (bf14 <SD_write_report+0x4ac>)
    bc84:	a85b      	add	r0, sp, #364	; 0x16c
    bc86:	47a0      	blx	r4
	cal_report.disp_stdev_comp[0]*100, cal_report.disp_stdev_comp[1]*100,cal_report.disp_stdev_comp[2]*100);
    bc88:	6c70      	ldr	r0, [r6, #68]	; 0x44
    bc8a:	49a9      	ldr	r1, [pc, #676]	; (bf30 <SD_write_report+0x4c8>)
    bc8c:	47c0      	blx	r8
	sprintf(write_str1,"  Compass: X-%3.6f%% Y-%3.6f%% Z-%3.6f%%\r\n\r\n\r\n",
    bc8e:	47c8      	blx	r9
    bc90:	0004      	movs	r4, r0
    bc92:	000d      	movs	r5, r1
	cal_report.disp_stdev_comp[0]*100, cal_report.disp_stdev_comp[1]*100,cal_report.disp_stdev_comp[2]*100);
    bc94:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
    bc96:	49a6      	ldr	r1, [pc, #664]	; (bf30 <SD_write_report+0x4c8>)
    bc98:	47c0      	blx	r8
	sprintf(write_str1,"  Compass: X-%3.6f%% Y-%3.6f%% Z-%3.6f%%\r\n\r\n\r\n",
    bc9a:	47c8      	blx	r9
    bc9c:	9002      	str	r0, [sp, #8]
    bc9e:	9103      	str	r1, [sp, #12]
	cal_report.disp_stdev_comp[0]*100, cal_report.disp_stdev_comp[1]*100,cal_report.disp_stdev_comp[2]*100);
    bca0:	49a3      	ldr	r1, [pc, #652]	; (bf30 <SD_write_report+0x4c8>)
    bca2:	6cb0      	ldr	r0, [r6, #72]	; 0x48
    bca4:	47c0      	blx	r8
	sprintf(write_str1,"  Compass: X-%3.6f%% Y-%3.6f%% Z-%3.6f%%\r\n\r\n\r\n",
    bca6:	47c8      	blx	r9
    bca8:	0022      	movs	r2, r4
    bcaa:	9000      	str	r0, [sp, #0]
    bcac:	9101      	str	r1, [sp, #4]
    bcae:	002b      	movs	r3, r5
    bcb0:	49a2      	ldr	r1, [pc, #648]	; (bf3c <SD_write_report+0x4d4>)
    bcb2:	4c95      	ldr	r4, [pc, #596]	; (bf08 <SD_write_report+0x4a0>)
    bcb4:	4658      	mov	r0, fp
    bcb6:	47a0      	blx	r4
	fdebug3 = f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
    bcb8:	4b95      	ldr	r3, [pc, #596]	; (bf10 <SD_write_report+0x4a8>)
    bcba:	4658      	mov	r0, fp
    bcbc:	4798      	blx	r3
    bcbe:	ab13      	add	r3, sp, #76	; 0x4c
    bcc0:	0002      	movs	r2, r0
    bcc2:	4659      	mov	r1, fp
    bcc4:	a85b      	add	r0, sp, #364	; 0x16c
    bcc6:	4c93      	ldr	r4, [pc, #588]	; (bf14 <SD_write_report+0x4ac>)
    bcc8:	47a0      	blx	r4
	for (i=0;i<4;i++){
    bcca:	2300      	movs	r3, #0
    bccc:	469a      	mov	sl, r3
    bcce:	4f9c      	ldr	r7, [pc, #624]	; (bf40 <SD_write_report+0x4d8>)
		switch(i){
    bcd0:	4653      	mov	r3, sl
    bcd2:	2b02      	cmp	r3, #2
    bcd4:	d100      	bne.n	bcd8 <SD_write_report+0x270>
    bcd6:	e199      	b.n	c00c <SD_write_report+0x5a4>
    bcd8:	2b03      	cmp	r3, #3
    bcda:	d100      	bne.n	bcde <SD_write_report+0x276>
    bcdc:	e1a3      	b.n	c026 <SD_write_report+0x5be>
			sprintf(write_str1,"Inclinometer 2 Calibration:\r\n");
    bcde:	221e      	movs	r2, #30
		switch(i){
    bce0:	2b01      	cmp	r3, #1
    bce2:	d100      	bne.n	bce6 <SD_write_report+0x27e>
    bce4:	e199      	b.n	c01a <SD_write_report+0x5b2>
			sprintf(write_str1,"Inclinometer 1 Calibration:\r\n");
    bce6:	4997      	ldr	r1, [pc, #604]	; (bf44 <SD_write_report+0x4dc>)
    bce8:	4658      	mov	r0, fp
    bcea:	4b97      	ldr	r3, [pc, #604]	; (bf48 <SD_write_report+0x4e0>)
    bcec:	4798      	blx	r3
			pcal_struct = &a1_calst;
    bcee:	4e97      	ldr	r6, [pc, #604]	; (bf4c <SD_write_report+0x4e4>)
		sprintf(write_str2,"  Gain X: %.6f\r\n  Gain Y: %.6f\r\n  GainZ: %.6f\r\n", pcal_struct->gain[0], pcal_struct->gain[1], pcal_struct->gain[2]);
    bcf0:	6930      	ldr	r0, [r6, #16]
    bcf2:	47c8      	blx	r9
    bcf4:	0004      	movs	r4, r0
    bcf6:	69b0      	ldr	r0, [r6, #24]
    bcf8:	000d      	movs	r5, r1
    bcfa:	47c8      	blx	r9
    bcfc:	9002      	str	r0, [sp, #8]
    bcfe:	9103      	str	r1, [sp, #12]
    bd00:	6970      	ldr	r0, [r6, #20]
    bd02:	47c8      	blx	r9
    bd04:	0022      	movs	r2, r4
    bd06:	9000      	str	r0, [sp, #0]
    bd08:	9101      	str	r1, [sp, #4]
    bd0a:	002b      	movs	r3, r5
    bd0c:	4990      	ldr	r1, [pc, #576]	; (bf50 <SD_write_report+0x4e8>)
    bd0e:	4c7e      	ldr	r4, [pc, #504]	; (bf08 <SD_write_report+0x4a0>)
    bd10:	0038      	movs	r0, r7
    bd12:	47a0      	blx	r4
		strcat(write_str1, write_str2);
    bd14:	4b8f      	ldr	r3, [pc, #572]	; (bf54 <SD_write_report+0x4ec>)
    bd16:	0039      	movs	r1, r7
    bd18:	4658      	mov	r0, fp
    bd1a:	4798      	blx	r3
		sprintf(write_str2,"  Offset X: %.6f\r\n  Offset Y: %.6f\r\n  Offset Z: %.6f\r\n", pcal_struct->offset[0], pcal_struct->offset[1], pcal_struct->offset[2]);
    bd1c:	6870      	ldr	r0, [r6, #4]
    bd1e:	47c8      	blx	r9
    bd20:	0004      	movs	r4, r0
    bd22:	68f0      	ldr	r0, [r6, #12]
    bd24:	000d      	movs	r5, r1
    bd26:	47c8      	blx	r9
    bd28:	9002      	str	r0, [sp, #8]
    bd2a:	9103      	str	r1, [sp, #12]
    bd2c:	68b0      	ldr	r0, [r6, #8]
    bd2e:	47c8      	blx	r9
    bd30:	0022      	movs	r2, r4
    bd32:	9000      	str	r0, [sp, #0]
    bd34:	9101      	str	r1, [sp, #4]
    bd36:	002b      	movs	r3, r5
    bd38:	4987      	ldr	r1, [pc, #540]	; (bf58 <SD_write_report+0x4f0>)
    bd3a:	4c73      	ldr	r4, [pc, #460]	; (bf08 <SD_write_report+0x4a0>)
    bd3c:	0038      	movs	r0, r7
    bd3e:	47a0      	blx	r4
		strcat(write_str1, write_str2);
    bd40:	4b84      	ldr	r3, [pc, #528]	; (bf54 <SD_write_report+0x4ec>)
    bd42:	0039      	movs	r1, r7
    bd44:	4658      	mov	r0, fp
    bd46:	4798      	blx	r3
		RAD2DEG*pcal_struct->axmYX, RAD2DEG*pcal_struct->axmZX, RAD2DEG*pcal_struct->axmZY);
    bd48:	69f0      	ldr	r0, [r6, #28]
    bd4a:	4984      	ldr	r1, [pc, #528]	; (bf5c <SD_write_report+0x4f4>)
    bd4c:	47c0      	blx	r8
		sprintf(write_str2,"  Axis Misalignment, Y-X: %.6f deg\r\n  Axis Misalignment, Z-X: %.6f deg\r\n  Axis Misalignment, Z-Y: %.6f deg\r\n",
    bd4e:	47c8      	blx	r9
    bd50:	0004      	movs	r4, r0
    bd52:	000d      	movs	r5, r1
		RAD2DEG*pcal_struct->axmYX, RAD2DEG*pcal_struct->axmZX, RAD2DEG*pcal_struct->axmZY);
    bd54:	6a30      	ldr	r0, [r6, #32]
    bd56:	4981      	ldr	r1, [pc, #516]	; (bf5c <SD_write_report+0x4f4>)
    bd58:	47c0      	blx	r8
		sprintf(write_str2,"  Axis Misalignment, Y-X: %.6f deg\r\n  Axis Misalignment, Z-X: %.6f deg\r\n  Axis Misalignment, Z-Y: %.6f deg\r\n",
    bd5a:	47c8      	blx	r9
    bd5c:	9002      	str	r0, [sp, #8]
    bd5e:	9103      	str	r1, [sp, #12]
		RAD2DEG*pcal_struct->axmYX, RAD2DEG*pcal_struct->axmZX, RAD2DEG*pcal_struct->axmZY);
    bd60:	497e      	ldr	r1, [pc, #504]	; (bf5c <SD_write_report+0x4f4>)
    bd62:	6a70      	ldr	r0, [r6, #36]	; 0x24
    bd64:	47c0      	blx	r8
		sprintf(write_str2,"  Axis Misalignment, Y-X: %.6f deg\r\n  Axis Misalignment, Z-X: %.6f deg\r\n  Axis Misalignment, Z-Y: %.6f deg\r\n",
    bd66:	47c8      	blx	r9
    bd68:	0022      	movs	r2, r4
    bd6a:	9000      	str	r0, [sp, #0]
    bd6c:	9101      	str	r1, [sp, #4]
    bd6e:	002b      	movs	r3, r5
    bd70:	497b      	ldr	r1, [pc, #492]	; (bf60 <SD_write_report+0x4f8>)
    bd72:	4c65      	ldr	r4, [pc, #404]	; (bf08 <SD_write_report+0x4a0>)
    bd74:	0038      	movs	r0, r7
    bd76:	47a0      	blx	r4
		strcat(write_str1, write_str2);
    bd78:	4b76      	ldr	r3, [pc, #472]	; (bf54 <SD_write_report+0x4ec>)
    bd7a:	0039      	movs	r1, r7
    bd7c:	4658      	mov	r0, fp
    bd7e:	4798      	blx	r3
		sprintf(write_str2,"  Package Misalignment About X: %.3f deg\r\n  Package Misalignment About Y: %.3f deg\r\n  Package Misalignment About Z: %.3f deg\r\n\r\n",
    bd80:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    bd82:	47c8      	blx	r9
    bd84:	0004      	movs	r4, r0
    bd86:	6b30      	ldr	r0, [r6, #48]	; 0x30
    bd88:	000d      	movs	r5, r1
    bd8a:	47c8      	blx	r9
    bd8c:	9002      	str	r0, [sp, #8]
    bd8e:	9103      	str	r1, [sp, #12]
    bd90:	6af0      	ldr	r0, [r6, #44]	; 0x2c
    bd92:	47c8      	blx	r9
    bd94:	0022      	movs	r2, r4
    bd96:	9000      	str	r0, [sp, #0]
    bd98:	9101      	str	r1, [sp, #4]
    bd9a:	002b      	movs	r3, r5
    bd9c:	4971      	ldr	r1, [pc, #452]	; (bf64 <SD_write_report+0x4fc>)
    bd9e:	4c5a      	ldr	r4, [pc, #360]	; (bf08 <SD_write_report+0x4a0>)
    bda0:	0038      	movs	r0, r7
    bda2:	47a0      	blx	r4
    bda4:	4b5a      	ldr	r3, [pc, #360]	; (bf10 <SD_write_report+0x4a8>)
    bda6:	4658      	mov	r0, fp
    bda8:	4798      	blx	r3
		strcat(write_str1, write_str2);
    bdaa:	0039      	movs	r1, r7
    bdac:	4b6e      	ldr	r3, [pc, #440]	; (bf68 <SD_write_report+0x500>)
    bdae:	4458      	add	r0, fp
    bdb0:	4798      	blx	r3
    bdb2:	465b      	mov	r3, fp
		fdebug3 = f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
    bdb4:	4659      	mov	r1, fp
		strcat(write_str1, write_str2);
    bdb6:	1ac2      	subs	r2, r0, r3
		fdebug3 = f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
    bdb8:	4c56      	ldr	r4, [pc, #344]	; (bf14 <SD_write_report+0x4ac>)
    bdba:	ab13      	add	r3, sp, #76	; 0x4c
    bdbc:	a85b      	add	r0, sp, #364	; 0x16c
    bdbe:	47a0      	blx	r4
	for (i=0;i<4;i++){
    bdc0:	2301      	movs	r3, #1
    bdc2:	469c      	mov	ip, r3
    bdc4:	44e2      	add	sl, ip
    bdc6:	4653      	mov	r3, sl
    bdc8:	2b04      	cmp	r3, #4
    bdca:	d181      	bne.n	bcd0 <SD_write_report+0x268>
	sprintf(write_str1,"\r\nCalibration Measurements:\r\n");
    bdcc:	221e      	movs	r2, #30
    bdce:	4967      	ldr	r1, [pc, #412]	; (bf6c <SD_write_report+0x504>)
    bdd0:	4b5d      	ldr	r3, [pc, #372]	; (bf48 <SD_write_report+0x4e0>)
    bdd2:	4658      	mov	r0, fp
    bdd4:	4798      	blx	r3
	sprintf(write_str2,"                Uncalibrated                     Calibrated\r\n");
    bdd6:	223e      	movs	r2, #62	; 0x3e
    bdd8:	4965      	ldr	r1, [pc, #404]	; (bf70 <SD_write_report+0x508>)
    bdda:	4b5b      	ldr	r3, [pc, #364]	; (bf48 <SD_write_report+0x4e0>)
    bddc:	0038      	movs	r0, r7
    bdde:	4798      	blx	r3
	strcat(write_str1, write_str2);
    bde0:	4658      	mov	r0, fp
    bde2:	223e      	movs	r2, #62	; 0x3e
    bde4:	0039      	movs	r1, r7
    bde6:	4b58      	ldr	r3, [pc, #352]	; (bf48 <SD_write_report+0x4e0>)
    bde8:	301d      	adds	r0, #29
    bdea:	4798      	blx	r3
	sprintf(write_str2,"Group, Point,   Azimuth,  Inclination, Roll,     Azimuth,  Inclination, Roll\r\n");
    bdec:	224f      	movs	r2, #79	; 0x4f
    bdee:	4961      	ldr	r1, [pc, #388]	; (bf74 <SD_write_report+0x50c>)
    bdf0:	4b55      	ldr	r3, [pc, #340]	; (bf48 <SD_write_report+0x4e0>)
    bdf2:	0038      	movs	r0, r7
    bdf4:	4798      	blx	r3
	strcat(write_str1, write_str2);
    bdf6:	4658      	mov	r0, fp
    bdf8:	224f      	movs	r2, #79	; 0x4f
    bdfa:	0039      	movs	r1, r7
    bdfc:	4b52      	ldr	r3, [pc, #328]	; (bf48 <SD_write_report+0x4e0>)
    bdfe:	305a      	adds	r0, #90	; 0x5a
    be00:	4798      	blx	r3
	fdebug3 = f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
    be02:	ab13      	add	r3, sp, #76	; 0x4c
    be04:	22a8      	movs	r2, #168	; 0xa8
    be06:	4659      	mov	r1, fp
    be08:	a85b      	add	r0, sp, #364	; 0x16c
    be0a:	4c42      	ldr	r4, [pc, #264]	; (bf14 <SD_write_report+0x4ac>)
    be0c:	47a0      	blx	r4
	for (i=0;i<nPoints;i++){
    be0e:	4b5a      	ldr	r3, [pc, #360]	; (bf78 <SD_write_report+0x510>)
    be10:	4698      	mov	r8, r3
    be12:	681b      	ldr	r3, [r3, #0]
    be14:	2b00      	cmp	r3, #0
    be16:	d100      	bne.n	be1a <SD_write_report+0x3b2>
    be18:	e0f4      	b.n	c004 <SD_write_report+0x59c>
    be1a:	2300      	movs	r3, #0
    be1c:	2400      	movs	r4, #0
    be1e:	469a      	mov	sl, r3
    be20:	4d56      	ldr	r5, [pc, #344]	; (bf7c <SD_write_report+0x514>)
    be22:	4f57      	ldr	r7, [pc, #348]	; (bf80 <SD_write_report+0x518>)
    be24:	4e57      	ldr	r6, [pc, #348]	; (bf84 <SD_write_report+0x51c>)
			temp_meas.m2Cal[j] = m2Raw[i][j];
    be26:	950d      	str	r5, [sp, #52]	; 0x34
			temp_meas.a1Cal[j] = a1Raw[i][j];
    be28:	683b      	ldr	r3, [r7, #0]
			temp_meas.m1Cal[j] = m1Raw[i][j];
    be2a:	990d      	ldr	r1, [sp, #52]	; 0x34
			temp_meas.a1Cal[j] = a1Raw[i][j];
    be2c:	9342      	str	r3, [sp, #264]	; 0x108
			temp_meas.a2Cal[j] = a2Raw[i][j];
    be2e:	6833      	ldr	r3, [r6, #0]
		calc_orientation(&temp_meas);
    be30:	a82d      	add	r0, sp, #180	; 0xb4
			temp_meas.a2Cal[j] = a2Raw[i][j];
    be32:	9345      	str	r3, [sp, #276]	; 0x114
			temp_meas.m1Cal[j] = m1Raw[i][j];
    be34:	680b      	ldr	r3, [r1, #0]
    be36:	9348      	str	r3, [sp, #288]	; 0x120
			temp_meas.m2Cal[j] = m2Raw[i][j];
    be38:	4b53      	ldr	r3, [pc, #332]	; (bf88 <SD_write_report+0x520>)
    be3a:	191b      	adds	r3, r3, r4
    be3c:	681a      	ldr	r2, [r3, #0]
    be3e:	924b      	str	r2, [sp, #300]	; 0x12c
			temp_meas.a1Cal[j] = a1Raw[i][j];
    be40:	687a      	ldr	r2, [r7, #4]
    be42:	9243      	str	r2, [sp, #268]	; 0x10c
			temp_meas.a2Cal[j] = a2Raw[i][j];
    be44:	6872      	ldr	r2, [r6, #4]
    be46:	9246      	str	r2, [sp, #280]	; 0x118
			temp_meas.m1Cal[j] = m1Raw[i][j];
    be48:	684a      	ldr	r2, [r1, #4]
    be4a:	9249      	str	r2, [sp, #292]	; 0x124
			temp_meas.m2Cal[j] = m2Raw[i][j];
    be4c:	685a      	ldr	r2, [r3, #4]
    be4e:	689b      	ldr	r3, [r3, #8]
    be50:	924c      	str	r2, [sp, #304]	; 0x130
			temp_meas.a1Cal[j] = a1Raw[i][j];
    be52:	68ba      	ldr	r2, [r7, #8]
			temp_meas.m2Cal[j] = m2Raw[i][j];
    be54:	930e      	str	r3, [sp, #56]	; 0x38
			temp_meas.a1Cal[j] = a1Raw[i][j];
    be56:	9244      	str	r2, [sp, #272]	; 0x110
			temp_meas.a2Cal[j] = a2Raw[i][j];
    be58:	68b2      	ldr	r2, [r6, #8]
			temp_meas.m2Cal[j] = m2Raw[i][j];
    be5a:	ab06      	add	r3, sp, #24
			temp_meas.a2Cal[j] = a2Raw[i][j];
    be5c:	9247      	str	r2, [sp, #284]	; 0x11c
			temp_meas.m1Cal[j] = m1Raw[i][j];
    be5e:	688a      	ldr	r2, [r1, #8]
			temp_meas.m2Cal[j] = m2Raw[i][j];
    be60:	219c      	movs	r1, #156	; 0x9c
			temp_meas.m1Cal[j] = m1Raw[i][j];
    be62:	924a      	str	r2, [sp, #296]	; 0x128
			temp_meas.m2Cal[j] = m2Raw[i][j];
    be64:	2280      	movs	r2, #128	; 0x80
    be66:	185b      	adds	r3, r3, r1
    be68:	990e      	ldr	r1, [sp, #56]	; 0x38
    be6a:	370c      	adds	r7, #12
    be6c:	5099      	str	r1, [r3, r2]
		calc_orientation(&temp_meas);
    be6e:	4b47      	ldr	r3, [pc, #284]	; (bf8c <SD_write_report+0x524>)
    be70:	4798      	blx	r3
		azm_raw = temp_meas.azimuth;
    be72:	9b30      	ldr	r3, [sp, #192]	; 0xc0
		roll_raw = temp_meas.roll;
    be74:	9932      	ldr	r1, [sp, #200]	; 0xc8
		azm_raw = temp_meas.azimuth;
    be76:	930e      	str	r3, [sp, #56]	; 0x38
			temp_meas.a1Cal[j] = a1Cal[i][j];
    be78:	4b45      	ldr	r3, [pc, #276]	; (bf90 <SD_write_report+0x528>)
		roll_raw = temp_meas.roll;
    be7a:	9110      	str	r1, [sp, #64]	; 0x40
			temp_meas.a1Cal[j] = a1Cal[i][j];
    be7c:	1918      	adds	r0, r3, r4
    be7e:	6803      	ldr	r3, [r0, #0]
		inc_raw = temp_meas.inclination;
    be80:	9a31      	ldr	r2, [sp, #196]	; 0xc4
			temp_meas.a1Cal[j] = a1Cal[i][j];
    be82:	9342      	str	r3, [sp, #264]	; 0x108
			temp_meas.a2Cal[j] = a2Cal[i][j];
    be84:	4b43      	ldr	r3, [pc, #268]	; (bf94 <SD_write_report+0x52c>)
		inc_raw = temp_meas.inclination;
    be86:	920f      	str	r2, [sp, #60]	; 0x3c
			temp_meas.a2Cal[j] = a2Cal[i][j];
    be88:	1919      	adds	r1, r3, r4
    be8a:	680b      	ldr	r3, [r1, #0]
    be8c:	360c      	adds	r6, #12
    be8e:	9345      	str	r3, [sp, #276]	; 0x114
			temp_meas.m1Cal[j] = m1Cal[i][j];
    be90:	4b41      	ldr	r3, [pc, #260]	; (bf98 <SD_write_report+0x530>)
    be92:	191a      	adds	r2, r3, r4
    be94:	6813      	ldr	r3, [r2, #0]
    be96:	9348      	str	r3, [sp, #288]	; 0x120
			temp_meas.m2Cal[j] = m2Cal[i][j];
    be98:	4b40      	ldr	r3, [pc, #256]	; (bf9c <SD_write_report+0x534>)
    be9a:	191b      	adds	r3, r3, r4
    be9c:	681d      	ldr	r5, [r3, #0]
    be9e:	340c      	adds	r4, #12
    bea0:	954b      	str	r5, [sp, #300]	; 0x12c
			temp_meas.a1Cal[j] = a1Cal[i][j];
    bea2:	6845      	ldr	r5, [r0, #4]
    bea4:	9543      	str	r5, [sp, #268]	; 0x10c
			temp_meas.a2Cal[j] = a2Cal[i][j];
    bea6:	684d      	ldr	r5, [r1, #4]
    bea8:	9546      	str	r5, [sp, #280]	; 0x118
			temp_meas.m1Cal[j] = m1Cal[i][j];
    beaa:	6855      	ldr	r5, [r2, #4]
    beac:	9549      	str	r5, [sp, #292]	; 0x124
			temp_meas.m2Cal[j] = m2Cal[i][j];
    beae:	685d      	ldr	r5, [r3, #4]
    beb0:	954c      	str	r5, [sp, #304]	; 0x130
			temp_meas.a1Cal[j] = a1Cal[i][j];
    beb2:	6885      	ldr	r5, [r0, #8]
    beb4:	9544      	str	r5, [sp, #272]	; 0x110
			temp_meas.a2Cal[j] = a2Cal[i][j];
    beb6:	688d      	ldr	r5, [r1, #8]
    beb8:	9547      	str	r5, [sp, #284]	; 0x11c
			temp_meas.m1Cal[j] = m1Cal[i][j];
    beba:	6895      	ldr	r5, [r2, #8]
			temp_meas.m2Cal[j] = m2Cal[i][j];
    bebc:	229c      	movs	r2, #156	; 0x9c
			temp_meas.m1Cal[j] = m1Cal[i][j];
    bebe:	954a      	str	r5, [sp, #296]	; 0x128
			temp_meas.m2Cal[j] = m2Cal[i][j];
    bec0:	689d      	ldr	r5, [r3, #8]
    bec2:	2380      	movs	r3, #128	; 0x80
    bec4:	9511      	str	r5, [sp, #68]	; 0x44
    bec6:	ad06      	add	r5, sp, #24
    bec8:	18ad      	adds	r5, r5, r2
    beca:	9a11      	ldr	r2, [sp, #68]	; 0x44
    becc:	50ea      	str	r2, [r5, r3]
		calc_orientation(&temp_meas);
    bece:	ad2d      	add	r5, sp, #180	; 0xb4
    bed0:	0028      	movs	r0, r5
    bed2:	4d2e      	ldr	r5, [pc, #184]	; (bf8c <SD_write_report+0x524>)
    bed4:	47a8      	blx	r5
		group_current = floor(i/GROUP_SIZE)+1;
    bed6:	4655      	mov	r5, sl
    bed8:	08a8      	lsrs	r0, r5, #2
    beda:	4d31      	ldr	r5, [pc, #196]	; (bfa0 <SD_write_report+0x538>)
    bedc:	47a8      	blx	r5
    bede:	2200      	movs	r2, #0
    bee0:	4b30      	ldr	r3, [pc, #192]	; (bfa4 <SD_write_report+0x53c>)
    bee2:	4d31      	ldr	r5, [pc, #196]	; (bfa8 <SD_write_report+0x540>)
    bee4:	47a8      	blx	r5
    bee6:	4d31      	ldr	r5, [pc, #196]	; (bfac <SD_write_report+0x544>)
    bee8:	47a8      	blx	r5
		sprintf(write_str1,"%-2d,    %-2d,      %03.2f,   %03.2f,      %03.2f,   %03.2f,   %03.2f,      %03.2f\r\n",
    beea:	2501      	movs	r5, #1
    beec:	46ac      	mov	ip, r5
		group_current = floor(i/GROUP_SIZE)+1;
    beee:	9011      	str	r0, [sp, #68]	; 0x44
		sprintf(write_str1,"%-2d,    %-2d,      %03.2f,   %03.2f,      %03.2f,   %03.2f,   %03.2f,      %03.2f\r\n",
    bef0:	9832      	ldr	r0, [sp, #200]	; 0xc8
    bef2:	44e2      	add	sl, ip
    bef4:	47c8      	blx	r9
    bef6:	900a      	str	r0, [sp, #40]	; 0x28
    bef8:	910b      	str	r1, [sp, #44]	; 0x2c
    befa:	9831      	ldr	r0, [sp, #196]	; 0xc4
    befc:	e058      	b.n	bfb0 <SD_write_report+0x548>
    befe:	46c0      	nop			; (mov r8, r8)
    bf00:	20003188 	.word	0x20003188
    bf04:	20004b4c 	.word	0x20004b4c
    bf08:	0001fe91 	.word	0x0001fe91
    bf0c:	000251e4 	.word	0x000251e4
    bf10:	0001fffd 	.word	0x0001fffd
    bf14:	00006935 	.word	0x00006935
    bf18:	0001fb6d 	.word	0x0001fb6d
    bf1c:	00025244 	.word	0x00025244
    bf20:	00025268 	.word	0x00025268
    bf24:	00025298 	.word	0x00025298
    bf28:	000252c4 	.word	0x000252c4
    bf2c:	0001d939 	.word	0x0001d939
    bf30:	42c80000 	.word	0x42c80000
    bf34:	00025320 	.word	0x00025320
    bf38:	000253b0 	.word	0x000253b0
    bf3c:	000253f4 	.word	0x000253f4
    bf40:	200044f4 	.word	0x200044f4
    bf44:	00025424 	.word	0x00025424
    bf48:	0001fd79 	.word	0x0001fd79
    bf4c:	200055d0 	.word	0x200055d0
    bf50:	0002549c 	.word	0x0002549c
    bf54:	0001ff19 	.word	0x0001ff19
    bf58:	000254cc 	.word	0x000254cc
    bf5c:	42652ee0 	.word	0x42652ee0
    bf60:	00025504 	.word	0x00025504
    bf64:	00025574 	.word	0x00025574
    bf68:	0001fed5 	.word	0x0001fed5
    bf6c:	000255f8 	.word	0x000255f8
    bf70:	00025618 	.word	0x00025618
    bf74:	00025658 	.word	0x00025658
    bf78:	20003340 	.word	0x20003340
    bf7c:	20003470 	.word	0x20003470
    bf80:	20004040 	.word	0x20004040
    bf84:	200022c8 	.word	0x200022c8
    bf88:	20001c88 	.word	0x20001c88
    bf8c:	000093c9 	.word	0x000093c9
    bf90:	20004698 	.word	0x20004698
    bf94:	2000392c 	.word	0x2000392c
    bf98:	20004bd8 	.word	0x20004bd8
    bf9c:	20002be0 	.word	0x20002be0
    bfa0:	0001fafd 	.word	0x0001fafd
    bfa4:	3ff00000 	.word	0x3ff00000
    bfa8:	0001e01d 	.word	0x0001e01d
    bfac:	0001d1f9 	.word	0x0001d1f9
    bfb0:	47c8      	blx	r9
    bfb2:	9008      	str	r0, [sp, #32]
    bfb4:	9109      	str	r1, [sp, #36]	; 0x24
    bfb6:	9830      	ldr	r0, [sp, #192]	; 0xc0
    bfb8:	47c8      	blx	r9
    bfba:	9006      	str	r0, [sp, #24]
    bfbc:	9107      	str	r1, [sp, #28]
    bfbe:	9810      	ldr	r0, [sp, #64]	; 0x40
    bfc0:	47c8      	blx	r9
    bfc2:	9004      	str	r0, [sp, #16]
    bfc4:	9105      	str	r1, [sp, #20]
    bfc6:	980f      	ldr	r0, [sp, #60]	; 0x3c
    bfc8:	47c8      	blx	r9
    bfca:	9002      	str	r0, [sp, #8]
    bfcc:	9103      	str	r1, [sp, #12]
    bfce:	980e      	ldr	r0, [sp, #56]	; 0x38
    bfd0:	47c8      	blx	r9
    bfd2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    bfd4:	9000      	str	r0, [sp, #0]
    bfd6:	9101      	str	r1, [sp, #4]
    bfd8:	4653      	mov	r3, sl
    bfda:	4919      	ldr	r1, [pc, #100]	; (c040 <SD_write_report+0x5d8>)
    bfdc:	4d19      	ldr	r5, [pc, #100]	; (c044 <SD_write_report+0x5dc>)
    bfde:	4658      	mov	r0, fp
    bfe0:	47a8      	blx	r5
		fdebug3 = f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
    bfe2:	4b19      	ldr	r3, [pc, #100]	; (c048 <SD_write_report+0x5e0>)
    bfe4:	4658      	mov	r0, fp
    bfe6:	4798      	blx	r3
    bfe8:	ab13      	add	r3, sp, #76	; 0x4c
    bfea:	0002      	movs	r2, r0
    bfec:	4659      	mov	r1, fp
    bfee:	a85b      	add	r0, sp, #364	; 0x16c
    bff0:	4d16      	ldr	r5, [pc, #88]	; (c04c <SD_write_report+0x5e4>)
    bff2:	47a8      	blx	r5
    bff4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    bff6:	330c      	adds	r3, #12
    bff8:	930d      	str	r3, [sp, #52]	; 0x34
	for (i=0;i<nPoints;i++){
    bffa:	4643      	mov	r3, r8
    bffc:	681b      	ldr	r3, [r3, #0]
    bffe:	4553      	cmp	r3, sl
    c000:	d900      	bls.n	c004 <SD_write_report+0x59c>
    c002:	e711      	b.n	be28 <SD_write_report+0x3c0>
	f_close(&file1);
    c004:	a85b      	add	r0, sp, #364	; 0x16c
    c006:	4b12      	ldr	r3, [pc, #72]	; (c050 <SD_write_report+0x5e8>)
    c008:	4798      	blx	r3
}
    c00a:	e562      	b.n	bad2 <SD_write_report+0x6a>
			sprintf(write_str1,"Compass 1 Calibration:\r\n");
    c00c:	2219      	movs	r2, #25
    c00e:	4911      	ldr	r1, [pc, #68]	; (c054 <SD_write_report+0x5ec>)
    c010:	4658      	mov	r0, fp
    c012:	4b11      	ldr	r3, [pc, #68]	; (c058 <SD_write_report+0x5f0>)
    c014:	4798      	blx	r3
			pcal_struct = &m1_calst;
    c016:	4e11      	ldr	r6, [pc, #68]	; (c05c <SD_write_report+0x5f4>)
			break;
    c018:	e66a      	b.n	bcf0 <SD_write_report+0x288>
			sprintf(write_str1,"Inclinometer 2 Calibration:\r\n");
    c01a:	4911      	ldr	r1, [pc, #68]	; (c060 <SD_write_report+0x5f8>)
    c01c:	4658      	mov	r0, fp
    c01e:	4b0e      	ldr	r3, [pc, #56]	; (c058 <SD_write_report+0x5f0>)
    c020:	4798      	blx	r3
			pcal_struct = &a2_calst;
    c022:	4e10      	ldr	r6, [pc, #64]	; (c064 <SD_write_report+0x5fc>)
			break;
    c024:	e664      	b.n	bcf0 <SD_write_report+0x288>
			sprintf(write_str1,"Compass 2 Calibration:\r\n");
    c026:	2219      	movs	r2, #25
    c028:	490f      	ldr	r1, [pc, #60]	; (c068 <SD_write_report+0x600>)
    c02a:	4658      	mov	r0, fp
    c02c:	4b0a      	ldr	r3, [pc, #40]	; (c058 <SD_write_report+0x5f0>)
    c02e:	4798      	blx	r3
			pcal_struct = &m2_calst;
    c030:	4e0e      	ldr	r6, [pc, #56]	; (c06c <SD_write_report+0x604>)
			break;
    c032:	e65d      	b.n	bcf0 <SD_write_report+0x288>
			SD_status = fdebug1;
    c034:	2203      	movs	r2, #3
    c036:	4b0e      	ldr	r3, [pc, #56]	; (c070 <SD_write_report+0x608>)
			return fdebug1;
    c038:	2003      	movs	r0, #3
			SD_status = fdebug1;
    c03a:	701a      	strb	r2, [r3, #0]
			return fdebug1;
    c03c:	e549      	b.n	bad2 <SD_write_report+0x6a>
    c03e:	46c0      	nop			; (mov r8, r8)
    c040:	000256a8 	.word	0x000256a8
    c044:	0001fe91 	.word	0x0001fe91
    c048:	0001fffd 	.word	0x0001fffd
    c04c:	00006935 	.word	0x00006935
    c050:	00006c35 	.word	0x00006c35
    c054:	00025464 	.word	0x00025464
    c058:	0001fd79 	.word	0x0001fd79
    c05c:	200054b0 	.word	0x200054b0
    c060:	00025444 	.word	0x00025444
    c064:	2000550c 	.word	0x2000550c
    c068:	00025480 	.word	0x00025480
    c06c:	20003fe0 	.word	0x20003fe0
    c070:	2000403d 	.word	0x2000403d

0000c074 <SD_save_raw_data>:
FRESULT SD_save_raw_data(enum CALTYPE calType ){
    c074:	b5f0      	push	{r4, r5, r6, r7, lr}
    c076:	46de      	mov	lr, fp
    c078:	4657      	mov	r7, sl
    c07a:	464e      	mov	r6, r9
    c07c:	4645      	mov	r5, r8
    c07e:	b5e0      	push	{r5, r6, r7, lr}
    c080:	4c39      	ldr	r4, [pc, #228]	; (c168 <SD_save_raw_data+0xf4>)
    c082:	44a5      	add	sp, r4
		sprintf(write_str1,"_fullCalRawData");
    c084:	4c39      	ldr	r4, [pc, #228]	; (c16c <SD_save_raw_data+0xf8>)
	switch (calType){
    c086:	2800      	cmp	r0, #0
    c088:	d068      	beq.n	c15c <SD_save_raw_data+0xe8>
    c08a:	2801      	cmp	r0, #1
    c08c:	d05d      	beq.n	c14a <SD_save_raw_data+0xd6>
	current_time.year, current_time.month, current_time.date,
    c08e:	4938      	ldr	r1, [pc, #224]	; (c170 <SD_save_raw_data+0xfc>)
	sprintf(file_name, "20%02x%02x%02x_%02x%02x%02x_SN%04d_%s.bin",
    c090:	4838      	ldr	r0, [pc, #224]	; (c174 <SD_save_raw_data+0x100>)
    c092:	794b      	ldrb	r3, [r1, #5]
    c094:	798a      	ldrb	r2, [r1, #6]
    c096:	9405      	str	r4, [sp, #20]
    c098:	6800      	ldr	r0, [r0, #0]
    c09a:	4c37      	ldr	r4, [pc, #220]	; (c178 <SD_save_raw_data+0x104>)
    c09c:	9004      	str	r0, [sp, #16]
    c09e:	7808      	ldrb	r0, [r1, #0]
    c0a0:	9003      	str	r0, [sp, #12]
    c0a2:	7848      	ldrb	r0, [r1, #1]
    c0a4:	9002      	str	r0, [sp, #8]
    c0a6:	7888      	ldrb	r0, [r1, #2]
    c0a8:	9001      	str	r0, [sp, #4]
    c0aa:	7909      	ldrb	r1, [r1, #4]
    c0ac:	a814      	add	r0, sp, #80	; 0x50
    c0ae:	9100      	str	r1, [sp, #0]
    c0b0:	4932      	ldr	r1, [pc, #200]	; (c17c <SD_save_raw_data+0x108>)
    c0b2:	47a0      	blx	r4
	fdebug2 = f_open(&file1, file_name, FA_CREATE_NEW | FA_READ | FA_WRITE);
    c0b4:	2207      	movs	r2, #7
    c0b6:	a914      	add	r1, sp, #80	; 0x50
    c0b8:	a82d      	add	r0, sp, #180	; 0xb4
    c0ba:	4b31      	ldr	r3, [pc, #196]	; (c180 <SD_save_raw_data+0x10c>)
    c0bc:	4798      	blx	r3
    c0be:	4681      	mov	r9, r0
	if(fdebug2 != FR_OK){
    c0c0:	2800      	cmp	r0, #0
    c0c2:	d148      	bne.n	c156 <SD_save_raw_data+0xe2>
	for (i=0;i<nPoints;i++){
    c0c4:	4b2f      	ldr	r3, [pc, #188]	; (c184 <SD_save_raw_data+0x110>)
    c0c6:	469a      	mov	sl, r3
    c0c8:	681b      	ldr	r3, [r3, #0]
    c0ca:	2b00      	cmp	r3, #0
    c0cc:	d030      	beq.n	c130 <SD_save_raw_data+0xbc>
    c0ce:	2300      	movs	r3, #0
    c0d0:	4698      	mov	r8, r3
    c0d2:	4b2d      	ldr	r3, [pc, #180]	; (c188 <SD_save_raw_data+0x114>)
    c0d4:	4f2d      	ldr	r7, [pc, #180]	; (c18c <SD_save_raw_data+0x118>)
    c0d6:	469b      	mov	fp, r3
    c0d8:	4e2d      	ldr	r6, [pc, #180]	; (c190 <SD_save_raw_data+0x11c>)
    c0da:	4d2e      	ldr	r5, [pc, #184]	; (c194 <SD_save_raw_data+0x120>)
    c0dc:	4c2e      	ldr	r4, [pc, #184]	; (c198 <SD_save_raw_data+0x124>)
			raw_data_entry[k] = a1Raw[i][k];
    c0de:	683b      	ldr	r3, [r7, #0]
		fdebug3 = f_write(&file1, raw_data_entry, sizeof(raw_data_entry),  &bytesWritten);
    c0e0:	2230      	movs	r2, #48	; 0x30
			raw_data_entry[k] = a1Raw[i][k];
    c0e2:	9308      	str	r3, [sp, #32]
			raw_data_entry[k+3] = a2Raw[i][k];
    c0e4:	6833      	ldr	r3, [r6, #0]
		fdebug3 = f_write(&file1, raw_data_entry, sizeof(raw_data_entry),  &bytesWritten);
    c0e6:	a908      	add	r1, sp, #32
			raw_data_entry[k+3] = a2Raw[i][k];
    c0e8:	930b      	str	r3, [sp, #44]	; 0x2c
			raw_data_entry[k+6] = m1Raw[i][k];
    c0ea:	682b      	ldr	r3, [r5, #0]
		fdebug3 = f_write(&file1, raw_data_entry, sizeof(raw_data_entry),  &bytesWritten);
    c0ec:	a82d      	add	r0, sp, #180	; 0xb4
			raw_data_entry[k+6] = m1Raw[i][k];
    c0ee:	930e      	str	r3, [sp, #56]	; 0x38
			raw_data_entry[k+9] = m2Raw[i][k];
    c0f0:	6823      	ldr	r3, [r4, #0]
    c0f2:	9311      	str	r3, [sp, #68]	; 0x44
			raw_data_entry[k] = a1Raw[i][k];
    c0f4:	687b      	ldr	r3, [r7, #4]
    c0f6:	9309      	str	r3, [sp, #36]	; 0x24
			raw_data_entry[k+3] = a2Raw[i][k];
    c0f8:	6873      	ldr	r3, [r6, #4]
    c0fa:	930c      	str	r3, [sp, #48]	; 0x30
			raw_data_entry[k+6] = m1Raw[i][k];
    c0fc:	686b      	ldr	r3, [r5, #4]
    c0fe:	930f      	str	r3, [sp, #60]	; 0x3c
			raw_data_entry[k+9] = m2Raw[i][k];
    c100:	6863      	ldr	r3, [r4, #4]
    c102:	9312      	str	r3, [sp, #72]	; 0x48
			raw_data_entry[k] = a1Raw[i][k];
    c104:	68bb      	ldr	r3, [r7, #8]
    c106:	370c      	adds	r7, #12
    c108:	930a      	str	r3, [sp, #40]	; 0x28
			raw_data_entry[k+3] = a2Raw[i][k];
    c10a:	68b3      	ldr	r3, [r6, #8]
    c10c:	360c      	adds	r6, #12
    c10e:	930d      	str	r3, [sp, #52]	; 0x34
			raw_data_entry[k+6] = m1Raw[i][k];
    c110:	68ab      	ldr	r3, [r5, #8]
    c112:	350c      	adds	r5, #12
    c114:	9310      	str	r3, [sp, #64]	; 0x40
			raw_data_entry[k+9] = m2Raw[i][k];
    c116:	68a3      	ldr	r3, [r4, #8]
    c118:	340c      	adds	r4, #12
    c11a:	9313      	str	r3, [sp, #76]	; 0x4c
		fdebug3 = f_write(&file1, raw_data_entry, sizeof(raw_data_entry),  &bytesWritten);
    c11c:	ab07      	add	r3, sp, #28
    c11e:	47d8      	blx	fp
	for (i=0;i<nPoints;i++){
    c120:	2301      	movs	r3, #1
    c122:	469c      	mov	ip, r3
    c124:	4653      	mov	r3, sl
    c126:	681b      	ldr	r3, [r3, #0]
    c128:	44e0      	add	r8, ip
		fdebug3 = f_write(&file1, raw_data_entry, sizeof(raw_data_entry),  &bytesWritten);
    c12a:	4681      	mov	r9, r0
	for (i=0;i<nPoints;i++){
    c12c:	4543      	cmp	r3, r8
    c12e:	d8d6      	bhi.n	c0de <SD_save_raw_data+0x6a>
	f_close(&file1);
    c130:	a82d      	add	r0, sp, #180	; 0xb4
    c132:	4b1a      	ldr	r3, [pc, #104]	; (c19c <SD_save_raw_data+0x128>)
    c134:	4798      	blx	r3
}
    c136:	4648      	mov	r0, r9
    c138:	23b7      	movs	r3, #183	; 0xb7
    c13a:	009b      	lsls	r3, r3, #2
    c13c:	449d      	add	sp, r3
    c13e:	bc3c      	pop	{r2, r3, r4, r5}
    c140:	4690      	mov	r8, r2
    c142:	4699      	mov	r9, r3
    c144:	46a2      	mov	sl, r4
    c146:	46ab      	mov	fp, r5
    c148:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf(write_str1,"azmQuickRawData");
    c14a:	2210      	movs	r2, #16
    c14c:	4914      	ldr	r1, [pc, #80]	; (c1a0 <SD_save_raw_data+0x12c>)
    c14e:	0020      	movs	r0, r4
    c150:	4b14      	ldr	r3, [pc, #80]	; (c1a4 <SD_save_raw_data+0x130>)
    c152:	4798      	blx	r3
		break;
    c154:	e79b      	b.n	c08e <SD_save_raw_data+0x1a>
		SD_status = fdebug2;
    c156:	4b14      	ldr	r3, [pc, #80]	; (c1a8 <SD_save_raw_data+0x134>)
    c158:	7018      	strb	r0, [r3, #0]
		return fdebug2;
    c15a:	e7ec      	b.n	c136 <SD_save_raw_data+0xc2>
		sprintf(write_str1,"_fullCalRawData");
    c15c:	2210      	movs	r2, #16
    c15e:	4913      	ldr	r1, [pc, #76]	; (c1ac <SD_save_raw_data+0x138>)
    c160:	0020      	movs	r0, r4
    c162:	4b10      	ldr	r3, [pc, #64]	; (c1a4 <SD_save_raw_data+0x130>)
    c164:	4798      	blx	r3
		break;
    c166:	e792      	b.n	c08e <SD_save_raw_data+0x1a>
    c168:	fffffd24 	.word	0xfffffd24
    c16c:	20003188 	.word	0x20003188
    c170:	20002778 	.word	0x20002778
    c174:	2000332c 	.word	0x2000332c
    c178:	0001fe91 	.word	0x0001fe91
    c17c:	0002517c 	.word	0x0002517c
    c180:	00005f9d 	.word	0x00005f9d
    c184:	20003340 	.word	0x20003340
    c188:	00006935 	.word	0x00006935
    c18c:	20004040 	.word	0x20004040
    c190:	200022c8 	.word	0x200022c8
    c194:	20003470 	.word	0x20003470
    c198:	20001c88 	.word	0x20001c88
    c19c:	00006c35 	.word	0x00006c35
    c1a0:	0002515c 	.word	0x0002515c
    c1a4:	0001fd79 	.word	0x0001fd79
    c1a8:	2000403d 	.word	0x2000403d
    c1ac:	0002516c 	.word	0x0002516c

0000c1b0 <save_measurement>:
FRESULT save_measurement(struct MEASUREMENT *meas_inst){
    c1b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c1b2:	46de      	mov	lr, fp
    c1b4:	4657      	mov	r7, sl
    c1b6:	464e      	mov	r6, r9
    c1b8:	4645      	mov	r5, r8
    c1ba:	b5e0      	push	{r5, r6, r7, lr}
	sprintf(filename, "20%02x%02x%02x_SN%04d_datafile.csv", current_time.year, current_time.month, current_time.date, options.SerialNumber);
    c1bc:	4950      	ldr	r1, [pc, #320]	; (c300 <save_measurement+0x150>)
FRESULT save_measurement(struct MEASUREMENT *meas_inst){
    c1be:	4c51      	ldr	r4, [pc, #324]	; (c304 <save_measurement+0x154>)
	sprintf(filename, "20%02x%02x%02x_SN%04d_datafile.csv", current_time.year, current_time.month, current_time.date, options.SerialNumber);
    c1c0:	4689      	mov	r9, r1
FRESULT save_measurement(struct MEASUREMENT *meas_inst){
    c1c2:	44a5      	add	sp, r4
	sprintf(filename, "20%02x%02x%02x_SN%04d_datafile.csv", current_time.year, current_time.month, current_time.date, options.SerialNumber);
    c1c4:	6809      	ldr	r1, [r1, #0]
    c1c6:	4c50      	ldr	r4, [pc, #320]	; (c308 <save_measurement+0x158>)
    c1c8:	4f50      	ldr	r7, [pc, #320]	; (c30c <save_measurement+0x15c>)
    c1ca:	7963      	ldrb	r3, [r4, #5]
    c1cc:	79a2      	ldrb	r2, [r4, #6]
    c1ce:	9101      	str	r1, [sp, #4]
    c1d0:	7921      	ldrb	r1, [r4, #4]
FRESULT save_measurement(struct MEASUREMENT *meas_inst){
    c1d2:	4680      	mov	r8, r0
	sprintf(filename, "20%02x%02x%02x_SN%04d_datafile.csv", current_time.year, current_time.month, current_time.date, options.SerialNumber);
    c1d4:	9100      	str	r1, [sp, #0]
    c1d6:	0038      	movs	r0, r7
    c1d8:	494d      	ldr	r1, [pc, #308]	; (c310 <save_measurement+0x160>)
    c1da:	4d4e      	ldr	r5, [pc, #312]	; (c314 <save_measurement+0x164>)
    c1dc:	47a8      	blx	r5
	fdebug1 = f_open(&file1, filename, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
    c1de:	4b4e      	ldr	r3, [pc, #312]	; (c318 <save_measurement+0x168>)
    c1e0:	2203      	movs	r2, #3
    c1e2:	0039      	movs	r1, r7
    c1e4:	a80b      	add	r0, sp, #44	; 0x2c
    c1e6:	469a      	mov	sl, r3
    c1e8:	4798      	blx	r3
    c1ea:	1e06      	subs	r6, r0, #0
	if ((fdebug1!=FR_OK) && (fdebug1!=FR_NO_FILE)){
    c1ec:	d164      	bne.n	c2b8 <save_measurement+0x108>
    c1ee:	4b4b      	ldr	r3, [pc, #300]	; (c31c <save_measurement+0x16c>)
    c1f0:	4f4b      	ldr	r7, [pc, #300]	; (c320 <save_measurement+0x170>)
    c1f2:	9307      	str	r3, [sp, #28]
    c1f4:	ab0a      	add	r3, sp, #40	; 0x28
    c1f6:	469b      	mov	fp, r3
    c1f8:	4b4a      	ldr	r3, [pc, #296]	; (c324 <save_measurement+0x174>)
    c1fa:	9308      	str	r3, [sp, #32]
	sprintf(write_str1,"20%02x.%02x.%02x@%02x:%02x:%02x,",
    c1fc:	7821      	ldrb	r1, [r4, #0]
    c1fe:	79a2      	ldrb	r2, [r4, #6]
    c200:	7963      	ldrb	r3, [r4, #5]
    c202:	9103      	str	r1, [sp, #12]
    c204:	7861      	ldrb	r1, [r4, #1]
    c206:	4e48      	ldr	r6, [pc, #288]	; (c328 <save_measurement+0x178>)
    c208:	9102      	str	r1, [sp, #8]
    c20a:	78a1      	ldrb	r1, [r4, #2]
    c20c:	0030      	movs	r0, r6
    c20e:	9101      	str	r1, [sp, #4]
    c210:	7921      	ldrb	r1, [r4, #4]
    c212:	9100      	str	r1, [sp, #0]
    c214:	4945      	ldr	r1, [pc, #276]	; (c32c <save_measurement+0x17c>)
    c216:	47a8      	blx	r5
	sprintf(write_str2," %d, %.3f, %.3f, %.3f,",
    c218:	4945      	ldr	r1, [pc, #276]	; (c330 <save_measurement+0x180>)
    c21a:	4643      	mov	r3, r8
    c21c:	468a      	mov	sl, r1
    c21e:	4641      	mov	r1, r8
    c220:	681b      	ldr	r3, [r3, #0]
    c222:	6908      	ldr	r0, [r1, #16]
    c224:	9309      	str	r3, [sp, #36]	; 0x24
    c226:	47d0      	blx	sl
    c228:	9004      	str	r0, [sp, #16]
    c22a:	9105      	str	r1, [sp, #20]
    c22c:	4641      	mov	r1, r8
    c22e:	68c8      	ldr	r0, [r1, #12]
    c230:	47d0      	blx	sl
    c232:	9002      	str	r0, [sp, #8]
    c234:	9103      	str	r1, [sp, #12]
    c236:	4641      	mov	r1, r8
    c238:	6a08      	ldr	r0, [r1, #32]
    c23a:	47d0      	blx	sl
    c23c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c23e:	9000      	str	r0, [sp, #0]
    c240:	9101      	str	r1, [sp, #4]
    c242:	493c      	ldr	r1, [pc, #240]	; (c334 <save_measurement+0x184>)
    c244:	0038      	movs	r0, r7
    c246:	47a8      	blx	r5
	strcat(write_str1, write_str2);
    c248:	4b3b      	ldr	r3, [pc, #236]	; (c338 <save_measurement+0x188>)
    c24a:	0039      	movs	r1, r7
    c24c:	0030      	movs	r0, r6
    c24e:	4798      	blx	r3
	if (options.current_unit_dist == feet){
    c250:	464b      	mov	r3, r9
    c252:	791b      	ldrb	r3, [r3, #4]
    c254:	2b00      	cmp	r3, #0
    c256:	d04b      	beq.n	c2f0 <save_measurement+0x140>
		sprintf(write_str2," %.3f,", current_time.temperatureC);
    c258:	68e0      	ldr	r0, [r4, #12]
    c25a:	47d0      	blx	sl
    c25c:	0002      	movs	r2, r0
    c25e:	000b      	movs	r3, r1
    c260:	0038      	movs	r0, r7
    c262:	4936      	ldr	r1, [pc, #216]	; (c33c <save_measurement+0x18c>)
    c264:	47a8      	blx	r5
    c266:	4c36      	ldr	r4, [pc, #216]	; (c340 <save_measurement+0x190>)
    c268:	0030      	movs	r0, r6
    c26a:	47a0      	blx	r4
	strcat(write_str1, write_str2);
    c26c:	0039      	movs	r1, r7
    c26e:	1830      	adds	r0, r6, r0
    c270:	4d34      	ldr	r5, [pc, #208]	; (c344 <save_measurement+0x194>)
    c272:	47a8      	blx	r5
	strcat(write_str1, write_str2);
    c274:	0039      	movs	r1, r7
    c276:	47a8      	blx	r5
	strcat(write_str1, "\r\n");
    c278:	2203      	movs	r2, #3
    c27a:	4933      	ldr	r1, [pc, #204]	; (c348 <save_measurement+0x198>)
    c27c:	9b07      	ldr	r3, [sp, #28]
    c27e:	4798      	blx	r3
	fdebug2 = f_lseek(&file1, f_size(&file1));
    c280:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c282:	a80b      	add	r0, sp, #44	; 0x2c
    c284:	0019      	movs	r1, r3
    c286:	9307      	str	r3, [sp, #28]
    c288:	4b30      	ldr	r3, [pc, #192]	; (c34c <save_measurement+0x19c>)
    c28a:	4798      	blx	r3
	fdebug3 = f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
    c28c:	0030      	movs	r0, r6
    c28e:	47a0      	blx	r4
    c290:	465b      	mov	r3, fp
    c292:	0002      	movs	r2, r0
    c294:	0031      	movs	r1, r6
    c296:	a80b      	add	r0, sp, #44	; 0x2c
    c298:	9c08      	ldr	r4, [sp, #32]
    c29a:	47a0      	blx	r4
	f_close(&file1);
    c29c:	4b2c      	ldr	r3, [pc, #176]	; (c350 <save_measurement+0x1a0>)
	fdebug3 = f_write(&file1, write_str1, strlen(write_str1),  &bytesWritten);
    c29e:	0006      	movs	r6, r0
	f_close(&file1);
    c2a0:	a80b      	add	r0, sp, #44	; 0x2c
    c2a2:	4798      	blx	r3
}
    c2a4:	0030      	movs	r0, r6
    c2a6:	2395      	movs	r3, #149	; 0x95
    c2a8:	009b      	lsls	r3, r3, #2
    c2aa:	449d      	add	sp, r3
    c2ac:	bc3c      	pop	{r2, r3, r4, r5}
    c2ae:	4690      	mov	r8, r2
    c2b0:	4699      	mov	r9, r3
    c2b2:	46a2      	mov	sl, r4
    c2b4:	46ab      	mov	fp, r5
    c2b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((fdebug1!=FR_OK) && (fdebug1!=FR_NO_FILE)){
    c2b8:	2804      	cmp	r0, #4
    c2ba:	d1f3      	bne.n	c2a4 <save_measurement+0xf4>
		fdebug2 = f_open(&file1, filename, FA_CREATE_NEW | FA_READ | FA_WRITE);
    c2bc:	2207      	movs	r2, #7
    c2be:	0039      	movs	r1, r7
    c2c0:	a80b      	add	r0, sp, #44	; 0x2c
    c2c2:	47d0      	blx	sl
    c2c4:	1e06      	subs	r6, r0, #0
		if(fdebug2!=FR_OK){
    c2c6:	d117      	bne.n	c2f8 <save_measurement+0x148>
		if (options.current_unit_dist == feet){
    c2c8:	464b      	mov	r3, r9
    c2ca:	791b      	ldrb	r3, [r3, #4]
			sprintf(write_str2, "Time-Stamp, Index, Distance (meters), Azimuth (degrees), Inclination (degrees), Temperature (Celsius),  Error Log\r\n");
    c2cc:	4f14      	ldr	r7, [pc, #80]	; (c320 <save_measurement+0x170>)
    c2ce:	2274      	movs	r2, #116	; 0x74
		if (options.current_unit_dist == feet){
    c2d0:	2b00      	cmp	r3, #0
    c2d2:	d00f      	beq.n	c2f4 <save_measurement+0x144>
			sprintf(write_str2, "Time-Stamp, Index, Distance (feet), Azimuth (degrees), Inclination (degrees), Temperature (Fahrenheit), Error Log\r\n");
    c2d4:	491f      	ldr	r1, [pc, #124]	; (c354 <save_measurement+0x1a4>)
    c2d6:	4b11      	ldr	r3, [pc, #68]	; (c31c <save_measurement+0x16c>)
    c2d8:	0038      	movs	r0, r7
    c2da:	9307      	str	r3, [sp, #28]
    c2dc:	4798      	blx	r3
			fdebug2 = f_write(&file1, write_str2, strlen(write_str2),  &bytesWritten);
    c2de:	4e11      	ldr	r6, [pc, #68]	; (c324 <save_measurement+0x174>)
    c2e0:	ab0a      	add	r3, sp, #40	; 0x28
    c2e2:	2273      	movs	r2, #115	; 0x73
    c2e4:	0039      	movs	r1, r7
    c2e6:	a80b      	add	r0, sp, #44	; 0x2c
    c2e8:	469b      	mov	fp, r3
    c2ea:	9608      	str	r6, [sp, #32]
    c2ec:	47b0      	blx	r6
    c2ee:	e785      	b.n	c1fc <save_measurement+0x4c>
		sprintf(write_str2," %.3f,", current_time.temperatureF);
    c2f0:	6920      	ldr	r0, [r4, #16]
    c2f2:	e7b2      	b.n	c25a <save_measurement+0xaa>
			sprintf(write_str2, "Time-Stamp, Index, Distance (meters), Azimuth (degrees), Inclination (degrees), Temperature (Celsius),  Error Log\r\n");
    c2f4:	4918      	ldr	r1, [pc, #96]	; (c358 <save_measurement+0x1a8>)
    c2f6:	e7ee      	b.n	c2d6 <save_measurement+0x126>
			SD_status = fdebug2;
    c2f8:	4b18      	ldr	r3, [pc, #96]	; (c35c <save_measurement+0x1ac>)
    c2fa:	7018      	strb	r0, [r3, #0]
			return fdebug2;
    c2fc:	e7d2      	b.n	c2a4 <save_measurement+0xf4>
    c2fe:	46c0      	nop			; (mov r8, r8)
    c300:	2000332c 	.word	0x2000332c
    c304:	fffffdac 	.word	0xfffffdac
    c308:	20002778 	.word	0x20002778
    c30c:	20003344 	.word	0x20003344
    c310:	00025708 	.word	0x00025708
    c314:	0001fe91 	.word	0x0001fe91
    c318:	00005f9d 	.word	0x00005f9d
    c31c:	0001fd79 	.word	0x0001fd79
    c320:	200044f4 	.word	0x200044f4
    c324:	00006935 	.word	0x00006935
    c328:	20003188 	.word	0x20003188
    c32c:	00025814 	.word	0x00025814
    c330:	0001fb6d 	.word	0x0001fb6d
    c334:	00025838 	.word	0x00025838
    c338:	0001ff19 	.word	0x0001ff19
    c33c:	00025848 	.word	0x00025848
    c340:	0001fffd 	.word	0x0001fffd
    c344:	0001fed5 	.word	0x0001fed5
    c348:	00025420 	.word	0x00025420
    c34c:	00006d89 	.word	0x00006d89
    c350:	00006c35 	.word	0x00006c35
    c354:	000257a0 	.word	0x000257a0
    c358:	0002572c 	.word	0x0002572c
    c35c:	2000403d 	.word	0x2000403d

0000c360 <configure_SD>:
FRESULT configure_SD(void){
    c360:	b510      	push	{r4, lr}
	sd_mmc_init();
    c362:	4b05      	ldr	r3, [pc, #20]	; (c378 <configure_SD+0x18>)
    c364:	4798      	blx	r3
	disk_status(0);
    c366:	4b05      	ldr	r3, [pc, #20]	; (c37c <configure_SD+0x1c>)
    c368:	2000      	movs	r0, #0
    c36a:	4798      	blx	r3
	fdebug1 = f_mount(0, &FatFS);
    c36c:	4904      	ldr	r1, [pc, #16]	; (c380 <configure_SD+0x20>)
    c36e:	2000      	movs	r0, #0
    c370:	4b04      	ldr	r3, [pc, #16]	; (c384 <configure_SD+0x24>)
    c372:	4798      	blx	r3
	//spi_select_slave(&spi_main, &slave_SD, false);
	
	return fdebug1;
}
    c374:	bd10      	pop	{r4, pc}
    c376:	46c0      	nop			; (mov r8, r8)
    c378:	0000dc55 	.word	0x0000dc55
    c37c:	00003d1d 	.word	0x00003d1d
    c380:	2000521c 	.word	0x2000521c
    c384:	00005f75 	.word	0x00005f75

0000c388 <getSN>:



uint32_t getSN(void){
    c388:	b530      	push	{r4, r5, lr}
    c38a:	4c17      	ldr	r4, [pc, #92]	; (c3e8 <getSN+0x60>)
	
	FIL file1;
	UINT	bytesWritten;
	FRESULT fdebug1;
	
	fdebug1 = f_open(&file1,"SN.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
    c38c:	2203      	movs	r2, #3
uint32_t getSN(void){
    c38e:	44a5      	add	sp, r4
	fdebug1 = f_open(&file1,"SN.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
    c390:	4916      	ldr	r1, [pc, #88]	; (c3ec <getSN+0x64>)
    c392:	a803      	add	r0, sp, #12
    c394:	4b16      	ldr	r3, [pc, #88]	; (c3f0 <getSN+0x68>)
    c396:	4798      	blx	r3
	if (fdebug1!=FR_OK){
    c398:	2800      	cmp	r0, #0
    c39a:	d006      	beq.n	c3aa <getSN+0x22>
		//  Something failed, exit function
		return options.SerialNumber;
    c39c:	4b15      	ldr	r3, [pc, #84]	; (c3f4 <getSN+0x6c>)
    c39e:	681c      	ldr	r4, [r3, #0]
	f_close(&file1);
	
	return SN;


}
    c3a0:	0020      	movs	r0, r4
    c3a2:	238d      	movs	r3, #141	; 0x8d
    c3a4:	009b      	lsls	r3, r3, #2
    c3a6:	449d      	add	sp, r3
    c3a8:	bd30      	pop	{r4, r5, pc}
	f_read(&file1, snStr, 4, &bytesWritten);
    c3aa:	ad01      	add	r5, sp, #4
    c3ac:	ab02      	add	r3, sp, #8
    c3ae:	0029      	movs	r1, r5
    c3b0:	2204      	movs	r2, #4
    c3b2:	a803      	add	r0, sp, #12
    c3b4:	4c10      	ldr	r4, [pc, #64]	; (c3f8 <getSN+0x70>)
    c3b6:	47a0      	blx	r4
		temp = snStr[i] & 0x0f;
    c3b8:	230f      	movs	r3, #15
		SN = SN + (temp*mult);
    c3ba:	24fa      	movs	r4, #250	; 0xfa
		temp = snStr[i] & 0x0f;
    c3bc:	782a      	ldrb	r2, [r5, #0]
		SN = SN + (temp*mult);
    c3be:	00a4      	lsls	r4, r4, #2
    c3c0:	401a      	ands	r2, r3
    c3c2:	4354      	muls	r4, r2
    c3c4:	2264      	movs	r2, #100	; 0x64
		temp = snStr[i] & 0x0f;
    c3c6:	7869      	ldrb	r1, [r5, #1]
	f_close(&file1);
    c3c8:	a803      	add	r0, sp, #12
		SN = SN + (temp*mult);
    c3ca:	4019      	ands	r1, r3
    c3cc:	434a      	muls	r2, r1
		temp = snStr[i] & 0x0f;
    c3ce:	78a9      	ldrb	r1, [r5, #2]
		SN = SN + (temp*mult);
    c3d0:	18a2      	adds	r2, r4, r2
    c3d2:	4019      	ands	r1, r3
    c3d4:	008c      	lsls	r4, r1, #2
    c3d6:	1864      	adds	r4, r4, r1
    c3d8:	0064      	lsls	r4, r4, #1
    c3da:	18a4      	adds	r4, r4, r2
		temp = snStr[i] & 0x0f;
    c3dc:	78ea      	ldrb	r2, [r5, #3]
		SN = SN + (temp*mult);
    c3de:	4013      	ands	r3, r2
    c3e0:	191c      	adds	r4, r3, r4
	f_close(&file1);
    c3e2:	4b06      	ldr	r3, [pc, #24]	; (c3fc <getSN+0x74>)
    c3e4:	4798      	blx	r3
	return SN;
    c3e6:	e7db      	b.n	c3a0 <getSN+0x18>
    c3e8:	fffffdcc 	.word	0xfffffdcc
    c3ec:	00025700 	.word	0x00025700
    c3f0:	00005f9d 	.word	0x00005f9d
    c3f4:	2000332c 	.word	0x2000332c
    c3f8:	00006629 	.word	0x00006629
    c3fc:	00006c35 	.word	0x00006c35

0000c400 <isLaserOn>:
//  Status
volatile bool laserStatus = false; //  Variable to track when laser is turned on


bool isLaserOn(void){
	return laserStatus;
    c400:	4b01      	ldr	r3, [pc, #4]	; (c408 <isLaserOn+0x8>)
    c402:	7818      	ldrb	r0, [r3, #0]
    c404:	b2c0      	uxtb	r0, r0
}
    c406:	4770      	bx	lr
    c408:	20000e70 	.word	0x20000e70

0000c40c <laser_parse_buffer>:
}




void laser_parse_buffer(struct MEASUREMENT *meas_inst){
    c40c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c40e:	4646      	mov	r6, r8
    c410:	46d6      	mov	lr, sl
    c412:	464f      	mov	r7, r9
    c414:	2400      	movs	r4, #0
    c416:	b5c0      	push	{r6, r7, lr}
    c418:	4d68      	ldr	r5, [pc, #416]	; (c5bc <laser_parse_buffer+0x1b0>)
    c41a:	0006      	movs	r6, r0
    c41c:	e002      	b.n	c424 <laser_parse_buffer+0x18>
    c41e:	3401      	adds	r4, #1
	uint8_t i;
	uint8_t AA_index;
	
	
	AA_index=0;
	for (i=0; i<sizeof(rxBufferLaser); i++){
    c420:	2c64      	cmp	r4, #100	; 0x64
    c422:	d030      	beq.n	c486 <laser_parse_buffer+0x7a>
		if(rxBufferLaser[i]==0xAA){
    c424:	5d2b      	ldrb	r3, [r5, r4]
    c426:	2baa      	cmp	r3, #170	; 0xaa
    c428:	d1f9      	bne.n	c41e <laser_parse_buffer+0x12>
		meas_inst->measurement_error[meas_inst->num_errors] = laser_pattern_error; 		
		meas_inst->measurement_error_data1[meas_inst->num_errors] = 0;
		increment_error_count(meas_inst);
		meas_inst->distRaw = 0;
		return;
	}else if(meas_inst->readTimeMs > MEASUREMENT_TIMEOUT){//timeout error
    c42a:	228c      	movs	r2, #140	; 0x8c
    c42c:	4b64      	ldr	r3, [pc, #400]	; (c5c0 <laser_parse_buffer+0x1b4>)
    c42e:	58b2      	ldr	r2, [r6, r2]
    c430:	429a      	cmp	r2, r3
    c432:	d81c      	bhi.n	c46e <laser_parse_buffer+0x62>
		meas_inst->measurement_error[meas_inst->num_errors] = laser_response_timeout;
		meas_inst->measurement_error_data1[meas_inst->num_errors] = meas_inst->samples;
		increment_error_count(meas_inst);
		meas_inst->distRaw = 0;
		return;
	}else if(rxBufferLaser[AA_index+2]!=0x44){
    c434:	1ca2      	adds	r2, r4, #2
    c436:	5cab      	ldrb	r3, [r5, r2]
    c438:	2b44      	cmp	r3, #68	; 0x44
    c43a:	d034      	beq.n	c4a6 <laser_parse_buffer+0x9a>
		meas_inst->measurement_error[meas_inst->num_errors] = laser_wrong_message;
    c43c:	2790      	movs	r7, #144	; 0x90
    c43e:	59f4      	ldr	r4, [r6, r7]
		meas_inst->measurement_error_data1[meas_inst->num_errors] = rxBufferLaser[AA_index+2];
    c440:	5ca8      	ldrb	r0, [r5, r2]
    c442:	0025      	movs	r5, r4
		meas_inst->measurement_error[meas_inst->num_errors] = laser_wrong_message;
    c444:	210d      	movs	r1, #13
    c446:	1933      	adds	r3, r6, r4
    c448:	3394      	adds	r3, #148	; 0x94
		meas_inst->measurement_error_data1[meas_inst->num_errors] = rxBufferLaser[AA_index+2];
    c44a:	3526      	adds	r5, #38	; 0x26
		meas_inst->measurement_error[meas_inst->num_errors] = laser_wrong_message;
    c44c:	7019      	strb	r1, [r3, #0]
		meas_inst->measurement_error_data1[meas_inst->num_errors] = rxBufferLaser[AA_index+2];
    c44e:	b2c0      	uxtb	r0, r0
    c450:	00ad      	lsls	r5, r5, #2
    c452:	4b5c      	ldr	r3, [pc, #368]	; (c5c4 <laser_parse_buffer+0x1b8>)
    c454:	4798      	blx	r3
bool increment_error_count(struct MEASUREMENT *meas_inst)
{
	uint32_t array_max;
	bool error_incremented;
	array_max = sizeof(meas_inst->measurement_error)/sizeof(meas_inst->measurement_error[0]);
	if 	((meas_inst->num_errors+1)<array_max){
    c456:	3401      	adds	r4, #1
		meas_inst->measurement_error_data1[meas_inst->num_errors] = rxBufferLaser[AA_index+2];
    c458:	51a8      	str	r0, [r5, r6]
	if 	((meas_inst->num_errors+1)<array_max){
    c45a:	2c03      	cmp	r4, #3
    c45c:	d800      	bhi.n	c460 <laser_parse_buffer+0x54>
		meas_inst->num_errors++;
    c45e:	51f4      	str	r4, [r6, r7]
		meas_inst->distRaw = 0;
    c460:	2300      	movs	r3, #0
    c462:	61f3      	str	r3, [r6, #28]
}
    c464:	bc1c      	pop	{r2, r3, r4}
    c466:	4690      	mov	r8, r2
    c468:	4699      	mov	r9, r3
    c46a:	46a2      	mov	sl, r4
    c46c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		meas_inst->measurement_error[meas_inst->num_errors] = laser_response_timeout;
    c46e:	2790      	movs	r7, #144	; 0x90
    c470:	220b      	movs	r2, #11
    c472:	59f4      	ldr	r4, [r6, r7]
    c474:	1933      	adds	r3, r6, r4
    c476:	3394      	adds	r3, #148	; 0x94
		meas_inst->measurement_error_data1[meas_inst->num_errors] = meas_inst->samples;
    c478:	0025      	movs	r5, r4
		meas_inst->measurement_error[meas_inst->num_errors] = laser_response_timeout;
    c47a:	701a      	strb	r2, [r3, #0]
		meas_inst->measurement_error_data1[meas_inst->num_errors] = meas_inst->samples;
    c47c:	2384      	movs	r3, #132	; 0x84
    c47e:	3526      	adds	r5, #38	; 0x26
    c480:	00ad      	lsls	r5, r5, #2
    c482:	58f0      	ldr	r0, [r6, r3]
    c484:	e7e5      	b.n	c452 <laser_parse_buffer+0x46>
		meas_inst->measurement_error[meas_inst->num_errors] = laser_pattern_error; 		
    c486:	2190      	movs	r1, #144	; 0x90
    c488:	200a      	movs	r0, #10
    c48a:	5873      	ldr	r3, [r6, r1]
    c48c:	18f2      	adds	r2, r6, r3
    c48e:	3294      	adds	r2, #148	; 0x94
    c490:	7010      	strb	r0, [r2, #0]
		meas_inst->measurement_error_data1[meas_inst->num_errors] = 0;
    c492:	001a      	movs	r2, r3
    c494:	2000      	movs	r0, #0
    c496:	3226      	adds	r2, #38	; 0x26
    c498:	0092      	lsls	r2, r2, #2
	if 	((meas_inst->num_errors+1)<array_max){
    c49a:	3301      	adds	r3, #1
		meas_inst->measurement_error_data1[meas_inst->num_errors] = 0;
    c49c:	5190      	str	r0, [r2, r6]
	if 	((meas_inst->num_errors+1)<array_max){
    c49e:	2b03      	cmp	r3, #3
    c4a0:	d8de      	bhi.n	c460 <laser_parse_buffer+0x54>
		meas_inst->num_errors++;
    c4a2:	5073      	str	r3, [r6, r1]
    c4a4:	e7dc      	b.n	c460 <laser_parse_buffer+0x54>
	}else if (rxBufferLaser[AA_index+3]=='E'){//rangefinder generated error
    c4a6:	1ce3      	adds	r3, r4, #3
    c4a8:	5cea      	ldrb	r2, [r5, r3]
    c4aa:	2a45      	cmp	r2, #69	; 0x45
    c4ac:	d045      	beq.n	c53a <laser_parse_buffer+0x12e>
		meas_inst->distRaw = 0;
    c4ae:	2200      	movs	r2, #0
			temp1=rxBufferLaser[AA_index+i] & mask;
    c4b0:	270f      	movs	r7, #15
		meas_inst->distRaw = 0;
    c4b2:	4692      	mov	sl, r2
    c4b4:	61f2      	str	r2, [r6, #28]
			temp1=rxBufferLaser[AA_index+i] & mask;
    c4b6:	5ceb      	ldrb	r3, [r5, r3]
			meas_inst->distRaw=meas_inst->distRaw + temp1*mult;
    c4b8:	4843      	ldr	r0, [pc, #268]	; (c5c8 <laser_parse_buffer+0x1bc>)
			temp1=rxBufferLaser[AA_index+i] & mask;
    c4ba:	403b      	ands	r3, r7
			meas_inst->distRaw=meas_inst->distRaw + temp1*mult;
    c4bc:	4358      	muls	r0, r3
    c4be:	4b41      	ldr	r3, [pc, #260]	; (c5c4 <laser_parse_buffer+0x1b8>)
    c4c0:	4699      	mov	r9, r3
    c4c2:	4798      	blx	r3
    c4c4:	4b41      	ldr	r3, [pc, #260]	; (c5cc <laser_parse_buffer+0x1c0>)
    c4c6:	4651      	mov	r1, sl
    c4c8:	4698      	mov	r8, r3
    c4ca:	4798      	blx	r3
    c4cc:	4682      	mov	sl, r0
    c4ce:	61f0      	str	r0, [r6, #28]
			temp1=rxBufferLaser[AA_index+i] & mask;
    c4d0:	1d23      	adds	r3, r4, #4
    c4d2:	5ceb      	ldrb	r3, [r5, r3]
			meas_inst->distRaw=meas_inst->distRaw + temp1*mult;
    c4d4:	483e      	ldr	r0, [pc, #248]	; (c5d0 <laser_parse_buffer+0x1c4>)
			temp1=rxBufferLaser[AA_index+i] & mask;
    c4d6:	403b      	ands	r3, r7
			meas_inst->distRaw=meas_inst->distRaw + temp1*mult;
    c4d8:	4358      	muls	r0, r3
    c4da:	47c8      	blx	r9
    c4dc:	4651      	mov	r1, sl
    c4de:	47c0      	blx	r8
    c4e0:	4682      	mov	sl, r0
    c4e2:	61f0      	str	r0, [r6, #28]
    c4e4:	20fa      	movs	r0, #250	; 0xfa
			temp1=rxBufferLaser[AA_index+i] & mask;
    c4e6:	1d63      	adds	r3, r4, #5
    c4e8:	5ceb      	ldrb	r3, [r5, r3]
			meas_inst->distRaw=meas_inst->distRaw + temp1*mult;
    c4ea:	0080      	lsls	r0, r0, #2
			temp1=rxBufferLaser[AA_index+i] & mask;
    c4ec:	403b      	ands	r3, r7
			meas_inst->distRaw=meas_inst->distRaw + temp1*mult;
    c4ee:	4358      	muls	r0, r3
    c4f0:	47c8      	blx	r9
    c4f2:	4651      	mov	r1, sl
    c4f4:	47c0      	blx	r8
    c4f6:	4682      	mov	sl, r0
    c4f8:	61f0      	str	r0, [r6, #28]
    c4fa:	2064      	movs	r0, #100	; 0x64
			temp1=rxBufferLaser[AA_index+i] & mask;
    c4fc:	1da3      	adds	r3, r4, #6
    c4fe:	5ceb      	ldrb	r3, [r5, r3]
    c500:	403b      	ands	r3, r7
			meas_inst->distRaw=meas_inst->distRaw + temp1*mult;
    c502:	4358      	muls	r0, r3
    c504:	47c8      	blx	r9
    c506:	4651      	mov	r1, sl
    c508:	47c0      	blx	r8
    c50a:	4682      	mov	sl, r0
    c50c:	61f0      	str	r0, [r6, #28]
			temp1=rxBufferLaser[AA_index+i] & mask;
    c50e:	1de3      	adds	r3, r4, #7
    c510:	5ceb      	ldrb	r3, [r5, r3]
    c512:	3408      	adds	r4, #8
    c514:	403b      	ands	r3, r7
			meas_inst->distRaw=meas_inst->distRaw + temp1*mult;
    c516:	0098      	lsls	r0, r3, #2
    c518:	18c0      	adds	r0, r0, r3
    c51a:	0040      	lsls	r0, r0, #1
    c51c:	47c8      	blx	r9
    c51e:	4651      	mov	r1, sl
    c520:	47c0      	blx	r8
    c522:	4682      	mov	sl, r0
    c524:	61f0      	str	r0, [r6, #28]
			temp1=rxBufferLaser[AA_index+i] & mask;
    c526:	5d28      	ldrb	r0, [r5, r4]
			meas_inst->distRaw=meas_inst->distRaw + temp1*mult;
    c528:	4038      	ands	r0, r7
    c52a:	47c8      	blx	r9
    c52c:	4651      	mov	r1, sl
    c52e:	47c0      	blx	r8
		meas_inst->distRaw=meas_inst->distRaw/1000;
    c530:	4928      	ldr	r1, [pc, #160]	; (c5d4 <laser_parse_buffer+0x1c8>)
    c532:	4b29      	ldr	r3, [pc, #164]	; (c5d8 <laser_parse_buffer+0x1cc>)
    c534:	4798      	blx	r3
    c536:	61f0      	str	r0, [r6, #28]
    c538:	e794      	b.n	c464 <laser_parse_buffer+0x58>
			temp1 = rxBufferLaser[AA_index+i] & mask;
    c53a:	1da3      	adds	r3, r4, #6
    c53c:	1de2      	adds	r2, r4, #7
    c53e:	5ce8      	ldrb	r0, [r5, r3]
    c540:	5ca9      	ldrb	r1, [r5, r2]
    c542:	220f      	movs	r2, #15
			temp_err = temp_err + temp1*mult;
    c544:	2364      	movs	r3, #100	; 0x64
			temp1 = rxBufferLaser[AA_index+i] & mask;
    c546:	4010      	ands	r0, r2
    c548:	4011      	ands	r1, r2
			temp_err = temp_err + temp1*mult;
    c54a:	4343      	muls	r3, r0
			temp1 = rxBufferLaser[AA_index+i] & mask;
    c54c:	0008      	movs	r0, r1
			temp_err = temp_err + temp1*mult;
    c54e:	0089      	lsls	r1, r1, #2
    c550:	1809      	adds	r1, r1, r0
    c552:	0049      	lsls	r1, r1, #1
			temp1 = rxBufferLaser[AA_index+i] & mask;
    c554:	3408      	adds	r4, #8
			temp_err = temp_err + temp1*mult;
    c556:	1859      	adds	r1, r3, r1
			temp1 = rxBufferLaser[AA_index+i] & mask;
    c558:	5d2b      	ldrb	r3, [r5, r4]
    c55a:	4013      	ands	r3, r2
			temp_err = temp_err + temp1*mult;
    c55c:	185b      	adds	r3, r3, r1
		switch (temp_err){
    c55e:	2bff      	cmp	r3, #255	; 0xff
    c560:	d016      	beq.n	c590 <laser_parse_buffer+0x184>
    c562:	32f1      	adds	r2, #241	; 0xf1
    c564:	4293      	cmp	r3, r2
    c566:	d021      	beq.n	c5ac <laser_parse_buffer+0x1a0>
    c568:	2bcc      	cmp	r3, #204	; 0xcc
    c56a:	d018      	beq.n	c59e <laser_parse_buffer+0x192>
				meas_inst->measurement_error[meas_inst->num_errors] = laser_unknown;
    c56c:	2390      	movs	r3, #144	; 0x90
    c56e:	210c      	movs	r1, #12
    c570:	58f3      	ldr	r3, [r6, r3]
    c572:	18f2      	adds	r2, r6, r3
    c574:	3294      	adds	r2, #148	; 0x94
    c576:	7011      	strb	r1, [r2, #0]
		meas_inst->measurement_error_data1[meas_inst->num_errors] = 0;
    c578:	001a      	movs	r2, r3
    c57a:	2100      	movs	r1, #0
    c57c:	3226      	adds	r2, #38	; 0x26
    c57e:	0092      	lsls	r2, r2, #2
	if 	((meas_inst->num_errors+1)<array_max){
    c580:	3301      	adds	r3, #1
		meas_inst->measurement_error_data1[meas_inst->num_errors] = 0;
    c582:	5191      	str	r1, [r2, r6]
	if 	((meas_inst->num_errors+1)<array_max){
    c584:	2b03      	cmp	r3, #3
    c586:	d900      	bls.n	c58a <laser_parse_buffer+0x17e>
    c588:	e76a      	b.n	c460 <laser_parse_buffer+0x54>
		meas_inst->num_errors++;
    c58a:	2290      	movs	r2, #144	; 0x90
    c58c:	50b3      	str	r3, [r6, r2]
    c58e:	e767      	b.n	c460 <laser_parse_buffer+0x54>
				meas_inst->measurement_error[meas_inst->num_errors] = laser_weak_signal;
    c590:	2390      	movs	r3, #144	; 0x90
    c592:	2108      	movs	r1, #8
    c594:	58f3      	ldr	r3, [r6, r3]
    c596:	18f2      	adds	r2, r6, r3
    c598:	3294      	adds	r2, #148	; 0x94
    c59a:	7011      	strb	r1, [r2, #0]
			break;
    c59c:	e7ec      	b.n	c578 <laser_parse_buffer+0x16c>
				meas_inst->measurement_error[meas_inst->num_errors] = laser_calc_err;
    c59e:	2107      	movs	r1, #7
    c5a0:	3b3c      	subs	r3, #60	; 0x3c
    c5a2:	58f3      	ldr	r3, [r6, r3]
    c5a4:	18f2      	adds	r2, r6, r3
    c5a6:	3294      	adds	r2, #148	; 0x94
    c5a8:	7011      	strb	r1, [r2, #0]
			break;
    c5aa:	e7e5      	b.n	c578 <laser_parse_buffer+0x16c>
				meas_inst->measurement_error[meas_inst->num_errors] = laser_strong_signal;
    c5ac:	2390      	movs	r3, #144	; 0x90
    c5ae:	2109      	movs	r1, #9
    c5b0:	58f3      	ldr	r3, [r6, r3]
    c5b2:	18f2      	adds	r2, r6, r3
    c5b4:	3294      	adds	r2, #148	; 0x94
    c5b6:	7011      	strb	r1, [r2, #0]
			break;
    c5b8:	e7de      	b.n	c578 <laser_parse_buffer+0x16c>
    c5ba:	46c0      	nop			; (mov r8, r8)
    c5bc:	20005568 	.word	0x20005568
    c5c0:	00001388 	.word	0x00001388
    c5c4:	0001df91 	.word	0x0001df91
    c5c8:	000186a0 	.word	0x000186a0
    c5cc:	0001d235 	.word	0x0001d235
    c5d0:	00002710 	.word	0x00002710
    c5d4:	447a0000 	.word	0x447a0000
    c5d8:	0001d559 	.word	0x0001d559

0000c5dc <rangefinder_on_off>:
void rangefinder_on_off(bool on_off){
    c5dc:	b510      	push	{r4, lr}
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    c5de:	2204      	movs	r2, #4
    c5e0:	4b06      	ldr	r3, [pc, #24]	; (c5fc <rangefinder_on_off+0x20>)
	if (on_off){
    c5e2:	2800      	cmp	r0, #0
    c5e4:	d104      	bne.n	c5f0 <rangefinder_on_off+0x14>
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    c5e6:	615a      	str	r2, [r3, #20]
	laserStatus = false;
    c5e8:	2200      	movs	r2, #0
    c5ea:	4b05      	ldr	r3, [pc, #20]	; (c600 <rangefinder_on_off+0x24>)
    c5ec:	701a      	strb	r2, [r3, #0]
}
    c5ee:	bd10      	pop	{r4, pc}
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    c5f0:	619a      	str	r2, [r3, #24]
		delay_ms(100);
    c5f2:	2064      	movs	r0, #100	; 0x64
    c5f4:	4b03      	ldr	r3, [pc, #12]	; (c604 <rangefinder_on_off+0x28>)
    c5f6:	4798      	blx	r3
    c5f8:	e7f6      	b.n	c5e8 <rangefinder_on_off+0xc>
    c5fa:	46c0      	nop			; (mov r8, r8)
    c5fc:	40002800 	.word	0x40002800
    c600:	20000e70 	.word	0x20000e70
    c604:	000161e9 	.word	0x000161e9

0000c608 <laser_on_off>:
void laser_on_off(bool on_off){
    c608:	b510      	push	{r4, lr}
		writeLaser(cmd_laser_on, sizeof(cmd_laser_on));
    c60a:	2105      	movs	r1, #5
	if(on_off){
    c60c:	2800      	cmp	r0, #0
    c60e:	d00a      	beq.n	c626 <laser_on_off+0x1e>
		writeLaser(cmd_laser_on, sizeof(cmd_laser_on));
    c610:	480a      	ldr	r0, [pc, #40]	; (c63c <laser_on_off+0x34>)
    c612:	4b0b      	ldr	r3, [pc, #44]	; (c640 <laser_on_off+0x38>)
    c614:	4798      	blx	r3
    c616:	4c0b      	ldr	r4, [pc, #44]	; (c644 <laser_on_off+0x3c>)
		while(!isLaserTransmitComplete());
    c618:	47a0      	blx	r4
    c61a:	2800      	cmp	r0, #0
    c61c:	d0fc      	beq.n	c618 <laser_on_off+0x10>
		laserStatus = true;
    c61e:	2201      	movs	r2, #1
    c620:	4b09      	ldr	r3, [pc, #36]	; (c648 <laser_on_off+0x40>)
    c622:	701a      	strb	r2, [r3, #0]
}
    c624:	bd10      	pop	{r4, pc}
		writeLaser(cmd_laser_off, sizeof(cmd_laser_off));
    c626:	4809      	ldr	r0, [pc, #36]	; (c64c <laser_on_off+0x44>)
    c628:	4b05      	ldr	r3, [pc, #20]	; (c640 <laser_on_off+0x38>)
    c62a:	4798      	blx	r3
    c62c:	4c05      	ldr	r4, [pc, #20]	; (c644 <laser_on_off+0x3c>)
		while(!isLaserTransmitComplete());
    c62e:	47a0      	blx	r4
    c630:	2800      	cmp	r0, #0
    c632:	d0fc      	beq.n	c62e <laser_on_off+0x26>
		laserStatus = false;
    c634:	2200      	movs	r2, #0
    c636:	4b04      	ldr	r3, [pc, #16]	; (c648 <laser_on_off+0x40>)
    c638:	701a      	strb	r2, [r3, #0]
}
    c63a:	e7f3      	b.n	c624 <laser_on_off+0x1c>
    c63c:	200001a0 	.word	0x200001a0
    c640:	00012ff5 	.word	0x00012ff5
    c644:	00013035 	.word	0x00013035
    c648:	20000e70 	.word	0x20000e70
    c64c:	20000198 	.word	0x20000198

0000c650 <read_accel>:
void read_accel(struct spi_slave_inst *const sensor, float vector[3]){
    c650:	b5f0      	push	{r4, r5, r6, r7, lr}
    c652:	46de      	mov	lr, fp
    c654:	4657      	mov	r7, sl
    c656:	464e      	mov	r6, r9
    c658:	4645      	mov	r5, r8
    c65a:	b5e0      	push	{r5, r6, r7, lr}
    c65c:	0007      	movs	r7, r0
	spi_select_slave(&spi_main, sensor, true);
    c65e:	4c3a      	ldr	r4, [pc, #232]	; (c748 <read_accel+0xf8>)
void read_accel(struct spi_slave_inst *const sensor, float vector[3]){
    c660:	b083      	sub	sp, #12
	spi_transceive_buffer_wait(&spi_main, read_x, read_buffer, length);
    c662:	ad01      	add	r5, sp, #4
void read_accel(struct spi_slave_inst *const sensor, float vector[3]){
    c664:	4689      	mov	r9, r1
	spi_select_slave(&spi_main, sensor, true);
    c666:	2201      	movs	r2, #1
    c668:	0001      	movs	r1, r0
    c66a:	4b38      	ldr	r3, [pc, #224]	; (c74c <read_accel+0xfc>)
    c66c:	0020      	movs	r0, r4
    c66e:	4798      	blx	r3
	spi_transceive_buffer_wait(&spi_main, read_x, read_buffer, length);
    c670:	4e37      	ldr	r6, [pc, #220]	; (c750 <read_accel+0x100>)
    c672:	002a      	movs	r2, r5
    c674:	2304      	movs	r3, #4
    c676:	4937      	ldr	r1, [pc, #220]	; (c754 <read_accel+0x104>)
    c678:	0020      	movs	r0, r4
    c67a:	47b0      	blx	r6
	spi_select_slave(&spi_main, sensor, false);
    c67c:	0039      	movs	r1, r7
    c67e:	2200      	movs	r2, #0
    c680:	0020      	movs	r0, r4
    c682:	4b32      	ldr	r3, [pc, #200]	; (c74c <read_accel+0xfc>)
    c684:	4798      	blx	r3
	spi_select_slave(&spi_main, sensor, true);
    c686:	0039      	movs	r1, r7
    c688:	2201      	movs	r2, #1
    c68a:	0020      	movs	r0, r4
    c68c:	4b2f      	ldr	r3, [pc, #188]	; (c74c <read_accel+0xfc>)
    c68e:	4798      	blx	r3
	spi_transceive_buffer_wait(&spi_main, read_y, read_buffer, length);
    c690:	002a      	movs	r2, r5
    c692:	2304      	movs	r3, #4
    c694:	4930      	ldr	r1, [pc, #192]	; (c758 <read_accel+0x108>)
    c696:	0020      	movs	r0, r4
    c698:	47b0      	blx	r6
	spi_select_slave(&spi_main, sensor, false);
    c69a:	0039      	movs	r1, r7
    c69c:	2200      	movs	r2, #0
    c69e:	0020      	movs	r0, r4
    c6a0:	4b2a      	ldr	r3, [pc, #168]	; (c74c <read_accel+0xfc>)
    c6a2:	4798      	blx	r3
	var16=var16<<8;
    c6a4:	786b      	ldrb	r3, [r5, #1]
	var16=var16+buffer[2];
    c6a6:	78a8      	ldrb	r0, [r5, #2]
	var16=var16<<8;
    c6a8:	021b      	lsls	r3, r3, #8
	var16=var16+buffer[2];
    c6aa:	18c0      	adds	r0, r0, r3
	result=var16;
    c6ac:	4b2b      	ldr	r3, [pc, #172]	; (c75c <read_accel+0x10c>)
    c6ae:	b200      	sxth	r0, r0
    c6b0:	469a      	mov	sl, r3
    c6b2:	4798      	blx	r3
	spi_transceive_buffer_wait(&spi_main, read_x, read_buffer, length);
    c6b4:	46b0      	mov	r8, r6
	spi_select_slave(&spi_main, sensor, true);
    c6b6:	0039      	movs	r1, r7
	result=var16;
    c6b8:	1c06      	adds	r6, r0, #0
	spi_select_slave(&spi_main, sensor, true);
    c6ba:	2201      	movs	r2, #1
    c6bc:	0020      	movs	r0, r4
    c6be:	4b23      	ldr	r3, [pc, #140]	; (c74c <read_accel+0xfc>)
    c6c0:	4798      	blx	r3
	spi_transceive_buffer_wait(&spi_main, read_z, read_buffer, length);
    c6c2:	002a      	movs	r2, r5
    c6c4:	2304      	movs	r3, #4
    c6c6:	4926      	ldr	r1, [pc, #152]	; (c760 <read_accel+0x110>)
    c6c8:	0020      	movs	r0, r4
    c6ca:	47c0      	blx	r8
	spi_select_slave(&spi_main, sensor, false);
    c6cc:	0039      	movs	r1, r7
    c6ce:	2200      	movs	r2, #0
    c6d0:	0020      	movs	r0, r4
    c6d2:	4b1e      	ldr	r3, [pc, #120]	; (c74c <read_accel+0xfc>)
    c6d4:	4798      	blx	r3
	var16=var16<<8;
    c6d6:	786b      	ldrb	r3, [r5, #1]
	var16=var16+buffer[2];
    c6d8:	78a8      	ldrb	r0, [r5, #2]
	var16=var16<<8;
    c6da:	021b      	lsls	r3, r3, #8
	var16=var16+buffer[2];
    c6dc:	18c0      	adds	r0, r0, r3
	result=var16;
    c6de:	b200      	sxth	r0, r0
    c6e0:	47d0      	blx	sl
	spi_select_slave(&spi_main, sensor, true);
    c6e2:	0039      	movs	r1, r7
	result=var16;
    c6e4:	4683      	mov	fp, r0
	spi_select_slave(&spi_main, sensor, true);
    c6e6:	2201      	movs	r2, #1
    c6e8:	0020      	movs	r0, r4
    c6ea:	4b18      	ldr	r3, [pc, #96]	; (c74c <read_accel+0xfc>)
    c6ec:	4798      	blx	r3
	spi_transceive_buffer_wait(&spi_main, read_status, read_buffer, length);
    c6ee:	002a      	movs	r2, r5
    c6f0:	2304      	movs	r3, #4
    c6f2:	491c      	ldr	r1, [pc, #112]	; (c764 <read_accel+0x114>)
    c6f4:	0020      	movs	r0, r4
    c6f6:	47c0      	blx	r8
	spi_select_slave(&spi_main, sensor, false);
    c6f8:	2200      	movs	r2, #0
    c6fa:	0039      	movs	r1, r7
    c6fc:	0020      	movs	r0, r4
    c6fe:	4b13      	ldr	r3, [pc, #76]	; (c74c <read_accel+0xfc>)
    c700:	4798      	blx	r3
	var16=var16<<8;
    c702:	786b      	ldrb	r3, [r5, #1]
	var16=var16+buffer[2];
    c704:	78a8      	ldrb	r0, [r5, #2]
	var16=var16<<8;
    c706:	021b      	lsls	r3, r3, #8
	var16=var16+buffer[2];
    c708:	18c0      	adds	r0, r0, r3
	result=var16;
    c70a:	b200      	sxth	r0, r0
    c70c:	47d0      	blx	sl
		tempV[i] = tempV[i]/a_coarse_gain;
    c70e:	4d16      	ldr	r5, [pc, #88]	; (c768 <read_accel+0x118>)
    c710:	4916      	ldr	r1, [pc, #88]	; (c76c <read_accel+0x11c>)
    c712:	47a8      	blx	r5
    c714:	4915      	ldr	r1, [pc, #84]	; (c76c <read_accel+0x11c>)
    c716:	1c04      	adds	r4, r0, #0
    c718:	4658      	mov	r0, fp
    c71a:	47a8      	blx	r5
	vector[0] = tempV[1];
    c71c:	464b      	mov	r3, r9
		tempV[i] = tempV[i]/a_coarse_gain;
    c71e:	4913      	ldr	r1, [pc, #76]	; (c76c <read_accel+0x11c>)
	vector[0] = tempV[1];
    c720:	6018      	str	r0, [r3, #0]
		tempV[i] = tempV[i]/a_coarse_gain;
    c722:	1c30      	adds	r0, r6, #0
    c724:	47a8      	blx	r5
	vector[1] = -1*tempV[0];
    c726:	2380      	movs	r3, #128	; 0x80
    c728:	061b      	lsls	r3, r3, #24
    c72a:	469c      	mov	ip, r3
    c72c:	464b      	mov	r3, r9
    c72e:	4460      	add	r0, ip
    c730:	6058      	str	r0, [r3, #4]
	vector[2] = -1*tempV[2];
    c732:	464b      	mov	r3, r9
    c734:	4464      	add	r4, ip
    c736:	609c      	str	r4, [r3, #8]
}
    c738:	b003      	add	sp, #12
    c73a:	bc3c      	pop	{r2, r3, r4, r5}
    c73c:	4690      	mov	r8, r2
    c73e:	4699      	mov	r9, r3
    c740:	46a2      	mov	sl, r4
    c742:	46ab      	mov	fp, r5
    c744:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c746:	46c0      	nop			; (mov r8, r8)
    c748:	20000fac 	.word	0x20000fac
    c74c:	00015a39 	.word	0x00015a39
    c750:	00015bc5 	.word	0x00015bc5
    c754:	200001b4 	.word	0x200001b4
    c758:	200001b8 	.word	0x200001b8
    c75c:	0001def1 	.word	0x0001def1
    c760:	200001bc 	.word	0x200001bc
    c764:	200001b0 	.word	0x200001b0
    c768:	0001d559 	.word	0x0001d559
    c76c:	459c4000 	.word	0x459c4000

0000c770 <setup_accel>:
void setup_accel(struct spi_slave_inst *const sensor){
    c770:	b5f0      	push	{r4, r5, r6, r7, lr}
    c772:	0006      	movs	r6, r0
	spi_select_slave(&spi_main, sensor, true);
    c774:	4c11      	ldr	r4, [pc, #68]	; (c7bc <setup_accel+0x4c>)
void setup_accel(struct spi_slave_inst *const sensor){
    c776:	b083      	sub	sp, #12
	spi_select_slave(&spi_main, sensor, true);
    c778:	4d11      	ldr	r5, [pc, #68]	; (c7c0 <setup_accel+0x50>)
    c77a:	0001      	movs	r1, r0
    c77c:	2201      	movs	r2, #1
    c77e:	0020      	movs	r0, r4
    c780:	47a8      	blx	r5
	spi_transceive_buffer_wait(&spi_main, sw_reset, read_buffer, 4);
    c782:	2304      	movs	r3, #4
    c784:	aa01      	add	r2, sp, #4
    c786:	4f0f      	ldr	r7, [pc, #60]	; (c7c4 <setup_accel+0x54>)
    c788:	490f      	ldr	r1, [pc, #60]	; (c7c8 <setup_accel+0x58>)
    c78a:	0020      	movs	r0, r4
    c78c:	47b8      	blx	r7
	spi_select_slave(&spi_main, sensor, false);
    c78e:	0031      	movs	r1, r6
    c790:	2200      	movs	r2, #0
    c792:	0020      	movs	r0, r4
    c794:	47a8      	blx	r5
	delay_ms(10);
    c796:	4b0d      	ldr	r3, [pc, #52]	; (c7cc <setup_accel+0x5c>)
    c798:	200a      	movs	r0, #10
    c79a:	4798      	blx	r3
	spi_select_slave(&spi_main, sensor, true);
    c79c:	0031      	movs	r1, r6
    c79e:	2201      	movs	r2, #1
    c7a0:	0020      	movs	r0, r4
    c7a2:	47a8      	blx	r5
	spi_transceive_buffer_wait(&spi_main, set_mode4, read_buffer, 4);
    c7a4:	2304      	movs	r3, #4
    c7a6:	aa01      	add	r2, sp, #4
    c7a8:	4909      	ldr	r1, [pc, #36]	; (c7d0 <setup_accel+0x60>)
    c7aa:	0020      	movs	r0, r4
    c7ac:	47b8      	blx	r7
	spi_select_slave(&spi_main, sensor, false);
    c7ae:	2200      	movs	r2, #0
    c7b0:	0031      	movs	r1, r6
    c7b2:	0020      	movs	r0, r4
    c7b4:	47a8      	blx	r5
}
    c7b6:	b003      	add	sp, #12
    c7b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c7ba:	46c0      	nop			; (mov r8, r8)
    c7bc:	20000fac 	.word	0x20000fac
    c7c0:	00015a39 	.word	0x00015a39
    c7c4:	00015bc5 	.word	0x00015bc5
    c7c8:	200001c4 	.word	0x200001c4
    c7cc:	000161e9 	.word	0x000161e9
    c7d0:	200001c0 	.word	0x200001c0

0000c7d4 <read_mag_double>:
uint8_t read_mag_double( float mag1[3],float mag2[3]){
    c7d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c7d6:	4645      	mov	r5, r8
    c7d8:	4657      	mov	r7, sl
    c7da:	464e      	mov	r6, r9
    c7dc:	46de      	mov	lr, fp
    c7de:	b5e0      	push	{r5, r6, r7, lr}
	slavePtr[0] = &slave_mag1;
    c7e0:	4b61      	ldr	r3, [pc, #388]	; (c968 <read_mag_double+0x194>)
uint8_t read_mag_double( float mag1[3],float mag2[3]){
    c7e2:	b08b      	sub	sp, #44	; 0x2c
	slavePtr[0] = &slave_mag1;
    c7e4:	9302      	str	r3, [sp, #8]
	slavePtr[1] = &slave_mag2;
    c7e6:	4b61      	ldr	r3, [pc, #388]	; (c96c <read_mag_double+0x198>)
	write_buffer[0]=0x00; //poll register
    c7e8:	466a      	mov	r2, sp
	slavePtr[1] = &slave_mag2;
    c7ea:	9303      	str	r3, [sp, #12]
	write_buffer[0]=0x00; //poll register
    c7ec:	2300      	movs	r3, #0
    c7ee:	7413      	strb	r3, [r2, #16]
	write_buffer[1]=0x70; //set to poll X,Y,Z	
    c7f0:	3370      	adds	r3, #112	; 0x70
    c7f2:	7453      	strb	r3, [r2, #17]
    c7f4:	4b5e      	ldr	r3, [pc, #376]	; (c970 <read_mag_double+0x19c>)
    c7f6:	2400      	movs	r4, #0
    c7f8:	4699      	mov	r9, r3
    c7fa:	4b5e      	ldr	r3, [pc, #376]	; (c974 <read_mag_double+0x1a0>)
    c7fc:	4d5e      	ldr	r5, [pc, #376]	; (c978 <read_mag_double+0x1a4>)
    c7fe:	469a      	mov	sl, r3
    c800:	4b5e      	ldr	r3, [pc, #376]	; (c97c <read_mag_double+0x1a8>)
	vecPtr[0] = mag1;
    c802:	9000      	str	r0, [sp, #0]
    c804:	4698      	mov	r8, r3
	vecPtr[1] = mag2;
    c806:	9101      	str	r1, [sp, #4]
		spi_select_slave(&spi_main, slavePtr[i], true);
    c808:	2208      	movs	r2, #8
    c80a:	466b      	mov	r3, sp
    c80c:	189b      	adds	r3, r3, r2
    c80e:	591e      	ldr	r6, [r3, r4]
    c810:	3a07      	subs	r2, #7
    c812:	0031      	movs	r1, r6
    c814:	0028      	movs	r0, r5
    c816:	47c8      	blx	r9
		delay_us(1);
    c818:	2001      	movs	r0, #1
    c81a:	47d0      	blx	sl
		spi_write_buffer_wait(&spi_main, write_buffer, 2);
    c81c:	2202      	movs	r2, #2
    c81e:	a904      	add	r1, sp, #16
    c820:	0028      	movs	r0, r5
    c822:	47c0      	blx	r8
    c824:	3404      	adds	r4, #4
		spi_select_slave(&spi_main, slavePtr[i], false);
    c826:	2200      	movs	r2, #0
    c828:	0031      	movs	r1, r6
    c82a:	0028      	movs	r0, r5
    c82c:	47c8      	blx	r9
	for (i=0;i<2;i++){
    c82e:	2c08      	cmp	r4, #8
    c830:	d1ea      	bne.n	c808 <read_mag_double+0x34>
	write_buffer[0]=0xB4;
    c832:	23b4      	movs	r3, #180	; 0xb4
    c834:	466a      	mov	r2, sp
    c836:	7413      	strb	r3, [r2, #16]
    c838:	2300      	movs	r3, #0
	counter1 = 0x00;
    c83a:	2400      	movs	r4, #0
	write_buffer[0]=0xB4;
    c83c:	469b      	mov	fp, r3
    c83e:	ae07      	add	r6, sp, #28
			delay_us(20);
    c840:	2014      	movs	r0, #20
    c842:	47d0      	blx	sl
			spi_select_slave(&spi_main, slavePtr[i], true);
    c844:	2208      	movs	r2, #8
    c846:	466b      	mov	r3, sp
    c848:	189b      	adds	r3, r3, r2
    c84a:	465a      	mov	r2, fp
    c84c:	589b      	ldr	r3, [r3, r2]
    c84e:	0028      	movs	r0, r5
    c850:	4698      	mov	r8, r3
    c852:	0019      	movs	r1, r3
    c854:	2201      	movs	r2, #1
    c856:	47c8      	blx	r9
			delay_us(1);
    c858:	2001      	movs	r0, #1
    c85a:	47d0      	blx	sl
			spi_transceive_buffer_wait(&spi_main, write_buffer, read_buffer, 2);
    c85c:	2302      	movs	r3, #2
    c85e:	0032      	movs	r2, r6
    c860:	a904      	add	r1, sp, #16
    c862:	0028      	movs	r0, r5
    c864:	4f46      	ldr	r7, [pc, #280]	; (c980 <read_mag_double+0x1ac>)
    c866:	47b8      	blx	r7
			spi_select_slave(&spi_main, slavePtr[i], false);
    c868:	2200      	movs	r2, #0
    c86a:	4641      	mov	r1, r8
    c86c:	0028      	movs	r0, r5
    c86e:	47c8      	blx	r9
			if (read_buffer[1] & 0x80){
    c870:	7873      	ldrb	r3, [r6, #1]
			counter1++;
    c872:	3401      	adds	r4, #1
    c874:	b2e4      	uxtb	r4, r4
			if (read_buffer[1] & 0x80){
    c876:	2b7f      	cmp	r3, #127	; 0x7f
    c878:	d801      	bhi.n	c87e <read_mag_double+0xaa>
			if (counter1>=0xFF){
    c87a:	2cff      	cmp	r4, #255	; 0xff
    c87c:	d1e0      	bne.n	c840 <read_mag_double+0x6c>
    c87e:	2304      	movs	r3, #4
    c880:	469c      	mov	ip, r3
    c882:	44e3      	add	fp, ip
	for (i=0;i<2;i++){
    c884:	465b      	mov	r3, fp
    c886:	2b08      	cmp	r3, #8
    c888:	d1da      	bne.n	c840 <read_mag_double+0x6c>
	write_buffer[0] = 0xA4;	
    c88a:	466a      	mov	r2, sp
    c88c:	339c      	adds	r3, #156	; 0x9c
    c88e:	7413      	strb	r3, [r2, #16]
    c890:	2300      	movs	r3, #0
    c892:	46a0      	mov	r8, r4
    c894:	001f      	movs	r7, r3
		spi_select_slave(&spi_main, slavePtr[i], true);
    c896:	2208      	movs	r2, #8
    c898:	466b      	mov	r3, sp
    c89a:	189b      	adds	r3, r3, r2
    c89c:	59db      	ldr	r3, [r3, r7]
    c89e:	3a07      	subs	r2, #7
    c8a0:	469b      	mov	fp, r3
    c8a2:	0019      	movs	r1, r3
    c8a4:	0028      	movs	r0, r5
    c8a6:	47c8      	blx	r9
		delay_us(1);		
    c8a8:	2001      	movs	r0, #1
    c8aa:	47d0      	blx	sl
		spi_transceive_buffer_wait(&spi_main, write_buffer, read_buffer, 10);
    c8ac:	230a      	movs	r3, #10
    c8ae:	0032      	movs	r2, r6
    c8b0:	a904      	add	r1, sp, #16
    c8b2:	4c33      	ldr	r4, [pc, #204]	; (c980 <read_mag_double+0x1ac>)
    c8b4:	0028      	movs	r0, r5
    c8b6:	47a0      	blx	r4
		spi_select_slave(&spi_main, slavePtr[i], false);
    c8b8:	2200      	movs	r2, #0
    c8ba:	4659      	mov	r1, fp
    c8bc:	0028      	movs	r0, r5
    c8be:	47c8      	blx	r9
		parse_mag_arr(&read_buffer[1], vecPtr[i]);
    c8c0:	466b      	mov	r3, sp
    c8c2:	59dc      	ldr	r4, [r3, r7]
		if(array[i*3] & 0x80){//negative number
    c8c4:	7873      	ldrb	r3, [r6, #1]
    c8c6:	b25a      	sxtb	r2, r3
    c8c8:	2a00      	cmp	r2, #0
    c8ca:	db43      	blt.n	c954 <read_mag_double+0x180>
		temp = 0x00;
    c8cc:	2000      	movs	r0, #0
		temp=temp+array[i*3];
    c8ce:	181b      	adds	r3, r3, r0
		temp=temp+array[i*3+1];
    c8d0:	78b0      	ldrb	r0, [r6, #2]
		temp=temp<<8;
    c8d2:	021b      	lsls	r3, r3, #8
		temp=temp+array[i*3+1];
    c8d4:	18c3      	adds	r3, r0, r3
		temp=temp+array[i*3+2];
    c8d6:	78f0      	ldrb	r0, [r6, #3]
		temp=temp<<8;
    c8d8:	021b      	lsls	r3, r3, #8
		temp=temp+array[i*3+2];
    c8da:	18c0      	adds	r0, r0, r3
		data[i] = temp;
    c8dc:	4b29      	ldr	r3, [pc, #164]	; (c984 <read_mag_double+0x1b0>)
    c8de:	4798      	blx	r3
		data[i] = data[i]/c_coarse_gain;
    c8e0:	4b29      	ldr	r3, [pc, #164]	; (c988 <read_mag_double+0x1b4>)
    c8e2:	492a      	ldr	r1, [pc, #168]	; (c98c <read_mag_double+0x1b8>)
    c8e4:	4798      	blx	r3
		if(array[i*3] & 0x80){//negative number
    c8e6:	7933      	ldrb	r3, [r6, #4]
		data[i] = data[i]/c_coarse_gain;
    c8e8:	6020      	str	r0, [r4, #0]
		if(array[i*3] & 0x80){//negative number
    c8ea:	b25a      	sxtb	r2, r3
    c8ec:	2a00      	cmp	r2, #0
    c8ee:	db37      	blt.n	c960 <read_mag_double+0x18c>
		temp = 0x00;
    c8f0:	2000      	movs	r0, #0
		temp=temp+array[i*3];
    c8f2:	181b      	adds	r3, r3, r0
		temp=temp+array[i*3+1];
    c8f4:	7970      	ldrb	r0, [r6, #5]
		temp=temp<<8;
    c8f6:	021b      	lsls	r3, r3, #8
		temp=temp+array[i*3+1];
    c8f8:	18c3      	adds	r3, r0, r3
		temp=temp+array[i*3+2];
    c8fa:	79b0      	ldrb	r0, [r6, #6]
		temp=temp<<8;
    c8fc:	021b      	lsls	r3, r3, #8
		temp=temp+array[i*3+2];
    c8fe:	18c0      	adds	r0, r0, r3
		data[i] = temp;
    c900:	4b20      	ldr	r3, [pc, #128]	; (c984 <read_mag_double+0x1b0>)
    c902:	4798      	blx	r3
		data[i] = data[i]/c_coarse_gain;
    c904:	4b20      	ldr	r3, [pc, #128]	; (c988 <read_mag_double+0x1b4>)
    c906:	4921      	ldr	r1, [pc, #132]	; (c98c <read_mag_double+0x1b8>)
    c908:	4798      	blx	r3
		if(array[i*3] & 0x80){//negative number
    c90a:	79f3      	ldrb	r3, [r6, #7]
		data[i] = data[i]/c_coarse_gain;
    c90c:	6060      	str	r0, [r4, #4]
		if(array[i*3] & 0x80){//negative number
    c90e:	b25a      	sxtb	r2, r3
    c910:	2a00      	cmp	r2, #0
    c912:	db22      	blt.n	c95a <read_mag_double+0x186>
		temp = 0x00;
    c914:	2000      	movs	r0, #0
		temp=temp+array[i*3];
    c916:	181b      	adds	r3, r3, r0
		temp=temp+array[i*3+1];
    c918:	7a30      	ldrb	r0, [r6, #8]
		temp=temp<<8;
    c91a:	021b      	lsls	r3, r3, #8
		temp=temp+array[i*3+1];
    c91c:	18c3      	adds	r3, r0, r3
		temp=temp+array[i*3+2];
    c91e:	7a70      	ldrb	r0, [r6, #9]
		temp=temp<<8;
    c920:	021b      	lsls	r3, r3, #8
		temp=temp+array[i*3+2];
    c922:	18c0      	adds	r0, r0, r3
		data[i] = temp;
    c924:	4b17      	ldr	r3, [pc, #92]	; (c984 <read_mag_double+0x1b0>)
    c926:	4798      	blx	r3
			data[i] = -1*data[i];
    c928:	2380      	movs	r3, #128	; 0x80
    c92a:	061b      	lsls	r3, r3, #24
    c92c:	469c      	mov	ip, r3
		data[i] = data[i]/c_coarse_gain;
    c92e:	4917      	ldr	r1, [pc, #92]	; (c98c <read_mag_double+0x1b8>)
			data[i] = -1*data[i];
    c930:	4460      	add	r0, ip
		data[i] = data[i]/c_coarse_gain;
    c932:	4b15      	ldr	r3, [pc, #84]	; (c988 <read_mag_double+0x1b4>)
    c934:	4798      	blx	r3
    c936:	3704      	adds	r7, #4
    c938:	60a0      	str	r0, [r4, #8]
	for (i=0;i<2; i++){
    c93a:	2f08      	cmp	r7, #8
    c93c:	d1ab      	bne.n	c896 <read_mag_double+0xc2>
    c93e:	4644      	mov	r4, r8
}
    c940:	4640      	mov	r0, r8
	debug_ct1 = counter1;
    c942:	4b13      	ldr	r3, [pc, #76]	; (c990 <read_mag_double+0x1bc>)
    c944:	601c      	str	r4, [r3, #0]
}
    c946:	b00b      	add	sp, #44	; 0x2c
    c948:	bc3c      	pop	{r2, r3, r4, r5}
    c94a:	4690      	mov	r8, r2
    c94c:	4699      	mov	r9, r3
    c94e:	46a2      	mov	sl, r4
    c950:	46ab      	mov	fp, r5
    c952:	bdf0      	pop	{r4, r5, r6, r7, pc}
			temp=temp<<8;
    c954:	20ff      	movs	r0, #255	; 0xff
    c956:	0200      	lsls	r0, r0, #8
    c958:	e7b9      	b.n	c8ce <read_mag_double+0xfa>
    c95a:	20ff      	movs	r0, #255	; 0xff
    c95c:	0200      	lsls	r0, r0, #8
    c95e:	e7da      	b.n	c916 <read_mag_double+0x142>
    c960:	20ff      	movs	r0, #255	; 0xff
    c962:	0200      	lsls	r0, r0, #8
    c964:	e7c5      	b.n	c8f2 <read_mag_double+0x11e>
    c966:	46c0      	nop			; (mov r8, r8)
    c968:	20000fe4 	.word	0x20000fe4
    c96c:	20000f68 	.word	0x20000f68
    c970:	00015a39 	.word	0x00015a39
    c974:	000161b9 	.word	0x000161b9
    c978:	20000fac 	.word	0x20000fac
    c97c:	00015b0d 	.word	0x00015b0d
    c980:	00015bc5 	.word	0x00015bc5
    c984:	0001def1 	.word	0x0001def1
    c988:	0001d559 	.word	0x0001d559
    c98c:	461c4000 	.word	0x461c4000
    c990:	20003168 	.word	0x20003168

0000c994 <quick_measurement>:
void quick_measurement(struct MEASUREMENT *meas_inst){
    c994:	b5f0      	push	{r4, r5, r6, r7, lr}
	read_accel(&slave_acc1, meas_inst->a1Raw);
    c996:	0005      	movs	r5, r0
void quick_measurement(struct MEASUREMENT *meas_inst){
    c998:	46c6      	mov	lr, r8
	read_accel(&slave_acc1, meas_inst->a1Raw);
    c99a:	3524      	adds	r5, #36	; 0x24
void quick_measurement(struct MEASUREMENT *meas_inst){
    c99c:	b500      	push	{lr}
    c99e:	0004      	movs	r4, r0
	read_accel(&slave_acc1, meas_inst->a1Raw);
    c9a0:	0029      	movs	r1, r5
    c9a2:	4e16      	ldr	r6, [pc, #88]	; (c9fc <quick_measurement+0x68>)
    c9a4:	4816      	ldr	r0, [pc, #88]	; (ca00 <quick_measurement+0x6c>)
    c9a6:	47b0      	blx	r6
	read_accel(&slave_acc2, meas_inst->a2Raw);
    c9a8:	2330      	movs	r3, #48	; 0x30
    c9aa:	4698      	mov	r8, r3
    c9ac:	44a0      	add	r8, r4
    c9ae:	4641      	mov	r1, r8
    c9b0:	4814      	ldr	r0, [pc, #80]	; (ca04 <quick_measurement+0x70>)
    c9b2:	47b0      	blx	r6
	read_mag_double(meas_inst->m1Raw, meas_inst->m2Raw);
    c9b4:	0027      	movs	r7, r4
    c9b6:	0026      	movs	r6, r4
    c9b8:	373c      	adds	r7, #60	; 0x3c
    c9ba:	3648      	adds	r6, #72	; 0x48
    c9bc:	4b12      	ldr	r3, [pc, #72]	; (ca08 <quick_measurement+0x74>)
    c9be:	0031      	movs	r1, r6
    c9c0:	0038      	movs	r0, r7
    c9c2:	4798      	blx	r3
	cal_apply_cal(meas_inst->a1Raw, meas_inst->a1Cal, &a1_calst);
    c9c4:	0021      	movs	r1, r4
    c9c6:	0028      	movs	r0, r5
    c9c8:	3154      	adds	r1, #84	; 0x54
    c9ca:	4d10      	ldr	r5, [pc, #64]	; (ca0c <quick_measurement+0x78>)
    c9cc:	4a10      	ldr	r2, [pc, #64]	; (ca10 <quick_measurement+0x7c>)
    c9ce:	47a8      	blx	r5
	cal_apply_cal(meas_inst->a2Raw, meas_inst->a2Cal, &a2_calst);
    c9d0:	0021      	movs	r1, r4
    c9d2:	4640      	mov	r0, r8
    c9d4:	3160      	adds	r1, #96	; 0x60
    c9d6:	4a0f      	ldr	r2, [pc, #60]	; (ca14 <quick_measurement+0x80>)
    c9d8:	47a8      	blx	r5
	cal_apply_cal(meas_inst->m1Raw, meas_inst->m1Cal, &m1_calst);
    c9da:	0021      	movs	r1, r4
    c9dc:	0038      	movs	r0, r7
    c9de:	316c      	adds	r1, #108	; 0x6c
    c9e0:	4a0d      	ldr	r2, [pc, #52]	; (ca18 <quick_measurement+0x84>)
    c9e2:	47a8      	blx	r5
	cal_apply_cal(meas_inst->m2Raw, meas_inst->m2Cal, &m2_calst);
    c9e4:	0021      	movs	r1, r4
    c9e6:	0030      	movs	r0, r6
    c9e8:	3178      	adds	r1, #120	; 0x78
    c9ea:	4a0c      	ldr	r2, [pc, #48]	; (ca1c <quick_measurement+0x88>)
    c9ec:	47a8      	blx	r5
	calc_orientation(meas_inst);
    c9ee:	0020      	movs	r0, r4
    c9f0:	4b0b      	ldr	r3, [pc, #44]	; (ca20 <quick_measurement+0x8c>)
    c9f2:	4798      	blx	r3
}
    c9f4:	bc04      	pop	{r2}
    c9f6:	4690      	mov	r8, r2
    c9f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c9fa:	46c0      	nop			; (mov r8, r8)
    c9fc:	0000c651 	.word	0x0000c651
    ca00:	20000fe0 	.word	0x20000fe0
    ca04:	20000f70 	.word	0x20000f70
    ca08:	0000c7d5 	.word	0x0000c7d5
    ca0c:	000118dd 	.word	0x000118dd
    ca10:	200055d0 	.word	0x200055d0
    ca14:	2000550c 	.word	0x2000550c
    ca18:	200054b0 	.word	0x200054b0
    ca1c:	20003fe0 	.word	0x20003fe0
    ca20:	000093c9 	.word	0x000093c9

0000ca24 <setup_mag>:
void setup_mag(struct spi_slave_inst *const sensor){
    ca24:	b5f0      	push	{r4, r5, r6, r7, lr}
    ca26:	46ce      	mov	lr, r9
    ca28:	4647      	mov	r7, r8
    ca2a:	b580      	push	{r7, lr}
	spi_select_slave(&spi_main, sensor, true);
    ca2c:	4c31      	ldr	r4, [pc, #196]	; (caf4 <setup_mag+0xd0>)
void setup_mag(struct spi_slave_inst *const sensor){
    ca2e:	b083      	sub	sp, #12
    ca30:	0006      	movs	r6, r0
	spi_select_slave(&spi_main, sensor, true);
    ca32:	4d31      	ldr	r5, [pc, #196]	; (caf8 <setup_mag+0xd4>)
    ca34:	0001      	movs	r1, r0
    ca36:	2201      	movs	r2, #1
    ca38:	0020      	movs	r0, r4
    ca3a:	47a8      	blx	r5
	write_buffer[0]=0x04;//location of first write count register
    ca3c:	466a      	mov	r2, sp
    ca3e:	2304      	movs	r3, #4
    ca40:	7013      	strb	r3, [r2, #0]
	write_buffer[1]=cycle_count1;
    ca42:	4b2e      	ldr	r3, [pc, #184]	; (cafc <setup_mag+0xd8>)
	write_buffer[2]=cycle_count2;
    ca44:	4669      	mov	r1, sp
	write_buffer[1]=cycle_count1;
    ca46:	781a      	ldrb	r2, [r3, #0]
    ca48:	466b      	mov	r3, sp
    ca4a:	705a      	strb	r2, [r3, #1]
	write_buffer[2]=cycle_count2;
    ca4c:	4b2c      	ldr	r3, [pc, #176]	; (cb00 <setup_mag+0xdc>)
	spi_write_buffer_wait(&spi_main, write_buffer, 7);
    ca4e:	4f2d      	ldr	r7, [pc, #180]	; (cb04 <setup_mag+0xe0>)
	write_buffer[2]=cycle_count2;
    ca50:	781b      	ldrb	r3, [r3, #0]
	write_buffer[3]=cycle_count1;
    ca52:	70ca      	strb	r2, [r1, #3]
	write_buffer[5]=cycle_count1;
    ca54:	714a      	strb	r2, [r1, #5]
	spi_write_buffer_wait(&spi_main, write_buffer, 7);
    ca56:	0020      	movs	r0, r4
    ca58:	2207      	movs	r2, #7
	write_buffer[2]=cycle_count2;
    ca5a:	708b      	strb	r3, [r1, #2]
	write_buffer[4]=cycle_count2;
    ca5c:	710b      	strb	r3, [r1, #4]
	write_buffer[6]=cycle_count2;
    ca5e:	718b      	strb	r3, [r1, #6]
	spi_write_buffer_wait(&spi_main, write_buffer, 7);
    ca60:	47b8      	blx	r7
	spi_select_slave(&spi_main, sensor, false);
    ca62:	0031      	movs	r1, r6
    ca64:	2200      	movs	r2, #0
    ca66:	0020      	movs	r0, r4
    ca68:	47a8      	blx	r5
	delay_ms(10);
    ca6a:	200a      	movs	r0, #10
    ca6c:	4b26      	ldr	r3, [pc, #152]	; (cb08 <setup_mag+0xe4>)
    ca6e:	4798      	blx	r3
	write_buffer[0]=0x01;//location of CRM register
    ca70:	466a      	mov	r2, sp
    ca72:	2301      	movs	r3, #1
    ca74:	7013      	strb	r3, [r2, #0]
	write_buffer[1]=0x00;
    ca76:	2300      	movs	r3, #0
    ca78:	4699      	mov	r9, r3
    ca7a:	466b      	mov	r3, sp
    ca7c:	464a      	mov	r2, r9
	spi_select_slave(&spi_main, sensor, true);
    ca7e:	0031      	movs	r1, r6
	write_buffer[1]=0x00;
    ca80:	705a      	strb	r2, [r3, #1]
	spi_select_slave(&spi_main, sensor, true);
    ca82:	0020      	movs	r0, r4
    ca84:	2201      	movs	r2, #1
    ca86:	47a8      	blx	r5
	spi_write_buffer_wait(&spi_main, write_buffer, 2);
    ca88:	4669      	mov	r1, sp
    ca8a:	2202      	movs	r2, #2
    ca8c:	0020      	movs	r0, r4
    ca8e:	47b8      	blx	r7
	spi_select_slave(&spi_main, sensor, false);
    ca90:	0031      	movs	r1, r6
    ca92:	2200      	movs	r2, #0
    ca94:	0020      	movs	r0, r4
    ca96:	47a8      	blx	r5
	delay_us(1);
    ca98:	4b1c      	ldr	r3, [pc, #112]	; (cb0c <setup_mag+0xe8>)
    ca9a:	2001      	movs	r0, #1
    ca9c:	4698      	mov	r8, r3
    ca9e:	4798      	blx	r3
	write_buffer[0]=0x33;//location of BIST register
    caa0:	466a      	mov	r2, sp
    caa2:	2333      	movs	r3, #51	; 0x33
    caa4:	7013      	strb	r3, [r2, #0]
	write_buffer[1]=0x00;	//default value
    caa6:	466b      	mov	r3, sp
    caa8:	464a      	mov	r2, r9
	spi_select_slave(&spi_main, sensor, true);
    caaa:	0031      	movs	r1, r6
	write_buffer[1]=0x00;	//default value
    caac:	705a      	strb	r2, [r3, #1]
	spi_select_slave(&spi_main, sensor, true);
    caae:	0020      	movs	r0, r4
    cab0:	2201      	movs	r2, #1
    cab2:	47a8      	blx	r5
	spi_write_buffer_wait(&spi_main, write_buffer, 2);
    cab4:	4669      	mov	r1, sp
    cab6:	2202      	movs	r2, #2
    cab8:	0020      	movs	r0, r4
    caba:	47b8      	blx	r7
	spi_select_slave(&spi_main, sensor, false);
    cabc:	0031      	movs	r1, r6
    cabe:	2200      	movs	r2, #0
    cac0:	0020      	movs	r0, r4
    cac2:	47a8      	blx	r5
	delay_us(1);
    cac4:	2001      	movs	r0, #1
    cac6:	47c0      	blx	r8
	write_buffer[0]=0x35;//location of HSHAKE register
    cac8:	466a      	mov	r2, sp
    caca:	2335      	movs	r3, #53	; 0x35
    cacc:	7013      	strb	r3, [r2, #0]
	write_buffer[1]=0x1B;//default value
    cace:	3b1a      	subs	r3, #26
    cad0:	7053      	strb	r3, [r2, #1]
	spi_select_slave(&spi_main, sensor, true);
    cad2:	0031      	movs	r1, r6
    cad4:	2201      	movs	r2, #1
    cad6:	0020      	movs	r0, r4
    cad8:	47a8      	blx	r5
	spi_write_buffer_wait(&spi_main, write_buffer, 2);
    cada:	4669      	mov	r1, sp
    cadc:	2202      	movs	r2, #2
    cade:	0020      	movs	r0, r4
    cae0:	47b8      	blx	r7
	spi_select_slave(&spi_main, sensor, false);
    cae2:	2200      	movs	r2, #0
    cae4:	0031      	movs	r1, r6
    cae6:	0020      	movs	r0, r4
    cae8:	47a8      	blx	r5
}
    caea:	b003      	add	sp, #12
    caec:	bc0c      	pop	{r2, r3}
    caee:	4690      	mov	r8, r2
    caf0:	4699      	mov	r9, r3
    caf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    caf4:	20000fac 	.word	0x20000fac
    caf8:	00015a39 	.word	0x00015a39
    cafc:	200001ad 	.word	0x200001ad
    cb00:	20000e6f 	.word	0x20000e6f
    cb04:	00015b0d 	.word	0x00015b0d
    cb08:	000161e9 	.word	0x000161e9
    cb0c:	000161b9 	.word	0x000161b9

0000cb10 <adjustErrorSensitivity>:
void adjustErrorSensitivity(void){
    cb10:	b570      	push	{r4, r5, r6, lr}
	options.errorSensitivity = options.errorSensitivity+STEP_ERROR_SENSITIVITY;
    cb12:	4c0a      	ldr	r4, [pc, #40]	; (cb3c <adjustErrorSensitivity+0x2c>)
    cb14:	4b0a      	ldr	r3, [pc, #40]	; (cb40 <adjustErrorSensitivity+0x30>)
    cb16:	68e0      	ldr	r0, [r4, #12]
    cb18:	4798      	blx	r3
    cb1a:	4a0a      	ldr	r2, [pc, #40]	; (cb44 <adjustErrorSensitivity+0x34>)
    cb1c:	4b0a      	ldr	r3, [pc, #40]	; (cb48 <adjustErrorSensitivity+0x38>)
    cb1e:	4d0b      	ldr	r5, [pc, #44]	; (cb4c <adjustErrorSensitivity+0x3c>)
    cb20:	47a8      	blx	r5
    cb22:	4b0b      	ldr	r3, [pc, #44]	; (cb50 <adjustErrorSensitivity+0x40>)
    cb24:	4798      	blx	r3
	if (options.errorSensitivity>MAX_ERROR_SENSITIVITY){
    cb26:	490b      	ldr	r1, [pc, #44]	; (cb54 <adjustErrorSensitivity+0x44>)
    cb28:	4b0b      	ldr	r3, [pc, #44]	; (cb58 <adjustErrorSensitivity+0x48>)
	options.errorSensitivity = options.errorSensitivity+STEP_ERROR_SENSITIVITY;
    cb2a:	1c05      	adds	r5, r0, #0
	if (options.errorSensitivity>MAX_ERROR_SENSITIVITY){
    cb2c:	4798      	blx	r3
    cb2e:	2800      	cmp	r0, #0
    cb30:	d002      	beq.n	cb38 <adjustErrorSensitivity+0x28>
		options.errorSensitivity = STEP_ERROR_SENSITIVITY;
    cb32:	4b0a      	ldr	r3, [pc, #40]	; (cb5c <adjustErrorSensitivity+0x4c>)
    cb34:	60e3      	str	r3, [r4, #12]
}
    cb36:	bd70      	pop	{r4, r5, r6, pc}
	options.errorSensitivity = options.errorSensitivity+STEP_ERROR_SENSITIVITY;
    cb38:	60e5      	str	r5, [r4, #12]
    cb3a:	e7fc      	b.n	cb36 <adjustErrorSensitivity+0x26>
    cb3c:	2000332c 	.word	0x2000332c
    cb40:	0001fb6d 	.word	0x0001fb6d
    cb44:	9999999a 	.word	0x9999999a
    cb48:	3fc99999 	.word	0x3fc99999
    cb4c:	0001e01d 	.word	0x0001e01d
    cb50:	0001fc11 	.word	0x0001fc11
    cb54:	40400000 	.word	0x40400000
    cb58:	0001d0d1 	.word	0x0001d0d1
    cb5c:	3e4ccccd 	.word	0x3e4ccccd

0000cb60 <error_check>:
		error_incremented = false;
	}
	return error_incremented;
}

void error_check(struct MEASUREMENT *meas_inst){
    cb60:	b5f0      	push	{r4, r5, r6, r7, lr}
    cb62:	46de      	mov	lr, fp
    cb64:	4657      	mov	r7, sl
    cb66:	464e      	mov	r6, r9
    cb68:	4645      	mov	r5, r8
	comp_err_limit  = errlim_mag*max(cal_report.mag_stdev_m1, cal_report.mag_stdev_m2);
	
	accel_err_limit = 0.5;
	comp_err_limit  = 0.5;
	
	magA1 = calc_magnitude(meas_inst->a1Cal);
    cb6a:	2354      	movs	r3, #84	; 0x54
void error_check(struct MEASUREMENT *meas_inst){
    cb6c:	4680      	mov	r8, r0
    cb6e:	b5e0      	push	{r5, r6, r7, lr}
	magA1 = calc_magnitude(meas_inst->a1Cal);
    cb70:	4443      	add	r3, r8
void error_check(struct MEASUREMENT *meas_inst){
    cb72:	b097      	sub	sp, #92	; 0x5c
	magA1 = calc_magnitude(meas_inst->a1Cal);
    cb74:	9306      	str	r3, [sp, #24]
	magnitude = sqrt(pow(xyz[0],2)+pow(xyz[1],2)+pow(xyz[2],2));
    cb76:	4be5      	ldr	r3, [pc, #916]	; (cf0c <error_check+0x3ac>)
    cb78:	6d40      	ldr	r0, [r0, #84]	; 0x54
    cb7a:	469b      	mov	fp, r3
    cb7c:	47d8      	blx	fp
    cb7e:	4643      	mov	r3, r8
    cb80:	0006      	movs	r6, r0
    cb82:	6d98      	ldr	r0, [r3, #88]	; 0x58
    cb84:	000f      	movs	r7, r1
    cb86:	47d8      	blx	fp
    cb88:	4643      	mov	r3, r8
    cb8a:	0004      	movs	r4, r0
    cb8c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
    cb8e:	000d      	movs	r5, r1
    cb90:	47d8      	blx	fp
    cb92:	0022      	movs	r2, r4
    cb94:	9002      	str	r0, [sp, #8]
    cb96:	9103      	str	r1, [sp, #12]
    cb98:	002b      	movs	r3, r5
    cb9a:	0020      	movs	r0, r4
    cb9c:	0029      	movs	r1, r5
    cb9e:	4cdc      	ldr	r4, [pc, #880]	; (cf10 <error_check+0x3b0>)
    cba0:	47a0      	blx	r4
    cba2:	0032      	movs	r2, r6
    cba4:	0004      	movs	r4, r0
    cba6:	000d      	movs	r5, r1
    cba8:	003b      	movs	r3, r7
    cbaa:	0030      	movs	r0, r6
    cbac:	0039      	movs	r1, r7
    cbae:	4ed8      	ldr	r6, [pc, #864]	; (cf10 <error_check+0x3b0>)
    cbb0:	47b0      	blx	r6
    cbb2:	000b      	movs	r3, r1
    cbb4:	49d7      	ldr	r1, [pc, #860]	; (cf14 <error_check+0x3b4>)
    cbb6:	0002      	movs	r2, r0
    cbb8:	4689      	mov	r9, r1
    cbba:	0020      	movs	r0, r4
    cbbc:	0029      	movs	r1, r5
    cbbe:	47c8      	blx	r9
    cbc0:	0004      	movs	r4, r0
    cbc2:	000d      	movs	r5, r1
    cbc4:	9802      	ldr	r0, [sp, #8]
    cbc6:	9903      	ldr	r1, [sp, #12]
    cbc8:	0002      	movs	r2, r0
    cbca:	000b      	movs	r3, r1
    cbcc:	47b0      	blx	r6
    cbce:	0002      	movs	r2, r0
    cbd0:	000b      	movs	r3, r1
    cbd2:	0020      	movs	r0, r4
    cbd4:	0029      	movs	r1, r5
    cbd6:	47c8      	blx	r9
    cbd8:	4bcf      	ldr	r3, [pc, #828]	; (cf18 <error_check+0x3b8>)
    cbda:	469a      	mov	sl, r3
    cbdc:	4798      	blx	r3
    cbde:	4bcf      	ldr	r3, [pc, #828]	; (cf1c <error_check+0x3bc>)
    cbe0:	4798      	blx	r3
	magA2 = calc_magnitude(meas_inst->a2Cal);
    cbe2:	2360      	movs	r3, #96	; 0x60
    cbe4:	4443      	add	r3, r8
    cbe6:	9307      	str	r3, [sp, #28]
	magnitude = sqrt(pow(xyz[0],2)+pow(xyz[1],2)+pow(xyz[2],2));
    cbe8:	4643      	mov	r3, r8
    cbea:	9005      	str	r0, [sp, #20]
    cbec:	6e18      	ldr	r0, [r3, #96]	; 0x60
    cbee:	47d8      	blx	fp
    cbf0:	4643      	mov	r3, r8
    cbf2:	0004      	movs	r4, r0
    cbf4:	6e58      	ldr	r0, [r3, #100]	; 0x64
    cbf6:	000d      	movs	r5, r1
    cbf8:	47d8      	blx	fp
    cbfa:	4643      	mov	r3, r8
    cbfc:	0006      	movs	r6, r0
    cbfe:	6e98      	ldr	r0, [r3, #104]	; 0x68
    cc00:	000f      	movs	r7, r1
    cc02:	47d8      	blx	fp
    cc04:	0022      	movs	r2, r4
    cc06:	9002      	str	r0, [sp, #8]
    cc08:	9103      	str	r1, [sp, #12]
    cc0a:	002b      	movs	r3, r5
    cc0c:	0020      	movs	r0, r4
    cc0e:	0029      	movs	r1, r5
    cc10:	4cbf      	ldr	r4, [pc, #764]	; (cf10 <error_check+0x3b0>)
    cc12:	47a0      	blx	r4
    cc14:	0032      	movs	r2, r6
    cc16:	0004      	movs	r4, r0
    cc18:	000d      	movs	r5, r1
    cc1a:	003b      	movs	r3, r7
    cc1c:	0030      	movs	r0, r6
    cc1e:	0039      	movs	r1, r7
    cc20:	4ebb      	ldr	r6, [pc, #748]	; (cf10 <error_check+0x3b0>)
    cc22:	47b0      	blx	r6
    cc24:	0002      	movs	r2, r0
    cc26:	000b      	movs	r3, r1
    cc28:	0020      	movs	r0, r4
    cc2a:	0029      	movs	r1, r5
    cc2c:	47c8      	blx	r9
    cc2e:	0004      	movs	r4, r0
    cc30:	000d      	movs	r5, r1
    cc32:	9802      	ldr	r0, [sp, #8]
    cc34:	9903      	ldr	r1, [sp, #12]
    cc36:	0002      	movs	r2, r0
    cc38:	000b      	movs	r3, r1
    cc3a:	47b0      	blx	r6
    cc3c:	0002      	movs	r2, r0
    cc3e:	000b      	movs	r3, r1
    cc40:	0020      	movs	r0, r4
    cc42:	0029      	movs	r1, r5
    cc44:	47c8      	blx	r9
    cc46:	47d0      	blx	sl
    cc48:	4bb4      	ldr	r3, [pc, #720]	; (cf1c <error_check+0x3bc>)
    cc4a:	4798      	blx	r3
	magM1 = calc_magnitude(meas_inst->m1Cal);
    cc4c:	236c      	movs	r3, #108	; 0x6c
    cc4e:	4443      	add	r3, r8
    cc50:	9308      	str	r3, [sp, #32]
	magnitude = sqrt(pow(xyz[0],2)+pow(xyz[1],2)+pow(xyz[2],2));
    cc52:	4643      	mov	r3, r8
    cc54:	9004      	str	r0, [sp, #16]
    cc56:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    cc58:	47d8      	blx	fp
    cc5a:	4643      	mov	r3, r8
    cc5c:	0006      	movs	r6, r0
    cc5e:	6f18      	ldr	r0, [r3, #112]	; 0x70
    cc60:	000f      	movs	r7, r1
    cc62:	47d8      	blx	fp
    cc64:	4643      	mov	r3, r8
    cc66:	0004      	movs	r4, r0
    cc68:	6f58      	ldr	r0, [r3, #116]	; 0x74
    cc6a:	000d      	movs	r5, r1
    cc6c:	47d8      	blx	fp
    cc6e:	0022      	movs	r2, r4
    cc70:	9002      	str	r0, [sp, #8]
    cc72:	9103      	str	r1, [sp, #12]
    cc74:	002b      	movs	r3, r5
    cc76:	0020      	movs	r0, r4
    cc78:	0029      	movs	r1, r5
    cc7a:	4ca5      	ldr	r4, [pc, #660]	; (cf10 <error_check+0x3b0>)
    cc7c:	47a0      	blx	r4
    cc7e:	0032      	movs	r2, r6
    cc80:	0004      	movs	r4, r0
    cc82:	000d      	movs	r5, r1
    cc84:	003b      	movs	r3, r7
    cc86:	0030      	movs	r0, r6
    cc88:	0039      	movs	r1, r7
    cc8a:	4ea1      	ldr	r6, [pc, #644]	; (cf10 <error_check+0x3b0>)
    cc8c:	47b0      	blx	r6
    cc8e:	0002      	movs	r2, r0
    cc90:	000b      	movs	r3, r1
    cc92:	0020      	movs	r0, r4
    cc94:	0029      	movs	r1, r5
    cc96:	47c8      	blx	r9
    cc98:	0004      	movs	r4, r0
    cc9a:	000d      	movs	r5, r1
    cc9c:	9802      	ldr	r0, [sp, #8]
    cc9e:	9903      	ldr	r1, [sp, #12]
    cca0:	0002      	movs	r2, r0
    cca2:	000b      	movs	r3, r1
    cca4:	47b0      	blx	r6
    cca6:	0002      	movs	r2, r0
    cca8:	000b      	movs	r3, r1
    ccaa:	0020      	movs	r0, r4
    ccac:	0029      	movs	r1, r5
    ccae:	47c8      	blx	r9
    ccb0:	47d0      	blx	sl
    ccb2:	4b9a      	ldr	r3, [pc, #616]	; (cf1c <error_check+0x3bc>)
    ccb4:	4798      	blx	r3
	magM2 = calc_magnitude(meas_inst->m2Cal);
    ccb6:	2378      	movs	r3, #120	; 0x78
    ccb8:	4443      	add	r3, r8
    ccba:	9309      	str	r3, [sp, #36]	; 0x24
	magnitude = sqrt(pow(xyz[0],2)+pow(xyz[1],2)+pow(xyz[2],2));
    ccbc:	4643      	mov	r3, r8
    ccbe:	9002      	str	r0, [sp, #8]
    ccc0:	6f98      	ldr	r0, [r3, #120]	; 0x78
    ccc2:	47d8      	blx	fp
    ccc4:	4643      	mov	r3, r8
    ccc6:	0004      	movs	r4, r0
    ccc8:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    ccca:	000d      	movs	r5, r1
    cccc:	47d8      	blx	fp
    ccce:	2380      	movs	r3, #128	; 0x80
    ccd0:	4642      	mov	r2, r8
    ccd2:	0006      	movs	r6, r0
    ccd4:	58d0      	ldr	r0, [r2, r3]
    ccd6:	000f      	movs	r7, r1
    ccd8:	47d8      	blx	fp
    ccda:	0022      	movs	r2, r4
    ccdc:	900a      	str	r0, [sp, #40]	; 0x28
    ccde:	910b      	str	r1, [sp, #44]	; 0x2c
    cce0:	002b      	movs	r3, r5
    cce2:	0020      	movs	r0, r4
    cce4:	0029      	movs	r1, r5
    cce6:	4c8a      	ldr	r4, [pc, #552]	; (cf10 <error_check+0x3b0>)
    cce8:	47a0      	blx	r4
    ccea:	0032      	movs	r2, r6
    ccec:	0004      	movs	r4, r0
    ccee:	000d      	movs	r5, r1
    ccf0:	003b      	movs	r3, r7
    ccf2:	0030      	movs	r0, r6
    ccf4:	0039      	movs	r1, r7
    ccf6:	4e86      	ldr	r6, [pc, #536]	; (cf10 <error_check+0x3b0>)
    ccf8:	47b0      	blx	r6
    ccfa:	0002      	movs	r2, r0
    ccfc:	000b      	movs	r3, r1
    ccfe:	0020      	movs	r0, r4
    cd00:	0029      	movs	r1, r5
    cd02:	47c8      	blx	r9
    cd04:	0004      	movs	r4, r0
    cd06:	000d      	movs	r5, r1
    cd08:	980a      	ldr	r0, [sp, #40]	; 0x28
    cd0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    cd0c:	0002      	movs	r2, r0
    cd0e:	000b      	movs	r3, r1
    cd10:	47b0      	blx	r6
    cd12:	0002      	movs	r2, r0
    cd14:	000b      	movs	r3, r1
    cd16:	0020      	movs	r0, r4
    cd18:	0029      	movs	r1, r5
    cd1a:	47c8      	blx	r9
    cd1c:	47d0      	blx	sl
    cd1e:	4b7f      	ldr	r3, [pc, #508]	; (cf1c <error_check+0x3bc>)
    cd20:	4798      	blx	r3
		
	//  Magnitude Check accelerometer 1
	//mag = calc_magnitude(meas_inst->a1xyz);
	delta = fabs(magA1-1);
    cd22:	21fe      	movs	r1, #254	; 0xfe
    cd24:	9c05      	ldr	r4, [sp, #20]
    cd26:	4b7e      	ldr	r3, [pc, #504]	; (cf20 <error_check+0x3c0>)
    cd28:	0589      	lsls	r1, r1, #22
	magnitude = sqrt(pow(xyz[0],2)+pow(xyz[1],2)+pow(xyz[2],2));
    cd2a:	1c06      	adds	r6, r0, #0
	delta = fabs(magA1-1);
    cd2c:	1c20      	adds	r0, r4, #0
    cd2e:	469a      	mov	sl, r3
    cd30:	4798      	blx	r3
	if (fabs(magA1-1)>accel_err_limit)
    cd32:	21fc      	movs	r1, #252	; 0xfc
	delta = fabs(magA1-1);
    cd34:	0040      	lsls	r0, r0, #1
	if (fabs(magA1-1)>accel_err_limit)
    cd36:	4b7b      	ldr	r3, [pc, #492]	; (cf24 <error_check+0x3c4>)
	delta = fabs(magA1-1);
    cd38:	0840      	lsrs	r0, r0, #1
	if (fabs(magA1-1)>accel_err_limit)
    cd3a:	0589      	lsls	r1, r1, #22
    cd3c:	4699      	mov	r9, r3
    cd3e:	4798      	blx	r3
    cd40:	2800      	cmp	r0, #0
    cd42:	d010      	beq.n	cd66 <error_check+0x206>
	{
		meas_inst->measurement_error[meas_inst->num_errors] = accel1_mag_err;
    cd44:	2190      	movs	r1, #144	; 0x90
    cd46:	4643      	mov	r3, r8
    cd48:	4642      	mov	r2, r8
    cd4a:	2001      	movs	r0, #1
    cd4c:	585b      	ldr	r3, [r3, r1]
    cd4e:	18d2      	adds	r2, r2, r3
    cd50:	3294      	adds	r2, #148	; 0x94
    cd52:	7010      	strb	r0, [r2, #0]
		meas_inst->measurement_error_data1[meas_inst->num_errors] = magA1;
    cd54:	001a      	movs	r2, r3
    cd56:	4640      	mov	r0, r8
    cd58:	3226      	adds	r2, #38	; 0x26
    cd5a:	0092      	lsls	r2, r2, #2
	if 	((meas_inst->num_errors+1)<array_max){
    cd5c:	3301      	adds	r3, #1
		meas_inst->measurement_error_data1[meas_inst->num_errors] = magA1;
    cd5e:	5014      	str	r4, [r2, r0]
	if 	((meas_inst->num_errors+1)<array_max){
    cd60:	2b03      	cmp	r3, #3
    cd62:	d800      	bhi.n	cd66 <error_check+0x206>
    cd64:	e27a      	b.n	d25c <error_check+0x6fc>
		increment_error_count(meas_inst);
	}
	//  Magnitude Check accelerometer 2
	//mag = calc_magnitude(meas_inst->a2xyz);
	delta = fabs(magA2-1);
    cd66:	21fe      	movs	r1, #254	; 0xfe
    cd68:	9c04      	ldr	r4, [sp, #16]
    cd6a:	0589      	lsls	r1, r1, #22
    cd6c:	1c20      	adds	r0, r4, #0
    cd6e:	47d0      	blx	sl
	if (delta>accel_err_limit)
    cd70:	21fc      	movs	r1, #252	; 0xfc
	delta = fabs(magA2-1);
    cd72:	0040      	lsls	r0, r0, #1
    cd74:	0840      	lsrs	r0, r0, #1
	if (delta>accel_err_limit)
    cd76:	0589      	lsls	r1, r1, #22
    cd78:	47c8      	blx	r9
    cd7a:	2800      	cmp	r0, #0
    cd7c:	d010      	beq.n	cda0 <error_check+0x240>
	{
		meas_inst->measurement_error[meas_inst->num_errors] = accel2_mag_err;
    cd7e:	2190      	movs	r1, #144	; 0x90
    cd80:	4643      	mov	r3, r8
    cd82:	4642      	mov	r2, r8
    cd84:	2002      	movs	r0, #2
    cd86:	585b      	ldr	r3, [r3, r1]
    cd88:	18d2      	adds	r2, r2, r3
    cd8a:	3294      	adds	r2, #148	; 0x94
    cd8c:	7010      	strb	r0, [r2, #0]
		meas_inst->measurement_error_data1[meas_inst->num_errors] = magA2;
    cd8e:	001a      	movs	r2, r3
    cd90:	4640      	mov	r0, r8
    cd92:	3226      	adds	r2, #38	; 0x26
    cd94:	0092      	lsls	r2, r2, #2
	if 	((meas_inst->num_errors+1)<array_max){
    cd96:	3301      	adds	r3, #1
		meas_inst->measurement_error_data1[meas_inst->num_errors] = magA2;
    cd98:	5014      	str	r4, [r2, r0]
	if 	((meas_inst->num_errors+1)<array_max){
    cd9a:	2b03      	cmp	r3, #3
    cd9c:	d800      	bhi.n	cda0 <error_check+0x240>
    cd9e:	e25b      	b.n	d258 <error_check+0x6f8>
		increment_error_count(meas_inst);
	}
	//  Magnitude Check Compass 1
	//mag = calc_magnitude(meas_inst->m1xyz);
	delta = fabs(magM1-1);
    cda0:	21fe      	movs	r1, #254	; 0xfe
    cda2:	9c02      	ldr	r4, [sp, #8]
    cda4:	0589      	lsls	r1, r1, #22
    cda6:	1c20      	adds	r0, r4, #0
    cda8:	47d0      	blx	sl
 	if (delta>comp_err_limit)
    cdaa:	21fc      	movs	r1, #252	; 0xfc
	delta = fabs(magM1-1);
    cdac:	0040      	lsls	r0, r0, #1
    cdae:	0840      	lsrs	r0, r0, #1
 	if (delta>comp_err_limit)
    cdb0:	0589      	lsls	r1, r1, #22
    cdb2:	47c8      	blx	r9
    cdb4:	2800      	cmp	r0, #0
    cdb6:	d010      	beq.n	cdda <error_check+0x27a>
	{
		meas_inst->measurement_error[meas_inst->num_errors] = comp1_mag_err;
    cdb8:	2190      	movs	r1, #144	; 0x90
    cdba:	4643      	mov	r3, r8
    cdbc:	4642      	mov	r2, r8
    cdbe:	2003      	movs	r0, #3
    cdc0:	585b      	ldr	r3, [r3, r1]
    cdc2:	18d2      	adds	r2, r2, r3
    cdc4:	3294      	adds	r2, #148	; 0x94
    cdc6:	7010      	strb	r0, [r2, #0]
		meas_inst->measurement_error_data1[meas_inst->num_errors] = magM1;
    cdc8:	001a      	movs	r2, r3
    cdca:	4640      	mov	r0, r8
    cdcc:	3226      	adds	r2, #38	; 0x26
    cdce:	0092      	lsls	r2, r2, #2
	if 	((meas_inst->num_errors+1)<array_max){
    cdd0:	3301      	adds	r3, #1
		meas_inst->measurement_error_data1[meas_inst->num_errors] = magM1;
    cdd2:	5014      	str	r4, [r2, r0]
	if 	((meas_inst->num_errors+1)<array_max){
    cdd4:	2b03      	cmp	r3, #3
    cdd6:	d800      	bhi.n	cdda <error_check+0x27a>
    cdd8:	e23c      	b.n	d254 <error_check+0x6f4>
		increment_error_count(meas_inst);

	}
	//  Magnitude Check Compass 2
	//mag = calc_magnitude(meas_inst->m2xyz);
	delta = fabs(magM2-1);
    cdda:	21fe      	movs	r1, #254	; 0xfe
    cddc:	1c30      	adds	r0, r6, #0
    cdde:	0589      	lsls	r1, r1, #22
    cde0:	47d0      	blx	sl
	if (delta>comp_err_limit)
    cde2:	21fc      	movs	r1, #252	; 0xfc
	delta = fabs(magM2-1);
    cde4:	0040      	lsls	r0, r0, #1
    cde6:	0840      	lsrs	r0, r0, #1
	if (delta>comp_err_limit)
    cde8:	0589      	lsls	r1, r1, #22
    cdea:	47c8      	blx	r9
    cdec:	2800      	cmp	r0, #0
    cdee:	d010      	beq.n	ce12 <error_check+0x2b2>
	{
		meas_inst->measurement_error[meas_inst->num_errors] = comp2_mag_err;
    cdf0:	2190      	movs	r1, #144	; 0x90
    cdf2:	4643      	mov	r3, r8
    cdf4:	4642      	mov	r2, r8
    cdf6:	2004      	movs	r0, #4
    cdf8:	585b      	ldr	r3, [r3, r1]
    cdfa:	18d2      	adds	r2, r2, r3
    cdfc:	3294      	adds	r2, #148	; 0x94
    cdfe:	7010      	strb	r0, [r2, #0]
		meas_inst->measurement_error_data1[meas_inst->num_errors] = magM2;
    ce00:	001a      	movs	r2, r3
    ce02:	4640      	mov	r0, r8
    ce04:	3226      	adds	r2, #38	; 0x26
    ce06:	0092      	lsls	r2, r2, #2
	if 	((meas_inst->num_errors+1)<array_max){
    ce08:	3301      	adds	r3, #1
		meas_inst->measurement_error_data1[meas_inst->num_errors] = magM2;
    ce0a:	5016      	str	r6, [r2, r0]
	if 	((meas_inst->num_errors+1)<array_max){
    ce0c:	2b03      	cmp	r3, #3
    ce0e:	d800      	bhi.n	ce12 <error_check+0x2b2>
    ce10:	e21e      	b.n	d250 <error_check+0x6f0>
	
	
	// Axis check, Accelerometer
	for (i=0;i<3;i++){
		//  Cycle through all 3 axis
		delta = fabs((meas_inst->a1Cal[i]/magA1) - (meas_inst->a2Cal[i]/magA2));
    ce12:	4643      	mov	r3, r8
    ce14:	4c44      	ldr	r4, [pc, #272]	; (cf28 <error_check+0x3c8>)
    ce16:	9905      	ldr	r1, [sp, #20]
    ce18:	6d58      	ldr	r0, [r3, #84]	; 0x54
    ce1a:	47a0      	blx	r4
    ce1c:	4643      	mov	r3, r8
    ce1e:	1c05      	adds	r5, r0, #0
    ce20:	9904      	ldr	r1, [sp, #16]
    ce22:	6e18      	ldr	r0, [r3, #96]	; 0x60
    ce24:	47a0      	blx	r4
    ce26:	1c01      	adds	r1, r0, #0
    ce28:	1c28      	adds	r0, r5, #0
    ce2a:	47d0      	blx	sl
		accel_err_limit = errlim_disp*cal_report.disp_stdev_acc[i];
		accel_err_limit = 0.5;
		if (delta>accel_err_limit){
    ce2c:	21fc      	movs	r1, #252	; 0xfc
		delta = fabs((meas_inst->a1Cal[i]/magA1) - (meas_inst->a2Cal[i]/magA2));
    ce2e:	0045      	lsls	r5, r0, #1
    ce30:	086d      	lsrs	r5, r5, #1
		if (delta>accel_err_limit){
    ce32:	0589      	lsls	r1, r1, #22
    ce34:	1c28      	adds	r0, r5, #0
    ce36:	47c8      	blx	r9
    ce38:	2800      	cmp	r0, #0
    ce3a:	d014      	beq.n	ce66 <error_check+0x306>
			meas_inst->measurement_error[meas_inst->num_errors] = accel_disp_err;
    ce3c:	2190      	movs	r1, #144	; 0x90
    ce3e:	4643      	mov	r3, r8
    ce40:	4642      	mov	r2, r8
    ce42:	2005      	movs	r0, #5
    ce44:	585b      	ldr	r3, [r3, r1]
    ce46:	18d2      	adds	r2, r2, r3
    ce48:	3294      	adds	r2, #148	; 0x94
    ce4a:	7010      	strb	r0, [r2, #0]
    ce4c:	009a      	lsls	r2, r3, #2
    ce4e:	4442      	add	r2, r8
			meas_inst->measurement_error_data1[meas_inst->num_errors] = delta;
    ce50:	3093      	adds	r0, #147	; 0x93
    ce52:	5015      	str	r5, [r2, r0]
			meas_inst->measurement_error_data2[meas_inst->num_errors] = i+1;
    ce54:	25fe      	movs	r5, #254	; 0xfe
    ce56:	3010      	adds	r0, #16
    ce58:	05ad      	lsls	r5, r5, #22
	if 	((meas_inst->num_errors+1)<array_max){
    ce5a:	3301      	adds	r3, #1
			meas_inst->measurement_error_data2[meas_inst->num_errors] = i+1;
    ce5c:	5015      	str	r5, [r2, r0]
	if 	((meas_inst->num_errors+1)<array_max){
    ce5e:	2b03      	cmp	r3, #3
    ce60:	d801      	bhi.n	ce66 <error_check+0x306>
		meas_inst->num_errors++;
    ce62:	4642      	mov	r2, r8
    ce64:	5053      	str	r3, [r2, r1]
		delta = fabs((meas_inst->a1Cal[i]/magA1) - (meas_inst->a2Cal[i]/magA2));
    ce66:	4643      	mov	r3, r8
    ce68:	9905      	ldr	r1, [sp, #20]
    ce6a:	6d98      	ldr	r0, [r3, #88]	; 0x58
    ce6c:	47a0      	blx	r4
    ce6e:	4643      	mov	r3, r8
    ce70:	1c05      	adds	r5, r0, #0
    ce72:	9904      	ldr	r1, [sp, #16]
    ce74:	6e58      	ldr	r0, [r3, #100]	; 0x64
    ce76:	47a0      	blx	r4
    ce78:	1c01      	adds	r1, r0, #0
    ce7a:	1c28      	adds	r0, r5, #0
    ce7c:	47d0      	blx	sl
		if (delta>accel_err_limit){
    ce7e:	21fc      	movs	r1, #252	; 0xfc
		delta = fabs((meas_inst->a1Cal[i]/magA1) - (meas_inst->a2Cal[i]/magA2));
    ce80:	0045      	lsls	r5, r0, #1
    ce82:	086d      	lsrs	r5, r5, #1
		if (delta>accel_err_limit){
    ce84:	0589      	lsls	r1, r1, #22
    ce86:	1c28      	adds	r0, r5, #0
    ce88:	47c8      	blx	r9
    ce8a:	2800      	cmp	r0, #0
    ce8c:	d014      	beq.n	ceb8 <error_check+0x358>
			meas_inst->measurement_error[meas_inst->num_errors] = accel_disp_err;
    ce8e:	2190      	movs	r1, #144	; 0x90
    ce90:	4643      	mov	r3, r8
    ce92:	4642      	mov	r2, r8
    ce94:	2005      	movs	r0, #5
    ce96:	585b      	ldr	r3, [r3, r1]
    ce98:	18d2      	adds	r2, r2, r3
    ce9a:	3294      	adds	r2, #148	; 0x94
    ce9c:	7010      	strb	r0, [r2, #0]
    ce9e:	009a      	lsls	r2, r3, #2
    cea0:	4442      	add	r2, r8
			meas_inst->measurement_error_data1[meas_inst->num_errors] = delta;
    cea2:	3093      	adds	r0, #147	; 0x93
    cea4:	5015      	str	r5, [r2, r0]
			meas_inst->measurement_error_data2[meas_inst->num_errors] = i+1;
    cea6:	2580      	movs	r5, #128	; 0x80
    cea8:	3010      	adds	r0, #16
    ceaa:	05ed      	lsls	r5, r5, #23
	if 	((meas_inst->num_errors+1)<array_max){
    ceac:	3301      	adds	r3, #1
			meas_inst->measurement_error_data2[meas_inst->num_errors] = i+1;
    ceae:	5015      	str	r5, [r2, r0]
	if 	((meas_inst->num_errors+1)<array_max){
    ceb0:	2b03      	cmp	r3, #3
    ceb2:	d801      	bhi.n	ceb8 <error_check+0x358>
		meas_inst->num_errors++;
    ceb4:	4642      	mov	r2, r8
    ceb6:	5053      	str	r3, [r2, r1]
		delta = fabs((meas_inst->a1Cal[i]/magA1) - (meas_inst->a2Cal[i]/magA2));
    ceb8:	4643      	mov	r3, r8
    ceba:	9905      	ldr	r1, [sp, #20]
    cebc:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
    cebe:	47a0      	blx	r4
    cec0:	4643      	mov	r3, r8
    cec2:	1c05      	adds	r5, r0, #0
    cec4:	9904      	ldr	r1, [sp, #16]
    cec6:	6e98      	ldr	r0, [r3, #104]	; 0x68
    cec8:	47a0      	blx	r4
    ceca:	1c01      	adds	r1, r0, #0
    cecc:	1c28      	adds	r0, r5, #0
    cece:	47d0      	blx	sl
		if (delta>accel_err_limit){
    ced0:	21fc      	movs	r1, #252	; 0xfc
		delta = fabs((meas_inst->a1Cal[i]/magA1) - (meas_inst->a2Cal[i]/magA2));
    ced2:	0045      	lsls	r5, r0, #1
    ced4:	086d      	lsrs	r5, r5, #1
		if (delta>accel_err_limit){
    ced6:	0589      	lsls	r1, r1, #22
    ced8:	1c28      	adds	r0, r5, #0
    ceda:	47c8      	blx	r9
    cedc:	2800      	cmp	r0, #0
    cede:	d027      	beq.n	cf30 <error_check+0x3d0>
			meas_inst->measurement_error[meas_inst->num_errors] = accel_disp_err;
    cee0:	2190      	movs	r1, #144	; 0x90
    cee2:	4643      	mov	r3, r8
    cee4:	4642      	mov	r2, r8
    cee6:	2005      	movs	r0, #5
    cee8:	585b      	ldr	r3, [r3, r1]
    ceea:	18d2      	adds	r2, r2, r3
    ceec:	3294      	adds	r2, #148	; 0x94
    ceee:	7010      	strb	r0, [r2, #0]
    cef0:	009a      	lsls	r2, r3, #2
    cef2:	4442      	add	r2, r8
			meas_inst->measurement_error_data1[meas_inst->num_errors] = delta;
    cef4:	3093      	adds	r0, #147	; 0x93
    cef6:	5015      	str	r5, [r2, r0]
			meas_inst->measurement_error_data2[meas_inst->num_errors] = i+1;
    cef8:	4d0c      	ldr	r5, [pc, #48]	; (cf2c <error_check+0x3cc>)
    cefa:	3010      	adds	r0, #16
	if 	((meas_inst->num_errors+1)<array_max){
    cefc:	3301      	adds	r3, #1
			meas_inst->measurement_error_data2[meas_inst->num_errors] = i+1;
    cefe:	5015      	str	r5, [r2, r0]
	if 	((meas_inst->num_errors+1)<array_max){
    cf00:	2b03      	cmp	r3, #3
    cf02:	d815      	bhi.n	cf30 <error_check+0x3d0>
		meas_inst->num_errors++;
    cf04:	4642      	mov	r2, r8
    cf06:	5053      	str	r3, [r2, r1]
    cf08:	e012      	b.n	cf30 <error_check+0x3d0>
    cf0a:	46c0      	nop			; (mov r8, r8)
    cf0c:	0001fb6d 	.word	0x0001fb6d
    cf10:	0001eea5 	.word	0x0001eea5
    cf14:	0001e01d 	.word	0x0001e01d
    cf18:	0001a745 	.word	0x0001a745
    cf1c:	0001fc11 	.word	0x0001fc11
    cf20:	0001db79 	.word	0x0001db79
    cf24:	0001d0d1 	.word	0x0001d0d1
    cf28:	0001d559 	.word	0x0001d559
    cf2c:	40400000 	.word	0x40400000
		
	}
	
	// Axis check, Compass
	for (i=0;i<3;i++){
		delta = fabs((meas_inst->m1Cal[i]/magM1) - (meas_inst->m2Cal[i]/magM2));
    cf30:	4643      	mov	r3, r8
    cf32:	9902      	ldr	r1, [sp, #8]
    cf34:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    cf36:	47a0      	blx	r4
    cf38:	4643      	mov	r3, r8
    cf3a:	1c05      	adds	r5, r0, #0
    cf3c:	1c31      	adds	r1, r6, #0
    cf3e:	6f98      	ldr	r0, [r3, #120]	; 0x78
    cf40:	47a0      	blx	r4
    cf42:	1c01      	adds	r1, r0, #0
    cf44:	1c28      	adds	r0, r5, #0
    cf46:	47d0      	blx	sl
		comp_err_limit = errlim_mag*cal_report.disp_stdev_comp[i];
		comp_err_limit  = 0.5;
		if (delta>comp_err_limit){
    cf48:	21fc      	movs	r1, #252	; 0xfc
		delta = fabs((meas_inst->m1Cal[i]/magM1) - (meas_inst->m2Cal[i]/magM2));
    cf4a:	0045      	lsls	r5, r0, #1
    cf4c:	086d      	lsrs	r5, r5, #1
		if (delta>comp_err_limit){
    cf4e:	0589      	lsls	r1, r1, #22
    cf50:	1c28      	adds	r0, r5, #0
    cf52:	47c8      	blx	r9
    cf54:	2800      	cmp	r0, #0
    cf56:	d014      	beq.n	cf82 <error_check+0x422>
			meas_inst->measurement_error[meas_inst->num_errors] = comp_disp_err;
    cf58:	2190      	movs	r1, #144	; 0x90
    cf5a:	4643      	mov	r3, r8
    cf5c:	4642      	mov	r2, r8
    cf5e:	2006      	movs	r0, #6
    cf60:	585b      	ldr	r3, [r3, r1]
    cf62:	18d2      	adds	r2, r2, r3
    cf64:	3294      	adds	r2, #148	; 0x94
    cf66:	7010      	strb	r0, [r2, #0]
    cf68:	009a      	lsls	r2, r3, #2
    cf6a:	4442      	add	r2, r8
			meas_inst->measurement_error_data1[meas_inst->num_errors] = delta;
    cf6c:	3092      	adds	r0, #146	; 0x92
    cf6e:	5015      	str	r5, [r2, r0]
			meas_inst->measurement_error_data2[meas_inst->num_errors] = i+1;
    cf70:	25fe      	movs	r5, #254	; 0xfe
    cf72:	3010      	adds	r0, #16
    cf74:	05ad      	lsls	r5, r5, #22
	if 	((meas_inst->num_errors+1)<array_max){
    cf76:	3301      	adds	r3, #1
			meas_inst->measurement_error_data2[meas_inst->num_errors] = i+1;
    cf78:	5015      	str	r5, [r2, r0]
	if 	((meas_inst->num_errors+1)<array_max){
    cf7a:	2b03      	cmp	r3, #3
    cf7c:	d801      	bhi.n	cf82 <error_check+0x422>
		meas_inst->num_errors++;
    cf7e:	4642      	mov	r2, r8
    cf80:	5053      	str	r3, [r2, r1]
		delta = fabs((meas_inst->m1Cal[i]/magM1) - (meas_inst->m2Cal[i]/magM2));
    cf82:	4643      	mov	r3, r8
    cf84:	9902      	ldr	r1, [sp, #8]
    cf86:	6f18      	ldr	r0, [r3, #112]	; 0x70
    cf88:	47a0      	blx	r4
    cf8a:	4643      	mov	r3, r8
    cf8c:	1c05      	adds	r5, r0, #0
    cf8e:	1c31      	adds	r1, r6, #0
    cf90:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    cf92:	47a0      	blx	r4
    cf94:	1c01      	adds	r1, r0, #0
    cf96:	1c28      	adds	r0, r5, #0
    cf98:	47d0      	blx	sl
		if (delta>comp_err_limit){
    cf9a:	21fc      	movs	r1, #252	; 0xfc
		delta = fabs((meas_inst->m1Cal[i]/magM1) - (meas_inst->m2Cal[i]/magM2));
    cf9c:	0045      	lsls	r5, r0, #1
    cf9e:	086d      	lsrs	r5, r5, #1
		if (delta>comp_err_limit){
    cfa0:	0589      	lsls	r1, r1, #22
    cfa2:	1c28      	adds	r0, r5, #0
    cfa4:	47c8      	blx	r9
    cfa6:	2800      	cmp	r0, #0
    cfa8:	d014      	beq.n	cfd4 <error_check+0x474>
			meas_inst->measurement_error[meas_inst->num_errors] = comp_disp_err;
    cfaa:	2190      	movs	r1, #144	; 0x90
    cfac:	4643      	mov	r3, r8
    cfae:	4642      	mov	r2, r8
    cfb0:	2006      	movs	r0, #6
    cfb2:	585b      	ldr	r3, [r3, r1]
    cfb4:	18d2      	adds	r2, r2, r3
    cfb6:	3294      	adds	r2, #148	; 0x94
    cfb8:	7010      	strb	r0, [r2, #0]
    cfba:	009a      	lsls	r2, r3, #2
    cfbc:	4442      	add	r2, r8
			meas_inst->measurement_error_data1[meas_inst->num_errors] = delta;
    cfbe:	3092      	adds	r0, #146	; 0x92
    cfc0:	5015      	str	r5, [r2, r0]
			meas_inst->measurement_error_data2[meas_inst->num_errors] = i+1;
    cfc2:	2580      	movs	r5, #128	; 0x80
    cfc4:	3010      	adds	r0, #16
    cfc6:	05ed      	lsls	r5, r5, #23
	if 	((meas_inst->num_errors+1)<array_max){
    cfc8:	3301      	adds	r3, #1
			meas_inst->measurement_error_data2[meas_inst->num_errors] = i+1;
    cfca:	5015      	str	r5, [r2, r0]
	if 	((meas_inst->num_errors+1)<array_max){
    cfcc:	2b03      	cmp	r3, #3
    cfce:	d801      	bhi.n	cfd4 <error_check+0x474>
		meas_inst->num_errors++;
    cfd0:	4642      	mov	r2, r8
    cfd2:	5053      	str	r3, [r2, r1]
		delta = fabs((meas_inst->m1Cal[i]/magM1) - (meas_inst->m2Cal[i]/magM2));
    cfd4:	4643      	mov	r3, r8
    cfd6:	9902      	ldr	r1, [sp, #8]
    cfd8:	6f58      	ldr	r0, [r3, #116]	; 0x74
    cfda:	47a0      	blx	r4
    cfdc:	2380      	movs	r3, #128	; 0x80
    cfde:	4642      	mov	r2, r8
    cfe0:	1c05      	adds	r5, r0, #0
    cfe2:	1c31      	adds	r1, r6, #0
    cfe4:	58d0      	ldr	r0, [r2, r3]
    cfe6:	47a0      	blx	r4
    cfe8:	1c01      	adds	r1, r0, #0
    cfea:	1c28      	adds	r0, r5, #0
    cfec:	47d0      	blx	sl
		if (delta>comp_err_limit){
    cfee:	21fc      	movs	r1, #252	; 0xfc
		delta = fabs((meas_inst->m1Cal[i]/magM1) - (meas_inst->m2Cal[i]/magM2));
    cff0:	0044      	lsls	r4, r0, #1
    cff2:	0864      	lsrs	r4, r4, #1
		if (delta>comp_err_limit){
    cff4:	0589      	lsls	r1, r1, #22
    cff6:	1c20      	adds	r0, r4, #0
    cff8:	47c8      	blx	r9
    cffa:	2800      	cmp	r0, #0
    cffc:	d000      	beq.n	d000 <error_check+0x4a0>
    cffe:	e10f      	b.n	d220 <error_check+0x6c0>
	}
	
	
	
	//  Check Angle Disparity
	calc_azm_inc_roll_dec(meas_inst->a1Cal, meas_inst->m1Cal, &azm_arr[0], &inc_arr[0], &foo1, &foo2);
    d000:	9f08      	ldr	r7, [sp, #32]
    d002:	ad0d      	add	r5, sp, #52	; 0x34
    d004:	ac0c      	add	r4, sp, #48	; 0x30
    d006:	4e96      	ldr	r6, [pc, #600]	; (d260 <error_check+0x700>)
    d008:	0039      	movs	r1, r7
    d00a:	9501      	str	r5, [sp, #4]
    d00c:	9400      	str	r4, [sp, #0]
    d00e:	ab12      	add	r3, sp, #72	; 0x48
    d010:	aa0e      	add	r2, sp, #56	; 0x38
    d012:	9806      	ldr	r0, [sp, #24]
    d014:	47b0      	blx	r6
	calc_azm_inc_roll_dec(meas_inst->a2Cal, meas_inst->m1Cal, &azm_arr[1], &inc_arr[1], &foo1, &foo2);
    d016:	0039      	movs	r1, r7
    d018:	9501      	str	r5, [sp, #4]
    d01a:	9400      	str	r4, [sp, #0]
    d01c:	ab13      	add	r3, sp, #76	; 0x4c
    d01e:	aa0f      	add	r2, sp, #60	; 0x3c
    d020:	9807      	ldr	r0, [sp, #28]
    d022:	47b0      	blx	r6
	calc_azm_inc_roll_dec(meas_inst->a1Cal, meas_inst->m2Cal, &azm_arr[2], &inc_arr[2], &foo1, &foo2);
    d024:	9f09      	ldr	r7, [sp, #36]	; 0x24
    d026:	9501      	str	r5, [sp, #4]
    d028:	0039      	movs	r1, r7
    d02a:	9400      	str	r4, [sp, #0]
    d02c:	ab14      	add	r3, sp, #80	; 0x50
    d02e:	aa10      	add	r2, sp, #64	; 0x40
    d030:	9806      	ldr	r0, [sp, #24]
    d032:	47b0      	blx	r6
	calc_azm_inc_roll_dec(meas_inst->a2Cal, meas_inst->m2Cal, &azm_arr[3], &inc_arr[3], &foo1, &foo2);
    d034:	0039      	movs	r1, r7
    d036:	9501      	str	r5, [sp, #4]
    d038:	9400      	str	r4, [sp, #0]
    d03a:	ab15      	add	r3, sp, #84	; 0x54
    d03c:	aa11      	add	r2, sp, #68	; 0x44
    d03e:	9807      	ldr	r0, [sp, #28]
    d040:	47b0      	blx	r6
	//  Check Inclinometer
	angMin = inc_arr[0]; angMax = inc_arr[0];
    d042:	9c12      	ldr	r4, [sp, #72]	; 0x48
	for (i=1;i<4;i++){
		angMin = min(angMin, inc_arr[i]);
    d044:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    d046:	4d87      	ldr	r5, [pc, #540]	; (d264 <error_check+0x704>)
    d048:	1c39      	adds	r1, r7, #0
    d04a:	1c20      	adds	r0, r4, #0
    d04c:	47a8      	blx	r5
    d04e:	1c26      	adds	r6, r4, #0
    d050:	2800      	cmp	r0, #0
    d052:	d100      	bne.n	d056 <error_check+0x4f6>
    d054:	1c3e      	adds	r6, r7, #0
    d056:	1c39      	adds	r1, r7, #0
    d058:	1c20      	adds	r0, r4, #0
    d05a:	47c8      	blx	r9
    d05c:	2800      	cmp	r0, #0
    d05e:	d100      	bne.n	d062 <error_check+0x502>
    d060:	1c3c      	adds	r4, r7, #0
    d062:	9f14      	ldr	r7, [sp, #80]	; 0x50
    d064:	1c30      	adds	r0, r6, #0
    d066:	1c39      	adds	r1, r7, #0
    d068:	47a8      	blx	r5
    d06a:	2800      	cmp	r0, #0
    d06c:	d100      	bne.n	d070 <error_check+0x510>
    d06e:	1c3e      	adds	r6, r7, #0
    d070:	1c39      	adds	r1, r7, #0
    d072:	1c20      	adds	r0, r4, #0
    d074:	47c8      	blx	r9
    d076:	2800      	cmp	r0, #0
    d078:	d100      	bne.n	d07c <error_check+0x51c>
    d07a:	1c3c      	adds	r4, r7, #0
    d07c:	9f15      	ldr	r7, [sp, #84]	; 0x54
		angMax = max(angMax, inc_arr[i]);
	}	
	delta = angMax-angMin;
    d07e:	1c21      	adds	r1, r4, #0
    d080:	1c38      	adds	r0, r7, #0
    d082:	47a8      	blx	r5
    d084:	2800      	cmp	r0, #0
    d086:	d100      	bne.n	d08a <error_check+0x52a>
    d088:	1c3c      	adds	r4, r7, #0
    d08a:	1c31      	adds	r1, r6, #0
    d08c:	1c38      	adds	r0, r7, #0
    d08e:	47c8      	blx	r9
    d090:	1c31      	adds	r1, r6, #0
    d092:	2800      	cmp	r0, #0
    d094:	d100      	bne.n	d098 <error_check+0x538>
    d096:	1c39      	adds	r1, r7, #0
    d098:	1c20      	adds	r0, r4, #0
    d09a:	47d0      	blx	sl
	if (delta>options.errorSensitivity){
    d09c:	4b72      	ldr	r3, [pc, #456]	; (d268 <error_check+0x708>)
	delta = angMax-angMin;
    d09e:	1c04      	adds	r4, r0, #0
	if (delta>options.errorSensitivity){
    d0a0:	68db      	ldr	r3, [r3, #12]
    d0a2:	9305      	str	r3, [sp, #20]
    d0a4:	1c19      	adds	r1, r3, #0
    d0a6:	47c8      	blx	r9
    d0a8:	2800      	cmp	r0, #0
    d0aa:	d010      	beq.n	d0ce <error_check+0x56e>
		meas_inst->measurement_error[meas_inst->num_errors] = inc_ang_err;
    d0ac:	2190      	movs	r1, #144	; 0x90
    d0ae:	4643      	mov	r3, r8
    d0b0:	4642      	mov	r2, r8
    d0b2:	200e      	movs	r0, #14
    d0b4:	585b      	ldr	r3, [r3, r1]
    d0b6:	18d2      	adds	r2, r2, r3
    d0b8:	3294      	adds	r2, #148	; 0x94
    d0ba:	7010      	strb	r0, [r2, #0]
		meas_inst->measurement_error_data1[meas_inst->num_errors] = delta;
    d0bc:	001a      	movs	r2, r3
    d0be:	4640      	mov	r0, r8
    d0c0:	3226      	adds	r2, #38	; 0x26
    d0c2:	0092      	lsls	r2, r2, #2
	if 	((meas_inst->num_errors+1)<array_max){
    d0c4:	3301      	adds	r3, #1
		meas_inst->measurement_error_data1[meas_inst->num_errors] = delta;
    d0c6:	5014      	str	r4, [r2, r0]
	if 	((meas_inst->num_errors+1)<array_max){
    d0c8:	2b03      	cmp	r3, #3
    d0ca:	d800      	bhi.n	d0ce <error_check+0x56e>
    d0cc:	e0be      	b.n	d24c <error_check+0x6ec>
	}
	// Check Compass
	//  Check for possible angle wrap-around
	bool wrapFlag = false;
	for (i=0;i<4;i++){
		if (azm_arr[i]<90){ wrapFlag = true;}
    d0ce:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    d0d0:	4966      	ldr	r1, [pc, #408]	; (d26c <error_check+0x70c>)
    d0d2:	1c20      	adds	r0, r4, #0
    d0d4:	2601      	movs	r6, #1
    d0d6:	47a8      	blx	r5
    d0d8:	2800      	cmp	r0, #0
    d0da:	d100      	bne.n	d0de <error_check+0x57e>
    d0dc:	2600      	movs	r6, #0
    d0de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d0e0:	4962      	ldr	r1, [pc, #392]	; (d26c <error_check+0x70c>)
    d0e2:	9302      	str	r3, [sp, #8]
    d0e4:	1c18      	adds	r0, r3, #0
    d0e6:	47a8      	blx	r5
    d0e8:	2701      	movs	r7, #1
    d0ea:	2800      	cmp	r0, #0
    d0ec:	d100      	bne.n	d0f0 <error_check+0x590>
    d0ee:	1c37      	adds	r7, r6, #0
    d0f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d0f2:	495e      	ldr	r1, [pc, #376]	; (d26c <error_check+0x70c>)
    d0f4:	9304      	str	r3, [sp, #16]
    d0f6:	1c18      	adds	r0, r3, #0
    d0f8:	47a8      	blx	r5
    d0fa:	2601      	movs	r6, #1
    d0fc:	2800      	cmp	r0, #0
    d0fe:	d100      	bne.n	d102 <error_check+0x5a2>
    d100:	1c3e      	adds	r6, r7, #0
    d102:	9f11      	ldr	r7, [sp, #68]	; 0x44
	}
	if (wrapFlag){
    d104:	4959      	ldr	r1, [pc, #356]	; (d26c <error_check+0x70c>)
    d106:	1c38      	adds	r0, r7, #0
    d108:	47a8      	blx	r5
    d10a:	2800      	cmp	r0, #0
    d10c:	d160      	bne.n	d1d0 <error_check+0x670>
    d10e:	b2f6      	uxtb	r6, r6
    d110:	2e00      	cmp	r6, #0
    d112:	d15d      	bne.n	d1d0 <error_check+0x670>
			if (azm_arr[i]>270){ azm_arr[i]= azm_arr[i]-360;}
		}
	}	
	angMin = azm_arr[0]; angMax = azm_arr[0]; 
	for (i=1;i<4;i++){
		angMin = min(angMin, azm_arr[i]);
    d114:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    d116:	1c20      	adds	r0, r4, #0
    d118:	1c31      	adds	r1, r6, #0
    d11a:	47a8      	blx	r5
    d11c:	1c27      	adds	r7, r4, #0
    d11e:	2800      	cmp	r0, #0
    d120:	d100      	bne.n	d124 <error_check+0x5c4>
    d122:	1c37      	adds	r7, r6, #0
    d124:	1c31      	adds	r1, r6, #0
    d126:	1c20      	adds	r0, r4, #0
    d128:	47c8      	blx	r9
    d12a:	2800      	cmp	r0, #0
    d12c:	d100      	bne.n	d130 <error_check+0x5d0>
    d12e:	1c34      	adds	r4, r6, #0
    d130:	9e10      	ldr	r6, [sp, #64]	; 0x40
    d132:	1c39      	adds	r1, r7, #0
    d134:	1c30      	adds	r0, r6, #0
    d136:	47c8      	blx	r9
    d138:	9704      	str	r7, [sp, #16]
    d13a:	2800      	cmp	r0, #0
    d13c:	d100      	bne.n	d140 <error_check+0x5e0>
    d13e:	9604      	str	r6, [sp, #16]
    d140:	1c21      	adds	r1, r4, #0
    d142:	1c30      	adds	r0, r6, #0
    d144:	47a8      	blx	r5
    d146:	2800      	cmp	r0, #0
    d148:	d100      	bne.n	d14c <error_check+0x5ec>
    d14a:	1c34      	adds	r4, r6, #0
		angMax = max(angMax, azm_arr[i]);
	}
	delta = (angMax-angMin)*cos(meas_inst->inclination*DEG2RAD); //  Adjust for high angle shots
    d14c:	4642      	mov	r2, r8
		angMin = min(angMin, azm_arr[i]);
    d14e:	9b11      	ldr	r3, [sp, #68]	; 0x44
	delta = (angMax-angMin)*cos(meas_inst->inclination*DEG2RAD); //  Adjust for high angle shots
    d150:	6910      	ldr	r0, [r2, #16]
		angMin = min(angMin, azm_arr[i]);
    d152:	9302      	str	r3, [sp, #8]
	delta = (angMax-angMin)*cos(meas_inst->inclination*DEG2RAD); //  Adjust for high angle shots
    d154:	4946      	ldr	r1, [pc, #280]	; (d270 <error_check+0x710>)
    d156:	4b47      	ldr	r3, [pc, #284]	; (d274 <error_check+0x714>)
    d158:	4798      	blx	r3
    d15a:	47d8      	blx	fp
    d15c:	4b46      	ldr	r3, [pc, #280]	; (d278 <error_check+0x718>)
    d15e:	4798      	blx	r3
    d160:	0006      	movs	r6, r0
    d162:	000f      	movs	r7, r1
    d164:	1c20      	adds	r0, r4, #0
    d166:	9902      	ldr	r1, [sp, #8]
    d168:	47c8      	blx	r9
    d16a:	2800      	cmp	r0, #0
    d16c:	d100      	bne.n	d170 <error_check+0x610>
    d16e:	9c02      	ldr	r4, [sp, #8]
    d170:	9b04      	ldr	r3, [sp, #16]
    d172:	9902      	ldr	r1, [sp, #8]
    d174:	1c18      	adds	r0, r3, #0
    d176:	4699      	mov	r9, r3
    d178:	47a8      	blx	r5
    d17a:	4649      	mov	r1, r9
    d17c:	2800      	cmp	r0, #0
    d17e:	d100      	bne.n	d182 <error_check+0x622>
    d180:	9902      	ldr	r1, [sp, #8]
    d182:	1c20      	adds	r0, r4, #0
    d184:	47d0      	blx	sl
    d186:	47d8      	blx	fp
    d188:	0032      	movs	r2, r6
    d18a:	003b      	movs	r3, r7
    d18c:	4c3b      	ldr	r4, [pc, #236]	; (d27c <error_check+0x71c>)
    d18e:	47a0      	blx	r4
    d190:	4b3b      	ldr	r3, [pc, #236]	; (d280 <error_check+0x720>)
    d192:	4798      	blx	r3
    d194:	1c04      	adds	r4, r0, #0
	if (delta>options.errorSensitivity){
    d196:	1c01      	adds	r1, r0, #0
    d198:	9805      	ldr	r0, [sp, #20]
    d19a:	47a8      	blx	r5
    d19c:	2800      	cmp	r0, #0
    d19e:	d010      	beq.n	d1c2 <error_check+0x662>
		meas_inst->measurement_error[meas_inst->num_errors] = azm_ang_err;
    d1a0:	2190      	movs	r1, #144	; 0x90
    d1a2:	4643      	mov	r3, r8
    d1a4:	4642      	mov	r2, r8
    d1a6:	200f      	movs	r0, #15
    d1a8:	585b      	ldr	r3, [r3, r1]
    d1aa:	18d2      	adds	r2, r2, r3
    d1ac:	3294      	adds	r2, #148	; 0x94
    d1ae:	7010      	strb	r0, [r2, #0]
		meas_inst->measurement_error_data1[meas_inst->num_errors] = delta;
    d1b0:	001a      	movs	r2, r3
    d1b2:	4640      	mov	r0, r8
    d1b4:	3226      	adds	r2, #38	; 0x26
    d1b6:	0092      	lsls	r2, r2, #2
	if 	((meas_inst->num_errors+1)<array_max){
    d1b8:	3301      	adds	r3, #1
		meas_inst->measurement_error_data1[meas_inst->num_errors] = delta;
    d1ba:	5014      	str	r4, [r2, r0]
	if 	((meas_inst->num_errors+1)<array_max){
    d1bc:	2b03      	cmp	r3, #3
    d1be:	d800      	bhi.n	d1c2 <error_check+0x662>
		meas_inst->num_errors++;
    d1c0:	5043      	str	r3, [r0, r1]
	}
	
	
	
	
}
    d1c2:	b017      	add	sp, #92	; 0x5c
    d1c4:	bc3c      	pop	{r2, r3, r4, r5}
    d1c6:	4690      	mov	r8, r2
    d1c8:	4699      	mov	r9, r3
    d1ca:	46a2      	mov	sl, r4
    d1cc:	46ab      	mov	fp, r5
    d1ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (azm_arr[i]>270){ azm_arr[i]= azm_arr[i]-360;}
    d1d0:	492c      	ldr	r1, [pc, #176]	; (d284 <error_check+0x724>)
    d1d2:	1c20      	adds	r0, r4, #0
    d1d4:	47c8      	blx	r9
    d1d6:	2800      	cmp	r0, #0
    d1d8:	d003      	beq.n	d1e2 <error_check+0x682>
    d1da:	1c20      	adds	r0, r4, #0
    d1dc:	492a      	ldr	r1, [pc, #168]	; (d288 <error_check+0x728>)
    d1de:	47d0      	blx	sl
    d1e0:	1c04      	adds	r4, r0, #0
    d1e2:	9e02      	ldr	r6, [sp, #8]
    d1e4:	4927      	ldr	r1, [pc, #156]	; (d284 <error_check+0x724>)
    d1e6:	1c30      	adds	r0, r6, #0
    d1e8:	47c8      	blx	r9
    d1ea:	2800      	cmp	r0, #0
    d1ec:	d003      	beq.n	d1f6 <error_check+0x696>
    d1ee:	4926      	ldr	r1, [pc, #152]	; (d288 <error_check+0x728>)
    d1f0:	1c30      	adds	r0, r6, #0
    d1f2:	47d0      	blx	sl
    d1f4:	900f      	str	r0, [sp, #60]	; 0x3c
    d1f6:	9e04      	ldr	r6, [sp, #16]
    d1f8:	4922      	ldr	r1, [pc, #136]	; (d284 <error_check+0x724>)
    d1fa:	1c30      	adds	r0, r6, #0
    d1fc:	47c8      	blx	r9
    d1fe:	2800      	cmp	r0, #0
    d200:	d003      	beq.n	d20a <error_check+0x6aa>
    d202:	4921      	ldr	r1, [pc, #132]	; (d288 <error_check+0x728>)
    d204:	1c30      	adds	r0, r6, #0
    d206:	47d0      	blx	sl
    d208:	9010      	str	r0, [sp, #64]	; 0x40
    d20a:	491e      	ldr	r1, [pc, #120]	; (d284 <error_check+0x724>)
    d20c:	1c38      	adds	r0, r7, #0
    d20e:	47c8      	blx	r9
    d210:	2800      	cmp	r0, #0
    d212:	d100      	bne.n	d216 <error_check+0x6b6>
    d214:	e77e      	b.n	d114 <error_check+0x5b4>
    d216:	491c      	ldr	r1, [pc, #112]	; (d288 <error_check+0x728>)
    d218:	1c38      	adds	r0, r7, #0
    d21a:	47d0      	blx	sl
    d21c:	9011      	str	r0, [sp, #68]	; 0x44
    d21e:	e779      	b.n	d114 <error_check+0x5b4>
			meas_inst->measurement_error[meas_inst->num_errors] = comp_disp_err;
    d220:	2190      	movs	r1, #144	; 0x90
    d222:	4643      	mov	r3, r8
    d224:	4642      	mov	r2, r8
    d226:	2006      	movs	r0, #6
    d228:	585b      	ldr	r3, [r3, r1]
    d22a:	18d2      	adds	r2, r2, r3
    d22c:	3294      	adds	r2, #148	; 0x94
    d22e:	7010      	strb	r0, [r2, #0]
    d230:	009a      	lsls	r2, r3, #2
    d232:	4442      	add	r2, r8
			meas_inst->measurement_error_data1[meas_inst->num_errors] = delta;
    d234:	3092      	adds	r0, #146	; 0x92
    d236:	5014      	str	r4, [r2, r0]
			meas_inst->measurement_error_data2[meas_inst->num_errors] = i+1;
    d238:	4c14      	ldr	r4, [pc, #80]	; (d28c <error_check+0x72c>)
    d23a:	3010      	adds	r0, #16
	if 	((meas_inst->num_errors+1)<array_max){
    d23c:	3301      	adds	r3, #1
			meas_inst->measurement_error_data2[meas_inst->num_errors] = i+1;
    d23e:	5014      	str	r4, [r2, r0]
	if 	((meas_inst->num_errors+1)<array_max){
    d240:	2b03      	cmp	r3, #3
    d242:	d900      	bls.n	d246 <error_check+0x6e6>
    d244:	e6dc      	b.n	d000 <error_check+0x4a0>
		meas_inst->num_errors++;
    d246:	4642      	mov	r2, r8
    d248:	5053      	str	r3, [r2, r1]
    d24a:	e6d9      	b.n	d000 <error_check+0x4a0>
    d24c:	5043      	str	r3, [r0, r1]
    d24e:	e73e      	b.n	d0ce <error_check+0x56e>
    d250:	5043      	str	r3, [r0, r1]
    d252:	e5de      	b.n	ce12 <error_check+0x2b2>
    d254:	5043      	str	r3, [r0, r1]
    d256:	e5c0      	b.n	cdda <error_check+0x27a>
    d258:	5043      	str	r3, [r0, r1]
    d25a:	e5a1      	b.n	cda0 <error_check+0x240>
    d25c:	5043      	str	r3, [r0, r1]
    d25e:	e582      	b.n	cd66 <error_check+0x206>
    d260:	00009229 	.word	0x00009229
    d264:	0001d0a9 	.word	0x0001d0a9
    d268:	2000332c 	.word	0x2000332c
    d26c:	42b40000 	.word	0x42b40000
    d270:	3c8efa35 	.word	0x3c8efa35
    d274:	0001d939 	.word	0x0001d939
    d278:	0001a2c9 	.word	0x0001a2c9
    d27c:	0001eea5 	.word	0x0001eea5
    d280:	0001fc11 	.word	0x0001fc11
    d284:	43870000 	.word	0x43870000
    d288:	43b40000 	.word	0x43b40000
    d28c:	40400000 	.word	0x40400000

0000d290 <full_measurement>:
void full_measurement(struct MEASUREMENT *meas_inst, uint8_t shot_delay){
    d290:	b5f0      	push	{r4, r5, r6, r7, lr}
    d292:	46de      	mov	lr, fp
    d294:	4657      	mov	r7, sl
    d296:	464e      	mov	r6, r9
    d298:	4645      	mov	r5, r8
    d29a:	b5e0      	push	{r5, r6, r7, lr}
    d29c:	0004      	movs	r4, r0
    d29e:	b093      	sub	sp, #76	; 0x4c
	for (delay_count=0;delay_count<shot_delay;delay_count ++){
    d2a0:	2900      	cmp	r1, #0
    d2a2:	d100      	bne.n	d2a6 <full_measurement+0x16>
    d2a4:	e143      	b.n	d52e <full_measurement+0x29e>
    d2a6:	4ba6      	ldr	r3, [pc, #664]	; (d540 <full_measurement+0x2b0>)
    d2a8:	4aa6      	ldr	r2, [pc, #664]	; (d544 <full_measurement+0x2b4>)
    d2aa:	469a      	mov	sl, r3
    d2ac:	4ba6      	ldr	r3, [pc, #664]	; (d548 <full_measurement+0x2b8>)
    d2ae:	2500      	movs	r5, #0
    d2b0:	4691      	mov	r9, r2
    d2b2:	4683      	mov	fp, r0
    d2b4:	4698      	mov	r8, r3
    d2b6:	000c      	movs	r4, r1
    d2b8:	4fa4      	ldr	r7, [pc, #656]	; (d54c <full_measurement+0x2bc>)
    d2ba:	4ea5      	ldr	r6, [pc, #660]	; (d550 <full_measurement+0x2c0>)
    d2bc:	9301      	str	r3, [sp, #4]
	rxBufferLaserClear();
    d2be:	47b8      	blx	r7
	writeLaser(cmd_beep_on, sizeof(cmd_beep_on));
    d2c0:	2106      	movs	r1, #6
    d2c2:	4650      	mov	r0, sl
    d2c4:	47c0      	blx	r8
	while(!isLaserReceiveComplete());
    d2c6:	47b0      	blx	r6
    d2c8:	2800      	cmp	r0, #0
    d2ca:	d0fc      	beq.n	d2c6 <full_measurement+0x36>
		delay_ms(900);
    d2cc:	20e1      	movs	r0, #225	; 0xe1
	for (delay_count=0;delay_count<shot_delay;delay_count ++){
    d2ce:	3501      	adds	r5, #1
		delay_ms(900);
    d2d0:	0080      	lsls	r0, r0, #2
	for (delay_count=0;delay_count<shot_delay;delay_count ++){
    d2d2:	b2ed      	uxtb	r5, r5
		delay_ms(900);
    d2d4:	47c8      	blx	r9
	for (delay_count=0;delay_count<shot_delay;delay_count ++){
    d2d6:	42ac      	cmp	r4, r5
    d2d8:	d1f1      	bne.n	d2be <full_measurement+0x2e>
    d2da:	465c      	mov	r4, fp
	rxBufferLaserClear();
    d2dc:	47b8      	blx	r7
	writeLaser(cmd_beep_on, sizeof(cmd_beep_on));
    d2de:	2106      	movs	r1, #6
    d2e0:	4650      	mov	r0, sl
    d2e2:	9b01      	ldr	r3, [sp, #4]
    d2e4:	4798      	blx	r3
	while(!isLaserReceiveComplete());
    d2e6:	47b0      	blx	r6
    d2e8:	2800      	cmp	r0, #0
    d2ea:	d0fc      	beq.n	d2e6 <full_measurement+0x56>
	delay_ms(100);//  Avoids cutting off the beep too quickly with another command
    d2ec:	2064      	movs	r0, #100	; 0x64
    d2ee:	47c8      	blx	r9
	backlightOff();
    d2f0:	4b98      	ldr	r3, [pc, #608]	; (d554 <full_measurement+0x2c4>)
    d2f2:	4798      	blx	r3
		meas_inst->a1Raw[i] = 0;
    d2f4:	2324      	movs	r3, #36	; 0x24
    d2f6:	469c      	mov	ip, r3
    d2f8:	44a4      	add	ip, r4
    d2fa:	4663      	mov	r3, ip
    d2fc:	9303      	str	r3, [sp, #12]
    d2fe:	4b96      	ldr	r3, [pc, #600]	; (d558 <full_measurement+0x2c8>)
    d300:	220c      	movs	r2, #12
    d302:	2100      	movs	r1, #0
    d304:	4660      	mov	r0, ip
    d306:	4698      	mov	r8, r3
    d308:	4798      	blx	r3
		meas_inst->a2Raw[i] = 0;
    d30a:	2330      	movs	r3, #48	; 0x30
    d30c:	469c      	mov	ip, r3
    d30e:	44a4      	add	ip, r4
    d310:	4663      	mov	r3, ip
    d312:	220c      	movs	r2, #12
    d314:	2100      	movs	r1, #0
    d316:	4660      	mov	r0, ip
    d318:	9304      	str	r3, [sp, #16]
    d31a:	47c0      	blx	r8
		meas_inst->m1Raw[i] = 0;
    d31c:	233c      	movs	r3, #60	; 0x3c
    d31e:	469c      	mov	ip, r3
    d320:	44a4      	add	ip, r4
    d322:	4663      	mov	r3, ip
    d324:	220c      	movs	r2, #12
    d326:	2100      	movs	r1, #0
    d328:	4660      	mov	r0, ip
    d32a:	9305      	str	r3, [sp, #20]
    d32c:	47c0      	blx	r8
		meas_inst->m2Raw[i] = 0;
    d32e:	2348      	movs	r3, #72	; 0x48
    d330:	469c      	mov	ip, r3
    d332:	44a4      	add	ip, r4
    d334:	4663      	mov	r3, ip
    d336:	4660      	mov	r0, ip
    d338:	2100      	movs	r1, #0
    d33a:	220c      	movs	r2, #12
    d33c:	9302      	str	r3, [sp, #8]
    d33e:	47c0      	blx	r8
	meas_inst->num_errors = 0;
    d340:	2300      	movs	r3, #0
    d342:	2290      	movs	r2, #144	; 0x90
    d344:	50a3      	str	r3, [r4, r2]
	meas_inst->samples = 0;
    d346:	3a0c      	subs	r2, #12
    d348:	50a3      	str	r3, [r4, r2]
	rxBufferLaserClear();
    d34a:	47b8      	blx	r7
	writeLaser(cmd_laser_single, sizeof(cmd_laser_single));
    d34c:	2105      	movs	r1, #5
    d34e:	9b01      	ldr	r3, [sp, #4]
    d350:	4882      	ldr	r0, [pc, #520]	; (d55c <full_measurement+0x2cc>)
    d352:	4798      	blx	r3
	refMs = getCurrentMs(); //  Background clock running at 1000hz
    d354:	4b82      	ldr	r3, [pc, #520]	; (d560 <full_measurement+0x2d0>)
		meas_inst->samples += 1;
    d356:	2784      	movs	r7, #132	; 0x84
	refMs = getCurrentMs(); //  Background clock running at 1000hz
    d358:	4699      	mov	r9, r3
    d35a:	4798      	blx	r3
    d35c:	4b81      	ldr	r3, [pc, #516]	; (d564 <full_measurement+0x2d4>)
    d35e:	4683      	mov	fp, r0
    d360:	4698      	mov	r8, r3
			if(laserMessageType()==SINGLE_MEASUREMENT){
    d362:	46b2      	mov	sl, r6
    d364:	4d80      	ldr	r5, [pc, #512]	; (d568 <full_measurement+0x2d8>)
		if (meas_inst->readTimeMs > MEASUREMENT_TIMEOUT){
    d366:	4e81      	ldr	r6, [pc, #516]	; (d56c <full_measurement+0x2dc>)
    d368:	e003      	b.n	d372 <full_measurement+0xe2>
		if (isLaserReceiveComplete()){
    d36a:	47d0      	blx	sl
    d36c:	2800      	cmp	r0, #0
    d36e:	d000      	beq.n	d372 <full_measurement+0xe2>
    d370:	e0c0      	b.n	d4f4 <full_measurement+0x264>
		read_accel(&slave_acc1,a1temp);
    d372:	a906      	add	r1, sp, #24
    d374:	487e      	ldr	r0, [pc, #504]	; (d570 <full_measurement+0x2e0>)
    d376:	47c0      	blx	r8
		read_accel(&slave_acc2, a2temp);
    d378:	a909      	add	r1, sp, #36	; 0x24
    d37a:	487e      	ldr	r0, [pc, #504]	; (d574 <full_measurement+0x2e4>)
    d37c:	47c0      	blx	r8
		read_mag_double(m1temp, m2temp);
    d37e:	4b7e      	ldr	r3, [pc, #504]	; (d578 <full_measurement+0x2e8>)
    d380:	a90f      	add	r1, sp, #60	; 0x3c
    d382:	a80c      	add	r0, sp, #48	; 0x30
    d384:	4798      	blx	r3
			meas_inst->a1Raw[i] += a1temp[i];
    d386:	9906      	ldr	r1, [sp, #24]
    d388:	6a60      	ldr	r0, [r4, #36]	; 0x24
    d38a:	47a8      	blx	r5
			meas_inst->a2Raw[i] += a2temp[i];
    d38c:	9909      	ldr	r1, [sp, #36]	; 0x24
			meas_inst->a1Raw[i] += a1temp[i];
    d38e:	6260      	str	r0, [r4, #36]	; 0x24
			meas_inst->a2Raw[i] += a2temp[i];
    d390:	6b20      	ldr	r0, [r4, #48]	; 0x30
    d392:	47a8      	blx	r5
			meas_inst->m1Raw[i] += m1temp[i];
    d394:	990c      	ldr	r1, [sp, #48]	; 0x30
			meas_inst->a2Raw[i] += a2temp[i];
    d396:	6320      	str	r0, [r4, #48]	; 0x30
			meas_inst->m1Raw[i] += m1temp[i];
    d398:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    d39a:	47a8      	blx	r5
			meas_inst->m2Raw[i] += m2temp[i];
    d39c:	990f      	ldr	r1, [sp, #60]	; 0x3c
			meas_inst->m1Raw[i] += m1temp[i];
    d39e:	63e0      	str	r0, [r4, #60]	; 0x3c
			meas_inst->m2Raw[i] += m2temp[i];
    d3a0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    d3a2:	47a8      	blx	r5
			meas_inst->a1Raw[i] += a1temp[i];
    d3a4:	9907      	ldr	r1, [sp, #28]
			meas_inst->m2Raw[i] += m2temp[i];
    d3a6:	64a0      	str	r0, [r4, #72]	; 0x48
			meas_inst->a1Raw[i] += a1temp[i];
    d3a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    d3aa:	47a8      	blx	r5
			meas_inst->a2Raw[i] += a2temp[i];
    d3ac:	990a      	ldr	r1, [sp, #40]	; 0x28
			meas_inst->a1Raw[i] += a1temp[i];
    d3ae:	62a0      	str	r0, [r4, #40]	; 0x28
			meas_inst->a2Raw[i] += a2temp[i];
    d3b0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    d3b2:	47a8      	blx	r5
			meas_inst->m1Raw[i] += m1temp[i];
    d3b4:	990d      	ldr	r1, [sp, #52]	; 0x34
			meas_inst->a2Raw[i] += a2temp[i];
    d3b6:	6360      	str	r0, [r4, #52]	; 0x34
			meas_inst->m1Raw[i] += m1temp[i];
    d3b8:	6c20      	ldr	r0, [r4, #64]	; 0x40
    d3ba:	47a8      	blx	r5
			meas_inst->m2Raw[i] += m2temp[i];
    d3bc:	9910      	ldr	r1, [sp, #64]	; 0x40
			meas_inst->m1Raw[i] += m1temp[i];
    d3be:	6420      	str	r0, [r4, #64]	; 0x40
			meas_inst->m2Raw[i] += m2temp[i];
    d3c0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    d3c2:	47a8      	blx	r5
			meas_inst->a1Raw[i] += a1temp[i];
    d3c4:	9908      	ldr	r1, [sp, #32]
			meas_inst->m2Raw[i] += m2temp[i];
    d3c6:	64e0      	str	r0, [r4, #76]	; 0x4c
			meas_inst->a1Raw[i] += a1temp[i];
    d3c8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    d3ca:	47a8      	blx	r5
			meas_inst->a2Raw[i] += a2temp[i];
    d3cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
			meas_inst->a1Raw[i] += a1temp[i];
    d3ce:	62e0      	str	r0, [r4, #44]	; 0x2c
			meas_inst->a2Raw[i] += a2temp[i];
    d3d0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    d3d2:	47a8      	blx	r5
			meas_inst->m1Raw[i] += m1temp[i];
    d3d4:	990e      	ldr	r1, [sp, #56]	; 0x38
			meas_inst->a2Raw[i] += a2temp[i];
    d3d6:	63a0      	str	r0, [r4, #56]	; 0x38
			meas_inst->m1Raw[i] += m1temp[i];
    d3d8:	6c60      	ldr	r0, [r4, #68]	; 0x44
    d3da:	47a8      	blx	r5
			meas_inst->m2Raw[i] += m2temp[i];
    d3dc:	9911      	ldr	r1, [sp, #68]	; 0x44
			meas_inst->m1Raw[i] += m1temp[i];
    d3de:	6460      	str	r0, [r4, #68]	; 0x44
			meas_inst->m2Raw[i] += m2temp[i];
    d3e0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    d3e2:	47a8      	blx	r5
    d3e4:	6520      	str	r0, [r4, #80]	; 0x50
		meas_inst->samples += 1;
    d3e6:	59e3      	ldr	r3, [r4, r7]
    d3e8:	3301      	adds	r3, #1
    d3ea:	51e3      	str	r3, [r4, r7]
		meas_inst->readTimeMs = getCurrentMs()-refMs;
    d3ec:	47c8      	blx	r9
    d3ee:	465b      	mov	r3, fp
    d3f0:	1ac0      	subs	r0, r0, r3
    d3f2:	238c      	movs	r3, #140	; 0x8c
    d3f4:	50e0      	str	r0, [r4, r3]
		if (meas_inst->readTimeMs > MEASUREMENT_TIMEOUT){
    d3f6:	42b0      	cmp	r0, r6
    d3f8:	d9b7      	bls.n	d36a <full_measurement+0xda>
	laser_parse_buffer(meas_inst);
    d3fa:	0020      	movs	r0, r4
    d3fc:	4b5f      	ldr	r3, [pc, #380]	; (d57c <full_measurement+0x2ec>)
    d3fe:	4798      	blx	r3
	meas_inst->distCal = meas_inst->distRaw+dist_calst.dist_offset;
    d400:	69e3      	ldr	r3, [r4, #28]
    d402:	4698      	mov	r8, r3
    d404:	4b5e      	ldr	r3, [pc, #376]	; (d580 <full_measurement+0x2f0>)
    d406:	4640      	mov	r0, r8
    d408:	6d99      	ldr	r1, [r3, #88]	; 0x58
    d40a:	47a8      	blx	r5
	if (options.current_unit_dist == feet){
    d40c:	4e5d      	ldr	r6, [pc, #372]	; (d584 <full_measurement+0x2f4>)
	meas_inst->distCal = meas_inst->distRaw+dist_calst.dist_offset;
    d40e:	6220      	str	r0, [r4, #32]
	if (options.current_unit_dist == feet){
    d410:	7935      	ldrb	r5, [r6, #4]
	meas_inst->distCal = meas_inst->distRaw+dist_calst.dist_offset;
    d412:	1c07      	adds	r7, r0, #0
	if (options.current_unit_dist == feet){
    d414:	2d00      	cmp	r5, #0
    d416:	d100      	bne.n	d41a <full_measurement+0x18a>
    d418:	e072      	b.n	d500 <full_measurement+0x270>
		meas_inst->distance_units = meters;
    d41a:	2501      	movs	r5, #1
    d41c:	2388      	movs	r3, #136	; 0x88
    d41e:	54e5      	strb	r5, [r4, r3]
    d420:	3b04      	subs	r3, #4
    d422:	58e0      	ldr	r0, [r4, r3]
    d424:	4b58      	ldr	r3, [pc, #352]	; (d588 <full_measurement+0x2f8>)
    d426:	4798      	blx	r3
		meas_inst->a1Raw[i] =meas_inst->a1Raw[i] / meas_inst->samples;
    d428:	4d58      	ldr	r5, [pc, #352]	; (d58c <full_measurement+0x2fc>)
    d42a:	1c07      	adds	r7, r0, #0
    d42c:	1c01      	adds	r1, r0, #0
    d42e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    d430:	47a8      	blx	r5
		meas_inst->a2Raw[i] =meas_inst->a2Raw[i] / meas_inst->samples;
    d432:	1c39      	adds	r1, r7, #0
		meas_inst->a1Raw[i] =meas_inst->a1Raw[i] / meas_inst->samples;
    d434:	6260      	str	r0, [r4, #36]	; 0x24
		meas_inst->a2Raw[i] =meas_inst->a2Raw[i] / meas_inst->samples;
    d436:	6b20      	ldr	r0, [r4, #48]	; 0x30
    d438:	47a8      	blx	r5
		meas_inst->m1Raw[i] =meas_inst->m1Raw[i] / meas_inst->samples;
    d43a:	1c39      	adds	r1, r7, #0
		meas_inst->a2Raw[i] =meas_inst->a2Raw[i] / meas_inst->samples;
    d43c:	6320      	str	r0, [r4, #48]	; 0x30
		meas_inst->m1Raw[i] =meas_inst->m1Raw[i] / meas_inst->samples;
    d43e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    d440:	47a8      	blx	r5
		meas_inst->m2Raw[i] =meas_inst->m2Raw[i] / meas_inst->samples;
    d442:	1c39      	adds	r1, r7, #0
		meas_inst->m1Raw[i] =meas_inst->m1Raw[i] / meas_inst->samples;
    d444:	63e0      	str	r0, [r4, #60]	; 0x3c
		meas_inst->m2Raw[i] =meas_inst->m2Raw[i] / meas_inst->samples;
    d446:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    d448:	47a8      	blx	r5
		meas_inst->a1Raw[i] =meas_inst->a1Raw[i] / meas_inst->samples;
    d44a:	1c39      	adds	r1, r7, #0
		meas_inst->m2Raw[i] =meas_inst->m2Raw[i] / meas_inst->samples;
    d44c:	64a0      	str	r0, [r4, #72]	; 0x48
		meas_inst->a1Raw[i] =meas_inst->a1Raw[i] / meas_inst->samples;
    d44e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    d450:	47a8      	blx	r5
		meas_inst->a2Raw[i] =meas_inst->a2Raw[i] / meas_inst->samples;
    d452:	1c39      	adds	r1, r7, #0
		meas_inst->a1Raw[i] =meas_inst->a1Raw[i] / meas_inst->samples;
    d454:	62a0      	str	r0, [r4, #40]	; 0x28
		meas_inst->a2Raw[i] =meas_inst->a2Raw[i] / meas_inst->samples;
    d456:	6b60      	ldr	r0, [r4, #52]	; 0x34
    d458:	47a8      	blx	r5
		meas_inst->m1Raw[i] =meas_inst->m1Raw[i] / meas_inst->samples;
    d45a:	1c39      	adds	r1, r7, #0
		meas_inst->a2Raw[i] =meas_inst->a2Raw[i] / meas_inst->samples;
    d45c:	6360      	str	r0, [r4, #52]	; 0x34
		meas_inst->m1Raw[i] =meas_inst->m1Raw[i] / meas_inst->samples;
    d45e:	6c20      	ldr	r0, [r4, #64]	; 0x40
    d460:	47a8      	blx	r5
		meas_inst->m2Raw[i] =meas_inst->m2Raw[i] / meas_inst->samples;
    d462:	1c39      	adds	r1, r7, #0
		meas_inst->m1Raw[i] =meas_inst->m1Raw[i] / meas_inst->samples;
    d464:	6420      	str	r0, [r4, #64]	; 0x40
		meas_inst->m2Raw[i] =meas_inst->m2Raw[i] / meas_inst->samples;
    d466:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    d468:	47a8      	blx	r5
		meas_inst->a1Raw[i] =meas_inst->a1Raw[i] / meas_inst->samples;
    d46a:	1c39      	adds	r1, r7, #0
		meas_inst->m2Raw[i] =meas_inst->m2Raw[i] / meas_inst->samples;
    d46c:	64e0      	str	r0, [r4, #76]	; 0x4c
		meas_inst->a1Raw[i] =meas_inst->a1Raw[i] / meas_inst->samples;
    d46e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    d470:	47a8      	blx	r5
		meas_inst->a2Raw[i] =meas_inst->a2Raw[i] / meas_inst->samples;
    d472:	1c39      	adds	r1, r7, #0
		meas_inst->a1Raw[i] =meas_inst->a1Raw[i] / meas_inst->samples;
    d474:	62e0      	str	r0, [r4, #44]	; 0x2c
		meas_inst->a2Raw[i] =meas_inst->a2Raw[i] / meas_inst->samples;
    d476:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    d478:	47a8      	blx	r5
		meas_inst->m1Raw[i] =meas_inst->m1Raw[i] / meas_inst->samples;
    d47a:	1c39      	adds	r1, r7, #0
		meas_inst->a2Raw[i] =meas_inst->a2Raw[i] / meas_inst->samples;
    d47c:	63a0      	str	r0, [r4, #56]	; 0x38
		meas_inst->m1Raw[i] =meas_inst->m1Raw[i] / meas_inst->samples;
    d47e:	6c60      	ldr	r0, [r4, #68]	; 0x44
    d480:	47a8      	blx	r5
		meas_inst->m2Raw[i] =meas_inst->m2Raw[i] / meas_inst->samples;
    d482:	1c39      	adds	r1, r7, #0
		meas_inst->m1Raw[i] =meas_inst->m1Raw[i] / meas_inst->samples;
    d484:	6460      	str	r0, [r4, #68]	; 0x44
		meas_inst->m2Raw[i] =meas_inst->m2Raw[i] / meas_inst->samples;
    d486:	6d20      	ldr	r0, [r4, #80]	; 0x50
    d488:	47a8      	blx	r5
	cal_apply_cal(meas_inst->a1Raw, meas_inst->a1Cal, &a1_calst);
    d48a:	0021      	movs	r1, r4
    d48c:	4d40      	ldr	r5, [pc, #256]	; (d590 <full_measurement+0x300>)
		meas_inst->m2Raw[i] =meas_inst->m2Raw[i] / meas_inst->samples;
    d48e:	6520      	str	r0, [r4, #80]	; 0x50
	cal_apply_cal(meas_inst->a1Raw, meas_inst->a1Cal, &a1_calst);
    d490:	4a40      	ldr	r2, [pc, #256]	; (d594 <full_measurement+0x304>)
    d492:	3154      	adds	r1, #84	; 0x54
    d494:	9803      	ldr	r0, [sp, #12]
    d496:	47a8      	blx	r5
	cal_apply_cal(meas_inst->a2Raw, meas_inst->a2Cal, &a2_calst);
    d498:	0021      	movs	r1, r4
    d49a:	4a3f      	ldr	r2, [pc, #252]	; (d598 <full_measurement+0x308>)
    d49c:	3160      	adds	r1, #96	; 0x60
    d49e:	9804      	ldr	r0, [sp, #16]
    d4a0:	47a8      	blx	r5
	cal_apply_cal(meas_inst->m1Raw, meas_inst->m1Cal, &m1_calst);
    d4a2:	0021      	movs	r1, r4
    d4a4:	4a3d      	ldr	r2, [pc, #244]	; (d59c <full_measurement+0x30c>)
    d4a6:	316c      	adds	r1, #108	; 0x6c
    d4a8:	9805      	ldr	r0, [sp, #20]
    d4aa:	47a8      	blx	r5
	cal_apply_cal(meas_inst->m2Raw, meas_inst->m2Cal, &m2_calst);
    d4ac:	0021      	movs	r1, r4
    d4ae:	4a3c      	ldr	r2, [pc, #240]	; (d5a0 <full_measurement+0x310>)
    d4b0:	3178      	adds	r1, #120	; 0x78
    d4b2:	9802      	ldr	r0, [sp, #8]
    d4b4:	47a8      	blx	r5
	calc_orientation(meas_inst);
    d4b6:	0020      	movs	r0, r4
    d4b8:	4b3a      	ldr	r3, [pc, #232]	; (d5a4 <full_measurement+0x314>)
    d4ba:	4798      	blx	r3
	error_check(meas_inst);
    d4bc:	0020      	movs	r0, r4
    d4be:	4b3a      	ldr	r3, [pc, #232]	; (d5a8 <full_measurement+0x318>)
    d4c0:	4798      	blx	r3
	get_time();
    d4c2:	4b3a      	ldr	r3, [pc, #232]	; (d5ac <full_measurement+0x31c>)
    d4c4:	4798      	blx	r3
	meas_inst->posix_time = gen_posix_time(&current_time);// Save POSIX time
    d4c6:	4d3a      	ldr	r5, [pc, #232]	; (d5b0 <full_measurement+0x320>)
    d4c8:	4b3a      	ldr	r3, [pc, #232]	; (d5b4 <full_measurement+0x324>)
    d4ca:	0028      	movs	r0, r5
    d4cc:	4798      	blx	r3
    d4ce:	6060      	str	r0, [r4, #4]
	if (options.current_unit_temp == celsius){
    d4d0:	7973      	ldrb	r3, [r6, #5]
    d4d2:	2b04      	cmp	r3, #4
    d4d4:	d029      	beq.n	d52a <full_measurement+0x29a>
		meas_inst->temp_units = fahrenheit;
    d4d6:	2305      	movs	r3, #5
		meas_inst->temperature = current_time.temperatureF;
    d4d8:	692a      	ldr	r2, [r5, #16]
    d4da:	2189      	movs	r1, #137	; 0x89
	backlightOn(&options.backlight_setting);
    d4dc:	4836      	ldr	r0, [pc, #216]	; (d5b8 <full_measurement+0x328>)
    d4de:	5463      	strb	r3, [r4, r1]
    d4e0:	60a2      	str	r2, [r4, #8]
    d4e2:	4b36      	ldr	r3, [pc, #216]	; (d5bc <full_measurement+0x32c>)
    d4e4:	4798      	blx	r3
}
    d4e6:	b013      	add	sp, #76	; 0x4c
    d4e8:	bc3c      	pop	{r2, r3, r4, r5}
    d4ea:	4690      	mov	r8, r2
    d4ec:	4699      	mov	r9, r3
    d4ee:	46a2      	mov	sl, r4
    d4f0:	46ab      	mov	fp, r5
    d4f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(laserMessageType()==SINGLE_MEASUREMENT){
    d4f4:	4b32      	ldr	r3, [pc, #200]	; (d5c0 <full_measurement+0x330>)
    d4f6:	4798      	blx	r3
    d4f8:	2844      	cmp	r0, #68	; 0x44
    d4fa:	d000      	beq.n	d4fe <full_measurement+0x26e>
    d4fc:	e733      	b.n	d366 <full_measurement+0xd6>
    d4fe:	e77c      	b.n	d3fa <full_measurement+0x16a>
		meas_inst->distRaw = meas_inst->distRaw * MT2FT;//convert from meters to feet
    d500:	4b30      	ldr	r3, [pc, #192]	; (d5c4 <full_measurement+0x334>)
    d502:	4640      	mov	r0, r8
    d504:	4699      	mov	r9, r3
    d506:	4798      	blx	r3
    d508:	4b2f      	ldr	r3, [pc, #188]	; (d5c8 <full_measurement+0x338>)
    d50a:	4a30      	ldr	r2, [pc, #192]	; (d5cc <full_measurement+0x33c>)
    d50c:	469a      	mov	sl, r3
    d50e:	4b30      	ldr	r3, [pc, #192]	; (d5d0 <full_measurement+0x340>)
    d510:	47d0      	blx	sl
    d512:	4b30      	ldr	r3, [pc, #192]	; (d5d4 <full_measurement+0x344>)
    d514:	4698      	mov	r8, r3
    d516:	4798      	blx	r3
    d518:	61e0      	str	r0, [r4, #28]
		meas_inst->distCal = meas_inst->distCal * MT2FT;//convert from meters to feet
    d51a:	1c38      	adds	r0, r7, #0
    d51c:	47c8      	blx	r9
    d51e:	4a2b      	ldr	r2, [pc, #172]	; (d5cc <full_measurement+0x33c>)
    d520:	4b2b      	ldr	r3, [pc, #172]	; (d5d0 <full_measurement+0x340>)
    d522:	47d0      	blx	sl
    d524:	47c0      	blx	r8
    d526:	6220      	str	r0, [r4, #32]
    d528:	e778      	b.n	d41c <full_measurement+0x18c>
		meas_inst->temperature = current_time.temperatureC;
    d52a:	68ea      	ldr	r2, [r5, #12]
    d52c:	e7d5      	b.n	d4da <full_measurement+0x24a>
    d52e:	4b04      	ldr	r3, [pc, #16]	; (d540 <full_measurement+0x2b0>)
    d530:	4f06      	ldr	r7, [pc, #24]	; (d54c <full_measurement+0x2bc>)
    d532:	469a      	mov	sl, r3
    d534:	4b04      	ldr	r3, [pc, #16]	; (d548 <full_measurement+0x2b8>)
    d536:	4e06      	ldr	r6, [pc, #24]	; (d550 <full_measurement+0x2c0>)
    d538:	9301      	str	r3, [sp, #4]
    d53a:	4b02      	ldr	r3, [pc, #8]	; (d544 <full_measurement+0x2b4>)
    d53c:	4699      	mov	r9, r3
    d53e:	e6cd      	b.n	d2dc <full_measurement+0x4c>
    d540:	20000190 	.word	0x20000190
    d544:	000161e9 	.word	0x000161e9
    d548:	00012ff5 	.word	0x00012ff5
    d54c:	00013065 	.word	0x00013065
    d550:	00013041 	.word	0x00013041
    d554:	0000751d 	.word	0x0000751d
    d558:	0001fdfd 	.word	0x0001fdfd
    d55c:	200001a8 	.word	0x200001a8
    d560:	0000dbc1 	.word	0x0000dbc1
    d564:	0000c651 	.word	0x0000c651
    d568:	0001d235 	.word	0x0001d235
    d56c:	00001388 	.word	0x00001388
    d570:	20000fe0 	.word	0x20000fe0
    d574:	20000f70 	.word	0x20000f70
    d578:	0000c7d5 	.word	0x0000c7d5
    d57c:	0000c40d 	.word	0x0000c40d
    d580:	20005450 	.word	0x20005450
    d584:	2000332c 	.word	0x2000332c
    d588:	0001df91 	.word	0x0001df91
    d58c:	0001d559 	.word	0x0001d559
    d590:	000118dd 	.word	0x000118dd
    d594:	200055d0 	.word	0x200055d0
    d598:	2000550c 	.word	0x2000550c
    d59c:	200054b0 	.word	0x200054b0
    d5a0:	20003fe0 	.word	0x20003fe0
    d5a4:	000093c9 	.word	0x000093c9
    d5a8:	0000cb61 	.word	0x0000cb61
    d5ac:	00007c61 	.word	0x00007c61
    d5b0:	20002778 	.word	0x20002778
    d5b4:	00007e35 	.word	0x00007e35
    d5b8:	2000333c 	.word	0x2000333c
    d5bc:	00007425 	.word	0x00007425
    d5c0:	000130a5 	.word	0x000130a5
    d5c4:	0001fb6d 	.word	0x0001fb6d
    d5c8:	0001eea5 	.word	0x0001eea5
    d5cc:	0abb44e5 	.word	0x0abb44e5
    d5d0:	400a3f29 	.word	0x400a3f29
    d5d4:	0001fc11 	.word	0x0001fc11

0000d5d8 <gen_err_message>:



void gen_err_message(char *err_str, struct MEASUREMENT *meas_inst, uint8_t errN){
    d5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d5da:	46c6      	mov	lr, r8
    d5dc:	0017      	movs	r7, r2
    d5de:	0093      	lsls	r3, r2, #2
	float data1, data2;
	uint8_t axis;
	data1 = meas_inst->measurement_error_data1[errN];
    d5e0:	2298      	movs	r2, #152	; 0x98
void gen_err_message(char *err_str, struct MEASUREMENT *meas_inst, uint8_t errN){
    d5e2:	b500      	push	{lr}
    d5e4:	18cb      	adds	r3, r1, r3
    d5e6:	000c      	movs	r4, r1
	data1 = meas_inst->measurement_error_data1[errN];
    d5e8:	589e      	ldr	r6, [r3, r2]
	data2 = meas_inst->measurement_error_data2[errN];
    d5ea:	3210      	adds	r2, #16
void gen_err_message(char *err_str, struct MEASUREMENT *meas_inst, uint8_t errN){
    d5ec:	b082      	sub	sp, #8
    d5ee:	0005      	movs	r5, r0
	axis = data2;
    d5f0:	5898      	ldr	r0, [r3, r2]
    d5f2:	4b6c      	ldr	r3, [pc, #432]	; (d7a4 <gen_err_message+0x1cc>)
    d5f4:	4798      	blx	r3
	
	switch(meas_inst->measurement_error[errN]){
    d5f6:	19e4      	adds	r4, r4, r7
    d5f8:	3494      	adds	r4, #148	; 0x94
    d5fa:	7822      	ldrb	r2, [r4, #0]
	axis = data2;
    d5fc:	b2c3      	uxtb	r3, r0
    d5fe:	4698      	mov	r8, r3
	switch(meas_inst->measurement_error[errN]){
    d600:	2a0f      	cmp	r2, #15
    d602:	d900      	bls.n	d606 <gen_err_message+0x2e>
    d604:	e0a0      	b.n	d748 <gen_err_message+0x170>
    d606:	4968      	ldr	r1, [pc, #416]	; (d7a8 <gen_err_message+0x1d0>)
    d608:	0093      	lsls	r3, r2, #2
    d60a:	58cb      	ldr	r3, [r1, r3]
    d60c:	469f      	mov	pc, r3
			break;
		case inc_ang_err:
			sprintf(err_str,"Inc Delta: %0.3fdeg", data1);
			break;
		case azm_ang_err:
			sprintf(err_str,"Azm Delta: %0.3fdeg", data1);
    d60e:	4b67      	ldr	r3, [pc, #412]	; (d7ac <gen_err_message+0x1d4>)
    d610:	1c30      	adds	r0, r6, #0
    d612:	4798      	blx	r3
    d614:	4c66      	ldr	r4, [pc, #408]	; (d7b0 <gen_err_message+0x1d8>)
    d616:	0002      	movs	r2, r0
    d618:	000b      	movs	r3, r1
    d61a:	0028      	movs	r0, r5
    d61c:	4965      	ldr	r1, [pc, #404]	; (d7b4 <gen_err_message+0x1dc>)
    d61e:	47a0      	blx	r4
	};
	
	
	
	
}
    d620:	b002      	add	sp, #8
    d622:	bc04      	pop	{r2}
    d624:	4690      	mov	r8, r2
    d626:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (data1>1){sprintf(err_str,"Acc1 High: %0.4f", data1);}
    d628:	21fe      	movs	r1, #254	; 0xfe
    d62a:	1c30      	adds	r0, r6, #0
    d62c:	0589      	lsls	r1, r1, #22
    d62e:	4b62      	ldr	r3, [pc, #392]	; (d7b8 <gen_err_message+0x1e0>)
    d630:	4798      	blx	r3
    d632:	2800      	cmp	r0, #0
    d634:	d100      	bne.n	d638 <gen_err_message+0x60>
    d636:	e08c      	b.n	d752 <gen_err_message+0x17a>
    d638:	1c30      	adds	r0, r6, #0
    d63a:	4b5c      	ldr	r3, [pc, #368]	; (d7ac <gen_err_message+0x1d4>)
    d63c:	4798      	blx	r3
    d63e:	4c5c      	ldr	r4, [pc, #368]	; (d7b0 <gen_err_message+0x1d8>)
    d640:	0002      	movs	r2, r0
    d642:	000b      	movs	r3, r1
    d644:	0028      	movs	r0, r5
    d646:	495d      	ldr	r1, [pc, #372]	; (d7bc <gen_err_message+0x1e4>)
    d648:	47a0      	blx	r4
    d64a:	e7e9      	b.n	d620 <gen_err_message+0x48>
			if (data1>1){sprintf(err_str,"Acc2 High: %0.4f", data1);}
    d64c:	21fe      	movs	r1, #254	; 0xfe
    d64e:	1c30      	adds	r0, r6, #0
    d650:	0589      	lsls	r1, r1, #22
    d652:	4b59      	ldr	r3, [pc, #356]	; (d7b8 <gen_err_message+0x1e0>)
    d654:	4798      	blx	r3
    d656:	2800      	cmp	r0, #0
    d658:	d100      	bne.n	d65c <gen_err_message+0x84>
    d65a:	e098      	b.n	d78e <gen_err_message+0x1b6>
    d65c:	1c30      	adds	r0, r6, #0
    d65e:	4b53      	ldr	r3, [pc, #332]	; (d7ac <gen_err_message+0x1d4>)
    d660:	4798      	blx	r3
    d662:	4c53      	ldr	r4, [pc, #332]	; (d7b0 <gen_err_message+0x1d8>)
    d664:	0002      	movs	r2, r0
    d666:	000b      	movs	r3, r1
    d668:	0028      	movs	r0, r5
    d66a:	4955      	ldr	r1, [pc, #340]	; (d7c0 <gen_err_message+0x1e8>)
    d66c:	47a0      	blx	r4
    d66e:	e7d7      	b.n	d620 <gen_err_message+0x48>
			if (data1>1){sprintf(err_str,"Comp1 High: %0.4f", data1);}
    d670:	21fe      	movs	r1, #254	; 0xfe
    d672:	1c30      	adds	r0, r6, #0
    d674:	0589      	lsls	r1, r1, #22
    d676:	4b50      	ldr	r3, [pc, #320]	; (d7b8 <gen_err_message+0x1e0>)
    d678:	4798      	blx	r3
    d67a:	2800      	cmp	r0, #0
    d67c:	d07d      	beq.n	d77a <gen_err_message+0x1a2>
    d67e:	1c30      	adds	r0, r6, #0
    d680:	4b4a      	ldr	r3, [pc, #296]	; (d7ac <gen_err_message+0x1d4>)
    d682:	4798      	blx	r3
    d684:	4c4a      	ldr	r4, [pc, #296]	; (d7b0 <gen_err_message+0x1d8>)
    d686:	0002      	movs	r2, r0
    d688:	000b      	movs	r3, r1
    d68a:	0028      	movs	r0, r5
    d68c:	494d      	ldr	r1, [pc, #308]	; (d7c4 <gen_err_message+0x1ec>)
    d68e:	47a0      	blx	r4
    d690:	e7c6      	b.n	d620 <gen_err_message+0x48>
			if (data1>1){sprintf(err_str,"Comp2 High: %0.4f", data1);}
    d692:	21fe      	movs	r1, #254	; 0xfe
    d694:	1c30      	adds	r0, r6, #0
    d696:	0589      	lsls	r1, r1, #22
    d698:	4b47      	ldr	r3, [pc, #284]	; (d7b8 <gen_err_message+0x1e0>)
    d69a:	4798      	blx	r3
    d69c:	2800      	cmp	r0, #0
    d69e:	d062      	beq.n	d766 <gen_err_message+0x18e>
    d6a0:	1c30      	adds	r0, r6, #0
    d6a2:	4b42      	ldr	r3, [pc, #264]	; (d7ac <gen_err_message+0x1d4>)
    d6a4:	4798      	blx	r3
    d6a6:	4c42      	ldr	r4, [pc, #264]	; (d7b0 <gen_err_message+0x1d8>)
    d6a8:	0002      	movs	r2, r0
    d6aa:	000b      	movs	r3, r1
    d6ac:	0028      	movs	r0, r5
    d6ae:	4946      	ldr	r1, [pc, #280]	; (d7c8 <gen_err_message+0x1f0>)
    d6b0:	47a0      	blx	r4
    d6b2:	e7b5      	b.n	d620 <gen_err_message+0x48>
			sprintf(err_str,"Acc delta ax%d %0.3f%%", axis, 100*data1);
    d6b4:	4945      	ldr	r1, [pc, #276]	; (d7cc <gen_err_message+0x1f4>)
    d6b6:	1c30      	adds	r0, r6, #0
    d6b8:	4b45      	ldr	r3, [pc, #276]	; (d7d0 <gen_err_message+0x1f8>)
    d6ba:	4798      	blx	r3
    d6bc:	4b3b      	ldr	r3, [pc, #236]	; (d7ac <gen_err_message+0x1d4>)
    d6be:	4798      	blx	r3
    d6c0:	4642      	mov	r2, r8
    d6c2:	9000      	str	r0, [sp, #0]
    d6c4:	9101      	str	r1, [sp, #4]
    d6c6:	4b3a      	ldr	r3, [pc, #232]	; (d7b0 <gen_err_message+0x1d8>)
    d6c8:	4942      	ldr	r1, [pc, #264]	; (d7d4 <gen_err_message+0x1fc>)
    d6ca:	0028      	movs	r0, r5
    d6cc:	4798      	blx	r3
			break;
    d6ce:	e7a7      	b.n	d620 <gen_err_message+0x48>
			sprintf(err_str,"Mag delta ax%d %0.3f%%", axis, 100*data1);
    d6d0:	493e      	ldr	r1, [pc, #248]	; (d7cc <gen_err_message+0x1f4>)
    d6d2:	1c30      	adds	r0, r6, #0
    d6d4:	4b3e      	ldr	r3, [pc, #248]	; (d7d0 <gen_err_message+0x1f8>)
    d6d6:	4798      	blx	r3
    d6d8:	4b34      	ldr	r3, [pc, #208]	; (d7ac <gen_err_message+0x1d4>)
    d6da:	4798      	blx	r3
    d6dc:	4642      	mov	r2, r8
    d6de:	9000      	str	r0, [sp, #0]
    d6e0:	9101      	str	r1, [sp, #4]
    d6e2:	4b33      	ldr	r3, [pc, #204]	; (d7b0 <gen_err_message+0x1d8>)
    d6e4:	493c      	ldr	r1, [pc, #240]	; (d7d8 <gen_err_message+0x200>)
    d6e6:	0028      	movs	r0, r5
    d6e8:	4798      	blx	r3
			break;
    d6ea:	e799      	b.n	d620 <gen_err_message+0x48>
			sprintf(err_str,"laser calc error");
    d6ec:	2211      	movs	r2, #17
    d6ee:	493b      	ldr	r1, [pc, #236]	; (d7dc <gen_err_message+0x204>)
    d6f0:	0028      	movs	r0, r5
    d6f2:	4b3b      	ldr	r3, [pc, #236]	; (d7e0 <gen_err_message+0x208>)
    d6f4:	4798      	blx	r3
			break;
    d6f6:	e793      	b.n	d620 <gen_err_message+0x48>
			sprintf(err_str,"laser weak signal");
    d6f8:	2212      	movs	r2, #18
    d6fa:	493a      	ldr	r1, [pc, #232]	; (d7e4 <gen_err_message+0x20c>)
    d6fc:	0028      	movs	r0, r5
    d6fe:	4b38      	ldr	r3, [pc, #224]	; (d7e0 <gen_err_message+0x208>)
    d700:	4798      	blx	r3
			break;
    d702:	e78d      	b.n	d620 <gen_err_message+0x48>
			sprintf(err_str,"laser strong signal");
    d704:	2214      	movs	r2, #20
    d706:	4938      	ldr	r1, [pc, #224]	; (d7e8 <gen_err_message+0x210>)
    d708:	0028      	movs	r0, r5
    d70a:	4b35      	ldr	r3, [pc, #212]	; (d7e0 <gen_err_message+0x208>)
    d70c:	4798      	blx	r3
			break;
    d70e:	e787      	b.n	d620 <gen_err_message+0x48>
			sprintf(err_str,"laser comm timeout");
    d710:	2213      	movs	r2, #19
    d712:	4936      	ldr	r1, [pc, #216]	; (d7ec <gen_err_message+0x214>)
    d714:	0028      	movs	r0, r5
    d716:	4b32      	ldr	r3, [pc, #200]	; (d7e0 <gen_err_message+0x208>)
    d718:	4798      	blx	r3
			break;
    d71a:	e781      	b.n	d620 <gen_err_message+0x48>
			sprintf(err_str,"laser error, unknown");
    d71c:	2215      	movs	r2, #21
    d71e:	4934      	ldr	r1, [pc, #208]	; (d7f0 <gen_err_message+0x218>)
    d720:	0028      	movs	r0, r5
    d722:	4b2f      	ldr	r3, [pc, #188]	; (d7e0 <gen_err_message+0x208>)
    d724:	4798      	blx	r3
			break;
    d726:	e77b      	b.n	d620 <gen_err_message+0x48>
			sprintf(err_str,"laser wrong message");
    d728:	2214      	movs	r2, #20
    d72a:	4932      	ldr	r1, [pc, #200]	; (d7f4 <gen_err_message+0x21c>)
    d72c:	0028      	movs	r0, r5
    d72e:	4b2c      	ldr	r3, [pc, #176]	; (d7e0 <gen_err_message+0x208>)
    d730:	4798      	blx	r3
			break;
    d732:	e775      	b.n	d620 <gen_err_message+0x48>
			sprintf(err_str,"Inc Delta: %0.3fdeg", data1);
    d734:	1c30      	adds	r0, r6, #0
    d736:	4b1d      	ldr	r3, [pc, #116]	; (d7ac <gen_err_message+0x1d4>)
    d738:	4798      	blx	r3
    d73a:	4c1d      	ldr	r4, [pc, #116]	; (d7b0 <gen_err_message+0x1d8>)
    d73c:	0002      	movs	r2, r0
    d73e:	000b      	movs	r3, r1
    d740:	0028      	movs	r0, r5
    d742:	492d      	ldr	r1, [pc, #180]	; (d7f8 <gen_err_message+0x220>)
    d744:	47a0      	blx	r4
			break;
    d746:	e76b      	b.n	d620 <gen_err_message+0x48>
			sprintf(err_str,"unknown error %d",meas_inst->measurement_error[errN]);	
    d748:	492c      	ldr	r1, [pc, #176]	; (d7fc <gen_err_message+0x224>)
    d74a:	0028      	movs	r0, r5
    d74c:	4b18      	ldr	r3, [pc, #96]	; (d7b0 <gen_err_message+0x1d8>)
    d74e:	4798      	blx	r3
}
    d750:	e766      	b.n	d620 <gen_err_message+0x48>
			else{sprintf(err_str,"Acc1 Low: %0.4f", data1);}
    d752:	1c30      	adds	r0, r6, #0
    d754:	4b15      	ldr	r3, [pc, #84]	; (d7ac <gen_err_message+0x1d4>)
    d756:	4798      	blx	r3
    d758:	4c15      	ldr	r4, [pc, #84]	; (d7b0 <gen_err_message+0x1d8>)
    d75a:	0002      	movs	r2, r0
    d75c:	000b      	movs	r3, r1
    d75e:	0028      	movs	r0, r5
    d760:	4927      	ldr	r1, [pc, #156]	; (d800 <gen_err_message+0x228>)
    d762:	47a0      	blx	r4
    d764:	e75c      	b.n	d620 <gen_err_message+0x48>
			else{sprintf(err_str,"Comp2 Low: %0.4f", data1);}
    d766:	1c30      	adds	r0, r6, #0
    d768:	4b10      	ldr	r3, [pc, #64]	; (d7ac <gen_err_message+0x1d4>)
    d76a:	4798      	blx	r3
    d76c:	4c10      	ldr	r4, [pc, #64]	; (d7b0 <gen_err_message+0x1d8>)
    d76e:	0002      	movs	r2, r0
    d770:	000b      	movs	r3, r1
    d772:	0028      	movs	r0, r5
    d774:	4923      	ldr	r1, [pc, #140]	; (d804 <gen_err_message+0x22c>)
    d776:	47a0      	blx	r4
    d778:	e752      	b.n	d620 <gen_err_message+0x48>
			else{sprintf(err_str,"Comp1 Low: %0.4f", data1);}
    d77a:	1c30      	adds	r0, r6, #0
    d77c:	4b0b      	ldr	r3, [pc, #44]	; (d7ac <gen_err_message+0x1d4>)
    d77e:	4798      	blx	r3
    d780:	4c0b      	ldr	r4, [pc, #44]	; (d7b0 <gen_err_message+0x1d8>)
    d782:	0002      	movs	r2, r0
    d784:	000b      	movs	r3, r1
    d786:	0028      	movs	r0, r5
    d788:	491f      	ldr	r1, [pc, #124]	; (d808 <gen_err_message+0x230>)
    d78a:	47a0      	blx	r4
    d78c:	e748      	b.n	d620 <gen_err_message+0x48>
			else{sprintf(err_str,"Acc2 Low: %0.4f", data1);}
    d78e:	1c30      	adds	r0, r6, #0
    d790:	4b06      	ldr	r3, [pc, #24]	; (d7ac <gen_err_message+0x1d4>)
    d792:	4798      	blx	r3
    d794:	4c06      	ldr	r4, [pc, #24]	; (d7b0 <gen_err_message+0x1d8>)
    d796:	0002      	movs	r2, r0
    d798:	000b      	movs	r3, r1
    d79a:	0028      	movs	r0, r5
    d79c:	491b      	ldr	r1, [pc, #108]	; (d80c <gen_err_message+0x234>)
    d79e:	47a0      	blx	r4
    d7a0:	e73e      	b.n	d620 <gen_err_message+0x48>
    d7a2:	46c0      	nop			; (mov r8, r8)
    d7a4:	0001d1c9 	.word	0x0001d1c9
    d7a8:	00025850 	.word	0x00025850
    d7ac:	0001fb6d 	.word	0x0001fb6d
    d7b0:	0001fe91 	.word	0x0001fe91
    d7b4:	0002596c 	.word	0x0002596c
    d7b8:	0001d0d1 	.word	0x0001d0d1
    d7bc:	00025890 	.word	0x00025890
    d7c0:	000258b4 	.word	0x000258b4
    d7c4:	000258d8 	.word	0x000258d8
    d7c8:	00025900 	.word	0x00025900
    d7cc:	42c80000 	.word	0x42c80000
    d7d0:	0001d939 	.word	0x0001d939
    d7d4:	00025928 	.word	0x00025928
    d7d8:	00025940 	.word	0x00025940
    d7dc:	00025980 	.word	0x00025980
    d7e0:	0001fd79 	.word	0x0001fd79
    d7e4:	00025994 	.word	0x00025994
    d7e8:	000259a8 	.word	0x000259a8
    d7ec:	000259bc 	.word	0x000259bc
    d7f0:	000259d0 	.word	0x000259d0
    d7f4:	000259e8 	.word	0x000259e8
    d7f8:	00025958 	.word	0x00025958
    d7fc:	000259fc 	.word	0x000259fc
    d800:	000258a4 	.word	0x000258a4
    d804:	00025914 	.word	0x00025914
    d808:	000258ec 	.word	0x000258ec
    d80c:	000258c8 	.word	0x000258c8

0000d810 <timer_callback_1s>:

void timer_callback_1s(void)
{

	
	current_input=input_1sec;
    d810:	2207      	movs	r2, #7
    d812:	4b01      	ldr	r3, [pc, #4]	; (d818 <timer_callback_1s+0x8>)
    d814:	601a      	str	r2, [r3, #0]


}
    d816:	4770      	bx	lr
    d818:	2000403c 	.word	0x2000403c

0000d81c <timer_callback_longbutton>:




void timer_callback_longbutton(void)
{
    d81c:	b510      	push	{r4, lr}
    d81e:	4809      	ldr	r0, [pc, #36]	; (d844 <timer_callback_longbutton+0x28>)
    d820:	6802      	ldr	r2, [r0, #0]

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	return (tc_module->SYNCBUSY.reg);
    d822:	6913      	ldr	r3, [r2, #16]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    d824:	2b00      	cmp	r3, #0
    d826:	d1fc      	bne.n	d822 <timer_callback_longbutton+0x6>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
    d828:	3340      	adds	r3, #64	; 0x40
    d82a:	7153      	strb	r3, [r2, #5]
	
	tc_stop_counter(&timerExtLong);
	tc_set_count_value(&timerExtLong, 0);
    d82c:	2100      	movs	r1, #0
    d82e:	4b06      	ldr	r3, [pc, #24]	; (d848 <timer_callback_longbutton+0x2c>)
    d830:	4798      	blx	r3
	}
}

inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
    d832:	4b06      	ldr	r3, [pc, #24]	; (d84c <timer_callback_longbutton+0x30>)
    d834:	6a1b      	ldr	r3, [r3, #32]
	if(!ioport_get_pin_level(buttonE)){
    d836:	069b      	lsls	r3, r3, #26
    d838:	d402      	bmi.n	d840 <timer_callback_longbutton+0x24>
		//  Double-check that button is still pressed
		current_input=input_powerdown;
    d83a:	2206      	movs	r2, #6
    d83c:	4b04      	ldr	r3, [pc, #16]	; (d850 <timer_callback_longbutton+0x34>)
    d83e:	601a      	str	r2, [r3, #0]
	}
	
}
    d840:	bd10      	pop	{r4, pc}
    d842:	46c0      	nop			; (mov r8, r8)
    d844:	200013a4 	.word	0x200013a4
    d848:	0001065d 	.word	0x0001065d
    d84c:	40002800 	.word	0x40002800
    d850:	2000403c 	.word	0x2000403c

0000d854 <wdt_enable>:
void wdt_enable(void){
    d854:	b500      	push	{lr}
    d856:	b083      	sub	sp, #12
	config->always_on            = false;
    d858:	2300      	movs	r3, #0
    d85a:	466a      	mov	r2, sp
	config->enable               = true;
    d85c:	4669      	mov	r1, sp
	config->always_on            = false;
    d85e:	7013      	strb	r3, [r2, #0]
	config->enable               = true;
    d860:	2201      	movs	r2, #1
	config->window_period        = WDT_PERIOD_NONE;
    d862:	70cb      	strb	r3, [r1, #3]
	config->enable               = true;
    d864:	704a      	strb	r2, [r1, #1]
	config->early_warning_period = WDT_PERIOD_NONE;
    d866:	710b      	strb	r3, [r1, #4]
	config->timeout_period       = WDT_PERIOD_16384CLK;
    d868:	320b      	adds	r2, #11
	wdt_set_config(&wdt_configuration);
    d86a:	4668      	mov	r0, sp
    d86c:	4b02      	ldr	r3, [pc, #8]	; (d878 <wdt_enable+0x24>)
    d86e:	708a      	strb	r2, [r1, #2]
    d870:	4798      	blx	r3
}
    d872:	b003      	add	sp, #12
    d874:	bd00      	pop	{pc}
    d876:	46c0      	nop			; (mov r8, r8)
    d878:	00003b61 	.word	0x00003b61

0000d87c <wdt_disable>:
void wdt_disable(void){
    d87c:	b500      	push	{lr}
    d87e:	b083      	sub	sp, #12
	config->always_on            = false;
    d880:	2300      	movs	r3, #0
    d882:	466a      	mov	r2, sp
	config->timeout_period       = WDT_PERIOD_16384CLK;
    d884:	4669      	mov	r1, sp
	config->always_on            = false;
    d886:	7013      	strb	r3, [r2, #0]
	config->timeout_period       = WDT_PERIOD_16384CLK;
    d888:	220c      	movs	r2, #12
	config->window_period        = WDT_PERIOD_NONE;
    d88a:	70cb      	strb	r3, [r1, #3]
	config->early_warning_period = WDT_PERIOD_NONE;
    d88c:	710b      	strb	r3, [r1, #4]
	wdt_configuration.enable = false;
    d88e:	704b      	strb	r3, [r1, #1]
	wdt_set_config(&wdt_configuration);
    d890:	4668      	mov	r0, sp
    d892:	4b02      	ldr	r3, [pc, #8]	; (d89c <wdt_disable+0x20>)
	config->timeout_period       = WDT_PERIOD_16384CLK;
    d894:	708a      	strb	r2, [r1, #2]
    d896:	4798      	blx	r3
}
    d898:	b003      	add	sp, #12
    d89a:	bd00      	pop	{pc}
    d89c:	00003b61 	.word	0x00003b61

0000d8a0 <idle_timeout>:
	if ((current_input == input_1sec) && (!isCharging)){
    d8a0:	4b0b      	ldr	r3, [pc, #44]	; (d8d0 <idle_timeout+0x30>)
    d8a2:	681a      	ldr	r2, [r3, #0]
    d8a4:	2a07      	cmp	r2, #7
    d8a6:	d003      	beq.n	d8b0 <idle_timeout+0x10>
    d8a8:	2200      	movs	r2, #0
    d8aa:	4b0a      	ldr	r3, [pc, #40]	; (d8d4 <idle_timeout+0x34>)
    d8ac:	601a      	str	r2, [r3, #0]
}
    d8ae:	4770      	bx	lr
	if ((current_input == input_1sec) && (!isCharging)){
    d8b0:	4a09      	ldr	r2, [pc, #36]	; (d8d8 <idle_timeout+0x38>)
    d8b2:	7812      	ldrb	r2, [r2, #0]
    d8b4:	b2d2      	uxtb	r2, r2
    d8b6:	2a00      	cmp	r2, #0
    d8b8:	d1f6      	bne.n	d8a8 <idle_timeout+0x8>
		idle_seconds++;
    d8ba:	4806      	ldr	r0, [pc, #24]	; (d8d4 <idle_timeout+0x34>)
    d8bc:	6801      	ldr	r1, [r0, #0]
    d8be:	3101      	adds	r1, #1
    d8c0:	6001      	str	r1, [r0, #0]
	if (idle_seconds>IDLE_MAX_S){
    d8c2:	293c      	cmp	r1, #60	; 0x3c
    d8c4:	d9f3      	bls.n	d8ae <idle_timeout+0xe>
		current_input = input_powerdown;
    d8c6:	2106      	movs	r1, #6
		idle_seconds = 0;
    d8c8:	6002      	str	r2, [r0, #0]
		current_input = input_powerdown;
    d8ca:	6019      	str	r1, [r3, #0]
}
    d8cc:	e7ef      	b.n	d8ae <idle_timeout+0xe>
    d8ce:	46c0      	nop			; (mov r8, r8)
    d8d0:	2000403c 	.word	0x2000403c
    d8d4:	20000e74 	.word	0x20000e74
    d8d8:	20000f11 	.word	0x20000f11

0000d8dc <laser_timeout>:
void laser_timeout(void){
    d8dc:	b510      	push	{r4, lr}
	if (isLaserOn() && (current_input == input_1sec))
    d8de:	4b0c      	ldr	r3, [pc, #48]	; (d910 <laser_timeout+0x34>)
    d8e0:	4798      	blx	r3
    d8e2:	2800      	cmp	r0, #0
    d8e4:	d003      	beq.n	d8ee <laser_timeout+0x12>
    d8e6:	4c0b      	ldr	r4, [pc, #44]	; (d914 <laser_timeout+0x38>)
    d8e8:	6823      	ldr	r3, [r4, #0]
    d8ea:	2b07      	cmp	r3, #7
    d8ec:	d003      	beq.n	d8f6 <laser_timeout+0x1a>
		laserSecondsOn = 0;
    d8ee:	2200      	movs	r2, #0
    d8f0:	4b09      	ldr	r3, [pc, #36]	; (d918 <laser_timeout+0x3c>)
    d8f2:	701a      	strb	r2, [r3, #0]
}
    d8f4:	bd10      	pop	{r4, pc}
		laserSecondsOn++;
    d8f6:	4a08      	ldr	r2, [pc, #32]	; (d918 <laser_timeout+0x3c>)
    d8f8:	7813      	ldrb	r3, [r2, #0]
    d8fa:	3301      	adds	r3, #1
    d8fc:	b2db      	uxtb	r3, r3
    d8fe:	7013      	strb	r3, [r2, #0]
		if (laserSecondsOn>LASER_TIMEOUT_S){
    d900:	2b1e      	cmp	r3, #30
    d902:	d9f7      	bls.n	d8f4 <laser_timeout+0x18>
			rangefinder_on_off(false);
    d904:	4b05      	ldr	r3, [pc, #20]	; (d91c <laser_timeout+0x40>)
    d906:	2000      	movs	r0, #0
    d908:	4798      	blx	r3
			current_input = input_laser_timeout;
    d90a:	2317      	movs	r3, #23
    d90c:	6023      	str	r3, [r4, #0]
    d90e:	e7f1      	b.n	d8f4 <laser_timeout+0x18>
    d910:	0000c401 	.word	0x0000c401
    d914:	2000403c 	.word	0x2000403c
    d918:	20000e78 	.word	0x20000e78
    d91c:	0000c5dd 	.word	0x0000c5dd

0000d920 <configure_timer_1s>:
void configure_timer_1s(void){
    d920:	b510      	push	{r4, lr}
    d922:	b08e      	sub	sp, #56	; 0x38
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    d924:	2300      	movs	r3, #0
    d926:	466a      	mov	r2, sp
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    d928:	2000      	movs	r0, #0
    d92a:	2100      	movs	r1, #0
	config->run_in_standby             = false;
    d92c:	7053      	strb	r3, [r2, #1]
	config->on_demand                  = false;
    d92e:	7093      	strb	r3, [r2, #2]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    d930:	9008      	str	r0, [sp, #32]
    d932:	9109      	str	r1, [sp, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    d934:	8513      	strh	r3, [r2, #40]	; 0x28
	config->double_buffering_enabled = false;
    d936:	4669      	mov	r1, sp
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    d938:	7193      	strb	r3, [r2, #6]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    d93a:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    d93c:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    d93e:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    d940:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    d942:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    d944:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    d946:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    d948:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    d94a:	7713      	strb	r3, [r2, #28]
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    d94c:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    d94e:	8593      	strh	r3, [r2, #44]	; 0x2c
	config->double_buffering_enabled = false;
    d950:	2200      	movs	r2, #0
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    d952:	9305      	str	r3, [sp, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    d954:	9306      	str	r3, [sp, #24]
	config->double_buffering_enabled = false;
    d956:	3334      	adds	r3, #52	; 0x34
    d958:	54ca      	strb	r2, [r1, r3]
	config_tc.counter_size    = TC_COUNTER_SIZE_8BIT;
    d95a:	3b30      	subs	r3, #48	; 0x30
    d95c:	70cb      	strb	r3, [r1, #3]
	config_tc.clock_prescaler =     TC_CLOCK_PRESCALER_DIV1024 ;//  TC_CLOCK_PRESCALER_DIV1024;
    d95e:	23e0      	movs	r3, #224	; 0xe0
    d960:	00db      	lsls	r3, r3, #3
    d962:	808b      	strh	r3, [r1, #4]
	config_tc.reload_action =  TC_RELOAD_ACTION_PRESC;
    d964:	2210      	movs	r2, #16
	config_tc.clock_source = GCLK_FOR_TIMERS;
    d966:	2302      	movs	r3, #2
	config_tc.reload_action =  TC_RELOAD_ACTION_PRESC;
    d968:	71ca      	strb	r2, [r1, #7]
	config_tc.clock_source = GCLK_FOR_TIMERS;
    d96a:	700b      	strb	r3, [r1, #0]
	config_tc.counter_8_bit.period = 0x1F;//0x1F = 31d, 1 second exactly on counter
    d96c:	4668      	mov	r0, sp
    d96e:	211f      	movs	r1, #31
	if (timer1Sec.hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE){
    d970:	4c20      	ldr	r4, [pc, #128]	; (d9f4 <configure_timer_1s+0xd4>)
	config_tc.counter_8_bit.period = 0x1F;//0x1F = 31d, 1 second exactly on counter
    d972:	3219      	adds	r2, #25
    d974:	5481      	strb	r1, [r0, r2]
	if (timer1Sec.hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE){
    d976:	6822      	ldr	r2, [r4, #0]
    d978:	6811      	ldr	r1, [r2, #0]
    d97a:	420b      	tst	r3, r1
    d97c:	d12f      	bne.n	d9de <configure_timer_1s+0xbe>
	tc_init(&timer1Sec, TC1, &config_tc);
    d97e:	466a      	mov	r2, sp
    d980:	491d      	ldr	r1, [pc, #116]	; (d9f8 <configure_timer_1s+0xd8>)
    d982:	0020      	movs	r0, r4
    d984:	4b1d      	ldr	r3, [pc, #116]	; (d9fc <configure_timer_1s+0xdc>)
    d986:	4798      	blx	r3
    d988:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    d98a:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    d98c:	2b00      	cmp	r3, #0
    d98e:	d1fc      	bne.n	d98a <configure_timer_1s+0x6a>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    d990:	2102      	movs	r1, #2
    d992:	6813      	ldr	r3, [r2, #0]
    d994:	430b      	orrs	r3, r1
    d996:	6013      	str	r3, [r2, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    d998:	6823      	ldr	r3, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    d99a:	691a      	ldr	r2, [r3, #16]

	while (tc_is_syncing(module_inst)) {
    d99c:	2a00      	cmp	r2, #0
    d99e:	d1fc      	bne.n	d99a <configure_timer_1s+0x7a>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    d9a0:	711a      	strb	r2, [r3, #4]
	return (tc_module->SYNCBUSY.reg);
    d9a2:	691a      	ldr	r2, [r3, #16]

	while (tc_is_syncing(module_inst)) {
    d9a4:	2a00      	cmp	r2, #0
    d9a6:	d1fc      	bne.n	d9a2 <configure_timer_1s+0x82>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
    d9a8:	3220      	adds	r2, #32
    d9aa:	715a      	strb	r2, [r3, #5]
	tc_register_callback(
    d9ac:	4914      	ldr	r1, [pc, #80]	; (da00 <configure_timer_1s+0xe0>)
    d9ae:	2200      	movs	r2, #0
    d9b0:	0020      	movs	r0, r4
    d9b2:	4b14      	ldr	r3, [pc, #80]	; (da04 <configure_timer_1s+0xe4>)
    d9b4:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    d9b6:	6820      	ldr	r0, [r4, #0]
    d9b8:	4b13      	ldr	r3, [pc, #76]	; (da08 <configure_timer_1s+0xe8>)
    d9ba:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    d9bc:	4b13      	ldr	r3, [pc, #76]	; (da0c <configure_timer_1s+0xec>)
    d9be:	5c1a      	ldrb	r2, [r3, r0]
    d9c0:	231f      	movs	r3, #31
    d9c2:	4013      	ands	r3, r2
    d9c4:	2201      	movs	r2, #1
    d9c6:	0011      	movs	r1, r2
    d9c8:	4099      	lsls	r1, r3
    d9ca:	4b11      	ldr	r3, [pc, #68]	; (da10 <configure_timer_1s+0xf0>)
    d9cc:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    d9ce:	2101      	movs	r1, #1
    d9d0:	7e63      	ldrb	r3, [r4, #25]
    d9d2:	430b      	orrs	r3, r1
    d9d4:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    d9d6:	6823      	ldr	r3, [r4, #0]
    d9d8:	725a      	strb	r2, [r3, #9]
}
    d9da:	b00e      	add	sp, #56	; 0x38
    d9dc:	bd10      	pop	{r4, pc}
	return (tc_module->SYNCBUSY.reg);
    d9de:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    d9e0:	2b00      	cmp	r3, #0
    d9e2:	d1fc      	bne.n	d9de <configure_timer_1s+0xbe>
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    d9e4:	2102      	movs	r1, #2
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    d9e6:	3333      	adds	r3, #51	; 0x33
    d9e8:	7213      	strb	r3, [r2, #8]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    d9ea:	7293      	strb	r3, [r2, #10]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    d9ec:	6813      	ldr	r3, [r2, #0]
    d9ee:	438b      	bics	r3, r1
    d9f0:	6013      	str	r3, [r2, #0]
    d9f2:	e7c4      	b.n	d97e <configure_timer_1s+0x5e>
    d9f4:	200013c0 	.word	0x200013c0
    d9f8:	42002400 	.word	0x42002400
    d9fc:	000102f9 	.word	0x000102f9
    da00:	0000d811 	.word	0x0000d811
    da04:	00010165 	.word	0x00010165
    da08:	000102b9 	.word	0x000102b9
    da0c:	00025a10 	.word	0x00025a10
    da10:	e000e100 	.word	0xe000e100

0000da14 <configure_timer_counter>:
void configure_timer_counter(void){
    da14:	b510      	push	{r4, lr}
    da16:	b08e      	sub	sp, #56	; 0x38
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    da18:	2300      	movs	r3, #0
    da1a:	466a      	mov	r2, sp
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    da1c:	2100      	movs	r1, #0
    da1e:	2000      	movs	r0, #0
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    da20:	70d3      	strb	r3, [r2, #3]
	config->run_in_standby             = false;
    da22:	7053      	strb	r3, [r2, #1]
	config->on_demand                  = false;
    da24:	7093      	strb	r3, [r2, #2]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    da26:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    da28:	71d3      	strb	r3, [r2, #7]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    da2a:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    da2c:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    da2e:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    da30:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    da32:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    da34:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    da36:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    da38:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    da3a:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    da3c:	9008      	str	r0, [sp, #32]
    da3e:	9109      	str	r1, [sp, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    da40:	8513      	strh	r3, [r2, #40]	; 0x28
	config->double_buffering_enabled = false;
    da42:	4669      	mov	r1, sp
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    da44:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    da46:	8593      	strh	r3, [r2, #44]	; 0x2c
	config->double_buffering_enabled = false;
    da48:	2200      	movs	r2, #0
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    da4a:	9305      	str	r3, [sp, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    da4c:	9306      	str	r3, [sp, #24]
	config->double_buffering_enabled = false;
    da4e:	3334      	adds	r3, #52	; 0x34
    da50:	54ca      	strb	r2, [r1, r3]
	config_tc.clock_prescaler =     TC_CLOCK_PRESCALER_DIV1024 ;//  TC_CLOCK_PRESCALER_DIV1024;
    da52:	23e0      	movs	r3, #224	; 0xe0
    da54:	00db      	lsls	r3, r3, #3
    da56:	808b      	strh	r3, [r1, #4]
	config_tc.clock_source =		GCLK_FOR_TIMERS;
    da58:	2302      	movs	r3, #2
	if (timerCounter.hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE){
    da5a:	4c17      	ldr	r4, [pc, #92]	; (dab8 <configure_timer_counter+0xa4>)
	config_tc.clock_source =		GCLK_FOR_TIMERS;
    da5c:	700b      	strb	r3, [r1, #0]
	if (timerCounter.hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE){
    da5e:	6822      	ldr	r2, [r4, #0]
    da60:	6811      	ldr	r1, [r2, #0]
    da62:	420b      	tst	r3, r1
    da64:	d11c      	bne.n	daa0 <configure_timer_counter+0x8c>
	tc_init(&timerCounter, TC4, &config_tc);
    da66:	466a      	mov	r2, sp
    da68:	4914      	ldr	r1, [pc, #80]	; (dabc <configure_timer_counter+0xa8>)
    da6a:	0020      	movs	r0, r4
    da6c:	4b14      	ldr	r3, [pc, #80]	; (dac0 <configure_timer_counter+0xac>)
    da6e:	4798      	blx	r3
    da70:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    da72:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    da74:	2b00      	cmp	r3, #0
    da76:	d1fc      	bne.n	da72 <configure_timer_counter+0x5e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    da78:	2102      	movs	r1, #2
    da7a:	6813      	ldr	r3, [r2, #0]
	tc_set_count_value(&timerCounter, 0);	
    da7c:	0020      	movs	r0, r4
    da7e:	430b      	orrs	r3, r1
    da80:	6013      	str	r3, [r2, #0]
    da82:	2100      	movs	r1, #0
    da84:	4b0f      	ldr	r3, [pc, #60]	; (dac4 <configure_timer_counter+0xb0>)
    da86:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    da88:	6823      	ldr	r3, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    da8a:	691a      	ldr	r2, [r3, #16]
	while (tc_is_syncing(module_inst)) {
    da8c:	2a00      	cmp	r2, #0
    da8e:	d1fc      	bne.n	da8a <configure_timer_counter+0x76>
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    da90:	711a      	strb	r2, [r3, #4]
	return (tc_module->SYNCBUSY.reg);
    da92:	691a      	ldr	r2, [r3, #16]
	while (tc_is_syncing(module_inst)) {
    da94:	2a00      	cmp	r2, #0
    da96:	d1fc      	bne.n	da92 <configure_timer_counter+0x7e>
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
    da98:	3220      	adds	r2, #32
    da9a:	715a      	strb	r2, [r3, #5]
}
    da9c:	b00e      	add	sp, #56	; 0x38
    da9e:	bd10      	pop	{r4, pc}
	return (tc_module->SYNCBUSY.reg);
    daa0:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    daa2:	2b00      	cmp	r3, #0
    daa4:	d1fc      	bne.n	daa0 <configure_timer_counter+0x8c>
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    daa6:	2102      	movs	r1, #2
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    daa8:	3333      	adds	r3, #51	; 0x33
    daaa:	7213      	strb	r3, [r2, #8]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    daac:	7293      	strb	r3, [r2, #10]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    daae:	6813      	ldr	r3, [r2, #0]
    dab0:	438b      	bics	r3, r1
    dab2:	6013      	str	r3, [r2, #0]
    dab4:	e7d7      	b.n	da66 <configure_timer_counter+0x52>
    dab6:	46c0      	nop			; (mov r8, r8)
    dab8:	200013dc 	.word	0x200013dc
    dabc:	43000800 	.word	0x43000800
    dac0:	000102f9 	.word	0x000102f9
    dac4:	0001065d 	.word	0x0001065d

0000dac8 <configure_timer_ExtLong>:
void configure_timer_ExtLong(void){
    dac8:	b510      	push	{r4, lr}
    daca:	b08e      	sub	sp, #56	; 0x38
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    dacc:	2300      	movs	r3, #0
    dace:	466a      	mov	r2, sp
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    dad0:	2000      	movs	r0, #0
    dad2:	2100      	movs	r1, #0
	config->run_in_standby             = false;
    dad4:	7053      	strb	r3, [r2, #1]
	config->on_demand                  = false;
    dad6:	7093      	strb	r3, [r2, #2]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    dad8:	9008      	str	r0, [sp, #32]
    dada:	9109      	str	r1, [sp, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    dadc:	8513      	strh	r3, [r2, #40]	; 0x28
	config->double_buffering_enabled = false;
    dade:	4669      	mov	r1, sp
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    dae0:	7193      	strb	r3, [r2, #6]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    dae2:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    dae4:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    dae6:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    dae8:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    daea:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    daec:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    daee:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    daf0:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    daf2:	7713      	strb	r3, [r2, #28]
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    daf4:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    daf6:	8593      	strh	r3, [r2, #44]	; 0x2c
	config->double_buffering_enabled = false;
    daf8:	2200      	movs	r2, #0
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    dafa:	9305      	str	r3, [sp, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    dafc:	9306      	str	r3, [sp, #24]
	config->double_buffering_enabled = false;
    dafe:	3334      	adds	r3, #52	; 0x34
    db00:	54ca      	strb	r2, [r1, r3]
	config_tc.counter_size    = TC_COUNTER_SIZE_8BIT;
    db02:	3b30      	subs	r3, #48	; 0x30
    db04:	70cb      	strb	r3, [r1, #3]
	config_tc.clock_prescaler =    TC_CLOCK_PRESCALER_DIV1024;
    db06:	23e0      	movs	r3, #224	; 0xe0
    db08:	00db      	lsls	r3, r3, #3
    db0a:	808b      	strh	r3, [r1, #4]
	config_tc.reload_action = TC_RELOAD_ACTION_PRESC;
    db0c:	2210      	movs	r2, #16
	config_tc.clock_source = GCLK_FOR_TIMERS;
    db0e:	2302      	movs	r3, #2
	config_tc.reload_action = TC_RELOAD_ACTION_PRESC;
    db10:	71ca      	strb	r2, [r1, #7]
	config_tc.clock_source = GCLK_FOR_TIMERS;
    db12:	700b      	strb	r3, [r1, #0]
	config_tc.counter_8_bit.period = temp;
    db14:	4668      	mov	r0, sp
    db16:	215d      	movs	r1, #93	; 0x5d
	if (timerExtLong.hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE){
    db18:	4c20      	ldr	r4, [pc, #128]	; (db9c <configure_timer_ExtLong+0xd4>)
	config_tc.counter_8_bit.period = temp;
    db1a:	3219      	adds	r2, #25
    db1c:	5481      	strb	r1, [r0, r2]
	if (timerExtLong.hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE){
    db1e:	6822      	ldr	r2, [r4, #0]
    db20:	6811      	ldr	r1, [r2, #0]
    db22:	420b      	tst	r3, r1
    db24:	d12f      	bne.n	db86 <configure_timer_ExtLong+0xbe>
	tc_init(&timerExtLong, TC0, &config_tc);
    db26:	466a      	mov	r2, sp
    db28:	491d      	ldr	r1, [pc, #116]	; (dba0 <configure_timer_ExtLong+0xd8>)
    db2a:	0020      	movs	r0, r4
    db2c:	4b1d      	ldr	r3, [pc, #116]	; (dba4 <configure_timer_ExtLong+0xdc>)
    db2e:	4798      	blx	r3
    db30:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    db32:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    db34:	2b00      	cmp	r3, #0
    db36:	d1fc      	bne.n	db32 <configure_timer_ExtLong+0x6a>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    db38:	2102      	movs	r1, #2
    db3a:	6813      	ldr	r3, [r2, #0]
    db3c:	430b      	orrs	r3, r1
    db3e:	6013      	str	r3, [r2, #0]
    db40:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    db42:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    db44:	2b00      	cmp	r3, #0
    db46:	d1fc      	bne.n	db42 <configure_timer_ExtLong+0x7a>
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
    db48:	3340      	adds	r3, #64	; 0x40
    db4a:	7153      	strb	r3, [r2, #5]
	tc_set_count_value(&timerExtLong, 0);
    db4c:	2100      	movs	r1, #0
    db4e:	0020      	movs	r0, r4
    db50:	4b15      	ldr	r3, [pc, #84]	; (dba8 <configure_timer_ExtLong+0xe0>)
    db52:	4798      	blx	r3
	tc_register_callback(
    db54:	2200      	movs	r2, #0
    db56:	4915      	ldr	r1, [pc, #84]	; (dbac <configure_timer_ExtLong+0xe4>)
    db58:	0020      	movs	r0, r4
    db5a:	4b15      	ldr	r3, [pc, #84]	; (dbb0 <configure_timer_ExtLong+0xe8>)
    db5c:	4798      	blx	r3
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    db5e:	6820      	ldr	r0, [r4, #0]
    db60:	4b14      	ldr	r3, [pc, #80]	; (dbb4 <configure_timer_ExtLong+0xec>)
    db62:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    db64:	4b14      	ldr	r3, [pc, #80]	; (dbb8 <configure_timer_ExtLong+0xf0>)
    db66:	5c1a      	ldrb	r2, [r3, r0]
    db68:	231f      	movs	r3, #31
    db6a:	4013      	ands	r3, r2
    db6c:	2201      	movs	r2, #1
    db6e:	0011      	movs	r1, r2
    db70:	4099      	lsls	r1, r3
    db72:	4b12      	ldr	r3, [pc, #72]	; (dbbc <configure_timer_ExtLong+0xf4>)
    db74:	6019      	str	r1, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    db76:	2101      	movs	r1, #1
    db78:	7e63      	ldrb	r3, [r4, #25]
    db7a:	430b      	orrs	r3, r1
    db7c:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    db7e:	6823      	ldr	r3, [r4, #0]
    db80:	725a      	strb	r2, [r3, #9]
}
    db82:	b00e      	add	sp, #56	; 0x38
    db84:	bd10      	pop	{r4, pc}
	return (tc_module->SYNCBUSY.reg);
    db86:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    db88:	2b00      	cmp	r3, #0
    db8a:	d1fc      	bne.n	db86 <configure_timer_ExtLong+0xbe>
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    db8c:	2102      	movs	r1, #2
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    db8e:	3333      	adds	r3, #51	; 0x33
    db90:	7213      	strb	r3, [r2, #8]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    db92:	7293      	strb	r3, [r2, #10]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    db94:	6813      	ldr	r3, [r2, #0]
    db96:	438b      	bics	r3, r1
    db98:	6013      	str	r3, [r2, #0]
    db9a:	e7c4      	b.n	db26 <configure_timer_ExtLong+0x5e>
    db9c:	200013a4 	.word	0x200013a4
    dba0:	42002000 	.word	0x42002000
    dba4:	000102f9 	.word	0x000102f9
    dba8:	0001065d 	.word	0x0001065d
    dbac:	0000d81d 	.word	0x0000d81d
    dbb0:	00010165 	.word	0x00010165
    dbb4:	000102b9 	.word	0x000102b9
    dbb8:	00025a10 	.word	0x00025a10
    dbbc:	e000e100 	.word	0xe000e100

0000dbc0 <getCurrentMs>:





uint32_t getCurrentMs(void){
    dbc0:	b510      	push	{r4, lr}
	//  32khz clock, 1024  prescaler.
	//  (32khz clock/sec) * (1 count/1024 clock) * (1 sec / 1000 ms) = .032 count/ms
	//  Multiply by 32 to return ms, equivalent to <<5.
	return tc_get_count_value(&timerCounter)<<5; 
    dbc2:	4802      	ldr	r0, [pc, #8]	; (dbcc <getCurrentMs+0xc>)
    dbc4:	4b02      	ldr	r3, [pc, #8]	; (dbd0 <getCurrentMs+0x10>)
    dbc6:	4798      	blx	r3
    dbc8:	0140      	lsls	r0, r0, #5
}
    dbca:	bd10      	pop	{r4, pc}
    dbcc:	200013dc 	.word	0x200013dc
    dbd0:	0001068d 	.word	0x0001068d

0000dbd4 <timerStartExt>:

void timerStartExt(void){
    dbd4:	b510      	push	{r4, lr}
	tc_set_count_value(&timerExtLong, 0);
    dbd6:	4c08      	ldr	r4, [pc, #32]	; (dbf8 <timerStartExt+0x24>)
    dbd8:	4b08      	ldr	r3, [pc, #32]	; (dbfc <timerStartExt+0x28>)
    dbda:	2100      	movs	r1, #0
    dbdc:	0020      	movs	r0, r4
    dbde:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    dbe0:	6823      	ldr	r3, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    dbe2:	691a      	ldr	r2, [r3, #16]
	while (tc_is_syncing(module_inst)) {
    dbe4:	2a00      	cmp	r2, #0
    dbe6:	d1fc      	bne.n	dbe2 <timerStartExt+0xe>
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    dbe8:	711a      	strb	r2, [r3, #4]
	return (tc_module->SYNCBUSY.reg);
    dbea:	691a      	ldr	r2, [r3, #16]
	while (tc_is_syncing(module_inst)) {
    dbec:	2a00      	cmp	r2, #0
    dbee:	d1fc      	bne.n	dbea <timerStartExt+0x16>
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
    dbf0:	3220      	adds	r2, #32
    dbf2:	715a      	strb	r2, [r3, #5]
	tc_start_counter(&timerExtLong);
}
    dbf4:	bd10      	pop	{r4, pc}
    dbf6:	46c0      	nop			; (mov r8, r8)
    dbf8:	200013a4 	.word	0x200013a4
    dbfc:	0001065d 	.word	0x0001065d

0000dc00 <timerStopExt>:
void timerStopExt(void){
    dc00:	4b03      	ldr	r3, [pc, #12]	; (dc10 <timerStopExt+0x10>)
    dc02:	681a      	ldr	r2, [r3, #0]
	return (tc_module->SYNCBUSY.reg);
    dc04:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    dc06:	2b00      	cmp	r3, #0
    dc08:	d1fc      	bne.n	dc04 <timerStopExt+0x4>
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
    dc0a:	3340      	adds	r3, #64	; 0x40
    dc0c:	7153      	strb	r3, [r2, #5]
	tc_stop_counter(&timerExtLong);
}
    dc0e:	4770      	bx	lr
    dc10:	200013a4 	.word	0x200013a4

0000dc14 <powerdown_timer_1s>:


void powerdown_timer_1s(void){
    dc14:	4b06      	ldr	r3, [pc, #24]	; (dc30 <powerdown_timer_1s+0x1c>)
    dc16:	681a      	ldr	r2, [r3, #0]
	return (tc_module->SYNCBUSY.reg);
    dc18:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    dc1a:	2b00      	cmp	r3, #0
    dc1c:	d1fc      	bne.n	dc18 <powerdown_timer_1s+0x4>
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    dc1e:	2102      	movs	r1, #2
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    dc20:	3333      	adds	r3, #51	; 0x33
    dc22:	7213      	strb	r3, [r2, #8]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    dc24:	7293      	strb	r3, [r2, #10]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    dc26:	6813      	ldr	r3, [r2, #0]
    dc28:	438b      	bics	r3, r1
    dc2a:	6013      	str	r3, [r2, #0]
	tc_disable(&timer1Sec);
}
    dc2c:	4770      	bx	lr
    dc2e:	46c0      	nop			; (mov r8, r8)
    dc30:	200013c0 	.word	0x200013c0

0000dc34 <powerdown_timer_ExtLong>:

void powerdown_timer_ExtLong(void){
    dc34:	4b06      	ldr	r3, [pc, #24]	; (dc50 <powerdown_timer_ExtLong+0x1c>)
    dc36:	681a      	ldr	r2, [r3, #0]
	return (tc_module->SYNCBUSY.reg);
    dc38:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    dc3a:	2b00      	cmp	r3, #0
    dc3c:	d1fc      	bne.n	dc38 <powerdown_timer_ExtLong+0x4>
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    dc3e:	2102      	movs	r1, #2
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    dc40:	3333      	adds	r3, #51	; 0x33
    dc42:	7213      	strb	r3, [r2, #8]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    dc44:	7293      	strb	r3, [r2, #10]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    dc46:	6813      	ldr	r3, [r2, #0]
    dc48:	438b      	bics	r3, r1
    dc4a:	6013      	str	r3, [r2, #0]
	tc_disable(&timerExtLong);
	
	
}
    dc4c:	4770      	bx	lr
    dc4e:	46c0      	nop			; (mov r8, r8)
    dc50:	200013a4 	.word	0x200013a4

0000dc54 <sd_mmc_init>:
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    dc54:	2204      	movs	r2, #4
    dc56:	4b03      	ldr	r3, [pc, #12]	; (dc64 <sd_mmc_init+0x10>)
    dc58:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
    dc5a:	4b03      	ldr	r3, [pc, #12]	; (dc68 <sd_mmc_init+0x14>)
    dc5c:	32fb      	adds	r2, #251	; 0xfb
    dc5e:	701a      	strb	r2, [r3, #0]
	//driver_init(); //  Kfausnight 20200721.  Not needed; SPI initiated in comm.c code
}
    dc60:	4770      	bx	lr
    dc62:	46c0      	nop			; (mov r8, r8)
    dc64:	20000e80 	.word	0x20000e80
    dc68:	20000ea4 	.word	0x20000ea4

0000dc6c <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    dc6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc6e:	4645      	mov	r5, r8
    dc70:	46de      	mov	lr, fp
    dc72:	4657      	mov	r7, sl
    dc74:	464e      	mov	r6, r9
    dc76:	b5e0      	push	{r5, r6, r7, lr}
    dc78:	0005      	movs	r5, r0
    dc7a:	b087      	sub	sp, #28
	if (slot >= SD_MMC_MEM_CNT) {
    dc7c:	2800      	cmp	r0, #0
    dc7e:	d00c      	beq.n	dc9a <sd_mmc_check+0x2e>
    dc80:	4c6f      	ldr	r4, [pc, #444]	; (de40 <sd_mmc_check+0x1d4>)
		return SD_MMC_ERR_SLOT;
    dc82:	2504      	movs	r5, #4
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    dc84:	7823      	ldrb	r3, [r4, #0]
    dc86:	2b00      	cmp	r3, #0
    dc88:	d023      	beq.n	dcd2 <sd_mmc_check+0x66>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
    dc8a:	0028      	movs	r0, r5
    dc8c:	b007      	add	sp, #28
    dc8e:	bc3c      	pop	{r2, r3, r4, r5}
    dc90:	4690      	mov	r8, r2
    dc92:	4699      	mov	r9, r3
    dc94:	46a2      	mov	sl, r4
    dc96:	46ab      	mov	fp, r5
    dc98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    dc9a:	4e6a      	ldr	r6, [pc, #424]	; (de44 <sd_mmc_check+0x1d8>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    dc9c:	7ab3      	ldrb	r3, [r6, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    dc9e:	3b03      	subs	r3, #3
    dca0:	2b01      	cmp	r3, #1
    dca2:	d949      	bls.n	dd38 <sd_mmc_check+0xcc>
    dca4:	7fb3      	ldrb	r3, [r6, #30]
    dca6:	6831      	ldr	r1, [r6, #0]
    dca8:	1e58      	subs	r0, r3, #1
    dcaa:	4183      	sbcs	r3, r0
    dcac:	7b72      	ldrb	r2, [r6, #13]
    dcae:	b2db      	uxtb	r3, r3
	sd_mmc_slot_sel = slot;
    dcb0:	2000      	movs	r0, #0
    dcb2:	4c63      	ldr	r4, [pc, #396]	; (de40 <sd_mmc_check+0x1d4>)
    dcb4:	4680      	mov	r8, r0
    dcb6:	7020      	strb	r0, [r4, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    dcb8:	4863      	ldr	r0, [pc, #396]	; (de48 <sd_mmc_check+0x1dc>)
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    dcba:	4f64      	ldr	r7, [pc, #400]	; (de4c <sd_mmc_check+0x1e0>)
	sd_mmc_card = &sd_mmc_cards[slot];
    dcbc:	6006      	str	r6, [r0, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    dcbe:	2000      	movs	r0, #0
    dcc0:	47b8      	blx	r7
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    dcc2:	7ab3      	ldrb	r3, [r6, #10]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    dcc4:	46b9      	mov	r9, r7
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    dcc6:	2b02      	cmp	r3, #2
    dcc8:	d007      	beq.n	dcda <sd_mmc_check+0x6e>
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    dcca:	7823      	ldrb	r3, [r4, #0]
    dccc:	2500      	movs	r5, #0
    dcce:	2b00      	cmp	r3, #0
    dcd0:	d1db      	bne.n	dc8a <sd_mmc_check+0x1e>
		driver_deselect_device(sd_mmc_slot_sel);
    dcd2:	2000      	movs	r0, #0
    dcd4:	4b5e      	ldr	r3, [pc, #376]	; (de50 <sd_mmc_check+0x1e4>)
    dcd6:	4798      	blx	r3
    dcd8:	e7d7      	b.n	dc8a <sd_mmc_check+0x1e>
	sd_mmc_card->type = CARD_TYPE_SD;
    dcda:	2201      	movs	r2, #1
    dcdc:	4b5a      	ldr	r3, [pc, #360]	; (de48 <sd_mmc_check+0x1dc>)
    dcde:	681b      	ldr	r3, [r3, #0]
    dce0:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    dce2:	4642      	mov	r2, r8
    dce4:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
    dce6:	4642      	mov	r2, r8
    dce8:	811a      	strh	r2, [r3, #8]
	spi_select_slave(&spi_main, &slave_SD, false);	//Added by KFausnight
    dcea:	4b5a      	ldr	r3, [pc, #360]	; (de54 <sd_mmc_check+0x1e8>)
    dcec:	2200      	movs	r2, #0
    dcee:	469b      	mov	fp, r3
    dcf0:	4b59      	ldr	r3, [pc, #356]	; (de58 <sd_mmc_check+0x1ec>)
    dcf2:	4659      	mov	r1, fp
    dcf4:	469a      	mov	sl, r3
    dcf6:	0018      	movs	r0, r3
    dcf8:	4b58      	ldr	r3, [pc, #352]	; (de5c <sd_mmc_check+0x1f0>)
    dcfa:	4698      	mov	r8, r3
    dcfc:	4798      	blx	r3
	delay_ms(1);//Added by KFausnight
    dcfe:	4e58      	ldr	r6, [pc, #352]	; (de60 <sd_mmc_check+0x1f4>)
    dd00:	2001      	movs	r0, #1
    dd02:	47b0      	blx	r6
	driver_send_clock();
    dd04:	4b57      	ldr	r3, [pc, #348]	; (de64 <sd_mmc_check+0x1f8>)
    dd06:	4798      	blx	r3
	delay_ms(1);//Added by KFausnight
    dd08:	2001      	movs	r0, #1
    dd0a:	47b0      	blx	r6
	spi_select_slave(&spi_main, &slave_SD, true);	//Added by KFausnight
    dd0c:	4659      	mov	r1, fp
    dd0e:	2201      	movs	r2, #1
    dd10:	4650      	mov	r0, sl
    dd12:	47c0      	blx	r8
	delay_ms(1);//Added by KFausnight
    dd14:	2001      	movs	r0, #1
    dd16:	47b0      	blx	r6
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    dd18:	2088      	movs	r0, #136	; 0x88
    dd1a:	2100      	movs	r1, #0
    dd1c:	0140      	lsls	r0, r0, #5
    dd1e:	4e52      	ldr	r6, [pc, #328]	; (de68 <sd_mmc_check+0x1fc>)
    dd20:	47b0      	blx	r6
    dd22:	2800      	cmp	r0, #0
    dd24:	d112      	bne.n	dd4c <sd_mmc_check+0xe0>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    dd26:	2203      	movs	r2, #3
    dd28:	4b47      	ldr	r3, [pc, #284]	; (de48 <sd_mmc_check+0x1dc>)
	return SD_MMC_ERR_UNUSABLE;
    dd2a:	2503      	movs	r5, #3
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    dd2c:	681b      	ldr	r3, [r3, #0]
    dd2e:	729a      	strb	r2, [r3, #10]
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    dd30:	7823      	ldrb	r3, [r4, #0]
    dd32:	2b00      	cmp	r3, #0
    dd34:	d1a9      	bne.n	dc8a <sd_mmc_check+0x1e>
    dd36:	e7cc      	b.n	dcd2 <sd_mmc_check+0x66>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    dd38:	2302      	movs	r3, #2
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    dd3a:	494c      	ldr	r1, [pc, #304]	; (de6c <sd_mmc_check+0x200>)
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    dd3c:	72b3      	strb	r3, [r6, #10]
		sd_mmc_cards[slot].bus_width = 1;
    dd3e:	3b01      	subs	r3, #1
    dd40:	7373      	strb	r3, [r6, #13]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    dd42:	6031      	str	r1, [r6, #0]
		sd_mmc_cards[slot].high_speed = 0;
    dd44:	77b0      	strb	r0, [r6, #30]
    dd46:	2300      	movs	r3, #0
    dd48:	2201      	movs	r2, #1
    dd4a:	e7b1      	b.n	dcb0 <sd_mmc_check+0x44>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    dd4c:	23d5      	movs	r3, #213	; 0xd5
    dd4e:	005b      	lsls	r3, r3, #1
    dd50:	0019      	movs	r1, r3
    dd52:	4847      	ldr	r0, [pc, #284]	; (de70 <sd_mmc_check+0x204>)
    dd54:	4698      	mov	r8, r3
    dd56:	47b0      	blx	r6
    dd58:	2800      	cmp	r0, #0
    dd5a:	d138      	bne.n	ddce <sd_mmc_check+0x162>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    dd5c:	4b3a      	ldr	r3, [pc, #232]	; (de48 <sd_mmc_check+0x1dc>)
    dd5e:	6819      	ldr	r1, [r3, #0]
    dd60:	7aca      	ldrb	r2, [r1, #11]
    dd62:	07d3      	lsls	r3, r2, #31
    dd64:	d442      	bmi.n	ddec <sd_mmc_check+0x180>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    dd66:	2309      	movs	r3, #9
    dd68:	4013      	ands	r3, r2
    dd6a:	2b01      	cmp	r3, #1
    dd6c:	d11e      	bne.n	ddac <sd_mmc_check+0x140>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    dd6e:	2180      	movs	r1, #128	; 0x80
    dd70:	4840      	ldr	r0, [pc, #256]	; (de74 <sd_mmc_check+0x208>)
    dd72:	0089      	lsls	r1, r1, #2
    dd74:	47b0      	blx	r6
    dd76:	2800      	cmp	r0, #0
    dd78:	d0d5      	beq.n	dd26 <sd_mmc_check+0xba>
    dd7a:	4b33      	ldr	r3, [pc, #204]	; (de48 <sd_mmc_check+0x1dc>)
    dd7c:	6819      	ldr	r1, [r3, #0]
    dd7e:	7acb      	ldrb	r3, [r1, #11]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    dd80:	07db      	lsls	r3, r3, #31
    dd82:	d513      	bpl.n	ddac <sd_mmc_check+0x140>
			if (!(driver_get_response() & 0xFF)) {
    dd84:	4b3c      	ldr	r3, [pc, #240]	; (de78 <sd_mmc_check+0x20c>)
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    dd86:	4d3d      	ldr	r5, [pc, #244]	; (de7c <sd_mmc_check+0x210>)
			if (!(driver_get_response() & 0xFF)) {
    dd88:	469a      	mov	sl, r3
    dd8a:	23ff      	movs	r3, #255	; 0xff
    dd8c:	4698      	mov	r8, r3
    dd8e:	e002      	b.n	dd96 <sd_mmc_check+0x12a>
    dd90:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
    dd92:	2d00      	cmp	r5, #0
    dd94:	d0c7      	beq.n	dd26 <sd_mmc_check+0xba>
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    dd96:	2100      	movs	r1, #0
    dd98:	4839      	ldr	r0, [pc, #228]	; (de80 <sd_mmc_check+0x214>)
    dd9a:	47b0      	blx	r6
    dd9c:	2800      	cmp	r0, #0
    dd9e:	d0c2      	beq.n	dd26 <sd_mmc_check+0xba>
			if (!(driver_get_response() & 0xFF)) {
    dda0:	47d0      	blx	sl
    dda2:	4643      	mov	r3, r8
    dda4:	4203      	tst	r3, r0
    dda6:	d1f3      	bne.n	dd90 <sd_mmc_check+0x124>
    dda8:	4b27      	ldr	r3, [pc, #156]	; (de48 <sd_mmc_check+0x1dc>)
    ddaa:	6819      	ldr	r1, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    ddac:	7f8b      	ldrb	r3, [r1, #30]
    ddae:	7820      	ldrb	r0, [r4, #0]
    ddb0:	1e5a      	subs	r2, r3, #1
    ddb2:	4193      	sbcs	r3, r2
    ddb4:	7b4a      	ldrb	r2, [r1, #13]
    ddb6:	b2db      	uxtb	r3, r3
    ddb8:	6809      	ldr	r1, [r1, #0]
    ddba:	47c8      	blx	r9
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    ddbc:	2200      	movs	r2, #0
    ddbe:	4b22      	ldr	r3, [pc, #136]	; (de48 <sd_mmc_check+0x1dc>)
    ddc0:	681b      	ldr	r3, [r3, #0]
    ddc2:	729a      	strb	r2, [r3, #10]
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    ddc4:	7823      	ldrb	r3, [r4, #0]
    ddc6:	2b00      	cmp	r3, #0
    ddc8:	d00b      	beq.n	dde2 <sd_mmc_check+0x176>
		return SD_MMC_INIT_ONGOING;
    ddca:	2501      	movs	r5, #1
    ddcc:	e75d      	b.n	dc8a <sd_mmc_check+0x1e>
	resp = driver_get_response();
    ddce:	4b2a      	ldr	r3, [pc, #168]	; (de78 <sd_mmc_check+0x20c>)
    ddd0:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
    ddd2:	1c43      	adds	r3, r0, #1
    ddd4:	d0c2      	beq.n	dd5c <sd_mmc_check+0xf0>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    ddd6:	0500      	lsls	r0, r0, #20
    ddd8:	0d00      	lsrs	r0, r0, #20
	*v2 = 1;
    ddda:	2501      	movs	r5, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    dddc:	4540      	cmp	r0, r8
    ddde:	d1a2      	bne.n	dd26 <sd_mmc_check+0xba>
    dde0:	e7bc      	b.n	dd5c <sd_mmc_check+0xf0>
		driver_deselect_device(sd_mmc_slot_sel);
    dde2:	2000      	movs	r0, #0
    dde4:	4b1a      	ldr	r3, [pc, #104]	; (de50 <sd_mmc_check+0x1e4>)
    dde6:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
    dde8:	2501      	movs	r5, #1
    ddea:	e74e      	b.n	dc8a <sd_mmc_check+0x1e>
    ddec:	1e6b      	subs	r3, r5, #1
    ddee:	419d      	sbcs	r5, r3
    ddf0:	07ab      	lsls	r3, r5, #30
    ddf2:	4698      	mov	r8, r3
		resp = driver_get_response();
    ddf4:	4b20      	ldr	r3, [pc, #128]	; (de78 <sd_mmc_check+0x20c>)
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    ddf6:	4d23      	ldr	r5, [pc, #140]	; (de84 <sd_mmc_check+0x218>)
		resp = driver_get_response();
    ddf8:	469a      	mov	sl, r3
    ddfa:	e00b      	b.n	de14 <sd_mmc_check+0x1a8>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    ddfc:	4641      	mov	r1, r8
    ddfe:	4822      	ldr	r0, [pc, #136]	; (de88 <sd_mmc_check+0x21c>)
    de00:	47b0      	blx	r6
    de02:	2800      	cmp	r0, #0
    de04:	d00b      	beq.n	de1e <sd_mmc_check+0x1b2>
		resp = driver_get_response();
    de06:	47d0      	blx	sl
		if (!(resp & R1_SPI_IDLE)) {
    de08:	07c3      	lsls	r3, r0, #31
    de0a:	d400      	bmi.n	de0e <sd_mmc_check+0x1a2>
    de0c:	e125      	b.n	e05a <sd_mmc_check+0x3ee>
    de0e:	3d01      	subs	r5, #1
		if (retry-- == 0) {
    de10:	2d00      	cmp	r5, #0
    de12:	d004      	beq.n	de1e <sd_mmc_check+0x1b2>
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    de14:	2100      	movs	r1, #0
    de16:	481d      	ldr	r0, [pc, #116]	; (de8c <sd_mmc_check+0x220>)
    de18:	47b0      	blx	r6
    de1a:	2800      	cmp	r0, #0
    de1c:	d1ee      	bne.n	ddfc <sd_mmc_check+0x190>
			sd_mmc_card->type = CARD_TYPE_MMC;
    de1e:	2302      	movs	r3, #2
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    de20:	2088      	movs	r0, #136	; 0x88
			sd_mmc_card->type = CARD_TYPE_MMC;
    de22:	4a09      	ldr	r2, [pc, #36]	; (de48 <sd_mmc_check+0x1dc>)
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    de24:	2100      	movs	r1, #0
			sd_mmc_card->type = CARD_TYPE_MMC;
    de26:	6812      	ldr	r2, [r2, #0]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    de28:	0140      	lsls	r0, r0, #5
			sd_mmc_card->type = CARD_TYPE_MMC;
    de2a:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    de2c:	47b0      	blx	r6
    de2e:	2800      	cmp	r0, #0
    de30:	d100      	bne.n	de34 <sd_mmc_check+0x1c8>
    de32:	e778      	b.n	dd26 <sd_mmc_check+0xba>
		resp = driver_get_response();
    de34:	4b10      	ldr	r3, [pc, #64]	; (de78 <sd_mmc_check+0x20c>)
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    de36:	4d13      	ldr	r5, [pc, #76]	; (de84 <sd_mmc_check+0x218>)
		resp = driver_get_response();
    de38:	4698      	mov	r8, r3
		if (!(resp & R1_SPI_IDLE)) {
    de3a:	2301      	movs	r3, #1
    de3c:	469a      	mov	sl, r3
    de3e:	e02b      	b.n	de98 <sd_mmc_check+0x22c>
    de40:	20000ea4 	.word	0x20000ea4
    de44:	20000e80 	.word	0x20000e80
    de48:	20000e7c 	.word	0x20000e7c
    de4c:	0000e675 	.word	0x0000e675
    de50:	0000e699 	.word	0x0000e699
    de54:	20000fa8 	.word	0x20000fa8
    de58:	20000fac 	.word	0x20000fac
    de5c:	00015a39 	.word	0x00015a39
    de60:	000161e9 	.word	0x000161e9
    de64:	0000e6bd 	.word	0x0000e6bd
    de68:	0000ec39 	.word	0x0000ec39
    de6c:	00061a80 	.word	0x00061a80
    de70:	00005508 	.word	0x00005508
    de74:	00001110 	.word	0x00001110
    de78:	0000ec51 	.word	0x0000ec51
    de7c:	00030d41 	.word	0x00030d41
    de80:	00001b0d 	.word	0x00001b0d
    de84:	00001bef 	.word	0x00001bef
    de88:	00001129 	.word	0x00001129
    de8c:	00001137 	.word	0x00001137
    de90:	3d01      	subs	r5, #1
		if (retry-- == 0) {
    de92:	2d00      	cmp	r5, #0
    de94:	d100      	bne.n	de98 <sd_mmc_check+0x22c>
    de96:	e746      	b.n	dd26 <sd_mmc_check+0xba>
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    de98:	2100      	movs	r1, #0
    de9a:	48d8      	ldr	r0, [pc, #864]	; (e1fc <sd_mmc_check+0x590>)
    de9c:	47b0      	blx	r6
    de9e:	2800      	cmp	r0, #0
    dea0:	d100      	bne.n	dea4 <sd_mmc_check+0x238>
    dea2:	e740      	b.n	dd26 <sd_mmc_check+0xba>
		resp = driver_get_response();
    dea4:	47c0      	blx	r8
		if (!(resp & R1_SPI_IDLE)) {
    dea6:	4653      	mov	r3, sl
    dea8:	4203      	tst	r3, r0
    deaa:	d1f1      	bne.n	de90 <sd_mmc_check+0x224>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    deac:	2100      	movs	r1, #0
    deae:	48d4      	ldr	r0, [pc, #848]	; (e200 <sd_mmc_check+0x594>)
    deb0:	47b0      	blx	r6
    deb2:	2800      	cmp	r0, #0
    deb4:	d100      	bne.n	deb8 <sd_mmc_check+0x24c>
    deb6:	e736      	b.n	dd26 <sd_mmc_check+0xba>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
    deb8:	47c0      	blx	r8
    deba:	23c0      	movs	r3, #192	; 0xc0
    debc:	05db      	lsls	r3, r3, #23
    debe:	4018      	ands	r0, r3
    dec0:	2380      	movs	r3, #128	; 0x80
    dec2:	05db      	lsls	r3, r3, #23
    dec4:	4298      	cmp	r0, r3
    dec6:	d105      	bne.n	ded4 <sd_mmc_check+0x268>
		sd_mmc_card->type |= CARD_TYPE_HC;
    dec8:	4bce      	ldr	r3, [pc, #824]	; (e204 <sd_mmc_check+0x598>)
    deca:	681a      	ldr	r2, [r3, #0]
    decc:	2308      	movs	r3, #8
    dece:	7ad1      	ldrb	r1, [r2, #11]
    ded0:	430b      	orrs	r3, r1
    ded2:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    ded4:	2100      	movs	r1, #0
    ded6:	48cc      	ldr	r0, [pc, #816]	; (e208 <sd_mmc_check+0x59c>)
    ded8:	47b0      	blx	r6
    deda:	2800      	cmp	r0, #0
    dedc:	d100      	bne.n	dee0 <sd_mmc_check+0x274>
    dede:	e722      	b.n	dd26 <sd_mmc_check+0xba>
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
    dee0:	2501      	movs	r5, #1
    dee2:	4bc8      	ldr	r3, [pc, #800]	; (e204 <sd_mmc_check+0x598>)
    dee4:	4fc9      	ldr	r7, [pc, #804]	; (e20c <sd_mmc_check+0x5a0>)
    dee6:	681b      	ldr	r3, [r3, #0]
    dee8:	2210      	movs	r2, #16
    deea:	8919      	ldrh	r1, [r3, #8]
    deec:	48c8      	ldr	r0, [pc, #800]	; (e210 <sd_mmc_check+0x5a4>)
    deee:	0409      	lsls	r1, r1, #16
    def0:	9500      	str	r5, [sp, #0]
    def2:	002b      	movs	r3, r5
    def4:	46ba      	mov	sl, r7
    def6:	47b8      	blx	r7
    def8:	2800      	cmp	r0, #0
    defa:	d100      	bne.n	defe <sd_mmc_check+0x292>
    defc:	e713      	b.n	dd26 <sd_mmc_check+0xba>
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
    defe:	4bc1      	ldr	r3, [pc, #772]	; (e204 <sd_mmc_check+0x598>)
    df00:	0029      	movs	r1, r5
    df02:	6818      	ldr	r0, [r3, #0]
    df04:	4bc3      	ldr	r3, [pc, #780]	; (e214 <sd_mmc_check+0x5a8>)
    df06:	300e      	adds	r0, #14
    df08:	4798      	blx	r3
    df0a:	2800      	cmp	r0, #0
    df0c:	d100      	bne.n	df10 <sd_mmc_check+0x2a4>
    df0e:	e70a      	b.n	dd26 <sd_mmc_check+0xba>
	return driver_wait_end_of_read_blocks();
    df10:	4bc1      	ldr	r3, [pc, #772]	; (e218 <sd_mmc_check+0x5ac>)
    df12:	4798      	blx	r3
	if (!sd_mmc_cmd9_spi()) {
    df14:	2800      	cmp	r0, #0
    df16:	d100      	bne.n	df1a <sd_mmc_check+0x2ae>
    df18:	e705      	b.n	dd26 <sd_mmc_check+0xba>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    df1a:	4bba      	ldr	r3, [pc, #744]	; (e204 <sd_mmc_check+0x598>)
    df1c:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    df1e:	7b93      	ldrb	r3, [r2, #14]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
    df20:	069b      	lsls	r3, r3, #26
    df22:	0f1b      	lsrs	r3, r3, #28
    df24:	2b02      	cmp	r3, #2
    df26:	d100      	bne.n	df2a <sd_mmc_check+0x2be>
    df28:	e160      	b.n	e1ec <sd_mmc_check+0x580>
    df2a:	d800      	bhi.n	df2e <sd_mmc_check+0x2c2>
    df2c:	e194      	b.n	e258 <sd_mmc_check+0x5ec>
    df2e:	2b03      	cmp	r3, #3
    df30:	d100      	bne.n	df34 <sd_mmc_check+0x2c8>
    df32:	e18e      	b.n	e252 <sd_mmc_check+0x5e6>
    df34:	2b04      	cmp	r3, #4
    df36:	d000      	beq.n	df3a <sd_mmc_check+0x2ce>
    df38:	e155      	b.n	e1e6 <sd_mmc_check+0x57a>
		sd_mmc_card->version = CARD_VER_MMC_4;
    df3a:	2340      	movs	r3, #64	; 0x40
    df3c:	7313      	strb	r3, [r2, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    df3e:	2507      	movs	r5, #7
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    df40:	7c53      	ldrb	r3, [r2, #17]
	sd_mmc_card->clock = unit * mul * 1000;
    df42:	4fb6      	ldr	r7, [pc, #728]	; (e21c <sd_mmc_check+0x5b0>)
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    df44:	08d9      	lsrs	r1, r3, #3
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    df46:	402b      	ands	r3, r5
    df48:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
    df4a:	59db      	ldr	r3, [r3, r7]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    df4c:	200f      	movs	r0, #15
	sd_mmc_card->clock = unit * mul * 1000;
    df4e:	469c      	mov	ip, r3
    df50:	23fa      	movs	r3, #250	; 0xfa
    df52:	4667      	mov	r7, ip
    df54:	009b      	lsls	r3, r3, #2
    df56:	437b      	muls	r3, r7
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    df58:	4001      	ands	r1, r0
	sd_mmc_card->clock = unit * mul * 1000;
    df5a:	4fb1      	ldr	r7, [pc, #708]	; (e220 <sd_mmc_check+0x5b4>)
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    df5c:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
    df5e:	59c9      	ldr	r1, [r1, r7]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    df60:	7d17      	ldrb	r7, [r2, #20]
    df62:	434b      	muls	r3, r1
    df64:	6013      	str	r3, [r2, #0]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    df66:	7d53      	ldrb	r3, [r2, #21]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    df68:	7d91      	ldrb	r1, [r2, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    df6a:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    df6c:	02bf      	lsls	r7, r7, #10
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    df6e:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    df70:	433b      	orrs	r3, r7
    df72:	430b      	orrs	r3, r1
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
    df74:	49ab      	ldr	r1, [pc, #684]	; (e224 <sd_mmc_check+0x5b8>)
	value &=  ((uint32_t)1 << size) - 1;
    df76:	051b      	lsls	r3, r3, #20
    df78:	0d1b      	lsrs	r3, r3, #20
    df7a:	428b      	cmp	r3, r1
    df7c:	d00f      	beq.n	df9e <sd_mmc_check+0x332>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    df7e:	7e11      	ldrb	r1, [r2, #24]
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    df80:	3301      	adds	r3, #1
    df82:	4129      	asrs	r1, r5
    df84:	468c      	mov	ip, r1
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    df86:	4667      	mov	r7, ip
    df88:	7dd1      	ldrb	r1, [r2, #23]
    df8a:	0049      	lsls	r1, r1, #1
    df8c:	4339      	orrs	r1, r7
	value &=  ((uint32_t)1 << size) - 1;
    df8e:	4029      	ands	r1, r5
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    df90:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    df92:	408b      	lsls	r3, r1
    df94:	7cd1      	ldrb	r1, [r2, #19]
    df96:	4008      	ands	r0, r1
		sd_mmc_card->capacity = blocknr *
    df98:	4083      	lsls	r3, r0
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    df9a:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    df9c:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
    df9e:	7b13      	ldrb	r3, [r2, #12]
    dfa0:	2b3f      	cmp	r3, #63	; 0x3f
    dfa2:	d936      	bls.n	e012 <sd_mmc_check+0x3a6>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
    dfa4:	2100      	movs	r1, #0
    dfa6:	2280      	movs	r2, #128	; 0x80
    dfa8:	9100      	str	r1, [sp, #0]
    dfaa:	2301      	movs	r3, #1
    dfac:	0092      	lsls	r2, r2, #2
    dfae:	489e      	ldr	r0, [pc, #632]	; (e228 <sd_mmc_check+0x5bc>)
    dfb0:	47d0      	blx	sl
    dfb2:	2800      	cmp	r0, #0
    dfb4:	d100      	bne.n	dfb8 <sd_mmc_check+0x34c>
    dfb6:	e6b6      	b.n	dd26 <sd_mmc_check+0xba>
    dfb8:	2332      	movs	r3, #50	; 0x32
    dfba:	469a      	mov	sl, r3
    dfbc:	4d9b      	ldr	r5, [pc, #620]	; (e22c <sd_mmc_check+0x5c0>)
		if (!driver_read_word(&ext_csd)) {
    dfbe:	a803      	add	r0, sp, #12
    dfc0:	47a8      	blx	r5
    dfc2:	2800      	cmp	r0, #0
    dfc4:	d100      	bne.n	dfc8 <sd_mmc_check+0x35c>
    dfc6:	e6ae      	b.n	dd26 <sd_mmc_check+0xba>
    dfc8:	4653      	mov	r3, sl
    dfca:	3b01      	subs	r3, #1
    dfcc:	b29b      	uxth	r3, r3
    dfce:	469a      	mov	sl, r3
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    dfd0:	2b00      	cmp	r3, #0
    dfd2:	d1f4      	bne.n	dfbe <sd_mmc_check+0x352>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
    dfd4:	4b8b      	ldr	r3, [pc, #556]	; (e204 <sd_mmc_check+0x598>)
    dfd6:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    dfd8:	7d8a      	ldrb	r2, [r1, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    dfda:	7d4b      	ldrb	r3, [r1, #21]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    dfdc:	7d09      	ldrb	r1, [r1, #20]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    dfde:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    dfe0:	0289      	lsls	r1, r1, #10
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    dfe2:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    dfe4:	430b      	orrs	r3, r1
    dfe6:	4313      	orrs	r3, r2
    dfe8:	4a8e      	ldr	r2, [pc, #568]	; (e224 <sd_mmc_check+0x5b8>)
	value &=  ((uint32_t)1 << size) - 1;
    dfea:	051b      	lsls	r3, r3, #20
    dfec:	0d1b      	lsrs	r3, r3, #20
    dfee:	4293      	cmp	r3, r2
    dff0:	d100      	bne.n	dff4 <sd_mmc_check+0x388>
    dff2:	e0db      	b.n	e1ac <sd_mmc_check+0x540>
    dff4:	2332      	movs	r3, #50	; 0x32
    dff6:	469a      	mov	sl, r3
    dff8:	ab04      	add	r3, sp, #16
    dffa:	469b      	mov	fp, r3
		if (!driver_read_word(&sec_count)) {
    dffc:	4658      	mov	r0, fp
    dffe:	47a8      	blx	r5
    e000:	2800      	cmp	r0, #0
    e002:	d100      	bne.n	e006 <sd_mmc_check+0x39a>
    e004:	e68f      	b.n	dd26 <sd_mmc_check+0xba>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    e006:	4653      	mov	r3, sl
    e008:	3301      	adds	r3, #1
    e00a:	b29b      	uxth	r3, r3
    e00c:	469a      	mov	sl, r3
    e00e:	2b80      	cmp	r3, #128	; 0x80
    e010:	d1f4      	bne.n	dffc <sd_mmc_check+0x390>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    e012:	2180      	movs	r1, #128	; 0x80
    e014:	4886      	ldr	r0, [pc, #536]	; (e230 <sd_mmc_check+0x5c4>)
    e016:	0089      	lsls	r1, r1, #2
    e018:	47b0      	blx	r6
    e01a:	2800      	cmp	r0, #0
    e01c:	d100      	bne.n	e020 <sd_mmc_check+0x3b4>
    e01e:	e682      	b.n	dd26 <sd_mmc_check+0xba>
			if (!(driver_get_response() & 0xFF)) {
    e020:	23ff      	movs	r3, #255	; 0xff
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    e022:	4d84      	ldr	r5, [pc, #528]	; (e234 <sd_mmc_check+0x5c8>)
			if (!(driver_get_response() & 0xFF)) {
    e024:	469a      	mov	sl, r3
    e026:	e003      	b.n	e030 <sd_mmc_check+0x3c4>
    e028:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
    e02a:	2d00      	cmp	r5, #0
    e02c:	d100      	bne.n	e030 <sd_mmc_check+0x3c4>
    e02e:	e67a      	b.n	dd26 <sd_mmc_check+0xba>
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    e030:	2100      	movs	r1, #0
    e032:	4881      	ldr	r0, [pc, #516]	; (e238 <sd_mmc_check+0x5cc>)
    e034:	47b0      	blx	r6
    e036:	2800      	cmp	r0, #0
    e038:	d100      	bne.n	e03c <sd_mmc_check+0x3d0>
    e03a:	e674      	b.n	dd26 <sd_mmc_check+0xba>
			if (!(driver_get_response() & 0xFF)) {
    e03c:	47c0      	blx	r8
    e03e:	4653      	mov	r3, sl
    e040:	4218      	tst	r0, r3
    e042:	d1f1      	bne.n	e028 <sd_mmc_check+0x3bc>
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    e044:	4b6f      	ldr	r3, [pc, #444]	; (e204 <sd_mmc_check+0x598>)
    e046:	7820      	ldrb	r0, [r4, #0]
    e048:	6819      	ldr	r1, [r3, #0]
    e04a:	7f8b      	ldrb	r3, [r1, #30]
    e04c:	1e5a      	subs	r2, r3, #1
    e04e:	4193      	sbcs	r3, r2
    e050:	7b4a      	ldrb	r2, [r1, #13]
    e052:	b2db      	uxtb	r3, r3
    e054:	6809      	ldr	r1, [r1, #0]
    e056:	47c8      	blx	r9
    e058:	e6b0      	b.n	ddbc <sd_mmc_check+0x150>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    e05a:	2100      	movs	r1, #0
    e05c:	4868      	ldr	r0, [pc, #416]	; (e200 <sd_mmc_check+0x594>)
    e05e:	47b0      	blx	r6
    e060:	2800      	cmp	r0, #0
    e062:	d100      	bne.n	e066 <sd_mmc_check+0x3fa>
    e064:	e6db      	b.n	de1e <sd_mmc_check+0x1b2>
	if ((driver_get_response() & OCR_CCS) != 0) {
    e066:	47d0      	blx	sl
    e068:	0043      	lsls	r3, r0, #1
    e06a:	d505      	bpl.n	e078 <sd_mmc_check+0x40c>
		sd_mmc_card->type |= CARD_TYPE_HC;
    e06c:	4b65      	ldr	r3, [pc, #404]	; (e204 <sd_mmc_check+0x598>)
    e06e:	681a      	ldr	r2, [r3, #0]
    e070:	2308      	movs	r3, #8
    e072:	7ad1      	ldrb	r1, [r2, #11]
    e074:	430b      	orrs	r3, r1
    e076:	72d3      	strb	r3, [r2, #11]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    e078:	2100      	movs	r1, #0
    e07a:	4863      	ldr	r0, [pc, #396]	; (e208 <sd_mmc_check+0x59c>)
    e07c:	47b0      	blx	r6
    e07e:	2800      	cmp	r0, #0
    e080:	d100      	bne.n	e084 <sd_mmc_check+0x418>
    e082:	e650      	b.n	dd26 <sd_mmc_check+0xba>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    e084:	2501      	movs	r5, #1
    e086:	4b5f      	ldr	r3, [pc, #380]	; (e204 <sd_mmc_check+0x598>)
    e088:	6819      	ldr	r1, [r3, #0]
    e08a:	7acb      	ldrb	r3, [r1, #11]
    e08c:	422b      	tst	r3, r5
    e08e:	d100      	bne.n	e092 <sd_mmc_check+0x426>
    e090:	e0a3      	b.n	e1da <sd_mmc_check+0x56e>
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
    e092:	8909      	ldrh	r1, [r1, #8]
    e094:	4f5d      	ldr	r7, [pc, #372]	; (e20c <sd_mmc_check+0x5a0>)
    e096:	0409      	lsls	r1, r1, #16
    e098:	9500      	str	r5, [sp, #0]
    e09a:	002b      	movs	r3, r5
    e09c:	2210      	movs	r2, #16
    e09e:	485c      	ldr	r0, [pc, #368]	; (e210 <sd_mmc_check+0x5a4>)
    e0a0:	46ba      	mov	sl, r7
    e0a2:	47b8      	blx	r7
    e0a4:	2800      	cmp	r0, #0
    e0a6:	d100      	bne.n	e0aa <sd_mmc_check+0x43e>
    e0a8:	e63d      	b.n	dd26 <sd_mmc_check+0xba>
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
    e0aa:	4b56      	ldr	r3, [pc, #344]	; (e204 <sd_mmc_check+0x598>)
    e0ac:	0029      	movs	r1, r5
    e0ae:	6818      	ldr	r0, [r3, #0]
    e0b0:	4b58      	ldr	r3, [pc, #352]	; (e214 <sd_mmc_check+0x5a8>)
    e0b2:	300e      	adds	r0, #14
    e0b4:	4698      	mov	r8, r3
    e0b6:	4798      	blx	r3
    e0b8:	2800      	cmp	r0, #0
    e0ba:	d100      	bne.n	e0be <sd_mmc_check+0x452>
    e0bc:	e633      	b.n	dd26 <sd_mmc_check+0xba>
	return driver_wait_end_of_read_blocks();
    e0be:	4b56      	ldr	r3, [pc, #344]	; (e218 <sd_mmc_check+0x5ac>)
    e0c0:	469b      	mov	fp, r3
    e0c2:	4798      	blx	r3
		if (!sd_mmc_cmd9_spi()) {
    e0c4:	2800      	cmp	r0, #0
    e0c6:	d100      	bne.n	e0ca <sd_mmc_check+0x45e>
    e0c8:	e62d      	b.n	dd26 <sd_mmc_check+0xba>
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    e0ca:	2007      	movs	r0, #7
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    e0cc:	4b4d      	ldr	r3, [pc, #308]	; (e204 <sd_mmc_check+0x598>)
	sd_mmc_card->clock = unit * mul * 1000;
    e0ce:	4f53      	ldr	r7, [pc, #332]	; (e21c <sd_mmc_check+0x5b0>)
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    e0d0:	681a      	ldr	r2, [r3, #0]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    e0d2:	210f      	movs	r1, #15
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    e0d4:	7c53      	ldrb	r3, [r2, #17]
    e0d6:	08dd      	lsrs	r5, r3, #3
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    e0d8:	4003      	ands	r3, r0
    e0da:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
    e0dc:	59db      	ldr	r3, [r3, r7]
    e0de:	27fa      	movs	r7, #250	; 0xfa
    e0e0:	00bf      	lsls	r7, r7, #2
    e0e2:	437b      	muls	r3, r7
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    e0e4:	400d      	ands	r5, r1
	sd_mmc_card->clock = unit * mul * 1000;
    e0e6:	4f55      	ldr	r7, [pc, #340]	; (e23c <sd_mmc_check+0x5d0>)
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    e0e8:	00ad      	lsls	r5, r5, #2
	sd_mmc_card->clock = unit * mul * 1000;
    e0ea:	59ed      	ldr	r5, [r5, r7]
    e0ec:	436b      	muls	r3, r5
    e0ee:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    e0f0:	7b93      	ldrb	r3, [r2, #14]
    e0f2:	099b      	lsrs	r3, r3, #6
    e0f4:	d14c      	bne.n	e190 <sd_mmc_check+0x524>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    e0f6:	7d53      	ldrb	r3, [r2, #21]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    e0f8:	7d17      	ldrb	r7, [r2, #20]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    e0fa:	7d95      	ldrb	r5, [r2, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    e0fc:	02bf      	lsls	r7, r7, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    e0fe:	009b      	lsls	r3, r3, #2
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    e100:	11ad      	asrs	r5, r5, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    e102:	433b      	orrs	r3, r7
    e104:	432b      	orrs	r3, r5
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    e106:	7dd7      	ldrb	r7, [r2, #23]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    e108:	7e15      	ldrb	r5, [r2, #24]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    e10a:	007f      	lsls	r7, r7, #1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    e10c:	11ed      	asrs	r5, r5, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    e10e:	433d      	orrs	r5, r7
	value &=  ((uint32_t)1 << size) - 1;
    e110:	051b      	lsls	r3, r3, #20
    e112:	0d1b      	lsrs	r3, r3, #20
    e114:	4028      	ands	r0, r5
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    e116:	3002      	adds	r0, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    e118:	3301      	adds	r3, #1
    e11a:	4083      	lsls	r3, r0
    e11c:	7cd0      	ldrb	r0, [r2, #19]
    e11e:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
    e120:	408b      	lsls	r3, r1
				/ 1024;
    e122:	0a9b      	lsrs	r3, r3, #10
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    e124:	8911      	ldrh	r1, [r2, #8]
    e126:	6053      	str	r3, [r2, #4]
    e128:	0409      	lsls	r1, r1, #16
    e12a:	4845      	ldr	r0, [pc, #276]	; (e240 <sd_mmc_check+0x5d4>)
    e12c:	47b0      	blx	r6
    e12e:	2800      	cmp	r0, #0
    e130:	d100      	bne.n	e134 <sd_mmc_check+0x4c8>
    e132:	e5f8      	b.n	dd26 <sd_mmc_check+0xba>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
    e134:	2301      	movs	r3, #1
    e136:	2208      	movs	r2, #8
    e138:	9300      	str	r3, [sp, #0]
    e13a:	2100      	movs	r1, #0
    e13c:	4841      	ldr	r0, [pc, #260]	; (e244 <sd_mmc_check+0x5d8>)
    e13e:	47d0      	blx	sl
    e140:	2800      	cmp	r0, #0
    e142:	d100      	bne.n	e146 <sd_mmc_check+0x4da>
    e144:	e5ef      	b.n	dd26 <sd_mmc_check+0xba>
	if (!driver_start_read_blocks(scr, 1)) {
    e146:	ad04      	add	r5, sp, #16
    e148:	2101      	movs	r1, #1
    e14a:	0028      	movs	r0, r5
    e14c:	47c0      	blx	r8
    e14e:	2800      	cmp	r0, #0
    e150:	d100      	bne.n	e154 <sd_mmc_check+0x4e8>
    e152:	e5e8      	b.n	dd26 <sd_mmc_check+0xba>
	if (!driver_wait_end_of_read_blocks()) {
    e154:	47d8      	blx	fp
    e156:	2800      	cmp	r0, #0
    e158:	d100      	bne.n	e15c <sd_mmc_check+0x4f0>
    e15a:	e5e4      	b.n	dd26 <sd_mmc_check+0xba>
	switch (SD_SCR_SD_SPEC(scr)) {
    e15c:	220f      	movs	r2, #15
    e15e:	782b      	ldrb	r3, [r5, #0]
    e160:	4013      	ands	r3, r2
    e162:	2b01      	cmp	r3, #1
    e164:	d070      	beq.n	e248 <sd_mmc_check+0x5dc>
    e166:	2b00      	cmp	r3, #0
    e168:	d043      	beq.n	e1f2 <sd_mmc_check+0x586>
    e16a:	2b02      	cmp	r3, #2
    e16c:	d141      	bne.n	e1f2 <sd_mmc_check+0x586>
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    e16e:	78ab      	ldrb	r3, [r5, #2]
    e170:	09db      	lsrs	r3, r3, #7
    e172:	2b01      	cmp	r3, #1
    e174:	d075      	beq.n	e262 <sd_mmc_check+0x5f6>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    e176:	2320      	movs	r3, #32
    e178:	4a22      	ldr	r2, [pc, #136]	; (e204 <sd_mmc_check+0x598>)
    e17a:	6812      	ldr	r2, [r2, #0]
    e17c:	7313      	strb	r3, [r2, #12]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    e17e:	2209      	movs	r2, #9
    e180:	4b20      	ldr	r3, [pc, #128]	; (e204 <sd_mmc_check+0x598>)
    e182:	6819      	ldr	r1, [r3, #0]
    e184:	7acb      	ldrb	r3, [r1, #11]
    e186:	401a      	ands	r2, r3
    e188:	2a01      	cmp	r2, #1
    e18a:	d000      	beq.n	e18e <sd_mmc_check+0x522>
    e18c:	e5f8      	b.n	dd80 <sd_mmc_check+0x114>
    e18e:	e5ee      	b.n	dd6e <sd_mmc_check+0x102>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    e190:	7d93      	ldrb	r3, [r2, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    e192:	7d51      	ldrb	r1, [r2, #21]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    e194:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    e196:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    e198:	430b      	orrs	r3, r1
				* 512;
    e19a:	2180      	movs	r1, #128	; 0x80
    e19c:	0089      	lsls	r1, r1, #2
    e19e:	468c      	mov	ip, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    e1a0:	7dd0      	ldrb	r0, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    e1a2:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
    e1a4:	029b      	lsls	r3, r3, #10
    e1a6:	085b      	lsrs	r3, r3, #1
    e1a8:	4463      	add	r3, ip
    e1aa:	e7bb      	b.n	e124 <sd_mmc_check+0x4b8>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
    e1ac:	2304      	movs	r3, #4
    e1ae:	469a      	mov	sl, r3
    e1b0:	ab04      	add	r3, sp, #16
    e1b2:	469b      	mov	fp, r3
			if (!driver_read_word(&sec_count)) {
    e1b4:	4658      	mov	r0, fp
    e1b6:	47a8      	blx	r5
    e1b8:	2800      	cmp	r0, #0
    e1ba:	d100      	bne.n	e1be <sd_mmc_check+0x552>
    e1bc:	e5b3      	b.n	dd26 <sd_mmc_check+0xba>
    e1be:	4653      	mov	r3, sl
    e1c0:	3b01      	subs	r3, #1
    e1c2:	b29b      	uxth	r3, r3
    e1c4:	469a      	mov	sl, r3
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    e1c6:	2b00      	cmp	r3, #0
    e1c8:	d1f4      	bne.n	e1b4 <sd_mmc_check+0x548>
		sd_mmc_card->capacity = sec_count / 2;
    e1ca:	4b0e      	ldr	r3, [pc, #56]	; (e204 <sd_mmc_check+0x598>)
    e1cc:	681a      	ldr	r2, [r3, #0]
    e1ce:	9b04      	ldr	r3, [sp, #16]
    e1d0:	085b      	lsrs	r3, r3, #1
    e1d2:	6053      	str	r3, [r2, #4]
    e1d4:	2336      	movs	r3, #54	; 0x36
    e1d6:	469a      	mov	sl, r3
    e1d8:	e710      	b.n	dffc <sd_mmc_check+0x390>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    e1da:	2209      	movs	r2, #9
    e1dc:	4013      	ands	r3, r2
    e1de:	2b01      	cmp	r3, #1
    e1e0:	d000      	beq.n	e1e4 <sd_mmc_check+0x578>
    e1e2:	e5e3      	b.n	ddac <sd_mmc_check+0x140>
    e1e4:	e5c3      	b.n	dd6e <sd_mmc_check+0x102>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
    e1e6:	2312      	movs	r3, #18
    e1e8:	7313      	strb	r3, [r2, #12]
    e1ea:	e6a8      	b.n	df3e <sd_mmc_check+0x2d2>
		sd_mmc_card->version = CARD_VER_MMC_2_2;
    e1ec:	2322      	movs	r3, #34	; 0x22
    e1ee:	7313      	strb	r3, [r2, #12]
    e1f0:	e6a5      	b.n	df3e <sd_mmc_check+0x2d2>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    e1f2:	2310      	movs	r3, #16
    e1f4:	4a03      	ldr	r2, [pc, #12]	; (e204 <sd_mmc_check+0x598>)
    e1f6:	6812      	ldr	r2, [r2, #0]
    e1f8:	7313      	strb	r3, [r2, #12]
    e1fa:	e7c0      	b.n	e17e <sd_mmc_check+0x512>
    e1fc:	00001101 	.word	0x00001101
    e200:	0000053a 	.word	0x0000053a
    e204:	20000e7c 	.word	0x20000e7c
    e208:	0000113b 	.word	0x0000113b
    e20c:	0000e6f5 	.word	0x0000e6f5
    e210:	00081109 	.word	0x00081109
    e214:	0000ed39 	.word	0x0000ed39
    e218:	0000ee15 	.word	0x0000ee15
    e21c:	00025a54 	.word	0x00025a54
    e220:	00025a14 	.word	0x00025a14
    e224:	00000fff 	.word	0x00000fff
    e228:	00081108 	.word	0x00081108
    e22c:	0000ec5d 	.word	0x0000ec5d
    e230:	00001110 	.word	0x00001110
    e234:	00030d41 	.word	0x00030d41
    e238:	00001b0d 	.word	0x00001b0d
    e23c:	00025a70 	.word	0x00025a70
    e240:	00001137 	.word	0x00001137
    e244:	00081133 	.word	0x00081133
		sd_mmc_card->version = CARD_VER_SD_1_10;
    e248:	231a      	movs	r3, #26
    e24a:	4a08      	ldr	r2, [pc, #32]	; (e26c <sd_mmc_check+0x600>)
    e24c:	6812      	ldr	r2, [r2, #0]
    e24e:	7313      	strb	r3, [r2, #12]
    e250:	e795      	b.n	e17e <sd_mmc_check+0x512>
		sd_mmc_card->version = CARD_VER_MMC_3;
    e252:	2330      	movs	r3, #48	; 0x30
    e254:	7313      	strb	r3, [r2, #12]
    e256:	e672      	b.n	df3e <sd_mmc_check+0x2d2>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    e258:	42ab      	cmp	r3, r5
    e25a:	d1c4      	bne.n	e1e6 <sd_mmc_check+0x57a>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
    e25c:	2314      	movs	r3, #20
    e25e:	7313      	strb	r3, [r2, #12]
    e260:	e66d      	b.n	df3e <sd_mmc_check+0x2d2>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    e262:	4a02      	ldr	r2, [pc, #8]	; (e26c <sd_mmc_check+0x600>)
    e264:	332f      	adds	r3, #47	; 0x2f
    e266:	6812      	ldr	r2, [r2, #0]
    e268:	7313      	strb	r3, [r2, #12]
    e26a:	e788      	b.n	e17e <sd_mmc_check+0x512>
    e26c:	20000e7c 	.word	0x20000e7c

0000e270 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    e270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (slot >= SD_MMC_MEM_CNT) {
    e272:	2800      	cmp	r0, #0
    e274:	d001      	beq.n	e27a <sd_mmc_get_type+0xa>
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return CARD_TYPE_UNKNOWN;
    e276:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
    e278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    e27a:	4c14      	ldr	r4, [pc, #80]	; (e2cc <sd_mmc_get_type+0x5c>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    e27c:	7aa3      	ldrb	r3, [r4, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    e27e:	3b03      	subs	r3, #3
    e280:	2b01      	cmp	r3, #1
    e282:	d919      	bls.n	e2b8 <sd_mmc_get_type+0x48>
    e284:	7fa3      	ldrb	r3, [r4, #30]
    e286:	6821      	ldr	r1, [r4, #0]
    e288:	1e58      	subs	r0, r3, #1
    e28a:	4183      	sbcs	r3, r0
    e28c:	7b62      	ldrb	r2, [r4, #13]
    e28e:	b2db      	uxtb	r3, r3
	sd_mmc_slot_sel = slot;
    e290:	2000      	movs	r0, #0
    e292:	4e0f      	ldr	r6, [pc, #60]	; (e2d0 <sd_mmc_get_type+0x60>)
	sd_mmc_card = &sd_mmc_cards[slot];
    e294:	4d0f      	ldr	r5, [pc, #60]	; (e2d4 <sd_mmc_get_type+0x64>)
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    e296:	4f10      	ldr	r7, [pc, #64]	; (e2d8 <sd_mmc_get_type+0x68>)
	sd_mmc_slot_sel = slot;
    e298:	7030      	strb	r0, [r6, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    e29a:	602c      	str	r4, [r5, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    e29c:	47b8      	blx	r7
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    e29e:	7aa3      	ldrb	r3, [r4, #10]
    e2a0:	2b02      	cmp	r3, #2
    e2a2:	d0e8      	beq.n	e276 <sd_mmc_get_type+0x6>
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    e2a4:	7833      	ldrb	r3, [r6, #0]
    e2a6:	2b00      	cmp	r3, #0
    e2a8:	d002      	beq.n	e2b0 <sd_mmc_get_type+0x40>
	return sd_mmc_card->type;
    e2aa:	682b      	ldr	r3, [r5, #0]
    e2ac:	7ad8      	ldrb	r0, [r3, #11]
    e2ae:	e7e3      	b.n	e278 <sd_mmc_get_type+0x8>
		driver_deselect_device(sd_mmc_slot_sel);
    e2b0:	2000      	movs	r0, #0
    e2b2:	4b0a      	ldr	r3, [pc, #40]	; (e2dc <sd_mmc_get_type+0x6c>)
    e2b4:	4798      	blx	r3
    e2b6:	e7f8      	b.n	e2aa <sd_mmc_get_type+0x3a>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    e2b8:	2302      	movs	r3, #2
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    e2ba:	4909      	ldr	r1, [pc, #36]	; (e2e0 <sd_mmc_get_type+0x70>)
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    e2bc:	72a3      	strb	r3, [r4, #10]
		sd_mmc_cards[slot].bus_width = 1;
    e2be:	3b01      	subs	r3, #1
    e2c0:	7363      	strb	r3, [r4, #13]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    e2c2:	6021      	str	r1, [r4, #0]
		sd_mmc_cards[slot].high_speed = 0;
    e2c4:	77a0      	strb	r0, [r4, #30]
    e2c6:	2300      	movs	r3, #0
    e2c8:	2201      	movs	r2, #1
    e2ca:	e7e1      	b.n	e290 <sd_mmc_get_type+0x20>
    e2cc:	20000e80 	.word	0x20000e80
    e2d0:	20000ea4 	.word	0x20000ea4
    e2d4:	20000e7c 	.word	0x20000e7c
    e2d8:	0000e675 	.word	0x0000e675
    e2dc:	0000e699 	.word	0x0000e699
    e2e0:	00061a80 	.word	0x00061a80

0000e2e4 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    e2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (slot >= SD_MMC_MEM_CNT) {
    e2e6:	2800      	cmp	r0, #0
    e2e8:	d001      	beq.n	e2ee <sd_mmc_get_capacity+0xa>
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return 0;
    e2ea:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
    e2ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    e2ee:	4c14      	ldr	r4, [pc, #80]	; (e340 <sd_mmc_get_capacity+0x5c>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    e2f0:	7aa3      	ldrb	r3, [r4, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    e2f2:	3b03      	subs	r3, #3
    e2f4:	2b01      	cmp	r3, #1
    e2f6:	d919      	bls.n	e32c <sd_mmc_get_capacity+0x48>
    e2f8:	7fa3      	ldrb	r3, [r4, #30]
    e2fa:	6821      	ldr	r1, [r4, #0]
    e2fc:	1e58      	subs	r0, r3, #1
    e2fe:	4183      	sbcs	r3, r0
    e300:	7b62      	ldrb	r2, [r4, #13]
    e302:	b2db      	uxtb	r3, r3
	sd_mmc_slot_sel = slot;
    e304:	2000      	movs	r0, #0
    e306:	4e0f      	ldr	r6, [pc, #60]	; (e344 <sd_mmc_get_capacity+0x60>)
	sd_mmc_card = &sd_mmc_cards[slot];
    e308:	4d0f      	ldr	r5, [pc, #60]	; (e348 <sd_mmc_get_capacity+0x64>)
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    e30a:	4f10      	ldr	r7, [pc, #64]	; (e34c <sd_mmc_get_capacity+0x68>)
	sd_mmc_slot_sel = slot;
    e30c:	7030      	strb	r0, [r6, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    e30e:	602c      	str	r4, [r5, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    e310:	47b8      	blx	r7
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    e312:	7aa3      	ldrb	r3, [r4, #10]
    e314:	2b02      	cmp	r3, #2
    e316:	d0e8      	beq.n	e2ea <sd_mmc_get_capacity+0x6>
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    e318:	7833      	ldrb	r3, [r6, #0]
    e31a:	2b00      	cmp	r3, #0
    e31c:	d002      	beq.n	e324 <sd_mmc_get_capacity+0x40>
	return sd_mmc_card->capacity;
    e31e:	682b      	ldr	r3, [r5, #0]
    e320:	6858      	ldr	r0, [r3, #4]
    e322:	e7e3      	b.n	e2ec <sd_mmc_get_capacity+0x8>
		driver_deselect_device(sd_mmc_slot_sel);
    e324:	2000      	movs	r0, #0
    e326:	4b0a      	ldr	r3, [pc, #40]	; (e350 <sd_mmc_get_capacity+0x6c>)
    e328:	4798      	blx	r3
    e32a:	e7f8      	b.n	e31e <sd_mmc_get_capacity+0x3a>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    e32c:	2302      	movs	r3, #2
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    e32e:	4909      	ldr	r1, [pc, #36]	; (e354 <sd_mmc_get_capacity+0x70>)
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    e330:	72a3      	strb	r3, [r4, #10]
		sd_mmc_cards[slot].bus_width = 1;
    e332:	3b01      	subs	r3, #1
    e334:	7363      	strb	r3, [r4, #13]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    e336:	6021      	str	r1, [r4, #0]
		sd_mmc_cards[slot].high_speed = 0;
    e338:	77a0      	strb	r0, [r4, #30]
    e33a:	2300      	movs	r3, #0
    e33c:	2201      	movs	r2, #1
    e33e:	e7e1      	b.n	e304 <sd_mmc_get_capacity+0x20>
    e340:	20000e80 	.word	0x20000e80
    e344:	20000ea4 	.word	0x20000ea4
    e348:	20000e7c 	.word	0x20000e7c
    e34c:	0000e675 	.word	0x0000e675
    e350:	0000e699 	.word	0x0000e699
    e354:	00061a80 	.word	0x00061a80

0000e358 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
    e358:	2000      	movs	r0, #0
    e35a:	4770      	bx	lr

0000e35c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    e35c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e35e:	464e      	mov	r6, r9
    e360:	4645      	mov	r5, r8
    e362:	46de      	mov	lr, fp
    e364:	4657      	mov	r7, sl
    e366:	b5e0      	push	{r5, r6, r7, lr}
    e368:	4689      	mov	r9, r1
    e36a:	b083      	sub	sp, #12
    e36c:	4690      	mov	r8, r2
		return SD_MMC_ERR_SLOT;
    e36e:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
    e370:	2800      	cmp	r0, #0
    e372:	d007      	beq.n	e384 <sd_mmc_init_read_blocks+0x28>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    e374:	0018      	movs	r0, r3
    e376:	b003      	add	sp, #12
    e378:	bc3c      	pop	{r2, r3, r4, r5}
    e37a:	4690      	mov	r8, r2
    e37c:	4699      	mov	r9, r3
    e37e:	46a2      	mov	sl, r4
    e380:	46ab      	mov	fp, r5
    e382:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    e384:	4c2e      	ldr	r4, [pc, #184]	; (e440 <sd_mmc_init_read_blocks+0xe4>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    e386:	7aa3      	ldrb	r3, [r4, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    e388:	3b03      	subs	r3, #3
    e38a:	2b01      	cmp	r3, #1
    e38c:	d94c      	bls.n	e428 <sd_mmc_init_read_blocks+0xcc>
    e38e:	7fa3      	ldrb	r3, [r4, #30]
    e390:	6821      	ldr	r1, [r4, #0]
    e392:	1e58      	subs	r0, r3, #1
    e394:	4183      	sbcs	r3, r0
    e396:	7b62      	ldrb	r2, [r4, #13]
    e398:	b2db      	uxtb	r3, r3
	sd_mmc_slot_sel = slot;
    e39a:	482a      	ldr	r0, [pc, #168]	; (e444 <sd_mmc_init_read_blocks+0xe8>)
    e39c:	4682      	mov	sl, r0
    e39e:	2000      	movs	r0, #0
    e3a0:	4655      	mov	r5, sl
    e3a2:	7028      	strb	r0, [r5, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    e3a4:	4828      	ldr	r0, [pc, #160]	; (e448 <sd_mmc_init_read_blocks+0xec>)
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    e3a6:	4d29      	ldr	r5, [pc, #164]	; (e44c <sd_mmc_init_read_blocks+0xf0>)
	sd_mmc_card = &sd_mmc_cards[slot];
    e3a8:	6004      	str	r4, [r0, #0]
    e3aa:	4683      	mov	fp, r0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    e3ac:	2000      	movs	r0, #0
    e3ae:	47a8      	blx	r5
	if (sd_mmc_err != SD_MMC_OK) {
    e3b0:	7aa2      	ldrb	r2, [r4, #10]
    e3b2:	2301      	movs	r3, #1
    e3b4:	2a02      	cmp	r2, #2
    e3b6:	d0dd      	beq.n	e374 <sd_mmc_init_read_blocks+0x18>
    e3b8:	4c25      	ldr	r4, [pc, #148]	; (e450 <sd_mmc_init_read_blocks+0xf4>)
    e3ba:	4d26      	ldr	r5, [pc, #152]	; (e454 <sd_mmc_init_read_blocks+0xf8>)
			if (!(driver_get_response() & 0xFF)) {
    e3bc:	4f26      	ldr	r7, [pc, #152]	; (e458 <sd_mmc_init_read_blocks+0xfc>)
    e3be:	26ff      	movs	r6, #255	; 0xff
    e3c0:	e005      	b.n	e3ce <sd_mmc_init_read_blocks+0x72>
    e3c2:	47b8      	blx	r7
    e3c4:	4206      	tst	r6, r0
    e3c6:	d00d      	beq.n	e3e4 <sd_mmc_init_read_blocks+0x88>
    e3c8:	3c01      	subs	r4, #1
		if (nec_timeout-- == 0) {
    e3ca:	2c00      	cmp	r4, #0
    e3cc:	d004      	beq.n	e3d8 <sd_mmc_init_read_blocks+0x7c>
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    e3ce:	2100      	movs	r1, #0
    e3d0:	4822      	ldr	r0, [pc, #136]	; (e45c <sd_mmc_init_read_blocks+0x100>)
    e3d2:	47a8      	blx	r5
    e3d4:	2800      	cmp	r0, #0
    e3d6:	d1f4      	bne.n	e3c2 <sd_mmc_init_read_blocks+0x66>
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    e3d8:	4653      	mov	r3, sl
    e3da:	781b      	ldrb	r3, [r3, #0]
    e3dc:	2b00      	cmp	r3, #0
    e3de:	d01e      	beq.n	e41e <sd_mmc_init_read_blocks+0xc2>
		return SD_MMC_ERR_COMM;
    e3e0:	2305      	movs	r3, #5
    e3e2:	e7c7      	b.n	e374 <sd_mmc_init_read_blocks+0x18>
	if (nb_block > 1) {
    e3e4:	4643      	mov	r3, r8
    e3e6:	2b01      	cmp	r3, #1
    e3e8:	d928      	bls.n	e43c <sd_mmc_init_read_blocks+0xe0>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    e3ea:	481d      	ldr	r0, [pc, #116]	; (e460 <sd_mmc_init_read_blocks+0x104>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    e3ec:	465b      	mov	r3, fp
    e3ee:	681b      	ldr	r3, [r3, #0]
    e3f0:	7adb      	ldrb	r3, [r3, #11]
    e3f2:	071b      	lsls	r3, r3, #28
    e3f4:	d402      	bmi.n	e3fc <sd_mmc_init_read_blocks+0xa0>
		arg = (start * SD_MMC_BLOCK_SIZE);
    e3f6:	464b      	mov	r3, r9
    e3f8:	025b      	lsls	r3, r3, #9
    e3fa:	4699      	mov	r9, r3
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    e3fc:	2301      	movs	r3, #1
    e3fe:	2280      	movs	r2, #128	; 0x80
    e400:	9300      	str	r3, [sp, #0]
    e402:	0092      	lsls	r2, r2, #2
    e404:	4643      	mov	r3, r8
    e406:	4649      	mov	r1, r9
    e408:	4c16      	ldr	r4, [pc, #88]	; (e464 <sd_mmc_init_read_blocks+0x108>)
    e40a:	47a0      	blx	r4
    e40c:	2800      	cmp	r0, #0
    e40e:	d0e3      	beq.n	e3d8 <sd_mmc_init_read_blocks+0x7c>
	sd_mmc_nb_block_remaining = nb_block;
    e410:	4642      	mov	r2, r8
    e412:	4b15      	ldr	r3, [pc, #84]	; (e468 <sd_mmc_init_read_blocks+0x10c>)
    e414:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    e416:	4b15      	ldr	r3, [pc, #84]	; (e46c <sd_mmc_init_read_blocks+0x110>)
    e418:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    e41a:	2300      	movs	r3, #0
    e41c:	e7aa      	b.n	e374 <sd_mmc_init_read_blocks+0x18>
		driver_deselect_device(sd_mmc_slot_sel);
    e41e:	4b14      	ldr	r3, [pc, #80]	; (e470 <sd_mmc_init_read_blocks+0x114>)
    e420:	2000      	movs	r0, #0
    e422:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    e424:	2305      	movs	r3, #5
    e426:	e7a5      	b.n	e374 <sd_mmc_init_read_blocks+0x18>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    e428:	2302      	movs	r3, #2
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    e42a:	4912      	ldr	r1, [pc, #72]	; (e474 <sd_mmc_init_read_blocks+0x118>)
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    e42c:	72a3      	strb	r3, [r4, #10]
		sd_mmc_cards[slot].bus_width = 1;
    e42e:	3b01      	subs	r3, #1
    e430:	7363      	strb	r3, [r4, #13]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    e432:	6021      	str	r1, [r4, #0]
		sd_mmc_cards[slot].high_speed = 0;
    e434:	77a0      	strb	r0, [r4, #30]
    e436:	2300      	movs	r3, #0
    e438:	2201      	movs	r2, #1
    e43a:	e7ae      	b.n	e39a <sd_mmc_init_read_blocks+0x3e>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    e43c:	480e      	ldr	r0, [pc, #56]	; (e478 <sd_mmc_init_read_blocks+0x11c>)
    e43e:	e7d5      	b.n	e3ec <sd_mmc_init_read_blocks+0x90>
    e440:	20000e80 	.word	0x20000e80
    e444:	20000ea4 	.word	0x20000ea4
    e448:	20000e7c 	.word	0x20000e7c
    e44c:	0000e675 	.word	0x0000e675
    e450:	00030d41 	.word	0x00030d41
    e454:	0000ec39 	.word	0x0000ec39
    e458:	0000ec51 	.word	0x0000ec51
    e45c:	00001b0d 	.word	0x00001b0d
    e460:	00101112 	.word	0x00101112
    e464:	0000e6f5 	.word	0x0000e6f5
    e468:	20000ea0 	.word	0x20000ea0
    e46c:	20000ea2 	.word	0x20000ea2
    e470:	0000e699 	.word	0x0000e699
    e474:	00061a80 	.word	0x00061a80
    e478:	00081111 	.word	0x00081111

0000e47c <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    e47c:	b510      	push	{r4, lr}
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    e47e:	4b08      	ldr	r3, [pc, #32]	; (e4a0 <sd_mmc_start_read_blocks+0x24>)
{
    e480:	000c      	movs	r4, r1
	if (!driver_start_read_blocks(dest, nb_block)) {
    e482:	4798      	blx	r3
    e484:	2800      	cmp	r0, #0
    e486:	d104      	bne.n	e492 <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    e488:	2100      	movs	r1, #0
		return SD_MMC_ERR_COMM;
    e48a:	2005      	movs	r0, #5
    e48c:	4b05      	ldr	r3, [pc, #20]	; (e4a4 <sd_mmc_start_read_blocks+0x28>)
    e48e:	8019      	strh	r1, [r3, #0]
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    e490:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    e492:	4b04      	ldr	r3, [pc, #16]	; (e4a4 <sd_mmc_start_read_blocks+0x28>)
	return SD_MMC_OK;
    e494:	2000      	movs	r0, #0
	sd_mmc_nb_block_remaining -= nb_block;
    e496:	8819      	ldrh	r1, [r3, #0]
    e498:	1b09      	subs	r1, r1, r4
    e49a:	b289      	uxth	r1, r1
	return SD_MMC_OK;
    e49c:	e7f7      	b.n	e48e <sd_mmc_start_read_blocks+0x12>
    e49e:	46c0      	nop			; (mov r8, r8)
    e4a0:	0000ed39 	.word	0x0000ed39
    e4a4:	20000ea0 	.word	0x20000ea0

0000e4a8 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    e4a8:	b510      	push	{r4, lr}
	if (!driver_wait_end_of_read_blocks()) {
    e4aa:	4b15      	ldr	r3, [pc, #84]	; (e500 <sd_mmc_wait_end_of_read_blocks+0x58>)
{
    e4ac:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
    e4ae:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    e4b0:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
    e4b2:	2800      	cmp	r0, #0
    e4b4:	d101      	bne.n	e4ba <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    e4b6:	0018      	movs	r0, r3
    e4b8:	bd10      	pop	{r4, pc}
	if (abort) {
    e4ba:	2c00      	cmp	r4, #0
    e4bc:	d113      	bne.n	e4e6 <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
    e4be:	4b11      	ldr	r3, [pc, #68]	; (e504 <sd_mmc_wait_end_of_read_blocks+0x5c>)
    e4c0:	881b      	ldrh	r3, [r3, #0]
    e4c2:	2b00      	cmp	r3, #0
    e4c4:	d10d      	bne.n	e4e2 <sd_mmc_wait_end_of_read_blocks+0x3a>
	if (sd_mmc_nb_block_to_tranfer == 1) {
    e4c6:	4b10      	ldr	r3, [pc, #64]	; (e508 <sd_mmc_wait_end_of_read_blocks+0x60>)
    e4c8:	881b      	ldrh	r3, [r3, #0]
    e4ca:	2b01      	cmp	r3, #1
    e4cc:	d005      	beq.n	e4da <sd_mmc_wait_end_of_read_blocks+0x32>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    e4ce:	2100      	movs	r1, #0
    e4d0:	480e      	ldr	r0, [pc, #56]	; (e50c <sd_mmc_wait_end_of_read_blocks+0x64>)
    e4d2:	4c0f      	ldr	r4, [pc, #60]	; (e510 <sd_mmc_wait_end_of_read_blocks+0x68>)
    e4d4:	47a0      	blx	r4
    e4d6:	2800      	cmp	r0, #0
    e4d8:	d00e      	beq.n	e4f8 <sd_mmc_wait_end_of_read_blocks+0x50>
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    e4da:	4b0e      	ldr	r3, [pc, #56]	; (e514 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    e4dc:	781b      	ldrb	r3, [r3, #0]
    e4de:	2b00      	cmp	r3, #0
    e4e0:	d005      	beq.n	e4ee <sd_mmc_wait_end_of_read_blocks+0x46>
		return SD_MMC_OK;
    e4e2:	2300      	movs	r3, #0
    e4e4:	e7e7      	b.n	e4b6 <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_nb_block_remaining = 0;
    e4e6:	2200      	movs	r2, #0
    e4e8:	4b06      	ldr	r3, [pc, #24]	; (e504 <sd_mmc_wait_end_of_read_blocks+0x5c>)
    e4ea:	801a      	strh	r2, [r3, #0]
    e4ec:	e7eb      	b.n	e4c6 <sd_mmc_wait_end_of_read_blocks+0x1e>
		driver_deselect_device(sd_mmc_slot_sel);
    e4ee:	4b0a      	ldr	r3, [pc, #40]	; (e518 <sd_mmc_wait_end_of_read_blocks+0x70>)
    e4f0:	2000      	movs	r0, #0
    e4f2:	4798      	blx	r3
		return SD_MMC_OK;
    e4f4:	2300      	movs	r3, #0
    e4f6:	e7de      	b.n	e4b6 <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    e4f8:	2100      	movs	r1, #0
    e4fa:	4804      	ldr	r0, [pc, #16]	; (e50c <sd_mmc_wait_end_of_read_blocks+0x64>)
    e4fc:	47a0      	blx	r4
    e4fe:	e7ec      	b.n	e4da <sd_mmc_wait_end_of_read_blocks+0x32>
    e500:	0000ee15 	.word	0x0000ee15
    e504:	20000ea0 	.word	0x20000ea0
    e508:	20000ea2 	.word	0x20000ea2
    e50c:	0000310c 	.word	0x0000310c
    e510:	0000ec39 	.word	0x0000ec39
    e514:	20000ea4 	.word	0x20000ea4
    e518:	0000e699 	.word	0x0000e699

0000e51c <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    e51c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e51e:	4646      	mov	r6, r8
    e520:	46d6      	mov	lr, sl
    e522:	464f      	mov	r7, r9
    e524:	b5c0      	push	{r6, r7, lr}
    e526:	0015      	movs	r5, r2
    e528:	b082      	sub	sp, #8
    e52a:	000e      	movs	r6, r1
		return SD_MMC_ERR_SLOT;
    e52c:	2404      	movs	r4, #4
	if (slot >= SD_MMC_MEM_CNT) {
    e52e:	2800      	cmp	r0, #0
    e530:	d006      	beq.n	e540 <sd_mmc_init_write_blocks+0x24>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    e532:	0020      	movs	r0, r4
    e534:	b002      	add	sp, #8
    e536:	bc1c      	pop	{r2, r3, r4}
    e538:	4690      	mov	r8, r2
    e53a:	4699      	mov	r9, r3
    e53c:	46a2      	mov	sl, r4
    e53e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    e540:	4c23      	ldr	r4, [pc, #140]	; (e5d0 <sd_mmc_init_write_blocks+0xb4>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    e542:	7aa3      	ldrb	r3, [r4, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    e544:	3b03      	subs	r3, #3
    e546:	2b01      	cmp	r3, #1
    e548:	d937      	bls.n	e5ba <sd_mmc_init_write_blocks+0x9e>
    e54a:	7fa3      	ldrb	r3, [r4, #30]
    e54c:	6821      	ldr	r1, [r4, #0]
    e54e:	1e58      	subs	r0, r3, #1
    e550:	4183      	sbcs	r3, r0
    e552:	7b62      	ldrb	r2, [r4, #13]
    e554:	b2db      	uxtb	r3, r3
	sd_mmc_slot_sel = slot;
    e556:	481f      	ldr	r0, [pc, #124]	; (e5d4 <sd_mmc_init_write_blocks+0xb8>)
    e558:	4682      	mov	sl, r0
    e55a:	2000      	movs	r0, #0
    e55c:	4657      	mov	r7, sl
    e55e:	7038      	strb	r0, [r7, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    e560:	481d      	ldr	r0, [pc, #116]	; (e5d8 <sd_mmc_init_write_blocks+0xbc>)
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    e562:	4f1e      	ldr	r7, [pc, #120]	; (e5dc <sd_mmc_init_write_blocks+0xc0>)
	sd_mmc_card = &sd_mmc_cards[slot];
    e564:	6004      	str	r4, [r0, #0]
    e566:	4680      	mov	r8, r0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    e568:	2000      	movs	r0, #0
    e56a:	47b8      	blx	r7
	if (sd_mmc_err != SD_MMC_OK) {
    e56c:	7aa3      	ldrb	r3, [r4, #10]
    e56e:	2401      	movs	r4, #1
    e570:	2b02      	cmp	r3, #2
    e572:	d0de      	beq.n	e532 <sd_mmc_init_write_blocks+0x16>
	if (nb_block > 1) {
    e574:	2d01      	cmp	r5, #1
    e576:	d91e      	bls.n	e5b6 <sd_mmc_init_write_blocks+0x9a>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    e578:	4819      	ldr	r0, [pc, #100]	; (e5e0 <sd_mmc_init_write_blocks+0xc4>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    e57a:	4643      	mov	r3, r8
    e57c:	681b      	ldr	r3, [r3, #0]
    e57e:	7adb      	ldrb	r3, [r3, #11]
    e580:	071b      	lsls	r3, r3, #28
    e582:	d400      	bmi.n	e586 <sd_mmc_init_write_blocks+0x6a>
		arg = (start * SD_MMC_BLOCK_SIZE);
    e584:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    e586:	2301      	movs	r3, #1
    e588:	2280      	movs	r2, #128	; 0x80
    e58a:	9300      	str	r3, [sp, #0]
    e58c:	0092      	lsls	r2, r2, #2
    e58e:	002b      	movs	r3, r5
    e590:	0031      	movs	r1, r6
    e592:	4c14      	ldr	r4, [pc, #80]	; (e5e4 <sd_mmc_init_write_blocks+0xc8>)
    e594:	47a0      	blx	r4
    e596:	2800      	cmp	r0, #0
    e598:	d107      	bne.n	e5aa <sd_mmc_init_write_blocks+0x8e>
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    e59a:	4653      	mov	r3, sl
    e59c:	781b      	ldrb	r3, [r3, #0]
		return SD_MMC_ERR_COMM;
    e59e:	2405      	movs	r4, #5
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    e5a0:	2b00      	cmp	r3, #0
    e5a2:	d1c6      	bne.n	e532 <sd_mmc_init_write_blocks+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
    e5a4:	4b10      	ldr	r3, [pc, #64]	; (e5e8 <sd_mmc_init_write_blocks+0xcc>)
    e5a6:	4798      	blx	r3
    e5a8:	e7c3      	b.n	e532 <sd_mmc_init_write_blocks+0x16>
	sd_mmc_nb_block_remaining = nb_block;
    e5aa:	4b10      	ldr	r3, [pc, #64]	; (e5ec <sd_mmc_init_write_blocks+0xd0>)
	return SD_MMC_OK;
    e5ac:	2400      	movs	r4, #0
	sd_mmc_nb_block_remaining = nb_block;
    e5ae:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    e5b0:	4b0f      	ldr	r3, [pc, #60]	; (e5f0 <sd_mmc_init_write_blocks+0xd4>)
    e5b2:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
    e5b4:	e7bd      	b.n	e532 <sd_mmc_init_write_blocks+0x16>
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    e5b6:	480f      	ldr	r0, [pc, #60]	; (e5f4 <sd_mmc_init_write_blocks+0xd8>)
    e5b8:	e7df      	b.n	e57a <sd_mmc_init_write_blocks+0x5e>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    e5ba:	2302      	movs	r3, #2
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    e5bc:	490e      	ldr	r1, [pc, #56]	; (e5f8 <sd_mmc_init_write_blocks+0xdc>)
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    e5be:	72a3      	strb	r3, [r4, #10]
		sd_mmc_cards[slot].bus_width = 1;
    e5c0:	3b01      	subs	r3, #1
    e5c2:	7363      	strb	r3, [r4, #13]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    e5c4:	6021      	str	r1, [r4, #0]
		sd_mmc_cards[slot].high_speed = 0;
    e5c6:	77a0      	strb	r0, [r4, #30]
    e5c8:	2300      	movs	r3, #0
    e5ca:	2201      	movs	r2, #1
    e5cc:	e7c3      	b.n	e556 <sd_mmc_init_write_blocks+0x3a>
    e5ce:	46c0      	nop			; (mov r8, r8)
    e5d0:	20000e80 	.word	0x20000e80
    e5d4:	20000ea4 	.word	0x20000ea4
    e5d8:	20000e7c 	.word	0x20000e7c
    e5dc:	0000e675 	.word	0x0000e675
    e5e0:	00109119 	.word	0x00109119
    e5e4:	0000e6f5 	.word	0x0000e6f5
    e5e8:	0000e699 	.word	0x0000e699
    e5ec:	20000ea0 	.word	0x20000ea0
    e5f0:	20000ea2 	.word	0x20000ea2
    e5f4:	00089118 	.word	0x00089118
    e5f8:	00061a80 	.word	0x00061a80

0000e5fc <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    e5fc:	b510      	push	{r4, lr}
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    e5fe:	4b08      	ldr	r3, [pc, #32]	; (e620 <sd_mmc_start_write_blocks+0x24>)
{
    e600:	000c      	movs	r4, r1
	if (!driver_start_write_blocks(src, nb_block)) {
    e602:	4798      	blx	r3
    e604:	2800      	cmp	r0, #0
    e606:	d104      	bne.n	e612 <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    e608:	2100      	movs	r1, #0
		return SD_MMC_ERR_COMM;
    e60a:	2005      	movs	r0, #5
    e60c:	4b05      	ldr	r3, [pc, #20]	; (e624 <sd_mmc_start_write_blocks+0x28>)
    e60e:	8019      	strh	r1, [r3, #0]
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    e610:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    e612:	4b04      	ldr	r3, [pc, #16]	; (e624 <sd_mmc_start_write_blocks+0x28>)
	return SD_MMC_OK;
    e614:	2000      	movs	r0, #0
	sd_mmc_nb_block_remaining -= nb_block;
    e616:	8819      	ldrh	r1, [r3, #0]
    e618:	1b09      	subs	r1, r1, r4
    e61a:	b289      	uxth	r1, r1
	return SD_MMC_OK;
    e61c:	e7f7      	b.n	e60e <sd_mmc_start_write_blocks+0x12>
    e61e:	46c0      	nop			; (mov r8, r8)
    e620:	0000ee19 	.word	0x0000ee19
    e624:	20000ea0 	.word	0x20000ea0

0000e628 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    e628:	b510      	push	{r4, lr}
	if (!driver_wait_end_of_write_blocks()) {
    e62a:	4b0e      	ldr	r3, [pc, #56]	; (e664 <sd_mmc_wait_end_of_write_blocks+0x3c>)
{
    e62c:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
    e62e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    e630:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
    e632:	2800      	cmp	r0, #0
    e634:	d101      	bne.n	e63a <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    e636:	0018      	movs	r0, r3
    e638:	bd10      	pop	{r4, pc}
	if (abort) {
    e63a:	2c00      	cmp	r4, #0
    e63c:	d109      	bne.n	e652 <sd_mmc_wait_end_of_write_blocks+0x2a>
	} else if (sd_mmc_nb_block_remaining) {
    e63e:	4b0a      	ldr	r3, [pc, #40]	; (e668 <sd_mmc_wait_end_of_write_blocks+0x40>)
    e640:	881b      	ldrh	r3, [r3, #0]
    e642:	2b00      	cmp	r3, #0
    e644:	d103      	bne.n	e64e <sd_mmc_wait_end_of_write_blocks+0x26>
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    e646:	4b09      	ldr	r3, [pc, #36]	; (e66c <sd_mmc_wait_end_of_write_blocks+0x44>)
    e648:	781b      	ldrb	r3, [r3, #0]
    e64a:	2b00      	cmp	r3, #0
    e64c:	d005      	beq.n	e65a <sd_mmc_wait_end_of_write_blocks+0x32>
		return SD_MMC_OK;
    e64e:	2300      	movs	r3, #0
    e650:	e7f1      	b.n	e636 <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_nb_block_remaining = 0;
    e652:	2200      	movs	r2, #0
    e654:	4b04      	ldr	r3, [pc, #16]	; (e668 <sd_mmc_wait_end_of_write_blocks+0x40>)
    e656:	801a      	strh	r2, [r3, #0]
    e658:	e7f5      	b.n	e646 <sd_mmc_wait_end_of_write_blocks+0x1e>
		driver_deselect_device(sd_mmc_slot_sel);
    e65a:	4b05      	ldr	r3, [pc, #20]	; (e670 <sd_mmc_wait_end_of_write_blocks+0x48>)
    e65c:	2000      	movs	r0, #0
    e65e:	4798      	blx	r3
		return SD_MMC_OK;
    e660:	2300      	movs	r3, #0
    e662:	e7e8      	b.n	e636 <sd_mmc_wait_end_of_write_blocks+0xe>
    e664:	0000ef69 	.word	0x0000ef69
    e668:	20000ea0 	.word	0x20000ea0
    e66c:	20000ea4 	.word	0x20000ea4
    e670:	0000e699 	.word	0x0000e699

0000e674 <sd_mmc_spi_select_device>:
void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    e674:	2200      	movs	r2, #0
{
    e676:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    e678:	4b03      	ldr	r3, [pc, #12]	; (e688 <sd_mmc_spi_select_device+0x14>)
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&spi_main, clock)) {
		clock -= clock / 8;
	}
	*/
	//spi_select_slave(&spi_main, &sd_mmc_spi_devices[slot], true);
	spi_select_slave(&spi_main, &slave_SD, true);//Kfausnight 20200721
    e67a:	4904      	ldr	r1, [pc, #16]	; (e68c <sd_mmc_spi_select_device+0x18>)
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    e67c:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&spi_main, &slave_SD, true);//Kfausnight 20200721
    e67e:	4804      	ldr	r0, [pc, #16]	; (e690 <sd_mmc_spi_select_device+0x1c>)
    e680:	3201      	adds	r2, #1
    e682:	4b04      	ldr	r3, [pc, #16]	; (e694 <sd_mmc_spi_select_device+0x20>)
    e684:	4798      	blx	r3
}
    e686:	bd10      	pop	{r4, pc}
    e688:	20000ea8 	.word	0x20000ea8
    e68c:	20000fa8 	.word	0x20000fa8
    e690:	20000fac 	.word	0x20000fac
    e694:	00015a39 	.word	0x00015a39

0000e698 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    e698:	2200      	movs	r2, #0
{
    e69a:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    e69c:	4b03      	ldr	r3, [pc, #12]	; (e6ac <sd_mmc_spi_deselect_device+0x14>)
	//spi_select_slave(&spi_main, &sd_mmc_spi_devices[slot], false);
	spi_select_slave(&spi_main, &slave_SD, false);//Kfausnight 20200721
    e69e:	4904      	ldr	r1, [pc, #16]	; (e6b0 <sd_mmc_spi_deselect_device+0x18>)
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    e6a0:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&spi_main, &slave_SD, false);//Kfausnight 20200721
    e6a2:	4804      	ldr	r0, [pc, #16]	; (e6b4 <sd_mmc_spi_deselect_device+0x1c>)
    e6a4:	4b04      	ldr	r3, [pc, #16]	; (e6b8 <sd_mmc_spi_deselect_device+0x20>)
    e6a6:	4798      	blx	r3
}
    e6a8:	bd10      	pop	{r4, pc}
    e6aa:	46c0      	nop			; (mov r8, r8)
    e6ac:	20000ea8 	.word	0x20000ea8
    e6b0:	20000fa8 	.word	0x20000fa8
    e6b4:	20000fac 	.word	0x20000fac
    e6b8:	00015a39 	.word	0x00015a39

0000e6bc <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    e6bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    e6be:	b083      	sub	sp, #12
	uint8_t i;
	uint8_t dummy = 0xFF;
    e6c0:	466b      	mov	r3, sp
    e6c2:	1ddd      	adds	r5, r3, #7
    e6c4:	23ff      	movs	r3, #255	; 0xff

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    e6c6:	2200      	movs	r2, #0
    e6c8:	240a      	movs	r4, #10
	uint8_t dummy = 0xFF;
    e6ca:	702b      	strb	r3, [r5, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    e6cc:	4b06      	ldr	r3, [pc, #24]	; (e6e8 <sd_mmc_spi_send_clock+0x2c>)
    e6ce:	4f07      	ldr	r7, [pc, #28]	; (e6ec <sd_mmc_spi_send_clock+0x30>)
    e6d0:	4e07      	ldr	r6, [pc, #28]	; (e6f0 <sd_mmc_spi_send_clock+0x34>)
    e6d2:	701a      	strb	r2, [r3, #0]
    e6d4:	3c01      	subs	r4, #1
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&spi_main, &dummy, 1); // 8 cycles
    e6d6:	2201      	movs	r2, #1
    e6d8:	0029      	movs	r1, r5
    e6da:	0038      	movs	r0, r7
    e6dc:	b2e4      	uxtb	r4, r4
    e6de:	47b0      	blx	r6
	for (i = 0; i < 10; i++) {
    e6e0:	2c00      	cmp	r4, #0
    e6e2:	d1f7      	bne.n	e6d4 <sd_mmc_spi_send_clock+0x18>
	}
}
    e6e4:	b003      	add	sp, #12
    e6e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e6e8:	20000ea8 	.word	0x20000ea8
    e6ec:	20000fac 	.word	0x20000fac
    e6f0:	00015b0d 	.word	0x00015b0d

0000e6f4 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    e6f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    e6f6:	4657      	mov	r7, sl
    e6f8:	464e      	mov	r6, r9
    e6fa:	4645      	mov	r5, r8
    e6fc:	46de      	mov	lr, fp
    e6fe:	b5e0      	push	{r5, r6, r7, lr}
    e700:	b089      	sub	sp, #36	; 0x24
    e702:	9303      	str	r3, [sp, #12]
	uint8_t dummy = 0xFF;
    e704:	ab04      	add	r3, sp, #16
    e706:	3305      	adds	r3, #5
    e708:	469c      	mov	ip, r3
{
    e70a:	9202      	str	r2, [sp, #8]
	uint8_t dummy = 0xFF;
    e70c:	23ff      	movs	r3, #255	; 0xff
    e70e:	4662      	mov	r2, ip
{
    e710:	4680      	mov	r8, r0
	uint8_t dummy = 0xFF;
    e712:	7013      	strb	r3, [r2, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    e714:	2300      	movs	r3, #0
    e716:	4ade      	ldr	r2, [pc, #888]	; (ea90 <sd_mmc_spi_adtc_start+0x39c>)

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    e718:	203f      	movs	r0, #63	; 0x3f
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    e71a:	7013      	strb	r3, [r2, #0]
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    e71c:	4643      	mov	r3, r8
    e71e:	4018      	ands	r0, r3
    e720:	2340      	movs	r3, #64	; 0x40
{
    e722:	4689      	mov	r9, r1
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    e724:	4318      	orrs	r0, r3
	cmd_token[1] = arg >> 24;
    e726:	000b      	movs	r3, r1
	cmd_token[2] = arg >> 16;
	cmd_token[3] = arg >> 8;
	cmd_token[4] = arg;
    e728:	466a      	mov	r2, sp
	cmd_token[3] = arg >> 8;
    e72a:	0a1d      	lsrs	r5, r3, #8
	cmd_token[4] = arg;
    e72c:	464b      	mov	r3, r9
    e72e:	71d3      	strb	r3, [r2, #7]
			crc <<= 1;
    e730:	2300      	movs	r3, #0
			value <<= 1;
    e732:	0046      	lsls	r6, r0, #1
			crc <<= 1;
    e734:	b2db      	uxtb	r3, r3
    e736:	469a      	mov	sl, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    e738:	405e      	eors	r6, r3
    e73a:	466b      	mov	r3, sp
	cmd_token[4] = arg;
    e73c:	79d2      	ldrb	r2, [r2, #7]
			if ((value & 0x80) ^ (crc & 0x80)) {
    e73e:	71de      	strb	r6, [r3, #7]
    e740:	79de      	ldrb	r6, [r3, #7]
				crc ^= 0x09;
    e742:	4653      	mov	r3, sl
			if ((value & 0x80) ^ (crc & 0x80)) {
    e744:	b276      	sxtb	r6, r6
    e746:	46b1      	mov	r9, r6
				crc ^= 0x09;
    e748:	2609      	movs	r6, #9
    e74a:	431e      	orrs	r6, r3
    e74c:	46b3      	mov	fp, r6
    e74e:	464e      	mov	r6, r9
	cmd_token[1] = arg >> 24;
    e750:	0e0f      	lsrs	r7, r1, #24
	cmd_token[2] = arg >> 16;
    e752:	0c09      	lsrs	r1, r1, #16
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    e754:	ac06      	add	r4, sp, #24
	cmd_token[2] = arg >> 16;
    e756:	b2c9      	uxtb	r1, r1
	cmd_token[3] = arg >> 8;
    e758:	b2ed      	uxtb	r5, r5
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    e75a:	7020      	strb	r0, [r4, #0]
	cmd_token[1] = arg >> 24;
    e75c:	7067      	strb	r7, [r4, #1]
	cmd_token[2] = arg >> 16;
    e75e:	70a1      	strb	r1, [r4, #2]
	cmd_token[3] = arg >> 8;
    e760:	70e5      	strb	r5, [r4, #3]
	cmd_token[4] = arg;
    e762:	7122      	strb	r2, [r4, #4]
    e764:	4653      	mov	r3, sl
    e766:	2e00      	cmp	r6, #0
    e768:	da00      	bge.n	e76c <sd_mmc_spi_adtc_start+0x78>
    e76a:	e20f      	b.n	eb8c <sd_mmc_spi_adtc_start+0x498>
			crc <<= 1;
    e76c:	005b      	lsls	r3, r3, #1
    e76e:	b2db      	uxtb	r3, r3
			value <<= 1;
    e770:	0086      	lsls	r6, r0, #2
			if ((value & 0x80) ^ (crc & 0x80)) {
    e772:	405e      	eors	r6, r3
    e774:	46b1      	mov	r9, r6
				crc ^= 0x09;
    e776:	2609      	movs	r6, #9
    e778:	405e      	eors	r6, r3
    e77a:	46b3      	mov	fp, r6
    e77c:	464e      	mov	r6, r9
    e77e:	0636      	lsls	r6, r6, #24
    e780:	d500      	bpl.n	e784 <sd_mmc_spi_adtc_start+0x90>
    e782:	e201      	b.n	eb88 <sd_mmc_spi_adtc_start+0x494>
			crc <<= 1;
    e784:	005b      	lsls	r3, r3, #1
    e786:	b2db      	uxtb	r3, r3
			value <<= 1;
    e788:	00c6      	lsls	r6, r0, #3
			if ((value & 0x80) ^ (crc & 0x80)) {
    e78a:	405e      	eors	r6, r3
    e78c:	46b1      	mov	r9, r6
				crc ^= 0x09;
    e78e:	2609      	movs	r6, #9
    e790:	405e      	eors	r6, r3
    e792:	46b3      	mov	fp, r6
    e794:	464e      	mov	r6, r9
    e796:	0636      	lsls	r6, r6, #24
    e798:	d500      	bpl.n	e79c <sd_mmc_spi_adtc_start+0xa8>
    e79a:	e1f3      	b.n	eb84 <sd_mmc_spi_adtc_start+0x490>
			crc <<= 1;
    e79c:	005b      	lsls	r3, r3, #1
    e79e:	b2db      	uxtb	r3, r3
			value <<= 1;
    e7a0:	0106      	lsls	r6, r0, #4
			if ((value & 0x80) ^ (crc & 0x80)) {
    e7a2:	405e      	eors	r6, r3
    e7a4:	46b1      	mov	r9, r6
				crc ^= 0x09;
    e7a6:	2609      	movs	r6, #9
    e7a8:	405e      	eors	r6, r3
    e7aa:	46b3      	mov	fp, r6
    e7ac:	464e      	mov	r6, r9
    e7ae:	0636      	lsls	r6, r6, #24
    e7b0:	d500      	bpl.n	e7b4 <sd_mmc_spi_adtc_start+0xc0>
    e7b2:	e1e5      	b.n	eb80 <sd_mmc_spi_adtc_start+0x48c>
			crc <<= 1;
    e7b4:	005b      	lsls	r3, r3, #1
    e7b6:	b2db      	uxtb	r3, r3
			value <<= 1;
    e7b8:	0146      	lsls	r6, r0, #5
			if ((value & 0x80) ^ (crc & 0x80)) {
    e7ba:	405e      	eors	r6, r3
    e7bc:	46b1      	mov	r9, r6
				crc ^= 0x09;
    e7be:	2609      	movs	r6, #9
    e7c0:	405e      	eors	r6, r3
    e7c2:	46b3      	mov	fp, r6
    e7c4:	464e      	mov	r6, r9
    e7c6:	0636      	lsls	r6, r6, #24
    e7c8:	d500      	bpl.n	e7cc <sd_mmc_spi_adtc_start+0xd8>
    e7ca:	e1d7      	b.n	eb7c <sd_mmc_spi_adtc_start+0x488>
			crc <<= 1;
    e7cc:	005b      	lsls	r3, r3, #1
    e7ce:	b2db      	uxtb	r3, r3
			value <<= 1;
    e7d0:	0186      	lsls	r6, r0, #6
			if ((value & 0x80) ^ (crc & 0x80)) {
    e7d2:	405e      	eors	r6, r3
    e7d4:	46b1      	mov	r9, r6
				crc ^= 0x09;
    e7d6:	2609      	movs	r6, #9
    e7d8:	405e      	eors	r6, r3
    e7da:	46b3      	mov	fp, r6
    e7dc:	464e      	mov	r6, r9
    e7de:	0636      	lsls	r6, r6, #24
    e7e0:	d500      	bpl.n	e7e4 <sd_mmc_spi_adtc_start+0xf0>
    e7e2:	e1c9      	b.n	eb78 <sd_mmc_spi_adtc_start+0x484>
    e7e4:	2609      	movs	r6, #9
			crc <<= 1;
    e7e6:	005b      	lsls	r3, r3, #1
    e7e8:	b2db      	uxtb	r3, r3
			value <<= 1;
    e7ea:	01c0      	lsls	r0, r0, #7
			if ((value & 0x80) ^ (crc & 0x80)) {
    e7ec:	4058      	eors	r0, r3
				crc ^= 0x09;
    e7ee:	405e      	eors	r6, r3
    e7f0:	0600      	lsls	r0, r0, #24
    e7f2:	d500      	bpl.n	e7f6 <sd_mmc_spi_adtc_start+0x102>
    e7f4:	e1be      	b.n	eb74 <sd_mmc_spi_adtc_start+0x480>
			if ((value & 0x80) ^ (crc & 0x80)) {
    e7f6:	0038      	movs	r0, r7
				crc ^= 0x09;
    e7f8:	2609      	movs	r6, #9
			crc <<= 1;
    e7fa:	005b      	lsls	r3, r3, #1
    e7fc:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    e7fe:	4058      	eors	r0, r3
    e800:	b240      	sxtb	r0, r0
				crc ^= 0x09;
    e802:	405e      	eors	r6, r3
    e804:	2800      	cmp	r0, #0
    e806:	da00      	bge.n	e80a <sd_mmc_spi_adtc_start+0x116>
    e808:	e1b2      	b.n	eb70 <sd_mmc_spi_adtc_start+0x47c>
    e80a:	2609      	movs	r6, #9
			crc <<= 1;
    e80c:	005b      	lsls	r3, r3, #1
    e80e:	b2db      	uxtb	r3, r3
			value <<= 1;
    e810:	0078      	lsls	r0, r7, #1
			if ((value & 0x80) ^ (crc & 0x80)) {
    e812:	4058      	eors	r0, r3
				crc ^= 0x09;
    e814:	405e      	eors	r6, r3
    e816:	0600      	lsls	r0, r0, #24
    e818:	d500      	bpl.n	e81c <sd_mmc_spi_adtc_start+0x128>
    e81a:	e1a7      	b.n	eb6c <sd_mmc_spi_adtc_start+0x478>
    e81c:	2609      	movs	r6, #9
			crc <<= 1;
    e81e:	005b      	lsls	r3, r3, #1
    e820:	b2db      	uxtb	r3, r3
			value <<= 1;
    e822:	00b8      	lsls	r0, r7, #2
			if ((value & 0x80) ^ (crc & 0x80)) {
    e824:	4058      	eors	r0, r3
				crc ^= 0x09;
    e826:	405e      	eors	r6, r3
    e828:	0600      	lsls	r0, r0, #24
    e82a:	d500      	bpl.n	e82e <sd_mmc_spi_adtc_start+0x13a>
    e82c:	e19c      	b.n	eb68 <sd_mmc_spi_adtc_start+0x474>
    e82e:	2609      	movs	r6, #9
			crc <<= 1;
    e830:	005b      	lsls	r3, r3, #1
    e832:	b2db      	uxtb	r3, r3
			value <<= 1;
    e834:	00f8      	lsls	r0, r7, #3
			if ((value & 0x80) ^ (crc & 0x80)) {
    e836:	4058      	eors	r0, r3
				crc ^= 0x09;
    e838:	405e      	eors	r6, r3
    e83a:	0600      	lsls	r0, r0, #24
    e83c:	d500      	bpl.n	e840 <sd_mmc_spi_adtc_start+0x14c>
    e83e:	e191      	b.n	eb64 <sd_mmc_spi_adtc_start+0x470>
    e840:	2609      	movs	r6, #9
			crc <<= 1;
    e842:	005b      	lsls	r3, r3, #1
    e844:	b2db      	uxtb	r3, r3
			value <<= 1;
    e846:	0138      	lsls	r0, r7, #4
			if ((value & 0x80) ^ (crc & 0x80)) {
    e848:	4058      	eors	r0, r3
				crc ^= 0x09;
    e84a:	405e      	eors	r6, r3
    e84c:	0600      	lsls	r0, r0, #24
    e84e:	d500      	bpl.n	e852 <sd_mmc_spi_adtc_start+0x15e>
    e850:	e186      	b.n	eb60 <sd_mmc_spi_adtc_start+0x46c>
    e852:	2609      	movs	r6, #9
			crc <<= 1;
    e854:	005b      	lsls	r3, r3, #1
    e856:	b2db      	uxtb	r3, r3
			value <<= 1;
    e858:	0178      	lsls	r0, r7, #5
			if ((value & 0x80) ^ (crc & 0x80)) {
    e85a:	4058      	eors	r0, r3
				crc ^= 0x09;
    e85c:	405e      	eors	r6, r3
    e85e:	0600      	lsls	r0, r0, #24
    e860:	d500      	bpl.n	e864 <sd_mmc_spi_adtc_start+0x170>
    e862:	e17b      	b.n	eb5c <sd_mmc_spi_adtc_start+0x468>
    e864:	2609      	movs	r6, #9
			crc <<= 1;
    e866:	005b      	lsls	r3, r3, #1
    e868:	b2db      	uxtb	r3, r3
			value <<= 1;
    e86a:	01b8      	lsls	r0, r7, #6
			if ((value & 0x80) ^ (crc & 0x80)) {
    e86c:	4058      	eors	r0, r3
				crc ^= 0x09;
    e86e:	405e      	eors	r6, r3
    e870:	0600      	lsls	r0, r0, #24
    e872:	d500      	bpl.n	e876 <sd_mmc_spi_adtc_start+0x182>
    e874:	e170      	b.n	eb58 <sd_mmc_spi_adtc_start+0x464>
			value <<= 1;
    e876:	01f8      	lsls	r0, r7, #7
				crc ^= 0x09;
    e878:	2709      	movs	r7, #9
			crc <<= 1;
    e87a:	005b      	lsls	r3, r3, #1
    e87c:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    e87e:	4058      	eors	r0, r3
				crc ^= 0x09;
    e880:	405f      	eors	r7, r3
    e882:	0600      	lsls	r0, r0, #24
    e884:	d500      	bpl.n	e888 <sd_mmc_spi_adtc_start+0x194>
    e886:	e165      	b.n	eb54 <sd_mmc_spi_adtc_start+0x460>
			if ((value & 0x80) ^ (crc & 0x80)) {
    e888:	0008      	movs	r0, r1
				crc ^= 0x09;
    e88a:	2709      	movs	r7, #9
			crc <<= 1;
    e88c:	005b      	lsls	r3, r3, #1
    e88e:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    e890:	4058      	eors	r0, r3
    e892:	b240      	sxtb	r0, r0
				crc ^= 0x09;
    e894:	405f      	eors	r7, r3
    e896:	2800      	cmp	r0, #0
    e898:	da00      	bge.n	e89c <sd_mmc_spi_adtc_start+0x1a8>
    e89a:	e159      	b.n	eb50 <sd_mmc_spi_adtc_start+0x45c>
    e89c:	2709      	movs	r7, #9
			crc <<= 1;
    e89e:	005b      	lsls	r3, r3, #1
    e8a0:	b2db      	uxtb	r3, r3
			value <<= 1;
    e8a2:	0048      	lsls	r0, r1, #1
			if ((value & 0x80) ^ (crc & 0x80)) {
    e8a4:	4058      	eors	r0, r3
				crc ^= 0x09;
    e8a6:	405f      	eors	r7, r3
    e8a8:	0600      	lsls	r0, r0, #24
    e8aa:	d500      	bpl.n	e8ae <sd_mmc_spi_adtc_start+0x1ba>
    e8ac:	e14e      	b.n	eb4c <sd_mmc_spi_adtc_start+0x458>
    e8ae:	2709      	movs	r7, #9
			crc <<= 1;
    e8b0:	005b      	lsls	r3, r3, #1
    e8b2:	b2db      	uxtb	r3, r3
			value <<= 1;
    e8b4:	0088      	lsls	r0, r1, #2
			if ((value & 0x80) ^ (crc & 0x80)) {
    e8b6:	4058      	eors	r0, r3
				crc ^= 0x09;
    e8b8:	405f      	eors	r7, r3
    e8ba:	0600      	lsls	r0, r0, #24
    e8bc:	d500      	bpl.n	e8c0 <sd_mmc_spi_adtc_start+0x1cc>
    e8be:	e143      	b.n	eb48 <sd_mmc_spi_adtc_start+0x454>
    e8c0:	2709      	movs	r7, #9
			crc <<= 1;
    e8c2:	005b      	lsls	r3, r3, #1
    e8c4:	b2db      	uxtb	r3, r3
			value <<= 1;
    e8c6:	00c8      	lsls	r0, r1, #3
			if ((value & 0x80) ^ (crc & 0x80)) {
    e8c8:	4058      	eors	r0, r3
				crc ^= 0x09;
    e8ca:	405f      	eors	r7, r3
    e8cc:	0600      	lsls	r0, r0, #24
    e8ce:	d500      	bpl.n	e8d2 <sd_mmc_spi_adtc_start+0x1de>
    e8d0:	e138      	b.n	eb44 <sd_mmc_spi_adtc_start+0x450>
    e8d2:	2709      	movs	r7, #9
			crc <<= 1;
    e8d4:	005b      	lsls	r3, r3, #1
    e8d6:	b2db      	uxtb	r3, r3
			value <<= 1;
    e8d8:	0108      	lsls	r0, r1, #4
			if ((value & 0x80) ^ (crc & 0x80)) {
    e8da:	4058      	eors	r0, r3
				crc ^= 0x09;
    e8dc:	405f      	eors	r7, r3
    e8de:	0600      	lsls	r0, r0, #24
    e8e0:	d500      	bpl.n	e8e4 <sd_mmc_spi_adtc_start+0x1f0>
    e8e2:	e12d      	b.n	eb40 <sd_mmc_spi_adtc_start+0x44c>
    e8e4:	2709      	movs	r7, #9
			crc <<= 1;
    e8e6:	005b      	lsls	r3, r3, #1
    e8e8:	b2db      	uxtb	r3, r3
			value <<= 1;
    e8ea:	0148      	lsls	r0, r1, #5
			if ((value & 0x80) ^ (crc & 0x80)) {
    e8ec:	4058      	eors	r0, r3
				crc ^= 0x09;
    e8ee:	405f      	eors	r7, r3
    e8f0:	0600      	lsls	r0, r0, #24
    e8f2:	d500      	bpl.n	e8f6 <sd_mmc_spi_adtc_start+0x202>
    e8f4:	e122      	b.n	eb3c <sd_mmc_spi_adtc_start+0x448>
    e8f6:	2709      	movs	r7, #9
			crc <<= 1;
    e8f8:	005b      	lsls	r3, r3, #1
    e8fa:	b2db      	uxtb	r3, r3
			value <<= 1;
    e8fc:	0188      	lsls	r0, r1, #6
			if ((value & 0x80) ^ (crc & 0x80)) {
    e8fe:	4058      	eors	r0, r3
				crc ^= 0x09;
    e900:	405f      	eors	r7, r3
    e902:	0600      	lsls	r0, r0, #24
    e904:	d500      	bpl.n	e908 <sd_mmc_spi_adtc_start+0x214>
    e906:	e117      	b.n	eb38 <sd_mmc_spi_adtc_start+0x444>
    e908:	2009      	movs	r0, #9
			crc <<= 1;
    e90a:	005b      	lsls	r3, r3, #1
    e90c:	b2db      	uxtb	r3, r3
			value <<= 1;
    e90e:	01c9      	lsls	r1, r1, #7
			if ((value & 0x80) ^ (crc & 0x80)) {
    e910:	4059      	eors	r1, r3
				crc ^= 0x09;
    e912:	4058      	eors	r0, r3
    e914:	0609      	lsls	r1, r1, #24
    e916:	d500      	bpl.n	e91a <sd_mmc_spi_adtc_start+0x226>
    e918:	e10c      	b.n	eb34 <sd_mmc_spi_adtc_start+0x440>
			if ((value & 0x80) ^ (crc & 0x80)) {
    e91a:	0029      	movs	r1, r5
				crc ^= 0x09;
    e91c:	2009      	movs	r0, #9
			crc <<= 1;
    e91e:	005b      	lsls	r3, r3, #1
    e920:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    e922:	4059      	eors	r1, r3
    e924:	b249      	sxtb	r1, r1
				crc ^= 0x09;
    e926:	4058      	eors	r0, r3
    e928:	2900      	cmp	r1, #0
    e92a:	da00      	bge.n	e92e <sd_mmc_spi_adtc_start+0x23a>
    e92c:	e100      	b.n	eb30 <sd_mmc_spi_adtc_start+0x43c>
    e92e:	2009      	movs	r0, #9
			crc <<= 1;
    e930:	005b      	lsls	r3, r3, #1
    e932:	b2db      	uxtb	r3, r3
			value <<= 1;
    e934:	0069      	lsls	r1, r5, #1
			if ((value & 0x80) ^ (crc & 0x80)) {
    e936:	4059      	eors	r1, r3
				crc ^= 0x09;
    e938:	4058      	eors	r0, r3
    e93a:	0609      	lsls	r1, r1, #24
    e93c:	d500      	bpl.n	e940 <sd_mmc_spi_adtc_start+0x24c>
    e93e:	e0f5      	b.n	eb2c <sd_mmc_spi_adtc_start+0x438>
    e940:	2009      	movs	r0, #9
			crc <<= 1;
    e942:	005b      	lsls	r3, r3, #1
    e944:	b2db      	uxtb	r3, r3
			value <<= 1;
    e946:	00a9      	lsls	r1, r5, #2
			if ((value & 0x80) ^ (crc & 0x80)) {
    e948:	4059      	eors	r1, r3
				crc ^= 0x09;
    e94a:	4058      	eors	r0, r3
    e94c:	0609      	lsls	r1, r1, #24
    e94e:	d500      	bpl.n	e952 <sd_mmc_spi_adtc_start+0x25e>
    e950:	e0ea      	b.n	eb28 <sd_mmc_spi_adtc_start+0x434>
    e952:	2009      	movs	r0, #9
			crc <<= 1;
    e954:	005b      	lsls	r3, r3, #1
    e956:	b2db      	uxtb	r3, r3
			value <<= 1;
    e958:	00e9      	lsls	r1, r5, #3
			if ((value & 0x80) ^ (crc & 0x80)) {
    e95a:	4059      	eors	r1, r3
				crc ^= 0x09;
    e95c:	4058      	eors	r0, r3
    e95e:	0609      	lsls	r1, r1, #24
    e960:	d500      	bpl.n	e964 <sd_mmc_spi_adtc_start+0x270>
    e962:	e0df      	b.n	eb24 <sd_mmc_spi_adtc_start+0x430>
    e964:	2009      	movs	r0, #9
			crc <<= 1;
    e966:	005b      	lsls	r3, r3, #1
    e968:	b2db      	uxtb	r3, r3
			value <<= 1;
    e96a:	0129      	lsls	r1, r5, #4
			if ((value & 0x80) ^ (crc & 0x80)) {
    e96c:	4059      	eors	r1, r3
				crc ^= 0x09;
    e96e:	4058      	eors	r0, r3
    e970:	0609      	lsls	r1, r1, #24
    e972:	d500      	bpl.n	e976 <sd_mmc_spi_adtc_start+0x282>
    e974:	e0d4      	b.n	eb20 <sd_mmc_spi_adtc_start+0x42c>
    e976:	2009      	movs	r0, #9
			crc <<= 1;
    e978:	005b      	lsls	r3, r3, #1
    e97a:	b2db      	uxtb	r3, r3
			value <<= 1;
    e97c:	0169      	lsls	r1, r5, #5
			if ((value & 0x80) ^ (crc & 0x80)) {
    e97e:	4059      	eors	r1, r3
				crc ^= 0x09;
    e980:	4058      	eors	r0, r3
    e982:	0609      	lsls	r1, r1, #24
    e984:	d500      	bpl.n	e988 <sd_mmc_spi_adtc_start+0x294>
    e986:	e0c9      	b.n	eb1c <sd_mmc_spi_adtc_start+0x428>
    e988:	2009      	movs	r0, #9
			crc <<= 1;
    e98a:	005b      	lsls	r3, r3, #1
    e98c:	b2db      	uxtb	r3, r3
			value <<= 1;
    e98e:	01a9      	lsls	r1, r5, #6
			if ((value & 0x80) ^ (crc & 0x80)) {
    e990:	4059      	eors	r1, r3
				crc ^= 0x09;
    e992:	4058      	eors	r0, r3
    e994:	0609      	lsls	r1, r1, #24
    e996:	d500      	bpl.n	e99a <sd_mmc_spi_adtc_start+0x2a6>
    e998:	e0be      	b.n	eb18 <sd_mmc_spi_adtc_start+0x424>
    e99a:	2109      	movs	r1, #9
			crc <<= 1;
    e99c:	005b      	lsls	r3, r3, #1
    e99e:	b2db      	uxtb	r3, r3
			value <<= 1;
    e9a0:	01ed      	lsls	r5, r5, #7
			if ((value & 0x80) ^ (crc & 0x80)) {
    e9a2:	405d      	eors	r5, r3
				crc ^= 0x09;
    e9a4:	4059      	eors	r1, r3
    e9a6:	0628      	lsls	r0, r5, #24
    e9a8:	d500      	bpl.n	e9ac <sd_mmc_spi_adtc_start+0x2b8>
    e9aa:	e0b3      	b.n	eb14 <sd_mmc_spi_adtc_start+0x420>
			if ((value & 0x80) ^ (crc & 0x80)) {
    e9ac:	0011      	movs	r1, r2
				crc ^= 0x09;
    e9ae:	2009      	movs	r0, #9
			crc <<= 1;
    e9b0:	005b      	lsls	r3, r3, #1
    e9b2:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    e9b4:	4059      	eors	r1, r3
    e9b6:	b249      	sxtb	r1, r1
				crc ^= 0x09;
    e9b8:	4058      	eors	r0, r3
    e9ba:	2900      	cmp	r1, #0
    e9bc:	da00      	bge.n	e9c0 <sd_mmc_spi_adtc_start+0x2cc>
    e9be:	e0a7      	b.n	eb10 <sd_mmc_spi_adtc_start+0x41c>
    e9c0:	2009      	movs	r0, #9
			crc <<= 1;
    e9c2:	005b      	lsls	r3, r3, #1
    e9c4:	b2db      	uxtb	r3, r3
			value <<= 1;
    e9c6:	0051      	lsls	r1, r2, #1
			if ((value & 0x80) ^ (crc & 0x80)) {
    e9c8:	4059      	eors	r1, r3
				crc ^= 0x09;
    e9ca:	4058      	eors	r0, r3
    e9cc:	0609      	lsls	r1, r1, #24
    e9ce:	d500      	bpl.n	e9d2 <sd_mmc_spi_adtc_start+0x2de>
    e9d0:	e09c      	b.n	eb0c <sd_mmc_spi_adtc_start+0x418>
    e9d2:	2009      	movs	r0, #9
			crc <<= 1;
    e9d4:	005b      	lsls	r3, r3, #1
    e9d6:	b2db      	uxtb	r3, r3
			value <<= 1;
    e9d8:	0091      	lsls	r1, r2, #2
			if ((value & 0x80) ^ (crc & 0x80)) {
    e9da:	4059      	eors	r1, r3
				crc ^= 0x09;
    e9dc:	4058      	eors	r0, r3
    e9de:	0609      	lsls	r1, r1, #24
    e9e0:	d500      	bpl.n	e9e4 <sd_mmc_spi_adtc_start+0x2f0>
    e9e2:	e091      	b.n	eb08 <sd_mmc_spi_adtc_start+0x414>
    e9e4:	2009      	movs	r0, #9
			crc <<= 1;
    e9e6:	005b      	lsls	r3, r3, #1
    e9e8:	b2db      	uxtb	r3, r3
			value <<= 1;
    e9ea:	00d1      	lsls	r1, r2, #3
			if ((value & 0x80) ^ (crc & 0x80)) {
    e9ec:	4059      	eors	r1, r3
				crc ^= 0x09;
    e9ee:	4058      	eors	r0, r3
    e9f0:	0609      	lsls	r1, r1, #24
    e9f2:	d500      	bpl.n	e9f6 <sd_mmc_spi_adtc_start+0x302>
    e9f4:	e086      	b.n	eb04 <sd_mmc_spi_adtc_start+0x410>
    e9f6:	2009      	movs	r0, #9
			crc <<= 1;
    e9f8:	005b      	lsls	r3, r3, #1
    e9fa:	b2db      	uxtb	r3, r3
			value <<= 1;
    e9fc:	0111      	lsls	r1, r2, #4
			if ((value & 0x80) ^ (crc & 0x80)) {
    e9fe:	4059      	eors	r1, r3
				crc ^= 0x09;
    ea00:	4058      	eors	r0, r3
    ea02:	0609      	lsls	r1, r1, #24
    ea04:	d500      	bpl.n	ea08 <sd_mmc_spi_adtc_start+0x314>
    ea06:	e07b      	b.n	eb00 <sd_mmc_spi_adtc_start+0x40c>
    ea08:	2009      	movs	r0, #9
			crc <<= 1;
    ea0a:	005b      	lsls	r3, r3, #1
    ea0c:	b2db      	uxtb	r3, r3
			value <<= 1;
    ea0e:	0151      	lsls	r1, r2, #5
			if ((value & 0x80) ^ (crc & 0x80)) {
    ea10:	4059      	eors	r1, r3
				crc ^= 0x09;
    ea12:	4058      	eors	r0, r3
    ea14:	0609      	lsls	r1, r1, #24
    ea16:	d500      	bpl.n	ea1a <sd_mmc_spi_adtc_start+0x326>
    ea18:	e070      	b.n	eafc <sd_mmc_spi_adtc_start+0x408>
    ea1a:	2009      	movs	r0, #9
			crc <<= 1;
    ea1c:	005b      	lsls	r3, r3, #1
    ea1e:	b2db      	uxtb	r3, r3
			value <<= 1;
    ea20:	0191      	lsls	r1, r2, #6
			if ((value & 0x80) ^ (crc & 0x80)) {
    ea22:	4059      	eors	r1, r3
				crc ^= 0x09;
    ea24:	4058      	eors	r0, r3
    ea26:	0609      	lsls	r1, r1, #24
    ea28:	d466      	bmi.n	eaf8 <sd_mmc_spi_adtc_start+0x404>
    ea2a:	2109      	movs	r1, #9
			crc <<= 1;
    ea2c:	005b      	lsls	r3, r3, #1
    ea2e:	b2db      	uxtb	r3, r3
			value <<= 1;
    ea30:	01d2      	lsls	r2, r2, #7
			if ((value & 0x80) ^ (crc & 0x80)) {
    ea32:	405a      	eors	r2, r3
				crc ^= 0x09;
    ea34:	4059      	eors	r1, r3
	crc = (crc << 1) | 1;
    ea36:	0612      	lsls	r2, r2, #24
    ea38:	d45c      	bmi.n	eaf4 <sd_mmc_spi_adtc_start+0x400>
    ea3a:	2201      	movs	r2, #1
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&spi_main, &dummy, 1);
    ea3c:	4d15      	ldr	r5, [pc, #84]	; (ea94 <sd_mmc_spi_adtc_start+0x3a0>)
	crc = (crc << 1) | 1;
    ea3e:	b2db      	uxtb	r3, r3
    ea40:	005b      	lsls	r3, r3, #1
    ea42:	4313      	orrs	r3, r2
	spi_write_buffer_wait(&spi_main, &dummy, 1);
    ea44:	4661      	mov	r1, ip
    ea46:	4e14      	ldr	r6, [pc, #80]	; (ea98 <sd_mmc_spi_adtc_start+0x3a4>)
    ea48:	2201      	movs	r2, #1
    ea4a:	0028      	movs	r0, r5
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    ea4c:	7163      	strb	r3, [r4, #5]
	spi_write_buffer_wait(&spi_main, &dummy, 1);
    ea4e:	47b0      	blx	r6
	// Send command
	spi_write_buffer_wait(&spi_main, cmd_token, sizeof(cmd_token));
    ea50:	0021      	movs	r1, r4
    ea52:	2206      	movs	r2, #6
    ea54:	0028      	movs	r0, r5
    ea56:	47b0      	blx	r6

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    ea58:	ab04      	add	r3, sp, #16
    ea5a:	1d9c      	adds	r4, r3, #6
    ea5c:	23ff      	movs	r3, #255	; 0xff
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&spi_main, &r1, 1,
    ea5e:	2201      	movs	r2, #1
    ea60:	0021      	movs	r1, r4
    ea62:	0028      	movs	r0, r5
    ea64:	4f0d      	ldr	r7, [pc, #52]	; (ea9c <sd_mmc_spi_adtc_start+0x3a8>)
	r1 = 0xFF;
    ea66:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&spi_main, &r1, 1,
    ea68:	2607      	movs	r6, #7
    ea6a:	47b8      	blx	r7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&spi_main, &r1, 1,
    ea6c:	23ff      	movs	r3, #255	; 0xff
    ea6e:	2201      	movs	r2, #1
    ea70:	0021      	movs	r1, r4
    ea72:	0028      	movs	r0, r5
    ea74:	47b8      	blx	r7
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    ea76:	7823      	ldrb	r3, [r4, #0]
    ea78:	b25a      	sxtb	r2, r3
    ea7a:	2a00      	cmp	r2, #0
    ea7c:	da17      	bge.n	eaae <sd_mmc_spi_adtc_start+0x3ba>
    ea7e:	3e01      	subs	r6, #1
    ea80:	b2f6      	uxtb	r6, r6
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    ea82:	2e00      	cmp	r6, #0
    ea84:	d1f2      	bne.n	ea6c <sd_mmc_spi_adtc_start+0x378>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    ea86:	2302      	movs	r3, #2
			return false;
    ea88:	2000      	movs	r0, #0
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    ea8a:	4a01      	ldr	r2, [pc, #4]	; (ea90 <sd_mmc_spi_adtc_start+0x39c>)
    ea8c:	7013      	strb	r3, [r2, #0]
    ea8e:	e007      	b.n	eaa0 <sd_mmc_spi_adtc_start+0x3ac>
    ea90:	20000ea8 	.word	0x20000ea8
    ea94:	20000fac 	.word	0x20000fac
    ea98:	00015b0d 	.word	0x00015b0d
    ea9c:	00015919 	.word	0x00015919

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    eaa0:	b009      	add	sp, #36	; 0x24
    eaa2:	bc3c      	pop	{r2, r3, r4, r5}
    eaa4:	4690      	mov	r8, r2
    eaa6:	4699      	mov	r9, r3
    eaa8:	46a2      	mov	sl, r4
    eaaa:	46ab      	mov	fp, r5
    eaac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    eaae:	4a5c      	ldr	r2, [pc, #368]	; (ec20 <sd_mmc_spi_adtc_start+0x52c>)
    eab0:	4693      	mov	fp, r2
    eab2:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    eab4:	071a      	lsls	r2, r3, #28
    eab6:	d46b      	bmi.n	eb90 <sd_mmc_spi_adtc_start+0x49c>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    eab8:	075a      	lsls	r2, r3, #29
    eaba:	d46e      	bmi.n	eb9a <sd_mmc_spi_adtc_start+0x4a6>
	if (r1 & ~R1_SPI_IDLE) {
    eabc:	2201      	movs	r2, #1
    eabe:	4393      	bics	r3, r2
    eac0:	d000      	beq.n	eac4 <sd_mmc_spi_adtc_start+0x3d0>
    eac2:	e0a4      	b.n	ec0e <sd_mmc_spi_adtc_start+0x51a>
	if (cmd & SDMMC_RESP_BUSY) {
    eac4:	4643      	mov	r3, r8
    eac6:	049b      	lsls	r3, r3, #18
    eac8:	d46c      	bmi.n	eba4 <sd_mmc_spi_adtc_start+0x4b0>
	if (cmd & SDMMC_RESP_8) {
    eaca:	4643      	mov	r3, r8
    eacc:	059b      	lsls	r3, r3, #22
    eace:	d500      	bpl.n	ead2 <sd_mmc_spi_adtc_start+0x3de>
    ead0:	e094      	b.n	ebfc <sd_mmc_spi_adtc_start+0x508>
	if (cmd & SDMMC_RESP_32) {
    ead2:	4643      	mov	r3, r8
    ead4:	055b      	lsls	r3, r3, #21
    ead6:	d500      	bpl.n	eada <sd_mmc_spi_adtc_start+0x3e6>
    ead8:	e085      	b.n	ebe6 <sd_mmc_spi_adtc_start+0x4f2>
	sd_mmc_spi_block_size = block_size;
    eada:	466a      	mov	r2, sp
    eadc:	4b51      	ldr	r3, [pc, #324]	; (ec24 <sd_mmc_spi_adtc_start+0x530>)
    eade:	8912      	ldrh	r2, [r2, #8]
	return true; // Command complete
    eae0:	2001      	movs	r0, #1
	sd_mmc_spi_block_size = block_size;
    eae2:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    eae4:	466a      	mov	r2, sp
    eae6:	4b50      	ldr	r3, [pc, #320]	; (ec28 <sd_mmc_spi_adtc_start+0x534>)
    eae8:	8992      	ldrh	r2, [r2, #12]
    eaea:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    eaec:	2200      	movs	r2, #0
    eaee:	4b4f      	ldr	r3, [pc, #316]	; (ec2c <sd_mmc_spi_adtc_start+0x538>)
    eaf0:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    eaf2:	e7d5      	b.n	eaa0 <sd_mmc_spi_adtc_start+0x3ac>
	crc = (crc << 1) | 1;
    eaf4:	1c0b      	adds	r3, r1, #0
    eaf6:	e7a0      	b.n	ea3a <sd_mmc_spi_adtc_start+0x346>
    eaf8:	1c03      	adds	r3, r0, #0
    eafa:	e796      	b.n	ea2a <sd_mmc_spi_adtc_start+0x336>
    eafc:	1c03      	adds	r3, r0, #0
    eafe:	e78c      	b.n	ea1a <sd_mmc_spi_adtc_start+0x326>
    eb00:	1c03      	adds	r3, r0, #0
    eb02:	e781      	b.n	ea08 <sd_mmc_spi_adtc_start+0x314>
    eb04:	1c03      	adds	r3, r0, #0
    eb06:	e776      	b.n	e9f6 <sd_mmc_spi_adtc_start+0x302>
    eb08:	1c03      	adds	r3, r0, #0
    eb0a:	e76b      	b.n	e9e4 <sd_mmc_spi_adtc_start+0x2f0>
    eb0c:	1c03      	adds	r3, r0, #0
    eb0e:	e760      	b.n	e9d2 <sd_mmc_spi_adtc_start+0x2de>
    eb10:	1c03      	adds	r3, r0, #0
    eb12:	e755      	b.n	e9c0 <sd_mmc_spi_adtc_start+0x2cc>
    eb14:	1c0b      	adds	r3, r1, #0
    eb16:	e749      	b.n	e9ac <sd_mmc_spi_adtc_start+0x2b8>
    eb18:	1c03      	adds	r3, r0, #0
    eb1a:	e73e      	b.n	e99a <sd_mmc_spi_adtc_start+0x2a6>
    eb1c:	1c03      	adds	r3, r0, #0
    eb1e:	e733      	b.n	e988 <sd_mmc_spi_adtc_start+0x294>
    eb20:	1c03      	adds	r3, r0, #0
    eb22:	e728      	b.n	e976 <sd_mmc_spi_adtc_start+0x282>
    eb24:	1c03      	adds	r3, r0, #0
    eb26:	e71d      	b.n	e964 <sd_mmc_spi_adtc_start+0x270>
    eb28:	1c03      	adds	r3, r0, #0
    eb2a:	e712      	b.n	e952 <sd_mmc_spi_adtc_start+0x25e>
    eb2c:	1c03      	adds	r3, r0, #0
    eb2e:	e707      	b.n	e940 <sd_mmc_spi_adtc_start+0x24c>
    eb30:	1c03      	adds	r3, r0, #0
    eb32:	e6fc      	b.n	e92e <sd_mmc_spi_adtc_start+0x23a>
    eb34:	1c03      	adds	r3, r0, #0
    eb36:	e6f0      	b.n	e91a <sd_mmc_spi_adtc_start+0x226>
    eb38:	1c3b      	adds	r3, r7, #0
    eb3a:	e6e5      	b.n	e908 <sd_mmc_spi_adtc_start+0x214>
    eb3c:	1c3b      	adds	r3, r7, #0
    eb3e:	e6da      	b.n	e8f6 <sd_mmc_spi_adtc_start+0x202>
    eb40:	1c3b      	adds	r3, r7, #0
    eb42:	e6cf      	b.n	e8e4 <sd_mmc_spi_adtc_start+0x1f0>
    eb44:	1c3b      	adds	r3, r7, #0
    eb46:	e6c4      	b.n	e8d2 <sd_mmc_spi_adtc_start+0x1de>
    eb48:	1c3b      	adds	r3, r7, #0
    eb4a:	e6b9      	b.n	e8c0 <sd_mmc_spi_adtc_start+0x1cc>
    eb4c:	1c3b      	adds	r3, r7, #0
    eb4e:	e6ae      	b.n	e8ae <sd_mmc_spi_adtc_start+0x1ba>
    eb50:	1c3b      	adds	r3, r7, #0
    eb52:	e6a3      	b.n	e89c <sd_mmc_spi_adtc_start+0x1a8>
    eb54:	1c3b      	adds	r3, r7, #0
    eb56:	e697      	b.n	e888 <sd_mmc_spi_adtc_start+0x194>
    eb58:	1c33      	adds	r3, r6, #0
    eb5a:	e68c      	b.n	e876 <sd_mmc_spi_adtc_start+0x182>
    eb5c:	1c33      	adds	r3, r6, #0
    eb5e:	e681      	b.n	e864 <sd_mmc_spi_adtc_start+0x170>
    eb60:	1c33      	adds	r3, r6, #0
    eb62:	e676      	b.n	e852 <sd_mmc_spi_adtc_start+0x15e>
    eb64:	1c33      	adds	r3, r6, #0
    eb66:	e66b      	b.n	e840 <sd_mmc_spi_adtc_start+0x14c>
    eb68:	1c33      	adds	r3, r6, #0
    eb6a:	e660      	b.n	e82e <sd_mmc_spi_adtc_start+0x13a>
    eb6c:	1c33      	adds	r3, r6, #0
    eb6e:	e655      	b.n	e81c <sd_mmc_spi_adtc_start+0x128>
    eb70:	1c33      	adds	r3, r6, #0
    eb72:	e64a      	b.n	e80a <sd_mmc_spi_adtc_start+0x116>
    eb74:	1c33      	adds	r3, r6, #0
    eb76:	e63e      	b.n	e7f6 <sd_mmc_spi_adtc_start+0x102>
    eb78:	465b      	mov	r3, fp
    eb7a:	e633      	b.n	e7e4 <sd_mmc_spi_adtc_start+0xf0>
    eb7c:	465b      	mov	r3, fp
    eb7e:	e625      	b.n	e7cc <sd_mmc_spi_adtc_start+0xd8>
    eb80:	465b      	mov	r3, fp
    eb82:	e617      	b.n	e7b4 <sd_mmc_spi_adtc_start+0xc0>
    eb84:	465b      	mov	r3, fp
    eb86:	e609      	b.n	e79c <sd_mmc_spi_adtc_start+0xa8>
    eb88:	465b      	mov	r3, fp
    eb8a:	e5fb      	b.n	e784 <sd_mmc_spi_adtc_start+0x90>
    eb8c:	465b      	mov	r3, fp
    eb8e:	e5ed      	b.n	e76c <sd_mmc_spi_adtc_start+0x78>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    eb90:	2306      	movs	r3, #6
    eb92:	4a27      	ldr	r2, [pc, #156]	; (ec30 <sd_mmc_spi_adtc_start+0x53c>)
		return false;
    eb94:	2000      	movs	r0, #0
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    eb96:	7013      	strb	r3, [r2, #0]
		return false;
    eb98:	e782      	b.n	eaa0 <sd_mmc_spi_adtc_start+0x3ac>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    eb9a:	2309      	movs	r3, #9
    eb9c:	4a24      	ldr	r2, [pc, #144]	; (ec30 <sd_mmc_spi_adtc_start+0x53c>)
		return false;
    eb9e:	2000      	movs	r0, #0
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    eba0:	7013      	strb	r3, [r2, #0]
		return false;
    eba2:	e77d      	b.n	eaa0 <sd_mmc_spi_adtc_start+0x3ac>
	uint8_t line = 0xFF;
    eba4:	ab04      	add	r3, sp, #16
    eba6:	1ddc      	adds	r4, r3, #7
    eba8:	23ff      	movs	r3, #255	; 0xff
	spi_read_buffer_wait(&spi_main, &line, 1,
    ebaa:	2201      	movs	r2, #1
    ebac:	0021      	movs	r1, r4
    ebae:	0028      	movs	r0, r5
	uint8_t line = 0xFF;
    ebb0:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&spi_main, &line, 1,
    ebb2:	47b8      	blx	r7
	spi_read_buffer_wait(&spi_main, &line, 1,
    ebb4:	23ff      	movs	r3, #255	; 0xff
    ebb6:	2201      	movs	r2, #1
    ebb8:	0021      	movs	r1, r4
    ebba:	0028      	movs	r0, r5
    ebbc:	47b8      	blx	r7
		spi_read_buffer_wait(&spi_main, &line, 1,
    ebbe:	23ff      	movs	r3, #255	; 0xff
    ebc0:	2201      	movs	r2, #1
    ebc2:	0021      	movs	r1, r4
    ebc4:	0028      	movs	r0, r5
    ebc6:	47b8      	blx	r7
    ebc8:	4b1a      	ldr	r3, [pc, #104]	; (ec34 <sd_mmc_spi_adtc_start+0x540>)
    ebca:	001e      	movs	r6, r3
    ebcc:	e007      	b.n	ebde <sd_mmc_spi_adtc_start+0x4ea>
    ebce:	23ff      	movs	r3, #255	; 0xff
    ebd0:	2201      	movs	r2, #1
    ebd2:	0021      	movs	r1, r4
    ebd4:	0028      	movs	r0, r5
    ebd6:	3e01      	subs	r6, #1
    ebd8:	47b8      	blx	r7
		if (!(nec_timeout--)) {
    ebda:	2e00      	cmp	r6, #0
    ebdc:	d01b      	beq.n	ec16 <sd_mmc_spi_adtc_start+0x522>
	} while (line != 0xFF);
    ebde:	7823      	ldrb	r3, [r4, #0]
    ebe0:	2bff      	cmp	r3, #255	; 0xff
    ebe2:	d1f4      	bne.n	ebce <sd_mmc_spi_adtc_start+0x4da>
    ebe4:	e771      	b.n	eaca <sd_mmc_spi_adtc_start+0x3d6>
		spi_read_buffer_wait(&spi_main, (uint8_t *)&sd_mmc_spi_response_32, 4,
    ebe6:	23ff      	movs	r3, #255	; 0xff
    ebe8:	2204      	movs	r2, #4
    ebea:	4659      	mov	r1, fp
    ebec:	0028      	movs	r0, r5
    ebee:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    ebf0:	465b      	mov	r3, fp
    ebf2:	465a      	mov	r2, fp
    ebf4:	681b      	ldr	r3, [r3, #0]
    ebf6:	ba1b      	rev	r3, r3
    ebf8:	6013      	str	r3, [r2, #0]
    ebfa:	e76e      	b.n	eada <sd_mmc_spi_adtc_start+0x3e6>
		sd_mmc_spi_response_32 = 0;
    ebfc:	465a      	mov	r2, fp
    ebfe:	2300      	movs	r3, #0
		spi_read_buffer_wait(&spi_main, (uint8_t *)&sd_mmc_spi_response_32, 1,
    ec00:	4659      	mov	r1, fp
		sd_mmc_spi_response_32 = 0;
    ec02:	6013      	str	r3, [r2, #0]
		spi_read_buffer_wait(&spi_main, (uint8_t *)&sd_mmc_spi_response_32, 1,
    ec04:	0028      	movs	r0, r5
    ec06:	33ff      	adds	r3, #255	; 0xff
    ec08:	2201      	movs	r2, #1
    ec0a:	47b8      	blx	r7
    ec0c:	e761      	b.n	ead2 <sd_mmc_spi_adtc_start+0x3de>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    ec0e:	4b08      	ldr	r3, [pc, #32]	; (ec30 <sd_mmc_spi_adtc_start+0x53c>)
		return false;
    ec10:	2000      	movs	r0, #0
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    ec12:	701a      	strb	r2, [r3, #0]
		return false;
    ec14:	e744      	b.n	eaa0 <sd_mmc_spi_adtc_start+0x3ac>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    ec16:	2303      	movs	r3, #3
    ec18:	4a05      	ldr	r2, [pc, #20]	; (ec30 <sd_mmc_spi_adtc_start+0x53c>)
			return false;
    ec1a:	2000      	movs	r0, #0
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    ec1c:	7013      	strb	r3, [r2, #0]
			return false;
    ec1e:	e73f      	b.n	eaa0 <sd_mmc_spi_adtc_start+0x3ac>
    ec20:	20000eac 	.word	0x20000eac
    ec24:	20000ea6 	.word	0x20000ea6
    ec28:	20000eaa 	.word	0x20000eaa
    ec2c:	20000eb0 	.word	0x20000eb0
    ec30:	20000ea8 	.word	0x20000ea8
    ec34:	00030d40 	.word	0x00030d40

0000ec38 <sd_mmc_spi_send_cmd>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    ec38:	2300      	movs	r3, #0
{
    ec3a:	b510      	push	{r4, lr}
    ec3c:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    ec3e:	9300      	str	r3, [sp, #0]
    ec40:	2200      	movs	r2, #0
    ec42:	4c02      	ldr	r4, [pc, #8]	; (ec4c <sd_mmc_spi_send_cmd+0x14>)
    ec44:	47a0      	blx	r4
}
    ec46:	b002      	add	sp, #8
    ec48:	bd10      	pop	{r4, pc}
    ec4a:	46c0      	nop			; (mov r8, r8)
    ec4c:	0000e6f5 	.word	0x0000e6f5

0000ec50 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    ec50:	4b01      	ldr	r3, [pc, #4]	; (ec58 <sd_mmc_spi_get_response+0x8>)
    ec52:	6818      	ldr	r0, [r3, #0]
}
    ec54:	4770      	bx	lr
    ec56:	46c0      	nop			; (mov r8, r8)
    ec58:	20000eac 	.word	0x20000eac

0000ec5c <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    ec5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    ec5e:	2300      	movs	r3, #0
{
    ec60:	46de      	mov	lr, fp
    ec62:	4657      	mov	r7, sl
    ec64:	464e      	mov	r6, r9
    ec66:	4645      	mov	r5, r8
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    ec68:	4a2c      	ldr	r2, [pc, #176]	; (ed1c <sd_mmc_spi_read_word+0xc0>)
{
    ec6a:	b5e0      	push	{r5, r6, r7, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    ec6c:	7013      	strb	r3, [r2, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    ec6e:	4b2c      	ldr	r3, [pc, #176]	; (ed20 <sd_mmc_spi_read_word+0xc4>)
{
    ec70:	b085      	sub	sp, #20
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    ec72:	4699      	mov	r9, r3
    ec74:	4b2b      	ldr	r3, [pc, #172]	; (ed24 <sd_mmc_spi_read_word+0xc8>)
{
    ec76:	9001      	str	r0, [sp, #4]
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    ec78:	469b      	mov	fp, r3
    ec7a:	8819      	ldrh	r1, [r3, #0]
    ec7c:	4b2a      	ldr	r3, [pc, #168]	; (ed28 <sd_mmc_spi_read_word+0xcc>)
    ec7e:	469a      	mov	sl, r3
    ec80:	464b      	mov	r3, r9
    ec82:	6818      	ldr	r0, [r3, #0]
    ec84:	47d0      	blx	sl
    ec86:	2900      	cmp	r1, #0
    ec88:	d019      	beq.n	ecbe <sd_mmc_spi_read_word+0x62>
    ec8a:	4f28      	ldr	r7, [pc, #160]	; (ed2c <sd_mmc_spi_read_word+0xd0>)
    ec8c:	4e28      	ldr	r6, [pc, #160]	; (ed30 <sd_mmc_spi_read_word+0xd4>)
		if (!sd_mmc_spi_start_read_block()) {
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&spi_main, (uint8_t *)&value, 4,
    ec8e:	23ff      	movs	r3, #255	; 0xff
    ec90:	2204      	movs	r2, #4
    ec92:	a901      	add	r1, sp, #4
    ec94:	0038      	movs	r0, r7
    ec96:	47b0      	blx	r6
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    ec98:	464b      	mov	r3, r9
    ec9a:	681b      	ldr	r3, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    ec9c:	2401      	movs	r4, #1
	sd_mmc_spi_transfert_pos += 4;
    ec9e:	1d18      	adds	r0, r3, #4
    eca0:	464b      	mov	r3, r9
    eca2:	6018      	str	r0, [r3, #0]
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    eca4:	465b      	mov	r3, fp
    eca6:	8819      	ldrh	r1, [r3, #0]
    eca8:	47d0      	blx	sl
    ecaa:	2900      	cmp	r1, #0
    ecac:	d025      	beq.n	ecfa <sd_mmc_spi_read_word+0x9e>
}
    ecae:	0020      	movs	r0, r4
    ecb0:	b005      	add	sp, #20
    ecb2:	bc3c      	pop	{r2, r3, r4, r5}
    ecb4:	4690      	mov	r8, r2
    ecb6:	4699      	mov	r9, r3
    ecb8:	46a2      	mov	sl, r4
    ecba:	46ab      	mov	fp, r5
    ecbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    ecbe:	230f      	movs	r3, #15
	token = 0;
    ecc0:	ad03      	add	r5, sp, #12
    ecc2:	7029      	strb	r1, [r5, #0]
    ecc4:	4c1b      	ldr	r4, [pc, #108]	; (ed34 <sd_mmc_spi_read_word+0xd8>)
    ecc6:	4f19      	ldr	r7, [pc, #100]	; (ed2c <sd_mmc_spi_read_word+0xd0>)
    ecc8:	4e19      	ldr	r6, [pc, #100]	; (ed30 <sd_mmc_spi_read_word+0xd4>)
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    ecca:	4698      	mov	r8, r3
    eccc:	e004      	b.n	ecd8 <sd_mmc_spi_read_word+0x7c>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    ecce:	2bfe      	cmp	r3, #254	; 0xfe
    ecd0:	d0dd      	beq.n	ec8e <sd_mmc_spi_read_word+0x32>
    ecd2:	3c01      	subs	r4, #1
		if (i-- == 0) {
    ecd4:	2c00      	cmp	r4, #0
    ecd6:	d01b      	beq.n	ed10 <sd_mmc_spi_read_word+0xb4>
		spi_read_buffer_wait(&spi_main, &token, 1,
    ecd8:	23ff      	movs	r3, #255	; 0xff
    ecda:	2201      	movs	r2, #1
    ecdc:	0029      	movs	r1, r5
    ecde:	0038      	movs	r0, r7
    ece0:	47b0      	blx	r6
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    ece2:	782b      	ldrb	r3, [r5, #0]
    ece4:	4641      	mov	r1, r8
    ece6:	001a      	movs	r2, r3
    ece8:	438a      	bics	r2, r1
    ecea:	d1f0      	bne.n	ecce <sd_mmc_spi_read_word+0x72>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    ecec:	3207      	adds	r2, #7
    ecee:	421a      	tst	r2, r3
    ecf0:	d009      	beq.n	ed06 <sd_mmc_spi_read_word+0xaa>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    ecf2:	4b0a      	ldr	r3, [pc, #40]	; (ed1c <sd_mmc_spi_read_word+0xc0>)
			return false;
    ecf4:	2400      	movs	r4, #0
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    ecf6:	701a      	strb	r2, [r3, #0]
    ecf8:	e7d9      	b.n	ecae <sd_mmc_spi_read_word+0x52>
	spi_read_buffer_wait(&spi_main, crc, 2,
    ecfa:	23ff      	movs	r3, #255	; 0xff
    ecfc:	2202      	movs	r2, #2
    ecfe:	a903      	add	r1, sp, #12
    ed00:	0038      	movs	r0, r7
    ed02:	47b0      	blx	r6
    ed04:	e7d3      	b.n	ecae <sd_mmc_spi_read_word+0x52>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    ed06:	230b      	movs	r3, #11
    ed08:	4a04      	ldr	r2, [pc, #16]	; (ed1c <sd_mmc_spi_read_word+0xc0>)
			return false;
    ed0a:	2400      	movs	r4, #0
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    ed0c:	7013      	strb	r3, [r2, #0]
    ed0e:	e7ce      	b.n	ecae <sd_mmc_spi_read_word+0x52>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    ed10:	2304      	movs	r3, #4
    ed12:	4a02      	ldr	r2, [pc, #8]	; (ed1c <sd_mmc_spi_read_word+0xc0>)
			return false;
    ed14:	2400      	movs	r4, #0
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    ed16:	7013      	strb	r3, [r2, #0]
    ed18:	e7c9      	b.n	ecae <sd_mmc_spi_read_word+0x52>
    ed1a:	46c0      	nop			; (mov r8, r8)
    ed1c:	20000ea8 	.word	0x20000ea8
    ed20:	20000eb0 	.word	0x20000eb0
    ed24:	20000ea6 	.word	0x20000ea6
    ed28:	0001ce29 	.word	0x0001ce29
    ed2c:	20000fac 	.word	0x20000fac
    ed30:	00015919 	.word	0x00015919
    ed34:	0007a120 	.word	0x0007a120

0000ed38 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    ed38:	b5f0      	push	{r4, r5, r6, r7, lr}
    ed3a:	464e      	mov	r6, r9
    ed3c:	46de      	mov	lr, fp
    ed3e:	4657      	mov	r7, sl
    ed40:	4645      	mov	r5, r8
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    ed42:	2300      	movs	r3, #0
{
    ed44:	b5e0      	push	{r5, r6, r7, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    ed46:	4a2c      	ldr	r2, [pc, #176]	; (edf8 <sd_mmc_spi_start_read_blocks+0xc0>)
{
    ed48:	b085      	sub	sp, #20
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    ed4a:	7013      	strb	r3, [r2, #0]
	pos = 0;
	while (nb_block--) {
    ed4c:	1e4b      	subs	r3, r1, #1
    ed4e:	b29b      	uxth	r3, r3
{
    ed50:	9001      	str	r0, [sp, #4]
	while (nb_block--) {
    ed52:	4699      	mov	r9, r3
    ed54:	2900      	cmp	r1, #0
    ed56:	d045      	beq.n	ede4 <sd_mmc_spi_start_read_blocks+0xac>
    ed58:	2300      	movs	r3, #0
    ed5a:	469a      	mov	sl, r3

		// Read block
		spi_read_buffer_wait(&spi_main, &((uint8_t*)dest)[pos],
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    ed5c:	4b27      	ldr	r3, [pc, #156]	; (edfc <sd_mmc_spi_start_read_blocks+0xc4>)
    ed5e:	4f28      	ldr	r7, [pc, #160]	; (ee00 <sd_mmc_spi_start_read_blocks+0xc8>)
    ed60:	469b      	mov	fp, r3
    ed62:	4e28      	ldr	r6, [pc, #160]	; (ee04 <sd_mmc_spi_start_read_blocks+0xcc>)
    ed64:	ad03      	add	r5, sp, #12
	token = 0;
    ed66:	2300      	movs	r3, #0
    ed68:	702b      	strb	r3, [r5, #0]
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    ed6a:	230f      	movs	r3, #15
	token = 0;
    ed6c:	4c26      	ldr	r4, [pc, #152]	; (ee08 <sd_mmc_spi_start_read_blocks+0xd0>)
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    ed6e:	4698      	mov	r8, r3
    ed70:	e004      	b.n	ed7c <sd_mmc_spi_start_read_blocks+0x44>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    ed72:	2bfe      	cmp	r3, #254	; 0xfe
    ed74:	d019      	beq.n	edaa <sd_mmc_spi_start_read_blocks+0x72>
    ed76:	3c01      	subs	r4, #1
		if (i-- == 0) {
    ed78:	2c00      	cmp	r4, #0
    ed7a:	d039      	beq.n	edf0 <sd_mmc_spi_start_read_blocks+0xb8>
		spi_read_buffer_wait(&spi_main, &token, 1,
    ed7c:	23ff      	movs	r3, #255	; 0xff
    ed7e:	2201      	movs	r2, #1
    ed80:	0029      	movs	r1, r5
    ed82:	0038      	movs	r0, r7
    ed84:	47b0      	blx	r6
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    ed86:	782b      	ldrb	r3, [r5, #0]
    ed88:	4641      	mov	r1, r8
    ed8a:	001a      	movs	r2, r3
    ed8c:	438a      	bics	r2, r1
    ed8e:	d1f0      	bne.n	ed72 <sd_mmc_spi_start_read_blocks+0x3a>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    ed90:	3207      	adds	r2, #7
    ed92:	421a      	tst	r2, r3
    ed94:	d028      	beq.n	ede8 <sd_mmc_spi_start_read_blocks+0xb0>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    ed96:	4b18      	ldr	r3, [pc, #96]	; (edf8 <sd_mmc_spi_start_read_blocks+0xc0>)
    ed98:	701a      	strb	r2, [r3, #0]
			return false;
    ed9a:	2000      	movs	r0, #0

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    ed9c:	b005      	add	sp, #20
    ed9e:	bc3c      	pop	{r2, r3, r4, r5}
    eda0:	4690      	mov	r8, r2
    eda2:	4699      	mov	r9, r3
    eda4:	46a2      	mov	sl, r4
    eda6:	46ab      	mov	fp, r5
    eda8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		spi_read_buffer_wait(&spi_main, &((uint8_t*)dest)[pos],
    edaa:	4b18      	ldr	r3, [pc, #96]	; (ee0c <sd_mmc_spi_start_read_blocks+0xd4>)
    edac:	0038      	movs	r0, r7
    edae:	881a      	ldrh	r2, [r3, #0]
    edb0:	9b01      	ldr	r3, [sp, #4]
    edb2:	4453      	add	r3, sl
    edb4:	0019      	movs	r1, r3
    edb6:	23ff      	movs	r3, #255	; 0xff
    edb8:	47b0      	blx	r6
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    edba:	465a      	mov	r2, fp
    edbc:	6812      	ldr	r2, [r2, #0]
		pos += sd_mmc_spi_block_size;
    edbe:	4b13      	ldr	r3, [pc, #76]	; (ee0c <sd_mmc_spi_start_read_blocks+0xd4>)
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    edc0:	4694      	mov	ip, r2
    edc2:	465a      	mov	r2, fp
		pos += sd_mmc_spi_block_size;
    edc4:	881b      	ldrh	r3, [r3, #0]
	spi_read_buffer_wait(&spi_main, crc, 2,
    edc6:	0029      	movs	r1, r5
		pos += sd_mmc_spi_block_size;
    edc8:	449a      	add	sl, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    edca:	4463      	add	r3, ip
    edcc:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&spi_main, crc, 2,
    edce:	0038      	movs	r0, r7
    edd0:	23ff      	movs	r3, #255	; 0xff
    edd2:	2202      	movs	r2, #2
    edd4:	47b0      	blx	r6
	while (nb_block--) {
    edd6:	464b      	mov	r3, r9
    edd8:	3b01      	subs	r3, #1
    edda:	b29b      	uxth	r3, r3
    eddc:	4699      	mov	r9, r3
    edde:	4b0c      	ldr	r3, [pc, #48]	; (ee10 <sd_mmc_spi_start_read_blocks+0xd8>)
    ede0:	4599      	cmp	r9, r3
    ede2:	d1c0      	bne.n	ed66 <sd_mmc_spi_start_read_blocks+0x2e>
	return true;
    ede4:	2001      	movs	r0, #1
    ede6:	e7d9      	b.n	ed9c <sd_mmc_spi_start_read_blocks+0x64>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    ede8:	230b      	movs	r3, #11
    edea:	4a03      	ldr	r2, [pc, #12]	; (edf8 <sd_mmc_spi_start_read_blocks+0xc0>)
    edec:	7013      	strb	r3, [r2, #0]
    edee:	e7d4      	b.n	ed9a <sd_mmc_spi_start_read_blocks+0x62>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    edf0:	2304      	movs	r3, #4
    edf2:	4a01      	ldr	r2, [pc, #4]	; (edf8 <sd_mmc_spi_start_read_blocks+0xc0>)
    edf4:	7013      	strb	r3, [r2, #0]
    edf6:	e7d0      	b.n	ed9a <sd_mmc_spi_start_read_blocks+0x62>
    edf8:	20000ea8 	.word	0x20000ea8
    edfc:	20000eb0 	.word	0x20000eb0
    ee00:	20000fac 	.word	0x20000fac
    ee04:	00015919 	.word	0x00015919
    ee08:	0007a120 	.word	0x0007a120
    ee0c:	20000ea6 	.word	0x20000ea6
    ee10:	0000ffff 	.word	0x0000ffff

0000ee14 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    ee14:	2001      	movs	r0, #1
    ee16:	4770      	bx	lr

0000ee18 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    ee18:	b5f0      	push	{r4, r5, r6, r7, lr}
    ee1a:	46de      	mov	lr, fp
    ee1c:	4657      	mov	r7, sl
    ee1e:	464e      	mov	r6, r9
    ee20:	4645      	mov	r5, r8
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    ee22:	2300      	movs	r3, #0
{
    ee24:	b5e0      	push	{r5, r6, r7, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    ee26:	4a48      	ldr	r2, [pc, #288]	; (ef48 <sd_mmc_spi_start_write_blocks+0x130>)
{
    ee28:	b087      	sub	sp, #28
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    ee2a:	7013      	strb	r3, [r2, #0]
	pos = 0;
	while (nb_block--) {
    ee2c:	1e4b      	subs	r3, r1, #1
    ee2e:	b29b      	uxth	r3, r3
{
    ee30:	9003      	str	r0, [sp, #12]
	while (nb_block--) {
    ee32:	9302      	str	r3, [sp, #8]
    ee34:	2900      	cmp	r1, #0
    ee36:	d04c      	beq.n	eed2 <sd_mmc_spi_start_write_blocks+0xba>
    ee38:	2300      	movs	r3, #0
    ee3a:	9301      	str	r3, [sp, #4]
    ee3c:	ab04      	add	r3, sp, #16
    ee3e:	1d5f      	adds	r7, r3, #5
    ee40:	4b42      	ldr	r3, [pc, #264]	; (ef4c <sd_mmc_spi_start_write_blocks+0x134>)
    ee42:	4e43      	ldr	r6, [pc, #268]	; (ef50 <sd_mmc_spi_start_write_blocks+0x138>)
    ee44:	4699      	mov	r9, r3
    ee46:	ab04      	add	r3, sp, #16
    ee48:	1d9c      	adds	r4, r3, #6
    ee4a:	4b42      	ldr	r3, [pc, #264]	; (ef54 <sd_mmc_spi_start_write_blocks+0x13c>)
    ee4c:	469b      	mov	fp, r3
    ee4e:	4b42      	ldr	r3, [pc, #264]	; (ef58 <sd_mmc_spi_start_write_blocks+0x140>)
    ee50:	4698      	mov	r8, r3
	uint8_t dummy = 0xFF;
    ee52:	23ff      	movs	r3, #255	; 0xff
	spi_write_buffer_wait(&spi_main,&dummy, 1);
    ee54:	2201      	movs	r2, #1
    ee56:	0039      	movs	r1, r7
    ee58:	0030      	movs	r0, r6
	uint8_t dummy = 0xFF;
    ee5a:	703b      	strb	r3, [r7, #0]
	spi_write_buffer_wait(&spi_main,&dummy, 1);
    ee5c:	47c8      	blx	r9
	if (1 == sd_mmc_spi_nb_block) {
    ee5e:	4b3f      	ldr	r3, [pc, #252]	; (ef5c <sd_mmc_spi_start_write_blocks+0x144>)
    ee60:	881b      	ldrh	r3, [r3, #0]
    ee62:	2b01      	cmp	r3, #1
    ee64:	d066      	beq.n	ef34 <sd_mmc_spi_start_write_blocks+0x11c>
		token = SPI_TOKEN_MULTI_WRITE;
    ee66:	23fc      	movs	r3, #252	; 0xfc
	spi_write_buffer_wait(&spi_main,&token, 1);
    ee68:	2201      	movs	r2, #1
    ee6a:	0021      	movs	r1, r4
    ee6c:	0030      	movs	r0, r6
    ee6e:	7023      	strb	r3, [r4, #0]
    ee70:	47c8      	blx	r9
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();

		// Write block
		spi_write_buffer_wait(&spi_main, &((uint8_t*)src)[pos],
    ee72:	9801      	ldr	r0, [sp, #4]
    ee74:	4b3a      	ldr	r3, [pc, #232]	; (ef60 <sd_mmc_spi_start_write_blocks+0x148>)
    ee76:	4684      	mov	ip, r0
    ee78:	881a      	ldrh	r2, [r3, #0]
    ee7a:	9b03      	ldr	r3, [sp, #12]
    ee7c:	0030      	movs	r0, r6
    ee7e:	4463      	add	r3, ip
    ee80:	0019      	movs	r1, r3
    ee82:	47c8      	blx	r9
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    ee84:	4b36      	ldr	r3, [pc, #216]	; (ef60 <sd_mmc_spi_start_write_blocks+0x148>)
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    ee86:	465a      	mov	r2, fp
		pos += sd_mmc_spi_block_size;
    ee88:	881b      	ldrh	r3, [r3, #0]
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    ee8a:	2501      	movs	r5, #1
		pos += sd_mmc_spi_block_size;
    ee8c:	469a      	mov	sl, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    ee8e:	465b      	mov	r3, fp
    ee90:	681b      	ldr	r3, [r3, #0]
	spi_write_buffer_wait(&spi_main, (uint8_t *)&crc, 2);
    ee92:	0021      	movs	r1, r4
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    ee94:	4453      	add	r3, sl
    ee96:	6013      	str	r3, [r2, #0]
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    ee98:	426d      	negs	r5, r5
	spi_write_buffer_wait(&spi_main, (uint8_t *)&crc, 2);
    ee9a:	2202      	movs	r2, #2
    ee9c:	0030      	movs	r0, r6
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    ee9e:	8025      	strh	r5, [r4, #0]
	spi_write_buffer_wait(&spi_main, (uint8_t *)&crc, 2);
    eea0:	47c8      	blx	r9
	spi_read_buffer_wait(&spi_main, &resp, 1,
    eea2:	23ff      	movs	r3, #255	; 0xff
    eea4:	2201      	movs	r2, #1
    eea6:	0039      	movs	r1, r7
    eea8:	0030      	movs	r0, r6
    eeaa:	47c0      	blx	r8
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    eeac:	2211      	movs	r2, #17
    eeae:	783b      	ldrb	r3, [r7, #0]
    eeb0:	401a      	ands	r2, r3
    eeb2:	2a01      	cmp	r2, #1
    eeb4:	d00f      	beq.n	eed6 <sd_mmc_spi_start_write_blocks+0xbe>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    eeb6:	2301      	movs	r3, #1
    eeb8:	4a23      	ldr	r2, [pc, #140]	; (ef48 <sd_mmc_spi_start_write_blocks+0x130>)
    eeba:	7013      	strb	r3, [r2, #0]
		if (nb_block) {
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    eebc:	2000      	movs	r0, #0
			}
		}
	}
	return true;
}
    eebe:	b007      	add	sp, #28
    eec0:	bc3c      	pop	{r2, r3, r4, r5}
    eec2:	4690      	mov	r8, r2
    eec4:	4699      	mov	r9, r3
    eec6:	46a2      	mov	sl, r4
    eec8:	46ab      	mov	fp, r5
    eeca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (nb_block) {
    eecc:	9b02      	ldr	r3, [sp, #8]
    eece:	2b00      	cmp	r3, #0
    eed0:	d10b      	bne.n	eeea <sd_mmc_spi_start_write_blocks+0xd2>
	return true;
    eed2:	2001      	movs	r0, #1
    eed4:	e7f3      	b.n	eebe <sd_mmc_spi_start_write_blocks+0xa6>
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    eed6:	221e      	movs	r2, #30
    eed8:	4013      	ands	r3, r2
    eeda:	2b04      	cmp	r3, #4
    eedc:	d0f6      	beq.n	eecc <sd_mmc_spi_start_write_blocks+0xb4>
    eede:	2b0a      	cmp	r3, #10
    eee0:	d12a      	bne.n	ef38 <sd_mmc_spi_start_write_blocks+0x120>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    eee2:	4a19      	ldr	r2, [pc, #100]	; (ef48 <sd_mmc_spi_start_write_blocks+0x130>)
    eee4:	3b02      	subs	r3, #2
    eee6:	7013      	strb	r3, [r2, #0]
    eee8:	e7e8      	b.n	eebc <sd_mmc_spi_start_write_blocks+0xa4>
	spi_read_buffer_wait(&spi_main, &line, 1,
    eeea:	23ff      	movs	r3, #255	; 0xff
    eeec:	2201      	movs	r2, #1
    eeee:	0021      	movs	r1, r4
    eef0:	0030      	movs	r0, r6
	uint8_t line = 0xFF;
    eef2:	7025      	strb	r5, [r4, #0]
	spi_read_buffer_wait(&spi_main, &line, 1,
    eef4:	47c0      	blx	r8
	spi_read_buffer_wait(&spi_main, &line, 1,
    eef6:	23ff      	movs	r3, #255	; 0xff
    eef8:	2201      	movs	r2, #1
    eefa:	0021      	movs	r1, r4
    eefc:	0030      	movs	r0, r6
    eefe:	47c0      	blx	r8
		spi_read_buffer_wait(&spi_main, &line, 1,
    ef00:	23ff      	movs	r3, #255	; 0xff
    ef02:	2201      	movs	r2, #1
    ef04:	0021      	movs	r1, r4
    ef06:	0030      	movs	r0, r6
    ef08:	47c0      	blx	r8
    ef0a:	4d16      	ldr	r5, [pc, #88]	; (ef64 <sd_mmc_spi_start_write_blocks+0x14c>)
    ef0c:	e007      	b.n	ef1e <sd_mmc_spi_start_write_blocks+0x106>
    ef0e:	23ff      	movs	r3, #255	; 0xff
    ef10:	2201      	movs	r2, #1
    ef12:	0021      	movs	r1, r4
    ef14:	0030      	movs	r0, r6
    ef16:	3d01      	subs	r5, #1
    ef18:	47c0      	blx	r8
		if (!(nec_timeout--)) {
    ef1a:	2d00      	cmp	r5, #0
    ef1c:	d010      	beq.n	ef40 <sd_mmc_spi_start_write_blocks+0x128>
	} while (line != 0xFF);
    ef1e:	7823      	ldrb	r3, [r4, #0]
    ef20:	2bff      	cmp	r3, #255	; 0xff
    ef22:	d1f4      	bne.n	ef0e <sd_mmc_spi_start_write_blocks+0xf6>
		pos += sd_mmc_spi_block_size;
    ef24:	9b01      	ldr	r3, [sp, #4]
    ef26:	4453      	add	r3, sl
    ef28:	9301      	str	r3, [sp, #4]
	while (nb_block--) {
    ef2a:	9b02      	ldr	r3, [sp, #8]
    ef2c:	3b01      	subs	r3, #1
    ef2e:	b29b      	uxth	r3, r3
    ef30:	9302      	str	r3, [sp, #8]
    ef32:	e78e      	b.n	ee52 <sd_mmc_spi_start_write_blocks+0x3a>
		token = SPI_TOKEN_SINGLE_WRITE;
    ef34:	23fe      	movs	r3, #254	; 0xfe
    ef36:	e797      	b.n	ee68 <sd_mmc_spi_start_write_blocks+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    ef38:	230a      	movs	r3, #10
    ef3a:	4a03      	ldr	r2, [pc, #12]	; (ef48 <sd_mmc_spi_start_write_blocks+0x130>)
    ef3c:	7013      	strb	r3, [r2, #0]
    ef3e:	e7bd      	b.n	eebc <sd_mmc_spi_start_write_blocks+0xa4>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    ef40:	2305      	movs	r3, #5
    ef42:	4a01      	ldr	r2, [pc, #4]	; (ef48 <sd_mmc_spi_start_write_blocks+0x130>)
    ef44:	7013      	strb	r3, [r2, #0]
    ef46:	e7b9      	b.n	eebc <sd_mmc_spi_start_write_blocks+0xa4>
    ef48:	20000ea8 	.word	0x20000ea8
    ef4c:	00015b0d 	.word	0x00015b0d
    ef50:	20000fac 	.word	0x20000fac
    ef54:	20000eb0 	.word	0x20000eb0
    ef58:	00015919 	.word	0x00015919
    ef5c:	20000eaa 	.word	0x20000eaa
    ef60:	20000ea6 	.word	0x20000ea6
    ef64:	00030d40 	.word	0x00030d40

0000ef68 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    ef68:	b5f0      	push	{r4, r5, r6, r7, lr}
    ef6a:	46ce      	mov	lr, r9
    ef6c:	4647      	mov	r7, r8
    ef6e:	b580      	push	{r7, lr}
    ef70:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
    ef72:	466b      	mov	r3, sp
    ef74:	1ddd      	adds	r5, r3, #7
    ef76:	23ff      	movs	r3, #255	; 0xff
	spi_read_buffer_wait(&spi_main, &line, 1,
    ef78:	4f32      	ldr	r7, [pc, #200]	; (f044 <sd_mmc_spi_wait_end_of_write_blocks+0xdc>)
    ef7a:	4c33      	ldr	r4, [pc, #204]	; (f048 <sd_mmc_spi_wait_end_of_write_blocks+0xe0>)
    ef7c:	2201      	movs	r2, #1
    ef7e:	0029      	movs	r1, r5
    ef80:	0038      	movs	r0, r7
	uint8_t line = 0xFF;
    ef82:	702b      	strb	r3, [r5, #0]
	spi_read_buffer_wait(&spi_main, &line, 1,
    ef84:	47a0      	blx	r4
	spi_read_buffer_wait(&spi_main, &line, 1,
    ef86:	23ff      	movs	r3, #255	; 0xff
    ef88:	2201      	movs	r2, #1
    ef8a:	0029      	movs	r1, r5
    ef8c:	0038      	movs	r0, r7
    ef8e:	47a0      	blx	r4
		spi_read_buffer_wait(&spi_main, &line, 1,
    ef90:	23ff      	movs	r3, #255	; 0xff
    ef92:	2201      	movs	r2, #1
    ef94:	0029      	movs	r1, r5
    ef96:	0038      	movs	r0, r7
	spi_read_buffer_wait(&spi_main, &line, 1,
    ef98:	46a0      	mov	r8, r4
		spi_read_buffer_wait(&spi_main, &line, 1,
    ef9a:	47a0      	blx	r4
    ef9c:	4c2b      	ldr	r4, [pc, #172]	; (f04c <sd_mmc_spi_wait_end_of_write_blocks+0xe4>)
    ef9e:	e007      	b.n	efb0 <sd_mmc_spi_wait_end_of_write_blocks+0x48>
    efa0:	23ff      	movs	r3, #255	; 0xff
    efa2:	2201      	movs	r2, #1
    efa4:	0029      	movs	r1, r5
    efa6:	0038      	movs	r0, r7
    efa8:	3c01      	subs	r4, #1
    efaa:	47c0      	blx	r8
		if (!(nec_timeout--)) {
    efac:	2c00      	cmp	r4, #0
    efae:	d015      	beq.n	efdc <sd_mmc_spi_wait_end_of_write_blocks+0x74>
	} while (line != 0xFF);
    efb0:	782e      	ldrb	r6, [r5, #0]
    efb2:	2eff      	cmp	r6, #255	; 0xff
    efb4:	d1f4      	bne.n	efa0 <sd_mmc_spi_wait_end_of_write_blocks+0x38>
	if (1 == sd_mmc_spi_nb_block) {
    efb6:	4b26      	ldr	r3, [pc, #152]	; (f050 <sd_mmc_spi_wait_end_of_write_blocks+0xe8>)
    efb8:	881c      	ldrh	r4, [r3, #0]
    efba:	2c01      	cmp	r4, #1
    efbc:	d03f      	beq.n	f03e <sd_mmc_spi_wait_end_of_write_blocks+0xd6>
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    efbe:	4b25      	ldr	r3, [pc, #148]	; (f054 <sd_mmc_spi_wait_end_of_write_blocks+0xec>)
    efc0:	8819      	ldrh	r1, [r3, #0]
    efc2:	4b25      	ldr	r3, [pc, #148]	; (f058 <sd_mmc_spi_wait_end_of_write_blocks+0xf0>)
    efc4:	6818      	ldr	r0, [r3, #0]
    efc6:	4b25      	ldr	r3, [pc, #148]	; (f05c <sd_mmc_spi_wait_end_of_write_blocks+0xf4>)
    efc8:	4798      	blx	r3
    efca:	0003      	movs	r3, r0
		return true; // It is not the End of multi write
    efcc:	2001      	movs	r0, #1
	if (sd_mmc_spi_nb_block >
    efce:	429c      	cmp	r4, r3
    efd0:	d909      	bls.n	efe6 <sd_mmc_spi_wait_end_of_write_blocks+0x7e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    efd2:	b003      	add	sp, #12
    efd4:	bc0c      	pop	{r2, r3}
    efd6:	4690      	mov	r8, r2
    efd8:	4699      	mov	r9, r3
    efda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    efdc:	2205      	movs	r2, #5
    efde:	4b20      	ldr	r3, [pc, #128]	; (f060 <sd_mmc_spi_wait_end_of_write_blocks+0xf8>)
		return false;
    efe0:	2000      	movs	r0, #0
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    efe2:	701a      	strb	r2, [r3, #0]
    efe4:	e7f5      	b.n	efd2 <sd_mmc_spi_wait_end_of_write_blocks+0x6a>
	value = 0xFF;
    efe6:	466b      	mov	r3, sp
    efe8:	1d9c      	adds	r4, r3, #6
    efea:	719e      	strb	r6, [r3, #6]
	spi_write_buffer_wait(&spi_main, &value, 1);
    efec:	4b1d      	ldr	r3, [pc, #116]	; (f064 <sd_mmc_spi_wait_end_of_write_blocks+0xfc>)
    efee:	0021      	movs	r1, r4
    eff0:	2201      	movs	r2, #1
    eff2:	0038      	movs	r0, r7
    eff4:	4699      	mov	r9, r3
    eff6:	4798      	blx	r3
	value = SPI_TOKEN_STOP_TRAN;
    eff8:	23fd      	movs	r3, #253	; 0xfd
	spi_write_buffer_wait(&spi_main, &value, 1);
    effa:	0021      	movs	r1, r4
    effc:	2201      	movs	r2, #1
    effe:	0038      	movs	r0, r7
	value = SPI_TOKEN_STOP_TRAN;
    f000:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&spi_main, &value, 1);
    f002:	47c8      	blx	r9
	spi_read_buffer_wait(&spi_main, &line, 1,
    f004:	23ff      	movs	r3, #255	; 0xff
    f006:	2201      	movs	r2, #1
    f008:	0029      	movs	r1, r5
    f00a:	0038      	movs	r0, r7
	uint8_t line = 0xFF;
    f00c:	702e      	strb	r6, [r5, #0]
	spi_read_buffer_wait(&spi_main, &line, 1,
    f00e:	47c0      	blx	r8
	spi_read_buffer_wait(&spi_main, &line, 1,
    f010:	23ff      	movs	r3, #255	; 0xff
    f012:	2201      	movs	r2, #1
    f014:	0029      	movs	r1, r5
    f016:	0038      	movs	r0, r7
    f018:	47c0      	blx	r8
		spi_read_buffer_wait(&spi_main, &line, 1,
    f01a:	23ff      	movs	r3, #255	; 0xff
    f01c:	2201      	movs	r2, #1
    f01e:	0029      	movs	r1, r5
    f020:	0038      	movs	r0, r7
    f022:	47c0      	blx	r8
    f024:	4c09      	ldr	r4, [pc, #36]	; (f04c <sd_mmc_spi_wait_end_of_write_blocks+0xe4>)
    f026:	e007      	b.n	f038 <sd_mmc_spi_wait_end_of_write_blocks+0xd0>
    f028:	23ff      	movs	r3, #255	; 0xff
    f02a:	2201      	movs	r2, #1
    f02c:	0029      	movs	r1, r5
    f02e:	0038      	movs	r0, r7
    f030:	3c01      	subs	r4, #1
    f032:	47c0      	blx	r8
		if (!(nec_timeout--)) {
    f034:	2c00      	cmp	r4, #0
    f036:	d0d1      	beq.n	efdc <sd_mmc_spi_wait_end_of_write_blocks+0x74>
	} while (line != 0xFF);
    f038:	782b      	ldrb	r3, [r5, #0]
    f03a:	2bff      	cmp	r3, #255	; 0xff
    f03c:	d1f4      	bne.n	f028 <sd_mmc_spi_wait_end_of_write_blocks+0xc0>
	return true;
    f03e:	2001      	movs	r0, #1
    f040:	e7c7      	b.n	efd2 <sd_mmc_spi_wait_end_of_write_blocks+0x6a>
    f042:	46c0      	nop			; (mov r8, r8)
    f044:	20000fac 	.word	0x20000fac
    f048:	00015919 	.word	0x00015919
    f04c:	00030d40 	.word	0x00030d40
    f050:	20000eaa 	.word	0x20000eaa
    f054:	20000ea6 	.word	0x20000ea6
    f058:	20000eb0 	.word	0x20000eb0
    f05c:	0001cd1d 	.word	0x0001cd1d
    f060:	20000ea8 	.word	0x20000ea8
    f064:	00015b0d 	.word	0x00015b0d

0000f068 <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
    f068:	2001      	movs	r0, #1
    f06a:	4770      	bx	lr

0000f06c <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    f06c:	0003      	movs	r3, r0
    f06e:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    f070:	2001      	movs	r0, #1
    f072:	2b00      	cmp	r3, #0
    f074:	d101      	bne.n	f07a <mem_test_unit_ready+0xe>
    f076:	4b01      	ldr	r3, [pc, #4]	; (f07c <mem_test_unit_ready+0x10>)
    f078:	4798      	blx	r3
#endif

  Ctrl_access_unlock();

  return status;
}
    f07a:	bd10      	pop	{r4, pc}
    f07c:	000133d9 	.word	0x000133d9

0000f080 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    f080:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    f082:	2301      	movs	r3, #1
    f084:	2800      	cmp	r0, #0
    f086:	d103      	bne.n	f090 <mem_read_capacity+0x10>
    f088:	4b02      	ldr	r3, [pc, #8]	; (f094 <mem_read_capacity+0x14>)
    f08a:	0008      	movs	r0, r1
    f08c:	4798      	blx	r3
    f08e:	0003      	movs	r3, r0
#endif

  Ctrl_access_unlock();

  return status;
}
    f090:	0018      	movs	r0, r3
    f092:	bd10      	pop	{r4, pc}
    f094:	00013421 	.word	0x00013421

0000f098 <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    f098:	4243      	negs	r3, r0
    f09a:	4158      	adcs	r0, r3
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    f09c:	b2c0      	uxtb	r0, r0
    f09e:	4770      	bx	lr

0000f0a0 <mem_unload>:


bool mem_unload(U8 lun, bool unload)
{
    f0a0:	b510      	push	{r4, lr}

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
    f0a2:	2300      	movs	r3, #0
    f0a4:	2800      	cmp	r0, #0
    f0a6:	d103      	bne.n	f0b0 <mem_unload+0x10>
    f0a8:	4b02      	ldr	r3, [pc, #8]	; (f0b4 <mem_unload+0x14>)
    f0aa:	0008      	movs	r0, r1
    f0ac:	4798      	blx	r3
    f0ae:	0003      	movs	r3, r0
#endif

  Ctrl_access_unlock();

  return unloaded;
}
    f0b0:	0018      	movs	r0, r3
    f0b2:	bd10      	pop	{r4, pc}
    f0b4:	0001347d 	.word	0x0001347d

0000f0b8 <mem_wr_protect>:

bool mem_wr_protect(U8 lun)
{
    f0b8:	0003      	movs	r3, r0
    f0ba:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    f0bc:	2001      	movs	r0, #1
    f0be:	2b00      	cmp	r3, #0
    f0c0:	d101      	bne.n	f0c6 <mem_wr_protect+0xe>
    f0c2:	4b01      	ldr	r3, [pc, #4]	; (f0c8 <mem_wr_protect+0x10>)
    f0c4:	4798      	blx	r3
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    f0c6:	bd10      	pop	{r4, pc}
    f0c8:	00013489 	.word	0x00013489

0000f0cc <mem_removal>:


bool mem_removal(U8 lun)
{
    f0cc:	0003      	movs	r3, r0
    f0ce:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  removal =
#if MAX_LUN
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
    f0d0:	2001      	movs	r0, #1
    f0d2:	2b00      	cmp	r3, #0
    f0d4:	d101      	bne.n	f0da <mem_removal+0xe>
    f0d6:	4b01      	ldr	r3, [pc, #4]	; (f0dc <mem_removal+0x10>)
    f0d8:	4798      	blx	r3
#endif

  Ctrl_access_unlock();

  return removal;
}
    f0da:	bd10      	pop	{r4, pc}
    f0dc:	00013499 	.word	0x00013499

0000f0e0 <mem_name>:
#if MAX_LUN==0
  UNUSED(lun);
#endif
  return
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
    f0e0:	2800      	cmp	r0, #0
    f0e2:	d101      	bne.n	f0e8 <mem_name+0x8>
    f0e4:	4801      	ldr	r0, [pc, #4]	; (f0ec <mem_name+0xc>)
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
    f0e6:	4770      	bx	lr
       (lun < MAX_LUN) ? lun_desc[lun].name :
    f0e8:	2000      	movs	r0, #0
    f0ea:	e7fc      	b.n	f0e6 <mem_name+0x6>
    f0ec:	00025ab0 	.word	0x00025ab0

0000f0f0 <memory_2_usb>:
 */
//! @{


Ctrl_status memory_2_usb(U8 lun, U32 addr, U16 nb_sector)
{
    f0f0:	b510      	push	{r4, lr}
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
    f0f2:	2301      	movs	r3, #1
{
    f0f4:	000c      	movs	r4, r1
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
    f0f6:	2800      	cmp	r0, #0
    f0f8:	d104      	bne.n	f104 <memory_2_usb+0x14>
    f0fa:	4b03      	ldr	r3, [pc, #12]	; (f108 <memory_2_usb+0x18>)
    f0fc:	0011      	movs	r1, r2
    f0fe:	0020      	movs	r0, r4
    f100:	4798      	blx	r3
    f102:	0003      	movs	r3, r0
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
    f104:	0018      	movs	r0, r3
    f106:	bd10      	pop	{r4, pc}
    f108:	0001349d 	.word	0x0001349d

0000f10c <usb_2_memory>:


Ctrl_status usb_2_memory(U8 lun, U32 addr, U16 nb_sector)
{
    f10c:	b510      	push	{r4, lr}
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
    f10e:	2301      	movs	r3, #1
{
    f110:	000c      	movs	r4, r1
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
    f112:	2800      	cmp	r0, #0
    f114:	d104      	bne.n	f120 <usb_2_memory+0x14>
    f116:	4b03      	ldr	r3, [pc, #12]	; (f124 <usb_2_memory+0x18>)
    f118:	0011      	movs	r1, r2
    f11a:	0020      	movs	r0, r4
    f11c:	4798      	blx	r3
    f11e:	0003      	movs	r3, r0
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
    f120:	0018      	movs	r0, r3
    f122:	bd10      	pop	{r4, pc}
    f124:	00013559 	.word	0x00013559

0000f128 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    f128:	b510      	push	{r4, lr}
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    f12a:	2301      	movs	r3, #1
{
    f12c:	000c      	movs	r4, r1
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    f12e:	2800      	cmp	r0, #0
    f130:	d104      	bne.n	f13c <memory_2_ram+0x14>
    f132:	4b03      	ldr	r3, [pc, #12]	; (f140 <memory_2_ram+0x18>)
    f134:	0011      	movs	r1, r2
    f136:	0020      	movs	r0, r4
    f138:	4798      	blx	r3
    f13a:	0003      	movs	r3, r0
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
    f13c:	0018      	movs	r0, r3
    f13e:	bd10      	pop	{r4, pc}
    f140:	00013641 	.word	0x00013641

0000f144 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    f144:	b510      	push	{r4, lr}
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    f146:	2301      	movs	r3, #1
{
    f148:	000c      	movs	r4, r1
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    f14a:	2800      	cmp	r0, #0
    f14c:	d104      	bne.n	f158 <ram_2_memory+0x14>
    f14e:	4b03      	ldr	r3, [pc, #12]	; (f15c <ram_2_memory+0x18>)
    f150:	0011      	movs	r1, r2
    f152:	0020      	movs	r0, r4
    f154:	4798      	blx	r3
    f156:	0003      	movs	r3, r0
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
    f158:	0018      	movs	r0, r3
    f15a:	bd10      	pop	{r4, pc}
    f15c:	00013689 	.word	0x00013689

0000f160 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    f160:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    f162:	2a00      	cmp	r2, #0
    f164:	d001      	beq.n	f16a <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    f166:	0018      	movs	r0, r3
    f168:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    f16a:	4a06      	ldr	r2, [pc, #24]	; (f184 <extint_register_callback+0x24>)
    f16c:	0089      	lsls	r1, r1, #2
    f16e:	588b      	ldr	r3, [r1, r2]
    f170:	2b00      	cmp	r3, #0
    f172:	d003      	beq.n	f17c <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    f174:	4283      	cmp	r3, r0
    f176:	d003      	beq.n	f180 <extint_register_callback+0x20>
	return STATUS_ERR_ALREADY_INITIALIZED;
    f178:	231d      	movs	r3, #29
    f17a:	e7f4      	b.n	f166 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    f17c:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    f17e:	e7f2      	b.n	f166 <extint_register_callback+0x6>
		return STATUS_OK;
    f180:	2300      	movs	r3, #0
    f182:	e7f0      	b.n	f166 <extint_register_callback+0x6>
    f184:	20001400 	.word	0x20001400

0000f188 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    f188:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    f18a:	2900      	cmp	r1, #0
    f18c:	d001      	beq.n	f192 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    f18e:	0018      	movs	r0, r3
    f190:	4770      	bx	lr
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    f192:	281f      	cmp	r0, #31
    f194:	d805      	bhi.n	f1a2 <extint_chan_enable_callback+0x1a>
		eic->INTENSET.reg = (1UL << channel);
    f196:	3b16      	subs	r3, #22
    f198:	4083      	lsls	r3, r0
    f19a:	4a03      	ldr	r2, [pc, #12]	; (f1a8 <extint_chan_enable_callback+0x20>)
    f19c:	6113      	str	r3, [r2, #16]
	return STATUS_OK;
    f19e:	2300      	movs	r3, #0
    f1a0:	e7f5      	b.n	f18e <extint_chan_enable_callback+0x6>
		eic->INTENSET.reg = (1UL << channel);
    f1a2:	6109      	str	r1, [r1, #16]
    f1a4:	deff      	udf	#255	; 0xff
    f1a6:	46c0      	nop			; (mov r8, r8)
    f1a8:	40002400 	.word	0x40002400

0000f1ac <extint_get_current_channel>:
 *
 * \return Channel number.
 */
uint8_t extint_get_current_channel(void)
{
	return _current_channel;
    f1ac:	4b01      	ldr	r3, [pc, #4]	; (f1b4 <extint_get_current_channel+0x8>)
    f1ae:	7818      	ldrb	r0, [r3, #0]
}
    f1b0:	4770      	bx	lr
    f1b2:	46c0      	nop			; (mov r8, r8)
    f1b4:	200013fd 	.word	0x200013fd

0000f1b8 <EIC_Handler>:

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    f1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    f1ba:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    f1bc:	2601      	movs	r6, #1
    f1be:	4c0b      	ldr	r4, [pc, #44]	; (f1ec <EIC_Handler+0x34>)

	return (eic_module->INTFLAG.reg & eic_mask);
    f1c0:	4d0b      	ldr	r5, [pc, #44]	; (f1f0 <EIC_Handler+0x38>)
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    f1c2:	4f0c      	ldr	r7, [pc, #48]	; (f1f4 <EIC_Handler+0x3c>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    f1c4:	7023      	strb	r3, [r4, #0]
	uint32_t eic_mask   = (1UL << (channel % 32));
    f1c6:	0032      	movs	r2, r6
    f1c8:	409a      	lsls	r2, r3
	return (eic_module->INTFLAG.reg & eic_mask);
    f1ca:	6969      	ldr	r1, [r5, #20]
		if (extint_chan_is_detected(_current_channel)) {
    f1cc:	4211      	tst	r1, r2
    f1ce:	d006      	beq.n	f1de <EIC_Handler+0x26>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    f1d0:	616a      	str	r2, [r5, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    f1d2:	009b      	lsls	r3, r3, #2
    f1d4:	59db      	ldr	r3, [r3, r7]
    f1d6:	2b00      	cmp	r3, #0
    f1d8:	d000      	beq.n	f1dc <EIC_Handler+0x24>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    f1da:	4798      	blx	r3
    f1dc:	7823      	ldrb	r3, [r4, #0]
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    f1de:	3301      	adds	r3, #1
    f1e0:	b2db      	uxtb	r3, r3
    f1e2:	7023      	strb	r3, [r4, #0]
    f1e4:	2b0f      	cmp	r3, #15
    f1e6:	d9ee      	bls.n	f1c6 <EIC_Handler+0xe>
			}
		}
	}
}
    f1e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f1ea:	46c0      	nop			; (mov r8, r8)
    f1ec:	200013fd 	.word	0x200013fd
    f1f0:	40002400 	.word	0x40002400
    f1f4:	20001400 	.word	0x20001400

0000f1f8 <_system_extint_init>:
			MCLK->APBAMASK.reg |= mask;
    f1f8:	2380      	movs	r3, #128	; 0x80
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    f1fa:	b510      	push	{r4, lr}
    f1fc:	4a15      	ldr	r2, [pc, #84]	; (f254 <_system_extint_init+0x5c>)
    f1fe:	009b      	lsls	r3, r3, #2
    f200:	6951      	ldr	r1, [r2, #20]
	system_gclk_chan_enable(EIC_GCLK_ID);
#endif

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    f202:	4c15      	ldr	r4, [pc, #84]	; (f258 <_system_extint_init+0x60>)
    f204:	430b      	orrs	r3, r1
    f206:	6153      	str	r3, [r2, #20]
    f208:	2201      	movs	r2, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    f20a:	2101      	movs	r1, #1
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    f20c:	7823      	ldrb	r3, [r4, #0]
    f20e:	4313      	orrs	r3, r2
    f210:	7023      	strb	r3, [r4, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    f212:	3201      	adds	r2, #1
    f214:	6863      	ldr	r3, [r4, #4]
    f216:	421a      	tst	r2, r3
    f218:	d1fc      	bne.n	f214 <_system_extint_init+0x1c>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    f21a:	6863      	ldr	r3, [r4, #4]
    f21c:	4219      	tst	r1, r3
    f21e:	d1f9      	bne.n	f214 <_system_extint_init+0x1c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
	}
#else
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_ULP32K;
    f220:	2210      	movs	r2, #16
    f222:	7823      	ldrb	r3, [r4, #0]
    f224:	2100      	movs	r1, #0
    f226:	4313      	orrs	r3, r2
    f228:	7023      	strb	r3, [r4, #0]
    f22a:	2240      	movs	r2, #64	; 0x40
    f22c:	4b0b      	ldr	r3, [pc, #44]	; (f25c <_system_extint_init+0x64>)
    f22e:	480c      	ldr	r0, [pc, #48]	; (f260 <_system_extint_init+0x68>)
    f230:	4798      	blx	r3
    f232:	2208      	movs	r2, #8
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    f234:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    f236:	2001      	movs	r0, #1
    f238:	4b0a      	ldr	r3, [pc, #40]	; (f264 <_system_extint_init+0x6c>)
    f23a:	601a      	str	r2, [r3, #0]
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    f23c:	7823      	ldrb	r3, [r4, #0]
    f23e:	3a06      	subs	r2, #6
    f240:	4313      	orrs	r3, r2
    f242:	7023      	strb	r3, [r4, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    f244:	4b04      	ldr	r3, [pc, #16]	; (f258 <_system_extint_init+0x60>)
    f246:	685a      	ldr	r2, [r3, #4]
    f248:	4211      	tst	r1, r2
    f24a:	d1fc      	bne.n	f246 <_system_extint_init+0x4e>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    f24c:	685a      	ldr	r2, [r3, #4]
    f24e:	4210      	tst	r0, r2
    f250:	d1f9      	bne.n	f246 <_system_extint_init+0x4e>
}
    f252:	bd10      	pop	{r4, pc}
    f254:	40000400 	.word	0x40000400
    f258:	40002400 	.word	0x40002400
    f25c:	0001fdfd 	.word	0x0001fdfd
    f260:	20001400 	.word	0x20001400
    f264:	e000e100 	.word	0xe000e100

0000f268 <extint_chan_get_config_defaults>:
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
	config->gpio_pin_mux        = 0;
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    f268:	2201      	movs	r2, #1
	config->gpio_pin            = 0;
    f26a:	2300      	movs	r3, #0
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    f26c:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    f26e:	3201      	adds	r2, #1
	config->gpio_pin            = 0;
    f270:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    f272:	6043      	str	r3, [r0, #4]
	config->filter_input_signal = false;
    f274:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    f276:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
    f278:	7243      	strb	r3, [r0, #9]
}
    f27a:	4770      	bx	lr

0000f27c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    f27c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f27e:	000c      	movs	r4, r1
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    f280:	2102      	movs	r1, #2
{
    f282:	0005      	movs	r5, r0
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    f284:	2001      	movs	r0, #1
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    f286:	4a25      	ldr	r2, [pc, #148]	; (f31c <extint_chan_set_config+0xa0>)
{
    f288:	b083      	sub	sp, #12
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    f28a:	7813      	ldrb	r3, [r2, #0]
    f28c:	438b      	bics	r3, r1
    f28e:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    f290:	6853      	ldr	r3, [r2, #4]
    f292:	4219      	tst	r1, r3
    f294:	d1fc      	bne.n	f290 <extint_chan_set_config+0x14>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    f296:	6853      	ldr	r3, [r2, #4]
    f298:	4003      	ands	r3, r0
    f29a:	d1f9      	bne.n	f290 <extint_chan_set_config+0x14>
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    f29c:	a901      	add	r1, sp, #4
    f29e:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    f2a0:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    f2a2:	7923      	ldrb	r3, [r4, #4]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    f2a4:	7820      	ldrb	r0, [r4, #0]
	pinmux_config.mux_position = config->gpio_pin_mux;
    f2a6:	700b      	strb	r3, [r1, #0]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    f2a8:	7a23      	ldrb	r3, [r4, #8]
    f2aa:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    f2ac:	4b1c      	ldr	r3, [pc, #112]	; (f320 <extint_chan_set_config+0xa4>)
    f2ae:	4798      	blx	r3
		return NULL;
    f2b0:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    f2b2:	2d1f      	cmp	r5, #31
    f2b4:	d800      	bhi.n	f2b8 <extint_chan_set_config+0x3c>
		return eics[eic_index];
    f2b6:	4919      	ldr	r1, [pc, #100]	; (f31c <extint_chan_set_config+0xa0>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    f2b8:	2207      	movs	r2, #7

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    f2ba:	7aa3      	ldrb	r3, [r4, #10]
	uint32_t config_pos = (4 * (channel % 8));
    f2bc:	402a      	ands	r2, r5
    f2be:	0092      	lsls	r2, r2, #2
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    f2c0:	7ae7      	ldrb	r7, [r4, #11]
	if (config->filter_input_signal) {
    f2c2:	2b00      	cmp	r3, #0
    f2c4:	d001      	beq.n	f2ca <extint_chan_set_config+0x4e>
    f2c6:	2308      	movs	r3, #8
    f2c8:	431f      	orrs	r7, r3
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    f2ca:	260f      	movs	r6, #15
			(new_config << config_pos);
    f2cc:	4097      	lsls	r7, r2
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    f2ce:	4096      	lsls	r6, r2
			(new_config << config_pos);
    f2d0:	003a      	movs	r2, r7
    f2d2:	08eb      	lsrs	r3, r5, #3
    f2d4:	009b      	lsls	r3, r3, #2
    f2d6:	18cb      	adds	r3, r1, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    f2d8:	69d8      	ldr	r0, [r3, #28]
    f2da:	43b0      	bics	r0, r6
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    f2dc:	4302      	orrs	r2, r0
		= (EIC_module->CONFIG[channel / 8].reg &
    f2de:	61da      	str	r2, [r3, #28]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30) || (SAMR34) || (SAMR35)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
    f2e0:	7a63      	ldrb	r3, [r4, #9]
		EIC_module->ASYNCH.reg |= (1UL << channel);
    f2e2:	698a      	ldr	r2, [r1, #24]
	if (config->enable_async_edge_detection) {
    f2e4:	2b00      	cmp	r3, #0
    f2e6:	d114      	bne.n	f312 <extint_chan_set_config+0x96>
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
    f2e8:	2301      	movs	r3, #1
    f2ea:	40ab      	lsls	r3, r5
    f2ec:	43db      	mvns	r3, r3
    f2ee:	041b      	lsls	r3, r3, #16
    f2f0:	0c1b      	lsrs	r3, r3, #16
    f2f2:	4013      	ands	r3, r2
    f2f4:	618b      	str	r3, [r1, #24]
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    f2f6:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    f2f8:	2001      	movs	r0, #1
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    f2fa:	4b08      	ldr	r3, [pc, #32]	; (f31c <extint_chan_set_config+0xa0>)
    f2fc:	781a      	ldrb	r2, [r3, #0]
    f2fe:	430a      	orrs	r2, r1
    f300:	701a      	strb	r2, [r3, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    f302:	685a      	ldr	r2, [r3, #4]
    f304:	4211      	tst	r1, r2
    f306:	d1fc      	bne.n	f302 <extint_chan_set_config+0x86>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    f308:	685a      	ldr	r2, [r3, #4]
    f30a:	4210      	tst	r0, r2
    f30c:	d1f9      	bne.n	f302 <extint_chan_set_config+0x86>
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
}
    f30e:	b003      	add	sp, #12
    f310:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->ASYNCH.reg |= (1UL << channel);
    f312:	2301      	movs	r3, #1
    f314:	40ab      	lsls	r3, r5
    f316:	4313      	orrs	r3, r2
    f318:	618b      	str	r3, [r1, #24]
    f31a:	e7ec      	b.n	f2f6 <extint_chan_set_config+0x7a>
    f31c:	40002400 	.word	0x40002400
    f320:	000169f1 	.word	0x000169f1

0000f324 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    f324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    f326:	4b3a      	ldr	r3, [pc, #232]	; (f410 <RTC_Handler+0xec>)
    f328:	681f      	ldr	r7, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
    f32a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
	Rtc *const rtc_module = module->hw;
    f32c:	683d      	ldr	r5, [r7, #0]
	callback_mask &= module->registered_callback;
    f32e:	8ebe      	ldrh	r6, [r7, #52]	; 0x34
    f330:	401e      	ands	r6, r3
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    f332:	89ab      	ldrh	r3, [r5, #12]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    f334:	896c      	ldrh	r4, [r5, #10]
    f336:	401c      	ands	r4, r3
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    f338:	b223      	sxth	r3, r4
    f33a:	2b00      	cmp	r3, #0
    f33c:	db51      	blt.n	f3e2 <RTC_Handler+0xbe>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
    f33e:	23ff      	movs	r3, #255	; 0xff
    f340:	4223      	tst	r3, r4
    f342:	d042      	beq.n	f3ca <RTC_Handler+0xa6>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    f344:	3bfe      	subs	r3, #254	; 0xfe
    f346:	4223      	tst	r3, r4
    f348:	d003      	beq.n	f352 <RTC_Handler+0x2e>
			  && (callback_mask & (1 << i))) {
    f34a:	4233      	tst	r3, r6
    f34c:	d001      	beq.n	f352 <RTC_Handler+0x2e>
				module->callbacks[i]();
    f34e:	68bb      	ldr	r3, [r7, #8]
    f350:	4798      	blx	r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    f352:	2301      	movs	r3, #1
    f354:	81ab      	strh	r3, [r5, #12]
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    f356:	07a2      	lsls	r2, r4, #30
    f358:	d504      	bpl.n	f364 <RTC_Handler+0x40>
			  && (callback_mask & (1 << i))) {
    f35a:	1072      	asrs	r2, r6, #1
    f35c:	4213      	tst	r3, r2
    f35e:	d001      	beq.n	f364 <RTC_Handler+0x40>
				module->callbacks[i]();
    f360:	68fb      	ldr	r3, [r7, #12]
    f362:	4798      	blx	r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    f364:	2302      	movs	r3, #2
    f366:	81ab      	strh	r3, [r5, #12]
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    f368:	0763      	lsls	r3, r4, #29
    f36a:	d503      	bpl.n	f374 <RTC_Handler+0x50>
			  && (callback_mask & (1 << i))) {
    f36c:	0773      	lsls	r3, r6, #29
    f36e:	d501      	bpl.n	f374 <RTC_Handler+0x50>
				module->callbacks[i]();
    f370:	693b      	ldr	r3, [r7, #16]
    f372:	4798      	blx	r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    f374:	2304      	movs	r3, #4
    f376:	81ab      	strh	r3, [r5, #12]
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    f378:	0723      	lsls	r3, r4, #28
    f37a:	d503      	bpl.n	f384 <RTC_Handler+0x60>
			  && (callback_mask & (1 << i))) {
    f37c:	0733      	lsls	r3, r6, #28
    f37e:	d501      	bpl.n	f384 <RTC_Handler+0x60>
				module->callbacks[i]();
    f380:	697b      	ldr	r3, [r7, #20]
    f382:	4798      	blx	r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    f384:	2308      	movs	r3, #8
    f386:	81ab      	strh	r3, [r5, #12]
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    f388:	06e3      	lsls	r3, r4, #27
    f38a:	d503      	bpl.n	f394 <RTC_Handler+0x70>
			  && (callback_mask & (1 << i))) {
    f38c:	06f3      	lsls	r3, r6, #27
    f38e:	d501      	bpl.n	f394 <RTC_Handler+0x70>
				module->callbacks[i]();
    f390:	69bb      	ldr	r3, [r7, #24]
    f392:	4798      	blx	r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    f394:	2310      	movs	r3, #16
    f396:	81ab      	strh	r3, [r5, #12]
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    f398:	06a3      	lsls	r3, r4, #26
    f39a:	d503      	bpl.n	f3a4 <RTC_Handler+0x80>
			  && (callback_mask & (1 << i))) {
    f39c:	06b3      	lsls	r3, r6, #26
    f39e:	d501      	bpl.n	f3a4 <RTC_Handler+0x80>
				module->callbacks[i]();
    f3a0:	69fb      	ldr	r3, [r7, #28]
    f3a2:	4798      	blx	r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    f3a4:	2320      	movs	r3, #32
    f3a6:	81ab      	strh	r3, [r5, #12]
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    f3a8:	0663      	lsls	r3, r4, #25
    f3aa:	d503      	bpl.n	f3b4 <RTC_Handler+0x90>
			  && (callback_mask & (1 << i))) {
    f3ac:	0673      	lsls	r3, r6, #25
    f3ae:	d501      	bpl.n	f3b4 <RTC_Handler+0x90>
				module->callbacks[i]();
    f3b0:	6a3b      	ldr	r3, [r7, #32]
    f3b2:	4798      	blx	r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    f3b4:	2340      	movs	r3, #64	; 0x40
    f3b6:	81ab      	strh	r3, [r5, #12]
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    f3b8:	0623      	lsls	r3, r4, #24
    f3ba:	d503      	bpl.n	f3c4 <RTC_Handler+0xa0>
			  && (callback_mask & (1 << i))) {
    f3bc:	0633      	lsls	r3, r6, #24
    f3be:	d501      	bpl.n	f3c4 <RTC_Handler+0xa0>
				module->callbacks[i]();
    f3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f3c2:	4798      	blx	r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    f3c4:	2380      	movs	r3, #128	; 0x80
    f3c6:	81ab      	strh	r3, [r5, #12]
	_rtc_interrupt_handler(0);
}
    f3c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    f3ca:	2380      	movs	r3, #128	; 0x80
    f3cc:	005b      	lsls	r3, r3, #1
    f3ce:	421c      	tst	r4, r3
    f3d0:	d00c      	beq.n	f3ec <RTC_Handler+0xc8>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    f3d2:	421e      	tst	r6, r3
    f3d4:	d001      	beq.n	f3da <RTC_Handler+0xb6>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    f3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f3d8:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    f3da:	2380      	movs	r3, #128	; 0x80
    f3dc:	005b      	lsls	r3, r3, #1
    f3de:	81ab      	strh	r3, [r5, #12]
    f3e0:	e7f2      	b.n	f3c8 <RTC_Handler+0xa4>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    f3e2:	0573      	lsls	r3, r6, #21
    f3e4:	d40c      	bmi.n	f400 <RTC_Handler+0xdc>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    f3e6:	4b0b      	ldr	r3, [pc, #44]	; (f414 <RTC_Handler+0xf0>)
    f3e8:	81ab      	strh	r3, [r5, #12]
    f3ea:	e7ed      	b.n	f3c8 <RTC_Handler+0xa4>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    f3ec:	2380      	movs	r3, #128	; 0x80
    f3ee:	009b      	lsls	r3, r3, #2
    f3f0:	421c      	tst	r4, r3
    f3f2:	d0e9      	beq.n	f3c8 <RTC_Handler+0xa4>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    f3f4:	421e      	tst	r6, r3
    f3f6:	d108      	bne.n	f40a <RTC_Handler+0xe6>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    f3f8:	2380      	movs	r3, #128	; 0x80
    f3fa:	009b      	lsls	r3, r3, #2
    f3fc:	81ab      	strh	r3, [r5, #12]
}
    f3fe:	e7e3      	b.n	f3c8 <RTC_Handler+0xa4>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    f400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f402:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    f404:	4b03      	ldr	r3, [pc, #12]	; (f414 <RTC_Handler+0xf0>)
    f406:	81ab      	strh	r3, [r5, #12]
    f408:	e7de      	b.n	f3c8 <RTC_Handler+0xa4>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    f40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f40c:	4798      	blx	r3
    f40e:	e7f3      	b.n	f3f8 <RTC_Handler+0xd4>
    f410:	20001440 	.word	0x20001440
    f414:	ffff8000 	.word	0xffff8000

0000f418 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    f418:	b5f0      	push	{r4, r5, r6, r7, lr}
    f41a:	4645      	mov	r5, r8
    f41c:	4688      	mov	r8, r1
    f41e:	464e      	mov	r6, r9
    f420:	46de      	mov	lr, fp
    f422:	4657      	mov	r7, sl
	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    f424:	4643      	mov	r3, r8
{
    f426:	b5e0      	push	{r5, r6, r7, lr}
	uint16_t tmp_data_length = packet->data_length;
    f428:	885b      	ldrh	r3, [r3, #2]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    f42a:	2207      	movs	r2, #7
    f42c:	4699      	mov	r9, r3
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    f42e:	6801      	ldr	r1, [r0, #0]
    f430:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    f432:	421a      	tst	r2, r3
    f434:	d1fc      	bne.n	f430 <_i2c_master_write_packet+0x18>

	_i2c_master_wait_for_sync(module);

	/* Switch to high speed mode */
	if (packet->high_speed) {
    f436:	4643      	mov	r3, r8
    f438:	7a5b      	ldrb	r3, [r3, #9]
    f43a:	2b00      	cmp	r3, #0
    f43c:	d000      	beq.n	f440 <_i2c_master_write_packet+0x28>
    f43e:	e08d      	b.n	f55c <_i2c_master_write_packet+0x144>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    f440:	684b      	ldr	r3, [r1, #4]
    f442:	4a55      	ldr	r2, [pc, #340]	; (f598 <_i2c_master_write_packet+0x180>)
    f444:	4013      	ands	r3, r2
    f446:	604b      	str	r3, [r1, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    f448:	4643      	mov	r3, r8
    f44a:	7a1b      	ldrb	r3, [r3, #8]
    f44c:	2b00      	cmp	r3, #0
    f44e:	d058      	beq.n	f502 <_i2c_master_write_packet+0xea>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    f450:	4643      	mov	r3, r8
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    f452:	4642      	mov	r2, r8
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    f454:	881b      	ldrh	r3, [r3, #0]
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    f456:	7a52      	ldrb	r2, [r2, #9]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    f458:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    f45a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    f45c:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    f45e:	2280      	movs	r2, #128	; 0x80
    f460:	0212      	lsls	r2, r2, #8
    f462:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    f464:	624b      	str	r3, [r1, #36]	; 0x24
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    f466:	6802      	ldr	r2, [r0, #0]
	uint16_t timeout_counter = 0;
    f468:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    f46a:	2501      	movs	r5, #1
    f46c:	2602      	movs	r6, #2
    f46e:	e008      	b.n	f482 <_i2c_master_write_packet+0x6a>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    f470:	7e14      	ldrb	r4, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    f472:	4226      	tst	r6, r4
    f474:	d108      	bne.n	f488 <_i2c_master_write_packet+0x70>
		if (++timeout_counter >= module->buffer_timeout) {
    f476:	3301      	adds	r3, #1
    f478:	8904      	ldrh	r4, [r0, #8]
    f47a:	b29b      	uxth	r3, r3
    f47c:	429c      	cmp	r4, r3
    f47e:	d800      	bhi.n	f482 <_i2c_master_write_packet+0x6a>
    f480:	e06a      	b.n	f558 <_i2c_master_write_packet+0x140>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    f482:	7e14      	ldrb	r4, [r2, #24]
    f484:	4225      	tst	r5, r4
    f486:	d0f3      	beq.n	f470 <_i2c_master_write_packet+0x58>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    f488:	2302      	movs	r3, #2
    f48a:	7e14      	ldrb	r4, [r2, #24]
    f48c:	4223      	tst	r3, r4
    f48e:	d041      	beq.n	f514 <_i2c_master_write_packet+0xfc>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    f490:	7613      	strb	r3, [r2, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    f492:	8b52      	ldrh	r2, [r2, #26]
    f494:	4213      	tst	r3, r2
    f496:	d147      	bne.n	f528 <_i2c_master_write_packet+0x110>
	uint16_t timeout_counter = 0;
    f498:	2300      	movs	r3, #0
    f49a:	469c      	mov	ip, r3
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    f49c:	3320      	adds	r3, #32
    f49e:	469a      	mov	sl, r3
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    f4a0:	3308      	adds	r3, #8
    f4a2:	469b      	mov	fp, r3
			if (tmp_status != STATUS_OK) {
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    f4a4:	4663      	mov	r3, ip
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    f4a6:	2707      	movs	r7, #7
    f4a8:	468c      	mov	ip, r1
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    f4aa:	2501      	movs	r5, #1
    f4ac:	2602      	movs	r6, #2
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    f4ae:	0019      	movs	r1, r3
		while (tmp_data_length--) {
    f4b0:	4549      	cmp	r1, r9
    f4b2:	d100      	bne.n	f4b6 <_i2c_master_write_packet+0x9e>
    f4b4:	e06d      	b.n	f592 <_i2c_master_write_packet+0x17a>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    f4b6:	4663      	mov	r3, ip
    f4b8:	4652      	mov	r2, sl
    f4ba:	8b5b      	ldrh	r3, [r3, #26]
    f4bc:	421a      	tst	r2, r3
    f4be:	d033      	beq.n	f528 <_i2c_master_write_packet+0x110>
    f4c0:	6802      	ldr	r2, [r0, #0]
    f4c2:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
    f4c4:	421f      	tst	r7, r3
    f4c6:	d1fc      	bne.n	f4c2 <_i2c_master_write_packet+0xaa>
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    f4c8:	4643      	mov	r3, r8
    f4ca:	4662      	mov	r2, ip
    f4cc:	465c      	mov	r4, fp
    f4ce:	685b      	ldr	r3, [r3, #4]
    f4d0:	5c5b      	ldrb	r3, [r3, r1]
    f4d2:	5513      	strb	r3, [r2, r4]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    f4d4:	6802      	ldr	r2, [r0, #0]
	uint16_t timeout_counter = 0;
    f4d6:	2300      	movs	r3, #0
    f4d8:	e007      	b.n	f4ea <_i2c_master_write_packet+0xd2>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    f4da:	7e14      	ldrb	r4, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    f4dc:	4226      	tst	r6, r4
    f4de:	d107      	bne.n	f4f0 <_i2c_master_write_packet+0xd8>
		if (++timeout_counter >= module->buffer_timeout) {
    f4e0:	3301      	adds	r3, #1
    f4e2:	8904      	ldrh	r4, [r0, #8]
    f4e4:	b29b      	uxth	r3, r3
    f4e6:	429c      	cmp	r4, r3
    f4e8:	d926      	bls.n	f538 <_i2c_master_write_packet+0x120>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    f4ea:	7e14      	ldrb	r4, [r2, #24]
    f4ec:	4225      	tst	r5, r4
    f4ee:	d0f4      	beq.n	f4da <_i2c_master_write_packet+0xc2>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    f4f0:	4663      	mov	r3, ip
    f4f2:	2204      	movs	r2, #4
    f4f4:	8b5b      	ldrh	r3, [r3, #26]
    f4f6:	3101      	adds	r1, #1
    f4f8:	421a      	tst	r2, r3
    f4fa:	d0d9      	beq.n	f4b0 <_i2c_master_write_packet+0x98>
    f4fc:	4661      	mov	r1, ip
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    f4fe:	221e      	movs	r2, #30
    f500:	e01c      	b.n	f53c <_i2c_master_write_packet+0x124>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    f502:	4643      	mov	r3, r8
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    f504:	4642      	mov	r2, r8
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    f506:	881b      	ldrh	r3, [r3, #0]
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    f508:	7a52      	ldrb	r2, [r2, #9]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    f50a:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    f50c:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    f50e:	4313      	orrs	r3, r2
    f510:	624b      	str	r3, [r1, #36]	; 0x24
    f512:	e7a8      	b.n	f466 <_i2c_master_write_packet+0x4e>
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    f514:	8b53      	ldrh	r3, [r2, #26]
    f516:	075b      	lsls	r3, r3, #29
    f518:	d5be      	bpl.n	f498 <_i2c_master_write_packet+0x80>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    f51a:	23c0      	movs	r3, #192	; 0xc0
    f51c:	6851      	ldr	r1, [r2, #4]
    f51e:	029b      	lsls	r3, r3, #10
    f520:	430b      	orrs	r3, r1
    f522:	6053      	str	r3, [r2, #4]
		return STATUS_ERR_BAD_ADDRESS;
    f524:	2218      	movs	r2, #24
    f526:	e000      	b.n	f52a <_i2c_master_write_packet+0x112>
			return STATUS_ERR_PACKET_COLLISION;
    f528:	2241      	movs	r2, #65	; 0x41
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    f52a:	0010      	movs	r0, r2
    f52c:	bc3c      	pop	{r2, r3, r4, r5}
    f52e:	4690      	mov	r8, r2
    f530:	4699      	mov	r9, r3
    f532:	46a2      	mov	sl, r4
    f534:	46ab      	mov	fp, r5
    f536:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f538:	4661      	mov	r1, ip
			return STATUS_ERR_TIMEOUT;
    f53a:	2212      	movs	r2, #18
		if (module->send_stop) {
    f53c:	7a83      	ldrb	r3, [r0, #10]
    f53e:	2b00      	cmp	r3, #0
    f540:	d0f3      	beq.n	f52a <_i2c_master_write_packet+0x112>
    f542:	6804      	ldr	r4, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    f544:	2007      	movs	r0, #7
    f546:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    f548:	4218      	tst	r0, r3
    f54a:	d1fc      	bne.n	f546 <_i2c_master_write_packet+0x12e>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    f54c:	23c0      	movs	r3, #192	; 0xc0
    f54e:	6848      	ldr	r0, [r1, #4]
    f550:	029b      	lsls	r3, r3, #10
    f552:	4303      	orrs	r3, r0
    f554:	604b      	str	r3, [r1, #4]
    f556:	e7e8      	b.n	f52a <_i2c_master_write_packet+0x112>
			return STATUS_ERR_TIMEOUT;
    f558:	2212      	movs	r2, #18
    f55a:	e7e6      	b.n	f52a <_i2c_master_write_packet+0x112>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    f55c:	4643      	mov	r3, r8
    f55e:	7a9a      	ldrb	r2, [r3, #10]
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    f560:	2380      	movs	r3, #128	; 0x80
    f562:	684c      	ldr	r4, [r1, #4]
    f564:	02db      	lsls	r3, r3, #11
    f566:	4323      	orrs	r3, r4
    f568:	604b      	str	r3, [r1, #4]
	i2c_module->ADDR.reg = hs_master_code;
    f56a:	624a      	str	r2, [r1, #36]	; 0x24
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    f56c:	6802      	ldr	r2, [r0, #0]
	uint16_t timeout_counter = 0;
    f56e:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    f570:	2501      	movs	r5, #1
    f572:	2602      	movs	r6, #2
    f574:	e007      	b.n	f586 <_i2c_master_write_packet+0x16e>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    f576:	7e14      	ldrb	r4, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    f578:	4226      	tst	r6, r4
    f57a:	d107      	bne.n	f58c <_i2c_master_write_packet+0x174>
		if (++timeout_counter >= module->buffer_timeout) {
    f57c:	3301      	adds	r3, #1
    f57e:	8904      	ldrh	r4, [r0, #8]
    f580:	b29b      	uxth	r3, r3
    f582:	429c      	cmp	r4, r3
    f584:	d902      	bls.n	f58c <_i2c_master_write_packet+0x174>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    f586:	7e14      	ldrb	r4, [r2, #24]
    f588:	4225      	tst	r5, r4
    f58a:	d0f4      	beq.n	f576 <_i2c_master_write_packet+0x15e>
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    f58c:	2301      	movs	r3, #1
    f58e:	760b      	strb	r3, [r1, #24]
    f590:	e756      	b.n	f440 <_i2c_master_write_packet+0x28>
    f592:	4661      	mov	r1, ip
    f594:	2200      	movs	r2, #0
    f596:	e7d1      	b.n	f53c <_i2c_master_write_packet+0x124>
    f598:	fffbffff 	.word	0xfffbffff

0000f59c <_i2c_master_read_packet>:
{
    f59c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f59e:	464e      	mov	r6, r9
    f5a0:	46de      	mov	lr, fp
    f5a2:	4657      	mov	r7, sl
    f5a4:	4645      	mov	r5, r8
    f5a6:	b5e0      	push	{r5, r6, r7, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    f5a8:	6803      	ldr	r3, [r0, #0]
{
    f5aa:	4689      	mov	r9, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    f5ac:	469c      	mov	ip, r3
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    f5ae:	4663      	mov	r3, ip
    f5b0:	681b      	ldr	r3, [r3, #0]
{
    f5b2:	b083      	sub	sp, #12
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    f5b4:	011b      	lsls	r3, r3, #4
    f5b6:	0fdb      	lsrs	r3, r3, #31
	uint16_t tmp_data_length = packet->data_length;
    f5b8:	8849      	ldrh	r1, [r1, #2]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    f5ba:	9301      	str	r3, [sp, #4]
	if (packet->high_speed) {
    f5bc:	464b      	mov	r3, r9
    f5be:	7a5b      	ldrb	r3, [r3, #9]
    f5c0:	2b00      	cmp	r3, #0
    f5c2:	d000      	beq.n	f5c6 <_i2c_master_read_packet+0x2a>
    f5c4:	e0fc      	b.n	f7c0 <_i2c_master_read_packet+0x224>
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    f5c6:	4663      	mov	r3, ip
    f5c8:	4a9b      	ldr	r2, [pc, #620]	; (f838 <_i2c_master_read_packet+0x29c>)
    f5ca:	685b      	ldr	r3, [r3, #4]
    f5cc:	4013      	ands	r3, r2
    f5ce:	4662      	mov	r2, ip
    f5d0:	6053      	str	r3, [r2, #4]
	if (packet->ten_bit_address) {
    f5d2:	464b      	mov	r3, r9
    f5d4:	7a1b      	ldrb	r3, [r3, #8]
    f5d6:	2b00      	cmp	r3, #0
    f5d8:	d03c      	beq.n	f654 <_i2c_master_read_packet+0xb8>
		i2c_module->ADDR.reg = (packet->address << 1) |
    f5da:	464b      	mov	r3, r9
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    f5dc:	464a      	mov	r2, r9
		i2c_module->ADDR.reg = (packet->address << 1) |
    f5de:	881b      	ldrh	r3, [r3, #0]
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    f5e0:	7a52      	ldrb	r2, [r2, #9]
		i2c_module->ADDR.reg = (packet->address << 1) |
    f5e2:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    f5e4:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    f5e6:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    f5e8:	2280      	movs	r2, #128	; 0x80
    f5ea:	0212      	lsls	r2, r2, #8
    f5ec:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    f5ee:	4662      	mov	r2, ip
    f5f0:	6253      	str	r3, [r2, #36]	; 0x24
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    f5f2:	6802      	ldr	r2, [r0, #0]
	uint16_t timeout_counter = 0;
    f5f4:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    f5f6:	2501      	movs	r5, #1
    f5f8:	2602      	movs	r6, #2
    f5fa:	e008      	b.n	f60e <_i2c_master_read_packet+0x72>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    f5fc:	7e14      	ldrb	r4, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    f5fe:	4226      	tst	r6, r4
    f600:	d108      	bne.n	f614 <_i2c_master_read_packet+0x78>
		if (++timeout_counter >= module->buffer_timeout) {
    f602:	3301      	adds	r3, #1
    f604:	8904      	ldrh	r4, [r0, #8]
    f606:	b29b      	uxth	r3, r3
    f608:	429c      	cmp	r4, r3
    f60a:	d800      	bhi.n	f60e <_i2c_master_read_packet+0x72>
    f60c:	e10a      	b.n	f824 <_i2c_master_read_packet+0x288>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    f60e:	7e14      	ldrb	r4, [r2, #24]
    f610:	4225      	tst	r5, r4
    f612:	d0f3      	beq.n	f5fc <_i2c_master_read_packet+0x60>
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    f614:	4663      	mov	r3, ip
    f616:	4a88      	ldr	r2, [pc, #544]	; (f838 <_i2c_master_read_packet+0x29c>)
    f618:	685b      	ldr	r3, [r3, #4]
    f61a:	4013      	ands	r3, r2
    f61c:	4662      	mov	r2, ip
    f61e:	6053      	str	r3, [r2, #4]
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    f620:	2202      	movs	r2, #2
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    f622:	6803      	ldr	r3, [r0, #0]
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    f624:	7e1c      	ldrb	r4, [r3, #24]
    f626:	4222      	tst	r2, r4
    f628:	d100      	bne.n	f62c <_i2c_master_read_packet+0x90>
    f62a:	e0ef      	b.n	f80c <_i2c_master_read_packet+0x270>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    f62c:	761a      	strb	r2, [r3, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    f62e:	8b5b      	ldrh	r3, [r3, #26]
    f630:	421a      	tst	r2, r3
    f632:	d000      	beq.n	f636 <_i2c_master_read_packet+0x9a>
    f634:	e0ad      	b.n	f792 <_i2c_master_read_packet+0x1f6>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    f636:	464b      	mov	r3, r9
    f638:	2278      	movs	r2, #120	; 0x78
    f63a:	881b      	ldrh	r3, [r3, #0]
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    f63c:	2401      	movs	r4, #1
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    f63e:	0a1b      	lsrs	r3, r3, #8
    f640:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    f642:	464a      	mov	r2, r9
    f644:	7a52      	ldrb	r2, [r2, #9]
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    f646:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    f648:	0392      	lsls	r2, r2, #14
    f64a:	4322      	orrs	r2, r4
    f64c:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    f64e:	4662      	mov	r2, ip
    f650:	6253      	str	r3, [r2, #36]	; 0x24
    f652:	e00a      	b.n	f66a <_i2c_master_read_packet+0xce>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    f654:	464b      	mov	r3, r9
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    f656:	464a      	mov	r2, r9
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    f658:	881b      	ldrh	r3, [r3, #0]
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    f65a:	7a52      	ldrb	r2, [r2, #9]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    f65c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    f65e:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    f660:	4313      	orrs	r3, r2
    f662:	2201      	movs	r2, #1
    f664:	4313      	orrs	r3, r2
    f666:	4662      	mov	r2, ip
    f668:	6253      	str	r3, [r2, #36]	; 0x24
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    f66a:	6802      	ldr	r2, [r0, #0]
	uint16_t timeout_counter = 0;
    f66c:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    f66e:	2501      	movs	r5, #1
    f670:	2602      	movs	r6, #2
    f672:	e008      	b.n	f686 <_i2c_master_read_packet+0xea>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    f674:	7e14      	ldrb	r4, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    f676:	4226      	tst	r6, r4
    f678:	d108      	bne.n	f68c <_i2c_master_read_packet+0xf0>
		if (++timeout_counter >= module->buffer_timeout) {
    f67a:	3301      	adds	r3, #1
    f67c:	8904      	ldrh	r4, [r0, #8]
    f67e:	b29b      	uxth	r3, r3
    f680:	429c      	cmp	r4, r3
    f682:	d800      	bhi.n	f686 <_i2c_master_read_packet+0xea>
    f684:	e0ba      	b.n	f7fc <_i2c_master_read_packet+0x260>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    f686:	7e14      	ldrb	r4, [r2, #24]
    f688:	4225      	tst	r5, r4
    f68a:	d0f3      	beq.n	f674 <_i2c_master_read_packet+0xd8>
	return STATUS_OK;
    f68c:	2300      	movs	r3, #0
    f68e:	9300      	str	r3, [sp, #0]
	if ((sclsm_flag) && (packet->data_length == 1)) {
    f690:	9b01      	ldr	r3, [sp, #4]
    f692:	2b00      	cmp	r3, #0
    f694:	d000      	beq.n	f698 <_i2c_master_read_packet+0xfc>
    f696:	e06f      	b.n	f778 <_i2c_master_read_packet+0x1dc>
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    f698:	4663      	mov	r3, ip
    f69a:	4a67      	ldr	r2, [pc, #412]	; (f838 <_i2c_master_read_packet+0x29c>)
    f69c:	685b      	ldr	r3, [r3, #4]
    f69e:	4013      	ands	r3, r2
    f6a0:	4662      	mov	r2, ip
    f6a2:	6053      	str	r3, [r2, #4]
	if (tmp_status == STATUS_OK) {
    f6a4:	9b00      	ldr	r3, [sp, #0]
    f6a6:	2b00      	cmp	r3, #0
    f6a8:	d15e      	bne.n	f768 <_i2c_master_read_packet+0x1cc>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    f6aa:	2202      	movs	r2, #2
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    f6ac:	6803      	ldr	r3, [r0, #0]
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    f6ae:	7e1c      	ldrb	r4, [r3, #24]
    f6b0:	4222      	tst	r2, r4
    f6b2:	d100      	bne.n	f6b6 <_i2c_master_read_packet+0x11a>
    f6b4:	e0a5      	b.n	f802 <_i2c_master_read_packet+0x266>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    f6b6:	761a      	strb	r2, [r3, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    f6b8:	8b5b      	ldrh	r3, [r3, #26]
    f6ba:	421a      	tst	r2, r3
    f6bc:	d169      	bne.n	f792 <_i2c_master_read_packet+0x1f6>
		while (tmp_data_length--) {
    f6be:	4a5f      	ldr	r2, [pc, #380]	; (f83c <_i2c_master_read_packet+0x2a0>)
    f6c0:	3901      	subs	r1, #1
    f6c2:	4692      	mov	sl, r2
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    f6c4:	2220      	movs	r2, #32
    f6c6:	b289      	uxth	r1, r1
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    f6c8:	2300      	movs	r3, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    f6ca:	4693      	mov	fp, r2
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    f6cc:	2707      	movs	r7, #7
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    f6ce:	2501      	movs	r5, #1
    f6d0:	2602      	movs	r6, #2
		while (tmp_data_length--) {
    f6d2:	4551      	cmp	r1, sl
    f6d4:	d02c      	beq.n	f730 <_i2c_master_read_packet+0x194>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    f6d6:	4662      	mov	r2, ip
    f6d8:	465c      	mov	r4, fp
    f6da:	8b52      	ldrh	r2, [r2, #26]
    f6dc:	4214      	tst	r4, r2
    f6de:	d058      	beq.n	f792 <_i2c_master_read_packet+0x1f6>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    f6e0:	7ac2      	ldrb	r2, [r0, #11]
    f6e2:	2a00      	cmp	r2, #0
    f6e4:	d004      	beq.n	f6f0 <_i2c_master_read_packet+0x154>
    f6e6:	9a01      	ldr	r2, [sp, #4]
    f6e8:	2a00      	cmp	r2, #0
    f6ea:	d055      	beq.n	f798 <_i2c_master_read_packet+0x1fc>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    f6ec:	2901      	cmp	r1, #1
    f6ee:	d055      	beq.n	f79c <_i2c_master_read_packet+0x200>
    f6f0:	6804      	ldr	r4, [r0, #0]
    f6f2:	69e2      	ldr	r2, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    f6f4:	4217      	tst	r7, r2
    f6f6:	d1fc      	bne.n	f6f2 <_i2c_master_read_packet+0x156>
				packet->data[counter++] = i2c_module->DATA.reg;
    f6f8:	1c5a      	adds	r2, r3, #1
    f6fa:	b292      	uxth	r2, r2
    f6fc:	2428      	movs	r4, #40	; 0x28
    f6fe:	4690      	mov	r8, r2
    f700:	4662      	mov	r2, ip
    f702:	5d12      	ldrb	r2, [r2, r4]
    f704:	464c      	mov	r4, r9
    f706:	6864      	ldr	r4, [r4, #4]
    f708:	54e2      	strb	r2, [r4, r3]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    f70a:	6802      	ldr	r2, [r0, #0]
	uint16_t timeout_counter = 0;
    f70c:	2300      	movs	r3, #0
    f70e:	e007      	b.n	f720 <_i2c_master_read_packet+0x184>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    f710:	7e14      	ldrb	r4, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    f712:	4226      	tst	r6, r4
    f714:	d107      	bne.n	f726 <_i2c_master_read_packet+0x18a>
		if (++timeout_counter >= module->buffer_timeout) {
    f716:	3301      	adds	r3, #1
    f718:	8904      	ldrh	r4, [r0, #8]
    f71a:	b29b      	uxth	r3, r3
    f71c:	429c      	cmp	r4, r3
    f71e:	d949      	bls.n	f7b4 <_i2c_master_read_packet+0x218>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    f720:	7e14      	ldrb	r4, [r2, #24]
    f722:	4225      	tst	r5, r4
    f724:	d0f4      	beq.n	f710 <_i2c_master_read_packet+0x174>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    f726:	4643      	mov	r3, r8
    f728:	3901      	subs	r1, #1
    f72a:	b289      	uxth	r1, r1
		while (tmp_data_length--) {
    f72c:	4551      	cmp	r1, sl
    f72e:	d1d2      	bne.n	f6d6 <_i2c_master_read_packet+0x13a>
    f730:	4698      	mov	r8, r3
		if (module->send_stop) {
    f732:	7a83      	ldrb	r3, [r0, #10]
    f734:	6802      	ldr	r2, [r0, #0]
    f736:	2b00      	cmp	r3, #0
    f738:	d00b      	beq.n	f752 <_i2c_master_read_packet+0x1b6>
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    f73a:	2107      	movs	r1, #7
    f73c:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
    f73e:	4219      	tst	r1, r3
    f740:	d1fc      	bne.n	f73c <_i2c_master_read_packet+0x1a0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    f742:	4663      	mov	r3, ip
    f744:	685a      	ldr	r2, [r3, #4]
    f746:	23c0      	movs	r3, #192	; 0xc0
    f748:	029b      	lsls	r3, r3, #10
    f74a:	4313      	orrs	r3, r2
    f74c:	4662      	mov	r2, ip
    f74e:	6053      	str	r3, [r2, #4]
    f750:	6802      	ldr	r2, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    f752:	2107      	movs	r1, #7
    f754:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
    f756:	4219      	tst	r1, r3
    f758:	d1fc      	bne.n	f754 <_i2c_master_read_packet+0x1b8>
		packet->data[counter] = i2c_module->DATA.reg;
    f75a:	2328      	movs	r3, #40	; 0x28
    f75c:	4662      	mov	r2, ip
    f75e:	5cd2      	ldrb	r2, [r2, r3]
    f760:	464b      	mov	r3, r9
    f762:	4641      	mov	r1, r8
    f764:	685b      	ldr	r3, [r3, #4]
    f766:	545a      	strb	r2, [r3, r1]
}
    f768:	9800      	ldr	r0, [sp, #0]
    f76a:	b003      	add	sp, #12
    f76c:	bc3c      	pop	{r2, r3, r4, r5}
    f76e:	4690      	mov	r8, r2
    f770:	4699      	mov	r9, r3
    f772:	46a2      	mov	sl, r4
    f774:	46ab      	mov	fp, r5
    f776:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((sclsm_flag) && (packet->data_length == 1)) {
    f778:	464b      	mov	r3, r9
    f77a:	885b      	ldrh	r3, [r3, #2]
    f77c:	2b01      	cmp	r3, #1
    f77e:	d000      	beq.n	f782 <_i2c_master_read_packet+0x1e6>
    f780:	e78a      	b.n	f698 <_i2c_master_read_packet+0xfc>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    f782:	4663      	mov	r3, ip
    f784:	685a      	ldr	r2, [r3, #4]
    f786:	2380      	movs	r3, #128	; 0x80
    f788:	02db      	lsls	r3, r3, #11
    f78a:	4313      	orrs	r3, r2
    f78c:	4662      	mov	r2, ip
    f78e:	6053      	str	r3, [r2, #4]
    f790:	e788      	b.n	f6a4 <_i2c_master_read_packet+0x108>
			return STATUS_ERR_PACKET_COLLISION;
    f792:	2341      	movs	r3, #65	; 0x41
    f794:	9300      	str	r3, [sp, #0]
    f796:	e7e7      	b.n	f768 <_i2c_master_read_packet+0x1cc>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    f798:	2900      	cmp	r1, #0
    f79a:	d1a9      	bne.n	f6f0 <_i2c_master_read_packet+0x154>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    f79c:	4662      	mov	r2, ip
    f79e:	6854      	ldr	r4, [r2, #4]
    f7a0:	2280      	movs	r2, #128	; 0x80
    f7a2:	02d2      	lsls	r2, r2, #11
    f7a4:	4322      	orrs	r2, r4
    f7a6:	4698      	mov	r8, r3
    f7a8:	4664      	mov	r4, ip
    f7aa:	3901      	subs	r1, #1
    f7ac:	6062      	str	r2, [r4, #4]
    f7ae:	b289      	uxth	r1, r1
    f7b0:	4643      	mov	r3, r8
    f7b2:	e7bb      	b.n	f72c <_i2c_master_read_packet+0x190>
			return STATUS_ERR_TIMEOUT;
    f7b4:	2312      	movs	r3, #18
    f7b6:	9300      	str	r3, [sp, #0]
		if (module->send_stop) {
    f7b8:	7a83      	ldrb	r3, [r0, #10]
    f7ba:	2b00      	cmp	r3, #0
    f7bc:	d0c9      	beq.n	f752 <_i2c_master_read_packet+0x1b6>
    f7be:	e7bc      	b.n	f73a <_i2c_master_read_packet+0x19e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    f7c0:	464b      	mov	r3, r9
    f7c2:	7a9a      	ldrb	r2, [r3, #10]
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    f7c4:	4663      	mov	r3, ip
    f7c6:	685c      	ldr	r4, [r3, #4]
    f7c8:	2380      	movs	r3, #128	; 0x80
    f7ca:	02db      	lsls	r3, r3, #11
    f7cc:	4323      	orrs	r3, r4
    f7ce:	4664      	mov	r4, ip
    f7d0:	6063      	str	r3, [r4, #4]
	i2c_module->ADDR.reg = hs_master_code;
    f7d2:	6262      	str	r2, [r4, #36]	; 0x24
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    f7d4:	6802      	ldr	r2, [r0, #0]
	uint16_t timeout_counter = 0;
    f7d6:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    f7d8:	2501      	movs	r5, #1
    f7da:	2602      	movs	r6, #2
    f7dc:	e007      	b.n	f7ee <_i2c_master_read_packet+0x252>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    f7de:	7e14      	ldrb	r4, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    f7e0:	4226      	tst	r6, r4
    f7e2:	d107      	bne.n	f7f4 <_i2c_master_read_packet+0x258>
		if (++timeout_counter >= module->buffer_timeout) {
    f7e4:	3301      	adds	r3, #1
    f7e6:	8904      	ldrh	r4, [r0, #8]
    f7e8:	b29b      	uxth	r3, r3
    f7ea:	429c      	cmp	r4, r3
    f7ec:	d902      	bls.n	f7f4 <_i2c_master_read_packet+0x258>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    f7ee:	7e14      	ldrb	r4, [r2, #24]
    f7f0:	4225      	tst	r5, r4
    f7f2:	d0f4      	beq.n	f7de <_i2c_master_read_packet+0x242>
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    f7f4:	2301      	movs	r3, #1
    f7f6:	4662      	mov	r2, ip
    f7f8:	7613      	strb	r3, [r2, #24]
    f7fa:	e6e4      	b.n	f5c6 <_i2c_master_read_packet+0x2a>
			return STATUS_ERR_TIMEOUT;
    f7fc:	2312      	movs	r3, #18
    f7fe:	9300      	str	r3, [sp, #0]
    f800:	e746      	b.n	f690 <_i2c_master_read_packet+0xf4>
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    f802:	8b5a      	ldrh	r2, [r3, #26]
    f804:	0752      	lsls	r2, r2, #29
    f806:	d400      	bmi.n	f80a <_i2c_master_read_packet+0x26e>
    f808:	e759      	b.n	f6be <_i2c_master_read_packet+0x122>
    f80a:	e003      	b.n	f814 <_i2c_master_read_packet+0x278>
    f80c:	8b5a      	ldrh	r2, [r3, #26]
    f80e:	0752      	lsls	r2, r2, #29
    f810:	d400      	bmi.n	f814 <_i2c_master_read_packet+0x278>
    f812:	e710      	b.n	f636 <_i2c_master_read_packet+0x9a>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    f814:	22c0      	movs	r2, #192	; 0xc0
    f816:	6859      	ldr	r1, [r3, #4]
    f818:	0292      	lsls	r2, r2, #10
    f81a:	430a      	orrs	r2, r1
    f81c:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    f81e:	2318      	movs	r3, #24
    f820:	9300      	str	r3, [sp, #0]
    f822:	e7a1      	b.n	f768 <_i2c_master_read_packet+0x1cc>
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    f824:	4663      	mov	r3, ip
    f826:	4a04      	ldr	r2, [pc, #16]	; (f838 <_i2c_master_read_packet+0x29c>)
    f828:	685b      	ldr	r3, [r3, #4]
    f82a:	4013      	ands	r3, r2
    f82c:	4662      	mov	r2, ip
    f82e:	6053      	str	r3, [r2, #4]
			return STATUS_ERR_TIMEOUT;
    f830:	2312      	movs	r3, #18
    f832:	9300      	str	r3, [sp, #0]
    f834:	e798      	b.n	f768 <_i2c_master_read_packet+0x1cc>
    f836:	46c0      	nop			; (mov r8, r8)
    f838:	fffbffff 	.word	0xfffbffff
    f83c:	0000ffff 	.word	0x0000ffff

0000f840 <i2c_master_init>:
{
    f840:	b5f0      	push	{r4, r5, r6, r7, lr}
    f842:	46de      	mov	lr, fp
    f844:	464e      	mov	r6, r9
    f846:	4645      	mov	r5, r8
    f848:	4657      	mov	r7, sl
    f84a:	b5e0      	push	{r5, r6, r7, lr}
    f84c:	0005      	movs	r5, r0
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    f84e:	4bac      	ldr	r3, [pc, #688]	; (fb00 <i2c_master_init+0x2c0>)
{
    f850:	b089      	sub	sp, #36	; 0x24
	module->hw = hw;
    f852:	6029      	str	r1, [r5, #0]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    f854:	0008      	movs	r0, r1
{
    f856:	0014      	movs	r4, r2
    f858:	000e      	movs	r6, r1
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    f85a:	469b      	mov	fp, r3
    f85c:	4798      	blx	r3

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    f85e:	4aa9      	ldr	r2, [pc, #676]	; (fb04 <i2c_master_init+0x2c4>)
	if (sercom_index == 5) {
    f860:	2805      	cmp	r0, #5
    f862:	d100      	bne.n	f866 <i2c_master_init+0x26>
    f864:	e0ef      	b.n	fa46 <i2c_master_init+0x206>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    f866:	2301      	movs	r3, #1
    f868:	4083      	lsls	r3, r0
			MCLK->APBCMASK.reg |= mask;
    f86a:	69d1      	ldr	r1, [r2, #28]
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    f86c:	3012      	adds	r0, #18
    f86e:	430b      	orrs	r3, r1
    f870:	61d3      	str	r3, [r2, #28]
    f872:	b2c7      	uxtb	r7, r0
	gclk_chan_conf.source_generator = config->generator_source;
    f874:	7b23      	ldrb	r3, [r4, #12]
    f876:	aa06      	add	r2, sp, #24
    f878:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    f87a:	0011      	movs	r1, r2
    f87c:	0038      	movs	r0, r7
    f87e:	4ba2      	ldr	r3, [pc, #648]	; (fb08 <i2c_master_init+0x2c8>)
    f880:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    f882:	0038      	movs	r0, r7
    f884:	4ba1      	ldr	r3, [pc, #644]	; (fb0c <i2c_master_init+0x2cc>)
    f886:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    f888:	4ba1      	ldr	r3, [pc, #644]	; (fb10 <i2c_master_init+0x2d0>)
    f88a:	7b20      	ldrb	r0, [r4, #12]
    f88c:	2100      	movs	r1, #0
    f88e:	4798      	blx	r3
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    f890:	6833      	ldr	r3, [r6, #0]
		return STATUS_ERR_DENIED;
    f892:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    f894:	079b      	lsls	r3, r3, #30
    f896:	d506      	bpl.n	f8a6 <i2c_master_init+0x66>
}
    f898:	b009      	add	sp, #36	; 0x24
    f89a:	bc3c      	pop	{r2, r3, r4, r5}
    f89c:	4690      	mov	r8, r2
    f89e:	4699      	mov	r9, r3
    f8a0:	46a2      	mov	sl, r4
    f8a2:	46ab      	mov	fp, r5
    f8a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    f8a6:	2701      	movs	r7, #1
    f8a8:	6833      	ldr	r3, [r6, #0]
		return STATUS_BUSY;
    f8aa:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    f8ac:	403b      	ands	r3, r7
    f8ae:	4698      	mov	r8, r3
    f8b0:	d1f2      	bne.n	f898 <i2c_master_init+0x58>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    f8b2:	6828      	ldr	r0, [r5, #0]
    f8b4:	47d8      	blx	fp
    f8b6:	4682      	mov	sl, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    f8b8:	4996      	ldr	r1, [pc, #600]	; (fb14 <i2c_master_init+0x2d4>)
    f8ba:	4b97      	ldr	r3, [pc, #604]	; (fb18 <i2c_master_init+0x2d8>)
    f8bc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    f8be:	4653      	mov	r3, sl
    f8c0:	4a96      	ldr	r2, [pc, #600]	; (fb1c <i2c_master_init+0x2dc>)
    f8c2:	009b      	lsls	r3, r3, #2
    f8c4:	509d      	str	r5, [r3, r2]
	module->registered_callback = 0;
    f8c6:	4643      	mov	r3, r8
    f8c8:	762b      	strb	r3, [r5, #24]
	module->enabled_callback = 0;
    f8ca:	766b      	strb	r3, [r5, #25]
	module->buffer_length = 0;
    f8cc:	2300      	movs	r3, #0
    f8ce:	469a      	mov	sl, r3
    f8d0:	4643      	mov	r3, r8
	module->status = STATUS_OK;
    f8d2:	4652      	mov	r2, sl
	module->buffer_length = 0;
    f8d4:	836b      	strh	r3, [r5, #26]
	module->buffer_remaining = 0;
    f8d6:	83ab      	strh	r3, [r5, #28]
	module->status = STATUS_OK;
    f8d8:	2325      	movs	r3, #37	; 0x25
    f8da:	54ea      	strb	r2, [r5, r3]
	module->buffer = NULL;
    f8dc:	4643      	mov	r3, r8
    f8de:	622b      	str	r3, [r5, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    f8e0:	2314      	movs	r3, #20
    f8e2:	6033      	str	r3, [r6, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    f8e4:	682b      	ldr	r3, [r5, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    f8e6:	ae07      	add	r6, sp, #28
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    f8e8:	0018      	movs	r0, r3
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    f8ea:	4699      	mov	r9, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    f8ec:	47d8      	blx	fp
    f8ee:	2380      	movs	r3, #128	; 0x80
    f8f0:	7033      	strb	r3, [r6, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    f8f2:	4653      	mov	r3, sl
    f8f4:	9000      	str	r0, [sp, #0]
	uint32_t pad0 = config->pinmux_pad0;
    f8f6:	69e0      	ldr	r0, [r4, #28]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    f8f8:	70b7      	strb	r7, [r6, #2]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    f8fa:	7073      	strb	r3, [r6, #1]
	config->powersave    = false;
    f8fc:	70f3      	strb	r3, [r6, #3]
	uint32_t pad1 = config->pinmux_pad1;
    f8fe:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    f900:	2800      	cmp	r0, #0
    f902:	d100      	bne.n	f906 <i2c_master_init+0xc6>
    f904:	e0b4      	b.n	fa70 <i2c_master_init+0x230>
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    f906:	2302      	movs	r3, #2
	pin_conf.mux_position = pad0 & 0xFFFF;
    f908:	7030      	strb	r0, [r6, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    f90a:	7073      	strb	r3, [r6, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    f90c:	0c00      	lsrs	r0, r0, #16
    f90e:	4b84      	ldr	r3, [pc, #528]	; (fb20 <i2c_master_init+0x2e0>)
    f910:	b2c0      	uxtb	r0, r0
    f912:	0031      	movs	r1, r6
    f914:	469b      	mov	fp, r3
    f916:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    f918:	2f00      	cmp	r7, #0
    f91a:	d100      	bne.n	f91e <i2c_master_init+0xde>
    f91c:	e0ad      	b.n	fa7a <i2c_master_init+0x23a>
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    f91e:	2302      	movs	r3, #2
	pin_conf.mux_position = pad1 & 0xFFFF;
    f920:	7037      	strb	r7, [r6, #0]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    f922:	0c3f      	lsrs	r7, r7, #16
    f924:	0031      	movs	r1, r6
    f926:	b2f8      	uxtb	r0, r7
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    f928:	469a      	mov	sl, r3
    f92a:	7073      	strb	r3, [r6, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    f92c:	47d8      	blx	fp
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    f92e:	8aa3      	ldrh	r3, [r4, #20]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    f930:	2180      	movs	r1, #128	; 0x80
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    f932:	80eb      	strh	r3, [r5, #6]
	module->buffer_timeout = config->buffer_timeout;
    f934:	8ae3      	ldrh	r3, [r4, #22]
    f936:	812b      	strh	r3, [r5, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    f938:	7e23      	ldrb	r3, [r4, #24]
    f93a:	2b00      	cmp	r3, #0
    f93c:	d100      	bne.n	f940 <i2c_master_init+0x100>
    f93e:	e088      	b.n	fa52 <i2c_master_init+0x212>
	tmp_ctrla |= config->transfer_speed;
    f940:	68a2      	ldr	r2, [r4, #8]
    f942:	6923      	ldr	r3, [r4, #16]
    f944:	4313      	orrs	r3, r2
    f946:	430b      	orrs	r3, r1
	if (config->scl_low_timeout) {
    f948:	2124      	movs	r1, #36	; 0x24
    f94a:	5c61      	ldrb	r1, [r4, r1]
    f94c:	2900      	cmp	r1, #0
    f94e:	d002      	beq.n	f956 <i2c_master_init+0x116>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    f950:	2180      	movs	r1, #128	; 0x80
    f952:	05c9      	lsls	r1, r1, #23
    f954:	430b      	orrs	r3, r1
		tmp_ctrla |= config->inactive_timeout;
    f956:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    f958:	430b      	orrs	r3, r1
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    f95a:	212c      	movs	r1, #44	; 0x2c
    f95c:	5c61      	ldrb	r1, [r4, r1]
    f95e:	2900      	cmp	r1, #0
    f960:	d100      	bne.n	f964 <i2c_master_init+0x124>
    f962:	e07f      	b.n	fa64 <i2c_master_init+0x224>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    f964:	2280      	movs	r2, #128	; 0x80
    f966:	0512      	lsls	r2, r2, #20
    f968:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    f96a:	222d      	movs	r2, #45	; 0x2d
    f96c:	5ca2      	ldrb	r2, [r4, r2]
    f96e:	2a00      	cmp	r2, #0
    f970:	d002      	beq.n	f978 <i2c_master_init+0x138>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    f972:	2280      	movs	r2, #128	; 0x80
    f974:	0412      	lsls	r2, r2, #16
    f976:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    f978:	222e      	movs	r2, #46	; 0x2e
    f97a:	5ca2      	ldrb	r2, [r4, r2]
    f97c:	2a00      	cmp	r2, #0
    f97e:	d002      	beq.n	f986 <i2c_master_init+0x146>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    f980:	2280      	movs	r2, #128	; 0x80
    f982:	03d2      	lsls	r2, r2, #15
    f984:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    f986:	464a      	mov	r2, r9
    f988:	6812      	ldr	r2, [r2, #0]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    f98a:	9800      	ldr	r0, [sp, #0]
	i2c_module->CTRLA.reg |= tmp_ctrla;
    f98c:	4313      	orrs	r3, r2
    f98e:	464a      	mov	r2, r9
    f990:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    f992:	2380      	movs	r3, #128	; 0x80
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    f994:	3012      	adds	r0, #18
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    f996:	005b      	lsls	r3, r3, #1
	uint32_t fscl        = 1000 * config->baud_rate;
    f998:	25fa      	movs	r5, #250	; 0xfa
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    f99a:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    f99c:	b2c0      	uxtb	r0, r0
    f99e:	4b61      	ldr	r3, [pc, #388]	; (fb24 <i2c_master_init+0x2e4>)
    f9a0:	4798      	blx	r3
	uint32_t fscl        = 1000 * config->baud_rate;
    f9a2:	6823      	ldr	r3, [r4, #0]
    f9a4:	00ad      	lsls	r5, r5, #2
    f9a6:	435d      	muls	r5, r3
	tmp_baud = (int32_t)(div_ceil(
    f9a8:	4b5f      	ldr	r3, [pc, #380]	; (fb28 <i2c_master_init+0x2e8>)
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    f9aa:	9005      	str	r0, [sp, #20]
	tmp_baud = (int32_t)(div_ceil(
    f9ac:	469b      	mov	fp, r3
    f9ae:	4798      	blx	r3
    f9b0:	9000      	str	r0, [sp, #0]
    f9b2:	9101      	str	r1, [sp, #4]
    f9b4:	0068      	lsls	r0, r5, #1
    f9b6:	47d8      	blx	fp
    f9b8:	9002      	str	r0, [sp, #8]
    f9ba:	9103      	str	r1, [sp, #12]
    f9bc:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    f9be:	47d8      	blx	fp
    f9c0:	4b5a      	ldr	r3, [pc, #360]	; (fb2c <i2c_master_init+0x2ec>)
    f9c2:	0006      	movs	r6, r0
    f9c4:	469a      	mov	sl, r3
    f9c6:	000f      	movs	r7, r1
    f9c8:	9800      	ldr	r0, [sp, #0]
    f9ca:	9901      	ldr	r1, [sp, #4]
    f9cc:	4a58      	ldr	r2, [pc, #352]	; (fb30 <i2c_master_init+0x2f0>)
    f9ce:	4b59      	ldr	r3, [pc, #356]	; (fb34 <i2c_master_init+0x2f4>)
    f9d0:	47d0      	blx	sl
    f9d2:	0002      	movs	r2, r0
    f9d4:	000b      	movs	r3, r1
    f9d6:	0030      	movs	r0, r6
    f9d8:	0039      	movs	r1, r7
    f9da:	47d0      	blx	sl
    f9dc:	2200      	movs	r2, #0
    f9de:	4b56      	ldr	r3, [pc, #344]	; (fb38 <i2c_master_init+0x2f8>)
    f9e0:	4f56      	ldr	r7, [pc, #344]	; (fb3c <i2c_master_init+0x2fc>)
    f9e2:	47b8      	blx	r7
    f9e4:	0006      	movs	r6, r0
    f9e6:	0028      	movs	r0, r5
    f9e8:	000f      	movs	r7, r1
    f9ea:	47d8      	blx	fp
    f9ec:	0002      	movs	r2, r0
    f9ee:	000b      	movs	r3, r1
    f9f0:	0030      	movs	r0, r6
    f9f2:	0039      	movs	r1, r7
    f9f4:	47d0      	blx	sl
    f9f6:	4d52      	ldr	r5, [pc, #328]	; (fb40 <i2c_master_init+0x300>)
    f9f8:	0002      	movs	r2, r0
    f9fa:	000b      	movs	r3, r1
    f9fc:	9800      	ldr	r0, [sp, #0]
    f9fe:	9901      	ldr	r1, [sp, #4]
    fa00:	47a8      	blx	r5
    fa02:	9e02      	ldr	r6, [sp, #8]
    fa04:	9f03      	ldr	r7, [sp, #12]
    fa06:	4d4d      	ldr	r5, [pc, #308]	; (fb3c <i2c_master_init+0x2fc>)
    fa08:	0032      	movs	r2, r6
    fa0a:	003b      	movs	r3, r7
    fa0c:	47a8      	blx	r5
    fa0e:	2200      	movs	r2, #0
    fa10:	4b4c      	ldr	r3, [pc, #304]	; (fb44 <i2c_master_init+0x304>)
    fa12:	4d4b      	ldr	r5, [pc, #300]	; (fb40 <i2c_master_init+0x300>)
    fa14:	47a8      	blx	r5
    fa16:	0032      	movs	r2, r6
    fa18:	003b      	movs	r3, r7
    fa1a:	4d4b      	ldr	r5, [pc, #300]	; (fb48 <i2c_master_init+0x308>)
    fa1c:	47a8      	blx	r5
    fa1e:	4f4b      	ldr	r7, [pc, #300]	; (fb4c <i2c_master_init+0x30c>)
    fa20:	47b8      	blx	r7
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    fa22:	2380      	movs	r3, #128	; 0x80
    fa24:	68a2      	ldr	r2, [r4, #8]
	tmp_baud = (int32_t)(div_ceil(
    fa26:	0006      	movs	r6, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    fa28:	049b      	lsls	r3, r3, #18
    fa2a:	429a      	cmp	r2, r3
    fa2c:	d02b      	beq.n	fa86 <i2c_master_init+0x246>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    fa2e:	2040      	movs	r0, #64	; 0x40
    fa30:	2eff      	cmp	r6, #255	; 0xff
    fa32:	d900      	bls.n	fa36 <i2c_master_init+0x1f6>
    fa34:	e730      	b.n	f898 <i2c_master_init+0x58>
    fa36:	2300      	movs	r3, #0
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    fa38:	4642      	mov	r2, r8
    fa3a:	4313      	orrs	r3, r2
    fa3c:	431e      	orrs	r6, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    fa3e:	464b      	mov	r3, r9
	enum status_code tmp_status_code = STATUS_OK;
    fa40:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    fa42:	60de      	str	r6, [r3, #12]
    fa44:	e728      	b.n	f898 <i2c_master_init+0x58>
			MCLK->APBDMASK.reg |= mask;
    fa46:	2102      	movs	r1, #2
    fa48:	6a13      	ldr	r3, [r2, #32]
    fa4a:	2718      	movs	r7, #24
    fa4c:	430b      	orrs	r3, r1
    fa4e:	6213      	str	r3, [r2, #32]
    fa50:	e710      	b.n	f874 <i2c_master_init+0x34>
	if (config->run_in_standby || system_is_debugger_present()) {
    fa52:	4652      	mov	r2, sl
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    fa54:	4b3e      	ldr	r3, [pc, #248]	; (fb50 <i2c_master_init+0x310>)
    fa56:	789b      	ldrb	r3, [r3, #2]
    fa58:	401a      	ands	r2, r3
    fa5a:	0013      	movs	r3, r2
		tmp_ctrla = 0;
    fa5c:	1e5a      	subs	r2, r3, #1
    fa5e:	4193      	sbcs	r3, r2
    fa60:	01d9      	lsls	r1, r3, #7
    fa62:	e76d      	b.n	f940 <i2c_master_init+0x100>
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    fa64:	2180      	movs	r1, #128	; 0x80
    fa66:	0489      	lsls	r1, r1, #18
    fa68:	428a      	cmp	r2, r1
    fa6a:	d000      	beq.n	fa6e <i2c_master_init+0x22e>
    fa6c:	e77d      	b.n	f96a <i2c_master_init+0x12a>
    fa6e:	e779      	b.n	f964 <i2c_master_init+0x124>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    fa70:	2100      	movs	r1, #0
    fa72:	4648      	mov	r0, r9
    fa74:	4b37      	ldr	r3, [pc, #220]	; (fb54 <i2c_master_init+0x314>)
    fa76:	4798      	blx	r3
    fa78:	e745      	b.n	f906 <i2c_master_init+0xc6>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    fa7a:	2101      	movs	r1, #1
    fa7c:	4648      	mov	r0, r9
    fa7e:	4b35      	ldr	r3, [pc, #212]	; (fb54 <i2c_master_init+0x314>)
    fa80:	4798      	blx	r3
    fa82:	0007      	movs	r7, r0
    fa84:	e74b      	b.n	f91e <i2c_master_init+0xde>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    fa86:	23fa      	movs	r3, #250	; 0xfa
    fa88:	6861      	ldr	r1, [r4, #4]
    fa8a:	009b      	lsls	r3, r3, #2
    fa8c:	434b      	muls	r3, r1
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    fa8e:	9800      	ldr	r0, [sp, #0]
    fa90:	9901      	ldr	r1, [sp, #4]
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    fa92:	4698      	mov	r8, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    fa94:	0002      	movs	r2, r0
    fa96:	000b      	movs	r3, r1
    fa98:	4c28      	ldr	r4, [pc, #160]	; (fb3c <i2c_master_init+0x2fc>)
    fa9a:	47a0      	blx	r4
    fa9c:	0004      	movs	r4, r0
    fa9e:	4640      	mov	r0, r8
    faa0:	000d      	movs	r5, r1
    faa2:	47d8      	blx	fp
    faa4:	2200      	movs	r2, #0
    faa6:	4b2c      	ldr	r3, [pc, #176]	; (fb58 <i2c_master_init+0x318>)
    faa8:	47d0      	blx	sl
    faaa:	0002      	movs	r2, r0
    faac:	000b      	movs	r3, r1
    faae:	0020      	movs	r0, r4
    fab0:	0029      	movs	r1, r5
    fab2:	4c25      	ldr	r4, [pc, #148]	; (fb48 <i2c_master_init+0x308>)
    fab4:	47a0      	blx	r4
    fab6:	2200      	movs	r2, #0
    fab8:	4b22      	ldr	r3, [pc, #136]	; (fb44 <i2c_master_init+0x304>)
    faba:	4c21      	ldr	r4, [pc, #132]	; (fb40 <i2c_master_init+0x300>)
    fabc:	47a0      	blx	r4
    fabe:	47b8      	blx	r7
    fac0:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    fac2:	d013      	beq.n	faec <i2c_master_init+0x2ac>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    fac4:	4b25      	ldr	r3, [pc, #148]	; (fb5c <i2c_master_init+0x31c>)
    fac6:	4641      	mov	r1, r8
    fac8:	9805      	ldr	r0, [sp, #20]
    faca:	4798      	blx	r3
    facc:	3802      	subs	r0, #2
    face:	1b03      	subs	r3, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    fad0:	2040      	movs	r0, #64	; 0x40
    fad2:	2eff      	cmp	r6, #255	; 0xff
    fad4:	d900      	bls.n	fad8 <i2c_master_init+0x298>
    fad6:	e6df      	b.n	f898 <i2c_master_init+0x58>
    fad8:	2bff      	cmp	r3, #255	; 0xff
    fada:	d900      	bls.n	fade <i2c_master_init+0x29e>
    fadc:	e6dc      	b.n	f898 <i2c_master_init+0x58>
    fade:	22ff      	movs	r2, #255	; 0xff
    fae0:	041b      	lsls	r3, r3, #16
    fae2:	0412      	lsls	r2, r2, #16
    fae4:	4013      	ands	r3, r2
    fae6:	4698      	mov	r8, r3
    fae8:	0623      	lsls	r3, r4, #24
    faea:	e7a5      	b.n	fa38 <i2c_master_init+0x1f8>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    faec:	4643      	mov	r3, r8
    faee:	0059      	lsls	r1, r3, #1
    faf0:	9b05      	ldr	r3, [sp, #20]
    faf2:	1e48      	subs	r0, r1, #1
    faf4:	469c      	mov	ip, r3
    faf6:	4b19      	ldr	r3, [pc, #100]	; (fb5c <i2c_master_init+0x31c>)
    faf8:	4460      	add	r0, ip
    fafa:	4798      	blx	r3
    fafc:	1e43      	subs	r3, r0, #1
    fafe:	e7e7      	b.n	fad0 <i2c_master_init+0x290>
    fb00:	00016115 	.word	0x00016115
    fb04:	40000400 	.word	0x40000400
    fb08:	000168f5 	.word	0x000168f5
    fb0c:	00016935 	.word	0x00016935
    fb10:	00015f71 	.word	0x00015f71
    fb14:	0000fc1d 	.word	0x0000fc1d
    fb18:	0000fe49 	.word	0x0000fe49
    fb1c:	20001444 	.word	0x20001444
    fb20:	000169f1 	.word	0x000169f1
    fb24:	0001696d 	.word	0x0001696d
    fb28:	0001fafd 	.word	0x0001fafd
    fb2c:	0001eea5 	.word	0x0001eea5
    fb30:	e826d695 	.word	0xe826d695
    fb34:	3e112e0b 	.word	0x3e112e0b
    fb38:	40240000 	.word	0x40240000
    fb3c:	0001e01d 	.word	0x0001e01d
    fb40:	0001f3a5 	.word	0x0001f3a5
    fb44:	3ff00000 	.word	0x3ff00000
    fb48:	0001e63d 	.word	0x0001e63d
    fb4c:	0001fa11 	.word	0x0001fa11
    fb50:	41002000 	.word	0x41002000
    fb54:	00015fb9 	.word	0x00015fb9
    fb58:	40080000 	.word	0x40080000
    fb5c:	0001cd1d 	.word	0x0001cd1d

0000fb60 <i2c_master_read_packet_wait>:
{
    fb60:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
    fb62:	8b82      	ldrh	r2, [r0, #28]
{
    fb64:	0003      	movs	r3, r0
		return STATUS_BUSY;
    fb66:	2005      	movs	r0, #5
	if (module->buffer_remaining > 0) {
    fb68:	2a00      	cmp	r2, #0
    fb6a:	d000      	beq.n	fb6e <i2c_master_read_packet_wait+0xe>
}
    fb6c:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    fb6e:	3201      	adds	r2, #1
    fb70:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    fb72:	72da      	strb	r2, [r3, #11]
	return _i2c_master_read_packet(module, packet);
    fb74:	0018      	movs	r0, r3
    fb76:	4b01      	ldr	r3, [pc, #4]	; (fb7c <i2c_master_read_packet_wait+0x1c>)
    fb78:	4798      	blx	r3
    fb7a:	e7f7      	b.n	fb6c <i2c_master_read_packet_wait+0xc>
    fb7c:	0000f59d 	.word	0x0000f59d

0000fb80 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    fb80:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    fb82:	8b82      	ldrh	r2, [r0, #28]
{
    fb84:	0003      	movs	r3, r0
		return STATUS_BUSY;
    fb86:	2005      	movs	r0, #5
	if (module->buffer_remaining > 0) {
    fb88:	2a00      	cmp	r2, #0
    fb8a:	d000      	beq.n	fb8e <i2c_master_write_packet_wait+0xe>

	module->send_stop = true;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
    fb8c:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    fb8e:	3201      	adds	r2, #1
    fb90:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    fb92:	72da      	strb	r2, [r3, #11]
	return _i2c_master_write_packet(module, packet);
    fb94:	0018      	movs	r0, r3
    fb96:	4b01      	ldr	r3, [pc, #4]	; (fb9c <i2c_master_write_packet_wait+0x1c>)
    fb98:	4798      	blx	r3
    fb9a:	e7f7      	b.n	fb8c <i2c_master_write_packet_wait+0xc>
    fb9c:	0000f419 	.word	0x0000f419

0000fba0 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    fba0:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    fba2:	6805      	ldr	r5, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    fba4:	682a      	ldr	r2, [r5, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    fba6:	8b44      	ldrh	r4, [r0, #26]
	buffer_index -= module->buffer_remaining;
    fba8:	8b83      	ldrh	r3, [r0, #28]
    fbaa:	1ae4      	subs	r4, r4, r3

	module->buffer_remaining--;
    fbac:	8b83      	ldrh	r3, [r0, #28]
	buffer_index -= module->buffer_remaining;
    fbae:	b2a4      	uxth	r4, r4
	module->buffer_remaining--;
    fbb0:	3b01      	subs	r3, #1
    fbb2:	b29b      	uxth	r3, r3
    fbb4:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
    fbb6:	0113      	lsls	r3, r2, #4
    fbb8:	d51e      	bpl.n	fbf8 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
    fbba:	7ac3      	ldrb	r3, [r0, #11]
    fbbc:	002a      	movs	r2, r5
    fbbe:	2b00      	cmp	r3, #0
    fbc0:	d128      	bne.n	fc14 <_i2c_master_read+0x74>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
    fbc2:	8b83      	ldrh	r3, [r0, #28]
    fbc4:	2b00      	cmp	r3, #0
    fbc6:	d10c      	bne.n	fbe2 <_i2c_master_read+0x42>
		if (module->send_stop) {
    fbc8:	7a83      	ldrb	r3, [r0, #10]
    fbca:	2b00      	cmp	r3, #0
    fbcc:	d009      	beq.n	fbe2 <_i2c_master_read+0x42>
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    fbce:	2107      	movs	r1, #7
    fbd0:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
    fbd2:	4219      	tst	r1, r3
    fbd4:	d1fc      	bne.n	fbd0 <_i2c_master_read+0x30>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    fbd6:	23c0      	movs	r3, #192	; 0xc0
    fbd8:	686a      	ldr	r2, [r5, #4]
    fbda:	029b      	lsls	r3, r3, #10
    fbdc:	4313      	orrs	r3, r2
    fbde:	606b      	str	r3, [r5, #4]
    fbe0:	6802      	ldr	r2, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    fbe2:	2107      	movs	r1, #7
    fbe4:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
    fbe6:	4219      	tst	r1, r3
    fbe8:	d1fc      	bne.n	fbe4 <_i2c_master_read+0x44>
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    fbea:	6a03      	ldr	r3, [r0, #32]
    fbec:	191c      	adds	r4, r3, r4
    fbee:	2328      	movs	r3, #40	; 0x28
    fbf0:	5ceb      	ldrb	r3, [r5, r3]
    fbf2:	b2db      	uxtb	r3, r3
    fbf4:	7023      	strb	r3, [r4, #0]
}
    fbf6:	bd30      	pop	{r4, r5, pc}
		if (module->send_nack && module->buffer_remaining == 0) {
    fbf8:	7ac3      	ldrb	r3, [r0, #11]
    fbfa:	002a      	movs	r2, r5
    fbfc:	2b00      	cmp	r3, #0
    fbfe:	d0e0      	beq.n	fbc2 <_i2c_master_read+0x22>
    fc00:	8b83      	ldrh	r3, [r0, #28]
    fc02:	2b00      	cmp	r3, #0
    fc04:	d1dd      	bne.n	fbc2 <_i2c_master_read+0x22>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    fc06:	2380      	movs	r3, #128	; 0x80
    fc08:	686a      	ldr	r2, [r5, #4]
    fc0a:	02db      	lsls	r3, r3, #11
    fc0c:	4313      	orrs	r3, r2
    fc0e:	606b      	str	r3, [r5, #4]
    fc10:	6802      	ldr	r2, [r0, #0]
    fc12:	e7d6      	b.n	fbc2 <_i2c_master_read+0x22>
		if (module->send_nack && module->buffer_remaining == 1) {
    fc14:	8b83      	ldrh	r3, [r0, #28]
    fc16:	2b01      	cmp	r3, #1
    fc18:	d1d3      	bne.n	fbc2 <_i2c_master_read+0x22>
    fc1a:	e7f4      	b.n	fc06 <_i2c_master_read+0x66>

0000fc1c <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    fc1c:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
    fc1e:	4b87      	ldr	r3, [pc, #540]	; (fe3c <_i2c_master_interrupt_handler+0x220>)
    fc20:	0080      	lsls	r0, r0, #2
    fc22:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    fc24:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    fc26:	682b      	ldr	r3, [r5, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    fc28:	7e62      	ldrb	r2, [r4, #25]
	callback_mask &= module->registered_callback;
    fc2a:	7e26      	ldrb	r6, [r4, #24]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    fc2c:	011b      	lsls	r3, r3, #4
	callback_mask &= module->registered_callback;
    fc2e:	4016      	ands	r6, r2

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    fc30:	8b62      	ldrh	r2, [r4, #26]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    fc32:	0fdb      	lsrs	r3, r3, #31
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    fc34:	2a00      	cmp	r2, #0
    fc36:	d103      	bne.n	fc40 <_i2c_master_interrupt_handler+0x24>
    fc38:	8ba2      	ldrh	r2, [r4, #28]
    fc3a:	2a00      	cmp	r2, #0
    fc3c:	d000      	beq.n	fc40 <_i2c_master_interrupt_handler+0x24>
    fc3e:	e06b      	b.n	fd18 <_i2c_master_interrupt_handler+0xfc>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    fc40:	8b62      	ldrh	r2, [r4, #26]
    fc42:	2a00      	cmp	r2, #0
    fc44:	d007      	beq.n	fc56 <_i2c_master_interrupt_handler+0x3a>
    fc46:	8ba2      	ldrh	r2, [r4, #28]
    fc48:	2a00      	cmp	r2, #0
    fc4a:	d104      	bne.n	fc56 <_i2c_master_interrupt_handler+0x3a>
			(module->status == STATUS_BUSY) &&
    fc4c:	3225      	adds	r2, #37	; 0x25
    fc4e:	5ca1      	ldrb	r1, [r4, r2]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    fc50:	2905      	cmp	r1, #5
    fc52:	d100      	bne.n	fc56 <_i2c_master_interrupt_handler+0x3a>
    fc54:	e0a8      	b.n	fda8 <_i2c_master_interrupt_handler+0x18c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    fc56:	8b62      	ldrh	r2, [r4, #26]
    fc58:	2a00      	cmp	r2, #0
    fc5a:	d00f      	beq.n	fc7c <_i2c_master_interrupt_handler+0x60>
    fc5c:	8ba2      	ldrh	r2, [r4, #28]
    fc5e:	2a00      	cmp	r2, #0
    fc60:	d00c      	beq.n	fc7c <_i2c_master_interrupt_handler+0x60>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    fc62:	8b6a      	ldrh	r2, [r5, #26]
    fc64:	0692      	lsls	r2, r2, #26
    fc66:	d500      	bpl.n	fc6a <_i2c_master_interrupt_handler+0x4e>
    fc68:	e083      	b.n	fd72 <_i2c_master_interrupt_handler+0x156>
    fc6a:	2b00      	cmp	r3, #0
    fc6c:	d003      	beq.n	fc76 <_i2c_master_interrupt_handler+0x5a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    fc6e:	8ba3      	ldrh	r3, [r4, #28]
    fc70:	2b01      	cmp	r3, #1
    fc72:	d100      	bne.n	fc76 <_i2c_master_interrupt_handler+0x5a>
    fc74:	e07d      	b.n	fd72 <_i2c_master_interrupt_handler+0x156>
			module->status = STATUS_ERR_PACKET_COLLISION;
    fc76:	2241      	movs	r2, #65	; 0x41
    fc78:	2325      	movs	r3, #37	; 0x25
    fc7a:	54e2      	strb	r2, [r4, r3]
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    fc7c:	8b63      	ldrh	r3, [r4, #26]
    fc7e:	2b00      	cmp	r3, #0
    fc80:	d002      	beq.n	fc88 <_i2c_master_interrupt_handler+0x6c>
    fc82:	8ba3      	ldrh	r3, [r4, #28]
    fc84:	2b00      	cmp	r3, #0
    fc86:	d01e      	beq.n	fcc6 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    fc88:	2325      	movs	r3, #37	; 0x25
    fc8a:	5ce2      	ldrb	r2, [r4, r3]
    fc8c:	2a05      	cmp	r2, #5
    fc8e:	d019      	beq.n	fcc4 <_i2c_master_interrupt_handler+0xa8>
    fc90:	5ce2      	ldrb	r2, [r4, r3]
    fc92:	2a00      	cmp	r2, #0
    fc94:	d016      	beq.n	fcc4 <_i2c_master_interrupt_handler+0xa8>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    fc96:	2203      	movs	r2, #3
    fc98:	752a      	strb	r2, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    fc9a:	2200      	movs	r2, #0
    fc9c:	8362      	strh	r2, [r4, #26]
		module->buffer_remaining = 0;
    fc9e:	83a2      	strh	r2, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    fca0:	5ce3      	ldrb	r3, [r4, r3]
    fca2:	2b41      	cmp	r3, #65	; 0x41
    fca4:	d00c      	beq.n	fcc0 <_i2c_master_interrupt_handler+0xa4>
    fca6:	7aa3      	ldrb	r3, [r4, #10]
    fca8:	2b00      	cmp	r3, #0
    fcaa:	d009      	beq.n	fcc0 <_i2c_master_interrupt_handler+0xa4>
    fcac:	6821      	ldr	r1, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    fcae:	3207      	adds	r2, #7
    fcb0:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    fcb2:	421a      	tst	r2, r3
    fcb4:	d1fc      	bne.n	fcb0 <_i2c_master_interrupt_handler+0x94>
				module->send_stop) {
			_i2c_master_wait_for_sync(module);
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    fcb6:	23e0      	movs	r3, #224	; 0xe0
    fcb8:	686a      	ldr	r2, [r5, #4]
    fcba:	02db      	lsls	r3, r3, #11
    fcbc:	4313      	orrs	r3, r2
    fcbe:	606b      	str	r3, [r5, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    fcc0:	0773      	lsls	r3, r6, #29
    fcc2:	d425      	bmi.n	fd10 <_i2c_master_interrupt_handler+0xf4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
    fcc4:	bd70      	pop	{r4, r5, r6, pc}
			(module->status == STATUS_BUSY) &&
    fcc6:	3325      	adds	r3, #37	; 0x25
    fcc8:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    fcca:	2b05      	cmp	r3, #5
    fccc:	d1dc      	bne.n	fc88 <_i2c_master_interrupt_handler+0x6c>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    fcce:	331f      	adds	r3, #31
    fcd0:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    fcd2:	2b01      	cmp	r3, #1
    fcd4:	d1d8      	bne.n	fc88 <_i2c_master_interrupt_handler+0x6c>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    fcd6:	7e2a      	ldrb	r2, [r5, #24]
    fcd8:	3301      	adds	r3, #1
    fcda:	4213      	tst	r3, r2
    fcdc:	d000      	beq.n	fce0 <_i2c_master_interrupt_handler+0xc4>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    fcde:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
    fce0:	2303      	movs	r3, #3
    fce2:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    fce4:	2300      	movs	r3, #0
		module->status        = STATUS_OK;
    fce6:	2200      	movs	r2, #0
		module->buffer_length = 0;
    fce8:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    fcea:	3325      	adds	r3, #37	; 0x25
    fcec:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    fcee:	07b3      	lsls	r3, r6, #30
    fcf0:	d504      	bpl.n	fcfc <_i2c_master_interrupt_handler+0xe0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    fcf2:	2324      	movs	r3, #36	; 0x24
    fcf4:	5ce3      	ldrb	r3, [r4, r3]
    fcf6:	2b01      	cmp	r3, #1
    fcf8:	d100      	bne.n	fcfc <_i2c_master_interrupt_handler+0xe0>
    fcfa:	e09a      	b.n	fe32 <_i2c_master_interrupt_handler+0x216>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    fcfc:	07f3      	lsls	r3, r6, #31
    fcfe:	d5c3      	bpl.n	fc88 <_i2c_master_interrupt_handler+0x6c>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    fd00:	2324      	movs	r3, #36	; 0x24
    fd02:	5ce3      	ldrb	r3, [r4, r3]
    fd04:	2b00      	cmp	r3, #0
    fd06:	d1bf      	bne.n	fc88 <_i2c_master_interrupt_handler+0x6c>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    fd08:	68e3      	ldr	r3, [r4, #12]
    fd0a:	0020      	movs	r0, r4
    fd0c:	4798      	blx	r3
    fd0e:	e7bb      	b.n	fc88 <_i2c_master_interrupt_handler+0x6c>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    fd10:	6963      	ldr	r3, [r4, #20]
    fd12:	0020      	movs	r0, r4
    fd14:	4798      	blx	r3
}
    fd16:	e7d5      	b.n	fcc4 <_i2c_master_interrupt_handler+0xa8>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    fd18:	2301      	movs	r3, #1
    fd1a:	7e2a      	ldrb	r2, [r5, #24]
    fd1c:	4213      	tst	r3, r2
    fd1e:	d018      	beq.n	fd52 <_i2c_master_interrupt_handler+0x136>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    fd20:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    fd22:	8b6a      	ldrh	r2, [r5, #26]
    fd24:	3301      	adds	r3, #1
    fd26:	4013      	ands	r3, r2
    fd28:	d15d      	bne.n	fde6 <_i2c_master_interrupt_handler+0x1ca>
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    fd2a:	8b6a      	ldrh	r2, [r5, #26]
    fd2c:	0752      	lsls	r2, r2, #29
    fd2e:	d510      	bpl.n	fd52 <_i2c_master_interrupt_handler+0x136>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    fd30:	2118      	movs	r1, #24
    fd32:	2225      	movs	r2, #37	; 0x25
    fd34:	54a1      	strb	r1, [r4, r2]
			module->buffer_remaining = 0;
    fd36:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
    fd38:	7aa3      	ldrb	r3, [r4, #10]
    fd3a:	2b00      	cmp	r3, #0
    fd3c:	d009      	beq.n	fd52 <_i2c_master_interrupt_handler+0x136>
    fd3e:	6821      	ldr	r1, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    fd40:	3a1e      	subs	r2, #30
    fd42:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    fd44:	421a      	tst	r2, r3
    fd46:	d1fc      	bne.n	fd42 <_i2c_master_interrupt_handler+0x126>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    fd48:	23c0      	movs	r3, #192	; 0xc0
    fd4a:	686a      	ldr	r2, [r5, #4]
    fd4c:	029b      	lsls	r3, r3, #10
    fd4e:	4313      	orrs	r3, r2
    fd50:	606b      	str	r3, [r5, #4]
	module->buffer_length = module->buffer_remaining;
    fd52:	8ba3      	ldrh	r3, [r4, #28]
    fd54:	b29b      	uxth	r3, r3
    fd56:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
    fd58:	2325      	movs	r3, #37	; 0x25
    fd5a:	5ce2      	ldrb	r2, [r4, r3]
    fd5c:	2a05      	cmp	r2, #5
    fd5e:	d000      	beq.n	fd62 <_i2c_master_interrupt_handler+0x146>
    fd60:	e78c      	b.n	fc7c <_i2c_master_interrupt_handler+0x60>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    fd62:	321f      	adds	r2, #31
    fd64:	5ca2      	ldrb	r2, [r4, r2]
    fd66:	2a00      	cmp	r2, #0
    fd68:	d045      	beq.n	fdf6 <_i2c_master_interrupt_handler+0x1da>
			_i2c_master_read(module);
    fd6a:	0020      	movs	r0, r4
    fd6c:	4b34      	ldr	r3, [pc, #208]	; (fe40 <_i2c_master_interrupt_handler+0x224>)
    fd6e:	4798      	blx	r3
    fd70:	e784      	b.n	fc7c <_i2c_master_interrupt_handler+0x60>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    fd72:	2324      	movs	r3, #36	; 0x24
    fd74:	5ce3      	ldrb	r3, [r4, r3]
    fd76:	2b00      	cmp	r3, #0
    fd78:	d1f7      	bne.n	fd6a <_i2c_master_interrupt_handler+0x14e>
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    fd7a:	8b6b      	ldrh	r3, [r5, #26]
    fd7c:	075b      	lsls	r3, r3, #29
    fd7e:	d436      	bmi.n	fdee <_i2c_master_interrupt_handler+0x1d2>
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    fd80:	2207      	movs	r2, #7
	uint16_t buffer_index = module->buffer_length;
    fd82:	8b61      	ldrh	r1, [r4, #26]
	buffer_index -= module->buffer_remaining;
    fd84:	8ba3      	ldrh	r3, [r4, #28]
    fd86:	1ac9      	subs	r1, r1, r3
	module->buffer_remaining--;
    fd88:	8ba3      	ldrh	r3, [r4, #28]
	buffer_index -= module->buffer_remaining;
    fd8a:	b289      	uxth	r1, r1
	module->buffer_remaining--;
    fd8c:	3b01      	subs	r3, #1
    fd8e:	b29b      	uxth	r3, r3
    fd90:	83a3      	strh	r3, [r4, #28]
    fd92:	69eb      	ldr	r3, [r5, #28]
	while (i2c_master_is_syncing(module)) {
    fd94:	421a      	tst	r2, r3
    fd96:	d1fc      	bne.n	fd92 <_i2c_master_interrupt_handler+0x176>
	i2c_module->DATA.reg = module->buffer[buffer_index];
    fd98:	6a23      	ldr	r3, [r4, #32]
    fd9a:	2228      	movs	r2, #40	; 0x28
    fd9c:	469c      	mov	ip, r3
    fd9e:	4461      	add	r1, ip
    fda0:	780b      	ldrb	r3, [r1, #0]
    fda2:	b2db      	uxtb	r3, r3
    fda4:	54ab      	strb	r3, [r5, r2]
    fda6:	e769      	b.n	fc7c <_i2c_master_interrupt_handler+0x60>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    fda8:	311f      	adds	r1, #31
    fdaa:	5c61      	ldrb	r1, [r4, r1]
    fdac:	b2c9      	uxtb	r1, r1
			(module->status == STATUS_BUSY) &&
    fdae:	2900      	cmp	r1, #0
    fdb0:	d000      	beq.n	fdb4 <_i2c_master_interrupt_handler+0x198>
    fdb2:	e750      	b.n	fc56 <_i2c_master_interrupt_handler+0x3a>
		i2c_module->INTENCLR.reg =
    fdb4:	2303      	movs	r3, #3
    fdb6:	752b      	strb	r3, [r5, #20]
		module->status        = STATUS_OK;
    fdb8:	2300      	movs	r3, #0
		module->buffer_length = 0;
    fdba:	8361      	strh	r1, [r4, #26]
		module->status        = STATUS_OK;
    fdbc:	54a3      	strb	r3, [r4, r2]
		if (module->send_stop) {
    fdbe:	7aa3      	ldrb	r3, [r4, #10]
    fdc0:	2b00      	cmp	r3, #0
    fdc2:	d030      	beq.n	fe26 <_i2c_master_interrupt_handler+0x20a>
    fdc4:	6821      	ldr	r1, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    fdc6:	3a1e      	subs	r2, #30
    fdc8:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    fdca:	421a      	tst	r2, r3
    fdcc:	d1fc      	bne.n	fdc8 <_i2c_master_interrupt_handler+0x1ac>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    fdce:	23c0      	movs	r3, #192	; 0xc0
    fdd0:	686a      	ldr	r2, [r5, #4]
    fdd2:	029b      	lsls	r3, r3, #10
    fdd4:	4313      	orrs	r3, r2
    fdd6:	606b      	str	r3, [r5, #4]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    fdd8:	07f3      	lsls	r3, r6, #31
    fdda:	d400      	bmi.n	fdde <_i2c_master_interrupt_handler+0x1c2>
    fddc:	e74e      	b.n	fc7c <_i2c_master_interrupt_handler+0x60>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    fdde:	68e3      	ldr	r3, [r4, #12]
    fde0:	0020      	movs	r0, r4
    fde2:	4798      	blx	r3
    fde4:	e74a      	b.n	fc7c <_i2c_master_interrupt_handler+0x60>
			module->status = STATUS_ERR_PACKET_COLLISION;
    fde6:	2241      	movs	r2, #65	; 0x41
    fde8:	2325      	movs	r3, #37	; 0x25
    fdea:	54e2      	strb	r2, [r4, r3]
    fdec:	e7b1      	b.n	fd52 <_i2c_master_interrupt_handler+0x136>
		module->status = STATUS_ERR_OVERFLOW;
    fdee:	221e      	movs	r2, #30
    fdf0:	2325      	movs	r3, #37	; 0x25
    fdf2:	54e2      	strb	r2, [r4, r3]
    fdf4:	e742      	b.n	fc7c <_i2c_master_interrupt_handler+0x60>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    fdf6:	6822      	ldr	r2, [r4, #0]
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    fdf8:	8b51      	ldrh	r1, [r2, #26]
    fdfa:	0749      	lsls	r1, r1, #29
    fdfc:	d416      	bmi.n	fe2c <_i2c_master_interrupt_handler+0x210>
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    fdfe:	2107      	movs	r1, #7
	uint16_t buffer_index = module->buffer_length;
    fe00:	8b60      	ldrh	r0, [r4, #26]
	buffer_index -= module->buffer_remaining;
    fe02:	8ba3      	ldrh	r3, [r4, #28]
    fe04:	1ac0      	subs	r0, r0, r3
	module->buffer_remaining--;
    fe06:	8ba3      	ldrh	r3, [r4, #28]
	buffer_index -= module->buffer_remaining;
    fe08:	b280      	uxth	r0, r0
	module->buffer_remaining--;
    fe0a:	3b01      	subs	r3, #1
    fe0c:	b29b      	uxth	r3, r3
    fe0e:	83a3      	strh	r3, [r4, #28]
    fe10:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
    fe12:	4219      	tst	r1, r3
    fe14:	d1fc      	bne.n	fe10 <_i2c_master_interrupt_handler+0x1f4>
	i2c_module->DATA.reg = module->buffer[buffer_index];
    fe16:	6a23      	ldr	r3, [r4, #32]
    fe18:	2128      	movs	r1, #40	; 0x28
    fe1a:	469c      	mov	ip, r3
    fe1c:	4460      	add	r0, ip
    fe1e:	7803      	ldrb	r3, [r0, #0]
    fe20:	b2db      	uxtb	r3, r3
    fe22:	5453      	strb	r3, [r2, r1]
    fe24:	e72a      	b.n	fc7c <_i2c_master_interrupt_handler+0x60>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    fe26:	2301      	movs	r3, #1
    fe28:	762b      	strb	r3, [r5, #24]
    fe2a:	e7d5      	b.n	fdd8 <_i2c_master_interrupt_handler+0x1bc>
		module->status = STATUS_ERR_OVERFLOW;
    fe2c:	221e      	movs	r2, #30
    fe2e:	54e2      	strb	r2, [r4, r3]
    fe30:	e724      	b.n	fc7c <_i2c_master_interrupt_handler+0x60>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    fe32:	6923      	ldr	r3, [r4, #16]
    fe34:	0020      	movs	r0, r4
    fe36:	4798      	blx	r3
    fe38:	e726      	b.n	fc88 <_i2c_master_interrupt_handler+0x6c>
    fe3a:	46c0      	nop			; (mov r8, r8)
    fe3c:	20001444 	.word	0x20001444
    fe40:	0000fba1 	.word	0x0000fba1

0000fe44 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    fe44:	4770      	bx	lr
    fe46:	46c0      	nop			; (mov r8, r8)

0000fe48 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    fe48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    fe4a:	4e0c      	ldr	r6, [pc, #48]	; (fe7c <_sercom_set_handler+0x34>)
{
    fe4c:	0005      	movs	r5, r0
	if (_handler_table_initialized == false) {
    fe4e:	7833      	ldrb	r3, [r6, #0]
{
    fe50:	000f      	movs	r7, r1
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    fe52:	4c0b      	ldr	r4, [pc, #44]	; (fe80 <_sercom_set_handler+0x38>)
	if (_handler_table_initialized == false) {
    fe54:	2b00      	cmp	r3, #0
    fe56:	d10d      	bne.n	fe74 <_sercom_set_handler+0x2c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    fe58:	4b0a      	ldr	r3, [pc, #40]	; (fe84 <_sercom_set_handler+0x3c>)
    fe5a:	2218      	movs	r2, #24
    fe5c:	6023      	str	r3, [r4, #0]
    fe5e:	6063      	str	r3, [r4, #4]
    fe60:	60a3      	str	r3, [r4, #8]
    fe62:	60e3      	str	r3, [r4, #12]
    fe64:	6123      	str	r3, [r4, #16]
    fe66:	6163      	str	r3, [r4, #20]
    fe68:	2100      	movs	r1, #0
    fe6a:	4b07      	ldr	r3, [pc, #28]	; (fe88 <_sercom_set_handler+0x40>)
    fe6c:	4807      	ldr	r0, [pc, #28]	; (fe8c <_sercom_set_handler+0x44>)
    fe6e:	4798      	blx	r3
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    fe70:	2301      	movs	r3, #1
    fe72:	7033      	strb	r3, [r6, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    fe74:	00ad      	lsls	r5, r5, #2
    fe76:	5167      	str	r7, [r4, r5]
}
    fe78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fe7a:	46c0      	nop			; (mov r8, r8)
    fe7c:	20000eb4 	.word	0x20000eb4
    fe80:	20000eb8 	.word	0x20000eb8
    fe84:	0000fe45 	.word	0x0000fe45
    fe88:	0001fdfd 	.word	0x0001fdfd
    fe8c:	20001444 	.word	0x20001444

0000fe90 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    fe90:	b500      	push	{lr}
    fe92:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    fe94:	466a      	mov	r2, sp
    fe96:	2308      	movs	r3, #8
    fe98:	7013      	strb	r3, [r2, #0]
    fe9a:	3301      	adds	r3, #1
    fe9c:	7053      	strb	r3, [r2, #1]
    fe9e:	3301      	adds	r3, #1
    fea0:	7093      	strb	r3, [r2, #2]
    fea2:	3301      	adds	r3, #1
    fea4:	70d3      	strb	r3, [r2, #3]
    fea6:	3301      	adds	r3, #1
    fea8:	7113      	strb	r3, [r2, #4]
    feaa:	3301      	adds	r3, #1
    feac:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    feae:	4b03      	ldr	r3, [pc, #12]	; (febc <_sercom_get_interrupt_vector+0x2c>)
    feb0:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    feb2:	466b      	mov	r3, sp
    feb4:	5618      	ldrsb	r0, [r3, r0]
}
    feb6:	b003      	add	sp, #12
    feb8:	bd00      	pop	{pc}
    feba:	46c0      	nop			; (mov r8, r8)
    febc:	00016115 	.word	0x00016115

0000fec0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    fec0:	b510      	push	{r4, lr}
    fec2:	4b02      	ldr	r3, [pc, #8]	; (fecc <SERCOM0_Handler+0xc>)
    fec4:	2000      	movs	r0, #0
    fec6:	681b      	ldr	r3, [r3, #0]
    fec8:	4798      	blx	r3
    feca:	bd10      	pop	{r4, pc}
    fecc:	20000eb8 	.word	0x20000eb8

0000fed0 <SERCOM1_Handler>:
    fed0:	b510      	push	{r4, lr}
    fed2:	4b02      	ldr	r3, [pc, #8]	; (fedc <SERCOM1_Handler+0xc>)
    fed4:	2001      	movs	r0, #1
    fed6:	685b      	ldr	r3, [r3, #4]
    fed8:	4798      	blx	r3
    feda:	bd10      	pop	{r4, pc}
    fedc:	20000eb8 	.word	0x20000eb8

0000fee0 <SERCOM2_Handler>:
    fee0:	b510      	push	{r4, lr}
    fee2:	4b02      	ldr	r3, [pc, #8]	; (feec <SERCOM2_Handler+0xc>)
    fee4:	2002      	movs	r0, #2
    fee6:	689b      	ldr	r3, [r3, #8]
    fee8:	4798      	blx	r3
    feea:	bd10      	pop	{r4, pc}
    feec:	20000eb8 	.word	0x20000eb8

0000fef0 <SERCOM3_Handler>:
    fef0:	b510      	push	{r4, lr}
    fef2:	4b02      	ldr	r3, [pc, #8]	; (fefc <SERCOM3_Handler+0xc>)
    fef4:	2003      	movs	r0, #3
    fef6:	68db      	ldr	r3, [r3, #12]
    fef8:	4798      	blx	r3
    fefa:	bd10      	pop	{r4, pc}
    fefc:	20000eb8 	.word	0x20000eb8

0000ff00 <SERCOM4_Handler>:
    ff00:	b510      	push	{r4, lr}
    ff02:	4b02      	ldr	r3, [pc, #8]	; (ff0c <SERCOM4_Handler+0xc>)
    ff04:	2004      	movs	r0, #4
    ff06:	691b      	ldr	r3, [r3, #16]
    ff08:	4798      	blx	r3
    ff0a:	bd10      	pop	{r4, pc}
    ff0c:	20000eb8 	.word	0x20000eb8

0000ff10 <SERCOM5_Handler>:
    ff10:	b510      	push	{r4, lr}
    ff12:	4b02      	ldr	r3, [pc, #8]	; (ff1c <SERCOM5_Handler+0xc>)
    ff14:	2005      	movs	r0, #5
    ff16:	695b      	ldr	r3, [r3, #20]
    ff18:	4798      	blx	r3
    ff1a:	bd10      	pop	{r4, pc}
    ff1c:	20000eb8 	.word	0x20000eb8

0000ff20 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    ff20:	1c93      	adds	r3, r2, #2
    ff22:	009b      	lsls	r3, r3, #2
    ff24:	18c3      	adds	r3, r0, r3
    ff26:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    ff28:	2301      	movs	r3, #1
    ff2a:	4093      	lsls	r3, r2
    ff2c:	2130      	movs	r1, #48	; 0x30
    ff2e:	001a      	movs	r2, r3
    ff30:	5c43      	ldrb	r3, [r0, r1]
    ff32:	4313      	orrs	r3, r2
    ff34:	5443      	strb	r3, [r0, r1]
}
    ff36:	4770      	bx	lr

0000ff38 <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    ff38:	b570      	push	{r4, r5, r6, lr}
    ff3a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    ff3c:	4b10      	ldr	r3, [pc, #64]	; (ff80 <usart_read_job+0x48>)
    ff3e:	000e      	movs	r6, r1
	SercomUsart *const usart_hw = &(module->hw->USART);
    ff40:	6805      	ldr	r5, [r0, #0]
    ff42:	4798      	blx	r3
	if (module->remaining_rx_buffer_length > 0) {
    ff44:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    ff46:	2b00      	cmp	r3, #0
    ff48:	d003      	beq.n	ff52 <usart_read_job+0x1a>
	cpu_irq_leave_critical();
    ff4a:	4b0e      	ldr	r3, [pc, #56]	; (ff84 <usart_read_job+0x4c>)
    ff4c:	4798      	blx	r3
		return STATUS_BUSY;
    ff4e:	2005      	movs	r0, #5
	Assert(module);
	Assert(rx_data);

	/* Call internal read buffer function with length 1 */
	return _usart_read_buffer(module, (uint8_t *)rx_data, 1);
}
    ff50:	bd70      	pop	{r4, r5, r6, pc}
	module->remaining_rx_buffer_length = length;
    ff52:	2301      	movs	r3, #1
    ff54:	85a3      	strh	r3, [r4, #44]	; 0x2c
    ff56:	4b0b      	ldr	r3, [pc, #44]	; (ff84 <usart_read_job+0x4c>)
    ff58:	4798      	blx	r3
	module->rx_status                  = STATUS_BUSY;
    ff5a:	2332      	movs	r3, #50	; 0x32
    ff5c:	2205      	movs	r2, #5
	module->rx_buffer_ptr              = rx_data;
    ff5e:	6266      	str	r6, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    ff60:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    ff62:	3b2e      	subs	r3, #46	; 0x2e
    ff64:	75ab      	strb	r3, [r5, #22]
	if(module->lin_slave_enabled) {
    ff66:	7a23      	ldrb	r3, [r4, #8]
    ff68:	2b00      	cmp	r3, #0
    ff6a:	d106      	bne.n	ff7a <usart_read_job+0x42>
	if(module->start_frame_detection_enabled) {
    ff6c:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    ff6e:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    ff70:	2b00      	cmp	r3, #0
    ff72:	d0ed      	beq.n	ff50 <usart_read_job+0x18>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    ff74:	2308      	movs	r3, #8
    ff76:	75ab      	strb	r3, [r5, #22]
    ff78:	e7ea      	b.n	ff50 <usart_read_job+0x18>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    ff7a:	2320      	movs	r3, #32
    ff7c:	75ab      	strb	r3, [r5, #22]
    ff7e:	e7f5      	b.n	ff6c <usart_read_job+0x34>
    ff80:	0000198d 	.word	0x0000198d
    ff84:	000019c9 	.word	0x000019c9

0000ff88 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    ff88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ff8a:	0005      	movs	r5, r0
    ff8c:	000e      	movs	r6, r1
    ff8e:	0014      	movs	r4, r2
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    ff90:	2017      	movs	r0, #23
	if (length == 0) {
    ff92:	2a00      	cmp	r2, #0
    ff94:	d100      	bne.n	ff98 <usart_write_buffer_job+0x10>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    ff96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    ff98:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    ff9a:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    ff9c:	2b00      	cmp	r3, #0
    ff9e:	d0fa      	beq.n	ff96 <usart_write_buffer_job+0xe>
	cpu_irq_enter_critical();
    ffa0:	4b0a      	ldr	r3, [pc, #40]	; (ffcc <usart_write_buffer_job+0x44>)
	SercomUsart *const usart_hw = &(module->hw->USART);
    ffa2:	682f      	ldr	r7, [r5, #0]
    ffa4:	4798      	blx	r3
	if (module->remaining_tx_buffer_length > 0) {
    ffa6:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    ffa8:	2b00      	cmp	r3, #0
    ffaa:	d003      	beq.n	ffb4 <usart_write_buffer_job+0x2c>
	cpu_irq_leave_critical();
    ffac:	4b08      	ldr	r3, [pc, #32]	; (ffd0 <usart_write_buffer_job+0x48>)
    ffae:	4798      	blx	r3
		return STATUS_BUSY;
    ffb0:	2005      	movs	r0, #5
    ffb2:	e7f0      	b.n	ff96 <usart_write_buffer_job+0xe>
    ffb4:	4b06      	ldr	r3, [pc, #24]	; (ffd0 <usart_write_buffer_job+0x48>)
	module->remaining_tx_buffer_length = length;
    ffb6:	85ec      	strh	r4, [r5, #46]	; 0x2e
    ffb8:	4798      	blx	r3
	module->tx_status                  = STATUS_BUSY;
    ffba:	2333      	movs	r3, #51	; 0x33
    ffbc:	2205      	movs	r2, #5
	module->tx_buffer_ptr              = tx_data;
    ffbe:	62ae      	str	r6, [r5, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    ffc0:	54ea      	strb	r2, [r5, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    ffc2:	3b32      	subs	r3, #50	; 0x32
    ffc4:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    ffc6:	2000      	movs	r0, #0
    ffc8:	e7e5      	b.n	ff96 <usart_write_buffer_job+0xe>
    ffca:	46c0      	nop			; (mov r8, r8)
    ffcc:	0000198d 	.word	0x0000198d
    ffd0:	000019c9 	.word	0x000019c9

0000ffd4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    ffd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    ffd6:	4b62      	ldr	r3, [pc, #392]	; (10160 <_usart_interrupt_handler+0x18c>)
    ffd8:	0080      	lsls	r0, r0, #2
    ffda:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    ffdc:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    ffde:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    ffe0:	2b00      	cmp	r3, #0
    ffe2:	d1fc      	bne.n	ffde <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    ffe4:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    ffe6:	7da6      	ldrb	r6, [r4, #22]
	callback_status = module->callback_reg_mask &
    ffe8:	2231      	movs	r2, #49	; 0x31
    ffea:	401e      	ands	r6, r3
    ffec:	2330      	movs	r3, #48	; 0x30
    ffee:	5caf      	ldrb	r7, [r5, r2]
    fff0:	5ceb      	ldrb	r3, [r5, r3]
    fff2:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    fff4:	2301      	movs	r3, #1
    fff6:	4233      	tst	r3, r6
    fff8:	d019      	beq.n	1002e <_usart_interrupt_handler+0x5a>
		if (module->remaining_tx_buffer_length) {
    fffa:	8dea      	ldrh	r2, [r5, #46]	; 0x2e
    fffc:	2a00      	cmp	r2, #0
    fffe:	d04d      	beq.n	1009c <_usart_interrupt_handler+0xc8>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   10000:	6aaa      	ldr	r2, [r5, #40]	; 0x28
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   10002:	1c51      	adds	r1, r2, #1
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   10004:	7813      	ldrb	r3, [r2, #0]
			(module->tx_buffer_ptr)++;
   10006:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   10008:	7969      	ldrb	r1, [r5, #5]
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   1000a:	b2db      	uxtb	r3, r3
			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   1000c:	2901      	cmp	r1, #1
   1000e:	d100      	bne.n	10012 <_usart_interrupt_handler+0x3e>
   10010:	e075      	b.n	100fe <_usart_interrupt_handler+0x12a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   10012:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   10014:	05db      	lsls	r3, r3, #23
   10016:	0ddb      	lsrs	r3, r3, #23
   10018:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   1001a:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
   1001c:	3b01      	subs	r3, #1
   1001e:	b29b      	uxth	r3, r3
   10020:	85eb      	strh	r3, [r5, #46]	; 0x2e
   10022:	2b00      	cmp	r3, #0
   10024:	d103      	bne.n	1002e <_usart_interrupt_handler+0x5a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   10026:	3301      	adds	r3, #1
   10028:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   1002a:	3301      	adds	r3, #1
   1002c:	75a3      	strb	r3, [r4, #22]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   1002e:	2302      	movs	r3, #2
   10030:	4233      	tst	r3, r6
   10032:	d005      	beq.n	10040 <_usart_interrupt_handler+0x6c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
		module->tx_status = STATUS_OK;
   10034:	2200      	movs	r2, #0
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   10036:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
   10038:	3331      	adds	r3, #49	; 0x31
   1003a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   1003c:	07fb      	lsls	r3, r7, #31
   1003e:	d43b      	bmi.n	100b8 <_usart_interrupt_handler+0xe4>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   10040:	2304      	movs	r3, #4
   10042:	4233      	tst	r3, r6
   10044:	d012      	beq.n	1006c <_usart_interrupt_handler+0x98>

		if (module->remaining_rx_buffer_length) {
   10046:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
   10048:	2a00      	cmp	r2, #0
   1004a:	d025      	beq.n	10098 <_usart_interrupt_handler+0xc4>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   1004c:	8b63      	ldrh	r3, [r4, #26]
   1004e:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   10050:	071a      	lsls	r2, r3, #28
   10052:	d535      	bpl.n	100c0 <_usart_interrupt_handler+0xec>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   10054:	2237      	movs	r2, #55	; 0x37
   10056:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   10058:	d035      	beq.n	100c6 <_usart_interrupt_handler+0xf2>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   1005a:	2202      	movs	r2, #2
   1005c:	421a      	tst	r2, r3
   1005e:	d054      	beq.n	1010a <_usart_interrupt_handler+0x136>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   10060:	211a      	movs	r1, #26
   10062:	2332      	movs	r3, #50	; 0x32
   10064:	54e9      	strb	r1, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   10066:	8362      	strh	r2, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
   10068:	077b      	lsls	r3, r7, #29
   1006a:	d459      	bmi.n	10120 <_usart_interrupt_handler+0x14c>
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   1006c:	2310      	movs	r3, #16
   1006e:	4233      	tst	r3, r6
   10070:	d003      	beq.n	1007a <_usart_interrupt_handler+0xa6>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   10072:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   10074:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   10076:	423b      	tst	r3, r7
   10078:	d116      	bne.n	100a8 <_usart_interrupt_handler+0xd4>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   1007a:	2320      	movs	r3, #32
   1007c:	4233      	tst	r3, r6
   1007e:	d003      	beq.n	10088 <_usart_interrupt_handler+0xb4>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   10080:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   10082:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   10084:	073b      	lsls	r3, r7, #28
   10086:	d413      	bmi.n	100b0 <_usart_interrupt_handler+0xdc>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   10088:	2308      	movs	r3, #8
   1008a:	4233      	tst	r3, r6
   1008c:	d003      	beq.n	10096 <_usart_interrupt_handler+0xc2>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   1008e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   10090:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   10092:	06bb      	lsls	r3, r7, #26
   10094:	d404      	bmi.n	100a0 <_usart_interrupt_handler+0xcc>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
   10096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   10098:	7523      	strb	r3, [r4, #20]
   1009a:	e7e7      	b.n	1006c <_usart_interrupt_handler+0x98>
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   1009c:	7523      	strb	r3, [r4, #20]
   1009e:	e7c6      	b.n	1002e <_usart_interrupt_handler+0x5a>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   100a0:	6a2b      	ldr	r3, [r5, #32]
   100a2:	0028      	movs	r0, r5
   100a4:	4798      	blx	r3
}
   100a6:	e7f6      	b.n	10096 <_usart_interrupt_handler+0xc2>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   100a8:	0028      	movs	r0, r5
   100aa:	69eb      	ldr	r3, [r5, #28]
   100ac:	4798      	blx	r3
   100ae:	e7e4      	b.n	1007a <_usart_interrupt_handler+0xa6>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   100b0:	0028      	movs	r0, r5
   100b2:	69ab      	ldr	r3, [r5, #24]
   100b4:	4798      	blx	r3
   100b6:	e7e7      	b.n	10088 <_usart_interrupt_handler+0xb4>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   100b8:	0028      	movs	r0, r5
   100ba:	68eb      	ldr	r3, [r5, #12]
   100bc:	4798      	blx	r3
   100be:	e7bf      	b.n	10040 <_usart_interrupt_handler+0x6c>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   100c0:	223f      	movs	r2, #63	; 0x3f
   100c2:	4013      	ands	r3, r2
			if (error_code) {
   100c4:	d1c9      	bne.n	1005a <_usart_interrupt_handler+0x86>
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   100c6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
				*(module->rx_buffer_ptr) = received_data;
   100c8:	6a69      	ldr	r1, [r5, #36]	; 0x24
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   100ca:	05db      	lsls	r3, r3, #23
   100cc:	0ddb      	lsrs	r3, r3, #23
				*(module->rx_buffer_ptr) = received_data;
   100ce:	b2da      	uxtb	r2, r3
   100d0:	700a      	strb	r2, [r1, #0]
				module->rx_buffer_ptr += 1;
   100d2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   100d4:	1c51      	adds	r1, r2, #1
   100d6:	6269      	str	r1, [r5, #36]	; 0x24
				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   100d8:	7969      	ldrb	r1, [r5, #5]
   100da:	2901      	cmp	r1, #1
   100dc:	d029      	beq.n	10132 <_usart_interrupt_handler+0x15e>
				if(--(module->remaining_rx_buffer_length) == 0) {
   100de:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   100e0:	3b01      	subs	r3, #1
   100e2:	b29b      	uxth	r3, r3
   100e4:	85ab      	strh	r3, [r5, #44]	; 0x2c
   100e6:	2b00      	cmp	r3, #0
   100e8:	d1c0      	bne.n	1006c <_usart_interrupt_handler+0x98>
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   100ea:	2204      	movs	r2, #4
   100ec:	7522      	strb	r2, [r4, #20]
					module->rx_status = STATUS_OK;
   100ee:	322e      	adds	r2, #46	; 0x2e
   100f0:	54ab      	strb	r3, [r5, r2]
					if (callback_status
   100f2:	07bb      	lsls	r3, r7, #30
   100f4:	d5ba      	bpl.n	1006c <_usart_interrupt_handler+0x98>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   100f6:	0028      	movs	r0, r5
   100f8:	692b      	ldr	r3, [r5, #16]
   100fa:	4798      	blx	r3
   100fc:	e7b6      	b.n	1006c <_usart_interrupt_handler+0x98>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   100fe:	7851      	ldrb	r1, [r2, #1]
				(module->tx_buffer_ptr)++;
   10100:	3202      	adds	r2, #2
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   10102:	0209      	lsls	r1, r1, #8
   10104:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
   10106:	62aa      	str	r2, [r5, #40]	; 0x28
   10108:	e784      	b.n	10014 <_usart_interrupt_handler+0x40>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   1010a:	2204      	movs	r2, #4
   1010c:	421a      	tst	r2, r3
   1010e:	d10b      	bne.n	10128 <_usart_interrupt_handler+0x154>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   10110:	2201      	movs	r2, #1
   10112:	421a      	tst	r2, r3
   10114:	d013      	beq.n	1013e <_usart_interrupt_handler+0x16a>
					module->rx_status = STATUS_ERR_BAD_DATA;
   10116:	2113      	movs	r1, #19
   10118:	2332      	movs	r3, #50	; 0x32
   1011a:	54e9      	strb	r1, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   1011c:	8362      	strh	r2, [r4, #26]
   1011e:	e7a3      	b.n	10068 <_usart_interrupt_handler+0x94>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   10120:	0028      	movs	r0, r5
   10122:	696b      	ldr	r3, [r5, #20]
   10124:	4798      	blx	r3
   10126:	e7a1      	b.n	1006c <_usart_interrupt_handler+0x98>
					module->rx_status = STATUS_ERR_OVERFLOW;
   10128:	211e      	movs	r1, #30
   1012a:	2332      	movs	r3, #50	; 0x32
   1012c:	54e9      	strb	r1, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   1012e:	8362      	strh	r2, [r4, #26]
   10130:	e79a      	b.n	10068 <_usart_interrupt_handler+0x94>
					*(module->rx_buffer_ptr) = (received_data >> 8);
   10132:	0a1b      	lsrs	r3, r3, #8
   10134:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
   10136:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   10138:	3301      	adds	r3, #1
   1013a:	626b      	str	r3, [r5, #36]	; 0x24
   1013c:	e7cf      	b.n	100de <_usart_interrupt_handler+0x10a>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   1013e:	2210      	movs	r2, #16
   10140:	421a      	tst	r2, r3
   10142:	d004      	beq.n	1014e <_usart_interrupt_handler+0x17a>
					module->rx_status = STATUS_ERR_PROTOCOL;
   10144:	2142      	movs	r1, #66	; 0x42
   10146:	2332      	movs	r3, #50	; 0x32
   10148:	54e9      	strb	r1, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   1014a:	8362      	strh	r2, [r4, #26]
   1014c:	e78c      	b.n	10068 <_usart_interrupt_handler+0x94>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   1014e:	2220      	movs	r2, #32
   10150:	421a      	tst	r2, r3
   10152:	d100      	bne.n	10156 <_usart_interrupt_handler+0x182>
   10154:	e788      	b.n	10068 <_usart_interrupt_handler+0x94>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   10156:	2141      	movs	r1, #65	; 0x41
   10158:	2332      	movs	r3, #50	; 0x32
   1015a:	54e9      	strb	r1, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   1015c:	8362      	strh	r2, [r4, #26]
   1015e:	e783      	b.n	10068 <_usart_interrupt_handler+0x94>
   10160:	20001444 	.word	0x20001444

00010164 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   10164:	1c93      	adds	r3, r2, #2
   10166:	009b      	lsls	r3, r3, #2
   10168:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
   1016a:	2a02      	cmp	r2, #2
   1016c:	d009      	beq.n	10182 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
   1016e:	2a03      	cmp	r2, #3
   10170:	d00c      	beq.n	1018c <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
   10172:	2301      	movs	r3, #1
   10174:	4093      	lsls	r3, r2
   10176:	001a      	movs	r2, r3
   10178:	7e03      	ldrb	r3, [r0, #24]
   1017a:	4313      	orrs	r3, r2
   1017c:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
   1017e:	2000      	movs	r0, #0
   10180:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
   10182:	2210      	movs	r2, #16
   10184:	7e03      	ldrb	r3, [r0, #24]
   10186:	4313      	orrs	r3, r2
   10188:	7603      	strb	r3, [r0, #24]
   1018a:	e7f8      	b.n	1017e <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
   1018c:	2220      	movs	r2, #32
   1018e:	7e03      	ldrb	r3, [r0, #24]
   10190:	4313      	orrs	r3, r2
   10192:	7603      	strb	r3, [r0, #24]
   10194:	e7f3      	b.n	1017e <tc_register_callback+0x1a>
   10196:	46c0      	nop			; (mov r8, r8)

00010198 <TC0_Handler>:
		{ \
			_tc_interrupt_handler(m); \
		}

#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
   10198:	b570      	push	{r4, r5, r6, lr}
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   1019a:	2601      	movs	r6, #1
	struct tc_module *module
   1019c:	4b15      	ldr	r3, [pc, #84]	; (101f4 <TC0_Handler+0x5c>)
   1019e:	681d      	ldr	r5, [r3, #0]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   101a0:	682b      	ldr	r3, [r5, #0]
   101a2:	7e2a      	ldrb	r2, [r5, #24]
   101a4:	7e6c      	ldrb	r4, [r5, #25]
   101a6:	7a9b      	ldrb	r3, [r3, #10]
   101a8:	4014      	ands	r4, r2
   101aa:	401c      	ands	r4, r3
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   101ac:	4226      	tst	r6, r4
   101ae:	d11a      	bne.n	101e6 <TC0_Handler+0x4e>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   101b0:	2602      	movs	r6, #2
   101b2:	4226      	tst	r6, r4
   101b4:	d111      	bne.n	101da <TC0_Handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   101b6:	2610      	movs	r6, #16
   101b8:	4226      	tst	r6, r4
   101ba:	d108      	bne.n	101ce <TC0_Handler+0x36>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   101bc:	2620      	movs	r6, #32
   101be:	4226      	tst	r6, r4
   101c0:	d004      	beq.n	101cc <TC0_Handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   101c2:	696b      	ldr	r3, [r5, #20]
   101c4:	0028      	movs	r0, r5
   101c6:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   101c8:	682b      	ldr	r3, [r5, #0]
   101ca:	729e      	strb	r6, [r3, #10]
	_TC_INTERRUPT_HANDLER(0,0)
   101cc:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   101ce:	692b      	ldr	r3, [r5, #16]
   101d0:	0028      	movs	r0, r5
   101d2:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   101d4:	682b      	ldr	r3, [r5, #0]
   101d6:	729e      	strb	r6, [r3, #10]
   101d8:	e7f0      	b.n	101bc <TC0_Handler+0x24>
		(module->callback[TC_CALLBACK_ERROR])(module);
   101da:	68eb      	ldr	r3, [r5, #12]
   101dc:	0028      	movs	r0, r5
   101de:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   101e0:	682b      	ldr	r3, [r5, #0]
   101e2:	729e      	strb	r6, [r3, #10]
   101e4:	e7e7      	b.n	101b6 <TC0_Handler+0x1e>
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   101e6:	68ab      	ldr	r3, [r5, #8]
   101e8:	0028      	movs	r0, r5
   101ea:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   101ec:	682b      	ldr	r3, [r5, #0]
   101ee:	729e      	strb	r6, [r3, #10]
   101f0:	e7de      	b.n	101b0 <TC0_Handler+0x18>
   101f2:	46c0      	nop			; (mov r8, r8)
   101f4:	2000145c 	.word	0x2000145c

000101f8 <TC1_Handler>:
	_TC_INTERRUPT_HANDLER(1,1)
   101f8:	b570      	push	{r4, r5, r6, lr}
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   101fa:	2601      	movs	r6, #1
	struct tc_module *module
   101fc:	4b15      	ldr	r3, [pc, #84]	; (10254 <TC1_Handler+0x5c>)
   101fe:	685d      	ldr	r5, [r3, #4]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   10200:	682b      	ldr	r3, [r5, #0]
   10202:	7e2a      	ldrb	r2, [r5, #24]
   10204:	7e6c      	ldrb	r4, [r5, #25]
   10206:	7a9b      	ldrb	r3, [r3, #10]
   10208:	4014      	ands	r4, r2
   1020a:	401c      	ands	r4, r3
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   1020c:	4226      	tst	r6, r4
   1020e:	d11a      	bne.n	10246 <TC1_Handler+0x4e>
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   10210:	2602      	movs	r6, #2
   10212:	4226      	tst	r6, r4
   10214:	d111      	bne.n	1023a <TC1_Handler+0x42>
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   10216:	2610      	movs	r6, #16
   10218:	4226      	tst	r6, r4
   1021a:	d108      	bne.n	1022e <TC1_Handler+0x36>
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   1021c:	2620      	movs	r6, #32
   1021e:	4226      	tst	r6, r4
   10220:	d004      	beq.n	1022c <TC1_Handler+0x34>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   10222:	696b      	ldr	r3, [r5, #20]
   10224:	0028      	movs	r0, r5
   10226:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   10228:	682b      	ldr	r3, [r5, #0]
   1022a:	729e      	strb	r6, [r3, #10]
	_TC_INTERRUPT_HANDLER(1,1)
   1022c:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   1022e:	692b      	ldr	r3, [r5, #16]
   10230:	0028      	movs	r0, r5
   10232:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   10234:	682b      	ldr	r3, [r5, #0]
   10236:	729e      	strb	r6, [r3, #10]
   10238:	e7f0      	b.n	1021c <TC1_Handler+0x24>
		(module->callback[TC_CALLBACK_ERROR])(module);
   1023a:	68eb      	ldr	r3, [r5, #12]
   1023c:	0028      	movs	r0, r5
   1023e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   10240:	682b      	ldr	r3, [r5, #0]
   10242:	729e      	strb	r6, [r3, #10]
   10244:	e7e7      	b.n	10216 <TC1_Handler+0x1e>
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   10246:	68ab      	ldr	r3, [r5, #8]
   10248:	0028      	movs	r0, r5
   1024a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   1024c:	682b      	ldr	r3, [r5, #0]
   1024e:	729e      	strb	r6, [r3, #10]
   10250:	e7de      	b.n	10210 <TC1_Handler+0x18>
   10252:	46c0      	nop			; (mov r8, r8)
   10254:	2000145c 	.word	0x2000145c

00010258 <TC4_Handler>:
	_TC_INTERRUPT_HANDLER(4,2)
   10258:	b570      	push	{r4, r5, r6, lr}
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   1025a:	2601      	movs	r6, #1
	struct tc_module *module
   1025c:	4b15      	ldr	r3, [pc, #84]	; (102b4 <TC4_Handler+0x5c>)
   1025e:	689d      	ldr	r5, [r3, #8]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   10260:	682b      	ldr	r3, [r5, #0]
   10262:	7e2a      	ldrb	r2, [r5, #24]
   10264:	7e6c      	ldrb	r4, [r5, #25]
   10266:	7a9b      	ldrb	r3, [r3, #10]
   10268:	4014      	ands	r4, r2
   1026a:	401c      	ands	r4, r3
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   1026c:	4226      	tst	r6, r4
   1026e:	d11a      	bne.n	102a6 <TC4_Handler+0x4e>
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   10270:	2602      	movs	r6, #2
   10272:	4226      	tst	r6, r4
   10274:	d111      	bne.n	1029a <TC4_Handler+0x42>
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   10276:	2610      	movs	r6, #16
   10278:	4226      	tst	r6, r4
   1027a:	d108      	bne.n	1028e <TC4_Handler+0x36>
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   1027c:	2620      	movs	r6, #32
   1027e:	4226      	tst	r6, r4
   10280:	d004      	beq.n	1028c <TC4_Handler+0x34>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   10282:	696b      	ldr	r3, [r5, #20]
   10284:	0028      	movs	r0, r5
   10286:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   10288:	682b      	ldr	r3, [r5, #0]
   1028a:	729e      	strb	r6, [r3, #10]
	_TC_INTERRUPT_HANDLER(4,2)
   1028c:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   1028e:	692b      	ldr	r3, [r5, #16]
   10290:	0028      	movs	r0, r5
   10292:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   10294:	682b      	ldr	r3, [r5, #0]
   10296:	729e      	strb	r6, [r3, #10]
   10298:	e7f0      	b.n	1027c <TC4_Handler+0x24>
		(module->callback[TC_CALLBACK_ERROR])(module);
   1029a:	68eb      	ldr	r3, [r5, #12]
   1029c:	0028      	movs	r0, r5
   1029e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   102a0:	682b      	ldr	r3, [r5, #0]
   102a2:	729e      	strb	r6, [r3, #10]
   102a4:	e7e7      	b.n	10276 <TC4_Handler+0x1e>
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   102a6:	68ab      	ldr	r3, [r5, #8]
   102a8:	0028      	movs	r0, r5
   102aa:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   102ac:	682b      	ldr	r3, [r5, #0]
   102ae:	729e      	strb	r6, [r3, #10]
   102b0:	e7de      	b.n	10270 <TC4_Handler+0x18>
   102b2:	46c0      	nop			; (mov r8, r8)
   102b4:	2000145c 	.word	0x2000145c

000102b8 <_tc_get_inst_index>:
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
   102b8:	4b0e      	ldr	r3, [pc, #56]	; (102f4 <_tc_get_inst_index+0x3c>)
{
   102ba:	0001      	movs	r1, r0
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
   102bc:	0018      	movs	r0, r3
{
   102be:	b570      	push	{r4, r5, r6, lr}
   102c0:	b084      	sub	sp, #16
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
   102c2:	aa01      	add	r2, sp, #4
   102c4:	c870      	ldmia	r0!, {r4, r5, r6}
   102c6:	c270      	stmia	r2!, {r4, r5, r6}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
   102c8:	9a01      	ldr	r2, [sp, #4]
   102ca:	4291      	cmp	r1, r2
   102cc:	d008      	beq.n	102e0 <_tc_get_inst_index+0x28>
   102ce:	685a      	ldr	r2, [r3, #4]
   102d0:	4291      	cmp	r1, r2
   102d2:	d008      	beq.n	102e6 <_tc_get_inst_index+0x2e>
   102d4:	689b      	ldr	r3, [r3, #8]
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   102d6:	2000      	movs	r0, #0
		if (hw == tc_modules[i]) {
   102d8:	428b      	cmp	r3, r1
   102da:	d007      	beq.n	102ec <_tc_get_inst_index+0x34>
}
   102dc:	b004      	add	sp, #16
   102de:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
   102e0:	2000      	movs	r0, #0
			return i;
   102e2:	b2c0      	uxtb	r0, r0
   102e4:	e7fa      	b.n	102dc <_tc_get_inst_index+0x24>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
   102e6:	2001      	movs	r0, #1
			return i;
   102e8:	b2c0      	uxtb	r0, r0
   102ea:	e7f7      	b.n	102dc <_tc_get_inst_index+0x24>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
   102ec:	3002      	adds	r0, #2
			return i;
   102ee:	b2c0      	uxtb	r0, r0
   102f0:	e7f4      	b.n	102dc <_tc_get_inst_index+0x24>
   102f2:	46c0      	nop			; (mov r8, r8)
   102f4:	00025af0 	.word	0x00025af0

000102f8 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
   102f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   102fa:	4645      	mov	r5, r8
   102fc:	46de      	mov	lr, fp
   102fe:	4657      	mov	r7, sl
   10300:	464e      	mov	r6, r9
   10302:	b5e0      	push	{r5, r6, r7, lr}
   10304:	b08b      	sub	sp, #44	; 0x2c
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
   10306:	ab04      	add	r3, sp, #16
   10308:	469b      	mov	fp, r3
   1030a:	4bc8      	ldr	r3, [pc, #800]	; (1062c <tc_init+0x334>)
{
   1030c:	000f      	movs	r7, r1
   1030e:	4690      	mov	r8, r2
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
   10310:	0019      	movs	r1, r3
   10312:	465a      	mov	r2, fp
{
   10314:	0004      	movs	r4, r0
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
   10316:	c961      	ldmia	r1!, {r0, r5, r6}
   10318:	c261      	stmia	r2!, {r0, r5, r6}
		if (hw == tc_modules[i]) {
   1031a:	9a04      	ldr	r2, [sp, #16]
   1031c:	42ba      	cmp	r2, r7
   1031e:	d100      	bne.n	10322 <tc_init+0x2a>
   10320:	e133      	b.n	1058a <tc_init+0x292>
   10322:	685a      	ldr	r2, [r3, #4]
   10324:	42ba      	cmp	r2, r7
   10326:	d100      	bne.n	1032a <tc_init+0x32>
   10328:	e134      	b.n	10594 <tc_init+0x29c>
   1032a:	2200      	movs	r2, #0
   1032c:	4691      	mov	r9, r2
	return 0;
   1032e:	4692      	mov	sl, r2
		if (hw == tc_modules[i]) {
   10330:	689a      	ldr	r2, [r3, #8]
   10332:	4297      	cmp	r7, r2
   10334:	d100      	bne.n	10338 <tc_init+0x40>
   10336:	e12f      	b.n	10598 <tc_init+0x2a0>
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC1,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3};
#else
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC4_GCLK_ID};
   10338:	221b      	movs	r2, #27
   1033a:	ae02      	add	r6, sp, #8
   1033c:	7032      	strb	r2, [r6, #0]
   1033e:	7072      	strb	r2, [r6, #1]
   10340:	3202      	adds	r2, #2
   10342:	70b2      	strb	r2, [r6, #2]
	/* Array of PM APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
   10344:	465a      	mov	r2, fp
   10346:	330c      	adds	r3, #12
   10348:	cb23      	ldmia	r3!, {r0, r1, r5}
   1034a:	c223      	stmia	r2!, {r0, r1, r5}
   1034c:	cb23      	ldmia	r3!, {r0, r1, r5}
   1034e:	c223      	stmia	r2!, {r0, r1, r5}
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
   10350:	2300      	movs	r3, #0
   10352:	60a3      	str	r3, [r4, #8]
   10354:	60e3      	str	r3, [r4, #12]
   10356:	6123      	str	r3, [r4, #16]
   10358:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
   1035a:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
   1035c:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
   1035e:	464b      	mov	r3, r9
   10360:	4ab3      	ldr	r2, [pc, #716]	; (10630 <tc_init+0x338>)
   10362:	009b      	lsls	r3, r3, #2
   10364:	509c      	str	r4, [r3, r2]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   10366:	4642      	mov	r2, r8
   10368:	2334      	movs	r3, #52	; 0x34
	module_inst->hw = hw;
   1036a:	6027      	str	r7, [r4, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   1036c:	5cd3      	ldrb	r3, [r2, r3]
   1036e:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
   10370:	78d3      	ldrb	r3, [r2, #3]
   10372:	2b08      	cmp	r3, #8
   10374:	d00c      	beq.n	10390 <tc_init+0x98>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
   10376:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
   10378:	2301      	movs	r3, #1
   1037a:	683a      	ldr	r2, [r7, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
   1037c:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
   1037e:	4213      	tst	r3, r2
   10380:	d00b      	beq.n	1039a <tc_init+0xa2>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
   10382:	b00b      	add	sp, #44	; 0x2c
   10384:	bc3c      	pop	{r2, r3, r4, r5}
   10386:	4690      	mov	r8, r2
   10388:	4699      	mov	r9, r3
   1038a:	46a2      	mov	sl, r4
   1038c:	46ab      	mov	fp, r5
   1038e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
   10390:	4652      	mov	r2, sl
		return STATUS_ERR_INVALID_ARG;
   10392:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
   10394:	07d2      	lsls	r2, r2, #31
   10396:	d4f4      	bmi.n	10382 <tc_init+0x8a>
   10398:	e7ed      	b.n	10376 <tc_init+0x7e>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
   1039a:	2202      	movs	r2, #2
   1039c:	7af9      	ldrb	r1, [r7, #11]
		return STATUS_ERR_DENIED;
   1039e:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
   103a0:	420a      	tst	r2, r1
   103a2:	d1ee      	bne.n	10382 <tc_init+0x8a>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
   103a4:	6839      	ldr	r1, [r7, #0]
   103a6:	400a      	ands	r2, r1
   103a8:	d1eb      	bne.n	10382 <tc_init+0x8a>
	if (config->pwm_channel[0].enabled) {
   103aa:	4641      	mov	r1, r8
   103ac:	7c09      	ldrb	r1, [r1, #16]
   103ae:	2900      	cmp	r1, #0
   103b0:	d000      	beq.n	103b4 <tc_init+0xbc>
   103b2:	e0f6      	b.n	105a2 <tc_init+0x2aa>
	if (config->pwm_channel[1].enabled) {
   103b4:	4643      	mov	r3, r8
   103b6:	7f1b      	ldrb	r3, [r3, #28]
   103b8:	2b00      	cmp	r3, #0
   103ba:	d000      	beq.n	103be <tc_init+0xc6>
   103bc:	e0fd      	b.n	105ba <tc_init+0x2c2>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
   103be:	464b      	mov	r3, r9
   103c0:	4659      	mov	r1, fp
   103c2:	005a      	lsls	r2, r3, #1
   103c4:	1c53      	adds	r3, r2, #1
   103c6:	009b      	lsls	r3, r3, #2
   103c8:	58c9      	ldr	r1, [r1, r3]
   103ca:	464b      	mov	r3, r9
	switch (bus) {
   103cc:	4658      	mov	r0, fp
   103ce:	00db      	lsls	r3, r3, #3
   103d0:	5cc3      	ldrb	r3, [r0, r3]
   103d2:	2b04      	cmp	r3, #4
   103d4:	d807      	bhi.n	103e6 <tc_init+0xee>
   103d6:	4897      	ldr	r0, [pc, #604]	; (10634 <tc_init+0x33c>)
   103d8:	009b      	lsls	r3, r3, #2
   103da:	58c3      	ldr	r3, [r0, r3]
   103dc:	469f      	mov	pc, r3
			MCLK->APBDMASK.reg |= mask;
   103de:	4896      	ldr	r0, [pc, #600]	; (10638 <tc_init+0x340>)
   103e0:	6a03      	ldr	r3, [r0, #32]
   103e2:	4319      	orrs	r1, r3
   103e4:	6201      	str	r1, [r0, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
   103e6:	4643      	mov	r3, r8
   103e8:	78db      	ldrb	r3, [r3, #3]
   103ea:	2b08      	cmp	r3, #8
   103ec:	d100      	bne.n	103f0 <tc_init+0xf8>
   103ee:	e0f6      	b.n	105de <tc_init+0x2e6>
	gclk_chan_config.source_generator = config->clock_source;
   103f0:	4643      	mov	r3, r8
   103f2:	781b      	ldrb	r3, [r3, #0]
   103f4:	a901      	add	r1, sp, #4
   103f6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
   103f8:	464b      	mov	r3, r9
   103fa:	5cf5      	ldrb	r5, [r6, r3]
   103fc:	4b8f      	ldr	r3, [pc, #572]	; (1063c <tc_init+0x344>)
   103fe:	0028      	movs	r0, r5
   10400:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
   10402:	4b8f      	ldr	r3, [pc, #572]	; (10640 <tc_init+0x348>)
   10404:	0028      	movs	r0, r5
   10406:	4798      	blx	r3
			(uint32_t)config->counter_size |
   10408:	4643      	mov	r3, r8
   1040a:	4642      	mov	r2, r8
   1040c:	78db      	ldrb	r3, [r3, #3]
   1040e:	79d2      	ldrb	r2, [r2, #7]
   10410:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
   10412:	4642      	mov	r2, r8
   10414:	8892      	ldrh	r2, [r2, #4]
	ctrla_tmp =
   10416:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
   10418:	4642      	mov	r2, r8
   1041a:	7a52      	ldrb	r2, [r2, #9]
   1041c:	2a00      	cmp	r2, #0
   1041e:	d002      	beq.n	10426 <tc_init+0x12e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
   10420:	2280      	movs	r2, #128	; 0x80
   10422:	0252      	lsls	r2, r2, #9
   10424:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
   10426:	4642      	mov	r2, r8
   10428:	7a92      	ldrb	r2, [r2, #10]
   1042a:	2a00      	cmp	r2, #0
   1042c:	d002      	beq.n	10434 <tc_init+0x13c>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
   1042e:	2280      	movs	r2, #128	; 0x80
   10430:	0292      	lsls	r2, r2, #10
   10432:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
   10434:	4642      	mov	r2, r8
   10436:	7ad2      	ldrb	r2, [r2, #11]
   10438:	2a00      	cmp	r2, #0
   1043a:	d002      	beq.n	10442 <tc_init+0x14a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
   1043c:	2280      	movs	r2, #128	; 0x80
   1043e:	0352      	lsls	r2, r2, #13
   10440:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
   10442:	4642      	mov	r2, r8
   10444:	7b12      	ldrb	r2, [r2, #12]
   10446:	2a00      	cmp	r2, #0
   10448:	d002      	beq.n	10450 <tc_init+0x158>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
   1044a:	2280      	movs	r2, #128	; 0x80
   1044c:	0392      	lsls	r2, r2, #14
   1044e:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
   10450:	4642      	mov	r2, r8
   10452:	7851      	ldrb	r1, [r2, #1]
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
   10454:	7892      	ldrb	r2, [r2, #2]
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
   10456:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
   10458:	01d2      	lsls	r2, r2, #7
   1045a:	4311      	orrs	r1, r2
   1045c:	6822      	ldr	r2, [r4, #0]
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
   1045e:	4319      	orrs	r1, r3
	return (tc_module->SYNCBUSY.reg);
   10460:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
   10462:	2b00      	cmp	r3, #0
   10464:	d1fc      	bne.n	10460 <tc_init+0x168>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
   10466:	6039      	str	r1, [r7, #0]
   10468:	6822      	ldr	r2, [r4, #0]
   1046a:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
   1046c:	2b00      	cmp	r3, #0
   1046e:	d1fc      	bne.n	1046a <tc_init+0x172>
	hw->COUNT8.WAVE.reg = config->wave_generation;
   10470:	4643      	mov	r3, r8
   10472:	799b      	ldrb	r3, [r3, #6]
   10474:	733b      	strb	r3, [r7, #12]
	if (config->oneshot) {
   10476:	4643      	mov	r3, r8
   10478:	7b5b      	ldrb	r3, [r3, #13]
   1047a:	2b00      	cmp	r3, #0
   1047c:	d000      	beq.n	10480 <tc_init+0x188>
   1047e:	e08d      	b.n	1059c <tc_init+0x2a4>
   10480:	2101      	movs	r1, #1
	uint8_t ctrlbset_tmp = 0;
   10482:	2200      	movs	r2, #0
	if (config->count_direction) {
   10484:	4643      	mov	r3, r8
   10486:	7b9b      	ldrb	r3, [r3, #14]
   10488:	2b00      	cmp	r3, #0
   1048a:	d100      	bne.n	1048e <tc_init+0x196>
   1048c:	0011      	movs	r1, r2
   1048e:	6822      	ldr	r2, [r4, #0]
   10490:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
   10492:	2b00      	cmp	r3, #0
   10494:	d1fc      	bne.n	10490 <tc_init+0x198>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
   10496:	33ff      	adds	r3, #255	; 0xff
   10498:	713b      	strb	r3, [r7, #4]
	if (ctrlbset_tmp) {
   1049a:	2900      	cmp	r1, #0
   1049c:	d004      	beq.n	104a8 <tc_init+0x1b0>
   1049e:	6822      	ldr	r2, [r4, #0]
   104a0:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
   104a2:	2b00      	cmp	r3, #0
   104a4:	d1fc      	bne.n	104a0 <tc_init+0x1a8>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
   104a6:	7179      	strb	r1, [r7, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
   104a8:	4643      	mov	r3, r8
   104aa:	7a1b      	ldrb	r3, [r3, #8]
   104ac:	737b      	strb	r3, [r7, #13]
   104ae:	6822      	ldr	r2, [r4, #0]
   104b0:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
   104b2:	2b00      	cmp	r3, #0
   104b4:	d1fc      	bne.n	104b0 <tc_init+0x1b8>
	switch (module_inst->counter_size) {
   104b6:	7923      	ldrb	r3, [r4, #4]
   104b8:	2b04      	cmp	r3, #4
   104ba:	d01b      	beq.n	104f4 <tc_init+0x1fc>
   104bc:	2b08      	cmp	r3, #8
   104be:	d03a      	beq.n	10536 <tc_init+0x23e>
	return STATUS_ERR_INVALID_ARG;
   104c0:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
   104c2:	2b00      	cmp	r3, #0
   104c4:	d000      	beq.n	104c8 <tc_init+0x1d0>
   104c6:	e75c      	b.n	10382 <tc_init+0x8a>
   104c8:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
   104ca:	2b00      	cmp	r3, #0
   104cc:	d1fc      	bne.n	104c8 <tc_init+0x1d0>
				= config->counter_16_bit.value;
   104ce:	4643      	mov	r3, r8
   104d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   104d2:	82bb      	strh	r3, [r7, #20]
   104d4:	6822      	ldr	r2, [r4, #0]
   104d6:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
   104d8:	2b00      	cmp	r3, #0
   104da:	d1fc      	bne.n	104d6 <tc_init+0x1de>
					config->counter_16_bit.compare_capture_channel[0];
   104dc:	4643      	mov	r3, r8
   104de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
   104e0:	83bb      	strh	r3, [r7, #28]
   104e2:	6822      	ldr	r2, [r4, #0]
   104e4:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
   104e6:	2b00      	cmp	r3, #0
   104e8:	d1fc      	bne.n	104e4 <tc_init+0x1ec>
					config->counter_16_bit.compare_capture_channel[1];
   104ea:	4643      	mov	r3, r8
   104ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
			return STATUS_OK;
   104ee:	2000      	movs	r0, #0
			hw->COUNT16.CC[1].reg =
   104f0:	83fb      	strh	r3, [r7, #30]
			return STATUS_OK;
   104f2:	e746      	b.n	10382 <tc_init+0x8a>
   104f4:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
   104f6:	2b00      	cmp	r3, #0
   104f8:	d1fc      	bne.n	104f4 <tc_init+0x1fc>
					config->counter_8_bit.value;
   104fa:	4642      	mov	r2, r8
   104fc:	3328      	adds	r3, #40	; 0x28
   104fe:	5cd3      	ldrb	r3, [r2, r3]
			hw->COUNT8.COUNT.reg =
   10500:	753b      	strb	r3, [r7, #20]
   10502:	6822      	ldr	r2, [r4, #0]
   10504:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
   10506:	2b00      	cmp	r3, #0
   10508:	d1fc      	bne.n	10504 <tc_init+0x20c>
					config->counter_8_bit.period;
   1050a:	4642      	mov	r2, r8
   1050c:	3329      	adds	r3, #41	; 0x29
   1050e:	5cd3      	ldrb	r3, [r2, r3]
			hw->COUNT8.PER.reg =
   10510:	76fb      	strb	r3, [r7, #27]
   10512:	6822      	ldr	r2, [r4, #0]
   10514:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
   10516:	2b00      	cmp	r3, #0
   10518:	d1fc      	bne.n	10514 <tc_init+0x21c>
					config->counter_8_bit.compare_capture_channel[0];
   1051a:	4642      	mov	r2, r8
   1051c:	332a      	adds	r3, #42	; 0x2a
   1051e:	5cd3      	ldrb	r3, [r2, r3]
			hw->COUNT8.CC[0].reg =
   10520:	773b      	strb	r3, [r7, #28]
   10522:	6822      	ldr	r2, [r4, #0]
   10524:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
   10526:	2b00      	cmp	r3, #0
   10528:	d1fc      	bne.n	10524 <tc_init+0x22c>
					config->counter_8_bit.compare_capture_channel[1];
   1052a:	4642      	mov	r2, r8
   1052c:	332b      	adds	r3, #43	; 0x2b
   1052e:	5cd3      	ldrb	r3, [r2, r3]
			return STATUS_OK;
   10530:	2000      	movs	r0, #0
			hw->COUNT8.CC[1].reg =
   10532:	777b      	strb	r3, [r7, #29]
			return STATUS_OK;
   10534:	e725      	b.n	10382 <tc_init+0x8a>
   10536:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
   10538:	2b00      	cmp	r3, #0
   1053a:	d1fc      	bne.n	10536 <tc_init+0x23e>
				= config->counter_32_bit.value;
   1053c:	4643      	mov	r3, r8
   1053e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10540:	617b      	str	r3, [r7, #20]
   10542:	6822      	ldr	r2, [r4, #0]
   10544:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
   10546:	2b00      	cmp	r3, #0
   10548:	d1fc      	bne.n	10544 <tc_init+0x24c>
			hw->COUNT32.CC[0].reg =
   1054a:	4643      	mov	r3, r8
   1054c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1054e:	61fb      	str	r3, [r7, #28]
   10550:	6822      	ldr	r2, [r4, #0]
   10552:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
   10554:	2b00      	cmp	r3, #0
   10556:	d1fc      	bne.n	10552 <tc_init+0x25a>
					config->counter_32_bit.compare_capture_channel[1];
   10558:	4643      	mov	r3, r8
   1055a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			return STATUS_OK;
   1055c:	2000      	movs	r0, #0
			hw->COUNT32.CC[1].reg =
   1055e:	623b      	str	r3, [r7, #32]
			return STATUS_OK;
   10560:	e70f      	b.n	10382 <tc_init+0x8a>
			MCLK->APBCMASK.reg |= mask;
   10562:	4835      	ldr	r0, [pc, #212]	; (10638 <tc_init+0x340>)
   10564:	69c3      	ldr	r3, [r0, #28]
   10566:	4319      	orrs	r1, r3
   10568:	61c1      	str	r1, [r0, #28]
   1056a:	e73c      	b.n	103e6 <tc_init+0xee>
			MCLK->APBBMASK.reg |= mask;
   1056c:	4832      	ldr	r0, [pc, #200]	; (10638 <tc_init+0x340>)
   1056e:	6983      	ldr	r3, [r0, #24]
   10570:	4319      	orrs	r1, r3
   10572:	6181      	str	r1, [r0, #24]
   10574:	e737      	b.n	103e6 <tc_init+0xee>
			MCLK->APBAMASK.reg |= mask;
   10576:	4830      	ldr	r0, [pc, #192]	; (10638 <tc_init+0x340>)
   10578:	6943      	ldr	r3, [r0, #20]
   1057a:	4319      	orrs	r1, r3
   1057c:	6141      	str	r1, [r0, #20]
   1057e:	e732      	b.n	103e6 <tc_init+0xee>
			break;
		case SYSTEM_CLOCK_APB_APBE:
			MCLK->APBEMASK.reg |= mask;
   10580:	4b2d      	ldr	r3, [pc, #180]	; (10638 <tc_init+0x340>)
   10582:	6a58      	ldr	r0, [r3, #36]	; 0x24
   10584:	4301      	orrs	r1, r0
   10586:	6259      	str	r1, [r3, #36]	; 0x24
   10588:	e72d      	b.n	103e6 <tc_init+0xee>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
   1058a:	2200      	movs	r2, #0
			return i;
   1058c:	b2d1      	uxtb	r1, r2
   1058e:	468a      	mov	sl, r1
   10590:	4691      	mov	r9, r2
   10592:	e6d1      	b.n	10338 <tc_init+0x40>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
   10594:	2201      	movs	r2, #1
   10596:	e7f9      	b.n	1058c <tc_init+0x294>
   10598:	2202      	movs	r2, #2
   1059a:	e7f7      	b.n	1058c <tc_init+0x294>
   1059c:	2105      	movs	r1, #5
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
   1059e:	2204      	movs	r2, #4
   105a0:	e770      	b.n	10484 <tc_init+0x18c>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   105a2:	a903      	add	r1, sp, #12
	config->powersave    = false;
   105a4:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
   105a6:	4642      	mov	r2, r8
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   105a8:	708b      	strb	r3, [r1, #2]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   105aa:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
   105ac:	4643      	mov	r3, r8
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
   105ae:	7e12      	ldrb	r2, [r2, #24]
		system_pinmux_pin_set_config(
   105b0:	7d18      	ldrb	r0, [r3, #20]
   105b2:	4b24      	ldr	r3, [pc, #144]	; (10644 <tc_init+0x34c>)
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
   105b4:	700a      	strb	r2, [r1, #0]
		system_pinmux_pin_set_config(
   105b6:	4798      	blx	r3
   105b8:	e6fc      	b.n	103b4 <tc_init+0xbc>
	config->powersave    = false;
   105ba:	2200      	movs	r2, #0
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   105bc:	a903      	add	r1, sp, #12
	config->powersave    = false;
   105be:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
   105c0:	2024      	movs	r0, #36	; 0x24
   105c2:	4642      	mov	r2, r8
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   105c4:	2301      	movs	r3, #1
   105c6:	1812      	adds	r2, r2, r0
   105c8:	7812      	ldrb	r2, [r2, #0]
   105ca:	708b      	strb	r3, [r1, #2]
   105cc:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   105ce:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
   105d0:	2220      	movs	r2, #32
   105d2:	4643      	mov	r3, r8
   105d4:	189b      	adds	r3, r3, r2
   105d6:	7818      	ldrb	r0, [r3, #0]
   105d8:	4b1a      	ldr	r3, [pc, #104]	; (10644 <tc_init+0x34c>)
   105da:	4798      	blx	r3
   105dc:	e6ef      	b.n	103be <tc_init+0xc6>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
   105de:	4653      	mov	r3, sl
   105e0:	2b02      	cmp	r3, #2
   105e2:	d100      	bne.n	105e6 <tc_init+0x2ee>
   105e4:	e704      	b.n	103f0 <tc_init+0xf8>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
   105e6:	4659      	mov	r1, fp
   105e8:	1cd3      	adds	r3, r2, #3
   105ea:	3202      	adds	r2, #2
   105ec:	0092      	lsls	r2, r2, #2
	switch (bus) {
   105ee:	5c8a      	ldrb	r2, [r1, r2]
   105f0:	009b      	lsls	r3, r3, #2
   105f2:	58cb      	ldr	r3, [r1, r3]
   105f4:	2a04      	cmp	r2, #4
   105f6:	d900      	bls.n	105fa <tc_init+0x302>
   105f8:	e6fa      	b.n	103f0 <tc_init+0xf8>
   105fa:	4913      	ldr	r1, [pc, #76]	; (10648 <tc_init+0x350>)
   105fc:	0092      	lsls	r2, r2, #2
   105fe:	588a      	ldr	r2, [r1, r2]
   10600:	4697      	mov	pc, r2
			MCLK->APBEMASK.reg |= mask;
   10602:	4a0d      	ldr	r2, [pc, #52]	; (10638 <tc_init+0x340>)
   10604:	6a51      	ldr	r1, [r2, #36]	; 0x24
   10606:	430b      	orrs	r3, r1
   10608:	6253      	str	r3, [r2, #36]	; 0x24
   1060a:	e6f1      	b.n	103f0 <tc_init+0xf8>
			MCLK->APBDMASK.reg |= mask;
   1060c:	490a      	ldr	r1, [pc, #40]	; (10638 <tc_init+0x340>)
   1060e:	6a0a      	ldr	r2, [r1, #32]
   10610:	4313      	orrs	r3, r2
   10612:	620b      	str	r3, [r1, #32]
   10614:	e6ec      	b.n	103f0 <tc_init+0xf8>
			MCLK->APBCMASK.reg |= mask;
   10616:	4908      	ldr	r1, [pc, #32]	; (10638 <tc_init+0x340>)
   10618:	69ca      	ldr	r2, [r1, #28]
   1061a:	4313      	orrs	r3, r2
   1061c:	61cb      	str	r3, [r1, #28]
   1061e:	e6e7      	b.n	103f0 <tc_init+0xf8>
			MCLK->APBBMASK.reg |= mask;
   10620:	4905      	ldr	r1, [pc, #20]	; (10638 <tc_init+0x340>)
   10622:	698a      	ldr	r2, [r1, #24]
   10624:	4313      	orrs	r3, r2
   10626:	618b      	str	r3, [r1, #24]
   10628:	e6e2      	b.n	103f0 <tc_init+0xf8>
   1062a:	46c0      	nop			; (mov r8, r8)
   1062c:	00025af0 	.word	0x00025af0
   10630:	2000145c 	.word	0x2000145c
   10634:	00025ac8 	.word	0x00025ac8
   10638:	40000400 	.word	0x40000400
   1063c:	000168f5 	.word	0x000168f5
   10640:	00016935 	.word	0x00016935
   10644:	000169f1 	.word	0x000169f1
   10648:	00025adc 	.word	0x00025adc
			MCLK->APBAMASK.reg |= mask;
   1064c:	4902      	ldr	r1, [pc, #8]	; (10658 <tc_init+0x360>)
   1064e:	694a      	ldr	r2, [r1, #20]
   10650:	4313      	orrs	r3, r2
   10652:	614b      	str	r3, [r1, #20]
   10654:	e6cc      	b.n	103f0 <tc_init+0xf8>
   10656:	46c0      	nop			; (mov r8, r8)
   10658:	40000400 	.word	0x40000400

0001065c <tc_set_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance*/
	Tc *const tc_module = module_inst->hw;
   1065c:	6802      	ldr	r2, [r0, #0]
   1065e:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
   10660:	2b00      	cmp	r3, #0
   10662:	d1fc      	bne.n	1065e <tc_set_count_value+0x2>
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
   10664:	7903      	ldrb	r3, [r0, #4]
   10666:	2b04      	cmp	r3, #4
   10668:	d00c      	beq.n	10684 <tc_set_count_value+0x28>
   1066a:	2b08      	cmp	r3, #8
   1066c:	d007      	beq.n	1067e <tc_set_count_value+0x22>
		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
			return STATUS_OK;

		default:
			return STATUS_ERR_INVALID_ARG;
   1066e:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
   10670:	2b00      	cmp	r3, #0
   10672:	d000      	beq.n	10676 <tc_set_count_value+0x1a>
	}
}
   10674:	4770      	bx	lr
			tc_module->COUNT16.COUNT.reg = (uint16_t)count;
   10676:	b289      	uxth	r1, r1
   10678:	8291      	strh	r1, [r2, #20]
			return STATUS_OK;
   1067a:	2000      	movs	r0, #0
   1067c:	e7fa      	b.n	10674 <tc_set_count_value+0x18>
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
   1067e:	6151      	str	r1, [r2, #20]
			return STATUS_OK;
   10680:	2000      	movs	r0, #0
   10682:	e7f7      	b.n	10674 <tc_set_count_value+0x18>
			tc_module->COUNT8.COUNT.reg  = (uint8_t)count;
   10684:	b2c9      	uxtb	r1, r1
   10686:	7511      	strb	r1, [r2, #20]
			return STATUS_OK;
   10688:	2000      	movs	r0, #0
   1068a:	e7f3      	b.n	10674 <tc_set_count_value+0x18>

0001068c <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
   1068c:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
   1068e:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
   10690:	2b00      	cmp	r3, #0
   10692:	d1fc      	bne.n	1068e <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
   10694:	7113      	strb	r3, [r2, #4]
   10696:	6801      	ldr	r1, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
   10698:	690b      	ldr	r3, [r1, #16]

	while (tc_is_syncing(module_inst)) {
   1069a:	2b00      	cmp	r3, #0
   1069c:	d1fc      	bne.n	10698 <tc_get_count_value+0xc>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
   1069e:	3380      	adds	r3, #128	; 0x80
   106a0:	7153      	strb	r3, [r2, #5]
#if (SAMC20) || (SAMC21) || (SAML21) || (SAML22) || (SAMR30)
	/* wait for the CMD bits in CTRLBSET to be cleared, meaning the CMD has been executed */
	while(tc_module->CTRLBSET.reg & TC_CTRLBSET_CMD_READSYNC);	
   106a2:	7953      	ldrb	r3, [r2, #5]
   106a4:	b25b      	sxtb	r3, r3
   106a6:	2b00      	cmp	r3, #0
   106a8:	dbfb      	blt.n	106a2 <tc_get_count_value+0x16>

	/* Read synchronization */
	tc_sync_read_count(module_inst);
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
   106aa:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
   106ac:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
   106ae:	2b00      	cmp	r3, #0
   106b0:	d1fc      	bne.n	106ac <tc_get_count_value+0x20>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
   106b2:	7903      	ldrb	r3, [r0, #4]
   106b4:	2b04      	cmp	r3, #4
   106b6:	d00a      	beq.n	106ce <tc_get_count_value+0x42>
   106b8:	2b08      	cmp	r3, #8
   106ba:	d006      	beq.n	106ca <tc_get_count_value+0x3e>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
   106bc:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
   106be:	2b00      	cmp	r3, #0
   106c0:	d000      	beq.n	106c4 <tc_get_count_value+0x38>
}
   106c2:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
   106c4:	8a90      	ldrh	r0, [r2, #20]
   106c6:	b280      	uxth	r0, r0
   106c8:	e7fb      	b.n	106c2 <tc_get_count_value+0x36>
			return tc_module->COUNT32.COUNT.reg;
   106ca:	6950      	ldr	r0, [r2, #20]
   106cc:	e7f9      	b.n	106c2 <tc_get_count_value+0x36>
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
   106ce:	7d10      	ldrb	r0, [r2, #20]
   106d0:	b2c0      	uxtb	r0, r0
   106d2:	e7f6      	b.n	106c2 <tc_get_count_value+0x36>

000106d4 <cal_getGroupPoints>:
#include <calibration.h>

uint8_t ind_buf, groupPoints, currentGroup;

uint8_t cal_getGroupPoints(void){
	return groupPoints;
   106d4:	4b01      	ldr	r3, [pc, #4]	; (106dc <cal_getGroupPoints+0x8>)
   106d6:	7818      	ldrb	r0, [r3, #0]
	
}
   106d8:	4770      	bx	lr
   106da:	46c0      	nop			; (mov r8, r8)
   106dc:	2000146a 	.word	0x2000146a

000106e0 <cal_getCurrentGroup>:

uint8_t cal_getCurrentGroup(void){
	return currentGroup;
   106e0:	4b01      	ldr	r3, [pc, #4]	; (106e8 <cal_getCurrentGroup+0x8>)
   106e2:	7818      	ldrb	r0, [r3, #0]
}
   106e4:	4770      	bx	lr
   106e6:	46c0      	nop			; (mov r8, r8)
   106e8:	20001468 	.word	0x20001468

000106ec <cal_resetGroup>:



void cal_resetGroup(void){
	
	ind_buf = 0;
   106ec:	2300      	movs	r3, #0
   106ee:	4a05      	ldr	r2, [pc, #20]	; (10704 <cal_resetGroup+0x18>)
   106f0:	7013      	strb	r3, [r2, #0]
	groupPoints = 0;
   106f2:	4a05      	ldr	r2, [pc, #20]	; (10708 <cal_resetGroup+0x1c>)
   106f4:	7013      	strb	r3, [r2, #0]
	nGroups = currentGroup-1;
   106f6:	4b05      	ldr	r3, [pc, #20]	; (1070c <cal_resetGroup+0x20>)
   106f8:	4a05      	ldr	r2, [pc, #20]	; (10710 <cal_resetGroup+0x24>)
   106fa:	781b      	ldrb	r3, [r3, #0]
   106fc:	3b01      	subs	r3, #1
   106fe:	6013      	str	r3, [r2, #0]
}
   10700:	4770      	bx	lr
   10702:	46c0      	nop			; (mov r8, r8)
   10704:	20001469 	.word	0x20001469
   10708:	2000146a 	.word	0x2000146a
   1070c:	20001468 	.word	0x20001468
   10710:	20003924 	.word	0x20003924

00010714 <cal_removeGroup>:
			XYZ[ind1][k] = XYZ[ind2][k];
		}
	}
}

uint32_t cal_removeGroup(bool *logRemove, uint32_t groupsStart){
   10714:	b5f0      	push	{r4, r5, r6, r7, lr}
   10716:	4645      	mov	r5, r8
   10718:	46de      	mov	lr, fp
   1071a:	4657      	mov	r7, sl
   1071c:	464e      	mov	r6, r9
   1071e:	b5e0      	push	{r5, r6, r7, lr}
   10720:	4680      	mov	r8, r0
   10722:	b083      	sub	sp, #12
	uint32_t g;
	uint32_t groupsEnd;
	
	groupsEnd = groupsStart;
	for (g=groupsStart;g>0;g--){
   10724:	2900      	cmp	r1, #0
   10726:	d061      	beq.n	107ec <cal_removeGroup+0xd8>
   10728:	4b32      	ldr	r3, [pc, #200]	; (107f4 <cal_removeGroup+0xe0>)
   1072a:	2590      	movs	r5, #144	; 0x90
   1072c:	18c8      	adds	r0, r1, r3
   1072e:	4b32      	ldr	r3, [pc, #200]	; (107f8 <cal_removeGroup+0xe4>)
   10730:	00ed      	lsls	r5, r5, #3
   10732:	469b      	mov	fp, r3
   10734:	4b31      	ldr	r3, [pc, #196]	; (107fc <cal_removeGroup+0xe8>)
   10736:	2790      	movs	r7, #144	; 0x90
   10738:	469a      	mov	sl, r3
   1073a:	4b31      	ldr	r3, [pc, #196]	; (10800 <cal_removeGroup+0xec>)
   1073c:	2690      	movs	r6, #144	; 0x90
   1073e:	4699      	mov	r9, r3
   10740:	9301      	str	r3, [sp, #4]
   10742:	4b30      	ldr	r3, [pc, #192]	; (10804 <cal_removeGroup+0xf0>)
   10744:	444d      	add	r5, r9
   10746:	001c      	movs	r4, r3
   10748:	2390      	movs	r3, #144	; 0x90
   1074a:	00db      	lsls	r3, r3, #3
   1074c:	4699      	mov	r9, r3
   1074e:	468c      	mov	ip, r1
   10750:	004a      	lsls	r2, r1, #1
   10752:	1852      	adds	r2, r2, r1
   10754:	00ff      	lsls	r7, r7, #3
   10756:	00f6      	lsls	r6, r6, #3
   10758:	444c      	add	r4, r9
   1075a:	0080      	lsls	r0, r0, #2
   1075c:	0112      	lsls	r2, r2, #4
   1075e:	445f      	add	r7, fp
   10760:	4456      	add	r6, sl
   10762:	9400      	str	r4, [sp, #0]
		if(logRemove[g]){
   10764:	4643      	mov	r3, r8
   10766:	5c5b      	ldrb	r3, [r3, r1]
   10768:	3a30      	subs	r2, #48	; 0x30
   1076a:	2b00      	cmp	r3, #0
   1076c:	d032      	beq.n	107d4 <cal_removeGroup+0xc0>
	for (ind1=indStart;ind1<(NBUFF-GROUP_SIZE);ind1++){
   1076e:	285f      	cmp	r0, #95	; 0x5f
   10770:	d82c      	bhi.n	107cc <cal_removeGroup+0xb8>
   10772:	465b      	mov	r3, fp
   10774:	189b      	adds	r3, r3, r2
			XYZ[ind1][k] = XYZ[ind2][k];
   10776:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   10778:	601c      	str	r4, [r3, #0]
   1077a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
   1077c:	605c      	str	r4, [r3, #4]
   1077e:	6b9c      	ldr	r4, [r3, #56]	; 0x38
   10780:	609c      	str	r4, [r3, #8]
   10782:	330c      	adds	r3, #12
	for (ind1=indStart;ind1<(NBUFF-GROUP_SIZE);ind1++){
   10784:	429f      	cmp	r7, r3
   10786:	d1f6      	bne.n	10776 <cal_removeGroup+0x62>
   10788:	4653      	mov	r3, sl
   1078a:	189b      	adds	r3, r3, r2
			XYZ[ind1][k] = XYZ[ind2][k];
   1078c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   1078e:	601c      	str	r4, [r3, #0]
   10790:	6b5c      	ldr	r4, [r3, #52]	; 0x34
   10792:	605c      	str	r4, [r3, #4]
   10794:	6b9c      	ldr	r4, [r3, #56]	; 0x38
   10796:	609c      	str	r4, [r3, #8]
   10798:	330c      	adds	r3, #12
	for (ind1=indStart;ind1<(NBUFF-GROUP_SIZE);ind1++){
   1079a:	42b3      	cmp	r3, r6
   1079c:	d1f6      	bne.n	1078c <cal_removeGroup+0x78>
   1079e:	9b01      	ldr	r3, [sp, #4]
   107a0:	189b      	adds	r3, r3, r2
			XYZ[ind1][k] = XYZ[ind2][k];
   107a2:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   107a4:	601c      	str	r4, [r3, #0]
   107a6:	6b5c      	ldr	r4, [r3, #52]	; 0x34
   107a8:	605c      	str	r4, [r3, #4]
   107aa:	6b9c      	ldr	r4, [r3, #56]	; 0x38
   107ac:	609c      	str	r4, [r3, #8]
   107ae:	330c      	adds	r3, #12
	for (ind1=indStart;ind1<(NBUFF-GROUP_SIZE);ind1++){
   107b0:	429d      	cmp	r5, r3
   107b2:	d1f6      	bne.n	107a2 <cal_removeGroup+0x8e>
   107b4:	4b13      	ldr	r3, [pc, #76]	; (10804 <cal_removeGroup+0xf0>)
   107b6:	189b      	adds	r3, r3, r2
			XYZ[ind1][k] = XYZ[ind2][k];
   107b8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   107ba:	601c      	str	r4, [r3, #0]
   107bc:	6b5c      	ldr	r4, [r3, #52]	; 0x34
   107be:	605c      	str	r4, [r3, #4]
   107c0:	6b9c      	ldr	r4, [r3, #56]	; 0x38
   107c2:	609c      	str	r4, [r3, #8]
	for (ind1=indStart;ind1<(NBUFF-GROUP_SIZE);ind1++){
   107c4:	9c00      	ldr	r4, [sp, #0]
   107c6:	330c      	adds	r3, #12
   107c8:	42a3      	cmp	r3, r4
   107ca:	d1f5      	bne.n	107b8 <cal_removeGroup+0xa4>
			removeGroup(a1Raw, g);
			removeGroup(a2Raw, g);
			removeGroup(m1Raw, g);
			removeGroup(m2Raw, g);			
			groupsEnd--;
   107cc:	2301      	movs	r3, #1
   107ce:	425b      	negs	r3, r3
   107d0:	4699      	mov	r9, r3
   107d2:	44cc      	add	ip, r9
	for (g=groupsStart;g>0;g--){
   107d4:	3901      	subs	r1, #1
   107d6:	3804      	subs	r0, #4
   107d8:	2900      	cmp	r1, #0
   107da:	d1c3      	bne.n	10764 <cal_removeGroup+0x50>
	}
	
	return groupsEnd;
	
	
}
   107dc:	4660      	mov	r0, ip
   107de:	b003      	add	sp, #12
   107e0:	bc3c      	pop	{r2, r3, r4, r5}
   107e2:	4690      	mov	r8, r2
   107e4:	4699      	mov	r9, r3
   107e6:	46a2      	mov	sl, r4
   107e8:	46ab      	mov	fp, r5
   107ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	groupsEnd = groupsStart;
   107ec:	2300      	movs	r3, #0
   107ee:	469c      	mov	ip, r3
	return groupsEnd;
   107f0:	e7f4      	b.n	107dc <cal_removeGroup+0xc8>
   107f2:	46c0      	nop			; (mov r8, r8)
   107f4:	3fffffff 	.word	0x3fffffff
   107f8:	20004040 	.word	0x20004040
   107fc:	200022c8 	.word	0x200022c8
   10800:	20003470 	.word	0x20003470
   10804:	20001c88 	.word	0x20001c88

00010808 <cal_findBadGroup>:

void cal_findBadGroup(float errArr1[], float errArr2[], uint32_t *badGroup, float *badGroupDelta){
   10808:	b5f0      	push	{r4, r5, r6, r7, lr}
   1080a:	46de      	mov	lr, fp
   1080c:	464e      	mov	r6, r9
   1080e:	4645      	mov	r5, r8
   10810:	4657      	mov	r7, sl
   10812:	b5e0      	push	{r5, r6, r7, lr}
   10814:	469b      	mov	fp, r3
	//  Assumes index 0 is baseline
	float tempWorst;
	float dTemp1, dTemp2;	
	uint32_t grp;
	
	for (grp=1;grp<=cal_report.groupsAll;grp++){
   10816:	4b1c      	ldr	r3, [pc, #112]	; (10888 <cal_findBadGroup+0x80>)
void cal_findBadGroup(float errArr1[], float errArr2[], uint32_t *badGroup, float *badGroupDelta){
   10818:	b083      	sub	sp, #12
	for (grp=1;grp<=cal_report.groupsAll;grp++){
   1081a:	68db      	ldr	r3, [r3, #12]
void cal_findBadGroup(float errArr1[], float errArr2[], uint32_t *badGroup, float *badGroupDelta){
   1081c:	4680      	mov	r8, r0
   1081e:	4689      	mov	r9, r1
   10820:	9201      	str	r2, [sp, #4]
	for (grp=1;grp<=cal_report.groupsAll;grp++){
   10822:	9300      	str	r3, [sp, #0]
   10824:	2b00      	cmp	r3, #0
   10826:	d027      	beq.n	10878 <cal_findBadGroup+0x70>
   10828:	4b18      	ldr	r3, [pc, #96]	; (1088c <cal_findBadGroup+0x84>)
   1082a:	2404      	movs	r4, #4
   1082c:	2601      	movs	r6, #1
   1082e:	469a      	mov	sl, r3
		dTemp1 = errArr1[0]-errArr1[grp];
   10830:	4643      	mov	r3, r8
   10832:	5919      	ldr	r1, [r3, r4]
   10834:	6818      	ldr	r0, [r3, #0]
   10836:	47d0      	blx	sl
		dTemp2 = errArr2[0]-errArr2[grp];
   10838:	464b      	mov	r3, r9
		dTemp1 = errArr1[0]-errArr1[grp];
   1083a:	1c07      	adds	r7, r0, #0
		dTemp2 = errArr2[0]-errArr2[grp];
   1083c:	5919      	ldr	r1, [r3, r4]
   1083e:	6818      	ldr	r0, [r3, #0]
   10840:	47d0      	blx	sl
		if (dTemp1>dTemp2){
   10842:	4b13      	ldr	r3, [pc, #76]	; (10890 <cal_findBadGroup+0x88>)
		dTemp2 = errArr2[0]-errArr2[grp];
   10844:	1c05      	adds	r5, r0, #0
		if (dTemp1>dTemp2){
   10846:	1c01      	adds	r1, r0, #0
   10848:	1c38      	adds	r0, r7, #0
   1084a:	4798      	blx	r3
   1084c:	2800      	cmp	r0, #0
   1084e:	d000      	beq.n	10852 <cal_findBadGroup+0x4a>
			tempWorst = dTemp1;
   10850:	1c3d      	adds	r5, r7, #0
		}else{
			tempWorst = dTemp2;
		}
		if (tempWorst>*badGroupDelta){
   10852:	465b      	mov	r3, fp
   10854:	1c28      	adds	r0, r5, #0
   10856:	6819      	ldr	r1, [r3, #0]
   10858:	4b0d      	ldr	r3, [pc, #52]	; (10890 <cal_findBadGroup+0x88>)
   1085a:	4798      	blx	r3
   1085c:	2800      	cmp	r0, #0
   1085e:	d006      	beq.n	1086e <cal_findBadGroup+0x66>
			*badGroupDelta = tempWorst;
   10860:	465b      	mov	r3, fp
   10862:	601d      	str	r5, [r3, #0]
			*badGroup = grp;
   10864:	9b01      	ldr	r3, [sp, #4]
   10866:	601e      	str	r6, [r3, #0]
   10868:	4b07      	ldr	r3, [pc, #28]	; (10888 <cal_findBadGroup+0x80>)
   1086a:	68db      	ldr	r3, [r3, #12]
   1086c:	9300      	str	r3, [sp, #0]
	for (grp=1;grp<=cal_report.groupsAll;grp++){
   1086e:	9b00      	ldr	r3, [sp, #0]
   10870:	3601      	adds	r6, #1
   10872:	3404      	adds	r4, #4
   10874:	429e      	cmp	r6, r3
   10876:	d9db      	bls.n	10830 <cal_findBadGroup+0x28>
		}

	}


}
   10878:	b003      	add	sp, #12
   1087a:	bc3c      	pop	{r2, r3, r4, r5}
   1087c:	4690      	mov	r8, r2
   1087e:	4699      	mov	r9, r3
   10880:	46a2      	mov	sl, r4
   10882:	46ab      	mov	fp, r5
   10884:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10886:	46c0      	nop			; (mov r8, r8)
   10888:	20004b4c 	.word	0x20004b4c
   1088c:	0001db79 	.word	0x0001db79
   10890:	0001d0d1 	.word	0x0001d0d1

00010894 <cal_init>:

void cal_init(void){
	uint32_t k;
	
	
	nGroups = 0;
   10894:	2300      	movs	r3, #0
	currentGroup = 1;
   10896:	2101      	movs	r1, #1
	nGroups = 0;
   10898:	4a14      	ldr	r2, [pc, #80]	; (108ec <cal_init+0x58>)
void cal_init(void){
   1089a:	b570      	push	{r4, r5, r6, lr}
	nGroups = 0;
   1089c:	6013      	str	r3, [r2, #0]
	currentGroup = 1;
   1089e:	4a14      	ldr	r2, [pc, #80]	; (108f0 <cal_init+0x5c>)
   108a0:	25c8      	movs	r5, #200	; 0xc8
   108a2:	7011      	strb	r1, [r2, #0]
	nPoints = 0;
   108a4:	4a13      	ldr	r2, [pc, #76]	; (108f4 <cal_init+0x60>)
   108a6:	006d      	lsls	r5, r5, #1
   108a8:	6013      	str	r3, [r2, #0]
	ind_buf = 0;
   108aa:	4a13      	ldr	r2, [pc, #76]	; (108f8 <cal_init+0x64>)
   108ac:	4c13      	ldr	r4, [pc, #76]	; (108fc <cal_init+0x68>)
   108ae:	7013      	strb	r3, [r2, #0]
	groupPoints = 0;
   108b0:	4a13      	ldr	r2, [pc, #76]	; (10900 <cal_init+0x6c>)
   108b2:	2100      	movs	r1, #0
   108b4:	7013      	strb	r3, [r2, #0]
	
	for (k=0;k<SHOT_SIZE;k++){
		dist_raw_buf[k] = 0;
   108b6:	2300      	movs	r3, #0
   108b8:	4a12      	ldr	r2, [pc, #72]	; (10904 <cal_init+0x70>)
   108ba:	4813      	ldr	r0, [pc, #76]	; (10908 <cal_init+0x74>)
   108bc:	6013      	str	r3, [r2, #0]
   108be:	6053      	str	r3, [r2, #4]
   108c0:	6093      	str	r3, [r2, #8]
   108c2:	60d3      	str	r3, [r2, #12]
	}
	
	loop_distance = 0;
   108c4:	4a11      	ldr	r2, [pc, #68]	; (1090c <cal_init+0x78>)
   108c6:	6013      	str	r3, [r2, #0]
	loop_horizontal = 0;
   108c8:	4a11      	ldr	r2, [pc, #68]	; (10910 <cal_init+0x7c>)
   108ca:	6013      	str	r3, [r2, #0]
	loop_vertical = 0;
   108cc:	4a11      	ldr	r2, [pc, #68]	; (10914 <cal_init+0x80>)
   108ce:	6013      	str	r3, [r2, #0]
	loop_azimuth = 0;
   108d0:	4a11      	ldr	r2, [pc, #68]	; (10918 <cal_init+0x84>)
   108d2:	6013      	str	r3, [r2, #0]
   108d4:	002a      	movs	r2, r5
   108d6:	47a0      	blx	r4
   108d8:	002a      	movs	r2, r5
   108da:	2100      	movs	r1, #0
   108dc:	480f      	ldr	r0, [pc, #60]	; (1091c <cal_init+0x88>)
   108de:	47a0      	blx	r4
   108e0:	002a      	movs	r2, r5
   108e2:	2100      	movs	r1, #0
   108e4:	480e      	ldr	r0, [pc, #56]	; (10920 <cal_init+0x8c>)
   108e6:	47a0      	blx	r4
	for (k=0;k<NBUFF;k++){
		azimuth[k]=0;
		inclination[k]=0;
		roll[k] = 0;
	}
}
   108e8:	bd70      	pop	{r4, r5, r6, pc}
   108ea:	46c0      	nop			; (mov r8, r8)
   108ec:	20003924 	.word	0x20003924
   108f0:	20001468 	.word	0x20001468
   108f4:	20003340 	.word	0x20003340
   108f8:	20001469 	.word	0x20001469
   108fc:	0001fdfd 	.word	0x0001fdfd
   10900:	2000146a 	.word	0x2000146a
   10904:	20004688 	.word	0x20004688
   10908:	20002138 	.word	0x20002138
   1090c:	20003324 	.word	0x20003324
   10910:	20003fdc 	.word	0x20003fdc
   10914:	2000331c 	.word	0x2000331c
   10918:	200055cc 	.word	0x200055cc
   1091c:	20003de8 	.word	0x20003de8
   10920:	2000508c 	.word	0x2000508c

00010924 <cal_done>:


void cal_done(enum CALTYPE caltype){
   10924:	b510      	push	{r4, lr}
	
	switch (caltype){
   10926:	2801      	cmp	r0, #1
   10928:	d02c      	beq.n	10984 <cal_done+0x60>
   1092a:	2800      	cmp	r0, #0
   1092c:	d014      	beq.n	10958 <cal_done+0x34>
   1092e:	2802      	cmp	r0, #2
   10930:	d111      	bne.n	10956 <cal_done+0x32>
	
}

void cal_dist_process(void){
	
	dist_calst.dist_offset = temp_dist_offset;
   10932:	4b1e      	ldr	r3, [pc, #120]	; (109ac <cal_done+0x88>)
   10934:	681a      	ldr	r2, [r3, #0]
   10936:	4b1e      	ldr	r3, [pc, #120]	; (109b0 <cal_done+0x8c>)
   10938:	659a      	str	r2, [r3, #88]	; 0x58
	
	//  Fill Out data for report structure
	get_time();//  Get current time
   1093a:	4b1e      	ldr	r3, [pc, #120]	; (109b4 <cal_done+0x90>)
   1093c:	4798      	blx	r3
	memcpy(&cal_report.time_rangeFinder,&current_time,sizeof(current_time));
   1093e:	4b1e      	ldr	r3, [pc, #120]	; (109b8 <cal_done+0x94>)
   10940:	4a1e      	ldr	r2, [pc, #120]	; (109bc <cal_done+0x98>)
   10942:	3378      	adds	r3, #120	; 0x78
   10944:	ca13      	ldmia	r2!, {r0, r1, r4}
   10946:	c313      	stmia	r3!, {r0, r1, r4}
   10948:	ca03      	ldmia	r2!, {r0, r1}
   1094a:	c303      	stmia	r3!, {r0, r1}
			save_calibration();
   1094c:	4b1c      	ldr	r3, [pc, #112]	; (109c0 <cal_done+0x9c>)
   1094e:	4798      	blx	r3
			SD_add_cal_history(rangeFinder);
   10950:	2002      	movs	r0, #2
   10952:	4b1c      	ldr	r3, [pc, #112]	; (109c4 <cal_done+0xa0>)
   10954:	4798      	blx	r3
};
   10956:	bd10      	pop	{r4, pc}
			EEPROM_saveCalRawData(inc_azm_full);
   10958:	2000      	movs	r0, #0
   1095a:	4b1b      	ldr	r3, [pc, #108]	; (109c8 <cal_done+0xa4>)
   1095c:	4798      	blx	r3
			cal_report.points = nGroups*GROUP_SIZE;
   1095e:	4b1b      	ldr	r3, [pc, #108]	; (109cc <cal_done+0xa8>)
   10960:	4c15      	ldr	r4, [pc, #84]	; (109b8 <cal_done+0x94>)
   10962:	681b      	ldr	r3, [r3, #0]
   10964:	009a      	lsls	r2, r3, #2
			cal_report.groups = nGroups;
   10966:	6063      	str	r3, [r4, #4]
			cal_report.groupsAll = nGroups;
   10968:	60e3      	str	r3, [r4, #12]
			get_time();//  Get current time
   1096a:	4b12      	ldr	r3, [pc, #72]	; (109b4 <cal_done+0x90>)
			cal_report.points = nGroups*GROUP_SIZE;
   1096c:	60a2      	str	r2, [r4, #8]
			cal_report.pointsAll = nGroups*GROUP_SIZE;;
   1096e:	6122      	str	r2, [r4, #16]
			get_time();//  Get current time
   10970:	4798      	blx	r3
			memcpy(&cal_report.time_inc_azm,&current_time,sizeof(current_time));
   10972:	4a12      	ldr	r2, [pc, #72]	; (109bc <cal_done+0x98>)
   10974:	3450      	adds	r4, #80	; 0x50
   10976:	ca0b      	ldmia	r2!, {r0, r1, r3}
   10978:	c40b      	stmia	r4!, {r0, r1, r3}
   1097a:	ca0a      	ldmia	r2!, {r1, r3}
   1097c:	c40a      	stmia	r4!, {r1, r3}
			save_cal_report();
   1097e:	4b14      	ldr	r3, [pc, #80]	; (109d0 <cal_done+0xac>)
   10980:	4798      	blx	r3
			break;
   10982:	e7e8      	b.n	10956 <cal_done+0x32>
			EEPROM_saveCalRawData(azm_quick);
   10984:	2001      	movs	r0, #1
   10986:	4b10      	ldr	r3, [pc, #64]	; (109c8 <cal_done+0xa4>)
   10988:	4798      	blx	r3
			cal_report.points = nPoints;
   1098a:	4b12      	ldr	r3, [pc, #72]	; (109d4 <cal_done+0xb0>)
   1098c:	4c0a      	ldr	r4, [pc, #40]	; (109b8 <cal_done+0x94>)
   1098e:	681b      	ldr	r3, [r3, #0]
   10990:	60a3      	str	r3, [r4, #8]
			cal_report.pointsAll = nPoints;
   10992:	6123      	str	r3, [r4, #16]
			get_time();//  Get current time
   10994:	4b07      	ldr	r3, [pc, #28]	; (109b4 <cal_done+0x90>)
   10996:	4798      	blx	r3
			memcpy(&cal_report.time_quick_azm,&current_time,sizeof(current_time));
   10998:	4a08      	ldr	r2, [pc, #32]	; (109bc <cal_done+0x98>)
   1099a:	3464      	adds	r4, #100	; 0x64
   1099c:	ca0b      	ldmia	r2!, {r0, r1, r3}
   1099e:	c40b      	stmia	r4!, {r0, r1, r3}
   109a0:	ca0a      	ldmia	r2!, {r1, r3}
   109a2:	c40a      	stmia	r4!, {r1, r3}
			save_cal_report();
   109a4:	4b0a      	ldr	r3, [pc, #40]	; (109d0 <cal_done+0xac>)
   109a6:	4798      	blx	r3
			break;
   109a8:	e7d5      	b.n	10956 <cal_done+0x32>
   109aa:	46c0      	nop			; (mov r8, r8)
   109ac:	20003de0 	.word	0x20003de0
   109b0:	20005450 	.word	0x20005450
   109b4:	00007c61 	.word	0x00007c61
   109b8:	20004b4c 	.word	0x20004b4c
   109bc:	20002778 	.word	0x20002778
   109c0:	00008b05 	.word	0x00008b05
   109c4:	0000b491 	.word	0x0000b491
   109c8:	000082a5 	.word	0x000082a5
   109cc:	20003924 	.word	0x20003924
   109d0:	00008ca1 	.word	0x00008ca1
   109d4:	20003340 	.word	0x20003340

000109d8 <cal_apply_cal_all>:
void cal_apply_cal_all(void){
   109d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   109da:	46de      	mov	lr, fp
   109dc:	4657      	mov	r7, sl
   109de:	464e      	mov	r6, r9
   109e0:	4645      	mov	r5, r8
   109e2:	b5e0      	push	{r5, r6, r7, lr}
	for (i=0;i<nPoints;i++){
   109e4:	4ba7      	ldr	r3, [pc, #668]	; (10c84 <cal_apply_cal_all+0x2ac>)
void cal_apply_cal_all(void){
   109e6:	b089      	sub	sp, #36	; 0x24
	for (i=0;i<nPoints;i++){
   109e8:	681b      	ldr	r3, [r3, #0]
   109ea:	9300      	str	r3, [sp, #0]
   109ec:	2b00      	cmp	r3, #0
   109ee:	d100      	bne.n	109f2 <cal_apply_cal_all+0x1a>
   109f0:	e141      	b.n	10c76 <cal_apply_cal_all+0x29e>
   109f2:	4ba5      	ldr	r3, [pc, #660]	; (10c88 <cal_apply_cal_all+0x2b0>)
   109f4:	4ca5      	ldr	r4, [pc, #660]	; (10c8c <cal_apply_cal_all+0x2b4>)
   109f6:	9303      	str	r3, [sp, #12]
   109f8:	4ba5      	ldr	r3, [pc, #660]	; (10c90 <cal_apply_cal_all+0x2b8>)
   109fa:	4fa6      	ldr	r7, [pc, #664]	; (10c94 <cal_apply_cal_all+0x2bc>)
   109fc:	9302      	str	r3, [sp, #8]
   109fe:	4ba6      	ldr	r3, [pc, #664]	; (10c98 <cal_apply_cal_all+0x2c0>)
   10a00:	4ea6      	ldr	r6, [pc, #664]	; (10c9c <cal_apply_cal_all+0x2c4>)
   10a02:	9304      	str	r3, [sp, #16]
   10a04:	4ba6      	ldr	r3, [pc, #664]	; (10ca0 <cal_apply_cal_all+0x2c8>)
   10a06:	4da7      	ldr	r5, [pc, #668]	; (10ca4 <cal_apply_cal_all+0x2cc>)
   10a08:	9301      	str	r3, [sp, #4]
   10a0a:	4ba7      	ldr	r3, [pc, #668]	; (10ca8 <cal_apply_cal_all+0x2d0>)
   10a0c:	9300      	str	r3, [sp, #0]
   10a0e:	4ba7      	ldr	r3, [pc, #668]	; (10cac <cal_apply_cal_all+0x2d4>)
   10a10:	469b      	mov	fp, r3
   10a12:	2300      	movs	r3, #0
   10a14:	9305      	str	r3, [sp, #20]
   10a16:	9306      	str	r3, [sp, #24]
   10a18:	4ba5      	ldr	r3, [pc, #660]	; (10cb0 <cal_apply_cal_all+0x2d8>)
   10a1a:	4698      	mov	r8, r3
	uint8_t i;
	
	//  Apply gain and offset calibration
	for (i=0;i<3;i++){
		//  Subtract Offset
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   10a1c:	4643      	mov	r3, r8
   10a1e:	6859      	ldr	r1, [r3, #4]
   10a20:	9b03      	ldr	r3, [sp, #12]
   10a22:	6818      	ldr	r0, [r3, #0]
   10a24:	47a0      	blx	r4
		//  Divide by Gain
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   10a26:	4642      	mov	r2, r8
   10a28:	6911      	ldr	r1, [r2, #16]
   10a2a:	4aa2      	ldr	r2, [pc, #648]	; (10cb4 <cal_apply_cal_all+0x2dc>)
   10a2c:	4790      	blx	r2
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   10a2e:	4641      	mov	r1, r8
   10a30:	9b03      	ldr	r3, [sp, #12]
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   10a32:	9a02      	ldr	r2, [sp, #8]
   10a34:	4681      	mov	r9, r0
   10a36:	6010      	str	r0, [r2, #0]
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   10a38:	68c9      	ldr	r1, [r1, #12]
   10a3a:	6898      	ldr	r0, [r3, #8]
   10a3c:	47a0      	blx	r4
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   10a3e:	4641      	mov	r1, r8
   10a40:	4a9c      	ldr	r2, [pc, #624]	; (10cb4 <cal_apply_cal_all+0x2dc>)
   10a42:	6989      	ldr	r1, [r1, #24]
   10a44:	4694      	mov	ip, r2
   10a46:	47e0      	blx	ip
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   10a48:	4641      	mov	r1, r8
   10a4a:	9b03      	ldr	r3, [sp, #12]
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   10a4c:	4682      	mov	sl, r0
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   10a4e:	6889      	ldr	r1, [r1, #8]
   10a50:	6858      	ldr	r0, [r3, #4]
   10a52:	47a0      	blx	r4
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   10a54:	4641      	mov	r1, r8
   10a56:	4a97      	ldr	r2, [pc, #604]	; (10cb4 <cal_apply_cal_all+0x2dc>)
   10a58:	6949      	ldr	r1, [r1, #20]
   10a5a:	4694      	mov	ip, r2
   10a5c:	47e0      	blx	ip
	}
	//  Apply axis misalignments
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   10a5e:	4641      	mov	r1, r8
   10a60:	4a95      	ldr	r2, [pc, #596]	; (10cb8 <cal_apply_cal_all+0x2e0>)
   10a62:	69c9      	ldr	r1, [r1, #28]
   10a64:	4694      	mov	ip, r2
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   10a66:	9007      	str	r0, [sp, #28]
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   10a68:	4648      	mov	r0, r9
   10a6a:	47e0      	blx	ip
   10a6c:	4a93      	ldr	r2, [pc, #588]	; (10cbc <cal_apply_cal_all+0x2e4>)
   10a6e:	1c01      	adds	r1, r0, #0
   10a70:	4694      	mov	ip, r2
   10a72:	9807      	ldr	r0, [sp, #28]
   10a74:	47e0      	blx	ip
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   10a76:	4641      	mov	r1, r8
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   10a78:	9a02      	ldr	r2, [sp, #8]
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   10a7a:	4b8f      	ldr	r3, [pc, #572]	; (10cb8 <cal_apply_cal_all+0x2e0>)
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   10a7c:	6050      	str	r0, [r2, #4]
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   10a7e:	469c      	mov	ip, r3
   10a80:	6a09      	ldr	r1, [r1, #32]
   10a82:	47e0      	blx	ip
   10a84:	4b8d      	ldr	r3, [pc, #564]	; (10cbc <cal_apply_cal_all+0x2e4>)
   10a86:	4651      	mov	r1, sl
   10a88:	469c      	mov	ip, r3
   10a8a:	47e0      	blx	ip
   10a8c:	4641      	mov	r1, r8
   10a8e:	4b8a      	ldr	r3, [pc, #552]	; (10cb8 <cal_apply_cal_all+0x2e0>)
   10a90:	4682      	mov	sl, r0
   10a92:	6a49      	ldr	r1, [r1, #36]	; 0x24
   10a94:	469c      	mov	ip, r3
   10a96:	4648      	mov	r0, r9
   10a98:	47e0      	blx	ip
   10a9a:	4b88      	ldr	r3, [pc, #544]	; (10cbc <cal_apply_cal_all+0x2e4>)
   10a9c:	1c01      	adds	r1, r0, #0
   10a9e:	469c      	mov	ip, r3
   10aa0:	4650      	mov	r0, sl
   10aa2:	47e0      	blx	ip


	//  Apply rotation calibration
	//  Rotate vector by rotation matrix
	mat_mult_33_31(cal_struct->RotM, calXYZ, calXYZ);
   10aa4:	4b86      	ldr	r3, [pc, #536]	; (10cc0 <cal_apply_cal_all+0x2e8>)
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   10aa6:	9902      	ldr	r1, [sp, #8]
	mat_mult_33_31(cal_struct->RotM, calXYZ, calXYZ);
   10aa8:	469c      	mov	ip, r3
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   10aaa:	000a      	movs	r2, r1
   10aac:	6088      	str	r0, [r1, #8]
	mat_mult_33_31(cal_struct->RotM, calXYZ, calXYZ);
   10aae:	4885      	ldr	r0, [pc, #532]	; (10cc4 <cal_apply_cal_all+0x2ec>)
   10ab0:	47e0      	blx	ip
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   10ab2:	9a04      	ldr	r2, [sp, #16]
   10ab4:	6879      	ldr	r1, [r7, #4]
   10ab6:	6810      	ldr	r0, [r2, #0]
   10ab8:	47a0      	blx	r4
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   10aba:	4a7e      	ldr	r2, [pc, #504]	; (10cb4 <cal_apply_cal_all+0x2dc>)
   10abc:	6939      	ldr	r1, [r7, #16]
   10abe:	4694      	mov	ip, r2
   10ac0:	47e0      	blx	ip
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   10ac2:	9a04      	ldr	r2, [sp, #16]
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   10ac4:	9901      	ldr	r1, [sp, #4]
   10ac6:	4681      	mov	r9, r0
   10ac8:	6008      	str	r0, [r1, #0]
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   10aca:	68f9      	ldr	r1, [r7, #12]
   10acc:	6890      	ldr	r0, [r2, #8]
   10ace:	47a0      	blx	r4
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   10ad0:	4a78      	ldr	r2, [pc, #480]	; (10cb4 <cal_apply_cal_all+0x2dc>)
   10ad2:	69b9      	ldr	r1, [r7, #24]
   10ad4:	4694      	mov	ip, r2
   10ad6:	47e0      	blx	ip
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   10ad8:	9a04      	ldr	r2, [sp, #16]
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   10ada:	4682      	mov	sl, r0
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   10adc:	68b9      	ldr	r1, [r7, #8]
   10ade:	6850      	ldr	r0, [r2, #4]
   10ae0:	47a0      	blx	r4
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   10ae2:	4a74      	ldr	r2, [pc, #464]	; (10cb4 <cal_apply_cal_all+0x2dc>)
   10ae4:	6979      	ldr	r1, [r7, #20]
   10ae6:	4694      	mov	ip, r2
   10ae8:	47e0      	blx	ip
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   10aea:	4a73      	ldr	r2, [pc, #460]	; (10cb8 <cal_apply_cal_all+0x2e0>)
   10aec:	69f9      	ldr	r1, [r7, #28]
   10aee:	4694      	mov	ip, r2
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   10af0:	9007      	str	r0, [sp, #28]
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   10af2:	4648      	mov	r0, r9
   10af4:	47e0      	blx	ip
   10af6:	4a71      	ldr	r2, [pc, #452]	; (10cbc <cal_apply_cal_all+0x2e4>)
   10af8:	1c01      	adds	r1, r0, #0
   10afa:	4694      	mov	ip, r2
   10afc:	9807      	ldr	r0, [sp, #28]
   10afe:	47e0      	blx	ip
   10b00:	9901      	ldr	r1, [sp, #4]
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   10b02:	4a6d      	ldr	r2, [pc, #436]	; (10cb8 <cal_apply_cal_all+0x2e0>)
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   10b04:	6048      	str	r0, [r1, #4]
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   10b06:	4694      	mov	ip, r2
   10b08:	6a39      	ldr	r1, [r7, #32]
   10b0a:	47e0      	blx	ip
   10b0c:	4a6b      	ldr	r2, [pc, #428]	; (10cbc <cal_apply_cal_all+0x2e4>)
   10b0e:	4651      	mov	r1, sl
   10b10:	4694      	mov	ip, r2
   10b12:	47e0      	blx	ip
   10b14:	4a68      	ldr	r2, [pc, #416]	; (10cb8 <cal_apply_cal_all+0x2e0>)
   10b16:	4682      	mov	sl, r0
   10b18:	6a79      	ldr	r1, [r7, #36]	; 0x24
   10b1a:	4694      	mov	ip, r2
   10b1c:	4648      	mov	r0, r9
   10b1e:	47e0      	blx	ip
   10b20:	4a66      	ldr	r2, [pc, #408]	; (10cbc <cal_apply_cal_all+0x2e4>)
   10b22:	1c01      	adds	r1, r0, #0
   10b24:	4694      	mov	ip, r2
   10b26:	4650      	mov	r0, sl
   10b28:	47e0      	blx	ip
	mat_mult_33_31(cal_struct->RotM, calXYZ, calXYZ);
   10b2a:	4b65      	ldr	r3, [pc, #404]	; (10cc0 <cal_apply_cal_all+0x2e8>)
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   10b2c:	9901      	ldr	r1, [sp, #4]
	mat_mult_33_31(cal_struct->RotM, calXYZ, calXYZ);
   10b2e:	469c      	mov	ip, r3
   10b30:	000a      	movs	r2, r1
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   10b32:	6088      	str	r0, [r1, #8]
	mat_mult_33_31(cal_struct->RotM, calXYZ, calXYZ);
   10b34:	4864      	ldr	r0, [pc, #400]	; (10cc8 <cal_apply_cal_all+0x2f0>)
   10b36:	47e0      	blx	ip
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   10b38:	4864      	ldr	r0, [pc, #400]	; (10ccc <cal_apply_cal_all+0x2f4>)
   10b3a:	6871      	ldr	r1, [r6, #4]
   10b3c:	4682      	mov	sl, r0
   10b3e:	9805      	ldr	r0, [sp, #20]
   10b40:	4684      	mov	ip, r0
   10b42:	44e2      	add	sl, ip
   10b44:	4650      	mov	r0, sl
   10b46:	6800      	ldr	r0, [r0, #0]
   10b48:	47a0      	blx	r4
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   10b4a:	4a5a      	ldr	r2, [pc, #360]	; (10cb4 <cal_apply_cal_all+0x2dc>)
   10b4c:	6931      	ldr	r1, [r6, #16]
   10b4e:	4790      	blx	r2
   10b50:	9900      	ldr	r1, [sp, #0]
   10b52:	4681      	mov	r9, r0
   10b54:	6008      	str	r0, [r1, #0]
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   10b56:	4650      	mov	r0, sl
   10b58:	68f1      	ldr	r1, [r6, #12]
   10b5a:	6880      	ldr	r0, [r0, #8]
   10b5c:	47a0      	blx	r4
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   10b5e:	4a55      	ldr	r2, [pc, #340]	; (10cb4 <cal_apply_cal_all+0x2dc>)
   10b60:	69b1      	ldr	r1, [r6, #24]
   10b62:	4694      	mov	ip, r2
   10b64:	47e0      	blx	ip
   10b66:	9007      	str	r0, [sp, #28]
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   10b68:	4650      	mov	r0, sl
   10b6a:	68b1      	ldr	r1, [r6, #8]
   10b6c:	6840      	ldr	r0, [r0, #4]
   10b6e:	47a0      	blx	r4
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   10b70:	6971      	ldr	r1, [r6, #20]
   10b72:	4a50      	ldr	r2, [pc, #320]	; (10cb4 <cal_apply_cal_all+0x2dc>)
   10b74:	4790      	blx	r2
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   10b76:	4a50      	ldr	r2, [pc, #320]	; (10cb8 <cal_apply_cal_all+0x2e0>)
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   10b78:	4682      	mov	sl, r0
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   10b7a:	4694      	mov	ip, r2
   10b7c:	69f1      	ldr	r1, [r6, #28]
   10b7e:	4648      	mov	r0, r9
   10b80:	47e0      	blx	ip
   10b82:	4a4e      	ldr	r2, [pc, #312]	; (10cbc <cal_apply_cal_all+0x2e4>)
   10b84:	1c01      	adds	r1, r0, #0
   10b86:	4650      	mov	r0, sl
   10b88:	4790      	blx	r2
   10b8a:	9900      	ldr	r1, [sp, #0]
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   10b8c:	4a4a      	ldr	r2, [pc, #296]	; (10cb8 <cal_apply_cal_all+0x2e0>)
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   10b8e:	6048      	str	r0, [r1, #4]
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   10b90:	6a31      	ldr	r1, [r6, #32]
   10b92:	4790      	blx	r2
   10b94:	9907      	ldr	r1, [sp, #28]
   10b96:	4a49      	ldr	r2, [pc, #292]	; (10cbc <cal_apply_cal_all+0x2e4>)
   10b98:	4790      	blx	r2
   10b9a:	6a71      	ldr	r1, [r6, #36]	; 0x24
   10b9c:	4682      	mov	sl, r0
   10b9e:	4a46      	ldr	r2, [pc, #280]	; (10cb8 <cal_apply_cal_all+0x2e0>)
   10ba0:	4648      	mov	r0, r9
   10ba2:	4790      	blx	r2
   10ba4:	4a45      	ldr	r2, [pc, #276]	; (10cbc <cal_apply_cal_all+0x2e4>)
   10ba6:	1c01      	adds	r1, r0, #0
   10ba8:	4650      	mov	r0, sl
   10baa:	4790      	blx	r2
   10bac:	9900      	ldr	r1, [sp, #0]
	mat_mult_33_31(cal_struct->RotM, calXYZ, calXYZ);
   10bae:	4b44      	ldr	r3, [pc, #272]	; (10cc0 <cal_apply_cal_all+0x2e8>)
   10bb0:	000a      	movs	r2, r1
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   10bb2:	6088      	str	r0, [r1, #8]
	mat_mult_33_31(cal_struct->RotM, calXYZ, calXYZ);
   10bb4:	4846      	ldr	r0, [pc, #280]	; (10cd0 <cal_apply_cal_all+0x2f8>)
   10bb6:	4798      	blx	r3
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   10bb8:	4946      	ldr	r1, [pc, #280]	; (10cd4 <cal_apply_cal_all+0x2fc>)
   10bba:	9805      	ldr	r0, [sp, #20]
   10bbc:	468a      	mov	sl, r1
   10bbe:	4684      	mov	ip, r0
   10bc0:	44e2      	add	sl, ip
   10bc2:	4650      	mov	r0, sl
   10bc4:	6869      	ldr	r1, [r5, #4]
   10bc6:	6800      	ldr	r0, [r0, #0]
   10bc8:	47a0      	blx	r4
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   10bca:	4a3a      	ldr	r2, [pc, #232]	; (10cb4 <cal_apply_cal_all+0x2dc>)
   10bcc:	6929      	ldr	r1, [r5, #16]
   10bce:	4790      	blx	r2
   10bd0:	4659      	mov	r1, fp
   10bd2:	4681      	mov	r9, r0
   10bd4:	6008      	str	r0, [r1, #0]
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   10bd6:	4650      	mov	r0, sl
   10bd8:	68e9      	ldr	r1, [r5, #12]
   10bda:	6880      	ldr	r0, [r0, #8]
   10bdc:	47a0      	blx	r4
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   10bde:	4a35      	ldr	r2, [pc, #212]	; (10cb4 <cal_apply_cal_all+0x2dc>)
   10be0:	69a9      	ldr	r1, [r5, #24]
   10be2:	4694      	mov	ip, r2
   10be4:	47e0      	blx	ip
   10be6:	9007      	str	r0, [sp, #28]
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   10be8:	4650      	mov	r0, sl
   10bea:	68a9      	ldr	r1, [r5, #8]
   10bec:	6840      	ldr	r0, [r0, #4]
   10bee:	47a0      	blx	r4
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   10bf0:	6969      	ldr	r1, [r5, #20]
   10bf2:	4a30      	ldr	r2, [pc, #192]	; (10cb4 <cal_apply_cal_all+0x2dc>)
   10bf4:	4790      	blx	r2
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   10bf6:	4a30      	ldr	r2, [pc, #192]	; (10cb8 <cal_apply_cal_all+0x2e0>)
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   10bf8:	4682      	mov	sl, r0
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   10bfa:	4694      	mov	ip, r2
   10bfc:	69e9      	ldr	r1, [r5, #28]
   10bfe:	4648      	mov	r0, r9
   10c00:	47e0      	blx	ip
   10c02:	4a2e      	ldr	r2, [pc, #184]	; (10cbc <cal_apply_cal_all+0x2e4>)
   10c04:	1c01      	adds	r1, r0, #0
   10c06:	4650      	mov	r0, sl
   10c08:	4790      	blx	r2
   10c0a:	4659      	mov	r1, fp
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   10c0c:	4a2a      	ldr	r2, [pc, #168]	; (10cb8 <cal_apply_cal_all+0x2e0>)
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   10c0e:	6048      	str	r0, [r1, #4]
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   10c10:	6a29      	ldr	r1, [r5, #32]
   10c12:	4790      	blx	r2
   10c14:	9907      	ldr	r1, [sp, #28]
   10c16:	4a29      	ldr	r2, [pc, #164]	; (10cbc <cal_apply_cal_all+0x2e4>)
   10c18:	4790      	blx	r2
   10c1a:	6a69      	ldr	r1, [r5, #36]	; 0x24
   10c1c:	4682      	mov	sl, r0
   10c1e:	4a26      	ldr	r2, [pc, #152]	; (10cb8 <cal_apply_cal_all+0x2e0>)
   10c20:	4648      	mov	r0, r9
   10c22:	4790      	blx	r2
   10c24:	4a25      	ldr	r2, [pc, #148]	; (10cbc <cal_apply_cal_all+0x2e4>)
   10c26:	1c01      	adds	r1, r0, #0
   10c28:	4650      	mov	r0, sl
   10c2a:	4790      	blx	r2
   10c2c:	4659      	mov	r1, fp
   10c2e:	6088      	str	r0, [r1, #8]
	mat_mult_33_31(cal_struct->RotM, calXYZ, calXYZ);
   10c30:	0028      	movs	r0, r5
   10c32:	465a      	mov	r2, fp
   10c34:	3034      	adds	r0, #52	; 0x34
   10c36:	4b22      	ldr	r3, [pc, #136]	; (10cc0 <cal_apply_cal_all+0x2e8>)
   10c38:	4798      	blx	r3
   10c3a:	9b03      	ldr	r3, [sp, #12]
	for (i=0;i<nPoints;i++){
   10c3c:	9906      	ldr	r1, [sp, #24]
   10c3e:	330c      	adds	r3, #12
   10c40:	9303      	str	r3, [sp, #12]
   10c42:	9b02      	ldr	r3, [sp, #8]
   10c44:	9a04      	ldr	r2, [sp, #16]
   10c46:	330c      	adds	r3, #12
   10c48:	9302      	str	r3, [sp, #8]
   10c4a:	9b01      	ldr	r3, [sp, #4]
   10c4c:	9805      	ldr	r0, [sp, #20]
   10c4e:	330c      	adds	r3, #12
   10c50:	9301      	str	r3, [sp, #4]
   10c52:	9b00      	ldr	r3, [sp, #0]
   10c54:	3101      	adds	r1, #1
   10c56:	330c      	adds	r3, #12
   10c58:	9300      	str	r3, [sp, #0]
   10c5a:	230c      	movs	r3, #12
   10c5c:	469c      	mov	ip, r3
   10c5e:	4b09      	ldr	r3, [pc, #36]	; (10c84 <cal_apply_cal_all+0x2ac>)
   10c60:	320c      	adds	r2, #12
   10c62:	681b      	ldr	r3, [r3, #0]
   10c64:	300c      	adds	r0, #12
   10c66:	9106      	str	r1, [sp, #24]
   10c68:	9204      	str	r2, [sp, #16]
   10c6a:	44e3      	add	fp, ip
   10c6c:	9005      	str	r0, [sp, #20]
   10c6e:	9307      	str	r3, [sp, #28]
   10c70:	428b      	cmp	r3, r1
   10c72:	d900      	bls.n	10c76 <cal_apply_cal_all+0x29e>
   10c74:	e6d2      	b.n	10a1c <cal_apply_cal_all+0x44>
}
   10c76:	b009      	add	sp, #36	; 0x24
   10c78:	bc3c      	pop	{r2, r3, r4, r5}
   10c7a:	4690      	mov	r8, r2
   10c7c:	4699      	mov	r9, r3
   10c7e:	46a2      	mov	sl, r4
   10c80:	46ab      	mov	fp, r5
   10c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10c84:	20003340 	.word	0x20003340
   10c88:	20004040 	.word	0x20004040
   10c8c:	0001db79 	.word	0x0001db79
   10c90:	20004698 	.word	0x20004698
   10c94:	2000550c 	.word	0x2000550c
   10c98:	200022c8 	.word	0x200022c8
   10c9c:	200054b0 	.word	0x200054b0
   10ca0:	2000392c 	.word	0x2000392c
   10ca4:	20003fe0 	.word	0x20003fe0
   10ca8:	20004bd8 	.word	0x20004bd8
   10cac:	20002be0 	.word	0x20002be0
   10cb0:	200055d0 	.word	0x200055d0
   10cb4:	0001d559 	.word	0x0001d559
   10cb8:	0001d939 	.word	0x0001d939
   10cbc:	0001d235 	.word	0x0001d235
   10cc0:	000095c5 	.word	0x000095c5
   10cc4:	20005604 	.word	0x20005604
   10cc8:	20005540 	.word	0x20005540
   10ccc:	20003470 	.word	0x20003470
   10cd0:	200054e4 	.word	0x200054e4
   10cd4:	20001c88 	.word	0x20001c88

00010cd8 <cal_azm_quick_add_point>:
bool cal_azm_quick_add_point(float m1Buf[][3], float m2Buf[][3], uint32_t index){
   10cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   10cda:	464e      	mov	r6, r9
   10cdc:	4645      	mov	r5, r8
   10cde:	46de      	mov	lr, fp
   10ce0:	4657      	mov	r7, sl
   10ce2:	4b3b      	ldr	r3, [pc, #236]	; (10dd0 <cal_azm_quick_add_point+0xf8>)
   10ce4:	b5e0      	push	{r5, r6, r7, lr}
   10ce6:	4699      	mov	r9, r3
   10ce8:	4b3a      	ldr	r3, [pc, #232]	; (10dd4 <cal_azm_quick_add_point+0xfc>)
   10cea:	4688      	mov	r8, r1
   10cec:	469a      	mov	sl, r3
   10cee:	4b3a      	ldr	r3, [pc, #232]	; (10dd8 <cal_azm_quick_add_point+0x100>)
   10cf0:	0004      	movs	r4, r0
   10cf2:	2500      	movs	r5, #0
	bool isStable = true;
   10cf4:	2601      	movs	r6, #1
   10cf6:	469b      	mov	fp, r3
bool cal_azm_quick_add_point(float m1Buf[][3], float m2Buf[][3], uint32_t index){
   10cf8:	b08f      	sub	sp, #60	; 0x3c
   10cfa:	9201      	str	r2, [sp, #4]
			temp1[i] = m1Buf[i][k];		
   10cfc:	6823      	ldr	r3, [r4, #0]
		stdev3[k] = stdev(temp1, NBUFFQAZM);
   10cfe:	2105      	movs	r1, #5
			temp1[i] = m1Buf[i][k];		
   10d00:	9309      	str	r3, [sp, #36]	; 0x24
   10d02:	68e3      	ldr	r3, [r4, #12]
		stdev3[k] = stdev(temp1, NBUFFQAZM);
   10d04:	a809      	add	r0, sp, #36	; 0x24
			temp1[i] = m1Buf[i][k];		
   10d06:	930a      	str	r3, [sp, #40]	; 0x28
   10d08:	69a3      	ldr	r3, [r4, #24]
   10d0a:	930b      	str	r3, [sp, #44]	; 0x2c
   10d0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10d0e:	930c      	str	r3, [sp, #48]	; 0x30
   10d10:	6b23      	ldr	r3, [r4, #48]	; 0x30
   10d12:	930d      	str	r3, [sp, #52]	; 0x34
		stdev3[k] = stdev(temp1, NBUFFQAZM);
   10d14:	4b31      	ldr	r3, [pc, #196]	; (10ddc <cal_azm_quick_add_point+0x104>)
   10d16:	4798      	blx	r3
		arrMeans[k] = meanArr(temp1, NBUFFQAZM);
   10d18:	2105      	movs	r1, #5
		stdev3[k] = stdev(temp1, NBUFFQAZM);
   10d1a:	1c07      	adds	r7, r0, #0
		arrMeans[k] = meanArr(temp1, NBUFFQAZM);
   10d1c:	a809      	add	r0, sp, #36	; 0x24
   10d1e:	47c8      	blx	r9
   10d20:	ab03      	add	r3, sp, #12
   10d22:	5158      	str	r0, [r3, r5]
		isStable = isStable & (stdev3[k]<QAZM_STDEV_MIN);
   10d24:	1c38      	adds	r0, r7, #0
   10d26:	47d0      	blx	sl
   10d28:	4a2d      	ldr	r2, [pc, #180]	; (10de0 <cal_azm_quick_add_point+0x108>)
   10d2a:	4b2e      	ldr	r3, [pc, #184]	; (10de4 <cal_azm_quick_add_point+0x10c>)
   10d2c:	2701      	movs	r7, #1
   10d2e:	47d8      	blx	fp
   10d30:	2800      	cmp	r0, #0
   10d32:	d100      	bne.n	10d36 <cal_azm_quick_add_point+0x5e>
   10d34:	2700      	movs	r7, #0
   10d36:	3504      	adds	r5, #4
   10d38:	403e      	ands	r6, r7
   10d3a:	3404      	adds	r4, #4
	for (k=0;k<3;k++){
   10d3c:	2d0c      	cmp	r5, #12
   10d3e:	d1dd      	bne.n	10cfc <cal_azm_quick_add_point+0x24>
   10d40:	4644      	mov	r4, r8
   10d42:	2500      	movs	r5, #0
	bool isStable = true;
   10d44:	2701      	movs	r7, #1
   10d46:	46b0      	mov	r8, r6
			temp1[i] = m1Buf[i][k];		
   10d48:	6823      	ldr	r3, [r4, #0]
		stdev3[k] = stdev(temp1, NBUFFQAZM);
   10d4a:	2105      	movs	r1, #5
			temp1[i] = m1Buf[i][k];		
   10d4c:	9309      	str	r3, [sp, #36]	; 0x24
   10d4e:	68e3      	ldr	r3, [r4, #12]
		stdev3[k] = stdev(temp1, NBUFFQAZM);
   10d50:	a809      	add	r0, sp, #36	; 0x24
			temp1[i] = m1Buf[i][k];		
   10d52:	930a      	str	r3, [sp, #40]	; 0x28
   10d54:	69a3      	ldr	r3, [r4, #24]
   10d56:	930b      	str	r3, [sp, #44]	; 0x2c
   10d58:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10d5a:	930c      	str	r3, [sp, #48]	; 0x30
   10d5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   10d5e:	930d      	str	r3, [sp, #52]	; 0x34
		stdev3[k] = stdev(temp1, NBUFFQAZM);
   10d60:	4b1e      	ldr	r3, [pc, #120]	; (10ddc <cal_azm_quick_add_point+0x104>)
   10d62:	4798      	blx	r3
		arrMeans[k] = meanArr(temp1, NBUFFQAZM);
   10d64:	2105      	movs	r1, #5
		stdev3[k] = stdev(temp1, NBUFFQAZM);
   10d66:	1c06      	adds	r6, r0, #0
		arrMeans[k] = meanArr(temp1, NBUFFQAZM);
   10d68:	a809      	add	r0, sp, #36	; 0x24
   10d6a:	47c8      	blx	r9
   10d6c:	2210      	movs	r2, #16
   10d6e:	ab02      	add	r3, sp, #8
   10d70:	189b      	adds	r3, r3, r2
   10d72:	5158      	str	r0, [r3, r5]
		isStable = isStable & (stdev3[k]<QAZM_STDEV_MIN);
   10d74:	1c30      	adds	r0, r6, #0
   10d76:	47d0      	blx	sl
   10d78:	4a19      	ldr	r2, [pc, #100]	; (10de0 <cal_azm_quick_add_point+0x108>)
   10d7a:	4b1a      	ldr	r3, [pc, #104]	; (10de4 <cal_azm_quick_add_point+0x10c>)
   10d7c:	2601      	movs	r6, #1
   10d7e:	47d8      	blx	fp
   10d80:	2800      	cmp	r0, #0
   10d82:	d100      	bne.n	10d86 <cal_azm_quick_add_point+0xae>
   10d84:	2600      	movs	r6, #0
   10d86:	3504      	adds	r5, #4
   10d88:	4037      	ands	r7, r6
   10d8a:	3404      	adds	r4, #4
	for (k=0;k<3;k++){
   10d8c:	2d0c      	cmp	r5, #12
   10d8e:	d1db      	bne.n	10d48 <cal_azm_quick_add_point+0x70>
   10d90:	4646      	mov	r6, r8
	if ( isStable1 && isStable2){
   10d92:	2e00      	cmp	r6, #0
   10d94:	d013      	beq.n	10dbe <cal_azm_quick_add_point+0xe6>
		isStableBoth = false;
   10d96:	2600      	movs	r6, #0
	if ( isStable1 && isStable2){
   10d98:	2f00      	cmp	r7, #0
   10d9a:	d010      	beq.n	10dbe <cal_azm_quick_add_point+0xe6>
			m1Raw[index][i] = meanArr1[i];
   10d9c:	9b01      	ldr	r3, [sp, #4]
   10d9e:	4812      	ldr	r0, [pc, #72]	; (10de8 <cal_azm_quick_add_point+0x110>)
   10da0:	469c      	mov	ip, r3
   10da2:	005c      	lsls	r4, r3, #1
   10da4:	4464      	add	r4, ip
   10da6:	00a4      	lsls	r4, r4, #2
   10da8:	220c      	movs	r2, #12
   10daa:	a903      	add	r1, sp, #12
   10dac:	4d0f      	ldr	r5, [pc, #60]	; (10dec <cal_azm_quick_add_point+0x114>)
   10dae:	1820      	adds	r0, r4, r0
   10db0:	47a8      	blx	r5
			m2Raw[index][i] = meanArr2[i];
   10db2:	480f      	ldr	r0, [pc, #60]	; (10df0 <cal_azm_quick_add_point+0x118>)
   10db4:	220c      	movs	r2, #12
   10db6:	1820      	adds	r0, r4, r0
   10db8:	a906      	add	r1, sp, #24
   10dba:	47a8      	blx	r5
		isStableBoth = true;
   10dbc:	003e      	movs	r6, r7
}
   10dbe:	0030      	movs	r0, r6
   10dc0:	b00f      	add	sp, #60	; 0x3c
   10dc2:	bc3c      	pop	{r2, r3, r4, r5}
   10dc4:	4690      	mov	r8, r2
   10dc6:	4699      	mov	r9, r3
   10dc8:	46a2      	mov	sl, r4
   10dca:	46ab      	mov	fp, r5
   10dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10dce:	46c0      	nop			; (mov r8, r8)
   10dd0:	00009835 	.word	0x00009835
   10dd4:	0001fb6d 	.word	0x0001fb6d
   10dd8:	0001d035 	.word	0x0001d035
   10ddc:	00009751 	.word	0x00009751
   10de0:	47ae147b 	.word	0x47ae147b
   10de4:	3f747ae1 	.word	0x3f747ae1
   10de8:	20003470 	.word	0x20003470
   10dec:	0001fd79 	.word	0x0001fd79
   10df0:	20001c88 	.word	0x20001c88

00010df4 <cal_loop_test>:
void cal_loop_test(struct MEASUREMENT *meas_inst){
   10df4:	b5f0      	push	{r4, r5, r6, r7, lr}
   10df6:	46de      	mov	lr, fp
   10df8:	4657      	mov	r7, sl
   10dfa:	464e      	mov	r6, r9
   10dfc:	4645      	mov	r5, r8
   10dfe:	b5e0      	push	{r5, r6, r7, lr}
	nPoints = nPoints+1;
   10e00:	4a73      	ldr	r2, [pc, #460]	; (10fd0 <cal_loop_test+0x1dc>)
void cal_loop_test(struct MEASUREMENT *meas_inst){
   10e02:	b08d      	sub	sp, #52	; 0x34
	nPoints = nPoints+1;
   10e04:	6813      	ldr	r3, [r2, #0]
void cal_loop_test(struct MEASUREMENT *meas_inst){
   10e06:	4682      	mov	sl, r0
	nPoints = nPoints+1;
   10e08:	3301      	adds	r3, #1
   10e0a:	6013      	str	r3, [r2, #0]
	loop_distance = loop_distance + meas_inst->distCal;
   10e0c:	6a03      	ldr	r3, [r0, #32]
   10e0e:	4a71      	ldr	r2, [pc, #452]	; (10fd4 <cal_loop_test+0x1e0>)
   10e10:	9300      	str	r3, [sp, #0]
   10e12:	1c19      	adds	r1, r3, #0
   10e14:	6810      	ldr	r0, [r2, #0]
   10e16:	4a70      	ldr	r2, [pc, #448]	; (10fd8 <cal_loop_test+0x1e4>)
   10e18:	4790      	blx	r2
   10e1a:	4a6e      	ldr	r2, [pc, #440]	; (10fd4 <cal_loop_test+0x1e0>)
   10e1c:	6010      	str	r0, [r2, #0]
	N1 = loop_horizontal*cos(DEG2RAD*loop_azimuth);
   10e1e:	4a6f      	ldr	r2, [pc, #444]	; (10fdc <cal_loop_test+0x1e8>)
   10e20:	4690      	mov	r8, r2
   10e22:	4a6f      	ldr	r2, [pc, #444]	; (10fe0 <cal_loop_test+0x1ec>)
   10e24:	6810      	ldr	r0, [r2, #0]
   10e26:	47c0      	blx	r8
   10e28:	4a6e      	ldr	r2, [pc, #440]	; (10fe4 <cal_loop_test+0x1f0>)
   10e2a:	0006      	movs	r6, r0
   10e2c:	000f      	movs	r7, r1
   10e2e:	6810      	ldr	r0, [r2, #0]
   10e30:	496d      	ldr	r1, [pc, #436]	; (10fe8 <cal_loop_test+0x1f4>)
   10e32:	4a6e      	ldr	r2, [pc, #440]	; (10fec <cal_loop_test+0x1f8>)
   10e34:	4790      	blx	r2
   10e36:	47c0      	blx	r8
   10e38:	4a6d      	ldr	r2, [pc, #436]	; (10ff0 <cal_loop_test+0x1fc>)
   10e3a:	0004      	movs	r4, r0
   10e3c:	000d      	movs	r5, r1
   10e3e:	4790      	blx	r2
   10e40:	000b      	movs	r3, r1
   10e42:	496c      	ldr	r1, [pc, #432]	; (10ff4 <cal_loop_test+0x200>)
   10e44:	0002      	movs	r2, r0
   10e46:	4689      	mov	r9, r1
   10e48:	0030      	movs	r0, r6
   10e4a:	0039      	movs	r1, r7
   10e4c:	47c8      	blx	r9
   10e4e:	4a6a      	ldr	r2, [pc, #424]	; (10ff8 <cal_loop_test+0x204>)
   10e50:	4693      	mov	fp, r2
   10e52:	4790      	blx	r2
	E1 = loop_horizontal*sin(DEG2RAD*loop_azimuth);
   10e54:	4a69      	ldr	r2, [pc, #420]	; (10ffc <cal_loop_test+0x208>)
	N1 = loop_horizontal*cos(DEG2RAD*loop_azimuth);
   10e56:	900a      	str	r0, [sp, #40]	; 0x28
	E1 = loop_horizontal*sin(DEG2RAD*loop_azimuth);
   10e58:	0029      	movs	r1, r5
   10e5a:	0020      	movs	r0, r4
   10e5c:	4790      	blx	r2
   10e5e:	000b      	movs	r3, r1
   10e60:	0002      	movs	r2, r0
   10e62:	0039      	movs	r1, r7
   10e64:	0030      	movs	r0, r6
   10e66:	47c8      	blx	r9
   10e68:	47d8      	blx	fp
	D1 = loop_vertical;
   10e6a:	4a65      	ldr	r2, [pc, #404]	; (11000 <cal_loop_test+0x20c>)
	E1 = loop_horizontal*sin(DEG2RAD*loop_azimuth);
   10e6c:	900b      	str	r0, [sp, #44]	; 0x2c
	D1 = loop_vertical;
   10e6e:	6812      	ldr	r2, [r2, #0]
	delta_horizontal = meas_inst->distCal*cos(DEG2RAD*meas_inst->inclination);
   10e70:	9800      	ldr	r0, [sp, #0]
	D1 = loop_vertical;
   10e72:	9203      	str	r2, [sp, #12]
	delta_horizontal = meas_inst->distCal*cos(DEG2RAD*meas_inst->inclination);
   10e74:	47c0      	blx	r8
   10e76:	4653      	mov	r3, sl
   10e78:	0004      	movs	r4, r0
   10e7a:	000d      	movs	r5, r1
   10e7c:	6918      	ldr	r0, [r3, #16]
   10e7e:	495a      	ldr	r1, [pc, #360]	; (10fe8 <cal_loop_test+0x1f4>)
   10e80:	4b5a      	ldr	r3, [pc, #360]	; (10fec <cal_loop_test+0x1f8>)
   10e82:	4798      	blx	r3
   10e84:	47c0      	blx	r8
   10e86:	0002      	movs	r2, r0
   10e88:	000b      	movs	r3, r1
   10e8a:	9200      	str	r2, [sp, #0]
   10e8c:	9301      	str	r3, [sp, #4]
   10e8e:	4b58      	ldr	r3, [pc, #352]	; (10ff0 <cal_loop_test+0x1fc>)
   10e90:	4798      	blx	r3
   10e92:	9404      	str	r4, [sp, #16]
   10e94:	9505      	str	r5, [sp, #20]
   10e96:	0002      	movs	r2, r0
   10e98:	000b      	movs	r3, r1
   10e9a:	0020      	movs	r0, r4
   10e9c:	0029      	movs	r1, r5
   10e9e:	47c8      	blx	r9
   10ea0:	47d8      	blx	fp
	dN1 = delta_horizontal*cos(DEG2RAD*meas_inst->azimuth);
   10ea2:	47c0      	blx	r8
   10ea4:	4653      	mov	r3, sl
   10ea6:	0006      	movs	r6, r0
   10ea8:	000f      	movs	r7, r1
   10eaa:	68d8      	ldr	r0, [r3, #12]
   10eac:	494e      	ldr	r1, [pc, #312]	; (10fe8 <cal_loop_test+0x1f4>)
   10eae:	4b4f      	ldr	r3, [pc, #316]	; (10fec <cal_loop_test+0x1f8>)
   10eb0:	4798      	blx	r3
   10eb2:	47c0      	blx	r8
   10eb4:	4b4e      	ldr	r3, [pc, #312]	; (10ff0 <cal_loop_test+0x1fc>)
   10eb6:	0004      	movs	r4, r0
   10eb8:	000d      	movs	r5, r1
   10eba:	4798      	blx	r3
	dE1 = delta_horizontal*sin(DEG2RAD*meas_inst->azimuth);
   10ebc:	4b4f      	ldr	r3, [pc, #316]	; (10ffc <cal_loop_test+0x208>)
	dN1 = delta_horizontal*cos(DEG2RAD*meas_inst->azimuth);
   10ebe:	9006      	str	r0, [sp, #24]
   10ec0:	9107      	str	r1, [sp, #28]
	dE1 = delta_horizontal*sin(DEG2RAD*meas_inst->azimuth);
   10ec2:	0020      	movs	r0, r4
   10ec4:	0029      	movs	r1, r5
   10ec6:	4798      	blx	r3
	dD1 = meas_inst->distCal*sin(DEG2RAD*meas_inst->inclination);
   10ec8:	4b4c      	ldr	r3, [pc, #304]	; (10ffc <cal_loop_test+0x208>)
	dE1 = delta_horizontal*sin(DEG2RAD*meas_inst->azimuth);
   10eca:	0004      	movs	r4, r0
   10ecc:	000d      	movs	r5, r1
	dD1 = meas_inst->distCal*sin(DEG2RAD*meas_inst->inclination);
   10ece:	9800      	ldr	r0, [sp, #0]
   10ed0:	9901      	ldr	r1, [sp, #4]
   10ed2:	4798      	blx	r3
	dN1 = delta_horizontal*cos(DEG2RAD*meas_inst->azimuth);
   10ed4:	9a06      	ldr	r2, [sp, #24]
   10ed6:	9b07      	ldr	r3, [sp, #28]
	dD1 = meas_inst->distCal*sin(DEG2RAD*meas_inst->inclination);
   10ed8:	9008      	str	r0, [sp, #32]
   10eda:	9109      	str	r1, [sp, #36]	; 0x24
	dN1 = delta_horizontal*cos(DEG2RAD*meas_inst->azimuth);
   10edc:	0030      	movs	r0, r6
   10ede:	0039      	movs	r1, r7
   10ee0:	47c8      	blx	r9
   10ee2:	47d8      	blx	fp
	N1 = N1 + dN1;
   10ee4:	990a      	ldr	r1, [sp, #40]	; 0x28
   10ee6:	4b3c      	ldr	r3, [pc, #240]	; (10fd8 <cal_loop_test+0x1e4>)
   10ee8:	4798      	blx	r3
	loop_horizontal = sqrt(pow(N1,2)+pow(E1,2));
   10eea:	47c0      	blx	r8
	dE1 = delta_horizontal*sin(DEG2RAD*meas_inst->azimuth);
   10eec:	0022      	movs	r2, r4
	loop_horizontal = sqrt(pow(N1,2)+pow(E1,2));
   10eee:	9000      	str	r0, [sp, #0]
   10ef0:	9101      	str	r1, [sp, #4]
	dE1 = delta_horizontal*sin(DEG2RAD*meas_inst->azimuth);
   10ef2:	002b      	movs	r3, r5
   10ef4:	0030      	movs	r0, r6
   10ef6:	0039      	movs	r1, r7
   10ef8:	47c8      	blx	r9
   10efa:	47d8      	blx	fp
	E1 = E1 + dE1;
   10efc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10efe:	4b36      	ldr	r3, [pc, #216]	; (10fd8 <cal_loop_test+0x1e4>)
   10f00:	4798      	blx	r3
	loop_horizontal = sqrt(pow(N1,2)+pow(E1,2));
   10f02:	47c0      	blx	r8
   10f04:	9c00      	ldr	r4, [sp, #0]
   10f06:	9d01      	ldr	r5, [sp, #4]
   10f08:	0006      	movs	r6, r0
   10f0a:	000f      	movs	r7, r1
   10f0c:	0022      	movs	r2, r4
   10f0e:	002b      	movs	r3, r5
   10f10:	0020      	movs	r0, r4
   10f12:	0029      	movs	r1, r5
   10f14:	47c8      	blx	r9
   10f16:	0032      	movs	r2, r6
   10f18:	0004      	movs	r4, r0
   10f1a:	000d      	movs	r5, r1
   10f1c:	003b      	movs	r3, r7
   10f1e:	0030      	movs	r0, r6
   10f20:	0039      	movs	r1, r7
   10f22:	47c8      	blx	r9
   10f24:	0002      	movs	r2, r0
   10f26:	000b      	movs	r3, r1
   10f28:	0020      	movs	r0, r4
   10f2a:	0029      	movs	r1, r5
   10f2c:	4d35      	ldr	r5, [pc, #212]	; (11004 <cal_loop_test+0x210>)
   10f2e:	47a8      	blx	r5
   10f30:	4b35      	ldr	r3, [pc, #212]	; (11008 <cal_loop_test+0x214>)
   10f32:	469a      	mov	sl, r3
   10f34:	4798      	blx	r3
   10f36:	47d8      	blx	fp
   10f38:	4b29      	ldr	r3, [pc, #164]	; (10fe0 <cal_loop_test+0x1ec>)
   10f3a:	6018      	str	r0, [r3, #0]
	dD1 = meas_inst->distCal*sin(DEG2RAD*meas_inst->inclination);
   10f3c:	9a08      	ldr	r2, [sp, #32]
   10f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10f40:	9804      	ldr	r0, [sp, #16]
   10f42:	9905      	ldr	r1, [sp, #20]
   10f44:	47c8      	blx	r9
   10f46:	47d8      	blx	fp
	D1 = D1 + dD1;
   10f48:	9903      	ldr	r1, [sp, #12]
   10f4a:	4b23      	ldr	r3, [pc, #140]	; (10fd8 <cal_loop_test+0x1e4>)
   10f4c:	4798      	blx	r3
	loop_vertical = D1;
   10f4e:	4b2c      	ldr	r3, [pc, #176]	; (11000 <cal_loop_test+0x20c>)
	loop_azimuth = RAD2DEG*atan2(E1, N1);
   10f50:	0039      	movs	r1, r7
	loop_vertical = D1;
   10f52:	6018      	str	r0, [r3, #0]
	loop_azimuth = RAD2DEG*atan2(E1, N1);
   10f54:	4c2d      	ldr	r4, [pc, #180]	; (1100c <cal_loop_test+0x218>)
   10f56:	9a00      	ldr	r2, [sp, #0]
   10f58:	9b01      	ldr	r3, [sp, #4]
   10f5a:	0030      	movs	r0, r6
   10f5c:	47a0      	blx	r4
   10f5e:	2200      	movs	r2, #0
   10f60:	4b2b      	ldr	r3, [pc, #172]	; (11010 <cal_loop_test+0x21c>)
   10f62:	47c8      	blx	r9
   10f64:	47d8      	blx	fp
   10f66:	4b1f      	ldr	r3, [pc, #124]	; (10fe4 <cal_loop_test+0x1f0>)
   10f68:	6018      	str	r0, [r3, #0]
	loop_error = sqrt(pow(loop_horizontal,2) + pow(loop_vertical,2))/loop_distance;
   10f6a:	4b1d      	ldr	r3, [pc, #116]	; (10fe0 <cal_loop_test+0x1ec>)
   10f6c:	6818      	ldr	r0, [r3, #0]
   10f6e:	47c0      	blx	r8
   10f70:	4b23      	ldr	r3, [pc, #140]	; (11000 <cal_loop_test+0x20c>)
   10f72:	0004      	movs	r4, r0
   10f74:	6818      	ldr	r0, [r3, #0]
   10f76:	000d      	movs	r5, r1
   10f78:	47c0      	blx	r8
   10f7a:	0022      	movs	r2, r4
   10f7c:	0006      	movs	r6, r0
   10f7e:	000f      	movs	r7, r1
   10f80:	002b      	movs	r3, r5
   10f82:	0020      	movs	r0, r4
   10f84:	0029      	movs	r1, r5
   10f86:	47c8      	blx	r9
   10f88:	0032      	movs	r2, r6
   10f8a:	0004      	movs	r4, r0
   10f8c:	000d      	movs	r5, r1
   10f8e:	003b      	movs	r3, r7
   10f90:	0030      	movs	r0, r6
   10f92:	0039      	movs	r1, r7
   10f94:	47c8      	blx	r9
   10f96:	0002      	movs	r2, r0
   10f98:	000b      	movs	r3, r1
   10f9a:	0020      	movs	r0, r4
   10f9c:	0029      	movs	r1, r5
   10f9e:	4c19      	ldr	r4, [pc, #100]	; (11004 <cal_loop_test+0x210>)
   10fa0:	47a0      	blx	r4
   10fa2:	47d0      	blx	sl
   10fa4:	4b0b      	ldr	r3, [pc, #44]	; (10fd4 <cal_loop_test+0x1e0>)
   10fa6:	0004      	movs	r4, r0
   10fa8:	6818      	ldr	r0, [r3, #0]
   10faa:	000d      	movs	r5, r1
   10fac:	47c0      	blx	r8
   10fae:	0002      	movs	r2, r0
   10fb0:	000b      	movs	r3, r1
   10fb2:	0020      	movs	r0, r4
   10fb4:	0029      	movs	r1, r5
   10fb6:	4c17      	ldr	r4, [pc, #92]	; (11014 <cal_loop_test+0x220>)
   10fb8:	47a0      	blx	r4
   10fba:	47d8      	blx	fp
   10fbc:	4b16      	ldr	r3, [pc, #88]	; (11018 <cal_loop_test+0x224>)
   10fbe:	6018      	str	r0, [r3, #0]
}
   10fc0:	b00d      	add	sp, #52	; 0x34
   10fc2:	bc3c      	pop	{r2, r3, r4, r5}
   10fc4:	4690      	mov	r8, r2
   10fc6:	4699      	mov	r9, r3
   10fc8:	46a2      	mov	sl, r4
   10fca:	46ab      	mov	fp, r5
   10fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10fce:	46c0      	nop			; (mov r8, r8)
   10fd0:	20003340 	.word	0x20003340
   10fd4:	20003324 	.word	0x20003324
   10fd8:	0001d235 	.word	0x0001d235
   10fdc:	0001fb6d 	.word	0x0001fb6d
   10fe0:	20003fdc 	.word	0x20003fdc
   10fe4:	200055cc 	.word	0x200055cc
   10fe8:	3c8efa35 	.word	0x3c8efa35
   10fec:	0001d939 	.word	0x0001d939
   10ff0:	0001a2c9 	.word	0x0001a2c9
   10ff4:	0001eea5 	.word	0x0001eea5
   10ff8:	0001fc11 	.word	0x0001fc11
   10ffc:	0001a355 	.word	0x0001a355
   11000:	2000331c 	.word	0x2000331c
   11004:	0001e01d 	.word	0x0001e01d
   11008:	0001a745 	.word	0x0001a745
   1100c:	0001a3e5 	.word	0x0001a3e5
   11010:	404ca5dc 	.word	0x404ca5dc
   11014:	0001e63d 	.word	0x0001e63d
   11018:	200054ac 	.word	0x200054ac

0001101c <cal_inc_azm_eval>:
void cal_inc_azm_eval(void){
   1101c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1101e:	46de      	mov	lr, fp
   11020:	4657      	mov	r7, sl
   11022:	464e      	mov	r6, r9
   11024:	4645      	mov	r5, r8
   11026:	b5e0      	push	{r5, r6, r7, lr}
   11028:	4cd2      	ldr	r4, [pc, #840]	; (11374 <cal_inc_azm_eval+0x358>)
	get_time();//  Get current time
   1102a:	4bd3      	ldr	r3, [pc, #844]	; (11378 <cal_inc_azm_eval+0x35c>)
void cal_inc_azm_eval(void){
   1102c:	44a5      	add	sp, r4
	get_time();//  Get current time
   1102e:	4798      	blx	r3
	cal_report.software_version = SOFTWARE_VERSION;
   11030:	2381      	movs	r3, #129	; 0x81
   11032:	4ad2      	ldr	r2, [pc, #840]	; (1137c <cal_inc_azm_eval+0x360>)
   11034:	05db      	lsls	r3, r3, #23
   11036:	6013      	str	r3, [r2, #0]
	cal_report.points = nPoints;
   11038:	4bd1      	ldr	r3, [pc, #836]	; (11380 <cal_inc_azm_eval+0x364>)
   1103a:	6819      	ldr	r1, [r3, #0]
   1103c:	469a      	mov	sl, r3
	cal_report.groups = nGroups;
   1103e:	4bd1      	ldr	r3, [pc, #836]	; (11384 <cal_inc_azm_eval+0x368>)
	cal_report.points = nPoints;
   11040:	6091      	str	r1, [r2, #8]
	cal_report.groups = nGroups;
   11042:	681b      	ldr	r3, [r3, #0]
   11044:	6053      	str	r3, [r2, #4]
	for (p=0;p<nPoints;p++){
   11046:	2900      	cmp	r1, #0
   11048:	d100      	bne.n	1104c <cal_inc_azm_eval+0x30>
   1104a:	e18a      	b.n	11362 <cal_inc_azm_eval+0x346>
   1104c:	4bce      	ldr	r3, [pc, #824]	; (11388 <cal_inc_azm_eval+0x36c>)
   1104e:	930d      	str	r3, [sp, #52]	; 0x34
   11050:	001f      	movs	r7, r3
   11052:	4bce      	ldr	r3, [pc, #824]	; (1138c <cal_inc_azm_eval+0x370>)
   11054:	930a      	str	r3, [sp, #40]	; 0x28
   11056:	001e      	movs	r6, r3
   11058:	4bcd      	ldr	r3, [pc, #820]	; (11390 <cal_inc_azm_eval+0x374>)
   1105a:	930b      	str	r3, [sp, #44]	; 0x2c
   1105c:	001d      	movs	r5, r3
   1105e:	4bcd      	ldr	r3, [pc, #820]	; (11394 <cal_inc_azm_eval+0x378>)
   11060:	930c      	str	r3, [sp, #48]	; 0x30
   11062:	001c      	movs	r4, r3
   11064:	2300      	movs	r3, #0
   11066:	4698      	mov	r8, r3
   11068:	4bcb      	ldr	r3, [pc, #812]	; (11398 <cal_inc_azm_eval+0x37c>)
   1106a:	469b      	mov	fp, r3
			temp_meas.m2Cal[i] = m2Cal[p][i];
   1106c:	2380      	movs	r3, #128	; 0x80
   1106e:	4699      	mov	r9, r3
   11070:	2120      	movs	r1, #32
   11072:	464a      	mov	r2, r9
			temp_meas.a1Cal[i] = a1Cal[p][i];
   11074:	683b      	ldr	r3, [r7, #0]
		calc_orientation(&temp_meas);
   11076:	a816      	add	r0, sp, #88	; 0x58
			temp_meas.a1Cal[i] = a1Cal[p][i];
   11078:	932b      	str	r3, [sp, #172]	; 0xac
			temp_meas.a2Cal[i] = a2Cal[p][i];
   1107a:	6833      	ldr	r3, [r6, #0]
   1107c:	932e      	str	r3, [sp, #184]	; 0xb8
			temp_meas.m1Cal[i] = m1Cal[p][i];
   1107e:	682b      	ldr	r3, [r5, #0]
   11080:	9331      	str	r3, [sp, #196]	; 0xc4
			temp_meas.m2Cal[i] = m2Cal[p][i];
   11082:	6823      	ldr	r3, [r4, #0]
   11084:	9334      	str	r3, [sp, #208]	; 0xd0
			temp_meas.a1Cal[i] = a1Cal[p][i];
   11086:	687b      	ldr	r3, [r7, #4]
   11088:	932c      	str	r3, [sp, #176]	; 0xb0
			temp_meas.a2Cal[i] = a2Cal[p][i];
   1108a:	6873      	ldr	r3, [r6, #4]
   1108c:	932f      	str	r3, [sp, #188]	; 0xbc
			temp_meas.m1Cal[i] = m1Cal[p][i];
   1108e:	686b      	ldr	r3, [r5, #4]
   11090:	9332      	str	r3, [sp, #200]	; 0xc8
			temp_meas.m2Cal[i] = m2Cal[p][i];
   11092:	6863      	ldr	r3, [r4, #4]
   11094:	9335      	str	r3, [sp, #212]	; 0xd4
			temp_meas.a1Cal[i] = a1Cal[p][i];
   11096:	68bb      	ldr	r3, [r7, #8]
   11098:	370c      	adds	r7, #12
   1109a:	932d      	str	r3, [sp, #180]	; 0xb4
			temp_meas.a2Cal[i] = a2Cal[p][i];
   1109c:	68b3      	ldr	r3, [r6, #8]
   1109e:	360c      	adds	r6, #12
   110a0:	9330      	str	r3, [sp, #192]	; 0xc0
			temp_meas.m1Cal[i] = m1Cal[p][i];
   110a2:	68ab      	ldr	r3, [r5, #8]
   110a4:	350c      	adds	r5, #12
   110a6:	9333      	str	r3, [sp, #204]	; 0xcc
			temp_meas.m2Cal[i] = m2Cal[p][i];
   110a8:	ab0e      	add	r3, sp, #56	; 0x38
   110aa:	185b      	adds	r3, r3, r1
   110ac:	68a1      	ldr	r1, [r4, #8]
   110ae:	340c      	adds	r4, #12
   110b0:	5099      	str	r1, [r3, r2]
		calc_orientation(&temp_meas);
   110b2:	4bba      	ldr	r3, [pc, #744]	; (1139c <cal_inc_azm_eval+0x380>)
   110b4:	4798      	blx	r3
   110b6:	4643      	mov	r3, r8
		azimuth[p] = temp_meas.azimuth;
   110b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   110ba:	009b      	lsls	r3, r3, #2
   110bc:	9200      	str	r2, [sp, #0]
   110be:	9900      	ldr	r1, [sp, #0]
   110c0:	4ab7      	ldr	r2, [pc, #732]	; (113a0 <cal_inc_azm_eval+0x384>)
   110c2:	50d1      	str	r1, [r2, r3]
		inclination[p] = temp_meas.inclination;
   110c4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   110c6:	9200      	str	r2, [sp, #0]
   110c8:	465a      	mov	r2, fp
   110ca:	9900      	ldr	r1, [sp, #0]
   110cc:	50d1      	str	r1, [r2, r3]
		roll[p] = temp_meas.roll;
   110ce:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   110d0:	9200      	str	r2, [sp, #0]
   110d2:	9900      	ldr	r1, [sp, #0]
   110d4:	4ab3      	ldr	r2, [pc, #716]	; (113a4 <cal_inc_azm_eval+0x388>)
   110d6:	50d1      	str	r1, [r2, r3]
	for (p=0;p<nPoints;p++){
   110d8:	2301      	movs	r3, #1
   110da:	469c      	mov	ip, r3
   110dc:	4653      	mov	r3, sl
   110de:	6819      	ldr	r1, [r3, #0]
   110e0:	44e0      	add	r8, ip
   110e2:	4541      	cmp	r1, r8
   110e4:	d8c4      	bhi.n	11070 <cal_inc_azm_eval+0x54>
   110e6:	4ba7      	ldr	r3, [pc, #668]	; (11384 <cal_inc_azm_eval+0x368>)
   110e8:	681b      	ldr	r3, [r3, #0]
	for (g=0;g<nGroups;g++){
   110ea:	2b00      	cmp	r3, #0
   110ec:	d100      	bne.n	110f0 <cal_inc_azm_eval+0xd4>
   110ee:	e133      	b.n	11358 <cal_inc_azm_eval+0x33c>
   110f0:	aaa8      	add	r2, sp, #672	; 0x2a0
   110f2:	9208      	str	r2, [sp, #32]
   110f4:	4691      	mov	r9, r2
   110f6:	2203      	movs	r2, #3
   110f8:	9204      	str	r2, [sp, #16]
   110fa:	2200      	movs	r2, #0
   110fc:	4ba8      	ldr	r3, [pc, #672]	; (113a0 <cal_inc_azm_eval+0x384>)
   110fe:	9205      	str	r2, [sp, #20]
   11100:	4698      	mov	r8, r3
   11102:	aa0e      	add	r2, sp, #56	; 0x38
   11104:	ab44      	add	r3, sp, #272	; 0x110
					azm_group[k] = azm_group[k]+360;
   11106:	0014      	movs	r4, r2
   11108:	469b      	mov	fp, r3
   1110a:	4fa3      	ldr	r7, [pc, #652]	; (11398 <cal_inc_azm_eval+0x37c>)
   1110c:	9309      	str	r3, [sp, #36]	; 0x24
   1110e:	ae12      	add	r6, sp, #72	; 0x48
   11110:	9702      	str	r7, [sp, #8]
			inc_group[k] = inclination[ind1];
   11112:	9a02      	ldr	r2, [sp, #8]
			if (azm_group[k]>340){
   11114:	49a4      	ldr	r1, [pc, #656]	; (113a8 <cal_inc_azm_eval+0x38c>)
			inc_group[k] = inclination[ind1];
   11116:	6813      	ldr	r3, [r2, #0]
   11118:	6852      	ldr	r2, [r2, #4]
   1111a:	6023      	str	r3, [r4, #0]
   1111c:	6062      	str	r2, [r4, #4]
			azm_group[k] = azimuth[ind1];
   1111e:	4643      	mov	r3, r8
   11120:	4642      	mov	r2, r8
   11122:	681b      	ldr	r3, [r3, #0]
   11124:	6855      	ldr	r5, [r2, #4]
   11126:	9303      	str	r3, [sp, #12]
			if (azm_group[k]>340){
   11128:	4aa0      	ldr	r2, [pc, #640]	; (113ac <cal_inc_azm_eval+0x390>)
			azm_group[k] = azimuth[ind1];
   1112a:	6033      	str	r3, [r6, #0]
   1112c:	6075      	str	r5, [r6, #4]
			if (azm_group[k]>340){
   1112e:	1c28      	adds	r0, r5, #0
			azm_group[k] = azimuth[ind1];
   11130:	1c1f      	adds	r7, r3, #0
			if (azm_group[k]>340){
   11132:	4790      	blx	r2
   11134:	2201      	movs	r2, #1
   11136:	9200      	str	r2, [sp, #0]
   11138:	2800      	cmp	r0, #0
   1113a:	d10d      	bne.n	11158 <cal_inc_azm_eval+0x13c>
   1113c:	466b      	mov	r3, sp
   1113e:	499a      	ldr	r1, [pc, #616]	; (113a8 <cal_inc_azm_eval+0x38c>)
   11140:	701a      	strb	r2, [r3, #0]
   11142:	1c38      	adds	r0, r7, #0
   11144:	4b99      	ldr	r3, [pc, #612]	; (113ac <cal_inc_azm_eval+0x390>)
   11146:	4798      	blx	r3
   11148:	2800      	cmp	r0, #0
   1114a:	d102      	bne.n	11152 <cal_inc_azm_eval+0x136>
   1114c:	2300      	movs	r3, #0
   1114e:	466a      	mov	r2, sp
   11150:	7013      	strb	r3, [r2, #0]
   11152:	466b      	mov	r3, sp
   11154:	781b      	ldrb	r3, [r3, #0]
   11156:	9300      	str	r3, [sp, #0]
			inc_group[k] = inclination[ind1];
   11158:	9f02      	ldr	r7, [sp, #8]
			if (azm_group[k]>340){
   1115a:	4993      	ldr	r1, [pc, #588]	; (113a8 <cal_inc_azm_eval+0x38c>)
			inc_group[k] = inclination[ind1];
   1115c:	68bb      	ldr	r3, [r7, #8]
   1115e:	60a3      	str	r3, [r4, #8]
			azm_group[k] = azimuth[ind1];
   11160:	4643      	mov	r3, r8
   11162:	689b      	ldr	r3, [r3, #8]
   11164:	9306      	str	r3, [sp, #24]
   11166:	60b3      	str	r3, [r6, #8]
			if (azm_group[k]>340){
   11168:	1c18      	adds	r0, r3, #0
   1116a:	4b90      	ldr	r3, [pc, #576]	; (113ac <cal_inc_azm_eval+0x390>)
   1116c:	4798      	blx	r3
			inc_group[k] = inclination[ind1];
   1116e:	68fb      	ldr	r3, [r7, #12]
   11170:	60e3      	str	r3, [r4, #12]
			azm_group[k] = azimuth[ind1];
   11172:	4643      	mov	r3, r8
   11174:	68db      	ldr	r3, [r3, #12]
   11176:	9307      	str	r3, [sp, #28]
   11178:	60f3      	str	r3, [r6, #12]
			if (azm_group[k]>340){
   1117a:	2800      	cmp	r0, #0
   1117c:	d108      	bne.n	11190 <cal_inc_azm_eval+0x174>
   1117e:	1c18      	adds	r0, r3, #0
   11180:	4989      	ldr	r1, [pc, #548]	; (113a8 <cal_inc_azm_eval+0x38c>)
   11182:	4b8a      	ldr	r3, [pc, #552]	; (113ac <cal_inc_azm_eval+0x390>)
   11184:	4798      	blx	r3
   11186:	2800      	cmp	r0, #0
   11188:	d102      	bne.n	11190 <cal_inc_azm_eval+0x174>
		if (wrap_around){
   1118a:	9b00      	ldr	r3, [sp, #0]
   1118c:	2b00      	cmp	r3, #0
   1118e:	d02e      	beq.n	111ee <cal_inc_azm_eval+0x1d2>
				if (azm_group[k]<20){
   11190:	9f03      	ldr	r7, [sp, #12]
   11192:	4987      	ldr	r1, [pc, #540]	; (113b0 <cal_inc_azm_eval+0x394>)
   11194:	1c38      	adds	r0, r7, #0
   11196:	4b87      	ldr	r3, [pc, #540]	; (113b4 <cal_inc_azm_eval+0x398>)
   11198:	4798      	blx	r3
   1119a:	2800      	cmp	r0, #0
   1119c:	d004      	beq.n	111a8 <cal_inc_azm_eval+0x18c>
					azm_group[k] = azm_group[k]+360;
   1119e:	4986      	ldr	r1, [pc, #536]	; (113b8 <cal_inc_azm_eval+0x39c>)
   111a0:	1c38      	adds	r0, r7, #0
   111a2:	4b86      	ldr	r3, [pc, #536]	; (113bc <cal_inc_azm_eval+0x3a0>)
   111a4:	4798      	blx	r3
   111a6:	6030      	str	r0, [r6, #0]
				if (azm_group[k]<20){
   111a8:	4981      	ldr	r1, [pc, #516]	; (113b0 <cal_inc_azm_eval+0x394>)
   111aa:	1c28      	adds	r0, r5, #0
   111ac:	4b81      	ldr	r3, [pc, #516]	; (113b4 <cal_inc_azm_eval+0x398>)
   111ae:	4798      	blx	r3
   111b0:	2800      	cmp	r0, #0
   111b2:	d004      	beq.n	111be <cal_inc_azm_eval+0x1a2>
					azm_group[k] = azm_group[k]+360;
   111b4:	4980      	ldr	r1, [pc, #512]	; (113b8 <cal_inc_azm_eval+0x39c>)
   111b6:	1c28      	adds	r0, r5, #0
   111b8:	4b80      	ldr	r3, [pc, #512]	; (113bc <cal_inc_azm_eval+0x3a0>)
   111ba:	4798      	blx	r3
   111bc:	6070      	str	r0, [r6, #4]
				if (azm_group[k]<20){
   111be:	9d06      	ldr	r5, [sp, #24]
   111c0:	497b      	ldr	r1, [pc, #492]	; (113b0 <cal_inc_azm_eval+0x394>)
   111c2:	1c28      	adds	r0, r5, #0
   111c4:	4b7b      	ldr	r3, [pc, #492]	; (113b4 <cal_inc_azm_eval+0x398>)
   111c6:	4798      	blx	r3
   111c8:	2800      	cmp	r0, #0
   111ca:	d004      	beq.n	111d6 <cal_inc_azm_eval+0x1ba>
					azm_group[k] = azm_group[k]+360;
   111cc:	497a      	ldr	r1, [pc, #488]	; (113b8 <cal_inc_azm_eval+0x39c>)
   111ce:	1c28      	adds	r0, r5, #0
   111d0:	4b7a      	ldr	r3, [pc, #488]	; (113bc <cal_inc_azm_eval+0x3a0>)
   111d2:	4798      	blx	r3
   111d4:	60b0      	str	r0, [r6, #8]
				if (azm_group[k]<20){
   111d6:	9d07      	ldr	r5, [sp, #28]
   111d8:	4975      	ldr	r1, [pc, #468]	; (113b0 <cal_inc_azm_eval+0x394>)
   111da:	1c28      	adds	r0, r5, #0
   111dc:	4b75      	ldr	r3, [pc, #468]	; (113b4 <cal_inc_azm_eval+0x398>)
   111de:	4798      	blx	r3
   111e0:	2800      	cmp	r0, #0
   111e2:	d004      	beq.n	111ee <cal_inc_azm_eval+0x1d2>
					azm_group[k] = azm_group[k]+360;
   111e4:	4974      	ldr	r1, [pc, #464]	; (113b8 <cal_inc_azm_eval+0x39c>)
   111e6:	1c28      	adds	r0, r5, #0
   111e8:	4b74      	ldr	r3, [pc, #464]	; (113bc <cal_inc_azm_eval+0x3a0>)
   111ea:	4798      	blx	r3
   111ec:	60f0      	str	r0, [r6, #12]
		inc_avg = meanArr(inc_group, GROUP_SIZE);
   111ee:	0020      	movs	r0, r4
   111f0:	2104      	movs	r1, #4
   111f2:	4b73      	ldr	r3, [pc, #460]	; (113c0 <cal_inc_azm_eval+0x3a4>)
   111f4:	4798      	blx	r3
		azm_avg = meanArr(azm_group, GROUP_SIZE);
   111f6:	2104      	movs	r1, #4
		inc_avg = meanArr(inc_group, GROUP_SIZE);
   111f8:	1c05      	adds	r5, r0, #0
		azm_avg = meanArr(azm_group, GROUP_SIZE);
   111fa:	4b71      	ldr	r3, [pc, #452]	; (113c0 <cal_inc_azm_eval+0x3a4>)
   111fc:	0030      	movs	r0, r6
   111fe:	4798      	blx	r3
			inc_err_array[ind1] = inc_group[k]-inc_avg;
   11200:	1c29      	adds	r1, r5, #0
		azm_avg = meanArr(azm_group, GROUP_SIZE);
   11202:	1c07      	adds	r7, r0, #0
			inc_err_array[ind1] = inc_group[k]-inc_avg;
   11204:	4b6f      	ldr	r3, [pc, #444]	; (113c4 <cal_inc_azm_eval+0x3a8>)
   11206:	980e      	ldr	r0, [sp, #56]	; 0x38
   11208:	4798      	blx	r3
   1120a:	465b      	mov	r3, fp
			azm_err_array[ind1] = (azm_group[k]-azm_avg)*cos(inc_avg*DEG2RAD);
   1120c:	496e      	ldr	r1, [pc, #440]	; (113c8 <cal_inc_azm_eval+0x3ac>)
			inc_err_array[ind1] = inc_group[k]-inc_avg;
   1120e:	6018      	str	r0, [r3, #0]
			azm_err_array[ind1] = (azm_group[k]-azm_avg)*cos(inc_avg*DEG2RAD);
   11210:	4b6e      	ldr	r3, [pc, #440]	; (113cc <cal_inc_azm_eval+0x3b0>)
   11212:	1c28      	adds	r0, r5, #0
   11214:	4798      	blx	r3
   11216:	4b6e      	ldr	r3, [pc, #440]	; (113d0 <cal_inc_azm_eval+0x3b4>)
   11218:	4798      	blx	r3
   1121a:	4b6e      	ldr	r3, [pc, #440]	; (113d4 <cal_inc_azm_eval+0x3b8>)
   1121c:	4798      	blx	r3
   1121e:	4b69      	ldr	r3, [pc, #420]	; (113c4 <cal_inc_azm_eval+0x3a8>)
   11220:	9000      	str	r0, [sp, #0]
   11222:	9101      	str	r1, [sp, #4]
   11224:	9703      	str	r7, [sp, #12]
   11226:	1c39      	adds	r1, r7, #0
   11228:	9812      	ldr	r0, [sp, #72]	; 0x48
   1122a:	4798      	blx	r3
   1122c:	4b68      	ldr	r3, [pc, #416]	; (113d0 <cal_inc_azm_eval+0x3b4>)
   1122e:	4798      	blx	r3
   11230:	9a00      	ldr	r2, [sp, #0]
   11232:	9b01      	ldr	r3, [sp, #4]
   11234:	4f68      	ldr	r7, [pc, #416]	; (113d8 <cal_inc_azm_eval+0x3bc>)
   11236:	47b8      	blx	r7
   11238:	4b68      	ldr	r3, [pc, #416]	; (113dc <cal_inc_azm_eval+0x3c0>)
   1123a:	4798      	blx	r3
   1123c:	464b      	mov	r3, r9
			inc_err_array[ind1] = inc_group[k]-inc_avg;
   1123e:	ac0e      	add	r4, sp, #56	; 0x38
			azm_err_array[ind1] = (azm_group[k]-azm_avg)*cos(inc_avg*DEG2RAD);
   11240:	6018      	str	r0, [r3, #0]
			inc_err_array[ind1] = inc_group[k]-inc_avg;
   11242:	1c29      	adds	r1, r5, #0
   11244:	4b5f      	ldr	r3, [pc, #380]	; (113c4 <cal_inc_azm_eval+0x3a8>)
   11246:	6860      	ldr	r0, [r4, #4]
   11248:	4798      	blx	r3
   1124a:	465b      	mov	r3, fp
			azm_err_array[ind1] = (azm_group[k]-azm_avg)*cos(inc_avg*DEG2RAD);
   1124c:	ae12      	add	r6, sp, #72	; 0x48
			inc_err_array[ind1] = inc_group[k]-inc_avg;
   1124e:	6058      	str	r0, [r3, #4]
			azm_err_array[ind1] = (azm_group[k]-azm_avg)*cos(inc_avg*DEG2RAD);
   11250:	9903      	ldr	r1, [sp, #12]
   11252:	4b5c      	ldr	r3, [pc, #368]	; (113c4 <cal_inc_azm_eval+0x3a8>)
   11254:	6870      	ldr	r0, [r6, #4]
   11256:	4798      	blx	r3
   11258:	4b5d      	ldr	r3, [pc, #372]	; (113d0 <cal_inc_azm_eval+0x3b4>)
   1125a:	4798      	blx	r3
   1125c:	9a00      	ldr	r2, [sp, #0]
   1125e:	9b01      	ldr	r3, [sp, #4]
   11260:	47b8      	blx	r7
   11262:	4b5e      	ldr	r3, [pc, #376]	; (113dc <cal_inc_azm_eval+0x3c0>)
   11264:	4798      	blx	r3
   11266:	464b      	mov	r3, r9
			inc_err_array[ind1] = inc_group[k]-inc_avg;
   11268:	1c29      	adds	r1, r5, #0
			azm_err_array[ind1] = (azm_group[k]-azm_avg)*cos(inc_avg*DEG2RAD);
   1126a:	6058      	str	r0, [r3, #4]
			inc_err_array[ind1] = inc_group[k]-inc_avg;
   1126c:	4b55      	ldr	r3, [pc, #340]	; (113c4 <cal_inc_azm_eval+0x3a8>)
   1126e:	68a0      	ldr	r0, [r4, #8]
   11270:	4798      	blx	r3
   11272:	465b      	mov	r3, fp
			azm_err_array[ind1] = (azm_group[k]-azm_avg)*cos(inc_avg*DEG2RAD);
   11274:	9903      	ldr	r1, [sp, #12]
			inc_err_array[ind1] = inc_group[k]-inc_avg;
   11276:	6098      	str	r0, [r3, #8]
			azm_err_array[ind1] = (azm_group[k]-azm_avg)*cos(inc_avg*DEG2RAD);
   11278:	4b52      	ldr	r3, [pc, #328]	; (113c4 <cal_inc_azm_eval+0x3a8>)
   1127a:	68b0      	ldr	r0, [r6, #8]
   1127c:	4798      	blx	r3
   1127e:	4b54      	ldr	r3, [pc, #336]	; (113d0 <cal_inc_azm_eval+0x3b4>)
   11280:	4798      	blx	r3
   11282:	9a00      	ldr	r2, [sp, #0]
   11284:	9b01      	ldr	r3, [sp, #4]
   11286:	47b8      	blx	r7
   11288:	4b54      	ldr	r3, [pc, #336]	; (113dc <cal_inc_azm_eval+0x3c0>)
   1128a:	4798      	blx	r3
   1128c:	464b      	mov	r3, r9
   1128e:	6098      	str	r0, [r3, #8]
			inc_err_array[ind1] = inc_group[k]-inc_avg;
   11290:	9b04      	ldr	r3, [sp, #16]
   11292:	1c29      	adds	r1, r5, #0
   11294:	009b      	lsls	r3, r3, #2
   11296:	9306      	str	r3, [sp, #24]
   11298:	4f4a      	ldr	r7, [pc, #296]	; (113c4 <cal_inc_azm_eval+0x3a8>)
   1129a:	68e0      	ldr	r0, [r4, #12]
   1129c:	47b8      	blx	r7
   1129e:	9f09      	ldr	r7, [sp, #36]	; 0x24
   112a0:	9d06      	ldr	r5, [sp, #24]
			azm_err_array[ind1] = (azm_group[k]-azm_avg)*cos(inc_avg*DEG2RAD);
   112a2:	9903      	ldr	r1, [sp, #12]
			inc_err_array[ind1] = inc_group[k]-inc_avg;
   112a4:	5178      	str	r0, [r7, r5]
			azm_err_array[ind1] = (azm_group[k]-azm_avg)*cos(inc_avg*DEG2RAD);
   112a6:	4f47      	ldr	r7, [pc, #284]	; (113c4 <cal_inc_azm_eval+0x3a8>)
   112a8:	68f0      	ldr	r0, [r6, #12]
   112aa:	47b8      	blx	r7
   112ac:	4948      	ldr	r1, [pc, #288]	; (113d0 <cal_inc_azm_eval+0x3b4>)
   112ae:	4788      	blx	r1
   112b0:	9a00      	ldr	r2, [sp, #0]
   112b2:	9b01      	ldr	r3, [sp, #4]
   112b4:	4f48      	ldr	r7, [pc, #288]	; (113d8 <cal_inc_azm_eval+0x3bc>)
   112b6:	47b8      	blx	r7
   112b8:	4f48      	ldr	r7, [pc, #288]	; (113dc <cal_inc_azm_eval+0x3c0>)
   112ba:	47b8      	blx	r7
   112bc:	9908      	ldr	r1, [sp, #32]
   112be:	5148      	str	r0, [r1, r5]
   112c0:	2110      	movs	r1, #16
   112c2:	468c      	mov	ip, r1
	for (g=0;g<nGroups;g++){
   112c4:	9b05      	ldr	r3, [sp, #20]
   112c6:	9a02      	ldr	r2, [sp, #8]
   112c8:	3301      	adds	r3, #1
   112ca:	3210      	adds	r2, #16
   112cc:	9202      	str	r2, [sp, #8]
   112ce:	9a04      	ldr	r2, [sp, #16]
   112d0:	9305      	str	r3, [sp, #20]
   112d2:	3204      	adds	r2, #4
   112d4:	9204      	str	r2, [sp, #16]
   112d6:	4a2b      	ldr	r2, [pc, #172]	; (11384 <cal_inc_azm_eval+0x368>)
   112d8:	44e0      	add	r8, ip
   112da:	6812      	ldr	r2, [r2, #0]
   112dc:	44e3      	add	fp, ip
   112de:	44e1      	add	r9, ip
   112e0:	9200      	str	r2, [sp, #0]
   112e2:	429a      	cmp	r2, r3
   112e4:	d900      	bls.n	112e8 <cal_inc_azm_eval+0x2cc>
   112e6:	e714      	b.n	11112 <cal_inc_azm_eval+0xf6>
   112e8:	4653      	mov	r3, sl
   112ea:	6819      	ldr	r1, [r3, #0]
	cal_report.inc_angle_err = stdev(inc_err_array, nPoints);	 
   112ec:	4c3c      	ldr	r4, [pc, #240]	; (113e0 <cal_inc_azm_eval+0x3c4>)
   112ee:	9809      	ldr	r0, [sp, #36]	; 0x24
   112f0:	47a0      	blx	r4
   112f2:	4b22      	ldr	r3, [pc, #136]	; (1137c <cal_inc_azm_eval+0x360>)
   112f4:	6218      	str	r0, [r3, #32]
	cal_report.azm_angle_err = stdev(azm_err_array, nPoints);
   112f6:	4653      	mov	r3, sl
   112f8:	9808      	ldr	r0, [sp, #32]
   112fa:	6819      	ldr	r1, [r3, #0]
   112fc:	47a0      	blx	r4
   112fe:	4b1f      	ldr	r3, [pc, #124]	; (1137c <cal_inc_azm_eval+0x360>)
	cal_report.mag_stdev_a1 = calc_mag_stdev(a1Cal);
   11300:	4c38      	ldr	r4, [pc, #224]	; (113e4 <cal_inc_azm_eval+0x3c8>)
	cal_report.azm_angle_err = stdev(azm_err_array, nPoints);
   11302:	6258      	str	r0, [r3, #36]	; 0x24
	cal_report.mag_stdev_a1 = calc_mag_stdev(a1Cal);
   11304:	980d      	ldr	r0, [sp, #52]	; 0x34
   11306:	47a0      	blx	r4
   11308:	4b1c      	ldr	r3, [pc, #112]	; (1137c <cal_inc_azm_eval+0x360>)
   1130a:	6298      	str	r0, [r3, #40]	; 0x28
	cal_report.mag_stdev_a2 = calc_mag_stdev(a2Cal);
   1130c:	980a      	ldr	r0, [sp, #40]	; 0x28
   1130e:	47a0      	blx	r4
   11310:	4b1a      	ldr	r3, [pc, #104]	; (1137c <cal_inc_azm_eval+0x360>)
   11312:	62d8      	str	r0, [r3, #44]	; 0x2c
	cal_report.mag_stdev_m1 = calc_mag_stdev(m1Cal);
   11314:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11316:	47a0      	blx	r4
   11318:	4b18      	ldr	r3, [pc, #96]	; (1137c <cal_inc_azm_eval+0x360>)
   1131a:	6318      	str	r0, [r3, #48]	; 0x30
	cal_report.mag_stdev_m2 = calc_mag_stdev(m2Cal);
   1131c:	980c      	ldr	r0, [sp, #48]	; 0x30
   1131e:	47a0      	blx	r4
   11320:	4b16      	ldr	r3, [pc, #88]	; (1137c <cal_inc_azm_eval+0x360>)
	for (i=0;i<3;i++){
   11322:	2400      	movs	r4, #0
   11324:	001d      	movs	r5, r3
   11326:	4f30      	ldr	r7, [pc, #192]	; (113e8 <cal_inc_azm_eval+0x3cc>)
	cal_report.mag_stdev_m2 = calc_mag_stdev(m2Cal);
   11328:	6358      	str	r0, [r3, #52]	; 0x34
		cal_report.disp_stdev_acc[i]  = calc_disp_stdev(a1Cal, a2Cal, i);
   1132a:	b2e6      	uxtb	r6, r4
   1132c:	0032      	movs	r2, r6
   1132e:	990a      	ldr	r1, [sp, #40]	; 0x28
   11330:	980d      	ldr	r0, [sp, #52]	; 0x34
   11332:	47b8      	blx	r7
		cal_report.disp_stdev_comp[i] = calc_disp_stdev(m1Cal, m2Cal, i);
   11334:	0032      	movs	r2, r6
		cal_report.disp_stdev_acc[i]  = calc_disp_stdev(a1Cal, a2Cal, i);
   11336:	63a8      	str	r0, [r5, #56]	; 0x38
		cal_report.disp_stdev_comp[i] = calc_disp_stdev(m1Cal, m2Cal, i);
   11338:	990c      	ldr	r1, [sp, #48]	; 0x30
   1133a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1133c:	47b8      	blx	r7
	for (i=0;i<3;i++){
   1133e:	3401      	adds	r4, #1
		cal_report.disp_stdev_comp[i] = calc_disp_stdev(m1Cal, m2Cal, i);
   11340:	6468      	str	r0, [r5, #68]	; 0x44
   11342:	3504      	adds	r5, #4
	for (i=0;i<3;i++){
   11344:	2c03      	cmp	r4, #3
   11346:	d1f0      	bne.n	1132a <cal_inc_azm_eval+0x30e>
}
   11348:	4b28      	ldr	r3, [pc, #160]	; (113ec <cal_inc_azm_eval+0x3d0>)
   1134a:	449d      	add	sp, r3
   1134c:	bc3c      	pop	{r2, r3, r4, r5}
   1134e:	4690      	mov	r8, r2
   11350:	4699      	mov	r9, r3
   11352:	46a2      	mov	sl, r4
   11354:	46ab      	mov	fp, r5
   11356:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11358:	ab44      	add	r3, sp, #272	; 0x110
   1135a:	9309      	str	r3, [sp, #36]	; 0x24
   1135c:	aba8      	add	r3, sp, #672	; 0x2a0
   1135e:	9308      	str	r3, [sp, #32]
   11360:	e7c4      	b.n	112ec <cal_inc_azm_eval+0x2d0>
   11362:	4a09      	ldr	r2, [pc, #36]	; (11388 <cal_inc_azm_eval+0x36c>)
   11364:	920d      	str	r2, [sp, #52]	; 0x34
   11366:	4a09      	ldr	r2, [pc, #36]	; (1138c <cal_inc_azm_eval+0x370>)
   11368:	920a      	str	r2, [sp, #40]	; 0x28
   1136a:	4a09      	ldr	r2, [pc, #36]	; (11390 <cal_inc_azm_eval+0x374>)
   1136c:	920b      	str	r2, [sp, #44]	; 0x2c
   1136e:	4a09      	ldr	r2, [pc, #36]	; (11394 <cal_inc_azm_eval+0x378>)
   11370:	920c      	str	r2, [sp, #48]	; 0x30
   11372:	e6ba      	b.n	110ea <cal_inc_azm_eval+0xce>
   11374:	fffffbcc 	.word	0xfffffbcc
   11378:	00007c61 	.word	0x00007c61
   1137c:	20004b4c 	.word	0x20004b4c
   11380:	20003340 	.word	0x20003340
   11384:	20003924 	.word	0x20003924
   11388:	20004698 	.word	0x20004698
   1138c:	2000392c 	.word	0x2000392c
   11390:	20004bd8 	.word	0x20004bd8
   11394:	20002be0 	.word	0x20002be0
   11398:	20003de8 	.word	0x20003de8
   1139c:	000093c9 	.word	0x000093c9
   113a0:	20002138 	.word	0x20002138
   113a4:	2000508c 	.word	0x2000508c
   113a8:	43aa0000 	.word	0x43aa0000
   113ac:	0001d0d1 	.word	0x0001d0d1
   113b0:	41a00000 	.word	0x41a00000
   113b4:	0001d0a9 	.word	0x0001d0a9
   113b8:	43b40000 	.word	0x43b40000
   113bc:	0001d235 	.word	0x0001d235
   113c0:	00009835 	.word	0x00009835
   113c4:	0001db79 	.word	0x0001db79
   113c8:	3c8efa35 	.word	0x3c8efa35
   113cc:	0001d939 	.word	0x0001d939
   113d0:	0001fb6d 	.word	0x0001fb6d
   113d4:	0001a2c9 	.word	0x0001a2c9
   113d8:	0001eea5 	.word	0x0001eea5
   113dc:	0001fc11 	.word	0x0001fc11
   113e0:	00009751 	.word	0x00009751
   113e4:	00008da1 	.word	0x00008da1
   113e8:	00008f71 	.word	0x00008f71
   113ec:	00000434 	.word	0x00000434

000113f0 <cal_add_datapoint>:
void cal_add_datapoint(struct MEASUREMENT *meas_inst){
   113f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   113f2:	4657      	mov	r7, sl
   113f4:	46de      	mov	lr, fp
   113f6:	464e      	mov	r6, r9
   113f8:	4645      	mov	r5, r8
   113fa:	b5e0      	push	{r5, r6, r7, lr}
	if ((nGroups==0) && (ind_buf==0) && (groupPoints == 0)){
   113fc:	4f72      	ldr	r7, [pc, #456]	; (115c8 <cal_add_datapoint+0x1d8>)
void cal_add_datapoint(struct MEASUREMENT *meas_inst){
   113fe:	b08d      	sub	sp, #52	; 0x34
	if ((nGroups==0) && (ind_buf==0) && (groupPoints == 0)){
   11400:	683b      	ldr	r3, [r7, #0]
void cal_add_datapoint(struct MEASUREMENT *meas_inst){
   11402:	0004      	movs	r4, r0
	if ((nGroups==0) && (ind_buf==0) && (groupPoints == 0)){
   11404:	2b00      	cmp	r3, #0
   11406:	d100      	bne.n	1140a <cal_add_datapoint+0x1a>
   11408:	e0af      	b.n	1156a <cal_add_datapoint+0x17a>
   1140a:	4b70      	ldr	r3, [pc, #448]	; (115cc <cal_add_datapoint+0x1dc>)
   1140c:	9301      	str	r3, [sp, #4]
   1140e:	4b70      	ldr	r3, [pc, #448]	; (115d0 <cal_add_datapoint+0x1e0>)
   11410:	9300      	str	r3, [sp, #0]
   11412:	4b70      	ldr	r3, [pc, #448]	; (115d4 <cal_add_datapoint+0x1e4>)
   11414:	4698      	mov	r8, r3
   11416:	4b70      	ldr	r3, [pc, #448]	; (115d8 <cal_add_datapoint+0x1e8>)
   11418:	469b      	mov	fp, r3
		aXYZ[j] = 0.5*(meas_inst->a1Raw[j]+meas_inst->a2Raw[j]);
   1141a:	4d70      	ldr	r5, [pc, #448]	; (115dc <cal_add_datapoint+0x1ec>)
   1141c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1141e:	6b20      	ldr	r0, [r4, #48]	; 0x30
   11420:	47a8      	blx	r5
   11422:	21fc      	movs	r1, #252	; 0xfc
   11424:	4e6e      	ldr	r6, [pc, #440]	; (115e0 <cal_add_datapoint+0x1f0>)
   11426:	0589      	lsls	r1, r1, #22
   11428:	47b0      	blx	r6
		mXYZ[j] = 0.5*(meas_inst->m1Raw[j]+meas_inst->m2Raw[j]);
   1142a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
		aXYZ[j] = 0.5*(meas_inst->a1Raw[j]+meas_inst->a2Raw[j]);
   1142c:	9006      	str	r0, [sp, #24]
		mXYZ[j] = 0.5*(meas_inst->m1Raw[j]+meas_inst->m2Raw[j]);
   1142e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   11430:	47a8      	blx	r5
   11432:	21fc      	movs	r1, #252	; 0xfc
   11434:	0589      	lsls	r1, r1, #22
   11436:	47b0      	blx	r6
		aXYZ[j] = 0.5*(meas_inst->a1Raw[j]+meas_inst->a2Raw[j]);
   11438:	6b61      	ldr	r1, [r4, #52]	; 0x34
		mXYZ[j] = 0.5*(meas_inst->m1Raw[j]+meas_inst->m2Raw[j]);
   1143a:	9009      	str	r0, [sp, #36]	; 0x24
		aXYZ[j] = 0.5*(meas_inst->a1Raw[j]+meas_inst->a2Raw[j]);
   1143c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1143e:	47a8      	blx	r5
   11440:	21fc      	movs	r1, #252	; 0xfc
   11442:	0589      	lsls	r1, r1, #22
   11444:	47b0      	blx	r6
		mXYZ[j] = 0.5*(meas_inst->m1Raw[j]+meas_inst->m2Raw[j]);
   11446:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
		aXYZ[j] = 0.5*(meas_inst->a1Raw[j]+meas_inst->a2Raw[j]);
   11448:	9007      	str	r0, [sp, #28]
		mXYZ[j] = 0.5*(meas_inst->m1Raw[j]+meas_inst->m2Raw[j]);
   1144a:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1144c:	47a8      	blx	r5
   1144e:	21fc      	movs	r1, #252	; 0xfc
   11450:	0589      	lsls	r1, r1, #22
   11452:	47b0      	blx	r6
		aXYZ[j] = 0.5*(meas_inst->a1Raw[j]+meas_inst->a2Raw[j]);
   11454:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		mXYZ[j] = 0.5*(meas_inst->m1Raw[j]+meas_inst->m2Raw[j]);
   11456:	900a      	str	r0, [sp, #40]	; 0x28
		aXYZ[j] = 0.5*(meas_inst->a1Raw[j]+meas_inst->a2Raw[j]);
   11458:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1145a:	47a8      	blx	r5
   1145c:	21fc      	movs	r1, #252	; 0xfc
   1145e:	0589      	lsls	r1, r1, #22
   11460:	47b0      	blx	r6
		mXYZ[j] = 0.5*(meas_inst->m1Raw[j]+meas_inst->m2Raw[j]);
   11462:	6d21      	ldr	r1, [r4, #80]	; 0x50
		aXYZ[j] = 0.5*(meas_inst->a1Raw[j]+meas_inst->a2Raw[j]);
   11464:	9008      	str	r0, [sp, #32]
		mXYZ[j] = 0.5*(meas_inst->m1Raw[j]+meas_inst->m2Raw[j]);
   11466:	6c60      	ldr	r0, [r4, #68]	; 0x44
   11468:	47a8      	blx	r5
   1146a:	21fc      	movs	r1, #252	; 0xfc
   1146c:	0589      	lsls	r1, r1, #22
   1146e:	47b0      	blx	r6
	calc_theta_XY(aXYZ, &foo, &aX_ang);
   11470:	4b5c      	ldr	r3, [pc, #368]	; (115e4 <cal_add_datapoint+0x1f4>)
		mXYZ[j] = 0.5*(meas_inst->m1Raw[j]+meas_inst->m2Raw[j]);
   11472:	900b      	str	r0, [sp, #44]	; 0x2c
	calc_theta_XY(aXYZ, &foo, &aX_ang);
   11474:	aa03      	add	r2, sp, #12
   11476:	a905      	add	r1, sp, #20
   11478:	a806      	add	r0, sp, #24
   1147a:	4699      	mov	r9, r3
   1147c:	4798      	blx	r3
	calc_theta_XY(mXYZ, &foo, &mX_ang);
   1147e:	aa04      	add	r2, sp, #16
   11480:	a905      	add	r1, sp, #20
   11482:	a809      	add	r0, sp, #36	; 0x24
   11484:	47c8      	blx	r9
	aDelta = fabs(aX_ang - aX_ang_ref);
   11486:	9b03      	ldr	r3, [sp, #12]
   11488:	4699      	mov	r9, r3
	mDelta = fabs(mX_ang - mX_ang_ref);
   1148a:	9b04      	ldr	r3, [sp, #16]
	aDelta = fabs(aX_ang - aX_ang_ref);
   1148c:	4648      	mov	r0, r9
	mDelta = fabs(mX_ang - mX_ang_ref);
   1148e:	1c1d      	adds	r5, r3, #0
	aDelta = fabs(aX_ang - aX_ang_ref);
   11490:	4b55      	ldr	r3, [pc, #340]	; (115e8 <cal_add_datapoint+0x1f8>)
   11492:	469a      	mov	sl, r3
   11494:	4643      	mov	r3, r8
   11496:	6819      	ldr	r1, [r3, #0]
   11498:	47d0      	blx	sl
	if ((aDelta>DELTA_ANG_MIN)||(mDelta>DELTA_ANG_MIN)){
   1149a:	2182      	movs	r1, #130	; 0x82
	aDelta = fabs(aX_ang - aX_ang_ref);
   1149c:	0040      	lsls	r0, r0, #1
   1149e:	0840      	lsrs	r0, r0, #1
	if ((aDelta>DELTA_ANG_MIN)||(mDelta>DELTA_ANG_MIN)){
   114a0:	05c9      	lsls	r1, r1, #23
   114a2:	4b52      	ldr	r3, [pc, #328]	; (115ec <cal_add_datapoint+0x1fc>)
   114a4:	4798      	blx	r3
   114a6:	2800      	cmp	r0, #0
   114a8:	d10c      	bne.n	114c4 <cal_add_datapoint+0xd4>
	mDelta = fabs(mX_ang - mX_ang_ref);
   114aa:	465b      	mov	r3, fp
   114ac:	1c28      	adds	r0, r5, #0
   114ae:	6819      	ldr	r1, [r3, #0]
   114b0:	47d0      	blx	sl
	if ((aDelta>DELTA_ANG_MIN)||(mDelta>DELTA_ANG_MIN)){
   114b2:	2182      	movs	r1, #130	; 0x82
	mDelta = fabs(mX_ang - mX_ang_ref);
   114b4:	0040      	lsls	r0, r0, #1
   114b6:	0840      	lsrs	r0, r0, #1
	if ((aDelta>DELTA_ANG_MIN)||(mDelta>DELTA_ANG_MIN)){
   114b8:	05c9      	lsls	r1, r1, #23
   114ba:	4b4c      	ldr	r3, [pc, #304]	; (115ec <cal_add_datapoint+0x1fc>)
   114bc:	4798      	blx	r3
   114be:	2800      	cmp	r0, #0
   114c0:	d100      	bne.n	114c4 <cal_add_datapoint+0xd4>
   114c2:	e070      	b.n	115a6 <cal_add_datapoint+0x1b6>
		if (groupPoints>= GROUP_SIZE){
   114c4:	9b00      	ldr	r3, [sp, #0]
   114c6:	781b      	ldrb	r3, [r3, #0]
   114c8:	2b03      	cmp	r3, #3
   114ca:	d862      	bhi.n	11592 <cal_add_datapoint+0x1a2>
   114cc:	4b48      	ldr	r3, [pc, #288]	; (115f0 <cal_add_datapoint+0x200>)
   114ce:	781a      	ldrb	r2, [r3, #0]
		aX_ang_ref = aX_ang;
   114d0:	4643      	mov	r3, r8
   114d2:	4649      	mov	r1, r9
   114d4:	6019      	str	r1, [r3, #0]
		mX_ang_ref = mX_ang;
   114d6:	465b      	mov	r3, fp
   114d8:	601d      	str	r5, [r3, #0]
   114da:	2301      	movs	r3, #1
   114dc:	2001      	movs	r0, #1
   114de:	469c      	mov	ip, r3
   114e0:	2100      	movs	r1, #0
	ind_stack = (currentGroup-1)*GROUP_SIZE+ind_buf;
   114e2:	1e53      	subs	r3, r2, #1
   114e4:	009b      	lsls	r3, r3, #2
   114e6:	185b      	adds	r3, r3, r1
   114e8:	2b63      	cmp	r3, #99	; 0x63
   114ea:	d900      	bls.n	114ee <cal_add_datapoint+0xfe>
   114ec:	2363      	movs	r3, #99	; 0x63
		a1Raw[ind_stack][j] = meas_inst->a1Raw[j];
   114ee:	4941      	ldr	r1, [pc, #260]	; (115f4 <cal_add_datapoint+0x204>)
   114f0:	6a65      	ldr	r5, [r4, #36]	; 0x24
   114f2:	468a      	mov	sl, r1
   114f4:	0059      	lsls	r1, r3, #1
   114f6:	18cb      	adds	r3, r1, r3
   114f8:	4651      	mov	r1, sl
   114fa:	009b      	lsls	r3, r3, #2
   114fc:	505d      	str	r5, [r3, r1]
		a2Raw[ind_stack][j] = meas_inst->a2Raw[j];
   114fe:	6b25      	ldr	r5, [r4, #48]	; 0x30
   11500:	493d      	ldr	r1, [pc, #244]	; (115f8 <cal_add_datapoint+0x208>)
		a1Raw[ind_stack][j] = meas_inst->a1Raw[j];
   11502:	449a      	add	sl, r3
		a2Raw[ind_stack][j] = meas_inst->a2Raw[j];
   11504:	50cd      	str	r5, [r1, r3]
		m1Raw[ind_stack][j] = meas_inst->m1Raw[j];
   11506:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		a2Raw[ind_stack][j] = meas_inst->a2Raw[j];
   11508:	4689      	mov	r9, r1
		m1Raw[ind_stack][j] = meas_inst->m1Raw[j];
   1150a:	493c      	ldr	r1, [pc, #240]	; (115fc <cal_add_datapoint+0x20c>)
		a2Raw[ind_stack][j] = meas_inst->a2Raw[j];
   1150c:	4499      	add	r9, r3
		m1Raw[ind_stack][j] = meas_inst->m1Raw[j];
   1150e:	50cd      	str	r5, [r1, r3]
		m2Raw[ind_stack][j] = meas_inst->m2Raw[j];
   11510:	6ca5      	ldr	r5, [r4, #72]	; 0x48
		m1Raw[ind_stack][j] = meas_inst->m1Raw[j];
   11512:	4688      	mov	r8, r1
		m2Raw[ind_stack][j] = meas_inst->m2Raw[j];
   11514:	493a      	ldr	r1, [pc, #232]	; (11600 <cal_add_datapoint+0x210>)
		m1Raw[ind_stack][j] = meas_inst->m1Raw[j];
   11516:	4498      	add	r8, r3
		m2Raw[ind_stack][j] = meas_inst->m2Raw[j];
   11518:	50cd      	str	r5, [r1, r3]
		a1Raw[ind_stack][j] = meas_inst->a1Raw[j];
   1151a:	4655      	mov	r5, sl
   1151c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
		m2Raw[ind_stack][j] = meas_inst->m2Raw[j];
   1151e:	18cb      	adds	r3, r1, r3
		a1Raw[ind_stack][j] = meas_inst->a1Raw[j];
   11520:	606e      	str	r6, [r5, #4]
		a2Raw[ind_stack][j] = meas_inst->a2Raw[j];
   11522:	464d      	mov	r5, r9
   11524:	6b66      	ldr	r6, [r4, #52]	; 0x34
   11526:	606e      	str	r6, [r5, #4]
		m1Raw[ind_stack][j] = meas_inst->m1Raw[j];
   11528:	4645      	mov	r5, r8
   1152a:	6c26      	ldr	r6, [r4, #64]	; 0x40
   1152c:	606e      	str	r6, [r5, #4]
		m2Raw[ind_stack][j] = meas_inst->m2Raw[j];
   1152e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   11530:	6059      	str	r1, [r3, #4]
		a1Raw[ind_stack][j] = meas_inst->a1Raw[j];
   11532:	4651      	mov	r1, sl
   11534:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
   11536:	608d      	str	r5, [r1, #8]
		a2Raw[ind_stack][j] = meas_inst->a2Raw[j];
   11538:	4649      	mov	r1, r9
   1153a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
   1153c:	608d      	str	r5, [r1, #8]
		m1Raw[ind_stack][j] = meas_inst->m1Raw[j];
   1153e:	4641      	mov	r1, r8
   11540:	6c65      	ldr	r5, [r4, #68]	; 0x44
   11542:	608d      	str	r5, [r1, #8]
		m2Raw[ind_stack][j] = meas_inst->m2Raw[j];
   11544:	6d21      	ldr	r1, [r4, #80]	; 0x50
   11546:	6099      	str	r1, [r3, #8]
	groupPoints++;
   11548:	4661      	mov	r1, ip
   1154a:	9b00      	ldr	r3, [sp, #0]
   1154c:	7019      	strb	r1, [r3, #0]
	ind_buf++;
   1154e:	9901      	ldr	r1, [sp, #4]
   11550:	7008      	strb	r0, [r1, #0]
	if (ind_buf>= GROUP_SIZE){
   11552:	2803      	cmp	r0, #3
   11554:	d902      	bls.n	1155c <cal_add_datapoint+0x16c>
		ind_buf = 0; //  Roll over
   11556:	2300      	movs	r3, #0
		nGroups = currentGroup;
   11558:	603a      	str	r2, [r7, #0]
		ind_buf = 0; //  Roll over
   1155a:	700b      	strb	r3, [r1, #0]
}
   1155c:	b00d      	add	sp, #52	; 0x34
   1155e:	bc3c      	pop	{r2, r3, r4, r5}
   11560:	4690      	mov	r8, r2
   11562:	4699      	mov	r9, r3
   11564:	46a2      	mov	sl, r4
   11566:	46ab      	mov	fp, r5
   11568:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((nGroups==0) && (ind_buf==0) && (groupPoints == 0)){
   1156a:	4b18      	ldr	r3, [pc, #96]	; (115cc <cal_add_datapoint+0x1dc>)
   1156c:	9301      	str	r3, [sp, #4]
   1156e:	781b      	ldrb	r3, [r3, #0]
   11570:	2b00      	cmp	r3, #0
   11572:	d000      	beq.n	11576 <cal_add_datapoint+0x186>
   11574:	e74b      	b.n	1140e <cal_add_datapoint+0x1e>
   11576:	4b16      	ldr	r3, [pc, #88]	; (115d0 <cal_add_datapoint+0x1e0>)
   11578:	9300      	str	r3, [sp, #0]
   1157a:	781b      	ldrb	r3, [r3, #0]
   1157c:	2b00      	cmp	r3, #0
   1157e:	d11e      	bne.n	115be <cal_add_datapoint+0x1ce>
		aX_ang_ref = 200;//  Ensures delta will fail on first iteration
   11580:	4b14      	ldr	r3, [pc, #80]	; (115d4 <cal_add_datapoint+0x1e4>)
   11582:	4698      	mov	r8, r3
   11584:	4642      	mov	r2, r8
   11586:	4b1f      	ldr	r3, [pc, #124]	; (11604 <cal_add_datapoint+0x214>)
   11588:	6013      	str	r3, [r2, #0]
		mX_ang_ref = 200;//  Ensures delta will fail on first iteration
   1158a:	4a13      	ldr	r2, [pc, #76]	; (115d8 <cal_add_datapoint+0x1e8>)
   1158c:	4693      	mov	fp, r2
   1158e:	6013      	str	r3, [r2, #0]
   11590:	e743      	b.n	1141a <cal_add_datapoint+0x2a>
			currentGroup++;
   11592:	4b17      	ldr	r3, [pc, #92]	; (115f0 <cal_add_datapoint+0x200>)
			nPoints =nGroups*GROUP_SIZE;
   11594:	491c      	ldr	r1, [pc, #112]	; (11608 <cal_add_datapoint+0x218>)
			currentGroup++;
   11596:	781a      	ldrb	r2, [r3, #0]
   11598:	3201      	adds	r2, #1
   1159a:	b2d2      	uxtb	r2, r2
   1159c:	701a      	strb	r2, [r3, #0]
			nPoints =nGroups*GROUP_SIZE;
   1159e:	683b      	ldr	r3, [r7, #0]
   115a0:	009b      	lsls	r3, r3, #2
   115a2:	600b      	str	r3, [r1, #0]
   115a4:	e794      	b.n	114d0 <cal_add_datapoint+0xe0>
   115a6:	9b01      	ldr	r3, [sp, #4]
   115a8:	7819      	ldrb	r1, [r3, #0]
   115aa:	9b00      	ldr	r3, [sp, #0]
   115ac:	1c48      	adds	r0, r1, #1
   115ae:	781b      	ldrb	r3, [r3, #0]
   115b0:	b2c0      	uxtb	r0, r0
   115b2:	3301      	adds	r3, #1
   115b4:	b2db      	uxtb	r3, r3
   115b6:	469c      	mov	ip, r3
   115b8:	4b0d      	ldr	r3, [pc, #52]	; (115f0 <cal_add_datapoint+0x200>)
   115ba:	781a      	ldrb	r2, [r3, #0]
   115bc:	e791      	b.n	114e2 <cal_add_datapoint+0xf2>
   115be:	4b05      	ldr	r3, [pc, #20]	; (115d4 <cal_add_datapoint+0x1e4>)
   115c0:	4698      	mov	r8, r3
   115c2:	4b05      	ldr	r3, [pc, #20]	; (115d8 <cal_add_datapoint+0x1e8>)
   115c4:	469b      	mov	fp, r3
   115c6:	e728      	b.n	1141a <cal_add_datapoint+0x2a>
   115c8:	20003924 	.word	0x20003924
   115cc:	20001469 	.word	0x20001469
   115d0:	2000146a 	.word	0x2000146a
   115d4:	20000ed0 	.word	0x20000ed0
   115d8:	20000ed4 	.word	0x20000ed4
   115dc:	0001d235 	.word	0x0001d235
   115e0:	0001d939 	.word	0x0001d939
   115e4:	0000967d 	.word	0x0000967d
   115e8:	0001db79 	.word	0x0001db79
   115ec:	0001d0d1 	.word	0x0001d0d1
   115f0:	20001468 	.word	0x20001468
   115f4:	20004040 	.word	0x20004040
   115f8:	200022c8 	.word	0x200022c8
   115fc:	20003470 	.word	0x20003470
   11600:	20001c88 	.word	0x20001c88
   11604:	43480000 	.word	0x43480000
   11608:	20003340 	.word	0x20003340

0001160c <cal_axis_misalignments>:
void cal_axis_misalignments(float XYZ[NBUFF][3], struct INST_CAL *cal_struct){
   1160c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1160e:	46de      	mov	lr, fp
   11610:	4657      	mov	r7, sl
   11612:	464e      	mov	r6, r9
   11614:	4645      	mov	r5, r8
   11616:	b5e0      	push	{r5, r6, r7, lr}
	for (k=0;k<nPoints;k++){
   11618:	4ba6      	ldr	r3, [pc, #664]	; (118b4 <cal_axis_misalignments+0x2a8>)
void cal_axis_misalignments(float XYZ[NBUFF][3], struct INST_CAL *cal_struct){
   1161a:	4ca7      	ldr	r4, [pc, #668]	; (118b8 <cal_axis_misalignments+0x2ac>)
	for (k=0;k<nPoints;k++){
   1161c:	681b      	ldr	r3, [r3, #0]
void cal_axis_misalignments(float XYZ[NBUFF][3], struct INST_CAL *cal_struct){
   1161e:	44a5      	add	sp, r4
   11620:	9107      	str	r1, [sp, #28]
	for (k=0;k<nPoints;k++){
   11622:	9305      	str	r3, [sp, #20]
   11624:	2b00      	cmp	r3, #0
   11626:	d100      	bne.n	1162a <cal_axis_misalignments+0x1e>
   11628:	e13d      	b.n	118a6 <cal_axis_misalignments+0x29a>
   1162a:	ab94      	add	r3, sp, #592	; 0x250
   1162c:	001a      	movs	r2, r3
   1162e:	9304      	str	r3, [sp, #16]
   11630:	4699      	mov	r9, r3
   11632:	ab30      	add	r3, sp, #192	; 0xc0
   11634:	469b      	mov	fp, r3
   11636:	9b05      	ldr	r3, [sp, #20]
   11638:	4682      	mov	sl, r0
   1163a:	011b      	lsls	r3, r3, #4
   1163c:	0019      	movs	r1, r3
   1163e:	9306      	str	r3, [sp, #24]
   11640:	468c      	mov	ip, r1
   11642:	0013      	movs	r3, r2
   11644:	4463      	add	r3, ip
   11646:	9303      	str	r3, [sp, #12]
   11648:	4b9c      	ldr	r3, [pc, #624]	; (118bc <cal_axis_misalignments+0x2b0>)
   1164a:	4698      	mov	r8, r3
		D[k][0] = 1;
   1164c:	22fe      	movs	r2, #254	; 0xfe
   1164e:	464b      	mov	r3, r9
   11650:	0592      	lsls	r2, r2, #22
   11652:	601a      	str	r2, [r3, #0]
		D[k][1] = -2*XYZ[k][0]*XYZ[k][1];
   11654:	4653      	mov	r3, sl
   11656:	21c0      	movs	r1, #192	; 0xc0
   11658:	681c      	ldr	r4, [r3, #0]
   1165a:	0609      	lsls	r1, r1, #24
   1165c:	1c20      	adds	r0, r4, #0
   1165e:	47c0      	blx	r8
   11660:	4653      	mov	r3, sl
   11662:	685e      	ldr	r6, [r3, #4]
   11664:	1c05      	adds	r5, r0, #0
   11666:	1c31      	adds	r1, r6, #0
   11668:	47c0      	blx	r8
   1166a:	464b      	mov	r3, r9
   1166c:	6058      	str	r0, [r3, #4]
		D[k][2] = -2*XYZ[k][1]*XYZ[k][2];
   1166e:	4653      	mov	r3, sl
   11670:	21c0      	movs	r1, #192	; 0xc0
   11672:	689b      	ldr	r3, [r3, #8]
   11674:	0609      	lsls	r1, r1, #24
   11676:	1c1f      	adds	r7, r3, #0
   11678:	1c30      	adds	r0, r6, #0
   1167a:	47c0      	blx	r8
   1167c:	1c39      	adds	r1, r7, #0
   1167e:	47c0      	blx	r8
   11680:	464a      	mov	r2, r9
		D[k][3] = -2*XYZ[k][0]*XYZ[k][2];
   11682:	1c39      	adds	r1, r7, #0
		D[k][2] = -2*XYZ[k][1]*XYZ[k][2];
   11684:	6090      	str	r0, [r2, #8]
		D[k][3] = -2*XYZ[k][0]*XYZ[k][2];
   11686:	9700      	str	r7, [sp, #0]
   11688:	1c28      	adds	r0, r5, #0
   1168a:	47c0      	blx	r8
   1168c:	464b      	mov	r3, r9
   1168e:	60d8      	str	r0, [r3, #12]
		V[k] = pow(XYZ[k][0],2)+pow(XYZ[k][1],2)+pow(XYZ[k][2],2);
   11690:	1c20      	adds	r0, r4, #0
   11692:	4b8b      	ldr	r3, [pc, #556]	; (118c0 <cal_axis_misalignments+0x2b4>)
   11694:	4798      	blx	r3
   11696:	4b8a      	ldr	r3, [pc, #552]	; (118c0 <cal_axis_misalignments+0x2b4>)
   11698:	0004      	movs	r4, r0
   1169a:	1c30      	adds	r0, r6, #0
   1169c:	000d      	movs	r5, r1
   1169e:	4798      	blx	r3
   116a0:	4b87      	ldr	r3, [pc, #540]	; (118c0 <cal_axis_misalignments+0x2b4>)
   116a2:	0006      	movs	r6, r0
   116a4:	9800      	ldr	r0, [sp, #0]
   116a6:	000f      	movs	r7, r1
   116a8:	4798      	blx	r3
   116aa:	0022      	movs	r2, r4
   116ac:	9000      	str	r0, [sp, #0]
   116ae:	9101      	str	r1, [sp, #4]
   116b0:	002b      	movs	r3, r5
   116b2:	0020      	movs	r0, r4
   116b4:	0029      	movs	r1, r5
   116b6:	4c83      	ldr	r4, [pc, #524]	; (118c4 <cal_axis_misalignments+0x2b8>)
   116b8:	47a0      	blx	r4
   116ba:	0032      	movs	r2, r6
   116bc:	0004      	movs	r4, r0
   116be:	000d      	movs	r5, r1
   116c0:	003b      	movs	r3, r7
   116c2:	0030      	movs	r0, r6
   116c4:	0039      	movs	r1, r7
   116c6:	4e7f      	ldr	r6, [pc, #508]	; (118c4 <cal_axis_misalignments+0x2b8>)
   116c8:	47b0      	blx	r6
   116ca:	0002      	movs	r2, r0
   116cc:	000b      	movs	r3, r1
   116ce:	0020      	movs	r0, r4
   116d0:	0029      	movs	r1, r5
   116d2:	4c7d      	ldr	r4, [pc, #500]	; (118c8 <cal_axis_misalignments+0x2bc>)
   116d4:	47a0      	blx	r4
   116d6:	0004      	movs	r4, r0
   116d8:	000d      	movs	r5, r1
   116da:	9800      	ldr	r0, [sp, #0]
   116dc:	9901      	ldr	r1, [sp, #4]
   116de:	0002      	movs	r2, r0
   116e0:	000b      	movs	r3, r1
   116e2:	47b0      	blx	r6
   116e4:	0002      	movs	r2, r0
   116e6:	000b      	movs	r3, r1
   116e8:	0020      	movs	r0, r4
   116ea:	0029      	movs	r1, r5
   116ec:	4c76      	ldr	r4, [pc, #472]	; (118c8 <cal_axis_misalignments+0x2bc>)
   116ee:	47a0      	blx	r4
   116f0:	4b76      	ldr	r3, [pc, #472]	; (118cc <cal_axis_misalignments+0x2c0>)
   116f2:	4798      	blx	r3
   116f4:	465b      	mov	r3, fp
   116f6:	c301      	stmia	r3!, {r0}
   116f8:	469b      	mov	fp, r3
   116fa:	2310      	movs	r3, #16
   116fc:	469c      	mov	ip, r3
   116fe:	3b04      	subs	r3, #4
   11700:	44e1      	add	r9, ip
   11702:	469c      	mov	ip, r3
	for (k=0;k<nPoints;k++){
   11704:	9b03      	ldr	r3, [sp, #12]
   11706:	44e2      	add	sl, ip
   11708:	4599      	cmp	r9, r3
   1170a:	d19f      	bne.n	1164c <cal_axis_misalignments+0x40>
   1170c:	ab0c      	add	r3, sp, #48	; 0x30
   1170e:	469b      	mov	fp, r3
			for (k=0;k<nPoints;k++){
   11710:	2300      	movs	r3, #0
   11712:	4699      	mov	r9, r3
   11714:	4e6e      	ldr	r6, [pc, #440]	; (118d0 <cal_axis_misalignments+0x2c4>)
   11716:	464a      	mov	r2, r9
   11718:	9b06      	ldr	r3, [sp, #24]
void cal_axis_misalignments(float XYZ[NBUFF][3], struct INST_CAL *cal_struct){
   1171a:	2700      	movs	r7, #0
   1171c:	1a9b      	subs	r3, r3, r2
   1171e:	9a04      	ldr	r2, [sp, #16]
   11720:	4692      	mov	sl, r2
   11722:	449a      	add	sl, r3
			DtD[i][j] = 0;
   11724:	465b      	mov	r3, fp
   11726:	2200      	movs	r2, #0
   11728:	51da      	str	r2, [r3, r7]
			for (k=0;k<nPoints;k++){
   1172a:	9b05      	ldr	r3, [sp, #20]
   1172c:	2b00      	cmp	r3, #0
   1172e:	d017      	beq.n	11760 <cal_axis_misalignments+0x154>
   11730:	464a      	mov	r2, r9
   11732:	9b04      	ldr	r3, [sp, #16]
   11734:	2500      	movs	r5, #0
   11736:	1a9c      	subs	r4, r3, r2
   11738:	003b      	movs	r3, r7
   1173a:	464f      	mov	r7, r9
   1173c:	4699      	mov	r9, r3
				DtD[i][j] = DtD[i][j] + D[k][i]*D[k][j];
   1173e:	464a      	mov	r2, r9
   11740:	193b      	adds	r3, r7, r4
   11742:	6821      	ldr	r1, [r4, #0]
   11744:	5898      	ldr	r0, [r3, r2]
   11746:	47c0      	blx	r8
   11748:	1c01      	adds	r1, r0, #0
   1174a:	1c28      	adds	r0, r5, #0
   1174c:	47b0      	blx	r6
   1174e:	3410      	adds	r4, #16
   11750:	1c05      	adds	r5, r0, #0
			for (k=0;k<nPoints;k++){
   11752:	4554      	cmp	r4, sl
   11754:	d1f3      	bne.n	1173e <cal_axis_misalignments+0x132>
   11756:	464b      	mov	r3, r9
   11758:	46b9      	mov	r9, r7
   1175a:	001f      	movs	r7, r3
   1175c:	465b      	mov	r3, fp
   1175e:	51d8      	str	r0, [r3, r7]
   11760:	3704      	adds	r7, #4
		for (j=0;j<4;j++){
   11762:	2f10      	cmp	r7, #16
   11764:	d1de      	bne.n	11724 <cal_axis_misalignments+0x118>
   11766:	2318      	movs	r3, #24
   11768:	469c      	mov	ip, r3
   1176a:	3b1c      	subs	r3, #28
   1176c:	44e3      	add	fp, ip
   1176e:	469c      	mov	ip, r3
   11770:	44e1      	add	r9, ip
	for (i=0;i<4;i++){
   11772:	464b      	mov	r3, r9
   11774:	3310      	adds	r3, #16
   11776:	d1ce      	bne.n	11716 <cal_axis_misalignments+0x10a>
   11778:	2300      	movs	r3, #0
   1177a:	469a      	mov	sl, r3
		DtV[i] = 0;
   1177c:	2300      	movs	r3, #0
   1177e:	469b      	mov	fp, r3
   11780:	4652      	mov	r2, sl
   11782:	4659      	mov	r1, fp
   11784:	ab08      	add	r3, sp, #32
   11786:	5099      	str	r1, [r3, r2]
		for (k=0;k<nPoints;k++){
   11788:	9b05      	ldr	r3, [sp, #20]
   1178a:	2b00      	cmp	r3, #0
   1178c:	d016      	beq.n	117bc <cal_axis_misalignments+0x1b0>
   1178e:	9a04      	ldr	r2, [sp, #16]
   11790:	2500      	movs	r5, #0
   11792:	0013      	movs	r3, r2
   11794:	4691      	mov	r9, r2
   11796:	4453      	add	r3, sl
   11798:	001c      	movs	r4, r3
   1179a:	9b06      	ldr	r3, [sp, #24]
   1179c:	af30      	add	r7, sp, #192	; 0xc0
   1179e:	4453      	add	r3, sl
   117a0:	4499      	add	r9, r3
			DtV[i] = DtV[i]+D[k][i]*V[k];
   117a2:	cf02      	ldmia	r7!, {r1}
   117a4:	6820      	ldr	r0, [r4, #0]
   117a6:	47c0      	blx	r8
   117a8:	1c01      	adds	r1, r0, #0
   117aa:	1c28      	adds	r0, r5, #0
   117ac:	47b0      	blx	r6
   117ae:	3410      	adds	r4, #16
   117b0:	1c05      	adds	r5, r0, #0
		for (k=0;k<nPoints;k++){
   117b2:	45a1      	cmp	r9, r4
   117b4:	d1f5      	bne.n	117a2 <cal_axis_misalignments+0x196>
   117b6:	4652      	mov	r2, sl
   117b8:	ab08      	add	r3, sp, #32
   117ba:	5098      	str	r0, [r3, r2]
   117bc:	2304      	movs	r3, #4
   117be:	469c      	mov	ip, r3
   117c0:	44e2      	add	sl, ip
	for (i=0;i<4;i++){
   117c2:	4653      	mov	r3, sl
   117c4:	2b10      	cmp	r3, #16
   117c6:	d1db      	bne.n	11780 <cal_axis_misalignments+0x174>
	inverse(DtD, DtD, 4);
   117c8:	a90c      	add	r1, sp, #48	; 0x30
   117ca:	2204      	movs	r2, #4
   117cc:	0008      	movs	r0, r1
   117ce:	4b41      	ldr	r3, [pc, #260]	; (118d4 <cal_axis_misalignments+0x2c8>)
   117d0:	4798      	blx	r3
   117d2:	9b08      	ldr	r3, [sp, #32]
			Res[i] = Res[i]+DtD[i][j]*DtV[j];
   117d4:	9918      	ldr	r1, [sp, #96]	; 0x60
   117d6:	1c18      	adds	r0, r3, #0
   117d8:	4699      	mov	r9, r3
   117da:	47c0      	blx	r8
   117dc:	2100      	movs	r1, #0
   117de:	47b0      	blx	r6
   117e0:	9f09      	ldr	r7, [sp, #36]	; 0x24
   117e2:	9919      	ldr	r1, [sp, #100]	; 0x64
   117e4:	4682      	mov	sl, r0
   117e6:	1c38      	adds	r0, r7, #0
   117e8:	47c0      	blx	r8
   117ea:	1c01      	adds	r1, r0, #0
   117ec:	4650      	mov	r0, sl
   117ee:	47b0      	blx	r6
   117f0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   117f2:	991a      	ldr	r1, [sp, #104]	; 0x68
   117f4:	4682      	mov	sl, r0
   117f6:	1c28      	adds	r0, r5, #0
   117f8:	47c0      	blx	r8
   117fa:	1c01      	adds	r1, r0, #0
   117fc:	4650      	mov	r0, sl
   117fe:	47b0      	blx	r6
   11800:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   11802:	991b      	ldr	r1, [sp, #108]	; 0x6c
   11804:	4682      	mov	sl, r0
   11806:	1c20      	adds	r0, r4, #0
   11808:	47c0      	blx	r8
   1180a:	1c01      	adds	r1, r0, #0
   1180c:	4650      	mov	r0, sl
   1180e:	47b0      	blx	r6
   11810:	991e      	ldr	r1, [sp, #120]	; 0x78
   11812:	4683      	mov	fp, r0
   11814:	4648      	mov	r0, r9
   11816:	47c0      	blx	r8
   11818:	2100      	movs	r1, #0
   1181a:	47b0      	blx	r6
   1181c:	991f      	ldr	r1, [sp, #124]	; 0x7c
   1181e:	4682      	mov	sl, r0
   11820:	1c38      	adds	r0, r7, #0
   11822:	47c0      	blx	r8
   11824:	1c01      	adds	r1, r0, #0
   11826:	4650      	mov	r0, sl
   11828:	47b0      	blx	r6
   1182a:	9920      	ldr	r1, [sp, #128]	; 0x80
   1182c:	4682      	mov	sl, r0
   1182e:	1c28      	adds	r0, r5, #0
   11830:	47c0      	blx	r8
   11832:	1c01      	adds	r1, r0, #0
   11834:	4650      	mov	r0, sl
   11836:	47b0      	blx	r6
   11838:	9921      	ldr	r1, [sp, #132]	; 0x84
   1183a:	4682      	mov	sl, r0
   1183c:	1c20      	adds	r0, r4, #0
   1183e:	47c0      	blx	r8
   11840:	1c01      	adds	r1, r0, #0
   11842:	4650      	mov	r0, sl
   11844:	47b0      	blx	r6
   11846:	9912      	ldr	r1, [sp, #72]	; 0x48
   11848:	4682      	mov	sl, r0
   1184a:	4648      	mov	r0, r9
   1184c:	47c0      	blx	r8
   1184e:	2100      	movs	r1, #0
   11850:	47b0      	blx	r6
   11852:	9913      	ldr	r1, [sp, #76]	; 0x4c
   11854:	4681      	mov	r9, r0
   11856:	1c38      	adds	r0, r7, #0
   11858:	47c0      	blx	r8
   1185a:	1c01      	adds	r1, r0, #0
   1185c:	4648      	mov	r0, r9
   1185e:	47b0      	blx	r6
   11860:	9914      	ldr	r1, [sp, #80]	; 0x50
   11862:	1c07      	adds	r7, r0, #0
   11864:	1c28      	adds	r0, r5, #0
   11866:	47c0      	blx	r8
   11868:	1c01      	adds	r1, r0, #0
   1186a:	1c38      	adds	r0, r7, #0
   1186c:	47b0      	blx	r6
   1186e:	9915      	ldr	r1, [sp, #84]	; 0x54
   11870:	1c05      	adds	r5, r0, #0
   11872:	1c20      	adds	r0, r4, #0
   11874:	47c0      	blx	r8
   11876:	1c01      	adds	r1, r0, #0
   11878:	1c28      	adds	r0, r5, #0
   1187a:	47b0      	blx	r6
	cal_struct->axmYX += Res[1];
   1187c:	9c07      	ldr	r4, [sp, #28]
			Res[i] = Res[i]+DtD[i][j]*DtV[j];
   1187e:	1c01      	adds	r1, r0, #0
	cal_struct->axmYX += Res[1];
   11880:	69e0      	ldr	r0, [r4, #28]
   11882:	47b0      	blx	r6
	cal_struct->axmZY += Res[2];
   11884:	4659      	mov	r1, fp
	cal_struct->axmYX += Res[1];
   11886:	61e0      	str	r0, [r4, #28]
	cal_struct->axmZY += Res[2];
   11888:	6a20      	ldr	r0, [r4, #32]
   1188a:	47b0      	blx	r6
	cal_struct->axmZX += Res[3];
   1188c:	4651      	mov	r1, sl
	cal_struct->axmZY += Res[2];
   1188e:	6220      	str	r0, [r4, #32]
	cal_struct->axmZX += Res[3];
   11890:	6a60      	ldr	r0, [r4, #36]	; 0x24
   11892:	47b0      	blx	r6
   11894:	6260      	str	r0, [r4, #36]	; 0x24
}
   11896:	4b10      	ldr	r3, [pc, #64]	; (118d8 <cal_axis_misalignments+0x2cc>)
   11898:	449d      	add	sp, r3
   1189a:	bc3c      	pop	{r2, r3, r4, r5}
   1189c:	4690      	mov	r8, r2
   1189e:	4699      	mov	r9, r3
   118a0:	46a2      	mov	sl, r4
   118a2:	46ab      	mov	fp, r5
   118a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   118a6:	ab94      	add	r3, sp, #592	; 0x250
   118a8:	9304      	str	r3, [sp, #16]
   118aa:	2300      	movs	r3, #0
   118ac:	9306      	str	r3, [sp, #24]
   118ae:	4b03      	ldr	r3, [pc, #12]	; (118bc <cal_axis_misalignments+0x2b0>)
   118b0:	4698      	mov	r8, r3
   118b2:	e72b      	b.n	1170c <cal_axis_misalignments+0x100>
   118b4:	20003340 	.word	0x20003340
   118b8:	fffff76c 	.word	0xfffff76c
   118bc:	0001d939 	.word	0x0001d939
   118c0:	0001fb6d 	.word	0x0001fb6d
   118c4:	0001eea5 	.word	0x0001eea5
   118c8:	0001e01d 	.word	0x0001e01d
   118cc:	0001fc11 	.word	0x0001fc11
   118d0:	0001d235 	.word	0x0001d235
   118d4:	0000a959 	.word	0x0000a959
   118d8:	00000894 	.word	0x00000894

000118dc <cal_apply_cal>:
void cal_apply_cal(float uncalXYZ[3], float calXYZ[3], struct INST_CAL *cal_struct){
   118dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   118de:	46d6      	mov	lr, sl
   118e0:	464f      	mov	r7, r9
   118e2:	4646      	mov	r6, r8
   118e4:	b5c0      	push	{r6, r7, lr}
   118e6:	000d      	movs	r5, r1
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   118e8:	4f1e      	ldr	r7, [pc, #120]	; (11964 <cal_apply_cal+0x88>)
   118ea:	6851      	ldr	r1, [r2, #4]
void cal_apply_cal(float uncalXYZ[3], float calXYZ[3], struct INST_CAL *cal_struct){
   118ec:	4682      	mov	sl, r0
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   118ee:	6800      	ldr	r0, [r0, #0]
void cal_apply_cal(float uncalXYZ[3], float calXYZ[3], struct INST_CAL *cal_struct){
   118f0:	0014      	movs	r4, r2
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   118f2:	47b8      	blx	r7
   118f4:	6028      	str	r0, [r5, #0]
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   118f6:	6921      	ldr	r1, [r4, #16]
   118f8:	4e1b      	ldr	r6, [pc, #108]	; (11968 <cal_apply_cal+0x8c>)
   118fa:	47b0      	blx	r6
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   118fc:	4653      	mov	r3, sl
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   118fe:	6028      	str	r0, [r5, #0]
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   11900:	68a1      	ldr	r1, [r4, #8]
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   11902:	4680      	mov	r8, r0
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   11904:	6858      	ldr	r0, [r3, #4]
   11906:	47b8      	blx	r7
   11908:	6068      	str	r0, [r5, #4]
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   1190a:	6961      	ldr	r1, [r4, #20]
   1190c:	47b0      	blx	r6
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   1190e:	4653      	mov	r3, sl
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   11910:	6068      	str	r0, [r5, #4]
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   11912:	68e1      	ldr	r1, [r4, #12]
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   11914:	4681      	mov	r9, r0
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   11916:	6898      	ldr	r0, [r3, #8]
   11918:	47b8      	blx	r7
   1191a:	60a8      	str	r0, [r5, #8]
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   1191c:	69a1      	ldr	r1, [r4, #24]
   1191e:	47b0      	blx	r6
   11920:	60a8      	str	r0, [r5, #8]
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   11922:	4f12      	ldr	r7, [pc, #72]	; (1196c <cal_apply_cal+0x90>)
   11924:	69e1      	ldr	r1, [r4, #28]
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   11926:	4682      	mov	sl, r0
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   11928:	4640      	mov	r0, r8
   1192a:	47b8      	blx	r7
   1192c:	4e10      	ldr	r6, [pc, #64]	; (11970 <cal_apply_cal+0x94>)
   1192e:	4649      	mov	r1, r9
   11930:	47b0      	blx	r6
   11932:	6068      	str	r0, [r5, #4]
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   11934:	6a21      	ldr	r1, [r4, #32]
   11936:	47b8      	blx	r7
   11938:	4651      	mov	r1, sl
   1193a:	47b0      	blx	r6
   1193c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1193e:	4681      	mov	r9, r0
   11940:	4640      	mov	r0, r8
   11942:	47b8      	blx	r7
   11944:	1c01      	adds	r1, r0, #0
   11946:	4648      	mov	r0, r9
   11948:	47b0      	blx	r6
   1194a:	60a8      	str	r0, [r5, #8]
	mat_mult_33_31(cal_struct->RotM, calXYZ, calXYZ);
   1194c:	0020      	movs	r0, r4
   1194e:	002a      	movs	r2, r5
   11950:	0029      	movs	r1, r5
   11952:	3034      	adds	r0, #52	; 0x34
   11954:	4b07      	ldr	r3, [pc, #28]	; (11974 <cal_apply_cal+0x98>)
   11956:	4798      	blx	r3
	
}
   11958:	bc1c      	pop	{r2, r3, r4}
   1195a:	4690      	mov	r8, r2
   1195c:	4699      	mov	r9, r3
   1195e:	46a2      	mov	sl, r4
   11960:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11962:	46c0      	nop			; (mov r8, r8)
   11964:	0001db79 	.word	0x0001db79
   11968:	0001d559 	.word	0x0001d559
   1196c:	0001d939 	.word	0x0001d939
   11970:	0001d235 	.word	0x0001d235
   11974:	000095c5 	.word	0x000095c5

00011978 <cal_init_struct>:
void cal_init_struct(struct INST_CAL *cal_struct){
	uint8_t i, j;
	
	for (i=0;i<3;i++){
		cal_struct->gain[i] = 1;
		cal_struct->offset[i] = 0;
   11978:	2300      	movs	r3, #0
		cal_struct->gain[i] = 1;
   1197a:	22fe      	movs	r2, #254	; 0xfe
		cal_struct->offset[i] = 0;
   1197c:	6043      	str	r3, [r0, #4]
		
		for (j=0;j<3;j++){
			cal_struct->RotM[i][j] = 0;//Clear row
   1197e:	6383      	str	r3, [r0, #56]	; 0x38
   11980:	63c3      	str	r3, [r0, #60]	; 0x3c
		cal_struct->offset[i] = 0;
   11982:	6083      	str	r3, [r0, #8]
			cal_struct->RotM[i][j] = 0;//Clear row
   11984:	6403      	str	r3, [r0, #64]	; 0x40
   11986:	6483      	str	r3, [r0, #72]	; 0x48
		cal_struct->offset[i] = 0;
   11988:	60c3      	str	r3, [r0, #12]
			cal_struct->RotM[i][j] = 0;//Clear row
   1198a:	64c3      	str	r3, [r0, #76]	; 0x4c
   1198c:	6503      	str	r3, [r0, #80]	; 0x50
		}
		cal_struct->RotM[i][i] = 1;// Create identity matrix
		
	}
	cal_struct->axmYX = 0;
   1198e:	61c3      	str	r3, [r0, #28]
	cal_struct->axmZY = 0;
   11990:	6203      	str	r3, [r0, #32]
	cal_struct->axmZX = 0;
   11992:	6243      	str	r3, [r0, #36]	; 0x24
	
	cal_struct->thetaX = 0;
   11994:	6283      	str	r3, [r0, #40]	; 0x28
	cal_struct->thetaY = 0;
   11996:	62c3      	str	r3, [r0, #44]	; 0x2c
	cal_struct->thetaZ = 0;
   11998:	6303      	str	r3, [r0, #48]	; 0x30
	
	cal_struct->dist_offset = 0;
   1199a:	6583      	str	r3, [r0, #88]	; 0x58
	
	cal_struct->Cal_Initialized_Key = 0xB2;//  Indicator that structure has been initialized
   1199c:	23b2      	movs	r3, #178	; 0xb2
		cal_struct->gain[i] = 1;
   1199e:	0592      	lsls	r2, r2, #22
   119a0:	6102      	str	r2, [r0, #16]
		cal_struct->RotM[i][i] = 1;// Create identity matrix
   119a2:	6342      	str	r2, [r0, #52]	; 0x34
		cal_struct->gain[i] = 1;
   119a4:	6142      	str	r2, [r0, #20]
		cal_struct->RotM[i][i] = 1;// Create identity matrix
   119a6:	6442      	str	r2, [r0, #68]	; 0x44
		cal_struct->gain[i] = 1;
   119a8:	6182      	str	r2, [r0, #24]
		cal_struct->RotM[i][i] = 1;// Create identity matrix
   119aa:	6542      	str	r2, [r0, #84]	; 0x54
	cal_struct->Cal_Initialized_Key = 0xB2;//  Indicator that structure has been initialized
   119ac:	7003      	strb	r3, [r0, #0]
	
}
   119ae:	4770      	bx	lr

000119b0 <gen_RotM>:

void gen_RotM(struct INST_CAL *cal_struct){
   119b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   119b2:	46de      	mov	lr, fp
   119b4:	4657      	mov	r7, sl
   119b6:	464e      	mov	r6, r9
   119b8:	4645      	mov	r5, r8
   119ba:	b5e0      	push	{r5, r6, r7, lr}
   119bc:	0004      	movs	r4, r0
   119be:	b08d      	sub	sp, #52	; 0x34
	float tX, tY, tZ;
	
	tX = cal_struct->thetaX*DEG2RAD;
   119c0:	4d4d      	ldr	r5, [pc, #308]	; (11af8 <gen_RotM+0x148>)
   119c2:	6a80      	ldr	r0, [r0, #40]	; 0x28
   119c4:	494d      	ldr	r1, [pc, #308]	; (11afc <gen_RotM+0x14c>)
   119c6:	47a8      	blx	r5
	tY = cal_struct->thetaY*DEG2RAD;
   119c8:	494c      	ldr	r1, [pc, #304]	; (11afc <gen_RotM+0x14c>)
	tX = cal_struct->thetaX*DEG2RAD;
   119ca:	900b      	str	r0, [sp, #44]	; 0x2c
	tY = cal_struct->thetaY*DEG2RAD;
   119cc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   119ce:	47a8      	blx	r5
	tZ = cal_struct->thetaZ*DEG2RAD;
	
	cal_struct->RotM[0][0] = cos(tY)*cos(tZ);
   119d0:	4b4b      	ldr	r3, [pc, #300]	; (11b00 <gen_RotM+0x150>)
   119d2:	469a      	mov	sl, r3
   119d4:	4798      	blx	r3
   119d6:	0002      	movs	r2, r0
   119d8:	000b      	movs	r3, r1
   119da:	9200      	str	r2, [sp, #0]
   119dc:	9301      	str	r3, [sp, #4]
   119de:	4b49      	ldr	r3, [pc, #292]	; (11b04 <gen_RotM+0x154>)
   119e0:	4699      	mov	r9, r3
   119e2:	4798      	blx	r3
   119e4:	9002      	str	r0, [sp, #8]
   119e6:	9103      	str	r1, [sp, #12]
	tZ = cal_struct->thetaZ*DEG2RAD;
   119e8:	6b20      	ldr	r0, [r4, #48]	; 0x30
   119ea:	4944      	ldr	r1, [pc, #272]	; (11afc <gen_RotM+0x14c>)
   119ec:	47a8      	blx	r5
	cal_struct->RotM[0][0] = cos(tY)*cos(tZ);
   119ee:	47d0      	blx	sl
   119f0:	0006      	movs	r6, r0
   119f2:	000f      	movs	r7, r1
   119f4:	47c8      	blx	r9
   119f6:	0002      	movs	r2, r0
   119f8:	000b      	movs	r3, r1
   119fa:	4943      	ldr	r1, [pc, #268]	; (11b08 <gen_RotM+0x158>)
   119fc:	9204      	str	r2, [sp, #16]
   119fe:	9305      	str	r3, [sp, #20]
   11a00:	468b      	mov	fp, r1
   11a02:	9802      	ldr	r0, [sp, #8]
   11a04:	9903      	ldr	r1, [sp, #12]
   11a06:	47d8      	blx	fp
   11a08:	4d40      	ldr	r5, [pc, #256]	; (11b0c <gen_RotM+0x15c>)
   11a0a:	47a8      	blx	r5
	cal_struct->RotM[0][1] = -sin(tZ);
   11a0c:	4b40      	ldr	r3, [pc, #256]	; (11b10 <gen_RotM+0x160>)
	cal_struct->RotM[0][0] = cos(tY)*cos(tZ);
   11a0e:	6360      	str	r0, [r4, #52]	; 0x34
	cal_struct->RotM[0][1] = -sin(tZ);
   11a10:	0039      	movs	r1, r7
   11a12:	0030      	movs	r0, r6
   11a14:	4698      	mov	r8, r3
   11a16:	4798      	blx	r3
   11a18:	000a      	movs	r2, r1
   11a1a:	0001      	movs	r1, r0
   11a1c:	9106      	str	r1, [sp, #24]
   11a1e:	9207      	str	r2, [sp, #28]
   11a20:	0011      	movs	r1, r2
   11a22:	47a8      	blx	r5
   11a24:	2380      	movs	r3, #128	; 0x80
   11a26:	061b      	lsls	r3, r3, #24
   11a28:	469c      	mov	ip, r3
   11a2a:	4460      	add	r0, ip
   11a2c:	63a0      	str	r0, [r4, #56]	; 0x38
	cal_struct->RotM[0][2] = sin(tY);
   11a2e:	9800      	ldr	r0, [sp, #0]
   11a30:	9901      	ldr	r1, [sp, #4]
   11a32:	47c0      	blx	r8
   11a34:	000a      	movs	r2, r1
   11a36:	0001      	movs	r1, r0
   11a38:	9108      	str	r1, [sp, #32]
   11a3a:	9209      	str	r2, [sp, #36]	; 0x24
   11a3c:	0011      	movs	r1, r2
   11a3e:	47a8      	blx	r5
   11a40:	63e0      	str	r0, [r4, #60]	; 0x3c
	cal_struct->RotM[1][0] = (cos(tX)*sin(tZ))+(sin(tX)*sin(tY));
   11a42:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11a44:	47d0      	blx	sl
   11a46:	0006      	movs	r6, r0
   11a48:	000f      	movs	r7, r1
   11a4a:	47c8      	blx	r9
   11a4c:	9000      	str	r0, [sp, #0]
   11a4e:	9101      	str	r1, [sp, #4]
   11a50:	0030      	movs	r0, r6
   11a52:	0039      	movs	r1, r7
   11a54:	47c0      	blx	r8
   11a56:	9a00      	ldr	r2, [sp, #0]
   11a58:	9b01      	ldr	r3, [sp, #4]
   11a5a:	4681      	mov	r9, r0
   11a5c:	4688      	mov	r8, r1
   11a5e:	9806      	ldr	r0, [sp, #24]
   11a60:	9907      	ldr	r1, [sp, #28]
   11a62:	47d8      	blx	fp
   11a64:	464a      	mov	r2, r9
   11a66:	0006      	movs	r6, r0
   11a68:	000f      	movs	r7, r1
   11a6a:	9808      	ldr	r0, [sp, #32]
   11a6c:	9909      	ldr	r1, [sp, #36]	; 0x24
   11a6e:	4643      	mov	r3, r8
   11a70:	47d8      	blx	fp
   11a72:	0002      	movs	r2, r0
   11a74:	000b      	movs	r3, r1
   11a76:	0030      	movs	r0, r6
   11a78:	0039      	movs	r1, r7
   11a7a:	4e26      	ldr	r6, [pc, #152]	; (11b14 <gen_RotM+0x164>)
   11a7c:	47b0      	blx	r6
   11a7e:	47a8      	blx	r5
	cal_struct->RotM[1][1] = cos(tX)*cos(tZ);
   11a80:	9a00      	ldr	r2, [sp, #0]
   11a82:	9b01      	ldr	r3, [sp, #4]
	cal_struct->RotM[1][0] = (cos(tX)*sin(tZ))+(sin(tX)*sin(tY));
   11a84:	6420      	str	r0, [r4, #64]	; 0x40
	cal_struct->RotM[1][2] = -sin(tX)*cos(tY);
   11a86:	2680      	movs	r6, #128	; 0x80
	cal_struct->RotM[1][1] = cos(tX)*cos(tZ);
   11a88:	9804      	ldr	r0, [sp, #16]
   11a8a:	9905      	ldr	r1, [sp, #20]
   11a8c:	47d8      	blx	fp
   11a8e:	47a8      	blx	r5
	cal_struct->RotM[1][2] = -sin(tX)*cos(tY);
   11a90:	9a02      	ldr	r2, [sp, #8]
   11a92:	9b03      	ldr	r3, [sp, #12]
   11a94:	0636      	lsls	r6, r6, #24
   11a96:	4446      	add	r6, r8
	cal_struct->RotM[1][1] = cos(tX)*cos(tZ);
   11a98:	6460      	str	r0, [r4, #68]	; 0x44
	cal_struct->RotM[1][2] = -sin(tX)*cos(tY);
   11a9a:	0031      	movs	r1, r6
   11a9c:	4648      	mov	r0, r9
   11a9e:	47d8      	blx	fp
   11aa0:	47a8      	blx	r5
	cal_struct->RotM[2][0]  = (sin(tX)*sin(tZ))-(cos(tX)*sin(tY));
   11aa2:	464a      	mov	r2, r9
	cal_struct->RotM[1][2] = -sin(tX)*cos(tY);
   11aa4:	64a0      	str	r0, [r4, #72]	; 0x48
	cal_struct->RotM[2][0]  = (sin(tX)*sin(tZ))-(cos(tX)*sin(tY));
   11aa6:	4643      	mov	r3, r8
   11aa8:	9806      	ldr	r0, [sp, #24]
   11aaa:	9907      	ldr	r1, [sp, #28]
   11aac:	47d8      	blx	fp
   11aae:	9a00      	ldr	r2, [sp, #0]
   11ab0:	9b01      	ldr	r3, [sp, #4]
   11ab2:	0006      	movs	r6, r0
   11ab4:	000f      	movs	r7, r1
   11ab6:	9808      	ldr	r0, [sp, #32]
   11ab8:	9909      	ldr	r1, [sp, #36]	; 0x24
   11aba:	47d8      	blx	fp
   11abc:	0002      	movs	r2, r0
   11abe:	000b      	movs	r3, r1
   11ac0:	0030      	movs	r0, r6
   11ac2:	0039      	movs	r1, r7
   11ac4:	4e14      	ldr	r6, [pc, #80]	; (11b18 <gen_RotM+0x168>)
   11ac6:	47b0      	blx	r6
   11ac8:	47a8      	blx	r5
	cal_struct->RotM[2][1] = sin(tX)*cos(tZ);
   11aca:	464a      	mov	r2, r9
   11acc:	4643      	mov	r3, r8
	cal_struct->RotM[2][0]  = (sin(tX)*sin(tZ))-(cos(tX)*sin(tY));
   11ace:	64e0      	str	r0, [r4, #76]	; 0x4c
	cal_struct->RotM[2][1] = sin(tX)*cos(tZ);
   11ad0:	9804      	ldr	r0, [sp, #16]
   11ad2:	9905      	ldr	r1, [sp, #20]
   11ad4:	47d8      	blx	fp
   11ad6:	47a8      	blx	r5
	cal_struct->RotM[2][2] = cos(tX)*cos(tY);
   11ad8:	9a00      	ldr	r2, [sp, #0]
   11ada:	9b01      	ldr	r3, [sp, #4]
	cal_struct->RotM[2][1] = sin(tX)*cos(tZ);
   11adc:	6520      	str	r0, [r4, #80]	; 0x50
	cal_struct->RotM[2][2] = cos(tX)*cos(tY);
   11ade:	9802      	ldr	r0, [sp, #8]
   11ae0:	9903      	ldr	r1, [sp, #12]
   11ae2:	47d8      	blx	fp
   11ae4:	47a8      	blx	r5
   11ae6:	6560      	str	r0, [r4, #84]	; 0x54
	
}
   11ae8:	b00d      	add	sp, #52	; 0x34
   11aea:	bc3c      	pop	{r2, r3, r4, r5}
   11aec:	4690      	mov	r8, r2
   11aee:	4699      	mov	r9, r3
   11af0:	46a2      	mov	sl, r4
   11af2:	46ab      	mov	fp, r5
   11af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11af6:	46c0      	nop			; (mov r8, r8)
   11af8:	0001d939 	.word	0x0001d939
   11afc:	3c8efa35 	.word	0x3c8efa35
   11b00:	0001fb6d 	.word	0x0001fb6d
   11b04:	0001a2c9 	.word	0x0001a2c9
   11b08:	0001eea5 	.word	0x0001eea5
   11b0c:	0001fc11 	.word	0x0001fc11
   11b10:	0001a355 	.word	0x0001a355
   11b14:	0001e01d 	.word	0x0001e01d
   11b18:	0001f3a5 	.word	0x0001f3a5

00011b1c <cal_angleX>:
void cal_angleX(float XYZ1[][3], float XYZ2[][3], struct INST_CAL *cal_struct){
   11b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   11b1e:	46de      	mov	lr, fp
   11b20:	4657      	mov	r7, sl
   11b22:	464e      	mov	r6, r9
   11b24:	4645      	mov	r5, r8
   11b26:	b5e0      	push	{r5, r6, r7, lr}
	for (i=0;i<nPoints;i++){
   11b28:	4b43      	ldr	r3, [pc, #268]	; (11c38 <cal_angleX+0x11c>)
void cal_angleX(float XYZ1[][3], float XYZ2[][3], struct INST_CAL *cal_struct){
   11b2a:	4c44      	ldr	r4, [pc, #272]	; (11c3c <cal_angleX+0x120>)
	for (i=0;i<nPoints;i++){
   11b2c:	681b      	ldr	r3, [r3, #0]
void cal_angleX(float XYZ1[][3], float XYZ2[][3], struct INST_CAL *cal_struct){
   11b2e:	44a5      	add	sp, r4
   11b30:	9200      	str	r2, [sp, #0]
	for (i=0;i<nPoints;i++){
   11b32:	9301      	str	r3, [sp, #4]
   11b34:	1e1a      	subs	r2, r3, #0
   11b36:	d100      	bne.n	11b3a <cal_angleX+0x1e>
   11b38:	e078      	b.n	11c2c <cal_angleX+0x110>
   11b3a:	4694      	mov	ip, r2
   11b3c:	468b      	mov	fp, r1
   11b3e:	005b      	lsls	r3, r3, #1
   11b40:	4463      	add	r3, ip
   11b42:	009b      	lsls	r3, r3, #2
   11b44:	3304      	adds	r3, #4
   11b46:	449b      	add	fp, r3
   11b48:	4b3d      	ldr	r3, [pc, #244]	; (11c40 <cal_angleX+0x124>)
   11b4a:	2600      	movs	r6, #0
   11b4c:	469a      	mov	sl, r3
   11b4e:	4f3d      	ldr	r7, [pc, #244]	; (11c44 <cal_angleX+0x128>)
   11b50:	1d0c      	adds	r4, r1, #4
   11b52:	1d05      	adds	r5, r0, #4
		D[i] = XYZ2[i][1]-XYZ2[i][2];
   11b54:	6823      	ldr	r3, [r4, #0]
   11b56:	4699      	mov	r9, r3
   11b58:	6863      	ldr	r3, [r4, #4]
   11b5a:	4648      	mov	r0, r9
   11b5c:	1c19      	adds	r1, r3, #0
   11b5e:	4698      	mov	r8, r3
   11b60:	47b8      	blx	r7
   11b62:	ab02      	add	r3, sp, #8
   11b64:	5198      	str	r0, [r3, r6]
		V[i] = XYZ2[i][1]-XYZ1[i][1]+XYZ2[i][2]-XYZ1[i][2];
   11b66:	6829      	ldr	r1, [r5, #0]
   11b68:	4648      	mov	r0, r9
   11b6a:	47b8      	blx	r7
   11b6c:	4641      	mov	r1, r8
   11b6e:	47d0      	blx	sl
   11b70:	6869      	ldr	r1, [r5, #4]
   11b72:	47b8      	blx	r7
   11b74:	22c8      	movs	r2, #200	; 0xc8
   11b76:	ab02      	add	r3, sp, #8
   11b78:	0052      	lsls	r2, r2, #1
   11b7a:	189b      	adds	r3, r3, r2
   11b7c:	340c      	adds	r4, #12
   11b7e:	5198      	str	r0, [r3, r6]
   11b80:	350c      	adds	r5, #12
   11b82:	3604      	adds	r6, #4
	for (i=0;i<nPoints;i++){
   11b84:	45a3      	cmp	fp, r4
   11b86:	d1e5      	bne.n	11b54 <cal_angleX+0x38>
   11b88:	9b01      	ldr	r3, [sp, #4]
   11b8a:	ae02      	add	r6, sp, #8
   11b8c:	009b      	lsls	r3, r3, #2
   11b8e:	469b      	mov	fp, r3
   11b90:	4699      	mov	r9, r3
   11b92:	4b2d      	ldr	r3, [pc, #180]	; (11c48 <cal_angleX+0x12c>)
   11b94:	46b4      	mov	ip, r6
   11b96:	2700      	movs	r7, #0
   11b98:	4698      	mov	r8, r3
   11b9a:	44e3      	add	fp, ip
		DtD = DtD + pow(D[i],2);
   11b9c:	ce01      	ldmia	r6!, {r0}
   11b9e:	47c0      	blx	r8
   11ba0:	4c2a      	ldr	r4, [pc, #168]	; (11c4c <cal_angleX+0x130>)
   11ba2:	0002      	movs	r2, r0
   11ba4:	000b      	movs	r3, r1
   11ba6:	47a0      	blx	r4
   11ba8:	0004      	movs	r4, r0
   11baa:	1c38      	adds	r0, r7, #0
   11bac:	000d      	movs	r5, r1
   11bae:	47c0      	blx	r8
   11bb0:	0002      	movs	r2, r0
   11bb2:	000b      	movs	r3, r1
   11bb4:	0020      	movs	r0, r4
   11bb6:	0029      	movs	r1, r5
   11bb8:	4c25      	ldr	r4, [pc, #148]	; (11c50 <cal_angleX+0x134>)
   11bba:	47a0      	blx	r4
   11bbc:	4b25      	ldr	r3, [pc, #148]	; (11c54 <cal_angleX+0x138>)
   11bbe:	4798      	blx	r3
   11bc0:	1c07      	adds	r7, r0, #0
	for (i=0;i<nPoints;i++){
   11bc2:	45b3      	cmp	fp, r6
   11bc4:	d1ea      	bne.n	11b9c <cal_angleX+0x80>
   11bc6:	4e24      	ldr	r6, [pc, #144]	; (11c58 <cal_angleX+0x13c>)
   11bc8:	2400      	movs	r4, #0
   11bca:	46b0      	mov	r8, r6
   11bcc:	2500      	movs	r5, #0
   11bce:	464e      	mov	r6, r9
   11bd0:	4657      	mov	r7, sl
   11bd2:	4681      	mov	r9, r0
		DtV = DtV + D[i]*V[i];
   11bd4:	22c8      	movs	r2, #200	; 0xc8
   11bd6:	ab02      	add	r3, sp, #8
   11bd8:	0052      	lsls	r2, r2, #1
   11bda:	189b      	adds	r3, r3, r2
   11bdc:	5919      	ldr	r1, [r3, r4]
   11bde:	ab02      	add	r3, sp, #8
   11be0:	5918      	ldr	r0, [r3, r4]
   11be2:	47c0      	blx	r8
   11be4:	1c01      	adds	r1, r0, #0
   11be6:	1c28      	adds	r0, r5, #0
   11be8:	47b8      	blx	r7
   11bea:	3404      	adds	r4, #4
   11bec:	1c05      	adds	r5, r0, #0
	for (i=0;i<nPoints;i++){
   11bee:	42a6      	cmp	r6, r4
   11bf0:	d1f0      	bne.n	11bd4 <cal_angleX+0xb8>
   11bf2:	46ba      	mov	sl, r7
   11bf4:	4646      	mov	r6, r8
   11bf6:	464f      	mov	r7, r9
	Res = (1/DtD)*DtV;
   11bf8:	20fe      	movs	r0, #254	; 0xfe
   11bfa:	4b18      	ldr	r3, [pc, #96]	; (11c5c <cal_angleX+0x140>)
   11bfc:	1c39      	adds	r1, r7, #0
   11bfe:	0580      	lsls	r0, r0, #22
   11c00:	4798      	blx	r3
   11c02:	1c29      	adds	r1, r5, #0
   11c04:	47b0      	blx	r6
	cal_struct->thetaX += -1*RAD2DEG*Res;
   11c06:	4916      	ldr	r1, [pc, #88]	; (11c60 <cal_angleX+0x144>)
   11c08:	47b0      	blx	r6
   11c0a:	9c00      	ldr	r4, [sp, #0]
   11c0c:	1c01      	adds	r1, r0, #0
   11c0e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   11c10:	47d0      	blx	sl
	gen_RotM(cal_struct);
   11c12:	4b14      	ldr	r3, [pc, #80]	; (11c64 <cal_angleX+0x148>)
	cal_struct->thetaX += -1*RAD2DEG*Res;
   11c14:	62a0      	str	r0, [r4, #40]	; 0x28
	gen_RotM(cal_struct);
   11c16:	0020      	movs	r0, r4
   11c18:	4798      	blx	r3
}
   11c1a:	23cb      	movs	r3, #203	; 0xcb
   11c1c:	009b      	lsls	r3, r3, #2
   11c1e:	449d      	add	sp, r3
   11c20:	bc3c      	pop	{r2, r3, r4, r5}
   11c22:	4690      	mov	r8, r2
   11c24:	4699      	mov	r9, r3
   11c26:	46a2      	mov	sl, r4
   11c28:	46ab      	mov	fp, r5
   11c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i=0;i<nPoints;i++){
   11c2c:	2700      	movs	r7, #0
   11c2e:	4b04      	ldr	r3, [pc, #16]	; (11c40 <cal_angleX+0x124>)
   11c30:	1c3d      	adds	r5, r7, #0
   11c32:	469a      	mov	sl, r3
   11c34:	4e08      	ldr	r6, [pc, #32]	; (11c58 <cal_angleX+0x13c>)
   11c36:	e7df      	b.n	11bf8 <cal_angleX+0xdc>
   11c38:	20003340 	.word	0x20003340
   11c3c:	fffffcd4 	.word	0xfffffcd4
   11c40:	0001d235 	.word	0x0001d235
   11c44:	0001db79 	.word	0x0001db79
   11c48:	0001fb6d 	.word	0x0001fb6d
   11c4c:	0001eea5 	.word	0x0001eea5
   11c50:	0001e01d 	.word	0x0001e01d
   11c54:	0001fc11 	.word	0x0001fc11
   11c58:	0001d939 	.word	0x0001d939
   11c5c:	0001d559 	.word	0x0001d559
   11c60:	c2652ee0 	.word	0xc2652ee0
   11c64:	000119b1 	.word	0x000119b1

00011c68 <cal_angleYZ>:
void cal_angleYZ(float XYZ[][3], struct INST_CAL *cal_struct){
   11c68:	b5f0      	push	{r4, r5, r6, r7, lr}
   11c6a:	46de      	mov	lr, fp
   11c6c:	4657      	mov	r7, sl
   11c6e:	464e      	mov	r6, r9
   11c70:	4645      	mov	r5, r8
   11c72:	b5e0      	push	{r5, r6, r7, lr}
	for (k=0;k< nGroups;k++){
   11c74:	4ba2      	ldr	r3, [pc, #648]	; (11f00 <cal_angleYZ+0x298>)
void cal_angleYZ(float XYZ[][3], struct INST_CAL *cal_struct){
   11c76:	4ca3      	ldr	r4, [pc, #652]	; (11f04 <cal_angleYZ+0x29c>)
	for (k=0;k< nGroups;k++){
   11c78:	469b      	mov	fp, r3
   11c7a:	681b      	ldr	r3, [r3, #0]
void cal_angleYZ(float XYZ[][3], struct INST_CAL *cal_struct){
   11c7c:	44a5      	add	sp, r4
   11c7e:	4682      	mov	sl, r0
   11c80:	9105      	str	r1, [sp, #20]
	for (k=0;k< nGroups;k++){
   11c82:	2b00      	cmp	r3, #0
   11c84:	d100      	bne.n	11c88 <cal_angleYZ+0x20>
   11c86:	e135      	b.n	11ef4 <cal_angleYZ+0x28c>
   11c88:	2300      	movs	r3, #0
   11c8a:	2400      	movs	r4, #0
   11c8c:	4698      	mov	r8, r3
   11c8e:	ab0c      	add	r3, sp, #48	; 0x30
   11c90:	9300      	str	r3, [sp, #0]
   11c92:	4b9d      	ldr	r3, [pc, #628]	; (11f08 <cal_angleYZ+0x2a0>)
   11c94:	ad70      	add	r5, sp, #448	; 0x1c0
   11c96:	9301      	str	r3, [sp, #4]
   11c98:	1d26      	adds	r6, r4, #4
   11c9a:	0027      	movs	r7, r4
   11c9c:	46a1      	mov	r9, r4
   11c9e:	4654      	mov	r4, sl
   11ca0:	b2f6      	uxtb	r6, r6
			calc_theta_XY(&XYZ[ind][0], &roll_ang[ind], &x_ang_shift[ind]);
   11ca2:	9b00      	ldr	r3, [sp, #0]
   11ca4:	0078      	lsls	r0, r7, #1
   11ca6:	469c      	mov	ip, r3
   11ca8:	19c0      	adds	r0, r0, r7
   11caa:	00b9      	lsls	r1, r7, #2
   11cac:	0080      	lsls	r0, r0, #2
   11cae:	3701      	adds	r7, #1
   11cb0:	186a      	adds	r2, r5, r1
   11cb2:	1820      	adds	r0, r4, r0
   11cb4:	4461      	add	r1, ip
   11cb6:	4b95      	ldr	r3, [pc, #596]	; (11f0c <cal_angleYZ+0x2a4>)
   11cb8:	b2ff      	uxtb	r7, r7
   11cba:	4798      	blx	r3
		for (j=0;j<GROUP_SIZE;j++){
   11cbc:	42be      	cmp	r6, r7
   11cbe:	d1f0      	bne.n	11ca2 <cal_angleYZ+0x3a>
		group_avg = meanArr( &x_ang_shift[k*GROUP_SIZE],GROUP_SIZE);
   11cc0:	4643      	mov	r3, r8
   11cc2:	0118      	lsls	r0, r3, #4
   11cc4:	2104      	movs	r1, #4
   11cc6:	4b92      	ldr	r3, [pc, #584]	; (11f10 <cal_angleYZ+0x2a8>)
   11cc8:	46a2      	mov	sl, r4
   11cca:	1828      	adds	r0, r5, r0
   11ccc:	464c      	mov	r4, r9
   11cce:	4798      	blx	r3
			x_ang_shift[ind] = x_ang_shift[ind]-group_avg;
   11cd0:	00a7      	lsls	r7, r4, #2
		group_avg = meanArr( &x_ang_shift[k*GROUP_SIZE],GROUP_SIZE);
   11cd2:	4681      	mov	r9, r0
			x_ang_shift[ind] = x_ang_shift[ind]-group_avg;
   11cd4:	1c01      	adds	r1, r0, #0
   11cd6:	9b01      	ldr	r3, [sp, #4]
   11cd8:	59e8      	ldr	r0, [r5, r7]
   11cda:	4798      	blx	r3
   11cdc:	51e8      	str	r0, [r5, r7]
   11cde:	1c67      	adds	r7, r4, #1
   11ce0:	b2ff      	uxtb	r7, r7
   11ce2:	00bf      	lsls	r7, r7, #2
   11ce4:	59e8      	ldr	r0, [r5, r7]
   11ce6:	9a01      	ldr	r2, [sp, #4]
   11ce8:	4649      	mov	r1, r9
   11cea:	4790      	blx	r2
   11cec:	51e8      	str	r0, [r5, r7]
   11cee:	1ca7      	adds	r7, r4, #2
   11cf0:	b2ff      	uxtb	r7, r7
   11cf2:	00bf      	lsls	r7, r7, #2
   11cf4:	59e8      	ldr	r0, [r5, r7]
   11cf6:	4649      	mov	r1, r9
   11cf8:	9b01      	ldr	r3, [sp, #4]
   11cfa:	4798      	blx	r3
   11cfc:	3403      	adds	r4, #3
   11cfe:	b2e4      	uxtb	r4, r4
   11d00:	00a4      	lsls	r4, r4, #2
   11d02:	51e8      	str	r0, [r5, r7]
   11d04:	5928      	ldr	r0, [r5, r4]
   11d06:	9b01      	ldr	r3, [sp, #4]
   11d08:	4649      	mov	r1, r9
   11d0a:	4798      	blx	r3
	for (k=0;k< nGroups;k++){
   11d0c:	4643      	mov	r3, r8
   11d0e:	3301      	adds	r3, #1
   11d10:	b2db      	uxtb	r3, r3
   11d12:	4698      	mov	r8, r3
   11d14:	465b      	mov	r3, fp
   11d16:	681b      	ldr	r3, [r3, #0]
			x_ang_shift[ind] = x_ang_shift[ind]-group_avg;
   11d18:	5128      	str	r0, [r5, r4]
   11d1a:	0034      	movs	r4, r6
	for (k=0;k< nGroups;k++){
   11d1c:	4598      	cmp	r8, r3
   11d1e:	d3bb      	bcc.n	11c98 <cal_angleYZ+0x30>
	for (np=0;np<nPoints;np++){
   11d20:	4b7c      	ldr	r3, [pc, #496]	; (11f14 <cal_angleYZ+0x2ac>)
   11d22:	681f      	ldr	r7, [r3, #0]
   11d24:	2f00      	cmp	r7, #0
   11d26:	d100      	bne.n	11d2a <cal_angleYZ+0xc2>
   11d28:	e0e7      	b.n	11efa <cal_angleYZ+0x292>
   11d2a:	ab0c      	add	r3, sp, #48	; 0x30
   11d2c:	9300      	str	r3, [sp, #0]
   11d2e:	4b7a      	ldr	r3, [pc, #488]	; (11f18 <cal_angleYZ+0x2b0>)
   11d30:	2600      	movs	r6, #0
   11d32:	469b      	mov	fp, r3
   11d34:	4b79      	ldr	r3, [pc, #484]	; (11f1c <cal_angleYZ+0x2b4>)
   11d36:	46b9      	mov	r9, r7
   11d38:	4698      	mov	r8, r3
   11d3a:	4b79      	ldr	r3, [pc, #484]	; (11f20 <cal_angleYZ+0x2b8>)
   11d3c:	469a      	mov	sl, r3
		X[np][0] = cos(DEG2RAD*roll_ang[np]);
   11d3e:	9a00      	ldr	r2, [sp, #0]
   11d40:	00b3      	lsls	r3, r6, #2
   11d42:	58d0      	ldr	r0, [r2, r3]
   11d44:	4977      	ldr	r1, [pc, #476]	; (11f24 <cal_angleYZ+0x2bc>)
   11d46:	47d8      	blx	fp
   11d48:	47c0      	blx	r8
   11d4a:	4b77      	ldr	r3, [pc, #476]	; (11f28 <cal_angleYZ+0x2c0>)
   11d4c:	0004      	movs	r4, r0
   11d4e:	000d      	movs	r5, r1
   11d50:	4798      	blx	r3
   11d52:	47d0      	blx	sl
   11d54:	22ce      	movs	r2, #206	; 0xce
   11d56:	ab06      	add	r3, sp, #24
   11d58:	0092      	lsls	r2, r2, #2
   11d5a:	189b      	adds	r3, r3, r2
   11d5c:	00f7      	lsls	r7, r6, #3
   11d5e:	51d8      	str	r0, [r3, r7]
		X[np][1] = sin(DEG2RAD*roll_ang[np]);
   11d60:	0029      	movs	r1, r5
   11d62:	4b72      	ldr	r3, [pc, #456]	; (11f2c <cal_angleYZ+0x2c4>)
   11d64:	0020      	movs	r0, r4
   11d66:	4798      	blx	r3
   11d68:	abd4      	add	r3, sp, #848	; 0x350
   11d6a:	469c      	mov	ip, r3
   11d6c:	4467      	add	r7, ip
   11d6e:	47d0      	blx	sl
	for (np=0;np<nPoints;np++){
   11d70:	3601      	adds	r6, #1
   11d72:	b2f6      	uxtb	r6, r6
		X[np][1] = sin(DEG2RAD*roll_ang[np]);
   11d74:	6078      	str	r0, [r7, #4]
	for (np=0;np<nPoints;np++){
   11d76:	454e      	cmp	r6, r9
   11d78:	d3e1      	bcc.n	11d3e <cal_angleYZ+0xd6>
   11d7a:	464f      	mov	r7, r9
			for (np=0;np<nPoints;np++){
   11d7c:	2300      	movs	r3, #0
   11d7e:	469a      	mov	sl, r3
   11d80:	4b6b      	ldr	r3, [pc, #428]	; (11f30 <cal_angleYZ+0x2c8>)
   11d82:	46b9      	mov	r9, r7
   11d84:	4698      	mov	r8, r3
   11d86:	aed4      	add	r6, sp, #848	; 0x350
   11d88:	4653      	mov	r3, sl
   11d8a:	aa08      	add	r2, sp, #32
   11d8c:	4694      	mov	ip, r2
	for (np=0;np<nPoints;np++){
   11d8e:	2700      	movs	r7, #0
   11d90:	00db      	lsls	r3, r3, #3
   11d92:	4463      	add	r3, ip
   11d94:	9300      	str	r3, [sp, #0]
			tempX1[i][j]=0;
   11d96:	2200      	movs	r2, #0
   11d98:	601a      	str	r2, [r3, #0]
			for (np=0;np<nPoints;np++){
   11d9a:	464b      	mov	r3, r9
   11d9c:	2b00      	cmp	r3, #0
   11d9e:	d01a      	beq.n	11dd6 <cal_angleYZ+0x16e>
   11da0:	003b      	movs	r3, r7
   11da2:	2500      	movs	r5, #0
   11da4:	464f      	mov	r7, r9
   11da6:	2400      	movs	r4, #0
   11da8:	4699      	mov	r9, r3
				tempX1[i][j] = tempX1[i][j]+X[np][j]*X[np][i];
   11daa:	464a      	mov	r2, r9
   11dac:	0063      	lsls	r3, r4, #1
   11dae:	189a      	adds	r2, r3, r2
   11db0:	4453      	add	r3, sl
   11db2:	0092      	lsls	r2, r2, #2
   11db4:	009b      	lsls	r3, r3, #2
   11db6:	58f1      	ldr	r1, [r6, r3]
   11db8:	58b0      	ldr	r0, [r6, r2]
   11dba:	47d8      	blx	fp
   11dbc:	1c01      	adds	r1, r0, #0
   11dbe:	1c28      	adds	r0, r5, #0
   11dc0:	47c0      	blx	r8
			for (np=0;np<nPoints;np++){
   11dc2:	3401      	adds	r4, #1
   11dc4:	b2e4      	uxtb	r4, r4
				tempX1[i][j] = tempX1[i][j]+X[np][j]*X[np][i];
   11dc6:	1c05      	adds	r5, r0, #0
			for (np=0;np<nPoints;np++){
   11dc8:	42a7      	cmp	r7, r4
   11dca:	d8ee      	bhi.n	11daa <cal_angleYZ+0x142>
   11dcc:	464b      	mov	r3, r9
   11dce:	46b9      	mov	r9, r7
   11dd0:	001f      	movs	r7, r3
   11dd2:	9b00      	ldr	r3, [sp, #0]
   11dd4:	6018      	str	r0, [r3, #0]
   11dd6:	9b00      	ldr	r3, [sp, #0]
   11dd8:	3701      	adds	r7, #1
   11dda:	3304      	adds	r3, #4
   11ddc:	9300      	str	r3, [sp, #0]
		for (j=0;j<2;j++){
   11dde:	2f02      	cmp	r7, #2
   11de0:	d1d9      	bne.n	11d96 <cal_angleYZ+0x12e>
   11de2:	2301      	movs	r3, #1
   11de4:	469c      	mov	ip, r3
   11de6:	44e2      	add	sl, ip
	for (i=0;i<2;i++){
   11de8:	4653      	mov	r3, sl
   11dea:	2b02      	cmp	r3, #2
   11dec:	d1cc      	bne.n	11d88 <cal_angleYZ+0x120>
	detX = tempX1[0][0]*tempX1[1][1]-(tempX1[0][1]*tempX1[1][0]);
   11dee:	9b08      	ldr	r3, [sp, #32]
   11df0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11df2:	469a      	mov	sl, r3
   11df4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11df6:	4650      	mov	r0, sl
   11df8:	1c19      	adds	r1, r3, #0
   11dfa:	9300      	str	r3, [sp, #0]
   11dfc:	464f      	mov	r7, r9
   11dfe:	4691      	mov	r9, r2
   11e00:	47d8      	blx	fp
   11e02:	9d09      	ldr	r5, [sp, #36]	; 0x24
   11e04:	1c04      	adds	r4, r0, #0
   11e06:	4649      	mov	r1, r9
   11e08:	1c28      	adds	r0, r5, #0
   11e0a:	47d8      	blx	fp
   11e0c:	9a01      	ldr	r2, [sp, #4]
   11e0e:	1c01      	adds	r1, r0, #0
   11e10:	1c20      	adds	r0, r4, #0
   11e12:	4790      	blx	r2
	tempX2[0][0] = tempX1[1][1]/detX;
   11e14:	4c47      	ldr	r4, [pc, #284]	; (11f34 <cal_angleYZ+0x2cc>)
	detX = tempX1[0][0]*tempX1[1][1]-(tempX1[0][1]*tempX1[1][0]);
   11e16:	1c06      	adds	r6, r0, #0
	tempX2[0][0] = tempX1[1][1]/detX;
   11e18:	1c01      	adds	r1, r0, #0
   11e1a:	9800      	ldr	r0, [sp, #0]
   11e1c:	47a0      	blx	r4
	tempX2[1][1] = tempX1[0][0]/detX;
   11e1e:	1c31      	adds	r1, r6, #0
	tempX2[0][0] = tempX1[1][1]/detX;
   11e20:	9000      	str	r0, [sp, #0]
	tempX2[1][1] = tempX1[0][0]/detX;
   11e22:	4650      	mov	r0, sl
   11e24:	47a0      	blx	r4
	tempX2[0][1] = -1*tempX1[1][0]/detX;
   11e26:	2380      	movs	r3, #128	; 0x80
   11e28:	061b      	lsls	r3, r3, #24
   11e2a:	444b      	add	r3, r9
	tempX2[1][1] = tempX1[0][0]/detX;
   11e2c:	9002      	str	r0, [sp, #8]
	tempX2[0][1] = -1*tempX1[1][0]/detX;
   11e2e:	1c31      	adds	r1, r6, #0
   11e30:	0018      	movs	r0, r3
   11e32:	47a0      	blx	r4
	tempX2[1][0] = -1*tempX1[0][1]/detX;
   11e34:	2380      	movs	r3, #128	; 0x80
   11e36:	061b      	lsls	r3, r3, #24
	tempX2[0][1] = -1*tempX1[1][0]/detX;
   11e38:	9003      	str	r0, [sp, #12]
	tempX2[1][0] = -1*tempX1[0][1]/detX;
   11e3a:	1c31      	adds	r1, r6, #0
   11e3c:	18e8      	adds	r0, r5, r3
   11e3e:	47a0      	blx	r4
   11e40:	2300      	movs	r3, #0
   11e42:	4699      	mov	r9, r3
   11e44:	003b      	movs	r3, r7
   11e46:	464f      	mov	r7, r9
   11e48:	4699      	mov	r9, r3
   11e4a:	9004      	str	r0, [sp, #16]
   11e4c:	ac70      	add	r4, sp, #448	; 0x1c0
   11e4e:	00bb      	lsls	r3, r7, #2
   11e50:	469a      	mov	sl, r3
		tempX3[i] = 0;
   11e52:	2100      	movs	r1, #0
   11e54:	4652      	mov	r2, sl
   11e56:	ab06      	add	r3, sp, #24
   11e58:	5099      	str	r1, [r3, r2]
		for (np=0;np<nPoints;np++){
   11e5a:	464b      	mov	r3, r9
   11e5c:	2600      	movs	r6, #0
   11e5e:	2500      	movs	r5, #0
   11e60:	2b00      	cmp	r3, #0
   11e62:	d015      	beq.n	11e90 <cal_angleYZ+0x228>
			tempX3[i] = tempX3[i] + X[np][i]*x_ang_shift[np];
   11e64:	20ce      	movs	r0, #206	; 0xce
   11e66:	00aa      	lsls	r2, r5, #2
   11e68:	006b      	lsls	r3, r5, #1
   11e6a:	58a1      	ldr	r1, [r4, r2]
   11e6c:	0080      	lsls	r0, r0, #2
   11e6e:	19db      	adds	r3, r3, r7
   11e70:	aa06      	add	r2, sp, #24
   11e72:	009b      	lsls	r3, r3, #2
   11e74:	1812      	adds	r2, r2, r0
   11e76:	58d0      	ldr	r0, [r2, r3]
   11e78:	47d8      	blx	fp
   11e7a:	1c01      	adds	r1, r0, #0
   11e7c:	1c30      	adds	r0, r6, #0
   11e7e:	47c0      	blx	r8
		for (np=0;np<nPoints;np++){
   11e80:	3501      	adds	r5, #1
   11e82:	b2ed      	uxtb	r5, r5
			tempX3[i] = tempX3[i] + X[np][i]*x_ang_shift[np];
   11e84:	1c06      	adds	r6, r0, #0
		for (np=0;np<nPoints;np++){
   11e86:	45a9      	cmp	r9, r5
   11e88:	d8ec      	bhi.n	11e64 <cal_angleYZ+0x1fc>
   11e8a:	4652      	mov	r2, sl
   11e8c:	ab06      	add	r3, sp, #24
   11e8e:	5098      	str	r0, [r3, r2]
   11e90:	3701      	adds	r7, #1
	for (i=0;i<2;i++){
   11e92:	2f02      	cmp	r7, #2
   11e94:	d1db      	bne.n	11e4e <cal_angleYZ+0x1e6>
   11e96:	9d06      	ldr	r5, [sp, #24]
			B[i] = B[i]+tempX2[i][j]*tempX3[j];
   11e98:	9800      	ldr	r0, [sp, #0]
   11e9a:	1c29      	adds	r1, r5, #0
   11e9c:	47d8      	blx	fp
   11e9e:	2100      	movs	r1, #0
   11ea0:	47c0      	blx	r8
   11ea2:	9c07      	ldr	r4, [sp, #28]
   11ea4:	1c06      	adds	r6, r0, #0
   11ea6:	1c21      	adds	r1, r4, #0
   11ea8:	9803      	ldr	r0, [sp, #12]
   11eaa:	47d8      	blx	fp
   11eac:	1c01      	adds	r1, r0, #0
   11eae:	1c30      	adds	r0, r6, #0
   11eb0:	47c0      	blx	r8
	cal_struct->thetaY += B[0];
   11eb2:	9e05      	ldr	r6, [sp, #20]
			B[i] = B[i]+tempX2[i][j]*tempX3[j];
   11eb4:	1c01      	adds	r1, r0, #0
	cal_struct->thetaY += B[0];
   11eb6:	6af0      	ldr	r0, [r6, #44]	; 0x2c
   11eb8:	47c0      	blx	r8
			B[i] = B[i]+tempX2[i][j]*tempX3[j];
   11eba:	1c29      	adds	r1, r5, #0
	cal_struct->thetaY += B[0];
   11ebc:	62f0      	str	r0, [r6, #44]	; 0x2c
			B[i] = B[i]+tempX2[i][j]*tempX3[j];
   11ebe:	9804      	ldr	r0, [sp, #16]
   11ec0:	47d8      	blx	fp
   11ec2:	2100      	movs	r1, #0
   11ec4:	47c0      	blx	r8
   11ec6:	1c21      	adds	r1, r4, #0
   11ec8:	1c05      	adds	r5, r0, #0
   11eca:	9802      	ldr	r0, [sp, #8]
   11ecc:	47d8      	blx	fp
   11ece:	1c01      	adds	r1, r0, #0
   11ed0:	1c28      	adds	r0, r5, #0
   11ed2:	47c0      	blx	r8
	cal_struct->thetaZ += -1*B[1];
   11ed4:	9b01      	ldr	r3, [sp, #4]
			B[i] = B[i]+tempX2[i][j]*tempX3[j];
   11ed6:	1c01      	adds	r1, r0, #0
	cal_struct->thetaZ += -1*B[1];
   11ed8:	6b30      	ldr	r0, [r6, #48]	; 0x30
   11eda:	4798      	blx	r3
	gen_RotM(cal_struct);
   11edc:	4b16      	ldr	r3, [pc, #88]	; (11f38 <cal_angleYZ+0x2d0>)
	cal_struct->thetaZ += -1*B[1];
   11ede:	6330      	str	r0, [r6, #48]	; 0x30
	gen_RotM(cal_struct);
   11ee0:	0030      	movs	r0, r6
   11ee2:	4798      	blx	r3
}
   11ee4:	4b15      	ldr	r3, [pc, #84]	; (11f3c <cal_angleYZ+0x2d4>)
   11ee6:	449d      	add	sp, r3
   11ee8:	bc3c      	pop	{r2, r3, r4, r5}
   11eea:	4690      	mov	r8, r2
   11eec:	4699      	mov	r9, r3
   11eee:	46a2      	mov	sl, r4
   11ef0:	46ab      	mov	fp, r5
   11ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11ef4:	4b04      	ldr	r3, [pc, #16]	; (11f08 <cal_angleYZ+0x2a0>)
   11ef6:	9301      	str	r3, [sp, #4]
   11ef8:	e712      	b.n	11d20 <cal_angleYZ+0xb8>
   11efa:	4b07      	ldr	r3, [pc, #28]	; (11f18 <cal_angleYZ+0x2b0>)
   11efc:	469b      	mov	fp, r3
   11efe:	e73d      	b.n	11d7c <cal_angleYZ+0x114>
   11f00:	20003924 	.word	0x20003924
   11f04:	fffff98c 	.word	0xfffff98c
   11f08:	0001db79 	.word	0x0001db79
   11f0c:	0000967d 	.word	0x0000967d
   11f10:	00009835 	.word	0x00009835
   11f14:	20003340 	.word	0x20003340
   11f18:	0001d939 	.word	0x0001d939
   11f1c:	0001fb6d 	.word	0x0001fb6d
   11f20:	0001fc11 	.word	0x0001fc11
   11f24:	3c8efa35 	.word	0x3c8efa35
   11f28:	0001a2c9 	.word	0x0001a2c9
   11f2c:	0001a355 	.word	0x0001a355
   11f30:	0001d235 	.word	0x0001d235
   11f34:	0001d559 	.word	0x0001d559
   11f38:	000119b1 	.word	0x000119b1
   11f3c:	00000674 	.word	0x00000674

00011f40 <cal_gain_off>:





void cal_gain_off(float XYZ[][3], struct INST_CAL *cal_struct){
   11f40:	b5f0      	push	{r4, r5, r6, r7, lr}
   11f42:	4645      	mov	r5, r8
   11f44:	46de      	mov	lr, fp
   11f46:	4657      	mov	r7, sl
   11f48:	464e      	mov	r6, r9
   11f4a:	b5e0      	push	{r5, r6, r7, lr}
	uint8_t i,j,k;
	

	
	
	for (i=0;i<nPoints;i++){
   11f4c:	4bf5      	ldr	r3, [pc, #980]	; (12324 <cal_gain_off+0x3e4>)
void cal_gain_off(float XYZ[][3], struct INST_CAL *cal_struct){
   11f4e:	4cf6      	ldr	r4, [pc, #984]	; (12328 <cal_gain_off+0x3e8>)
	for (i=0;i<nPoints;i++){
   11f50:	681b      	ldr	r3, [r3, #0]
void cal_gain_off(float XYZ[][3], struct INST_CAL *cal_struct){
   11f52:	44a5      	add	sp, r4
   11f54:	9000      	str	r0, [sp, #0]
   11f56:	9103      	str	r1, [sp, #12]
	for (i=0;i<nPoints;i++){
   11f58:	4698      	mov	r8, r3
   11f5a:	2b00      	cmp	r3, #0
   11f5c:	d100      	bne.n	11f60 <cal_gain_off+0x20>
   11f5e:	e253      	b.n	12408 <cal_gain_off+0x4c8>
   11f60:	4af2      	ldr	r2, [pc, #968]	; (1232c <cal_gain_off+0x3ec>)
   11f62:	2300      	movs	r3, #0
   11f64:	4692      	mov	sl, r2
   11f66:	4af2      	ldr	r2, [pc, #968]	; (12330 <cal_gain_off+0x3f0>)
   11f68:	2700      	movs	r7, #0
   11f6a:	4693      	mov	fp, r2
		D[i][0] = XYZ[i][0]*XYZ[i][0];
   11f6c:	005d      	lsls	r5, r3, #1
   11f6e:	18ed      	adds	r5, r5, r3
   11f70:	9b00      	ldr	r3, [sp, #0]
   11f72:	00ad      	lsls	r5, r5, #2
   11f74:	469c      	mov	ip, r3
   11f76:	4465      	add	r5, ip
   11f78:	682b      	ldr	r3, [r5, #0]
   11f7a:	007c      	lsls	r4, r7, #1
   11f7c:	1c19      	adds	r1, r3, #0
   11f7e:	1c18      	adds	r0, r3, #0
   11f80:	4699      	mov	r9, r3
   11f82:	47d0      	blx	sl
   11f84:	22c0      	movs	r2, #192	; 0xc0
   11f86:	19e4      	adds	r4, r4, r7
   11f88:	ab08      	add	r3, sp, #32
   11f8a:	189b      	adds	r3, r3, r2
   11f8c:	00e4      	lsls	r4, r4, #3
   11f8e:	5118      	str	r0, [r3, r4]
		D[i][1] = XYZ[i][1]*XYZ[i][1];
   11f90:	ab38      	add	r3, sp, #224	; 0xe0
   11f92:	469c      	mov	ip, r3
   11f94:	686e      	ldr	r6, [r5, #4]
   11f96:	4464      	add	r4, ip
   11f98:	1c31      	adds	r1, r6, #0
   11f9a:	1c30      	adds	r0, r6, #0
   11f9c:	47d0      	blx	sl
		D[i][2] = XYZ[i][2]*XYZ[i][2];
   11f9e:	68ad      	ldr	r5, [r5, #8]
		D[i][1] = XYZ[i][1]*XYZ[i][1];
   11fa0:	6060      	str	r0, [r4, #4]
		D[i][2] = XYZ[i][2]*XYZ[i][2];
   11fa2:	1c29      	adds	r1, r5, #0
   11fa4:	1c28      	adds	r0, r5, #0
   11fa6:	47d0      	blx	sl
		D[i][3] = 2*XYZ[i][0];
   11fa8:	4649      	mov	r1, r9
		D[i][2] = XYZ[i][2]*XYZ[i][2];
   11faa:	60a0      	str	r0, [r4, #8]
		D[i][3] = 2*XYZ[i][0];
   11fac:	4648      	mov	r0, r9
   11fae:	47d8      	blx	fp
		D[i][4] = 2*XYZ[i][1];
   11fb0:	1c31      	adds	r1, r6, #0
		D[i][3] = 2*XYZ[i][0];
   11fb2:	60e0      	str	r0, [r4, #12]
		D[i][4] = 2*XYZ[i][1];
   11fb4:	1c30      	adds	r0, r6, #0
   11fb6:	47d8      	blx	fp
		D[i][5] = 2*XYZ[i][2];
   11fb8:	1c29      	adds	r1, r5, #0
		D[i][4] = 2*XYZ[i][1];
   11fba:	6120      	str	r0, [r4, #16]
		D[i][5] = 2*XYZ[i][2];
   11fbc:	1c28      	adds	r0, r5, #0
   11fbe:	47d8      	blx	fp
	for (i=0;i<nPoints;i++){
   11fc0:	3701      	adds	r7, #1
   11fc2:	b2ff      	uxtb	r7, r7
		D[i][5] = 2*XYZ[i][2];
   11fc4:	6160      	str	r0, [r4, #20]
	for (i=0;i<nPoints;i++){
   11fc6:	003b      	movs	r3, r7
   11fc8:	4547      	cmp	r7, r8
   11fca:	d3cf      	bcc.n	11f6c <cal_gain_off+0x2c>
   11fcc:	ab14      	add	r3, sp, #80	; 0x50
   11fce:	9302      	str	r3, [sp, #8]
	}
	
	for (i=0;i<6;i++){
		for (j=0;j<6;j++){
			temp1[i][j] = 0;
			for (k=0;k<nPoints;k++){
   11fd0:	2300      	movs	r3, #0
   11fd2:	4699      	mov	r9, r3
   11fd4:	ae38      	add	r6, sp, #224	; 0xe0
	for (i=0;i<nPoints;i++){
   11fd6:	2700      	movs	r7, #0
   11fd8:	9b02      	ldr	r3, [sp, #8]
   11fda:	9300      	str	r3, [sp, #0]
			temp1[i][j] = 0;
   11fdc:	2200      	movs	r2, #0
   11fde:	601a      	str	r2, [r3, #0]
			for (k=0;k<nPoints;k++){
   11fe0:	4643      	mov	r3, r8
   11fe2:	2b00      	cmp	r3, #0
   11fe4:	d01c      	beq.n	12020 <cal_gain_off+0xe0>
   11fe6:	003b      	movs	r3, r7
   11fe8:	2500      	movs	r5, #0
   11fea:	4647      	mov	r7, r8
   11fec:	2400      	movs	r4, #0
   11fee:	4698      	mov	r8, r3
				temp1[i][j] = temp1[i][j] + D[k][i]*D[k][j];
   11ff0:	464a      	mov	r2, r9
   11ff2:	0063      	lsls	r3, r4, #1
   11ff4:	191b      	adds	r3, r3, r4
   11ff6:	005b      	lsls	r3, r3, #1
   11ff8:	189a      	adds	r2, r3, r2
   11ffa:	4443      	add	r3, r8
   11ffc:	0092      	lsls	r2, r2, #2
   11ffe:	009b      	lsls	r3, r3, #2
   12000:	58f1      	ldr	r1, [r6, r3]
   12002:	58b0      	ldr	r0, [r6, r2]
   12004:	47d0      	blx	sl
   12006:	1c01      	adds	r1, r0, #0
   12008:	1c28      	adds	r0, r5, #0
   1200a:	47d8      	blx	fp
			for (k=0;k<nPoints;k++){
   1200c:	3401      	adds	r4, #1
   1200e:	b2e4      	uxtb	r4, r4
				temp1[i][j] = temp1[i][j] + D[k][i]*D[k][j];
   12010:	1c05      	adds	r5, r0, #0
			for (k=0;k<nPoints;k++){
   12012:	42a7      	cmp	r7, r4
   12014:	d8ec      	bhi.n	11ff0 <cal_gain_off+0xb0>
   12016:	4643      	mov	r3, r8
   12018:	46b8      	mov	r8, r7
   1201a:	001f      	movs	r7, r3
   1201c:	9b00      	ldr	r3, [sp, #0]
   1201e:	6018      	str	r0, [r3, #0]
   12020:	9b00      	ldr	r3, [sp, #0]
   12022:	3701      	adds	r7, #1
   12024:	3304      	adds	r3, #4
   12026:	9300      	str	r3, [sp, #0]
		for (j=0;j<6;j++){
   12028:	2f06      	cmp	r7, #6
   1202a:	d1d7      	bne.n	11fdc <cal_gain_off+0x9c>
   1202c:	2301      	movs	r3, #1
   1202e:	469c      	mov	ip, r3
   12030:	9b02      	ldr	r3, [sp, #8]
   12032:	44e1      	add	r9, ip
   12034:	3318      	adds	r3, #24
   12036:	9302      	str	r3, [sp, #8]
	for (i=0;i<6;i++){
   12038:	464b      	mov	r3, r9
   1203a:	2b06      	cmp	r3, #6
   1203c:	d1cb      	bne.n	11fd6 <cal_gain_off+0x96>
				
			}
		}
	}
	
	inverse(temp1, temp1, 6);
   1203e:	a914      	add	r1, sp, #80	; 0x50
   12040:	4bbc      	ldr	r3, [pc, #752]	; (12334 <cal_gain_off+0x3f4>)
   12042:	2206      	movs	r2, #6
   12044:	0008      	movs	r0, r1
   12046:	4798      	blx	r3
   12048:	4bb6      	ldr	r3, [pc, #728]	; (12324 <cal_gain_off+0x3e4>)
   1204a:	2600      	movs	r6, #0
   1204c:	681f      	ldr	r7, [r3, #0]
   1204e:	ab08      	add	r3, sp, #32
   12050:	4698      	mov	r8, r3
	
	for (i=0;i<6;i++){
		temp2[i] = 0;
   12052:	2300      	movs	r3, #0
   12054:	4699      	mov	r9, r3
   12056:	ad38      	add	r5, sp, #224	; 0xe0
   12058:	4643      	mov	r3, r8
   1205a:	464a      	mov	r2, r9
		for (k = 0;k<nPoints;k++){
   1205c:	2000      	movs	r0, #0
		temp2[i] = 0;
   1205e:	601a      	str	r2, [r3, #0]
		for (k = 0;k<nPoints;k++){
   12060:	2400      	movs	r4, #0
   12062:	2f00      	cmp	r7, #0
   12064:	d00c      	beq.n	12080 <cal_gain_off+0x140>
			temp2[i] = temp2[i]+D[k][i];
   12066:	0063      	lsls	r3, r4, #1
   12068:	191b      	adds	r3, r3, r4
   1206a:	005b      	lsls	r3, r3, #1
   1206c:	199b      	adds	r3, r3, r6
   1206e:	009b      	lsls	r3, r3, #2
		for (k = 0;k<nPoints;k++){
   12070:	3401      	adds	r4, #1
			temp2[i] = temp2[i]+D[k][i];
   12072:	58e9      	ldr	r1, [r5, r3]
		for (k = 0;k<nPoints;k++){
   12074:	b2e4      	uxtb	r4, r4
			temp2[i] = temp2[i]+D[k][i];
   12076:	47d8      	blx	fp
		for (k = 0;k<nPoints;k++){
   12078:	42bc      	cmp	r4, r7
   1207a:	d3f4      	bcc.n	12066 <cal_gain_off+0x126>
   1207c:	4643      	mov	r3, r8
   1207e:	6018      	str	r0, [r3, #0]
   12080:	2304      	movs	r3, #4
   12082:	469c      	mov	ip, r3
   12084:	3601      	adds	r6, #1
   12086:	44e0      	add	r8, ip
	for (i=0;i<6;i++){
   12088:	2e06      	cmp	r6, #6
   1208a:	d1e5      	bne.n	12058 <cal_gain_off+0x118>
   1208c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1208e:	9f08      	ldr	r7, [sp, #32]
   12090:	4698      	mov	r8, r3
   12092:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	

	for (i=0;i<6;i++){
		v[i] = 0;
		for (j=0;j<6;j++){
			v[i] = v[i]+temp1[i][j]*temp2[j];
   12094:	9914      	ldr	r1, [sp, #80]	; 0x50
   12096:	4699      	mov	r9, r3
   12098:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1209a:	1c38      	adds	r0, r7, #0
   1209c:	9300      	str	r3, [sp, #0]
   1209e:	47d0      	blx	sl
   120a0:	2100      	movs	r1, #0
   120a2:	47d8      	blx	fp
   120a4:	9d09      	ldr	r5, [sp, #36]	; 0x24
   120a6:	1c06      	adds	r6, r0, #0
   120a8:	9915      	ldr	r1, [sp, #84]	; 0x54
   120aa:	1c28      	adds	r0, r5, #0
   120ac:	47d0      	blx	sl
   120ae:	1c01      	adds	r1, r0, #0
   120b0:	1c30      	adds	r0, r6, #0
   120b2:	47d8      	blx	fp
   120b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   120b6:	1c06      	adds	r6, r0, #0
   120b8:	9916      	ldr	r1, [sp, #88]	; 0x58
   120ba:	1c20      	adds	r0, r4, #0
   120bc:	47d0      	blx	sl
   120be:	1c01      	adds	r1, r0, #0
   120c0:	1c30      	adds	r0, r6, #0
   120c2:	47d8      	blx	fp
   120c4:	9917      	ldr	r1, [sp, #92]	; 0x5c
   120c6:	1c06      	adds	r6, r0, #0
   120c8:	4640      	mov	r0, r8
   120ca:	47d0      	blx	sl
   120cc:	1c01      	adds	r1, r0, #0
   120ce:	1c30      	adds	r0, r6, #0
   120d0:	47d8      	blx	fp
   120d2:	9918      	ldr	r1, [sp, #96]	; 0x60
   120d4:	1c06      	adds	r6, r0, #0
   120d6:	4648      	mov	r0, r9
   120d8:	47d0      	blx	sl
   120da:	1c01      	adds	r1, r0, #0
   120dc:	1c30      	adds	r0, r6, #0
   120de:	47d8      	blx	fp
   120e0:	9919      	ldr	r1, [sp, #100]	; 0x64
   120e2:	1c06      	adds	r6, r0, #0
   120e4:	9800      	ldr	r0, [sp, #0]
   120e6:	47d0      	blx	sl
   120e8:	1c01      	adds	r1, r0, #0
   120ea:	1c30      	adds	r0, r6, #0
   120ec:	47d8      	blx	fp
   120ee:	991a      	ldr	r1, [sp, #104]	; 0x68
   120f0:	9004      	str	r0, [sp, #16]
   120f2:	900e      	str	r0, [sp, #56]	; 0x38
   120f4:	1c38      	adds	r0, r7, #0
   120f6:	47d0      	blx	sl
   120f8:	2100      	movs	r1, #0
   120fa:	47d8      	blx	fp
   120fc:	991b      	ldr	r1, [sp, #108]	; 0x6c
   120fe:	1c06      	adds	r6, r0, #0
   12100:	1c28      	adds	r0, r5, #0
   12102:	47d0      	blx	sl
   12104:	1c01      	adds	r1, r0, #0
   12106:	1c30      	adds	r0, r6, #0
   12108:	47d8      	blx	fp
   1210a:	991c      	ldr	r1, [sp, #112]	; 0x70
   1210c:	1c06      	adds	r6, r0, #0
   1210e:	1c20      	adds	r0, r4, #0
   12110:	47d0      	blx	sl
   12112:	1c01      	adds	r1, r0, #0
   12114:	1c30      	adds	r0, r6, #0
   12116:	47d8      	blx	fp
   12118:	991d      	ldr	r1, [sp, #116]	; 0x74
   1211a:	1c06      	adds	r6, r0, #0
   1211c:	4640      	mov	r0, r8
   1211e:	47d0      	blx	sl
   12120:	1c01      	adds	r1, r0, #0
   12122:	1c30      	adds	r0, r6, #0
   12124:	47d8      	blx	fp
   12126:	991e      	ldr	r1, [sp, #120]	; 0x78
   12128:	1c06      	adds	r6, r0, #0
   1212a:	4648      	mov	r0, r9
   1212c:	47d0      	blx	sl
   1212e:	1c01      	adds	r1, r0, #0
   12130:	1c30      	adds	r0, r6, #0
   12132:	47d8      	blx	fp
   12134:	991f      	ldr	r1, [sp, #124]	; 0x7c
   12136:	1c06      	adds	r6, r0, #0
   12138:	9800      	ldr	r0, [sp, #0]
   1213a:	47d0      	blx	sl
   1213c:	1c01      	adds	r1, r0, #0
   1213e:	1c30      	adds	r0, r6, #0
   12140:	47d8      	blx	fp
   12142:	9920      	ldr	r1, [sp, #128]	; 0x80
   12144:	9002      	str	r0, [sp, #8]
   12146:	900f      	str	r0, [sp, #60]	; 0x3c
   12148:	1c38      	adds	r0, r7, #0
   1214a:	47d0      	blx	sl
   1214c:	2100      	movs	r1, #0
   1214e:	47d8      	blx	fp
   12150:	9921      	ldr	r1, [sp, #132]	; 0x84
   12152:	1c06      	adds	r6, r0, #0
   12154:	1c28      	adds	r0, r5, #0
   12156:	47d0      	blx	sl
   12158:	1c01      	adds	r1, r0, #0
   1215a:	1c30      	adds	r0, r6, #0
   1215c:	47d8      	blx	fp
   1215e:	9922      	ldr	r1, [sp, #136]	; 0x88
   12160:	1c06      	adds	r6, r0, #0
   12162:	1c20      	adds	r0, r4, #0
   12164:	47d0      	blx	sl
   12166:	1c01      	adds	r1, r0, #0
   12168:	1c30      	adds	r0, r6, #0
   1216a:	47d8      	blx	fp
   1216c:	9923      	ldr	r1, [sp, #140]	; 0x8c
   1216e:	1c06      	adds	r6, r0, #0
   12170:	4640      	mov	r0, r8
   12172:	47d0      	blx	sl
   12174:	1c01      	adds	r1, r0, #0
   12176:	1c30      	adds	r0, r6, #0
   12178:	47d8      	blx	fp
   1217a:	9924      	ldr	r1, [sp, #144]	; 0x90
   1217c:	1c06      	adds	r6, r0, #0
   1217e:	4648      	mov	r0, r9
   12180:	47d0      	blx	sl
   12182:	1c01      	adds	r1, r0, #0
   12184:	1c30      	adds	r0, r6, #0
   12186:	47d8      	blx	fp
   12188:	9925      	ldr	r1, [sp, #148]	; 0x94
   1218a:	1c06      	adds	r6, r0, #0
   1218c:	9800      	ldr	r0, [sp, #0]
   1218e:	47d0      	blx	sl
   12190:	1c01      	adds	r1, r0, #0
   12192:	1c30      	adds	r0, r6, #0
   12194:	47d8      	blx	fp
   12196:	9006      	str	r0, [sp, #24]
   12198:	9010      	str	r0, [sp, #64]	; 0x40
   1219a:	9926      	ldr	r1, [sp, #152]	; 0x98
   1219c:	1c38      	adds	r0, r7, #0
   1219e:	47d0      	blx	sl
   121a0:	2100      	movs	r1, #0
   121a2:	47d8      	blx	fp
   121a4:	9927      	ldr	r1, [sp, #156]	; 0x9c
   121a6:	1c06      	adds	r6, r0, #0
   121a8:	1c28      	adds	r0, r5, #0
   121aa:	47d0      	blx	sl
   121ac:	1c01      	adds	r1, r0, #0
   121ae:	1c30      	adds	r0, r6, #0
   121b0:	47d8      	blx	fp
   121b2:	9928      	ldr	r1, [sp, #160]	; 0xa0
   121b4:	1c06      	adds	r6, r0, #0
   121b6:	1c20      	adds	r0, r4, #0
   121b8:	47d0      	blx	sl
   121ba:	1c01      	adds	r1, r0, #0
   121bc:	1c30      	adds	r0, r6, #0
   121be:	47d8      	blx	fp
   121c0:	9929      	ldr	r1, [sp, #164]	; 0xa4
   121c2:	1c06      	adds	r6, r0, #0
   121c4:	4640      	mov	r0, r8
   121c6:	47d0      	blx	sl
   121c8:	1c01      	adds	r1, r0, #0
   121ca:	1c30      	adds	r0, r6, #0
   121cc:	47d8      	blx	fp
   121ce:	992a      	ldr	r1, [sp, #168]	; 0xa8
   121d0:	1c06      	adds	r6, r0, #0
   121d2:	4648      	mov	r0, r9
   121d4:	47d0      	blx	sl
   121d6:	1c01      	adds	r1, r0, #0
   121d8:	1c30      	adds	r0, r6, #0
   121da:	47d8      	blx	fp
   121dc:	992b      	ldr	r1, [sp, #172]	; 0xac
   121de:	1c06      	adds	r6, r0, #0
   121e0:	9800      	ldr	r0, [sp, #0]
   121e2:	47d0      	blx	sl
   121e4:	1c01      	adds	r1, r0, #0
   121e6:	1c30      	adds	r0, r6, #0
   121e8:	47d8      	blx	fp
   121ea:	992c      	ldr	r1, [sp, #176]	; 0xb0
   121ec:	9007      	str	r0, [sp, #28]
   121ee:	9011      	str	r0, [sp, #68]	; 0x44
   121f0:	1c38      	adds	r0, r7, #0
   121f2:	47d0      	blx	sl
   121f4:	2100      	movs	r1, #0
   121f6:	47d8      	blx	fp
   121f8:	992d      	ldr	r1, [sp, #180]	; 0xb4
   121fa:	1c06      	adds	r6, r0, #0
   121fc:	1c28      	adds	r0, r5, #0
   121fe:	47d0      	blx	sl
   12200:	1c01      	adds	r1, r0, #0
   12202:	1c30      	adds	r0, r6, #0
   12204:	47d8      	blx	fp
   12206:	992e      	ldr	r1, [sp, #184]	; 0xb8
   12208:	1c06      	adds	r6, r0, #0
   1220a:	1c20      	adds	r0, r4, #0
   1220c:	47d0      	blx	sl
   1220e:	1c01      	adds	r1, r0, #0
   12210:	1c30      	adds	r0, r6, #0
   12212:	47d8      	blx	fp
   12214:	992f      	ldr	r1, [sp, #188]	; 0xbc
   12216:	1c06      	adds	r6, r0, #0
   12218:	4640      	mov	r0, r8
   1221a:	47d0      	blx	sl
   1221c:	1c01      	adds	r1, r0, #0
   1221e:	1c30      	adds	r0, r6, #0
   12220:	47d8      	blx	fp
   12222:	9930      	ldr	r1, [sp, #192]	; 0xc0
   12224:	1c06      	adds	r6, r0, #0
   12226:	4648      	mov	r0, r9
   12228:	47d0      	blx	sl
   1222a:	1c01      	adds	r1, r0, #0
   1222c:	1c30      	adds	r0, r6, #0
   1222e:	47d8      	blx	fp
   12230:	9931      	ldr	r1, [sp, #196]	; 0xc4
   12232:	1c06      	adds	r6, r0, #0
   12234:	9800      	ldr	r0, [sp, #0]
   12236:	47d0      	blx	sl
   12238:	1c01      	adds	r1, r0, #0
   1223a:	1c30      	adds	r0, r6, #0
   1223c:	47d8      	blx	fp
   1223e:	9932      	ldr	r1, [sp, #200]	; 0xc8
   12240:	1c06      	adds	r6, r0, #0
   12242:	9012      	str	r0, [sp, #72]	; 0x48
   12244:	1c38      	adds	r0, r7, #0
   12246:	47d0      	blx	sl
   12248:	2100      	movs	r1, #0
   1224a:	47d8      	blx	fp
   1224c:	9933      	ldr	r1, [sp, #204]	; 0xcc
   1224e:	1c07      	adds	r7, r0, #0
   12250:	1c28      	adds	r0, r5, #0
   12252:	47d0      	blx	sl
   12254:	1c01      	adds	r1, r0, #0
   12256:	1c38      	adds	r0, r7, #0
   12258:	47d8      	blx	fp
   1225a:	2230      	movs	r2, #48	; 0x30
   1225c:	2380      	movs	r3, #128	; 0x80
   1225e:	af08      	add	r7, sp, #32
   12260:	18bf      	adds	r7, r7, r2
   12262:	58f9      	ldr	r1, [r7, r3]
   12264:	1c05      	adds	r5, r0, #0
   12266:	1c20      	adds	r0, r4, #0
   12268:	47d0      	blx	sl
   1226a:	2730      	movs	r7, #48	; 0x30
   1226c:	1c01      	adds	r1, r0, #0
   1226e:	1c28      	adds	r0, r5, #0
   12270:	47d8      	blx	fp
   12272:	2384      	movs	r3, #132	; 0x84
   12274:	ad08      	add	r5, sp, #32
   12276:	19ed      	adds	r5, r5, r7
   12278:	58e9      	ldr	r1, [r5, r3]
   1227a:	1c04      	adds	r4, r0, #0
   1227c:	4640      	mov	r0, r8
   1227e:	47d0      	blx	sl
   12280:	1c01      	adds	r1, r0, #0
   12282:	1c20      	adds	r0, r4, #0
   12284:	47d8      	blx	fp
   12286:	2388      	movs	r3, #136	; 0x88
   12288:	ad08      	add	r5, sp, #32
   1228a:	19ed      	adds	r5, r5, r7
   1228c:	58e9      	ldr	r1, [r5, r3]
   1228e:	1c04      	adds	r4, r0, #0
   12290:	4648      	mov	r0, r9
   12292:	47d0      	blx	sl
   12294:	1c01      	adds	r1, r0, #0
   12296:	1c20      	adds	r0, r4, #0
   12298:	47d8      	blx	fp
   1229a:	238c      	movs	r3, #140	; 0x8c
   1229c:	ad08      	add	r5, sp, #32
   1229e:	19ed      	adds	r5, r5, r7
   122a0:	58e9      	ldr	r1, [r5, r3]
   122a2:	1c04      	adds	r4, r0, #0
   122a4:	9800      	ldr	r0, [sp, #0]
   122a6:	47d0      	blx	sl
   122a8:	1c01      	adds	r1, r0, #0
   122aa:	1c20      	adds	r0, r4, #0
   122ac:	47d8      	blx	fp
		
	}
	

	for (i=0;i<3;i++){
		cal_struct->offset[i] += -1*(v[i+3]/v[i]);
   122ae:	9b04      	ldr	r3, [sp, #16]
			v[i] = v[i]+temp1[i][j]*temp2[j];
   122b0:	1c07      	adds	r7, r0, #0
		cal_struct->offset[i] += -1*(v[i+3]/v[i]);
   122b2:	469a      	mov	sl, r3
   122b4:	1c19      	adds	r1, r3, #0
   122b6:	9b07      	ldr	r3, [sp, #28]
   122b8:	4c1f      	ldr	r4, [pc, #124]	; (12338 <cal_gain_off+0x3f8>)
			v[i] = v[i]+temp1[i][j]*temp2[j];
   122ba:	9013      	str	r0, [sp, #76]	; 0x4c
		cal_struct->offset[i] += -1*(v[i+3]/v[i]);
   122bc:	1c18      	adds	r0, r3, #0
   122be:	4699      	mov	r9, r3
   122c0:	47a0      	blx	r4
   122c2:	9d03      	ldr	r5, [sp, #12]
   122c4:	4c1d      	ldr	r4, [pc, #116]	; (1233c <cal_gain_off+0x3fc>)
   122c6:	1c01      	adds	r1, r0, #0
   122c8:	6868      	ldr	r0, [r5, #4]
   122ca:	47a0      	blx	r4
   122cc:	4b1a      	ldr	r3, [pc, #104]	; (12338 <cal_gain_off+0x3f8>)
   122ce:	6068      	str	r0, [r5, #4]
   122d0:	9902      	ldr	r1, [sp, #8]
   122d2:	1c30      	adds	r0, r6, #0
   122d4:	4798      	blx	r3
   122d6:	1c01      	adds	r1, r0, #0
   122d8:	68a8      	ldr	r0, [r5, #8]
   122da:	47a0      	blx	r4
   122dc:	4b16      	ldr	r3, [pc, #88]	; (12338 <cal_gain_off+0x3f8>)
   122de:	60a8      	str	r0, [r5, #8]
   122e0:	9906      	ldr	r1, [sp, #24]
   122e2:	1c38      	adds	r0, r7, #0
   122e4:	4798      	blx	r3
   122e6:	1c01      	adds	r1, r0, #0
   122e8:	68e8      	ldr	r0, [r5, #12]
   122ea:	47a0      	blx	r4
	}
	
	
	g=1 + pow(v[3],2)/v[0]+pow(v[4],2)/v[1]+pow(v[5],2)/v[2];
   122ec:	4c14      	ldr	r4, [pc, #80]	; (12340 <cal_gain_off+0x400>)
		cal_struct->offset[i] += -1*(v[i+3]/v[i]);
   122ee:	60e8      	str	r0, [r5, #12]
   122f0:	9503      	str	r5, [sp, #12]
	g=1 + pow(v[3],2)/v[0]+pow(v[4],2)/v[1]+pow(v[5],2)/v[2];
   122f2:	4648      	mov	r0, r9
   122f4:	47a0      	blx	r4
   122f6:	46a0      	mov	r8, r4
   122f8:	0004      	movs	r4, r0
   122fa:	1c30      	adds	r0, r6, #0
   122fc:	000d      	movs	r5, r1
   122fe:	47c0      	blx	r8
   12300:	9000      	str	r0, [sp, #0]
   12302:	9101      	str	r1, [sp, #4]
   12304:	1c38      	adds	r0, r7, #0
   12306:	47c0      	blx	r8
   12308:	4e0e      	ldr	r6, [pc, #56]	; (12344 <cal_gain_off+0x404>)
   1230a:	0022      	movs	r2, r4
   1230c:	002b      	movs	r3, r5
   1230e:	9004      	str	r0, [sp, #16]
   12310:	9105      	str	r1, [sp, #20]
   12312:	0020      	movs	r0, r4
   12314:	0029      	movs	r1, r5
   12316:	47b0      	blx	r6
   12318:	0004      	movs	r4, r0
   1231a:	4650      	mov	r0, sl
   1231c:	000d      	movs	r5, r1
   1231e:	47c0      	blx	r8
   12320:	e012      	b.n	12348 <cal_gain_off+0x408>
   12322:	46c0      	nop			; (mov r8, r8)
   12324:	20003340 	.word	0x20003340
   12328:	fffff5bc 	.word	0xfffff5bc
   1232c:	0001d939 	.word	0x0001d939
   12330:	0001d235 	.word	0x0001d235
   12334:	0000a959 	.word	0x0000a959
   12338:	0001d559 	.word	0x0001d559
   1233c:	0001db79 	.word	0x0001db79
   12340:	0001fb6d 	.word	0x0001fb6d
   12344:	0001eea5 	.word	0x0001eea5
   12348:	46b3      	mov	fp, r6
   1234a:	4e32      	ldr	r6, [pc, #200]	; (12414 <cal_gain_off+0x4d4>)
   1234c:	0002      	movs	r2, r0
   1234e:	000b      	movs	r3, r1
   12350:	0020      	movs	r0, r4
   12352:	0029      	movs	r1, r5
   12354:	47b0      	blx	r6
   12356:	46b2      	mov	sl, r6
   12358:	2200      	movs	r2, #0
   1235a:	4e2f      	ldr	r6, [pc, #188]	; (12418 <cal_gain_off+0x4d8>)
   1235c:	4b2f      	ldr	r3, [pc, #188]	; (1241c <cal_gain_off+0x4dc>)
   1235e:	47b0      	blx	r6
   12360:	9c00      	ldr	r4, [sp, #0]
   12362:	9d01      	ldr	r5, [sp, #4]
   12364:	46b1      	mov	r9, r6
   12366:	0022      	movs	r2, r4
   12368:	002b      	movs	r3, r5
   1236a:	0006      	movs	r6, r0
   1236c:	000f      	movs	r7, r1
   1236e:	0020      	movs	r0, r4
   12370:	0029      	movs	r1, r5
   12372:	47d8      	blx	fp
   12374:	0004      	movs	r4, r0
   12376:	9802      	ldr	r0, [sp, #8]
   12378:	000d      	movs	r5, r1
   1237a:	47c0      	blx	r8
   1237c:	0002      	movs	r2, r0
   1237e:	000b      	movs	r3, r1
   12380:	0020      	movs	r0, r4
   12382:	0029      	movs	r1, r5
   12384:	47d0      	blx	sl
   12386:	0002      	movs	r2, r0
   12388:	000b      	movs	r3, r1
   1238a:	0030      	movs	r0, r6
   1238c:	0039      	movs	r1, r7
   1238e:	47c8      	blx	r9
   12390:	0006      	movs	r6, r0
   12392:	000f      	movs	r7, r1
   12394:	9804      	ldr	r0, [sp, #16]
   12396:	9905      	ldr	r1, [sp, #20]
   12398:	0002      	movs	r2, r0
   1239a:	000b      	movs	r3, r1
   1239c:	47d8      	blx	fp
   1239e:	0004      	movs	r4, r0
   123a0:	9806      	ldr	r0, [sp, #24]
   123a2:	000d      	movs	r5, r1
   123a4:	47c0      	blx	r8
   123a6:	0002      	movs	r2, r0
   123a8:	000b      	movs	r3, r1
   123aa:	0020      	movs	r0, r4
   123ac:	0029      	movs	r1, r5
   123ae:	47d0      	blx	sl
   123b0:	000b      	movs	r3, r1
   123b2:	0002      	movs	r2, r0
   123b4:	0039      	movs	r1, r7
   123b6:	0030      	movs	r0, r6
   123b8:	47c8      	blx	r9
   123ba:	4a19      	ldr	r2, [pc, #100]	; (12420 <cal_gain_off+0x4e0>)
   123bc:	2500      	movs	r5, #0
   123be:	4691      	mov	r9, r2
   123c0:	4790      	blx	r2
   123c2:	9b03      	ldr	r3, [sp, #12]
   123c4:	9000      	str	r0, [sp, #0]
   123c6:	3310      	adds	r3, #16
   123c8:	001c      	movs	r4, r3
   123ca:	4b16      	ldr	r3, [pc, #88]	; (12424 <cal_gain_off+0x4e4>)
   123cc:	469a      	mov	sl, r3
	
	
	for (i=0;i<3;i++){
		cal_struct->gain[i] *= sqrt(g/v[i]);
   123ce:	2218      	movs	r2, #24
   123d0:	ab08      	add	r3, sp, #32
   123d2:	189b      	adds	r3, r3, r2
   123d4:	5959      	ldr	r1, [r3, r5]
   123d6:	9800      	ldr	r0, [sp, #0]
   123d8:	4b13      	ldr	r3, [pc, #76]	; (12428 <cal_gain_off+0x4e8>)
   123da:	4798      	blx	r3
   123dc:	47c0      	blx	r8
   123de:	47d0      	blx	sl
   123e0:	0006      	movs	r6, r0
   123e2:	000f      	movs	r7, r1
   123e4:	6820      	ldr	r0, [r4, #0]
   123e6:	47c0      	blx	r8
   123e8:	0032      	movs	r2, r6
   123ea:	003b      	movs	r3, r7
   123ec:	47d8      	blx	fp
   123ee:	47c8      	blx	r9
   123f0:	3504      	adds	r5, #4
   123f2:	c401      	stmia	r4!, {r0}
	for (i=0;i<3;i++){
   123f4:	2d0c      	cmp	r5, #12
   123f6:	d1ea      	bne.n	123ce <cal_gain_off+0x48e>
		
	}
	

}
   123f8:	4b0c      	ldr	r3, [pc, #48]	; (1242c <cal_gain_off+0x4ec>)
   123fa:	449d      	add	sp, r3
   123fc:	bc3c      	pop	{r2, r3, r4, r5}
   123fe:	4690      	mov	r8, r2
   12400:	4699      	mov	r9, r3
   12402:	46a2      	mov	sl, r4
   12404:	46ab      	mov	fp, r5
   12406:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12408:	4b09      	ldr	r3, [pc, #36]	; (12430 <cal_gain_off+0x4f0>)
   1240a:	469a      	mov	sl, r3
   1240c:	4b09      	ldr	r3, [pc, #36]	; (12434 <cal_gain_off+0x4f4>)
   1240e:	469b      	mov	fp, r3
   12410:	e5dc      	b.n	11fcc <cal_gain_off+0x8c>
   12412:	46c0      	nop			; (mov r8, r8)
   12414:	0001e63d 	.word	0x0001e63d
   12418:	0001e01d 	.word	0x0001e01d
   1241c:	3ff00000 	.word	0x3ff00000
   12420:	0001fc11 	.word	0x0001fc11
   12424:	0001a745 	.word	0x0001a745
   12428:	0001d559 	.word	0x0001d559
   1242c:	00000a44 	.word	0x00000a44
   12430:	0001d939 	.word	0x0001d939
   12434:	0001d235 	.word	0x0001d235

00012438 <cal_full_inc_azm_process>:
void cal_full_inc_azm_process(uint8_t nLoops){
   12438:	b5f0      	push	{r4, r5, r6, r7, lr}
   1243a:	4657      	mov	r7, sl
   1243c:	464e      	mov	r6, r9
   1243e:	4645      	mov	r5, r8
   12440:	46de      	mov	lr, fp
		cal_struct->gain[i] = 1;
   12442:	22fe      	movs	r2, #254	; 0xfe
		cal_struct->offset[i] = 0;
   12444:	2300      	movs	r3, #0
	cal_struct->Cal_Initialized_Key = 0xB2;//  Indicator that structure has been initialized
   12446:	21b2      	movs	r1, #178	; 0xb2
void cal_full_inc_azm_process(uint8_t nLoops){
   12448:	b5e0      	push	{r5, r6, r7, lr}
		cal_struct->gain[i] = 1;
   1244a:	4c5e      	ldr	r4, [pc, #376]	; (125c4 <cal_full_inc_azm_process+0x18c>)
   1244c:	4e5e      	ldr	r6, [pc, #376]	; (125c8 <cal_full_inc_azm_process+0x190>)
   1244e:	0592      	lsls	r2, r2, #22
void cal_full_inc_azm_process(uint8_t nLoops){
   12450:	b083      	sub	sp, #12
   12452:	9001      	str	r0, [sp, #4]
		cal_struct->gain[i] = 1;
   12454:	6132      	str	r2, [r6, #16]
		cal_struct->offset[i] = 0;
   12456:	6073      	str	r3, [r6, #4]
			cal_struct->RotM[i][j] = 0;//Clear row
   12458:	63b3      	str	r3, [r6, #56]	; 0x38
   1245a:	63f3      	str	r3, [r6, #60]	; 0x3c
		cal_struct->RotM[i][i] = 1;// Create identity matrix
   1245c:	6372      	str	r2, [r6, #52]	; 0x34
		cal_struct->gain[i] = 1;
   1245e:	6172      	str	r2, [r6, #20]
		cal_struct->offset[i] = 0;
   12460:	60b3      	str	r3, [r6, #8]
			cal_struct->RotM[i][j] = 0;//Clear row
   12462:	6433      	str	r3, [r6, #64]	; 0x40
   12464:	64b3      	str	r3, [r6, #72]	; 0x48
		cal_struct->RotM[i][i] = 1;// Create identity matrix
   12466:	6472      	str	r2, [r6, #68]	; 0x44
		cal_struct->gain[i] = 1;
   12468:	61b2      	str	r2, [r6, #24]
		cal_struct->offset[i] = 0;
   1246a:	60f3      	str	r3, [r6, #12]
			cal_struct->RotM[i][j] = 0;//Clear row
   1246c:	64f3      	str	r3, [r6, #76]	; 0x4c
   1246e:	6533      	str	r3, [r6, #80]	; 0x50
		cal_struct->RotM[i][i] = 1;// Create identity matrix
   12470:	6572      	str	r2, [r6, #84]	; 0x54
	cal_struct->axmYX = 0;
   12472:	61f3      	str	r3, [r6, #28]
	cal_struct->axmZY = 0;
   12474:	6233      	str	r3, [r6, #32]
	cal_struct->axmZX = 0;
   12476:	6273      	str	r3, [r6, #36]	; 0x24
	cal_struct->thetaX = 0;
   12478:	62b3      	str	r3, [r6, #40]	; 0x28
	cal_struct->thetaY = 0;
   1247a:	62f3      	str	r3, [r6, #44]	; 0x2c
	cal_struct->thetaZ = 0;
   1247c:	6333      	str	r3, [r6, #48]	; 0x30
	cal_struct->dist_offset = 0;
   1247e:	65b3      	str	r3, [r6, #88]	; 0x58
	cal_struct->Cal_Initialized_Key = 0xB2;//  Indicator that structure has been initialized
   12480:	7031      	strb	r1, [r6, #0]
		cal_struct->gain[i] = 1;
   12482:	6122      	str	r2, [r4, #16]
		cal_struct->offset[i] = 0;
   12484:	6063      	str	r3, [r4, #4]
			cal_struct->RotM[i][j] = 0;//Clear row
   12486:	63a3      	str	r3, [r4, #56]	; 0x38
   12488:	63e3      	str	r3, [r4, #60]	; 0x3c
		cal_struct->RotM[i][i] = 1;// Create identity matrix
   1248a:	6362      	str	r2, [r4, #52]	; 0x34
		cal_struct->gain[i] = 1;
   1248c:	4f4f      	ldr	r7, [pc, #316]	; (125cc <cal_full_inc_azm_process+0x194>)
   1248e:	6162      	str	r2, [r4, #20]
		cal_struct->offset[i] = 0;
   12490:	60a3      	str	r3, [r4, #8]
			cal_struct->RotM[i][j] = 0;//Clear row
   12492:	6423      	str	r3, [r4, #64]	; 0x40
   12494:	64a3      	str	r3, [r4, #72]	; 0x48
		cal_struct->RotM[i][i] = 1;// Create identity matrix
   12496:	6462      	str	r2, [r4, #68]	; 0x44
		cal_struct->gain[i] = 1;
   12498:	61a2      	str	r2, [r4, #24]
		cal_struct->offset[i] = 0;
   1249a:	60e3      	str	r3, [r4, #12]
			cal_struct->RotM[i][j] = 0;//Clear row
   1249c:	64e3      	str	r3, [r4, #76]	; 0x4c
   1249e:	6523      	str	r3, [r4, #80]	; 0x50
		cal_struct->RotM[i][i] = 1;// Create identity matrix
   124a0:	6562      	str	r2, [r4, #84]	; 0x54
	cal_struct->axmYX = 0;
   124a2:	61e3      	str	r3, [r4, #28]
	cal_struct->axmZY = 0;
   124a4:	6223      	str	r3, [r4, #32]
	cal_struct->axmZX = 0;
   124a6:	6263      	str	r3, [r4, #36]	; 0x24
	cal_struct->thetaX = 0;
   124a8:	62a3      	str	r3, [r4, #40]	; 0x28
	cal_struct->thetaY = 0;
   124aa:	62e3      	str	r3, [r4, #44]	; 0x2c
	cal_struct->thetaZ = 0;
   124ac:	6323      	str	r3, [r4, #48]	; 0x30
	cal_struct->dist_offset = 0;
   124ae:	65a3      	str	r3, [r4, #88]	; 0x58
	cal_struct->Cal_Initialized_Key = 0xB2;//  Indicator that structure has been initialized
   124b0:	7021      	strb	r1, [r4, #0]
		cal_struct->gain[i] = 1;
   124b2:	613a      	str	r2, [r7, #16]
		cal_struct->offset[i] = 0;
   124b4:	607b      	str	r3, [r7, #4]
			cal_struct->RotM[i][j] = 0;//Clear row
   124b6:	63bb      	str	r3, [r7, #56]	; 0x38
   124b8:	63fb      	str	r3, [r7, #60]	; 0x3c
		cal_struct->RotM[i][i] = 1;// Create identity matrix
   124ba:	637a      	str	r2, [r7, #52]	; 0x34
		cal_struct->gain[i] = 1;
   124bc:	617a      	str	r2, [r7, #20]
		cal_struct->offset[i] = 0;
   124be:	60bb      	str	r3, [r7, #8]
			cal_struct->RotM[i][j] = 0;//Clear row
   124c0:	643b      	str	r3, [r7, #64]	; 0x40
   124c2:	64bb      	str	r3, [r7, #72]	; 0x48
		cal_struct->RotM[i][i] = 1;// Create identity matrix
   124c4:	647a      	str	r2, [r7, #68]	; 0x44
		cal_struct->gain[i] = 1;
   124c6:	61ba      	str	r2, [r7, #24]
		cal_struct->offset[i] = 0;
   124c8:	60fb      	str	r3, [r7, #12]
			cal_struct->RotM[i][j] = 0;//Clear row
   124ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   124cc:	653b      	str	r3, [r7, #80]	; 0x50
		cal_struct->gain[i] = 1;
   124ce:	4d40      	ldr	r5, [pc, #256]	; (125d0 <cal_full_inc_azm_process+0x198>)
		cal_struct->RotM[i][i] = 1;// Create identity matrix
   124d0:	657a      	str	r2, [r7, #84]	; 0x54
	cal_struct->axmYX = 0;
   124d2:	61fb      	str	r3, [r7, #28]
	cal_struct->axmZY = 0;
   124d4:	623b      	str	r3, [r7, #32]
	cal_struct->axmZX = 0;
   124d6:	627b      	str	r3, [r7, #36]	; 0x24
	cal_struct->thetaX = 0;
   124d8:	62bb      	str	r3, [r7, #40]	; 0x28
	cal_struct->thetaY = 0;
   124da:	62fb      	str	r3, [r7, #44]	; 0x2c
	cal_struct->thetaZ = 0;
   124dc:	633b      	str	r3, [r7, #48]	; 0x30
	cal_struct->dist_offset = 0;
   124de:	65bb      	str	r3, [r7, #88]	; 0x58
	cal_struct->Cal_Initialized_Key = 0xB2;//  Indicator that structure has been initialized
   124e0:	7039      	strb	r1, [r7, #0]
		cal_struct->gain[i] = 1;
   124e2:	612a      	str	r2, [r5, #16]
		cal_struct->offset[i] = 0;
   124e4:	606b      	str	r3, [r5, #4]
			cal_struct->RotM[i][j] = 0;//Clear row
   124e6:	63ab      	str	r3, [r5, #56]	; 0x38
   124e8:	63eb      	str	r3, [r5, #60]	; 0x3c
		cal_struct->RotM[i][i] = 1;// Create identity matrix
   124ea:	636a      	str	r2, [r5, #52]	; 0x34
		cal_struct->gain[i] = 1;
   124ec:	616a      	str	r2, [r5, #20]
		cal_struct->offset[i] = 0;
   124ee:	60ab      	str	r3, [r5, #8]
			cal_struct->RotM[i][j] = 0;//Clear row
   124f0:	642b      	str	r3, [r5, #64]	; 0x40
   124f2:	64ab      	str	r3, [r5, #72]	; 0x48
		cal_struct->RotM[i][i] = 1;// Create identity matrix
   124f4:	646a      	str	r2, [r5, #68]	; 0x44
		cal_struct->gain[i] = 1;
   124f6:	61aa      	str	r2, [r5, #24]
		cal_struct->offset[i] = 0;
   124f8:	60eb      	str	r3, [r5, #12]
			cal_struct->RotM[i][j] = 0;//Clear row
   124fa:	64eb      	str	r3, [r5, #76]	; 0x4c
   124fc:	652b      	str	r3, [r5, #80]	; 0x50
		cal_struct->RotM[i][i] = 1;// Create identity matrix
   124fe:	656a      	str	r2, [r5, #84]	; 0x54
	cal_struct->axmYX = 0;
   12500:	61eb      	str	r3, [r5, #28]
	cal_struct->axmZY = 0;
   12502:	622b      	str	r3, [r5, #32]
	cal_struct->axmZX = 0;
   12504:	626b      	str	r3, [r5, #36]	; 0x24
	cal_struct->thetaX = 0;
   12506:	62ab      	str	r3, [r5, #40]	; 0x28
	cal_struct->thetaY = 0;
   12508:	62eb      	str	r3, [r5, #44]	; 0x2c
	cal_struct->thetaZ = 0;
   1250a:	632b      	str	r3, [r5, #48]	; 0x30
	cal_struct->dist_offset = 0;
   1250c:	65ab      	str	r3, [r5, #88]	; 0x58
	cal_struct->Cal_Initialized_Key = 0xB2;//  Indicator that structure has been initialized
   1250e:	7029      	strb	r1, [r5, #0]
	for (loop=0;loop<nLoops;loop++){
   12510:	2800      	cmp	r0, #0
   12512:	d053      	beq.n	125bc <cal_full_inc_azm_process+0x184>
   12514:	2300      	movs	r3, #0
   12516:	469b      	mov	fp, r3
   12518:	4b2e      	ldr	r3, [pc, #184]	; (125d4 <cal_full_inc_azm_process+0x19c>)
   1251a:	4698      	mov	r8, r3
   1251c:	4b2e      	ldr	r3, [pc, #184]	; (125d8 <cal_full_inc_azm_process+0x1a0>)
   1251e:	469a      	mov	sl, r3
   12520:	4b2e      	ldr	r3, [pc, #184]	; (125dc <cal_full_inc_azm_process+0x1a4>)
   12522:	4699      	mov	r9, r3
		cal_apply_cal_all();
   12524:	47c0      	blx	r8
		cal_gain_off(a1Cal, &a1_calst);
   12526:	0031      	movs	r1, r6
   12528:	482d      	ldr	r0, [pc, #180]	; (125e0 <cal_full_inc_azm_process+0x1a8>)
   1252a:	47d0      	blx	sl
		cal_gain_off(a2Cal, &a2_calst);
   1252c:	0021      	movs	r1, r4
   1252e:	482d      	ldr	r0, [pc, #180]	; (125e4 <cal_full_inc_azm_process+0x1ac>)
   12530:	47d0      	blx	sl
		cal_gain_off(m1Cal, &m1_calst);
   12532:	0039      	movs	r1, r7
   12534:	482c      	ldr	r0, [pc, #176]	; (125e8 <cal_full_inc_azm_process+0x1b0>)
   12536:	47d0      	blx	sl
		cal_gain_off(m2Cal, &m2_calst);
   12538:	0029      	movs	r1, r5
   1253a:	482c      	ldr	r0, [pc, #176]	; (125ec <cal_full_inc_azm_process+0x1b4>)
   1253c:	47d0      	blx	sl
		cal_apply_cal_all();
   1253e:	47c0      	blx	r8
		cal_axis_misalignments(a1Cal, &a1_calst); // Sensor axis misalignments, Accelerometer 1
   12540:	0031      	movs	r1, r6
   12542:	4827      	ldr	r0, [pc, #156]	; (125e0 <cal_full_inc_azm_process+0x1a8>)
   12544:	47c8      	blx	r9
		cal_axis_misalignments(a2Cal, &a2_calst);// Sensor axis misalignments, Accelerometer 2
   12546:	0021      	movs	r1, r4
   12548:	4826      	ldr	r0, [pc, #152]	; (125e4 <cal_full_inc_azm_process+0x1ac>)
   1254a:	47c8      	blx	r9
		cal_axis_misalignments(m1Cal, &m1_calst);// Sensor axis misalignments, Compass 1
   1254c:	0039      	movs	r1, r7
   1254e:	4826      	ldr	r0, [pc, #152]	; (125e8 <cal_full_inc_azm_process+0x1b0>)
   12550:	47c8      	blx	r9
		cal_axis_misalignments(m2Cal, &m2_calst);// Sensor axis misalignments, Compass 2	
   12552:	0029      	movs	r1, r5
   12554:	4825      	ldr	r0, [pc, #148]	; (125ec <cal_full_inc_azm_process+0x1b4>)
   12556:	47c8      	blx	r9
	for (loop=0;loop<nLoops;loop++){
   12558:	2301      	movs	r3, #1
   1255a:	469c      	mov	ip, r3
   1255c:	9b01      	ldr	r3, [sp, #4]
   1255e:	44e3      	add	fp, ip
   12560:	459b      	cmp	fp, r3
   12562:	d3df      	bcc.n	12524 <cal_full_inc_azm_process+0xec>
   12564:	2300      	movs	r3, #0
   12566:	469a      	mov	sl, r3
   12568:	4b21      	ldr	r3, [pc, #132]	; (125f0 <cal_full_inc_azm_process+0x1b8>)
   1256a:	4699      	mov	r9, r3
   1256c:	4b21      	ldr	r3, [pc, #132]	; (125f4 <cal_full_inc_azm_process+0x1bc>)
   1256e:	469b      	mov	fp, r3
		cal_apply_cal_all();
   12570:	47c0      	blx	r8
		cal_angleYZ(a1Cal, &a1_calst);//  Sensor Package to laser Y&Z axis alignment, Accelerometer 1
   12572:	0031      	movs	r1, r6
   12574:	481a      	ldr	r0, [pc, #104]	; (125e0 <cal_full_inc_azm_process+0x1a8>)
   12576:	47c8      	blx	r9
		cal_angleYZ(a2Cal, &a2_calst);//  Sensor Package to laser Y&Z axis alignment, Accelerometer 2
   12578:	0021      	movs	r1, r4
   1257a:	481a      	ldr	r0, [pc, #104]	; (125e4 <cal_full_inc_azm_process+0x1ac>)
   1257c:	47c8      	blx	r9
		cal_angleYZ(m1Cal, &m1_calst);//  Sensor Package to laser Y&Z axis alignment, Compass 1
   1257e:	0039      	movs	r1, r7
   12580:	4819      	ldr	r0, [pc, #100]	; (125e8 <cal_full_inc_azm_process+0x1b0>)
   12582:	47c8      	blx	r9
		cal_angleYZ(m2Cal, &m2_calst);//  Sensor Package to laser Y&Z axis alignment, Compass 2
   12584:	0029      	movs	r1, r5
   12586:	4819      	ldr	r0, [pc, #100]	; (125ec <cal_full_inc_azm_process+0x1b4>)
   12588:	47c8      	blx	r9
		cal_apply_cal_all();
   1258a:	47c0      	blx	r8
		cal_angleX(a1Cal, a2Cal, &a2_calst);//  Sensor package to laser X-axis alignment, Accelerometer 2
   1258c:	0022      	movs	r2, r4
   1258e:	4915      	ldr	r1, [pc, #84]	; (125e4 <cal_full_inc_azm_process+0x1ac>)
   12590:	4813      	ldr	r0, [pc, #76]	; (125e0 <cal_full_inc_azm_process+0x1a8>)
   12592:	47d8      	blx	fp
		cal_angleX(m1Cal, m2Cal, &m2_calst);//  Sensor package to laser X-axis alignment, Compass 2
   12594:	002a      	movs	r2, r5
   12596:	4915      	ldr	r1, [pc, #84]	; (125ec <cal_full_inc_azm_process+0x1b4>)
   12598:	4813      	ldr	r0, [pc, #76]	; (125e8 <cal_full_inc_azm_process+0x1b0>)
   1259a:	47d8      	blx	fp
	for (loop=0;loop<nLoops;loop++){
   1259c:	2301      	movs	r3, #1
   1259e:	469c      	mov	ip, r3
   125a0:	9b01      	ldr	r3, [sp, #4]
   125a2:	44e2      	add	sl, ip
   125a4:	459a      	cmp	sl, r3
   125a6:	d3e3      	bcc.n	12570 <cal_full_inc_azm_process+0x138>
	cal_apply_cal_all();
   125a8:	47c0      	blx	r8
	cal_inc_azm_eval();
   125aa:	4b13      	ldr	r3, [pc, #76]	; (125f8 <cal_full_inc_azm_process+0x1c0>)
   125ac:	4798      	blx	r3
}
   125ae:	b003      	add	sp, #12
   125b0:	bc3c      	pop	{r2, r3, r4, r5}
   125b2:	4690      	mov	r8, r2
   125b4:	4699      	mov	r9, r3
   125b6:	46a2      	mov	sl, r4
   125b8:	46ab      	mov	fp, r5
   125ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   125bc:	4b05      	ldr	r3, [pc, #20]	; (125d4 <cal_full_inc_azm_process+0x19c>)
   125be:	4698      	mov	r8, r3
   125c0:	e7f2      	b.n	125a8 <cal_full_inc_azm_process+0x170>
   125c2:	46c0      	nop			; (mov r8, r8)
   125c4:	2000550c 	.word	0x2000550c
   125c8:	200055d0 	.word	0x200055d0
   125cc:	200054b0 	.word	0x200054b0
   125d0:	20003fe0 	.word	0x20003fe0
   125d4:	000109d9 	.word	0x000109d9
   125d8:	00011f41 	.word	0x00011f41
   125dc:	0001160d 	.word	0x0001160d
   125e0:	20004698 	.word	0x20004698
   125e4:	2000392c 	.word	0x2000392c
   125e8:	20004bd8 	.word	0x20004bd8
   125ec:	20002be0 	.word	0x20002be0
   125f0:	00011c69 	.word	0x00011c69
   125f4:	00011b1d 	.word	0x00011b1d
   125f8:	0001101d 	.word	0x0001101d

000125fc <cal_azm_quick_process>:
void cal_azm_quick_process(void){
   125fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   125fe:	46de      	mov	lr, fp
   12600:	4657      	mov	r7, sl
   12602:	4645      	mov	r5, r8
   12604:	464e      	mov	r6, r9
	for (k=0;k<2;k++){
   12606:	2300      	movs	r3, #0
void cal_azm_quick_process(void){
   12608:	b5e0      	push	{r5, r6, r7, lr}
   1260a:	b0a5      	sub	sp, #148	; 0x94
	for (k=0;k<2;k++){
   1260c:	930b      	str	r3, [sp, #44]	; 0x2c
				calStructPtr = &m1_calst;
   1260e:	4b99      	ldr	r3, [pc, #612]	; (12874 <cal_azm_quick_process+0x278>)
   12610:	ad0d      	add	r5, sp, #52	; 0x34
   12612:	469b      	mov	fp, r3
				calPtr = m1Cal;
   12614:	4b98      	ldr	r3, [pc, #608]	; (12878 <cal_azm_quick_process+0x27c>)
   12616:	465c      	mov	r4, fp
   12618:	930a      	str	r3, [sp, #40]	; 0x28
				rawPtr = m1Raw;
   1261a:	4b98      	ldr	r3, [pc, #608]	; (1287c <cal_azm_quick_process+0x280>)
   1261c:	9303      	str	r3, [sp, #12]
   1261e:	4b98      	ldr	r3, [pc, #608]	; (12880 <cal_azm_quick_process+0x284>)
   12620:	469a      	mov	sl, r3
		cal_struct->offset[i] = 0;
   12622:	2300      	movs	r3, #0
		cal_struct->gain[i] = 1;
   12624:	22fe      	movs	r2, #254	; 0xfe
		cal_struct->offset[i] = 0;
   12626:	606b      	str	r3, [r5, #4]
			cal_struct->RotM[i][j] = 0;//Clear row
   12628:	63ab      	str	r3, [r5, #56]	; 0x38
   1262a:	63eb      	str	r3, [r5, #60]	; 0x3c
		cal_struct->offset[i] = 0;
   1262c:	60ab      	str	r3, [r5, #8]
			cal_struct->RotM[i][j] = 0;//Clear row
   1262e:	642b      	str	r3, [r5, #64]	; 0x40
   12630:	64ab      	str	r3, [r5, #72]	; 0x48
		cal_struct->offset[i] = 0;
   12632:	60eb      	str	r3, [r5, #12]
			cal_struct->RotM[i][j] = 0;//Clear row
   12634:	64eb      	str	r3, [r5, #76]	; 0x4c
   12636:	652b      	str	r3, [r5, #80]	; 0x50
	cal_struct->axmYX = 0;
   12638:	61eb      	str	r3, [r5, #28]
	cal_struct->axmZY = 0;
   1263a:	622b      	str	r3, [r5, #32]
	cal_struct->axmZX = 0;
   1263c:	626b      	str	r3, [r5, #36]	; 0x24
	cal_struct->thetaX = 0;
   1263e:	62ab      	str	r3, [r5, #40]	; 0x28
	cal_struct->thetaY = 0;
   12640:	62eb      	str	r3, [r5, #44]	; 0x2c
	cal_struct->thetaZ = 0;
   12642:	632b      	str	r3, [r5, #48]	; 0x30
	cal_struct->dist_offset = 0;
   12644:	65ab      	str	r3, [r5, #88]	; 0x58
	cal_struct->Cal_Initialized_Key = 0xB2;//  Indicator that structure has been initialized
   12646:	23b2      	movs	r3, #178	; 0xb2
		cal_struct->gain[i] = 1;
   12648:	0592      	lsls	r2, r2, #22
	cal_struct->Cal_Initialized_Key = 0xB2;//  Indicator that structure has been initialized
   1264a:	702b      	strb	r3, [r5, #0]
		cal_gain_off(rawPtr, &temp_cal);
   1264c:	0029      	movs	r1, r5
   1264e:	4b8d      	ldr	r3, [pc, #564]	; (12884 <cal_azm_quick_process+0x288>)
   12650:	9803      	ldr	r0, [sp, #12]
		cal_struct->gain[i] = 1;
   12652:	612a      	str	r2, [r5, #16]
		cal_struct->RotM[i][i] = 1;// Create identity matrix
   12654:	636a      	str	r2, [r5, #52]	; 0x34
		cal_struct->gain[i] = 1;
   12656:	616a      	str	r2, [r5, #20]
		cal_struct->RotM[i][i] = 1;// Create identity matrix
   12658:	646a      	str	r2, [r5, #68]	; 0x44
		cal_struct->gain[i] = 1;
   1265a:	61aa      	str	r2, [r5, #24]
		cal_struct->RotM[i][i] = 1;// Create identity matrix
   1265c:	656a      	str	r2, [r5, #84]	; 0x54
		cal_gain_off(rawPtr, &temp_cal);
   1265e:	4798      	blx	r3
		for (i=0;i<nPoints;i++){
   12660:	4653      	mov	r3, sl
   12662:	681b      	ldr	r3, [r3, #0]
   12664:	2b00      	cmp	r3, #0
   12666:	d046      	beq.n	126f6 <cal_azm_quick_process+0xfa>
   12668:	2300      	movs	r3, #0
   1266a:	4699      	mov	r9, r3
   1266c:	4a86      	ldr	r2, [pc, #536]	; (12888 <cal_azm_quick_process+0x28c>)
   1266e:	9f03      	ldr	r7, [sp, #12]
   12670:	4693      	mov	fp, r2
   12672:	4a86      	ldr	r2, [pc, #536]	; (1288c <cal_azm_quick_process+0x290>)
   12674:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   12676:	9202      	str	r2, [sp, #8]
   12678:	9404      	str	r4, [sp, #16]
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   1267a:	6869      	ldr	r1, [r5, #4]
   1267c:	6838      	ldr	r0, [r7, #0]
   1267e:	4b84      	ldr	r3, [pc, #528]	; (12890 <cal_azm_quick_process+0x294>)
   12680:	4798      	blx	r3
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   12682:	6929      	ldr	r1, [r5, #16]
   12684:	4b83      	ldr	r3, [pc, #524]	; (12894 <cal_azm_quick_process+0x298>)
   12686:	4798      	blx	r3
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   12688:	68e9      	ldr	r1, [r5, #12]
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   1268a:	1c04      	adds	r4, r0, #0
   1268c:	6030      	str	r0, [r6, #0]
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   1268e:	4b80      	ldr	r3, [pc, #512]	; (12890 <cal_azm_quick_process+0x294>)
   12690:	68b8      	ldr	r0, [r7, #8]
   12692:	4798      	blx	r3
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   12694:	69a9      	ldr	r1, [r5, #24]
   12696:	4b7f      	ldr	r3, [pc, #508]	; (12894 <cal_azm_quick_process+0x298>)
   12698:	4798      	blx	r3
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   1269a:	68a9      	ldr	r1, [r5, #8]
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   1269c:	4680      	mov	r8, r0
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   1269e:	4b7c      	ldr	r3, [pc, #496]	; (12890 <cal_azm_quick_process+0x294>)
   126a0:	6878      	ldr	r0, [r7, #4]
   126a2:	4798      	blx	r3
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   126a4:	6969      	ldr	r1, [r5, #20]
   126a6:	4b7b      	ldr	r3, [pc, #492]	; (12894 <cal_azm_quick_process+0x298>)
   126a8:	4798      	blx	r3
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   126aa:	4b7b      	ldr	r3, [pc, #492]	; (12898 <cal_azm_quick_process+0x29c>)
   126ac:	69e9      	ldr	r1, [r5, #28]
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   126ae:	9001      	str	r0, [sp, #4]
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   126b0:	1c20      	adds	r0, r4, #0
   126b2:	4798      	blx	r3
   126b4:	1c01      	adds	r1, r0, #0
   126b6:	9801      	ldr	r0, [sp, #4]
   126b8:	47d8      	blx	fp
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   126ba:	4b77      	ldr	r3, [pc, #476]	; (12898 <cal_azm_quick_process+0x29c>)
   126bc:	6a29      	ldr	r1, [r5, #32]
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   126be:	6070      	str	r0, [r6, #4]
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   126c0:	4798      	blx	r3
   126c2:	4641      	mov	r1, r8
   126c4:	47d8      	blx	fp
   126c6:	4b74      	ldr	r3, [pc, #464]	; (12898 <cal_azm_quick_process+0x29c>)
   126c8:	4680      	mov	r8, r0
   126ca:	6a69      	ldr	r1, [r5, #36]	; 0x24
   126cc:	1c20      	adds	r0, r4, #0
   126ce:	4798      	blx	r3
   126d0:	1c01      	adds	r1, r0, #0
   126d2:	4640      	mov	r0, r8
   126d4:	47d8      	blx	fp
	mat_mult_33_31(cal_struct->RotM, calXYZ, calXYZ);
   126d6:	0032      	movs	r2, r6
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   126d8:	60b0      	str	r0, [r6, #8]
	mat_mult_33_31(cal_struct->RotM, calXYZ, calXYZ);
   126da:	0031      	movs	r1, r6
   126dc:	9b02      	ldr	r3, [sp, #8]
   126de:	a81a      	add	r0, sp, #104	; 0x68
   126e0:	4798      	blx	r3
		for (i=0;i<nPoints;i++){
   126e2:	2301      	movs	r3, #1
   126e4:	469c      	mov	ip, r3
   126e6:	4653      	mov	r3, sl
   126e8:	681b      	ldr	r3, [r3, #0]
   126ea:	44e1      	add	r9, ip
   126ec:	370c      	adds	r7, #12
   126ee:	360c      	adds	r6, #12
   126f0:	454b      	cmp	r3, r9
   126f2:	d8c2      	bhi.n	1267a <cal_azm_quick_process+0x7e>
   126f4:	9c04      	ldr	r4, [sp, #16]
		cal_axis_misalignments(calPtr, &temp_cal);
   126f6:	0029      	movs	r1, r5
   126f8:	4b68      	ldr	r3, [pc, #416]	; (1289c <cal_azm_quick_process+0x2a0>)
   126fa:	980a      	ldr	r0, [sp, #40]	; 0x28
   126fc:	4798      	blx	r3
		calStructPtr->axmYX = temp_cal.axmYX;
   126fe:	69eb      	ldr	r3, [r5, #28]
			calStructPtr->offset[i] = temp_cal.offset[i];
   12700:	6869      	ldr	r1, [r5, #4]
		calStructPtr->axmYX = temp_cal.axmYX;
   12702:	9306      	str	r3, [sp, #24]
   12704:	61e3      	str	r3, [r4, #28]
		calStructPtr->axmZX = temp_cal.axmZX;
   12706:	6a6b      	ldr	r3, [r5, #36]	; 0x24
			calStructPtr->offset[i] = temp_cal.offset[i];
   12708:	6061      	str	r1, [r4, #4]
		calStructPtr->axmZX = temp_cal.axmZX;
   1270a:	9304      	str	r3, [sp, #16]
   1270c:	6263      	str	r3, [r4, #36]	; 0x24
		calStructPtr->axmZY = temp_cal.axmZY;
   1270e:	6a2b      	ldr	r3, [r5, #32]
   12710:	9307      	str	r3, [sp, #28]
   12712:	6223      	str	r3, [r4, #32]
			calStructPtr->gain[i] = temp_cal.gain[i];
   12714:	692b      	ldr	r3, [r5, #16]
   12716:	4698      	mov	r8, r3
   12718:	6123      	str	r3, [r4, #16]
   1271a:	696b      	ldr	r3, [r5, #20]
   1271c:	9305      	str	r3, [sp, #20]
   1271e:	6163      	str	r3, [r4, #20]
			calStructPtr->offset[i] = temp_cal.offset[i];
   12720:	68ab      	ldr	r3, [r5, #8]
   12722:	9308      	str	r3, [sp, #32]
   12724:	60a3      	str	r3, [r4, #8]
			calStructPtr->gain[i] = temp_cal.gain[i];
   12726:	69ab      	ldr	r3, [r5, #24]
   12728:	4699      	mov	r9, r3
   1272a:	61a3      	str	r3, [r4, #24]
			calStructPtr->offset[i] = temp_cal.offset[i];
   1272c:	68eb      	ldr	r3, [r5, #12]
   1272e:	1c1a      	adds	r2, r3, #0
   12730:	60e3      	str	r3, [r4, #12]
		for (i=0;i<nPoints;i++){
   12732:	4653      	mov	r3, sl
   12734:	681b      	ldr	r3, [r3, #0]
   12736:	2b00      	cmp	r3, #0
   12738:	d061      	beq.n	127fe <cal_azm_quick_process+0x202>
   1273a:	2334      	movs	r3, #52	; 0x34
   1273c:	469c      	mov	ip, r3
   1273e:	44a4      	add	ip, r4
   12740:	4663      	mov	r3, ip
   12742:	9309      	str	r3, [sp, #36]	; 0x24
   12744:	2300      	movs	r3, #0
   12746:	9f03      	ldr	r7, [sp, #12]
   12748:	9303      	str	r3, [sp, #12]
   1274a:	4b4f      	ldr	r3, [pc, #316]	; (12888 <cal_azm_quick_process+0x28c>)
   1274c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1274e:	469b      	mov	fp, r3
   12750:	4b4e      	ldr	r3, [pc, #312]	; (1288c <cal_azm_quick_process+0x290>)
   12752:	9302      	str	r3, [sp, #8]
   12754:	465b      	mov	r3, fp
   12756:	4693      	mov	fp, r2
   12758:	9301      	str	r3, [sp, #4]
   1275a:	e010      	b.n	1277e <cal_azm_quick_process+0x182>
   1275c:	69e3      	ldr	r3, [r4, #28]
   1275e:	6861      	ldr	r1, [r4, #4]
   12760:	9306      	str	r3, [sp, #24]
   12762:	6a23      	ldr	r3, [r4, #32]
   12764:	9307      	str	r3, [sp, #28]
   12766:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12768:	9304      	str	r3, [sp, #16]
   1276a:	6923      	ldr	r3, [r4, #16]
   1276c:	4698      	mov	r8, r3
   1276e:	68a3      	ldr	r3, [r4, #8]
   12770:	9308      	str	r3, [sp, #32]
   12772:	6963      	ldr	r3, [r4, #20]
   12774:	9305      	str	r3, [sp, #20]
   12776:	68e3      	ldr	r3, [r4, #12]
   12778:	469b      	mov	fp, r3
   1277a:	69a3      	ldr	r3, [r4, #24]
   1277c:	4699      	mov	r9, r3
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   1277e:	6838      	ldr	r0, [r7, #0]
   12780:	4b43      	ldr	r3, [pc, #268]	; (12890 <cal_azm_quick_process+0x294>)
   12782:	4798      	blx	r3
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   12784:	4641      	mov	r1, r8
   12786:	4b43      	ldr	r3, [pc, #268]	; (12894 <cal_azm_quick_process+0x298>)
   12788:	4798      	blx	r3
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   1278a:	4659      	mov	r1, fp
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   1278c:	4680      	mov	r8, r0
   1278e:	6030      	str	r0, [r6, #0]
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   12790:	4b3f      	ldr	r3, [pc, #252]	; (12890 <cal_azm_quick_process+0x294>)
   12792:	68b8      	ldr	r0, [r7, #8]
   12794:	4798      	blx	r3
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   12796:	4649      	mov	r1, r9
   12798:	4b3e      	ldr	r3, [pc, #248]	; (12894 <cal_azm_quick_process+0x298>)
   1279a:	4798      	blx	r3
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   1279c:	9908      	ldr	r1, [sp, #32]
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   1279e:	4681      	mov	r9, r0
		calXYZ[i] = uncalXYZ[i]-cal_struct->offset[i];
   127a0:	4b3b      	ldr	r3, [pc, #236]	; (12890 <cal_azm_quick_process+0x294>)
   127a2:	6878      	ldr	r0, [r7, #4]
   127a4:	4798      	blx	r3
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   127a6:	9905      	ldr	r1, [sp, #20]
   127a8:	4b3a      	ldr	r3, [pc, #232]	; (12894 <cal_azm_quick_process+0x298>)
   127aa:	4798      	blx	r3
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   127ac:	4b3a      	ldr	r3, [pc, #232]	; (12898 <cal_azm_quick_process+0x29c>)
		calXYZ[i] = calXYZ[i]/cal_struct->gain[i];
   127ae:	4683      	mov	fp, r0
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   127b0:	4641      	mov	r1, r8
   127b2:	9806      	ldr	r0, [sp, #24]
   127b4:	4798      	blx	r3
   127b6:	9b01      	ldr	r3, [sp, #4]
   127b8:	1c01      	adds	r1, r0, #0
   127ba:	4658      	mov	r0, fp
   127bc:	4798      	blx	r3
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   127be:	4b36      	ldr	r3, [pc, #216]	; (12898 <cal_azm_quick_process+0x29c>)
	calXYZ[1] = calXYZ[1]+calXYZ[0]*cal_struct->axmYX;
   127c0:	1c01      	adds	r1, r0, #0
   127c2:	6070      	str	r0, [r6, #4]
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   127c4:	9807      	ldr	r0, [sp, #28]
   127c6:	4798      	blx	r3
   127c8:	9a01      	ldr	r2, [sp, #4]
   127ca:	4649      	mov	r1, r9
   127cc:	4790      	blx	r2
   127ce:	4b32      	ldr	r3, [pc, #200]	; (12898 <cal_azm_quick_process+0x29c>)
   127d0:	4681      	mov	r9, r0
   127d2:	4641      	mov	r1, r8
   127d4:	9804      	ldr	r0, [sp, #16]
   127d6:	4798      	blx	r3
   127d8:	9a01      	ldr	r2, [sp, #4]
   127da:	1c01      	adds	r1, r0, #0
   127dc:	4648      	mov	r0, r9
   127de:	4790      	blx	r2
	mat_mult_33_31(cal_struct->RotM, calXYZ, calXYZ);
   127e0:	0032      	movs	r2, r6
	calXYZ[2] = calXYZ[2]+calXYZ[1]*cal_struct->axmZY+ calXYZ[0]*cal_struct->axmZX;
   127e2:	60b0      	str	r0, [r6, #8]
	mat_mult_33_31(cal_struct->RotM, calXYZ, calXYZ);
   127e4:	0031      	movs	r1, r6
   127e6:	9b02      	ldr	r3, [sp, #8]
   127e8:	9809      	ldr	r0, [sp, #36]	; 0x24
   127ea:	4798      	blx	r3
		for (i=0;i<nPoints;i++){
   127ec:	4652      	mov	r2, sl
   127ee:	9b03      	ldr	r3, [sp, #12]
   127f0:	6812      	ldr	r2, [r2, #0]
   127f2:	3301      	adds	r3, #1
   127f4:	9303      	str	r3, [sp, #12]
   127f6:	370c      	adds	r7, #12
   127f8:	360c      	adds	r6, #12
   127fa:	429a      	cmp	r2, r3
   127fc:	d8ae      	bhi.n	1275c <cal_azm_quick_process+0x160>
   127fe:	4a28      	ldr	r2, [pc, #160]	; (128a0 <cal_azm_quick_process+0x2a4>)
	for (k=0;k<2;k++){
   12800:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12802:	9203      	str	r2, [sp, #12]
   12804:	4a27      	ldr	r2, [pc, #156]	; (128a4 <cal_azm_quick_process+0x2a8>)
   12806:	3301      	adds	r3, #1
   12808:	930b      	str	r3, [sp, #44]	; 0x2c
   1280a:	920a      	str	r2, [sp, #40]	; 0x28
   1280c:	4c26      	ldr	r4, [pc, #152]	; (128a8 <cal_azm_quick_process+0x2ac>)
   1280e:	2b02      	cmp	r3, #2
   12810:	d000      	beq.n	12814 <cal_azm_quick_process+0x218>
   12812:	e706      	b.n	12622 <cal_azm_quick_process+0x26>
	get_time();//  Get current time
   12814:	4b25      	ldr	r3, [pc, #148]	; (128ac <cal_azm_quick_process+0x2b0>)
   12816:	4798      	blx	r3
	cal_report.software_version = SOFTWARE_VERSION;
   12818:	2381      	movs	r3, #129	; 0x81
   1281a:	4d25      	ldr	r5, [pc, #148]	; (128b0 <cal_azm_quick_process+0x2b4>)
   1281c:	05db      	lsls	r3, r3, #23
   1281e:	602b      	str	r3, [r5, #0]
	memcpy(&cal_report.time_quick_azm,&current_time,sizeof(current_time));
   12820:	002b      	movs	r3, r5
   12822:	4a24      	ldr	r2, [pc, #144]	; (128b4 <cal_azm_quick_process+0x2b8>)
   12824:	3364      	adds	r3, #100	; 0x64
   12826:	ca13      	ldmia	r2!, {r0, r1, r4}
   12828:	c313      	stmia	r3!, {r0, r1, r4}
	cal_report.mag_stdev_m1 = calc_mag_stdev(m1Cal);
   1282a:	4c23      	ldr	r4, [pc, #140]	; (128b8 <cal_azm_quick_process+0x2bc>)
	memcpy(&cal_report.time_quick_azm,&current_time,sizeof(current_time));
   1282c:	ca03      	ldmia	r2!, {r0, r1}
   1282e:	c303      	stmia	r3!, {r0, r1}
	cal_report.mag_stdev_m1 = calc_mag_stdev(m1Cal);
   12830:	4811      	ldr	r0, [pc, #68]	; (12878 <cal_azm_quick_process+0x27c>)
   12832:	47a0      	blx	r4
   12834:	6328      	str	r0, [r5, #48]	; 0x30
	cal_report.mag_stdev_m2 = calc_mag_stdev(m2Cal);
   12836:	481b      	ldr	r0, [pc, #108]	; (128a4 <cal_azm_quick_process+0x2a8>)
   12838:	47a0      	blx	r4
	for (i=0;i<3;i++){
   1283a:	2400      	movs	r4, #0
   1283c:	4e1f      	ldr	r6, [pc, #124]	; (128bc <cal_azm_quick_process+0x2c0>)
	cal_report.mag_stdev_m2 = calc_mag_stdev(m2Cal);
   1283e:	6368      	str	r0, [r5, #52]	; 0x34
		cal_report.disp_stdev_comp[i] = calc_disp_stdev(m1Cal, m2Cal, i);
   12840:	b2e2      	uxtb	r2, r4
   12842:	4918      	ldr	r1, [pc, #96]	; (128a4 <cal_azm_quick_process+0x2a8>)
   12844:	480c      	ldr	r0, [pc, #48]	; (12878 <cal_azm_quick_process+0x27c>)
   12846:	47b0      	blx	r6
   12848:	00a3      	lsls	r3, r4, #2
   1284a:	18eb      	adds	r3, r5, r3
	for (i=0;i<3;i++){
   1284c:	3401      	adds	r4, #1
		cal_report.disp_stdev_comp[i] = calc_disp_stdev(m1Cal, m2Cal, i);
   1284e:	6458      	str	r0, [r3, #68]	; 0x44
	for (i=0;i<3;i++){
   12850:	2c03      	cmp	r4, #3
   12852:	d1f5      	bne.n	12840 <cal_azm_quick_process+0x244>
	SD_save_raw_data(azm_quick);
   12854:	4b1a      	ldr	r3, [pc, #104]	; (128c0 <cal_azm_quick_process+0x2c4>)
   12856:	2001      	movs	r0, #1
   12858:	4798      	blx	r3
	SD_add_cal_history(azm_quick);	
   1285a:	4b1a      	ldr	r3, [pc, #104]	; (128c4 <cal_azm_quick_process+0x2c8>)
   1285c:	2001      	movs	r0, #1
   1285e:	4798      	blx	r3
	save_calibration();
   12860:	4b19      	ldr	r3, [pc, #100]	; (128c8 <cal_azm_quick_process+0x2cc>)
   12862:	4798      	blx	r3
}
   12864:	b025      	add	sp, #148	; 0x94
   12866:	bc3c      	pop	{r2, r3, r4, r5}
   12868:	4690      	mov	r8, r2
   1286a:	4699      	mov	r9, r3
   1286c:	46a2      	mov	sl, r4
   1286e:	46ab      	mov	fp, r5
   12870:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12872:	46c0      	nop			; (mov r8, r8)
   12874:	200054b0 	.word	0x200054b0
   12878:	20004bd8 	.word	0x20004bd8
   1287c:	20003470 	.word	0x20003470
   12880:	20003340 	.word	0x20003340
   12884:	00011f41 	.word	0x00011f41
   12888:	0001d235 	.word	0x0001d235
   1288c:	000095c5 	.word	0x000095c5
   12890:	0001db79 	.word	0x0001db79
   12894:	0001d559 	.word	0x0001d559
   12898:	0001d939 	.word	0x0001d939
   1289c:	0001160d 	.word	0x0001160d
   128a0:	20001c88 	.word	0x20001c88
   128a4:	20002be0 	.word	0x20002be0
   128a8:	20003fe0 	.word	0x20003fe0
   128ac:	00007c61 	.word	0x00007c61
   128b0:	20004b4c 	.word	0x20004b4c
   128b4:	20002778 	.word	0x20002778
   128b8:	00008da1 	.word	0x00008da1
   128bc:	00008f71 	.word	0x00008f71
   128c0:	0000c075 	.word	0x0000c075
   128c4:	0000b491 	.word	0x0000b491
   128c8:	00008b05 	.word	0x00008b05

000128cc <writeLaserCallback>:

}

void writeLaserCallback(struct usart_module *const usart_module)
{
	LaserTransmitComplete = true;
   128cc:	2201      	movs	r2, #1
   128ce:	4b01      	ldr	r3, [pc, #4]	; (128d4 <writeLaserCallback+0x8>)
   128d0:	701a      	strb	r2, [r3, #0]
}
   128d2:	4770      	bx	lr
   128d4:	20000edb 	.word	0x20000edb

000128d8 <writeBleCallback>:

}

void writeBleCallback(struct usart_module *const usart_module)
{
	BleTransmitComplete = true;
   128d8:	2201      	movs	r2, #1
   128da:	4b01      	ldr	r3, [pc, #4]	; (128e0 <writeBleCallback+0x8>)
   128dc:	701a      	strb	r2, [r3, #0]
}
   128de:	4770      	bx	lr
   128e0:	20000ed9 	.word	0x20000ed9

000128e4 <readBleCallback>:
{	
   128e4:	b510      	push	{r4, lr}
	debugBuffPtr = &debugBuff[0];
   128e6:	4823      	ldr	r0, [pc, #140]	; (12974 <readBleCallback+0x90>)
   128e8:	4b23      	ldr	r3, [pc, #140]	; (12978 <readBleCallback+0x94>)
	debugBuff[debugBuffIndex] = bleRcvByte;
   128ea:	4924      	ldr	r1, [pc, #144]	; (1297c <readBleCallback+0x98>)
	debugBuffPtr = &debugBuff[0];
   128ec:	6018      	str	r0, [r3, #0]
	debugBuff[debugBuffIndex] = bleRcvByte;
   128ee:	4b24      	ldr	r3, [pc, #144]	; (12980 <readBleCallback+0x9c>)
   128f0:	681c      	ldr	r4, [r3, #0]
   128f2:	780a      	ldrb	r2, [r1, #0]
   128f4:	b2d2      	uxtb	r2, r2
   128f6:	5502      	strb	r2, [r0, r4]
	debugBuffIndex++;
   128f8:	681a      	ldr	r2, [r3, #0]
   128fa:	3201      	adds	r2, #1
   128fc:	601a      	str	r2, [r3, #0]
	if (debugBuffIndex>=sizeof(debugBuff)){debugBuffIndex = 0;}
   128fe:	681a      	ldr	r2, [r3, #0]
   12900:	2ac7      	cmp	r2, #199	; 0xc7
   12902:	d901      	bls.n	12908 <readBleCallback+0x24>
   12904:	2200      	movs	r2, #0
   12906:	601a      	str	r2, [r3, #0]
	if((bleRcvByte==NL)||(bleRcvByte==CR)||(bleRcvByte==00)){ 
   12908:	780b      	ldrb	r3, [r1, #0]
   1290a:	2b0a      	cmp	r3, #10
   1290c:	d005      	beq.n	1291a <readBleCallback+0x36>
   1290e:	780b      	ldrb	r3, [r1, #0]
   12910:	2b0d      	cmp	r3, #13
   12912:	d002      	beq.n	1291a <readBleCallback+0x36>
   12914:	780b      	ldrb	r3, [r1, #0]
   12916:	2b00      	cmp	r3, #0
   12918:	d10f      	bne.n	1293a <readBleCallback+0x56>
		if(rxBufferBleIndex!=0){
   1291a:	4b1a      	ldr	r3, [pc, #104]	; (12984 <readBleCallback+0xa0>)
   1291c:	781a      	ldrb	r2, [r3, #0]
   1291e:	2a00      	cmp	r2, #0
   12920:	d007      	beq.n	12932 <readBleCallback+0x4e>
			BleReceiveComplete=true;		
   12922:	2001      	movs	r0, #1
   12924:	4a18      	ldr	r2, [pc, #96]	; (12988 <readBleCallback+0xa4>)
   12926:	7010      	strb	r0, [r2, #0]
			rxBufferBle[rxBufferBleIndex]=0x00;  //  Put in null character at end	
   12928:	2000      	movs	r0, #0
   1292a:	781b      	ldrb	r3, [r3, #0]
   1292c:	4a17      	ldr	r2, [pc, #92]	; (1298c <readBleCallback+0xa8>)
   1292e:	b2db      	uxtb	r3, r3
   12930:	54d0      	strb	r0, [r2, r3]
	usart_read_job(&usart_BLE, &bleRcvByte);
   12932:	4b17      	ldr	r3, [pc, #92]	; (12990 <readBleCallback+0xac>)
   12934:	4817      	ldr	r0, [pc, #92]	; (12994 <readBleCallback+0xb0>)
   12936:	4798      	blx	r3
}
   12938:	bd10      	pop	{r4, pc}
		if (BleReceiveComplete){
   1293a:	4b13      	ldr	r3, [pc, #76]	; (12988 <readBleCallback+0xa4>)
   1293c:	781b      	ldrb	r3, [r3, #0]
   1293e:	2b00      	cmp	r3, #0
   12940:	d006      	beq.n	12950 <readBleCallback+0x6c>
void rxBufferLaserClear(void){
	//uint8_t i;
	//for (i=0;i<sizeof(rxBufferLaser);i++){
	//	rxBufferLaser[i] = 0;
	//}
	laserCurrentMessage = NONE;
   12942:	2300      	movs	r3, #0
   12944:	4a14      	ldr	r2, [pc, #80]	; (12998 <readBleCallback+0xb4>)
   12946:	7013      	strb	r3, [r2, #0]
	LaserReceiveComplete=false;
   12948:	4a14      	ldr	r2, [pc, #80]	; (1299c <readBleCallback+0xb8>)
   1294a:	7013      	strb	r3, [r2, #0]
	rxBufferLaserIndex = 0;
   1294c:	4a14      	ldr	r2, [pc, #80]	; (129a0 <readBleCallback+0xbc>)
   1294e:	7013      	strb	r3, [r2, #0]
		rxBufferBle[rxBufferBleIndex] = bleRcvByte;
   12950:	4a0c      	ldr	r2, [pc, #48]	; (12984 <readBleCallback+0xa0>)
   12952:	4c0e      	ldr	r4, [pc, #56]	; (1298c <readBleCallback+0xa8>)
   12954:	7813      	ldrb	r3, [r2, #0]
   12956:	7808      	ldrb	r0, [r1, #0]
   12958:	b2db      	uxtb	r3, r3
   1295a:	b2c0      	uxtb	r0, r0
   1295c:	54e0      	strb	r0, [r4, r3]
		rxBufferBleIndex++;		
   1295e:	7813      	ldrb	r3, [r2, #0]
   12960:	3301      	adds	r3, #1
   12962:	b2db      	uxtb	r3, r3
   12964:	7013      	strb	r3, [r2, #0]
		if (rxBufferBleIndex>=sizeof(rxBufferBle)){
   12966:	7813      	ldrb	r3, [r2, #0]
   12968:	2b63      	cmp	r3, #99	; 0x63
   1296a:	d9e2      	bls.n	12932 <readBleCallback+0x4e>
			rxBufferBleIndex = 0;
   1296c:	2300      	movs	r3, #0
   1296e:	7013      	strb	r3, [r2, #0]
   12970:	e7df      	b.n	12932 <readBleCallback+0x4e>
   12972:	46c0      	nop			; (mov r8, r8)
   12974:	200030a0 	.word	0x200030a0
   12978:	20003328 	.word	0x20003328
   1297c:	2000146c 	.word	0x2000146c
   12980:	20000f0c 	.word	0x20000f0c
   12984:	20003928 	.word	0x20003928
   12988:	20000ed8 	.word	0x20000ed8
   1298c:	20003f78 	.word	0x20003f78
   12990:	0000ff39 	.word	0x0000ff39
   12994:	20001020 	.word	0x20001020
   12998:	2000146b 	.word	0x2000146b
   1299c:	20000eda 	.word	0x20000eda
   129a0:	2000544c 	.word	0x2000544c

000129a4 <readLaserCallback>:
{
   129a4:	b510      	push	{r4, lr}
	if(rxBufferLaser[rxBufferLaserIndex]==0xA8){
   129a6:	481c      	ldr	r0, [pc, #112]	; (12a18 <readLaserCallback+0x74>)
   129a8:	491c      	ldr	r1, [pc, #112]	; (12a1c <readLaserCallback+0x78>)
   129aa:	7803      	ldrb	r3, [r0, #0]
   129ac:	b2db      	uxtb	r3, r3
   129ae:	5ccb      	ldrb	r3, [r1, r3]
   129b0:	2ba8      	cmp	r3, #168	; 0xa8
   129b2:	d014      	beq.n	129de <readLaserCallback+0x3a>
	}else if(rxBufferLaser[rxBufferLaserIndex]==0xAA){
   129b4:	7803      	ldrb	r3, [r0, #0]
   129b6:	b2db      	uxtb	r3, r3
   129b8:	5ccb      	ldrb	r3, [r1, r3]
   129ba:	b2db      	uxtb	r3, r3
   129bc:	2baa      	cmp	r3, #170	; 0xaa
   129be:	d020      	beq.n	12a02 <readLaserCallback+0x5e>
		rxBufferLaserIndex++;
   129c0:	7803      	ldrb	r3, [r0, #0]
   129c2:	3301      	adds	r3, #1
   129c4:	b2db      	uxtb	r3, r3
   129c6:	7003      	strb	r3, [r0, #0]
		if (rxBufferLaserIndex>=sizeof(rxBufferLaser)){
   129c8:	7803      	ldrb	r3, [r0, #0]
   129ca:	2b63      	cmp	r3, #99	; 0x63
   129cc:	d901      	bls.n	129d2 <readLaserCallback+0x2e>
			rxBufferLaserIndex = 0;
   129ce:	2300      	movs	r3, #0
   129d0:	7003      	strb	r3, [r0, #0]
	usart_read_job(&usart_laser, &rxBufferLaser[rxBufferLaserIndex]);
   129d2:	7803      	ldrb	r3, [r0, #0]
   129d4:	4812      	ldr	r0, [pc, #72]	; (12a20 <readLaserCallback+0x7c>)
   129d6:	18c9      	adds	r1, r1, r3
   129d8:	4b12      	ldr	r3, [pc, #72]	; (12a24 <readLaserCallback+0x80>)
   129da:	4798      	blx	r3
}
   129dc:	bd10      	pop	{r4, pc}
		LaserReceiveComplete=true;		
   129de:	2201      	movs	r2, #1
   129e0:	4b11      	ldr	r3, [pc, #68]	; (12a28 <readLaserCallback+0x84>)
   129e2:	701a      	strb	r2, [r3, #0]
		rxBufferLaserIndex = 0;
   129e4:	2300      	movs	r3, #0
   129e6:	7003      	strb	r3, [r0, #0]
   129e8:	e002      	b.n	129f0 <readLaserCallback+0x4c>
   129ea:	3301      	adds	r3, #1

//  Determine the type of message currently in the buffer
enum LASER_MESSAGE_TYPE laserMessageType(void){
	uint8_t i;
	enum LASER_MESSAGE_TYPE messType = 0;
	for(i=0;i<sizeof(rxBufferLaser);i++){
   129ec:	2b64      	cmp	r3, #100	; 0x64
   129ee:	d011      	beq.n	12a14 <readLaserCallback+0x70>
		if(rxBufferLaser[i]==0xAA){
   129f0:	5cca      	ldrb	r2, [r1, r3]
   129f2:	2aaa      	cmp	r2, #170	; 0xaa
   129f4:	d1f9      	bne.n	129ea <readLaserCallback+0x46>
			messType =  rxBufferLaser[i+2];
   129f6:	3302      	adds	r3, #2
   129f8:	5ccb      	ldrb	r3, [r1, r3]
   129fa:	b2db      	uxtb	r3, r3
		laserCurrentMessage = laserMessageType();
   129fc:	4a0b      	ldr	r2, [pc, #44]	; (12a2c <readLaserCallback+0x88>)
   129fe:	7013      	strb	r3, [r2, #0]
   12a00:	e7e7      	b.n	129d2 <readLaserCallback+0x2e>
		LaserReceiveComplete=false;
   12a02:	2200      	movs	r2, #0
   12a04:	4c08      	ldr	r4, [pc, #32]	; (12a28 <readLaserCallback+0x84>)
   12a06:	7022      	strb	r2, [r4, #0]
		rxBufferLaser[0]=0xAA;  //  Ensure message starts at beginning of buffer
   12a08:	700b      	strb	r3, [r1, #0]
		rxBufferLaserIndex = 1;	// Next byte to be placed at 1	
   12a0a:	3ba9      	subs	r3, #169	; 0xa9
   12a0c:	7003      	strb	r3, [r0, #0]
		laserCurrentMessage = NONE;
   12a0e:	4b07      	ldr	r3, [pc, #28]	; (12a2c <readLaserCallback+0x88>)
   12a10:	701a      	strb	r2, [r3, #0]
   12a12:	e7de      	b.n	129d2 <readLaserCallback+0x2e>
	enum LASER_MESSAGE_TYPE messType = 0;
   12a14:	2300      	movs	r3, #0
   12a16:	e7f1      	b.n	129fc <readLaserCallback+0x58>
   12a18:	2000544c 	.word	0x2000544c
   12a1c:	20005568 	.word	0x20005568
   12a20:	20000f74 	.word	0x20000f74
   12a24:	0000ff39 	.word	0x0000ff39
   12a28:	20000eda 	.word	0x20000eda
   12a2c:	2000146b 	.word	0x2000146b

00012a30 <disable_comms>:
void disable_comms(void){
   12a30:	b570      	push	{r4, r5, r6, lr}
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12a32:	4e25      	ldr	r6, [pc, #148]	; (12ac8 <disable_comms+0x98>)

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   12a34:	4c25      	ldr	r4, [pc, #148]	; (12acc <disable_comms+0x9c>)
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12a36:	6835      	ldr	r5, [r6, #0]
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   12a38:	0028      	movs	r0, r5
   12a3a:	47a0      	blx	r4
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12a3c:	231f      	movs	r3, #31
   12a3e:	4018      	ands	r0, r3
   12a40:	3b1e      	subs	r3, #30
   12a42:	2280      	movs	r2, #128	; 0x80
   12a44:	4083      	lsls	r3, r0
   12a46:	4922      	ldr	r1, [pc, #136]	; (12ad0 <disable_comms+0xa0>)
   12a48:	508b      	str	r3, [r1, r2]
   12a4a:	6831      	ldr	r1, [r6, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   12a4c:	3a79      	subs	r2, #121	; 0x79
   12a4e:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
   12a50:	421a      	tst	r2, r3
   12a52:	d1fc      	bne.n	12a4e <disable_comms+0x1e>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   12a54:	2383      	movs	r3, #131	; 0x83
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   12a56:	2202      	movs	r2, #2
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   12a58:	752b      	strb	r3, [r5, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   12a5a:	762b      	strb	r3, [r5, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   12a5c:	682b      	ldr	r3, [r5, #0]
   12a5e:	4393      	bics	r3, r2
   12a60:	602b      	str	r3, [r5, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   12a62:	4b1c      	ldr	r3, [pc, #112]	; (12ad4 <disable_comms+0xa4>)
   12a64:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
   12a66:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
   12a68:	2b00      	cmp	r3, #0
   12a6a:	d1fc      	bne.n	12a66 <disable_comms+0x36>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   12a6c:	2102      	movs	r1, #2
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   12a6e:	338f      	adds	r3, #143	; 0x8f
   12a70:	7513      	strb	r3, [r2, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   12a72:	7613      	strb	r3, [r2, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   12a74:	6813      	ldr	r3, [r2, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   12a76:	4e18      	ldr	r6, [pc, #96]	; (12ad8 <disable_comms+0xa8>)
   12a78:	438b      	bics	r3, r1
   12a7a:	6013      	str	r3, [r2, #0]
   12a7c:	6835      	ldr	r5, [r6, #0]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   12a7e:	0028      	movs	r0, r5
   12a80:	47a0      	blx	r4
   12a82:	231f      	movs	r3, #31
   12a84:	4018      	ands	r0, r3
   12a86:	3b1e      	subs	r3, #30
   12a88:	2280      	movs	r2, #128	; 0x80
   12a8a:	4083      	lsls	r3, r0
   12a8c:	4910      	ldr	r1, [pc, #64]	; (12ad0 <disable_comms+0xa0>)
   12a8e:	508b      	str	r3, [r1, r2]
   12a90:	6832      	ldr	r2, [r6, #0]
	return (usart_hw->SYNCBUSY.reg);
   12a92:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   12a94:	2b00      	cmp	r3, #0
   12a96:	d1fc      	bne.n	12a92 <disable_comms+0x62>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
   12a98:	2202      	movs	r2, #2
   12a9a:	682b      	ldr	r3, [r5, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
   12a9c:	4e0f      	ldr	r6, [pc, #60]	; (12adc <disable_comms+0xac>)
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
   12a9e:	4393      	bics	r3, r2
   12aa0:	602b      	str	r3, [r5, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
   12aa2:	6835      	ldr	r5, [r6, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   12aa4:	0028      	movs	r0, r5
   12aa6:	47a0      	blx	r4
   12aa8:	231f      	movs	r3, #31
   12aaa:	4018      	ands	r0, r3
   12aac:	3b1e      	subs	r3, #30
   12aae:	2280      	movs	r2, #128	; 0x80
   12ab0:	4083      	lsls	r3, r0
   12ab2:	4907      	ldr	r1, [pc, #28]	; (12ad0 <disable_comms+0xa0>)
   12ab4:	508b      	str	r3, [r1, r2]
   12ab6:	6832      	ldr	r2, [r6, #0]
	return (usart_hw->SYNCBUSY.reg);
   12ab8:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   12aba:	2b00      	cmp	r3, #0
   12abc:	d1fc      	bne.n	12ab8 <disable_comms+0x88>
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
   12abe:	2202      	movs	r2, #2
   12ac0:	682b      	ldr	r3, [r5, #0]
   12ac2:	4393      	bics	r3, r2
   12ac4:	602b      	str	r3, [r5, #0]
}
   12ac6:	bd70      	pop	{r4, r5, r6, pc}
   12ac8:	20000fb8 	.word	0x20000fb8
   12acc:	0000fe91 	.word	0x0000fe91
   12ad0:	e000e100 	.word	0xe000e100
   12ad4:	20000fac 	.word	0x20000fac
   12ad8:	20000f74 	.word	0x20000f74
   12adc:	20001020 	.word	0x20001020

00012ae0 <spi_setBaud>:
void spi_setBaud(uint32_t baudRate){
   12ae0:	b570      	push	{r4, r5, r6, lr}
   12ae2:	b082      	sub	sp, #8
	uint16_t baud = 0;
   12ae4:	466b      	mov	r3, sp
   12ae6:	1d9c      	adds	r4, r3, #6
   12ae8:	2300      	movs	r3, #0
void spi_setBaud(uint32_t baudRate){
   12aea:	0006      	movs	r6, r0
	SercomSpi *const spi_module = &(module->hw->SPI);
   12aec:	4d12      	ldr	r5, [pc, #72]	; (12b38 <spi_setBaud+0x58>)
	uint16_t baud = 0;
   12aee:	8023      	strh	r3, [r4, #0]
   12af0:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   12af2:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   12af4:	2b00      	cmp	r3, #0
   12af6:	d1fc      	bne.n	12af2 <spi_setBaud+0x12>
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   12af8:	2102      	movs	r1, #2
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   12afa:	338f      	adds	r3, #143	; 0x8f
   12afc:	7513      	strb	r3, [r2, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   12afe:	7613      	strb	r3, [r2, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   12b00:	6813      	ldr	r3, [r2, #0]
   12b02:	438b      	bics	r3, r1
   12b04:	6013      	str	r3, [r2, #0]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(spi_main.hw);
   12b06:	6828      	ldr	r0, [r5, #0]
   12b08:	4b0c      	ldr	r3, [pc, #48]	; (12b3c <spi_setBaud+0x5c>)
   12b0a:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   12b0c:	3012      	adds	r0, #18
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   12b0e:	4b0c      	ldr	r3, [pc, #48]	; (12b40 <spi_setBaud+0x60>)
   12b10:	b2c0      	uxtb	r0, r0
   12b12:	4798      	blx	r3
	enum status_code error_code = _sercom_get_sync_baud_val(
   12b14:	0022      	movs	r2, r4
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   12b16:	0001      	movs	r1, r0
	enum status_code error_code = _sercom_get_sync_baud_val(
   12b18:	4b0a      	ldr	r3, [pc, #40]	; (12b44 <spi_setBaud+0x64>)
   12b1a:	0030      	movs	r0, r6
   12b1c:	4798      	blx	r3
	spi_main.hw->SPI.BAUD.reg = (uint8_t)baud;
   12b1e:	682a      	ldr	r2, [r5, #0]
   12b20:	7823      	ldrb	r3, [r4, #0]
   12b22:	7313      	strb	r3, [r2, #12]
	return (spi_module->SYNCBUSY.reg);
   12b24:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   12b26:	2b00      	cmp	r3, #0
   12b28:	d1fc      	bne.n	12b24 <spi_setBaud+0x44>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   12b2a:	2102      	movs	r1, #2
   12b2c:	6813      	ldr	r3, [r2, #0]
   12b2e:	430b      	orrs	r3, r1
   12b30:	6013      	str	r3, [r2, #0]
}
   12b32:	b002      	add	sp, #8
   12b34:	bd70      	pop	{r4, r5, r6, pc}
   12b36:	46c0      	nop			; (mov r8, r8)
   12b38:	20000fac 	.word	0x20000fac
   12b3c:	00016115 	.word	0x00016115
   12b40:	0001696d 	.word	0x0001696d
   12b44:	00015ce1 	.word	0x00015ce1

00012b48 <setup_spi>:
void setup_spi(void){
   12b48:	b5f0      	push	{r4, r5, r6, r7, lr}
   12b4a:	46ce      	mov	lr, r9
   12b4c:	4647      	mov	r7, r8
	slave->ss_pin          = config->ss_pin;
   12b4e:	2317      	movs	r3, #23
	slave->address_enabled = config->address_enabled;
   12b50:	2600      	movs	r6, #0
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
   12b52:	2501      	movs	r5, #1
   12b54:	b580      	push	{r7, lr}
	slave->ss_pin          = config->ss_pin;
   12b56:	4f6d      	ldr	r7, [pc, #436]	; (12d0c <setup_spi+0x1c4>)
   12b58:	b083      	sub	sp, #12
   12b5a:	ac01      	add	r4, sp, #4
   12b5c:	703b      	strb	r3, [r7, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   12b5e:	4b6c      	ldr	r3, [pc, #432]	; (12d10 <setup_spi+0x1c8>)
   12b60:	0021      	movs	r1, r4
   12b62:	2017      	movs	r0, #23
   12b64:	4699      	mov	r9, r3
	slave->address_enabled = config->address_enabled;
   12b66:	707e      	strb	r6, [r7, #1]
	slave->address         = config->address;
   12b68:	70be      	strb	r6, [r7, #2]
   12b6a:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
   12b6c:	70a6      	strb	r6, [r4, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   12b6e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   12b70:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   12b72:	783a      	ldrb	r2, [r7, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
   12b74:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
   12b76:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
   12b78:	4688      	mov	r8, r1
   12b7a:	2900      	cmp	r1, #0
   12b7c:	d000      	beq.n	12b80 <setup_spi+0x38>
   12b7e:	e0c3      	b.n	12d08 <setup_spi+0x1c0>
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   12b80:	271f      	movs	r7, #31
   12b82:	0029      	movs	r1, r5
   12b84:	403a      	ands	r2, r7
   12b86:	4091      	lsls	r1, r2
   12b88:	000a      	movs	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
   12b8a:	4962      	ldr	r1, [pc, #392]	; (12d14 <setup_spi+0x1cc>)
   12b8c:	01db      	lsls	r3, r3, #7
   12b8e:	468c      	mov	ip, r1
   12b90:	4463      	add	r3, ip
   12b92:	619a      	str	r2, [r3, #24]
	slave->ss_pin          = config->ss_pin;
   12b94:	2312      	movs	r3, #18
   12b96:	4e60      	ldr	r6, [pc, #384]	; (12d18 <setup_spi+0x1d0>)
	port_pin_set_config(slave->ss_pin, &pin_conf);
   12b98:	0021      	movs	r1, r4
	slave->ss_pin          = config->ss_pin;
   12b9a:	7033      	strb	r3, [r6, #0]
	slave->address_enabled = config->address_enabled;
   12b9c:	4643      	mov	r3, r8
	port_pin_set_config(slave->ss_pin, &pin_conf);
   12b9e:	2012      	movs	r0, #18
	slave->address_enabled = config->address_enabled;
   12ba0:	7073      	strb	r3, [r6, #1]
	slave->address         = config->address;
   12ba2:	70b3      	strb	r3, [r6, #2]
	config->powersave  = false;
   12ba4:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
   12ba6:	7065      	strb	r5, [r4, #1]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   12ba8:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   12baa:	47c8      	blx	r9
	port_pin_set_output_level(slave->ss_pin, true);
   12bac:	7832      	ldrb	r2, [r6, #0]
	uint8_t group_index = (gpio_pin / 32);
   12bae:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
   12bb0:	09d6      	lsrs	r6, r2, #7
   12bb2:	d000      	beq.n	12bb6 <setup_spi+0x6e>
   12bb4:	e0a5      	b.n	12d02 <setup_spi+0x1ba>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   12bb6:	0029      	movs	r1, r5
   12bb8:	403a      	ands	r2, r7
   12bba:	4091      	lsls	r1, r2
   12bbc:	000a      	movs	r2, r1
		port_base->OUTSET.reg = pin_mask;
   12bbe:	4955      	ldr	r1, [pc, #340]	; (12d14 <setup_spi+0x1cc>)
   12bc0:	01db      	lsls	r3, r3, #7
   12bc2:	468c      	mov	ip, r1
   12bc4:	4463      	add	r3, ip
   12bc6:	619a      	str	r2, [r3, #24]
	slave->ss_pin          = config->ss_pin;
   12bc8:	4b54      	ldr	r3, [pc, #336]	; (12d1c <setup_spi+0x1d4>)
	port_pin_set_config(slave->ss_pin, &pin_conf);
   12bca:	0021      	movs	r1, r4
	slave->ss_pin          = config->ss_pin;
   12bcc:	4698      	mov	r8, r3
   12bce:	2313      	movs	r3, #19
   12bd0:	4642      	mov	r2, r8
	port_pin_set_config(slave->ss_pin, &pin_conf);
   12bd2:	2013      	movs	r0, #19
	slave->ss_pin          = config->ss_pin;
   12bd4:	7013      	strb	r3, [r2, #0]
	slave->address_enabled = config->address_enabled;
   12bd6:	7056      	strb	r6, [r2, #1]
	slave->address         = config->address;
   12bd8:	7096      	strb	r6, [r2, #2]
	config->input_pull = PORT_PIN_PULL_UP;
   12bda:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
   12bdc:	70a6      	strb	r6, [r4, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   12bde:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   12be0:	47c8      	blx	r9
	port_pin_set_output_level(slave->ss_pin, true);
   12be2:	4643      	mov	r3, r8
   12be4:	781a      	ldrb	r2, [r3, #0]
   12be6:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
   12be8:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
   12bea:	4688      	mov	r8, r1
   12bec:	2900      	cmp	r1, #0
   12bee:	d000      	beq.n	12bf2 <setup_spi+0xaa>
   12bf0:	e08a      	b.n	12d08 <setup_spi+0x1c0>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   12bf2:	0029      	movs	r1, r5
   12bf4:	403a      	ands	r2, r7
   12bf6:	4091      	lsls	r1, r2
   12bf8:	000a      	movs	r2, r1
		port_base->OUTSET.reg = pin_mask;
   12bfa:	4946      	ldr	r1, [pc, #280]	; (12d14 <setup_spi+0x1cc>)
   12bfc:	01db      	lsls	r3, r3, #7
   12bfe:	468c      	mov	ip, r1
   12c00:	4463      	add	r3, ip
   12c02:	619a      	str	r2, [r3, #24]
	slave->ss_pin          = config->ss_pin;
   12c04:	2315      	movs	r3, #21
   12c06:	4e46      	ldr	r6, [pc, #280]	; (12d20 <setup_spi+0x1d8>)
	port_pin_set_config(slave->ss_pin, &pin_conf);
   12c08:	0021      	movs	r1, r4
	slave->ss_pin          = config->ss_pin;
   12c0a:	7033      	strb	r3, [r6, #0]
	slave->address_enabled = config->address_enabled;
   12c0c:	4643      	mov	r3, r8
	port_pin_set_config(slave->ss_pin, &pin_conf);
   12c0e:	2015      	movs	r0, #21
	slave->address_enabled = config->address_enabled;
   12c10:	7073      	strb	r3, [r6, #1]
	slave->address         = config->address;
   12c12:	70b3      	strb	r3, [r6, #2]
	config->powersave  = false;
   12c14:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
   12c16:	7065      	strb	r5, [r4, #1]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   12c18:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   12c1a:	47c8      	blx	r9
	port_pin_set_output_level(slave->ss_pin, true);
   12c1c:	7832      	ldrb	r2, [r6, #0]
	uint8_t group_index = (gpio_pin / 32);
   12c1e:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
   12c20:	09d6      	lsrs	r6, r2, #7
   12c22:	d000      	beq.n	12c26 <setup_spi+0xde>
   12c24:	e06d      	b.n	12d02 <setup_spi+0x1ba>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   12c26:	0029      	movs	r1, r5
   12c28:	403a      	ands	r2, r7
   12c2a:	4091      	lsls	r1, r2
   12c2c:	000a      	movs	r2, r1
		port_base->OUTSET.reg = pin_mask;
   12c2e:	4939      	ldr	r1, [pc, #228]	; (12d14 <setup_spi+0x1cc>)
   12c30:	01db      	lsls	r3, r3, #7
   12c32:	468c      	mov	ip, r1
   12c34:	4463      	add	r3, ip
   12c36:	619a      	str	r2, [r3, #24]
	slave->ss_pin          = config->ss_pin;
   12c38:	4b3a      	ldr	r3, [pc, #232]	; (12d24 <setup_spi+0x1dc>)
	port_pin_set_config(slave->ss_pin, &pin_conf);
   12c3a:	0021      	movs	r1, r4
	slave->ss_pin          = config->ss_pin;
   12c3c:	4698      	mov	r8, r3
   12c3e:	2314      	movs	r3, #20
   12c40:	4642      	mov	r2, r8
	port_pin_set_config(slave->ss_pin, &pin_conf);
   12c42:	2014      	movs	r0, #20
	slave->ss_pin          = config->ss_pin;
   12c44:	7013      	strb	r3, [r2, #0]
	slave->address_enabled = config->address_enabled;
   12c46:	7056      	strb	r6, [r2, #1]
	slave->address         = config->address;
   12c48:	7096      	strb	r6, [r2, #2]
	config->input_pull = PORT_PIN_PULL_UP;
   12c4a:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
   12c4c:	70a6      	strb	r6, [r4, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   12c4e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   12c50:	47c8      	blx	r9
	port_pin_set_output_level(slave->ss_pin, true);
   12c52:	4643      	mov	r3, r8
   12c54:	781a      	ldrb	r2, [r3, #0]
   12c56:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
   12c58:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
   12c5a:	4688      	mov	r8, r1
   12c5c:	2900      	cmp	r1, #0
   12c5e:	d153      	bne.n	12d08 <setup_spi+0x1c0>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   12c60:	0029      	movs	r1, r5
   12c62:	403a      	ands	r2, r7
   12c64:	4091      	lsls	r1, r2
   12c66:	000a      	movs	r2, r1
		port_base->OUTSET.reg = pin_mask;
   12c68:	492a      	ldr	r1, [pc, #168]	; (12d14 <setup_spi+0x1cc>)
   12c6a:	01db      	lsls	r3, r3, #7
   12c6c:	468c      	mov	ip, r1
   12c6e:	4463      	add	r3, ip
   12c70:	619a      	str	r2, [r3, #24]
	slave->ss_pin          = config->ss_pin;
   12c72:	230f      	movs	r3, #15
   12c74:	4e2c      	ldr	r6, [pc, #176]	; (12d28 <setup_spi+0x1e0>)
	port_pin_set_config(slave->ss_pin, &pin_conf);
   12c76:	0021      	movs	r1, r4
	slave->ss_pin          = config->ss_pin;
   12c78:	7033      	strb	r3, [r6, #0]
	slave->address_enabled = config->address_enabled;
   12c7a:	4643      	mov	r3, r8
	port_pin_set_config(slave->ss_pin, &pin_conf);
   12c7c:	200f      	movs	r0, #15
	slave->address_enabled = config->address_enabled;
   12c7e:	7073      	strb	r3, [r6, #1]
	slave->address         = config->address;
   12c80:	70b3      	strb	r3, [r6, #2]
	config->powersave  = false;
   12c82:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
   12c84:	7065      	strb	r5, [r4, #1]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   12c86:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   12c88:	47c8      	blx	r9
	port_pin_set_output_level(slave->ss_pin, true);
   12c8a:	7832      	ldrb	r2, [r6, #0]
	uint8_t group_index = (gpio_pin / 32);
   12c8c:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
   12c8e:	09d6      	lsrs	r6, r2, #7
   12c90:	d137      	bne.n	12d02 <setup_spi+0x1ba>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   12c92:	4017      	ands	r7, r2
   12c94:	002a      	movs	r2, r5
		port_base->OUTSET.reg = pin_mask;
   12c96:	491f      	ldr	r1, [pc, #124]	; (12d14 <setup_spi+0x1cc>)
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   12c98:	40ba      	lsls	r2, r7
		port_base->OUTSET.reg = pin_mask;
   12c9a:	468c      	mov	ip, r1
	config->mode             = SPI_MODE_MASTER;
   12c9c:	4c23      	ldr	r4, [pc, #140]	; (12d2c <setup_spi+0x1e4>)
   12c9e:	01db      	lsls	r3, r3, #7
   12ca0:	4463      	add	r3, ip
   12ca2:	619a      	str	r2, [r3, #24]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   12ca4:	0020      	movs	r0, r4
	config->generator_source = GCLK_GENERATOR_0;
   12ca6:	2324      	movs	r3, #36	; 0x24
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   12ca8:	220c      	movs	r2, #12
	config->generator_source = GCLK_GENERATOR_0;
   12caa:	54e6      	strb	r6, [r4, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   12cac:	2100      	movs	r1, #0
   12cae:	4b20      	ldr	r3, [pc, #128]	; (12d30 <setup_spi+0x1e8>)
   12cb0:	3018      	adds	r0, #24
	config->mode             = SPI_MODE_MASTER;
   12cb2:	7025      	strb	r5, [r4, #0]
	config->receiver_enable  = true;
   12cb4:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
   12cb6:	74e5      	strb	r5, [r4, #19]
	config->data_order       = SPI_DATA_ORDER_MSB;
   12cb8:	6066      	str	r6, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   12cba:	60a6      	str	r6, [r4, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   12cbc:	7426      	strb	r6, [r4, #16]
	config->run_in_standby   = false;
   12cbe:	7466      	strb	r6, [r4, #17]
	config->master_slave_select_enable= false;
   12cc0:	7526      	strb	r6, [r4, #20]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   12cc2:	4798      	blx	r3
	config_spi_master.mux_setting = SPI_SIGNAL_MUX_SETTING_E;
   12cc4:	2380      	movs	r3, #128	; 0x80
   12cc6:	025b      	lsls	r3, r3, #9
   12cc8:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = PINMUX_PB08D_SERCOM4_PAD0;
   12cca:	4b1a      	ldr	r3, [pc, #104]	; (12d34 <setup_spi+0x1ec>)
	spi_init(&spi_main, SERCOM4, &config_spi_master);
   12ccc:	4d1a      	ldr	r5, [pc, #104]	; (12d38 <setup_spi+0x1f0>)
	config_spi_master.pinmux_pad0 = PINMUX_PB08D_SERCOM4_PAD0;
   12cce:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad2 = PINMUX_PB10D_SERCOM4_PAD2;
   12cd0:	4b1a      	ldr	r3, [pc, #104]	; (12d3c <setup_spi+0x1f4>)
	spi_init(&spi_main, SERCOM4, &config_spi_master);
   12cd2:	0022      	movs	r2, r4
	config_spi_master.pinmux_pad2 = PINMUX_PB10D_SERCOM4_PAD2;
   12cd4:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = PINMUX_PB11D_SERCOM4_PAD3;
   12cd6:	4b1a      	ldr	r3, [pc, #104]	; (12d40 <setup_spi+0x1f8>)
	spi_init(&spi_main, SERCOM4, &config_spi_master);
   12cd8:	491a      	ldr	r1, [pc, #104]	; (12d44 <setup_spi+0x1fc>)
	config_spi_master.pinmux_pad3 = PINMUX_PB11D_SERCOM4_PAD3;
   12cda:	6363      	str	r3, [r4, #52]	; 0x34
	config_spi_master.mode_specific.master.baudrate = baudRateMin;
   12cdc:	4b1a      	ldr	r3, [pc, #104]	; (12d48 <setup_spi+0x200>)
	spi_init(&spi_main, SERCOM4, &config_spi_master);
   12cde:	0028      	movs	r0, r5
	config_spi_master.mode_specific.master.baudrate = baudRateMin;
   12ce0:	61a3      	str	r3, [r4, #24]
	spi_init(&spi_main, SERCOM4, &config_spi_master);
   12ce2:	4b1a      	ldr	r3, [pc, #104]	; (12d4c <setup_spi+0x204>)
	config->pinmux_pad1 = PINMUX_DEFAULT;
   12ce4:	62e6      	str	r6, [r4, #44]	; 0x2c
   12ce6:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
   12ce8:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   12cea:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   12cec:	2b00      	cmp	r3, #0
   12cee:	d1fc      	bne.n	12cea <setup_spi+0x1a2>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   12cf0:	2102      	movs	r1, #2
   12cf2:	6813      	ldr	r3, [r2, #0]
   12cf4:	430b      	orrs	r3, r1
   12cf6:	6013      	str	r3, [r2, #0]
}
   12cf8:	b003      	add	sp, #12
   12cfa:	bc0c      	pop	{r2, r3}
   12cfc:	4690      	mov	r8, r2
   12cfe:	4699      	mov	r9, r3
   12d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12d02:	4643      	mov	r3, r8
   12d04:	619b      	str	r3, [r3, #24]
   12d06:	deff      	udf	#255	; 0xff
   12d08:	61b6      	str	r6, [r6, #24]
   12d0a:	deff      	udf	#255	; 0xff
   12d0c:	20000f6c 	.word	0x20000f6c
   12d10:	00016219 	.word	0x00016219
   12d14:	40002800 	.word	0x40002800
   12d18:	20000fe0 	.word	0x20000fe0
   12d1c:	20000f70 	.word	0x20000f70
   12d20:	20000fe4 	.word	0x20000fe4
   12d24:	20000f68 	.word	0x20000f68
   12d28:	20000fa8 	.word	0x20000fa8
   12d2c:	20000fe8 	.word	0x20000fe8
   12d30:	0001fdfd 	.word	0x0001fdfd
   12d34:	00280003 	.word	0x00280003
   12d38:	20000fac 	.word	0x20000fac
   12d3c:	002a0003 	.word	0x002a0003
   12d40:	002b0003 	.word	0x002b0003
   12d44:	42001000 	.word	0x42001000
   12d48:	000f4240 	.word	0x000f4240
   12d4c:	000154ed 	.word	0x000154ed

00012d50 <configure_usart_Laser>:
void configure_usart_Laser(void){
   12d50:	b570      	push	{r4, r5, r6, lr}
   12d52:	b090      	sub	sp, #64	; 0x40
	config->parity           = USART_PARITY_NONE;
   12d54:	4669      	mov	r1, sp
   12d56:	22ff      	movs	r2, #255	; 0xff
   12d58:	810a      	strh	r2, [r1, #8]
	config->baudrate         = 9600;
   12d5a:	2296      	movs	r2, #150	; 0x96
	config->data_order       = USART_DATAORDER_LSB;
   12d5c:	2380      	movs	r3, #128	; 0x80
	config->baudrate         = 9600;
   12d5e:	0192      	lsls	r2, r2, #6
   12d60:	9208      	str	r2, [sp, #32]
	config->receiver_enable  = true;
   12d62:	2202      	movs	r2, #2
	config->data_order       = USART_DATAORDER_LSB;
   12d64:	05db      	lsls	r3, r3, #23
   12d66:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   12d68:	2300      	movs	r3, #0
	config->receiver_enable  = true;
   12d6a:	32ff      	adds	r2, #255	; 0xff
   12d6c:	9209      	str	r2, [sp, #36]	; 0x24
	config->run_in_standby   = false;
   12d6e:	3ad5      	subs	r2, #213	; 0xd5
   12d70:	548b      	strb	r3, [r1, r2]
	config->generator_source = GCLK_GENERATOR_0;
   12d72:	3201      	adds	r2, #1
   12d74:	548b      	strb	r3, [r1, r2]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   12d76:	9301      	str	r3, [sp, #4]
	config->stopbits         = USART_STOPBITS_1;
   12d78:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   12d7a:	72cb      	strb	r3, [r1, #11]
	config->ext_clock_freq   = 0;
   12d7c:	930a      	str	r3, [sp, #40]	; 0x28
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   12d7e:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   12d80:	820b      	strh	r3, [r1, #16]
	config->receive_pulse_length                    = 19;
   12d82:	2313      	movs	r3, #19
   12d84:	768b      	strb	r3, [r1, #26]
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
   12d86:	2380      	movs	r3, #128	; 0x80
   12d88:	035b      	lsls	r3, r3, #13
   12d8a:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
   12d8c:	4b20      	ldr	r3, [pc, #128]	; (12e10 <configure_usart_Laser+0xc0>)
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   12d8e:	2200      	movs	r2, #0
   12d90:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
   12d92:	4b20      	ldr	r3, [pc, #128]	; (12e14 <configure_usart_Laser+0xc4>)
	config->lin_slave_enable      = false;
   12d94:	76ca      	strb	r2, [r1, #27]
   12d96:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
   12d98:	2301      	movs	r3, #1
   12d9a:	425b      	negs	r3, r3
	config->immediate_buffer_overflow_notification  = false;
   12d9c:	760a      	strb	r2, [r1, #24]
	config->start_frame_detection_enable            = false;
   12d9e:	770a      	strb	r2, [r1, #28]
	config->encoding_format_enable                  = false;
   12da0:	764a      	strb	r2, [r1, #25]
	config->collision_detection_enable              = false;
   12da2:	774a      	strb	r2, [r1, #29]
   12da4:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
   12da6:	930f      	str	r3, [sp, #60]	; 0x3c
   12da8:	4d1b      	ldr	r5, [pc, #108]	; (12e18 <configure_usart_Laser+0xc8>)
   12daa:	4c1c      	ldr	r4, [pc, #112]	; (12e1c <configure_usart_Laser+0xcc>)
   12dac:	e001      	b.n	12db2 <configure_usart_Laser+0x62>
	}while((usart_status != STATUS_OK) && (usart_status != STATUS_ERR_DENIED) );
   12dae:	281c      	cmp	r0, #28
   12db0:	d005      	beq.n	12dbe <configure_usart_Laser+0x6e>
		usart_status = usart_init(&usart_laser,	SERCOM1, &config_usart) ;
   12db2:	466a      	mov	r2, sp
   12db4:	491a      	ldr	r1, [pc, #104]	; (12e20 <configure_usart_Laser+0xd0>)
   12db6:	0028      	movs	r0, r5
   12db8:	47a0      	blx	r4
	}while((usart_status != STATUS_OK) && (usart_status != STATUS_ERR_DENIED) );
   12dba:	2800      	cmp	r0, #0
   12dbc:	d1f7      	bne.n	12dae <configure_usart_Laser+0x5e>
	SercomUsart *const usart_hw = &(module->hw->USART);
   12dbe:	682e      	ldr	r6, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   12dc0:	4b18      	ldr	r3, [pc, #96]	; (12e24 <configure_usart_Laser+0xd4>)
   12dc2:	0030      	movs	r0, r6
   12dc4:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12dc6:	231f      	movs	r3, #31
   12dc8:	4018      	ands	r0, r3
   12dca:	3b1e      	subs	r3, #30
   12dcc:	4083      	lsls	r3, r0
   12dce:	4a16      	ldr	r2, [pc, #88]	; (12e28 <configure_usart_Laser+0xd8>)
   12dd0:	6013      	str	r3, [r2, #0]
   12dd2:	682b      	ldr	r3, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   12dd4:	69dc      	ldr	r4, [r3, #28]
	while (usart_is_syncing(module)) {
   12dd6:	2c00      	cmp	r4, #0
   12dd8:	d1fc      	bne.n	12dd4 <configure_usart_Laser+0x84>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   12dda:	2202      	movs	r2, #2
   12ddc:	6833      	ldr	r3, [r6, #0]
	usart_register_callback(&usart_laser,writeLaserCallback, USART_CALLBACK_BUFFER_TRANSMITTED);
   12dde:	0028      	movs	r0, r5
   12de0:	4313      	orrs	r3, r2
   12de2:	6033      	str	r3, [r6, #0]
   12de4:	2200      	movs	r2, #0
   12de6:	4e11      	ldr	r6, [pc, #68]	; (12e2c <configure_usart_Laser+0xdc>)
   12de8:	4911      	ldr	r1, [pc, #68]	; (12e30 <configure_usart_Laser+0xe0>)
   12dea:	47b0      	blx	r6
	usart_register_callback(&usart_laser,readLaserCallback, USART_CALLBACK_BUFFER_RECEIVED);
   12dec:	0028      	movs	r0, r5
   12dee:	2201      	movs	r2, #1
   12df0:	4910      	ldr	r1, [pc, #64]	; (12e34 <configure_usart_Laser+0xe4>)
   12df2:	47b0      	blx	r6
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   12df4:	2231      	movs	r2, #49	; 0x31
   12df6:	2103      	movs	r1, #3
   12df8:	5cab      	ldrb	r3, [r5, r2]
	usart_read_job(&usart_laser, rxBufferLaser); // 
   12dfa:	0028      	movs	r0, r5
   12dfc:	430b      	orrs	r3, r1
   12dfe:	54ab      	strb	r3, [r5, r2]
	rxBufferLaserIndex = 0;
   12e00:	4b0d      	ldr	r3, [pc, #52]	; (12e38 <configure_usart_Laser+0xe8>)
	usart_read_job(&usart_laser, rxBufferLaser); // 
   12e02:	490e      	ldr	r1, [pc, #56]	; (12e3c <configure_usart_Laser+0xec>)
	rxBufferLaserIndex = 0;
   12e04:	701c      	strb	r4, [r3, #0]
	usart_read_job(&usart_laser, rxBufferLaser); // 
   12e06:	4b0e      	ldr	r3, [pc, #56]	; (12e40 <configure_usart_Laser+0xf0>)
   12e08:	4798      	blx	r3
}
   12e0a:	b010      	add	sp, #64	; 0x40
   12e0c:	bd70      	pop	{r4, r5, r6, pc}
   12e0e:	46c0      	nop			; (mov r8, r8)
   12e10:	00100002 	.word	0x00100002
   12e14:	00110002 	.word	0x00110002
   12e18:	20000f74 	.word	0x20000f74
   12e1c:	000151c1 	.word	0x000151c1
   12e20:	42000400 	.word	0x42000400
   12e24:	0000fe91 	.word	0x0000fe91
   12e28:	e000e100 	.word	0xe000e100
   12e2c:	0000ff21 	.word	0x0000ff21
   12e30:	000128cd 	.word	0x000128cd
   12e34:	000129a5 	.word	0x000129a5
   12e38:	2000544c 	.word	0x2000544c
   12e3c:	20005568 	.word	0x20005568
   12e40:	0000ff39 	.word	0x0000ff39

00012e44 <configure_usart_BLE>:
void configure_usart_BLE(void){
   12e44:	b530      	push	{r4, r5, lr}
   12e46:	b091      	sub	sp, #68	; 0x44
	config->parity           = USART_PARITY_NONE;
   12e48:	4669      	mov	r1, sp
   12e4a:	22ff      	movs	r2, #255	; 0xff
	config->data_order       = USART_DATAORDER_LSB;
   12e4c:	2380      	movs	r3, #128	; 0x80
	config->parity           = USART_PARITY_NONE;
   12e4e:	810a      	strh	r2, [r1, #8]
	config->receiver_enable  = true;
   12e50:	2202      	movs	r2, #2
	config->data_order       = USART_DATAORDER_LSB;
   12e52:	05db      	lsls	r3, r3, #23
   12e54:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   12e56:	2300      	movs	r3, #0
	config->receiver_enable  = true;
   12e58:	32ff      	adds	r2, #255	; 0xff
   12e5a:	9209      	str	r2, [sp, #36]	; 0x24
	config->run_in_standby   = false;
   12e5c:	3ad5      	subs	r2, #213	; 0xd5
   12e5e:	548b      	strb	r3, [r1, r2]
	config->generator_source = GCLK_GENERATOR_0;
   12e60:	3201      	adds	r2, #1
   12e62:	548b      	strb	r3, [r1, r2]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   12e64:	9301      	str	r3, [sp, #4]
	config->stopbits         = USART_STOPBITS_1;
   12e66:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   12e68:	72cb      	strb	r3, [r1, #11]
	config->ext_clock_freq   = 0;
   12e6a:	930a      	str	r3, [sp, #40]	; 0x28
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   12e6c:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   12e6e:	820b      	strh	r3, [r1, #16]
	config->receive_pulse_length                    = 19;
   12e70:	2313      	movs	r3, #19
   12e72:	768b      	strb	r3, [r1, #26]
	config_usart.baudrate    = 115200;
   12e74:	23e1      	movs	r3, #225	; 0xe1
   12e76:	025b      	lsls	r3, r3, #9
   12e78:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = USART_RX_1_TX_0_RTS_2_CTS_3;
   12e7a:	2390      	movs	r3, #144	; 0x90
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   12e7c:	2200      	movs	r2, #0
   12e7e:	035b      	lsls	r3, r3, #13
   12e80:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   12e82:	4b25      	ldr	r3, [pc, #148]	; (12f18 <configure_usart_BLE+0xd4>)
	config->lin_slave_enable      = false;
   12e84:	76ca      	strb	r2, [r1, #27]
   12e86:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   12e88:	4b24      	ldr	r3, [pc, #144]	; (12f1c <configure_usart_BLE+0xd8>)
	config->immediate_buffer_overflow_notification  = false;
   12e8a:	760a      	strb	r2, [r1, #24]
   12e8c:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_PA10C_SERCOM0_PAD2;
   12e8e:	4b24      	ldr	r3, [pc, #144]	; (12f20 <configure_usart_BLE+0xdc>)
	config->start_frame_detection_enable            = false;
   12e90:	770a      	strb	r2, [r1, #28]
   12e92:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_PA11C_SERCOM0_PAD3;
   12e94:	4b23      	ldr	r3, [pc, #140]	; (12f24 <configure_usart_BLE+0xe0>)
	config->encoding_format_enable                  = false;
   12e96:	764a      	strb	r2, [r1, #25]
	config->collision_detection_enable              = false;
   12e98:	774a      	strb	r2, [r1, #29]
   12e9a:	930f      	str	r3, [sp, #60]	; 0x3c
   12e9c:	4c22      	ldr	r4, [pc, #136]	; (12f28 <configure_usart_BLE+0xe4>)
   12e9e:	4d23      	ldr	r5, [pc, #140]	; (12f2c <configure_usart_BLE+0xe8>)
   12ea0:	e001      	b.n	12ea6 <configure_usart_BLE+0x62>
	}while((usart_status != STATUS_OK) && (usart_status != STATUS_ERR_DENIED) );
   12ea2:	281c      	cmp	r0, #28
   12ea4:	d006      	beq.n	12eb4 <configure_usart_BLE+0x70>
		usart_status = usart_init(&usart_BLE,	SERCOM0, &config_usart) ;
   12ea6:	2184      	movs	r1, #132	; 0x84
   12ea8:	466a      	mov	r2, sp
   12eaa:	05c9      	lsls	r1, r1, #23
   12eac:	0020      	movs	r0, r4
   12eae:	47a8      	blx	r5
	}while((usart_status != STATUS_OK) && (usart_status != STATUS_ERR_DENIED) );
   12eb0:	2800      	cmp	r0, #0
   12eb2:	d1f6      	bne.n	12ea2 <configure_usart_BLE+0x5e>
	SercomUsart *const usart_hw = &(module->hw->USART);
   12eb4:	6825      	ldr	r5, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   12eb6:	4b1e      	ldr	r3, [pc, #120]	; (12f30 <configure_usart_BLE+0xec>)
   12eb8:	0028      	movs	r0, r5
   12eba:	4798      	blx	r3
   12ebc:	231f      	movs	r3, #31
   12ebe:	4018      	ands	r0, r3
   12ec0:	3b1e      	subs	r3, #30
   12ec2:	4083      	lsls	r3, r0
   12ec4:	4a1b      	ldr	r2, [pc, #108]	; (12f34 <configure_usart_BLE+0xf0>)
   12ec6:	6013      	str	r3, [r2, #0]
   12ec8:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
   12eca:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   12ecc:	2b00      	cmp	r3, #0
   12ece:	d1fc      	bne.n	12eca <configure_usart_BLE+0x86>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   12ed0:	2202      	movs	r2, #2
   12ed2:	682b      	ldr	r3, [r5, #0]
	usart_register_callback(&usart_BLE,writeBleCallback, USART_CALLBACK_BUFFER_TRANSMITTED);
   12ed4:	4918      	ldr	r1, [pc, #96]	; (12f38 <configure_usart_BLE+0xf4>)
   12ed6:	4313      	orrs	r3, r2
   12ed8:	602b      	str	r3, [r5, #0]
   12eda:	2200      	movs	r2, #0
   12edc:	0020      	movs	r0, r4
   12ede:	4d17      	ldr	r5, [pc, #92]	; (12f3c <configure_usart_BLE+0xf8>)
   12ee0:	47a8      	blx	r5
	usart_register_callback(&usart_BLE,readBleCallback, USART_CALLBACK_BUFFER_RECEIVED);
   12ee2:	2201      	movs	r2, #1
   12ee4:	4916      	ldr	r1, [pc, #88]	; (12f40 <configure_usart_BLE+0xfc>)
   12ee6:	0020      	movs	r0, r4
   12ee8:	47a8      	blx	r5
   12eea:	2231      	movs	r2, #49	; 0x31
   12eec:	2103      	movs	r1, #3
   12eee:	5ca3      	ldrb	r3, [r4, r2]
   12ef0:	430b      	orrs	r3, r1
   12ef2:	54a3      	strb	r3, [r4, r2]
	for (i=0;i<UART_BUFFER_LENGTH;i++){
   12ef4:	2300      	movs	r3, #0
		rxBufferBle[i] = 0;
   12ef6:	2200      	movs	r2, #0
   12ef8:	4912      	ldr	r1, [pc, #72]	; (12f44 <configure_usart_BLE+0x100>)
   12efa:	54ca      	strb	r2, [r1, r3]
	for (i=0;i<UART_BUFFER_LENGTH;i++){
   12efc:	3301      	adds	r3, #1
   12efe:	2b64      	cmp	r3, #100	; 0x64
   12f00:	d1fb      	bne.n	12efa <configure_usart_BLE+0xb6>
	rxBufferBleIndex = 0;
   12f02:	4b11      	ldr	r3, [pc, #68]	; (12f48 <configure_usart_BLE+0x104>)
	usart_read_job(&usart_BLE, &bleRcvByte);
   12f04:	4911      	ldr	r1, [pc, #68]	; (12f4c <configure_usart_BLE+0x108>)
	rxBufferBleIndex = 0;
   12f06:	701a      	strb	r2, [r3, #0]
	BleReceiveComplete = false;
   12f08:	4b11      	ldr	r3, [pc, #68]	; (12f50 <configure_usart_BLE+0x10c>)
	usart_read_job(&usart_BLE, &bleRcvByte);
   12f0a:	0020      	movs	r0, r4
	BleReceiveComplete = false;
   12f0c:	701a      	strb	r2, [r3, #0]
	usart_read_job(&usart_BLE, &bleRcvByte);
   12f0e:	4b11      	ldr	r3, [pc, #68]	; (12f54 <configure_usart_BLE+0x110>)
   12f10:	4798      	blx	r3
}
   12f12:	b011      	add	sp, #68	; 0x44
   12f14:	bd30      	pop	{r4, r5, pc}
   12f16:	46c0      	nop			; (mov r8, r8)
   12f18:	00080002 	.word	0x00080002
   12f1c:	00090002 	.word	0x00090002
   12f20:	000a0002 	.word	0x000a0002
   12f24:	000b0002 	.word	0x000b0002
   12f28:	20001020 	.word	0x20001020
   12f2c:	000151c1 	.word	0x000151c1
   12f30:	0000fe91 	.word	0x0000fe91
   12f34:	e000e100 	.word	0xe000e100
   12f38:	000128d9 	.word	0x000128d9
   12f3c:	0000ff21 	.word	0x0000ff21
   12f40:	000128e5 	.word	0x000128e5
   12f44:	20003f78 	.word	0x20003f78
   12f48:	20003928 	.word	0x20003928
   12f4c:	2000146c 	.word	0x2000146c
   12f50:	20000ed8 	.word	0x20000ed8
   12f54:	0000ff39 	.word	0x0000ff39

00012f58 <BLE_usart_isolate>:
void BLE_usart_isolate(void){
   12f58:	b570      	push	{r4, r5, r6, lr}
	SercomUsart *const usart_hw = &(module->hw->USART);
   12f5a:	4d1f      	ldr	r5, [pc, #124]	; (12fd8 <BLE_usart_isolate+0x80>)
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   12f5c:	4b1f      	ldr	r3, [pc, #124]	; (12fdc <BLE_usart_isolate+0x84>)
	SercomUsart *const usart_hw = &(module->hw->USART);
   12f5e:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   12f60:	0020      	movs	r0, r4
   12f62:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12f64:	231f      	movs	r3, #31
   12f66:	4018      	ands	r0, r3
   12f68:	3b1e      	subs	r3, #30
   12f6a:	2280      	movs	r2, #128	; 0x80
   12f6c:	4083      	lsls	r3, r0
   12f6e:	491c      	ldr	r1, [pc, #112]	; (12fe0 <BLE_usart_isolate+0x88>)
   12f70:	508b      	str	r3, [r1, r2]
   12f72:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   12f74:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   12f76:	2b00      	cmp	r3, #0
   12f78:	d1fc      	bne.n	12f74 <BLE_usart_isolate+0x1c>
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
   12f7a:	2202      	movs	r2, #2
   12f7c:	6823      	ldr	r3, [r4, #0]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   12f7e:	2002      	movs	r0, #2
   12f80:	4393      	bics	r3, r2
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   12f82:	2280      	movs	r2, #128	; 0x80
   12f84:	6023      	str	r3, [r4, #0]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   12f86:	244a      	movs	r4, #74	; 0x4a
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   12f88:	4b16      	ldr	r3, [pc, #88]	; (12fe4 <BLE_usart_isolate+0x8c>)
   12f8a:	00d2      	lsls	r2, r2, #3
   12f8c:	609a      	str	r2, [r3, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   12f8e:	5d19      	ldrb	r1, [r3, r4]
   12f90:	4301      	orrs	r1, r0
   12f92:	b2c9      	uxtb	r1, r1
   12f94:	5519      	strb	r1, [r3, r4]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   12f96:	615a      	str	r2, [r3, #20]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   12f98:	2280      	movs	r2, #128	; 0x80
   12f9a:	0112      	lsls	r2, r2, #4
   12f9c:	605a      	str	r2, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   12f9e:	224b      	movs	r2, #75	; 0x4b
   12fa0:	5c99      	ldrb	r1, [r3, r2]
   12fa2:	4301      	orrs	r1, r0
   12fa4:	b2c9      	uxtb	r1, r1
   12fa6:	5499      	strb	r1, [r3, r2]
	base->WRCONFIG.reg =
   12fa8:	4a0f      	ldr	r2, [pc, #60]	; (12fe8 <BLE_usart_isolate+0x90>)
   12faa:	4910      	ldr	r1, [pc, #64]	; (12fec <BLE_usart_isolate+0x94>)
   12fac:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   12fae:	4a10      	ldr	r2, [pc, #64]	; (12ff0 <BLE_usart_isolate+0x98>)
   12fb0:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   12fb2:	6299      	str	r1, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   12fb4:	629a      	str	r2, [r3, #40]	; 0x28
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   12fb6:	2280      	movs	r2, #128	; 0x80
   12fb8:	0052      	lsls	r2, r2, #1
   12fba:	605a      	str	r2, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   12fbc:	3ab8      	subs	r2, #184	; 0xb8
   12fbe:	5c99      	ldrb	r1, [r3, r2]
   12fc0:	4301      	orrs	r1, r0
   12fc2:	b2c9      	uxtb	r1, r1
   12fc4:	5499      	strb	r1, [r3, r2]
   12fc6:	2149      	movs	r1, #73	; 0x49
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   12fc8:	32b9      	adds	r2, #185	; 0xb9
   12fca:	32ff      	adds	r2, #255	; 0xff
   12fcc:	605a      	str	r2, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   12fce:	5c5a      	ldrb	r2, [r3, r1]
   12fd0:	4302      	orrs	r2, r0
   12fd2:	b2d2      	uxtb	r2, r2
   12fd4:	545a      	strb	r2, [r3, r1]
}
   12fd6:	bd70      	pop	{r4, r5, r6, pc}
   12fd8:	20001020 	.word	0x20001020
   12fdc:	0000fe91 	.word	0x0000fe91
   12fe0:	e000e100 	.word	0xe000e100
   12fe4:	40002800 	.word	0x40002800
   12fe8:	50020100 	.word	0x50020100
   12fec:	50020200 	.word	0x50020200
   12ff0:	d0020000 	.word	0xd0020000

00012ff4 <writeLaser>:
enum status_code writeLaser(uint8_t *tx_data, uint16_t length){
   12ff4:	000a      	movs	r2, r1
	LaserTransmitComplete=false;
   12ff6:	2100      	movs	r1, #0
enum status_code writeLaser(uint8_t *tx_data, uint16_t length){
   12ff8:	b510      	push	{r4, lr}
	LaserTransmitComplete=false;
   12ffa:	4b03      	ldr	r3, [pc, #12]	; (13008 <writeLaser+0x14>)
   12ffc:	7019      	strb	r1, [r3, #0]
	writeStatus = usart_write_buffer_job(&usart_laser, tx_data, length);
   12ffe:	0001      	movs	r1, r0
   13000:	4b02      	ldr	r3, [pc, #8]	; (1300c <writeLaser+0x18>)
   13002:	4803      	ldr	r0, [pc, #12]	; (13010 <writeLaser+0x1c>)
   13004:	4798      	blx	r3
}
   13006:	bd10      	pop	{r4, pc}
   13008:	20000edb 	.word	0x20000edb
   1300c:	0000ff89 	.word	0x0000ff89
   13010:	20000f74 	.word	0x20000f74

00013014 <writeBle>:
enum status_code writeBle(uint8_t *tx_data, uint16_t length){
   13014:	000a      	movs	r2, r1
	BleTransmitComplete=false;
   13016:	2100      	movs	r1, #0
enum status_code writeBle(uint8_t *tx_data, uint16_t length){
   13018:	b510      	push	{r4, lr}
	BleTransmitComplete=false;
   1301a:	4b03      	ldr	r3, [pc, #12]	; (13028 <writeBle+0x14>)
   1301c:	7019      	strb	r1, [r3, #0]
	writeStatus = usart_write_buffer_job(&usart_BLE, tx_data, length);
   1301e:	0001      	movs	r1, r0
   13020:	4b02      	ldr	r3, [pc, #8]	; (1302c <writeBle+0x18>)
   13022:	4803      	ldr	r0, [pc, #12]	; (13030 <writeBle+0x1c>)
   13024:	4798      	blx	r3
}	
   13026:	bd10      	pop	{r4, pc}
   13028:	20000ed9 	.word	0x20000ed9
   1302c:	0000ff89 	.word	0x0000ff89
   13030:	20001020 	.word	0x20001020

00013034 <isLaserTransmitComplete>:
	return LaserTransmitComplete;
   13034:	4b01      	ldr	r3, [pc, #4]	; (1303c <isLaserTransmitComplete+0x8>)
   13036:	7818      	ldrb	r0, [r3, #0]
   13038:	b2c0      	uxtb	r0, r0
}
   1303a:	4770      	bx	lr
   1303c:	20000edb 	.word	0x20000edb

00013040 <isLaserReceiveComplete>:
	return LaserReceiveComplete;
   13040:	4b01      	ldr	r3, [pc, #4]	; (13048 <isLaserReceiveComplete+0x8>)
   13042:	7818      	ldrb	r0, [r3, #0]
   13044:	b2c0      	uxtb	r0, r0
}
   13046:	4770      	bx	lr
   13048:	20000eda 	.word	0x20000eda

0001304c <isBleTransmitComplete>:
	return BleTransmitComplete;
   1304c:	4b01      	ldr	r3, [pc, #4]	; (13054 <isBleTransmitComplete+0x8>)
   1304e:	7818      	ldrb	r0, [r3, #0]
   13050:	b2c0      	uxtb	r0, r0
}
   13052:	4770      	bx	lr
   13054:	20000ed9 	.word	0x20000ed9

00013058 <isBleReceiveComplete>:
	return BleReceiveComplete;
   13058:	4b01      	ldr	r3, [pc, #4]	; (13060 <isBleReceiveComplete+0x8>)
   1305a:	7818      	ldrb	r0, [r3, #0]
   1305c:	b2c0      	uxtb	r0, r0
}
   1305e:	4770      	bx	lr
   13060:	20000ed8 	.word	0x20000ed8

00013064 <rxBufferLaserClear>:
	laserCurrentMessage = NONE;
   13064:	2300      	movs	r3, #0
   13066:	4a03      	ldr	r2, [pc, #12]	; (13074 <rxBufferLaserClear+0x10>)
   13068:	7013      	strb	r3, [r2, #0]
	LaserReceiveComplete=false;
   1306a:	4a03      	ldr	r2, [pc, #12]	; (13078 <rxBufferLaserClear+0x14>)
   1306c:	7013      	strb	r3, [r2, #0]
	rxBufferLaserIndex = 0;
   1306e:	4a03      	ldr	r2, [pc, #12]	; (1307c <rxBufferLaserClear+0x18>)
   13070:	7013      	strb	r3, [r2, #0]
}
   13072:	4770      	bx	lr
   13074:	2000146b 	.word	0x2000146b
   13078:	20000eda 	.word	0x20000eda
   1307c:	2000544c 	.word	0x2000544c

00013080 <rxBufferBleClear>:
	for (i=0;i<UART_BUFFER_LENGTH;i++){
   13080:	2300      	movs	r3, #0
		rxBufferBle[i] = 0;
   13082:	2200      	movs	r2, #0
   13084:	4904      	ldr	r1, [pc, #16]	; (13098 <rxBufferBleClear+0x18>)
   13086:	54ca      	strb	r2, [r1, r3]
	for (i=0;i<UART_BUFFER_LENGTH;i++){
   13088:	3301      	adds	r3, #1
   1308a:	2b64      	cmp	r3, #100	; 0x64
   1308c:	d1fb      	bne.n	13086 <rxBufferBleClear+0x6>
	rxBufferBleIndex = 0;
   1308e:	4b03      	ldr	r3, [pc, #12]	; (1309c <rxBufferBleClear+0x1c>)
   13090:	701a      	strb	r2, [r3, #0]
	BleReceiveComplete = false;
   13092:	4b03      	ldr	r3, [pc, #12]	; (130a0 <rxBufferBleClear+0x20>)
   13094:	701a      	strb	r2, [r3, #0]
}
   13096:	4770      	bx	lr
   13098:	20003f78 	.word	0x20003f78
   1309c:	20003928 	.word	0x20003928
   130a0:	20000ed8 	.word	0x20000ed8

000130a4 <laserMessageType>:
enum LASER_MESSAGE_TYPE laserMessageType(void){
   130a4:	2300      	movs	r3, #0
   130a6:	4907      	ldr	r1, [pc, #28]	; (130c4 <laserMessageType+0x20>)
   130a8:	e002      	b.n	130b0 <laserMessageType+0xc>
   130aa:	3301      	adds	r3, #1
	for(i=0;i<sizeof(rxBufferLaser);i++){
   130ac:	2b64      	cmp	r3, #100	; 0x64
   130ae:	d006      	beq.n	130be <laserMessageType+0x1a>
		if(rxBufferLaser[i]==0xAA){
   130b0:	5cca      	ldrb	r2, [r1, r3]
   130b2:	2aaa      	cmp	r2, #170	; 0xaa
   130b4:	d1f9      	bne.n	130aa <laserMessageType+0x6>
			messType =  rxBufferLaser[i+2];
   130b6:	3302      	adds	r3, #2
   130b8:	5cc8      	ldrb	r0, [r1, r3]
   130ba:	b2c0      	uxtb	r0, r0
			break;
		}
		
	}
	return messType;
}
   130bc:	4770      	bx	lr
	enum LASER_MESSAGE_TYPE messType = 0;
   130be:	2000      	movs	r0, #0
   130c0:	e7fc      	b.n	130bc <laserMessageType+0x18>
   130c2:	46c0      	nop			; (mov r8, r8)
   130c4:	20005568 	.word	0x20005568

000130c8 <isBleCommEnabled>:


bool isBleCommEnabled(void){
	return (usart_BLE.hw->USART.CTRLA.reg & SERCOM_USART_CTRLA_ENABLE);
   130c8:	4b02      	ldr	r3, [pc, #8]	; (130d4 <isBleCommEnabled+0xc>)
   130ca:	681b      	ldr	r3, [r3, #0]
   130cc:	6818      	ldr	r0, [r3, #0]
   130ce:	0780      	lsls	r0, r0, #30
   130d0:	0fc0      	lsrs	r0, r0, #31
}
   130d2:	4770      	bx	lr
   130d4:	20001020 	.word	0x20001020

000130d8 <configure_i2c_master>:
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   130d8:	2364      	movs	r3, #100	; 0x64
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   130da:	2180      	movs	r1, #128	; 0x80


//I2C
//************************************************
void configure_i2c_master(void)
{
   130dc:	b530      	push	{r4, r5, lr}
   130de:	b08f      	sub	sp, #60	; 0x3c
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   130e0:	9301      	str	r3, [sp, #4]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   130e2:	4b1f      	ldr	r3, [pc, #124]	; (13160 <configure_i2c_master+0x88>)
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   130e4:	aa01      	add	r2, sp, #4
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   130e6:	0389      	lsls	r1, r1, #14
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   130e8:	6053      	str	r3, [r2, #4]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   130ea:	6111      	str	r1, [r2, #16]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   130ec:	2300      	movs	r3, #0
	config->scl_low_timeout  = false;
   130ee:	2124      	movs	r1, #36	; 0x24
   130f0:	5453      	strb	r3, [r2, r1]
	config->scl_stretch_only_after_ack_bit = false;
   130f2:	3108      	adds	r1, #8
   130f4:	5453      	strb	r3, [r2, r1]
	config->slave_scl_low_extend_timeout   = false;
   130f6:	3101      	adds	r1, #1
   130f8:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
   130fa:	3101      	adds	r1, #1
   130fc:	5453      	strb	r3, [r2, r1]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   130fe:	6093      	str	r3, [r2, #8]
	config->generator_source = GCLK_GENERATOR_0;
   13100:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
   13102:	7613      	strb	r3, [r2, #24]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   13104:	6293      	str	r3, [r2, #40]	; 0x28
	config->sda_scl_rise_time_ns = 215;
   13106:	33d7      	adds	r3, #215	; 0xd7
   13108:	8613      	strh	r3, [r2, #48]	; 0x30
	config->unknown_bus_state_timeout = 65535;
   1310a:	4b16      	ldr	r3, [pc, #88]	; (13164 <configure_i2c_master+0x8c>)
	/* Change buffer timeout to something longer. */
	config_i2c_master.generator_source = GCLK_FOR_I2C;
	config_i2c_master.buffer_timeout = 10000;
	config_i2c_master.pinmux_pad0    = PINMUX_PA12C_SERCOM2_PAD0;
	config_i2c_master.pinmux_pad1    = PINMUX_PA13C_SERCOM2_PAD1;
	i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master);
   1310c:	4d16      	ldr	r5, [pc, #88]	; (13168 <configure_i2c_master+0x90>)
   1310e:	9306      	str	r3, [sp, #24]
	config_i2c_master.pinmux_pad0    = PINMUX_PA12C_SERCOM2_PAD0;
   13110:	4b16      	ldr	r3, [pc, #88]	; (1316c <configure_i2c_master+0x94>)
	i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master);
   13112:	4917      	ldr	r1, [pc, #92]	; (13170 <configure_i2c_master+0x98>)
	config_i2c_master.pinmux_pad0    = PINMUX_PA12C_SERCOM2_PAD0;
   13114:	61d3      	str	r3, [r2, #28]
	config_i2c_master.pinmux_pad1    = PINMUX_PA13C_SERCOM2_PAD1;
   13116:	4b17      	ldr	r3, [pc, #92]	; (13174 <configure_i2c_master+0x9c>)
	i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master);
   13118:	0028      	movs	r0, r5
	config_i2c_master.pinmux_pad1    = PINMUX_PA13C_SERCOM2_PAD1;
   1311a:	6213      	str	r3, [r2, #32]
	i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master);
   1311c:	4b16      	ldr	r3, [pc, #88]	; (13178 <configure_i2c_master+0xa0>)
   1311e:	4798      	blx	r3
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   13120:	2207      	movs	r2, #7
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13122:	682c      	ldr	r4, [r5, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   13124:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
   13126:	421a      	tst	r2, r3
   13128:	d1fc      	bne.n	13124 <configure_i2c_master+0x4c>
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   1312a:	2202      	movs	r2, #2
   1312c:	6823      	ldr	r3, [r4, #0]
   1312e:	4313      	orrs	r3, r2
   13130:	6023      	str	r3, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   13132:	6828      	ldr	r0, [r5, #0]
   13134:	4b11      	ldr	r3, [pc, #68]	; (1317c <configure_i2c_master+0xa4>)
   13136:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   13138:	231f      	movs	r3, #31
   1313a:	4018      	ands	r0, r3
   1313c:	3b1e      	subs	r3, #30
   1313e:	4083      	lsls	r3, r0
   13140:	4a0f      	ldr	r2, [pc, #60]	; (13180 <configure_i2c_master+0xa8>)
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   13142:	2110      	movs	r1, #16
   13144:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   13146:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
   13148:	2300      	movs	r3, #0
   1314a:	e002      	b.n	13152 <configure_i2c_master+0x7a>
		timeout_counter++;
   1314c:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   1314e:	4283      	cmp	r3, r0
   13150:	d204      	bcs.n	1315c <configure_i2c_master+0x84>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   13152:	8b62      	ldrh	r2, [r4, #26]
   13154:	4211      	tst	r1, r2
   13156:	d0f9      	beq.n	1314c <configure_i2c_master+0x74>
	i2c_master_enable(&i2c_master_instance);
}
   13158:	b00f      	add	sp, #60	; 0x3c
   1315a:	bd30      	pop	{r4, r5, pc}
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   1315c:	8361      	strh	r1, [r4, #26]
   1315e:	e7fb      	b.n	13158 <configure_i2c_master+0x80>
   13160:	00000d48 	.word	0x00000d48
   13164:	2710ffff 	.word	0x2710ffff
   13168:	20000fb8 	.word	0x20000fb8
   1316c:	000c0002 	.word	0x000c0002
   13170:	42000800 	.word	0x42000800
   13174:	000d0002 	.word	0x000d0002
   13178:	0000f841 	.word	0x0000f841
   1317c:	0000fe91 	.word	0x0000fe91
   13180:	e000e100 	.word	0xe000e100

00013184 <enable_comms>:
void enable_comms(void){
   13184:	b510      	push	{r4, lr}
	setup_spi();
   13186:	4b04      	ldr	r3, [pc, #16]	; (13198 <enable_comms+0x14>)
   13188:	4798      	blx	r3
	configure_i2c_master();
   1318a:	4b04      	ldr	r3, [pc, #16]	; (1319c <enable_comms+0x18>)
   1318c:	4798      	blx	r3
	configure_usart_Laser();
   1318e:	4b04      	ldr	r3, [pc, #16]	; (131a0 <enable_comms+0x1c>)
   13190:	4798      	blx	r3
	configure_usart_BLE();
   13192:	4b04      	ldr	r3, [pc, #16]	; (131a4 <enable_comms+0x20>)
   13194:	4798      	blx	r3
}
   13196:	bd10      	pop	{r4, pc}
   13198:	00012b49 	.word	0x00012b49
   1319c:	000130d9 	.word	0x000130d9
   131a0:	00012d51 	.word	0x00012d51
   131a4:	00012e45 	.word	0x00012e45

000131a8 <i2c_read_write>:

void i2c_read_write(enum read_write mode, uint8_t device, uint8_t *buf, uint8_t length){
   131a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   131aa:	46ce      	mov	lr, r9
   131ac:	4647      	mov	r7, r8
   131ae:	4690      	mov	r8, r2
   131b0:	b580      	push	{r7, lr}
   131b2:	b085      	sub	sp, #20
	//first character in buffer is read/write register address
	uint16_t limit=100;
	uint16_t timeout;
	struct i2c_master_packet packet = {
   131b4:	ad01      	add	r5, sp, #4
void i2c_read_write(enum read_write mode, uint8_t device, uint8_t *buf, uint8_t length){
   131b6:	000e      	movs	r6, r1
   131b8:	0004      	movs	r4, r0
   131ba:	4699      	mov	r9, r3
	struct i2c_master_packet packet = {
   131bc:	220c      	movs	r2, #12
   131be:	4b1f      	ldr	r3, [pc, #124]	; (1323c <i2c_read_write+0x94>)
   131c0:	2100      	movs	r1, #0
   131c2:	0028      	movs	r0, r5
   131c4:	4798      	blx	r3
   131c6:	4643      	mov	r3, r8
   131c8:	802e      	strh	r6, [r5, #0]
   131ca:	606b      	str	r3, [r5, #4]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	
	if (mode==readp){
   131cc:	2c00      	cmp	r4, #0
   131ce:	d124      	bne.n	1321a <i2c_read_write+0x72>
		timeout=0;
		packet.data_length=1;
   131d0:	2301      	movs	r3, #1
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   131d2:	3465      	adds	r4, #101	; 0x65
		packet.data_length=1;
   131d4:	806b      	strh	r3, [r5, #2]
   131d6:	4e1a      	ldr	r6, [pc, #104]	; (13240 <i2c_read_write+0x98>)
   131d8:	4f1a      	ldr	r7, [pc, #104]	; (13244 <i2c_read_write+0x9c>)
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   131da:	e003      	b.n	131e4 <i2c_read_write+0x3c>
   131dc:	3c01      	subs	r4, #1
   131de:	b2a4      	uxth	r4, r4
			if (timeout++ == limit) {   break;   }
   131e0:	2c00      	cmp	r4, #0
   131e2:	d004      	beq.n	131ee <i2c_read_write+0x46>
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   131e4:	0029      	movs	r1, r5
   131e6:	0030      	movs	r0, r6
   131e8:	47b8      	blx	r7
   131ea:	2800      	cmp	r0, #0
   131ec:	d1f6      	bne.n	131dc <i2c_read_write+0x34>
		}
		timeout=0;
		packet.data=buf+1;
   131ee:	4643      	mov	r3, r8
   131f0:	3301      	adds	r3, #1
   131f2:	606b      	str	r3, [r5, #4]
		packet.data_length=length;
   131f4:	464b      	mov	r3, r9
		while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   131f6:	2465      	movs	r4, #101	; 0x65
		packet.data_length=length;
   131f8:	806b      	strh	r3, [r5, #2]
   131fa:	4f13      	ldr	r7, [pc, #76]	; (13248 <i2c_read_write+0xa0>)
		while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   131fc:	e003      	b.n	13206 <i2c_read_write+0x5e>
   131fe:	3c01      	subs	r4, #1
   13200:	b2a4      	uxth	r4, r4
			if (timeout++ == limit) {   break;   }
   13202:	2c00      	cmp	r4, #0
   13204:	d004      	beq.n	13210 <i2c_read_write+0x68>
		while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   13206:	0029      	movs	r1, r5
   13208:	0030      	movs	r0, r6
   1320a:	47b8      	blx	r7
   1320c:	2800      	cmp	r0, #0
   1320e:	d1f6      	bne.n	131fe <i2c_read_write+0x56>
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
			if (timeout++ == limit) {   break;   }
		}
	}
	
}
   13210:	b005      	add	sp, #20
   13212:	bc0c      	pop	{r2, r3}
   13214:	4690      	mov	r8, r2
   13216:	4699      	mov	r9, r3
   13218:	bdf0      	pop	{r4, r5, r6, r7, pc}
		packet.data_length=length;
   1321a:	464b      	mov	r3, r9
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   1321c:	2465      	movs	r4, #101	; 0x65
		packet.data_length=length;
   1321e:	806b      	strh	r3, [r5, #2]
   13220:	4e07      	ldr	r6, [pc, #28]	; (13240 <i2c_read_write+0x98>)
   13222:	4f08      	ldr	r7, [pc, #32]	; (13244 <i2c_read_write+0x9c>)
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   13224:	e003      	b.n	1322e <i2c_read_write+0x86>
   13226:	3c01      	subs	r4, #1
   13228:	b2a4      	uxth	r4, r4
			if (timeout++ == limit) {   break;   }
   1322a:	2c00      	cmp	r4, #0
   1322c:	d0f0      	beq.n	13210 <i2c_read_write+0x68>
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   1322e:	0029      	movs	r1, r5
   13230:	0030      	movs	r0, r6
   13232:	47b8      	blx	r7
   13234:	2800      	cmp	r0, #0
   13236:	d1f6      	bne.n	13226 <i2c_read_write+0x7e>
   13238:	e7ea      	b.n	13210 <i2c_read_write+0x68>
   1323a:	46c0      	nop			; (mov r8, r8)
   1323c:	0001fdfd 	.word	0x0001fdfd
   13240:	20000fb8 	.word	0x20000fb8
   13244:	0000fb81 	.word	0x0000fb81
   13248:	0000fb61 	.word	0x0000fb61

0001324c <max17055_reg_read_write>:


void max17055_reg_read_write(enum read_write mode, uint8_t address, uint16_t *data){
   1324c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1324e:	46c6      	mov	lr, r8
   13250:	b500      	push	{lr}
   13252:	b084      	sub	sp, #16
	//MAX17055 is the battery fuel gauge
	//MAX17055 is 16-bit register read/writes with LSB first
	uint16_t temp16;
	uint8_t temp_buf[3];
	
	temp_buf[0] = address;
   13254:	466b      	mov	r3, sp
void max17055_reg_read_write(enum read_write mode, uint8_t address, uint16_t *data){
   13256:	4690      	mov	r8, r2
	temp_buf[0] = address;
   13258:	7019      	strb	r1, [r3, #0]
	if (mode==readp){
   1325a:	2800      	cmp	r0, #0
   1325c:	d01f      	beq.n	1329e <max17055_reg_read_write+0x52>
		temp16=temp_buf[2];
		temp16=temp16<<8;
		temp16=temp16+temp_buf[1];
		*data=temp16;
	}else{
		temp16=*data;
   1325e:	8813      	ldrh	r3, [r2, #0]
		temp_buf[1]=temp16 & 0x00FF;
   13260:	466a      	mov	r2, sp
	struct i2c_master_packet packet = {
   13262:	ad01      	add	r5, sp, #4
		temp_buf[1]=temp16 & 0x00FF;
   13264:	7053      	strb	r3, [r2, #1]
		temp16=temp16>>8;
   13266:	0a1b      	lsrs	r3, r3, #8
		temp_buf[2]=temp16 & 0x00FF;
   13268:	7093      	strb	r3, [r2, #2]
	struct i2c_master_packet packet = {
   1326a:	2100      	movs	r1, #0
   1326c:	4b24      	ldr	r3, [pc, #144]	; (13300 <max17055_reg_read_write+0xb4>)
   1326e:	220c      	movs	r2, #12
   13270:	0028      	movs	r0, r5
   13272:	4798      	blx	r3
   13274:	466b      	mov	r3, sp
   13276:	606b      	str	r3, [r5, #4]
   13278:	4b22      	ldr	r3, [pc, #136]	; (13304 <max17055_reg_read_write+0xb8>)
   1327a:	2465      	movs	r4, #101	; 0x65
   1327c:	9301      	str	r3, [sp, #4]
   1327e:	4e22      	ldr	r6, [pc, #136]	; (13308 <max17055_reg_read_write+0xbc>)
   13280:	4f22      	ldr	r7, [pc, #136]	; (1330c <max17055_reg_read_write+0xc0>)
   13282:	e003      	b.n	1328c <max17055_reg_read_write+0x40>
   13284:	3c01      	subs	r4, #1
   13286:	b2a4      	uxth	r4, r4
			if (timeout++ == limit) {   break;   }
   13288:	2c00      	cmp	r4, #0
   1328a:	d004      	beq.n	13296 <max17055_reg_read_write+0x4a>
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   1328c:	0029      	movs	r1, r5
   1328e:	0030      	movs	r0, r6
   13290:	47b8      	blx	r7
   13292:	2800      	cmp	r0, #0
   13294:	d1f6      	bne.n	13284 <max17055_reg_read_write+0x38>
		i2c_read_write(writep, batt_add, temp_buf, 2);
	}
}
   13296:	b004      	add	sp, #16
   13298:	bc04      	pop	{r2}
   1329a:	4690      	mov	r8, r2
   1329c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct i2c_master_packet packet = {
   1329e:	ad01      	add	r5, sp, #4
   132a0:	4b17      	ldr	r3, [pc, #92]	; (13300 <max17055_reg_read_write+0xb4>)
   132a2:	220c      	movs	r2, #12
   132a4:	2100      	movs	r1, #0
   132a6:	0028      	movs	r0, r5
   132a8:	4798      	blx	r3
   132aa:	466b      	mov	r3, sp
   132ac:	606b      	str	r3, [r5, #4]
   132ae:	4b18      	ldr	r3, [pc, #96]	; (13310 <max17055_reg_read_write+0xc4>)
   132b0:	2465      	movs	r4, #101	; 0x65
   132b2:	9301      	str	r3, [sp, #4]
   132b4:	4e14      	ldr	r6, [pc, #80]	; (13308 <max17055_reg_read_write+0xbc>)
   132b6:	4f15      	ldr	r7, [pc, #84]	; (1330c <max17055_reg_read_write+0xc0>)
   132b8:	e003      	b.n	132c2 <max17055_reg_read_write+0x76>
   132ba:	3c01      	subs	r4, #1
   132bc:	b2a4      	uxth	r4, r4
			if (timeout++ == limit) {   break;   }
   132be:	2c00      	cmp	r4, #0
   132c0:	d004      	beq.n	132cc <max17055_reg_read_write+0x80>
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   132c2:	0029      	movs	r1, r5
   132c4:	0030      	movs	r0, r6
   132c6:	47b8      	blx	r7
   132c8:	2800      	cmp	r0, #0
   132ca:	d1f6      	bne.n	132ba <max17055_reg_read_write+0x6e>
		packet.data=buf+1;
   132cc:	466b      	mov	r3, sp
   132ce:	3301      	adds	r3, #1
   132d0:	606b      	str	r3, [r5, #4]
		packet.data_length=length;
   132d2:	2302      	movs	r3, #2
   132d4:	2465      	movs	r4, #101	; 0x65
   132d6:	806b      	strh	r3, [r5, #2]
   132d8:	4f0e      	ldr	r7, [pc, #56]	; (13314 <max17055_reg_read_write+0xc8>)
   132da:	e003      	b.n	132e4 <max17055_reg_read_write+0x98>
   132dc:	3c01      	subs	r4, #1
   132de:	b2a4      	uxth	r4, r4
			if (timeout++ == limit) {   break;   }
   132e0:	2c00      	cmp	r4, #0
   132e2:	d004      	beq.n	132ee <max17055_reg_read_write+0xa2>
		while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   132e4:	0029      	movs	r1, r5
   132e6:	0030      	movs	r0, r6
   132e8:	47b8      	blx	r7
   132ea:	2800      	cmp	r0, #0
   132ec:	d1f6      	bne.n	132dc <max17055_reg_read_write+0x90>
		temp16=temp_buf[2];
   132ee:	466b      	mov	r3, sp
		temp16=temp16+temp_buf[1];
   132f0:	466a      	mov	r2, sp
		temp16=temp_buf[2];
   132f2:	789b      	ldrb	r3, [r3, #2]
		temp16=temp16+temp_buf[1];
   132f4:	7852      	ldrb	r2, [r2, #1]
		temp16=temp16<<8;
   132f6:	021b      	lsls	r3, r3, #8
		temp16=temp16+temp_buf[1];
   132f8:	189b      	adds	r3, r3, r2
		*data=temp16;
   132fa:	4642      	mov	r2, r8
   132fc:	8013      	strh	r3, [r2, #0]
   132fe:	e7ca      	b.n	13296 <max17055_reg_read_write+0x4a>
   13300:	0001fdfd 	.word	0x0001fdfd
   13304:	00020036 	.word	0x00020036
   13308:	20000fb8 	.word	0x20000fb8
   1330c:	0000fb81 	.word	0x0000fb81
   13310:	00010036 	.word	0x00010036
   13314:	0000fb61 	.word	0x0000fb61

00013318 <adp5062_reg_read_write>:

void adp5062_reg_read_write(enum read_write mode, uint8_t address, uint8_t *data){
   13318:	b5f0      	push	{r4, r5, r6, r7, lr}
   1331a:	46c6      	mov	lr, r8
   1331c:	b500      	push	{lr}
   1331e:	b084      	sub	sp, #16
	// ADP5062 is the charger chip
	// Write and read 8-bit registers
	uint8_t temp_buf[2];
	
	temp_buf[0] = address;
   13320:	466b      	mov	r3, sp
void adp5062_reg_read_write(enum read_write mode, uint8_t address, uint8_t *data){
   13322:	4690      	mov	r8, r2
	temp_buf[0] = address;
   13324:	7019      	strb	r1, [r3, #0]
	if (mode==readp){
   13326:	2800      	cmp	r0, #0
   13328:	d01c      	beq.n	13364 <adp5062_reg_read_write+0x4c>
		i2c_read_write(readp, charger_add, temp_buf, 1);
		*data=temp_buf[1];
	}else{
		
		temp_buf[1]=data;
   1332a:	466b      	mov	r3, sp
	struct i2c_master_packet packet = {
   1332c:	ad01      	add	r5, sp, #4
		temp_buf[1]=data;
   1332e:	705a      	strb	r2, [r3, #1]
	struct i2c_master_packet packet = {
   13330:	2100      	movs	r1, #0
   13332:	4b23      	ldr	r3, [pc, #140]	; (133c0 <adp5062_reg_read_write+0xa8>)
   13334:	220c      	movs	r2, #12
   13336:	0028      	movs	r0, r5
   13338:	4798      	blx	r3
   1333a:	466b      	mov	r3, sp
   1333c:	606b      	str	r3, [r5, #4]
   1333e:	4b21      	ldr	r3, [pc, #132]	; (133c4 <adp5062_reg_read_write+0xac>)
   13340:	2465      	movs	r4, #101	; 0x65
   13342:	9301      	str	r3, [sp, #4]
   13344:	4e20      	ldr	r6, [pc, #128]	; (133c8 <adp5062_reg_read_write+0xb0>)
   13346:	4f21      	ldr	r7, [pc, #132]	; (133cc <adp5062_reg_read_write+0xb4>)
   13348:	e003      	b.n	13352 <adp5062_reg_read_write+0x3a>
   1334a:	3c01      	subs	r4, #1
   1334c:	b2a4      	uxth	r4, r4
			if (timeout++ == limit) {   break;   }
   1334e:	2c00      	cmp	r4, #0
   13350:	d004      	beq.n	1335c <adp5062_reg_read_write+0x44>
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   13352:	0029      	movs	r1, r5
   13354:	0030      	movs	r0, r6
   13356:	47b8      	blx	r7
   13358:	2800      	cmp	r0, #0
   1335a:	d1f6      	bne.n	1334a <adp5062_reg_read_write+0x32>
		i2c_read_write(writep, charger_add, temp_buf, 2);
	}
}
   1335c:	b004      	add	sp, #16
   1335e:	bc04      	pop	{r2}
   13360:	4690      	mov	r8, r2
   13362:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct i2c_master_packet packet = {
   13364:	ad01      	add	r5, sp, #4
   13366:	4b16      	ldr	r3, [pc, #88]	; (133c0 <adp5062_reg_read_write+0xa8>)
   13368:	220c      	movs	r2, #12
   1336a:	2100      	movs	r1, #0
   1336c:	0028      	movs	r0, r5
   1336e:	4798      	blx	r3
   13370:	466b      	mov	r3, sp
   13372:	606b      	str	r3, [r5, #4]
   13374:	4b16      	ldr	r3, [pc, #88]	; (133d0 <adp5062_reg_read_write+0xb8>)
   13376:	2465      	movs	r4, #101	; 0x65
   13378:	9301      	str	r3, [sp, #4]
   1337a:	4e13      	ldr	r6, [pc, #76]	; (133c8 <adp5062_reg_read_write+0xb0>)
   1337c:	4f13      	ldr	r7, [pc, #76]	; (133cc <adp5062_reg_read_write+0xb4>)
   1337e:	e003      	b.n	13388 <adp5062_reg_read_write+0x70>
   13380:	3c01      	subs	r4, #1
   13382:	b2a4      	uxth	r4, r4
			if (timeout++ == limit) {   break;   }
   13384:	2c00      	cmp	r4, #0
   13386:	d004      	beq.n	13392 <adp5062_reg_read_write+0x7a>
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   13388:	0029      	movs	r1, r5
   1338a:	0030      	movs	r0, r6
   1338c:	47b8      	blx	r7
   1338e:	2800      	cmp	r0, #0
   13390:	d1f6      	bne.n	13380 <adp5062_reg_read_write+0x68>
		packet.data=buf+1;
   13392:	466b      	mov	r3, sp
   13394:	3301      	adds	r3, #1
   13396:	606b      	str	r3, [r5, #4]
		packet.data_length=length;
   13398:	2301      	movs	r3, #1
   1339a:	2465      	movs	r4, #101	; 0x65
   1339c:	806b      	strh	r3, [r5, #2]
   1339e:	4f0d      	ldr	r7, [pc, #52]	; (133d4 <adp5062_reg_read_write+0xbc>)
   133a0:	e003      	b.n	133aa <adp5062_reg_read_write+0x92>
   133a2:	3c01      	subs	r4, #1
   133a4:	b2a4      	uxth	r4, r4
			if (timeout++ == limit) {   break;   }
   133a6:	2c00      	cmp	r4, #0
   133a8:	d004      	beq.n	133b4 <adp5062_reg_read_write+0x9c>
		while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=STATUS_OK) {
   133aa:	0029      	movs	r1, r5
   133ac:	0030      	movs	r0, r6
   133ae:	47b8      	blx	r7
   133b0:	2800      	cmp	r0, #0
   133b2:	d1f6      	bne.n	133a2 <adp5062_reg_read_write+0x8a>
		*data=temp_buf[1];
   133b4:	466b      	mov	r3, sp
   133b6:	4642      	mov	r2, r8
   133b8:	785b      	ldrb	r3, [r3, #1]
   133ba:	7013      	strb	r3, [r2, #0]
   133bc:	e7ce      	b.n	1335c <adp5062_reg_read_write+0x44>
   133be:	46c0      	nop			; (mov r8, r8)
   133c0:	0001fdfd 	.word	0x0001fdfd
   133c4:	00020014 	.word	0x00020014
   133c8:	20000fb8 	.word	0x20000fb8
   133cc:	0000fb81 	.word	0x0000fb81
   133d0:	00010014 	.word	0x00010014
   133d4:	0000fb61 	.word	0x0000fb61

000133d8 <sd_mmc_test_unit_ready_0>:
		return CTRL_FAIL;
	}
}

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   133d8:	b510      	push	{r4, lr}
	switch (sd_mmc_check(slot))
   133da:	2000      	movs	r0, #0
   133dc:	4b0d      	ldr	r3, [pc, #52]	; (13414 <sd_mmc_test_unit_ready_0+0x3c>)
   133de:	4798      	blx	r3
   133e0:	2801      	cmp	r0, #1
   133e2:	d015      	beq.n	13410 <sd_mmc_test_unit_ready_0+0x38>
   133e4:	2800      	cmp	r0, #0
   133e6:	d008      	beq.n	133fa <sd_mmc_test_unit_ready_0+0x22>
   133e8:	2802      	cmp	r0, #2
   133ea:	d001      	beq.n	133f0 <sd_mmc_test_unit_ready_0+0x18>
		return CTRL_FAIL;
   133ec:	2001      	movs	r0, #1
	return sd_mmc_test_unit_ready(0);
}
   133ee:	bd10      	pop	{r4, pc}
		sd_mmc_ejected[slot] = false;
   133f0:	2200      	movs	r2, #0
   133f2:	4b09      	ldr	r3, [pc, #36]	; (13418 <sd_mmc_test_unit_ready_0+0x40>)
   133f4:	701a      	strb	r2, [r3, #0]
		return CTRL_NO_PRESENT;
   133f6:	2002      	movs	r0, #2
   133f8:	e7f9      	b.n	133ee <sd_mmc_test_unit_ready_0+0x16>
		if (sd_mmc_ejected[slot]) {
   133fa:	4b07      	ldr	r3, [pc, #28]	; (13418 <sd_mmc_test_unit_ready_0+0x40>)
   133fc:	781b      	ldrb	r3, [r3, #0]
   133fe:	2b00      	cmp	r3, #0
   13400:	d1f9      	bne.n	133f6 <sd_mmc_test_unit_ready_0+0x1e>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   13402:	4b06      	ldr	r3, [pc, #24]	; (1341c <sd_mmc_test_unit_ready_0+0x44>)
   13404:	2000      	movs	r0, #0
   13406:	4798      	blx	r3
   13408:	0783      	lsls	r3, r0, #30
   1340a:	d0f4      	beq.n	133f6 <sd_mmc_test_unit_ready_0+0x1e>
			return CTRL_GOOD;
   1340c:	2000      	movs	r0, #0
   1340e:	e7ee      	b.n	133ee <sd_mmc_test_unit_ready_0+0x16>
		return CTRL_BUSY;
   13410:	2003      	movs	r0, #3
   13412:	e7ec      	b.n	133ee <sd_mmc_test_unit_ready_0+0x16>
   13414:	0000dc6d 	.word	0x0000dc6d
   13418:	20000edc 	.word	0x20000edc
   1341c:	0000e271 	.word	0x0000e271

00013420 <sd_mmc_read_capacity_0>:
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
	return sd_mmc_test_unit_ready(slot);
}

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   13420:	b510      	push	{r4, lr}
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   13422:	4b12      	ldr	r3, [pc, #72]	; (1346c <sd_mmc_read_capacity_0+0x4c>)
{
   13424:	0004      	movs	r4, r0
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   13426:	2000      	movs	r0, #0
   13428:	4798      	blx	r3
   1342a:	0040      	lsls	r0, r0, #1
   1342c:	3801      	subs	r0, #1
   1342e:	6020      	str	r0, [r4, #0]
	switch (sd_mmc_check(slot))
   13430:	4b0f      	ldr	r3, [pc, #60]	; (13470 <sd_mmc_read_capacity_0+0x50>)
   13432:	2000      	movs	r0, #0
   13434:	4798      	blx	r3
   13436:	2801      	cmp	r0, #1
   13438:	d015      	beq.n	13466 <sd_mmc_read_capacity_0+0x46>
   1343a:	2800      	cmp	r0, #0
   1343c:	d008      	beq.n	13450 <sd_mmc_read_capacity_0+0x30>
   1343e:	2802      	cmp	r0, #2
   13440:	d001      	beq.n	13446 <sd_mmc_read_capacity_0+0x26>
		return CTRL_FAIL;
   13442:	2001      	movs	r0, #1
	return sd_mmc_read_capacity(0, nb_sector);
}
   13444:	bd10      	pop	{r4, pc}
		sd_mmc_ejected[slot] = false;
   13446:	2200      	movs	r2, #0
   13448:	4b0a      	ldr	r3, [pc, #40]	; (13474 <sd_mmc_read_capacity_0+0x54>)
   1344a:	701a      	strb	r2, [r3, #0]
		return CTRL_NO_PRESENT;
   1344c:	2002      	movs	r0, #2
   1344e:	e7f9      	b.n	13444 <sd_mmc_read_capacity_0+0x24>
		if (sd_mmc_ejected[slot]) {
   13450:	4b08      	ldr	r3, [pc, #32]	; (13474 <sd_mmc_read_capacity_0+0x54>)
   13452:	781b      	ldrb	r3, [r3, #0]
   13454:	2b00      	cmp	r3, #0
   13456:	d1f9      	bne.n	1344c <sd_mmc_read_capacity_0+0x2c>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   13458:	4b07      	ldr	r3, [pc, #28]	; (13478 <sd_mmc_read_capacity_0+0x58>)
   1345a:	2000      	movs	r0, #0
   1345c:	4798      	blx	r3
   1345e:	0783      	lsls	r3, r0, #30
   13460:	d0f4      	beq.n	1344c <sd_mmc_read_capacity_0+0x2c>
			return CTRL_GOOD;
   13462:	2000      	movs	r0, #0
   13464:	e7ee      	b.n	13444 <sd_mmc_read_capacity_0+0x24>
		return CTRL_BUSY;
   13466:	2003      	movs	r0, #3
   13468:	e7ec      	b.n	13444 <sd_mmc_read_capacity_0+0x24>
   1346a:	46c0      	nop			; (mov r8, r8)
   1346c:	0000e2e5 	.word	0x0000e2e5
   13470:	0000dc6d 	.word	0x0000dc6d
   13474:	20000edc 	.word	0x20000edc
   13478:	0000e271 	.word	0x0000e271

0001347c <sd_mmc_unload_0>:
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
	sd_mmc_ejected[slot] = unload;
   1347c:	4b01      	ldr	r3, [pc, #4]	; (13484 <sd_mmc_unload_0+0x8>)
   1347e:	7018      	strb	r0, [r3, #0]
}

bool sd_mmc_unload_0(bool unload)
{
	return sd_mmc_unload(0, unload);
}
   13480:	2001      	movs	r0, #1
   13482:	4770      	bx	lr
   13484:	20000edc 	.word	0x20000edc

00013488 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
   13488:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
   1348a:	2000      	movs	r0, #0
   1348c:	4b01      	ldr	r3, [pc, #4]	; (13494 <sd_mmc_wr_protect_0+0xc>)
   1348e:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
   13490:	bd10      	pop	{r4, pc}
   13492:	46c0      	nop			; (mov r8, r8)
   13494:	0000e359 	.word	0x0000e359

00013498 <sd_mmc_removal_0>:
   13498:	2001      	movs	r0, #1
   1349a:	4770      	bx	lr

0001349c <sd_mmc_usb_read_10_0>:
	}
	return CTRL_GOOD;
}

Ctrl_status sd_mmc_usb_read_10_0(uint32_t addr, uint16_t nb_sector)
{
   1349c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1349e:	46c6      	mov	lr, r8
   134a0:	000c      	movs	r4, r1
   134a2:	b500      	push	{lr}
	switch (sd_mmc_init_read_blocks(slot, addr, nb_sector)) {
   134a4:	000a      	movs	r2, r1
   134a6:	4b25      	ldr	r3, [pc, #148]	; (1353c <sd_mmc_usb_read_10_0+0xa0>)
   134a8:	0001      	movs	r1, r0
   134aa:	2000      	movs	r0, #0
   134ac:	4798      	blx	r3
   134ae:	2800      	cmp	r0, #0
   134b0:	d006      	beq.n	134c0 <sd_mmc_usb_read_10_0+0x24>
		return CTRL_FAIL;
   134b2:	3802      	subs	r0, #2
   134b4:	4243      	negs	r3, r0
   134b6:	4158      	adcs	r0, r3
   134b8:	3001      	adds	r0, #1
	return sd_mmc_usb_read_10(0, addr, nb_sector);
}
   134ba:	bc04      	pop	{r2}
   134bc:	4690      	mov	r8, r2
   134be:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (!udi_msc_trans_block(true,
   134c0:	4b1f      	ldr	r3, [pc, #124]	; (13540 <sd_mmc_usb_read_10_0+0xa4>)
	bool b_first_step = true;
   134c2:	2601      	movs	r6, #1
			if (!udi_msc_trans_block(true,
   134c4:	4698      	mov	r8, r3
   134c6:	4f1f      	ldr	r7, [pc, #124]	; (13544 <sd_mmc_usb_read_10_0+0xa8>)
	while (nb_step--) {
   134c8:	4b1f      	ldr	r3, [pc, #124]	; (13548 <sd_mmc_usb_read_10_0+0xac>)
   134ca:	429c      	cmp	r4, r3
   134cc:	d028      	beq.n	13520 <sd_mmc_usb_read_10_0+0x84>
		if (nb_step) { // Skip last step
   134ce:	2c00      	cmp	r4, #0
   134d0:	d01a      	beq.n	13508 <sd_mmc_usb_read_10_0+0x6c>
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
   134d2:	2501      	movs	r5, #1
   134d4:	4025      	ands	r5, r4
   134d6:	d12f      	bne.n	13538 <sd_mmc_usb_read_10_0+0x9c>
   134d8:	481c      	ldr	r0, [pc, #112]	; (1354c <sd_mmc_usb_read_10_0+0xb0>)
   134da:	2101      	movs	r1, #1
   134dc:	4b1c      	ldr	r3, [pc, #112]	; (13550 <sd_mmc_usb_read_10_0+0xb4>)
   134de:	4798      	blx	r3
   134e0:	2800      	cmp	r0, #0
   134e2:	d10f      	bne.n	13504 <sd_mmc_usb_read_10_0+0x68>
		if (!b_first_step) { // Skip first step
   134e4:	2e00      	cmp	r6, #0
   134e6:	d11d      	bne.n	13524 <sd_mmc_usb_read_10_0+0x88>
			if (!udi_msc_trans_block(true,
   134e8:	2d00      	cmp	r5, #0
   134ea:	d00f      	beq.n	1350c <sd_mmc_usb_read_10_0+0x70>
   134ec:	2280      	movs	r2, #128	; 0x80
   134ee:	2300      	movs	r3, #0
   134f0:	0092      	lsls	r2, r2, #2
   134f2:	4916      	ldr	r1, [pc, #88]	; (1354c <sd_mmc_usb_read_10_0+0xb0>)
   134f4:	2001      	movs	r0, #1
   134f6:	4d13      	ldr	r5, [pc, #76]	; (13544 <sd_mmc_usb_read_10_0+0xa8>)
   134f8:	47a8      	blx	r5
   134fa:	2800      	cmp	r0, #0
   134fc:	d112      	bne.n	13524 <sd_mmc_usb_read_10_0+0x88>
					sd_mmc_wait_end_of_read_blocks(true);
   134fe:	2001      	movs	r0, #1
   13500:	4b14      	ldr	r3, [pc, #80]	; (13554 <sd_mmc_usb_read_10_0+0xb8>)
   13502:	4798      	blx	r3
				return CTRL_FAIL;
   13504:	2001      	movs	r0, #1
   13506:	e7d8      	b.n	134ba <sd_mmc_usb_read_10_0+0x1e>
		if (!b_first_step) { // Skip first step
   13508:	2e00      	cmp	r6, #0
   1350a:	d109      	bne.n	13520 <sd_mmc_usb_read_10_0+0x84>
			if (!udi_msc_trans_block(true,
   1350c:	2280      	movs	r2, #128	; 0x80
   1350e:	2300      	movs	r3, #0
   13510:	0092      	lsls	r2, r2, #2
   13512:	4641      	mov	r1, r8
   13514:	2001      	movs	r0, #1
   13516:	47b8      	blx	r7
   13518:	2800      	cmp	r0, #0
   1351a:	d0f0      	beq.n	134fe <sd_mmc_usb_read_10_0+0x62>
		if (nb_step) { // Skip last step
   1351c:	2c00      	cmp	r4, #0
   1351e:	d101      	bne.n	13524 <sd_mmc_usb_read_10_0+0x88>
	return CTRL_GOOD;
   13520:	2000      	movs	r0, #0
   13522:	e7ca      	b.n	134ba <sd_mmc_usb_read_10_0+0x1e>
			if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   13524:	2000      	movs	r0, #0
   13526:	4b0b      	ldr	r3, [pc, #44]	; (13554 <sd_mmc_usb_read_10_0+0xb8>)
   13528:	4798      	blx	r3
   1352a:	3c01      	subs	r4, #1
   1352c:	b2a4      	uxth	r4, r4
   1352e:	2600      	movs	r6, #0
   13530:	2800      	cmp	r0, #0
   13532:	d0c9      	beq.n	134c8 <sd_mmc_usb_read_10_0+0x2c>
				return CTRL_FAIL;
   13534:	2001      	movs	r0, #1
   13536:	e7c0      	b.n	134ba <sd_mmc_usb_read_10_0+0x1e>
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
   13538:	4801      	ldr	r0, [pc, #4]	; (13540 <sd_mmc_usb_read_10_0+0xa4>)
   1353a:	e7ce      	b.n	134da <sd_mmc_usb_read_10_0+0x3e>
   1353c:	0000e35d 	.word	0x0000e35d
   13540:	20001470 	.word	0x20001470
   13544:	00000f9d 	.word	0x00000f9d
   13548:	0000ffff 	.word	0x0000ffff
   1354c:	20001670 	.word	0x20001670
   13550:	0000e47d 	.word	0x0000e47d
   13554:	0000e4a9 	.word	0x0000e4a9

00013558 <sd_mmc_usb_write_10_0>:
	}
	return CTRL_GOOD;
}

Ctrl_status sd_mmc_usb_write_10_0(uint32_t addr, uint16_t nb_sector)
{
   13558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1355a:	46ce      	mov	lr, r9
   1355c:	4647      	mov	r7, r8
   1355e:	000c      	movs	r4, r1
   13560:	b580      	push	{r7, lr}
	switch (sd_mmc_init_write_blocks(slot, addr, nb_sector)) {
   13562:	000a      	movs	r2, r1
   13564:	4b2f      	ldr	r3, [pc, #188]	; (13624 <sd_mmc_usb_write_10_0+0xcc>)
   13566:	0001      	movs	r1, r0
   13568:	2000      	movs	r0, #0
   1356a:	4798      	blx	r3
   1356c:	2800      	cmp	r0, #0
   1356e:	d007      	beq.n	13580 <sd_mmc_usb_write_10_0+0x28>
		return CTRL_FAIL;
   13570:	3802      	subs	r0, #2
   13572:	4243      	negs	r3, r0
   13574:	4158      	adcs	r0, r3
   13576:	3001      	adds	r0, #1
	return sd_mmc_usb_write_10(0, addr, nb_sector);
}
   13578:	bc0c      	pop	{r2, r3}
   1357a:	4690      	mov	r8, r2
   1357c:	4699      	mov	r9, r3
   1357e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	while (nb_step--) {
   13580:	4b29      	ldr	r3, [pc, #164]	; (13628 <sd_mmc_usb_write_10_0+0xd0>)
   13582:	429c      	cmp	r4, r3
   13584:	d101      	bne.n	1358a <sd_mmc_usb_write_10_0+0x32>
	return CTRL_GOOD;
   13586:	2000      	movs	r0, #0
   13588:	e7f6      	b.n	13578 <sd_mmc_usb_write_10_0+0x20>
   1358a:	1e65      	subs	r5, r4, #1
   1358c:	b2ad      	uxth	r5, r5
		if (nb_step) { // Skip last step
   1358e:	2c00      	cmp	r4, #0
   13590:	d0f9      	beq.n	13586 <sd_mmc_usb_write_10_0+0x2e>
			if (!udi_msc_trans_block(false,
   13592:	2301      	movs	r3, #1
   13594:	4699      	mov	r9, r3
   13596:	07e3      	lsls	r3, r4, #31
   13598:	d538      	bpl.n	1360c <sd_mmc_usb_write_10_0+0xb4>
   1359a:	4924      	ldr	r1, [pc, #144]	; (1362c <sd_mmc_usb_write_10_0+0xd4>)
   1359c:	4f24      	ldr	r7, [pc, #144]	; (13630 <sd_mmc_usb_write_10_0+0xd8>)
   1359e:	000b      	movs	r3, r1
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
   135a0:	4698      	mov	r8, r3
   135a2:	4e24      	ldr	r6, [pc, #144]	; (13634 <sd_mmc_usb_write_10_0+0xdc>)
			if (!udi_msc_trans_block(false,
   135a4:	2280      	movs	r2, #128	; 0x80
   135a6:	2300      	movs	r3, #0
   135a8:	0092      	lsls	r2, r2, #2
   135aa:	2000      	movs	r0, #0
   135ac:	47b0      	blx	r6
				if (!b_first_step) {
   135ae:	464b      	mov	r3, r9
			if (!udi_msc_trans_block(false,
   135b0:	2800      	cmp	r0, #0
   135b2:	d02f      	beq.n	13614 <sd_mmc_usb_write_10_0+0xbc>
		if (!b_first_step) { // Skip first step
   135b4:	2b00      	cmp	r3, #0
   135b6:	d01b      	beq.n	135f0 <sd_mmc_usb_write_10_0+0x98>
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
   135b8:	0038      	movs	r0, r7
   135ba:	07eb      	lsls	r3, r5, #31
   135bc:	d400      	bmi.n	135c0 <sd_mmc_usb_write_10_0+0x68>
   135be:	4640      	mov	r0, r8
   135c0:	2101      	movs	r1, #1
   135c2:	4b1d      	ldr	r3, [pc, #116]	; (13638 <sd_mmc_usb_write_10_0+0xe0>)
   135c4:	4798      	blx	r3
   135c6:	3c01      	subs	r4, #1
   135c8:	3d01      	subs	r5, #1
   135ca:	b2a4      	uxth	r4, r4
   135cc:	b2ad      	uxth	r5, r5
   135ce:	2800      	cmp	r0, #0
   135d0:	d113      	bne.n	135fa <sd_mmc_usb_write_10_0+0xa2>
		if (nb_step) { // Skip last step
   135d2:	2c00      	cmp	r4, #0
   135d4:	d013      	beq.n	135fe <sd_mmc_usb_write_10_0+0xa6>
   135d6:	2300      	movs	r3, #0
			if (!udi_msc_trans_block(false,
   135d8:	4914      	ldr	r1, [pc, #80]	; (1362c <sd_mmc_usb_write_10_0+0xd4>)
   135da:	4699      	mov	r9, r3
   135dc:	07e3      	lsls	r3, r4, #31
   135de:	d4e1      	bmi.n	135a4 <sd_mmc_usb_write_10_0+0x4c>
   135e0:	2280      	movs	r2, #128	; 0x80
   135e2:	2300      	movs	r3, #0
   135e4:	0092      	lsls	r2, r2, #2
   135e6:	4912      	ldr	r1, [pc, #72]	; (13630 <sd_mmc_usb_write_10_0+0xd8>)
   135e8:	2000      	movs	r0, #0
   135ea:	47b0      	blx	r6
   135ec:	2800      	cmp	r0, #0
   135ee:	d013      	beq.n	13618 <sd_mmc_usb_write_10_0+0xc0>
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   135f0:	2000      	movs	r0, #0
   135f2:	4b12      	ldr	r3, [pc, #72]	; (1363c <sd_mmc_usb_write_10_0+0xe4>)
   135f4:	4798      	blx	r3
   135f6:	2800      	cmp	r0, #0
   135f8:	d0de      	beq.n	135b8 <sd_mmc_usb_write_10_0+0x60>
				return CTRL_FAIL;
   135fa:	2001      	movs	r0, #1
   135fc:	e7bc      	b.n	13578 <sd_mmc_usb_write_10_0+0x20>
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   135fe:	2000      	movs	r0, #0
   13600:	4b0e      	ldr	r3, [pc, #56]	; (1363c <sd_mmc_usb_write_10_0+0xe4>)
   13602:	4798      	blx	r3
   13604:	2800      	cmp	r0, #0
   13606:	d1f8      	bne.n	135fa <sd_mmc_usb_write_10_0+0xa2>
	return CTRL_GOOD;
   13608:	2000      	movs	r0, #0
   1360a:	e7b5      	b.n	13578 <sd_mmc_usb_write_10_0+0x20>
			if (!udi_msc_trans_block(false,
   1360c:	4908      	ldr	r1, [pc, #32]	; (13630 <sd_mmc_usb_write_10_0+0xd8>)
   1360e:	4b07      	ldr	r3, [pc, #28]	; (1362c <sd_mmc_usb_write_10_0+0xd4>)
   13610:	000f      	movs	r7, r1
   13612:	e7c5      	b.n	135a0 <sd_mmc_usb_write_10_0+0x48>
				if (!b_first_step) {
   13614:	2b00      	cmp	r3, #0
   13616:	d1f0      	bne.n	135fa <sd_mmc_usb_write_10_0+0xa2>
					sd_mmc_wait_end_of_write_blocks(true);
   13618:	2001      	movs	r0, #1
   1361a:	4b08      	ldr	r3, [pc, #32]	; (1363c <sd_mmc_usb_write_10_0+0xe4>)
   1361c:	4798      	blx	r3
				return CTRL_FAIL;
   1361e:	2001      	movs	r0, #1
   13620:	e7aa      	b.n	13578 <sd_mmc_usb_write_10_0+0x20>
   13622:	46c0      	nop			; (mov r8, r8)
   13624:	0000e51d 	.word	0x0000e51d
   13628:	0000ffff 	.word	0x0000ffff
   1362c:	20001670 	.word	0x20001670
   13630:	20001470 	.word	0x20001470
   13634:	00000f9d 	.word	0x00000f9d
   13638:	0000e5fd 	.word	0x0000e5fd
   1363c:	0000e629 	.word	0x0000e629

00013640 <sd_mmc_mem_2_ram_0>:
	}
	return CTRL_GOOD;
}

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   13640:	b510      	push	{r4, lr}
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   13642:	2201      	movs	r2, #1
{
   13644:	000c      	movs	r4, r1
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   13646:	4b0d      	ldr	r3, [pc, #52]	; (1367c <sd_mmc_mem_2_ram_0+0x3c>)
   13648:	0001      	movs	r1, r0
   1364a:	2000      	movs	r0, #0
   1364c:	4798      	blx	r3
   1364e:	2800      	cmp	r0, #0
   13650:	d004      	beq.n	1365c <sd_mmc_mem_2_ram_0+0x1c>
		return CTRL_FAIL;
   13652:	3802      	subs	r0, #2
   13654:	4243      	negs	r3, r0
   13656:	4158      	adcs	r0, r3
   13658:	3001      	adds	r0, #1
	return sd_mmc_mem_2_ram(0, addr, ram);
}
   1365a:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   1365c:	4b08      	ldr	r3, [pc, #32]	; (13680 <sd_mmc_mem_2_ram_0+0x40>)
   1365e:	2101      	movs	r1, #1
   13660:	0020      	movs	r0, r4
   13662:	4798      	blx	r3
   13664:	0003      	movs	r3, r0
		return CTRL_FAIL;
   13666:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   13668:	2b00      	cmp	r3, #0
   1366a:	d1f6      	bne.n	1365a <sd_mmc_mem_2_ram_0+0x1a>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   1366c:	4b05      	ldr	r3, [pc, #20]	; (13684 <sd_mmc_mem_2_ram_0+0x44>)
   1366e:	2000      	movs	r0, #0
   13670:	4798      	blx	r3
   13672:	1e43      	subs	r3, r0, #1
   13674:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
   13676:	b2c0      	uxtb	r0, r0
   13678:	e7ef      	b.n	1365a <sd_mmc_mem_2_ram_0+0x1a>
   1367a:	46c0      	nop			; (mov r8, r8)
   1367c:	0000e35d 	.word	0x0000e35d
   13680:	0000e47d 	.word	0x0000e47d
   13684:	0000e4a9 	.word	0x0000e4a9

00013688 <sd_mmc_ram_2_mem_0>:
	}
	return CTRL_GOOD;
}

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   13688:	b510      	push	{r4, lr}
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   1368a:	2201      	movs	r2, #1
{
   1368c:	000c      	movs	r4, r1
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   1368e:	4b0d      	ldr	r3, [pc, #52]	; (136c4 <sd_mmc_ram_2_mem_0+0x3c>)
   13690:	0001      	movs	r1, r0
   13692:	2000      	movs	r0, #0
   13694:	4798      	blx	r3
   13696:	2800      	cmp	r0, #0
   13698:	d004      	beq.n	136a4 <sd_mmc_ram_2_mem_0+0x1c>
		return CTRL_FAIL;
   1369a:	3802      	subs	r0, #2
   1369c:	4243      	negs	r3, r0
   1369e:	4158      	adcs	r0, r3
   136a0:	3001      	adds	r0, #1
	return sd_mmc_ram_2_mem(0, addr, ram);
}
   136a2:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   136a4:	4b08      	ldr	r3, [pc, #32]	; (136c8 <sd_mmc_ram_2_mem_0+0x40>)
   136a6:	2101      	movs	r1, #1
   136a8:	0020      	movs	r0, r4
   136aa:	4798      	blx	r3
   136ac:	0003      	movs	r3, r0
		return CTRL_FAIL;
   136ae:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   136b0:	2b00      	cmp	r3, #0
   136b2:	d1f6      	bne.n	136a2 <sd_mmc_ram_2_mem_0+0x1a>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   136b4:	4b05      	ldr	r3, [pc, #20]	; (136cc <sd_mmc_ram_2_mem_0+0x44>)
   136b6:	2000      	movs	r0, #0
   136b8:	4798      	blx	r3
   136ba:	1e43      	subs	r3, r0, #1
   136bc:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
   136be:	b2c0      	uxtb	r0, r0
   136c0:	e7ef      	b.n	136a2 <sd_mmc_ram_2_mem_0+0x1a>
   136c2:	46c0      	nop			; (mov r8, r8)
   136c4:	0000e51d 	.word	0x0000e51d
   136c8:	0000e5fd 	.word	0x0000e5fd
   136cc:	0000e629 	.word	0x0000e629

000136d0 <glcd_init>:
//void delay_ms(uint32_t ms);

//#define BACKLIGHT_INVERT	// Uncomment if LED backlight turn on with low value

void glcd_init(void)
{
   136d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   136d2:	2580      	movs	r5, #128	; 0x80
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   136d4:	2157      	movs	r1, #87	; 0x57
   136d6:	2002      	movs	r0, #2
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   136d8:	2380      	movs	r3, #128	; 0x80
   136da:	4c14      	ldr	r4, [pc, #80]	; (1372c <glcd_init+0x5c>)
   136dc:	042d      	lsls	r5, r5, #16
   136de:	60a5      	str	r5, [r4, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   136e0:	5c62      	ldrb	r2, [r4, r1]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   136e2:	051b      	lsls	r3, r3, #20
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   136e4:	4302      	orrs	r2, r0
   136e6:	b2d2      	uxtb	r2, r2
   136e8:	5462      	strb	r2, [r4, r1]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   136ea:	60a3      	str	r3, [r4, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   136ec:	235b      	movs	r3, #91	; 0x5b
   136ee:	5ce2      	ldrb	r2, [r4, r3]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   136f0:	4e0f      	ldr	r6, [pc, #60]	; (13730 <glcd_init+0x60>)
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   136f2:	4302      	orrs	r2, r0
   136f4:	b2d2      	uxtb	r2, r2
   136f6:	54e2      	strb	r2, [r4, r3]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   136f8:	60b5      	str	r5, [r6, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   136fa:	5c73      	ldrb	r3, [r6, r1]
   136fc:	4303      	orrs	r3, r0
   136fe:	b2db      	uxtb	r3, r3
   13700:	5473      	strb	r3, [r6, r1]

	
	GLCD_DESELECT();
	

	glcd_select_screen((uint8_t *)&glcd_buffer,&glcd_bbox);
   13702:	480c      	ldr	r0, [pc, #48]	; (13734 <glcd_init+0x64>)
   13704:	490c      	ldr	r1, [pc, #48]	; (13738 <glcd_init+0x68>)
   13706:	4b0d      	ldr	r3, [pc, #52]	; (1373c <glcd_init+0x6c>)
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   13708:	61a5      	str	r5, [r4, #24]
   1370a:	4798      	blx	r3
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   1370c:	6165      	str	r5, [r4, #20]
	/* Toggle RST low to reset. Minimum pulse 100ns on data sheet. */
	GLCD_SELECT();
	GLCD_RESET_LOW();


	delay_ms(GLCD_RESET_TIME);
   1370e:	4f0c      	ldr	r7, [pc, #48]	; (13740 <glcd_init+0x70>)
   13710:	6175      	str	r5, [r6, #20]
   13712:	2001      	movs	r0, #1
   13714:	47b8      	blx	r7
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   13716:	61b5      	str	r5, [r6, #24]
   13718:	2001      	movs	r0, #1
   1371a:	61a5      	str	r5, [r4, #24]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   1371c:	6165      	str	r5, [r4, #20]
   1371e:	6175      	str	r5, [r6, #20]
   13720:	47b8      	blx	r7
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   13722:	61b5      	str	r5, [r6, #24]
	glcd_ST7565R_init();
   13724:	4b07      	ldr	r3, [pc, #28]	; (13744 <glcd_init+0x74>)
   13726:	61a5      	str	r5, [r4, #24]
   13728:	4798      	blx	r3
}
   1372a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1372c:	40002800 	.word	0x40002800
   13730:	40002880 	.word	0x40002880
   13734:	20001874 	.word	0x20001874
   13738:	20001870 	.word	0x20001870
   1373c:	00013855 	.word	0x00013855
   13740:	000161e9 	.word	0x000161e9
   13744:	00014a01 	.word	0x00014a01

00013748 <glcd_spi_write>:
{
   13748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1374a:	0005      	movs	r5, r0
	spi_select_slave(&spi_main, &slave_lcd, true);
   1374c:	4f08      	ldr	r7, [pc, #32]	; (13770 <glcd_spi_write+0x28>)
   1374e:	4c09      	ldr	r4, [pc, #36]	; (13774 <glcd_spi_write+0x2c>)
   13750:	0039      	movs	r1, r7
   13752:	4e09      	ldr	r6, [pc, #36]	; (13778 <glcd_spi_write+0x30>)
   13754:	2201      	movs	r2, #1
   13756:	0020      	movs	r0, r4
   13758:	47b0      	blx	r6
	spi_transceive_wait(&spi_main, c, &temp);
   1375a:	b2a9      	uxth	r1, r5
   1375c:	4b07      	ldr	r3, [pc, #28]	; (1377c <glcd_spi_write+0x34>)
   1375e:	4a08      	ldr	r2, [pc, #32]	; (13780 <glcd_spi_write+0x38>)
   13760:	0020      	movs	r0, r4
   13762:	4798      	blx	r3
	spi_select_slave(&spi_main, &slave_lcd, false);
   13764:	0039      	movs	r1, r7
   13766:	2200      	movs	r2, #0
   13768:	0020      	movs	r0, r4
   1376a:	47b0      	blx	r6
}
   1376c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1376e:	46c0      	nop			; (mov r8, r8)
   13770:	20000f6c 	.word	0x20000f6c
   13774:	20000fac 	.word	0x20000fac
   13778:	00015a39 	.word	0x00015a39
   1377c:	000159dd 	.word	0x000159dd
   13780:	20000ede 	.word	0x20000ede

00013784 <glcd_update_bbox>:
glcd_BoundingBox_t *glcd_bbox_selected;

/** @} */

void glcd_update_bbox(uint8_t xmin, uint8_t ymin, uint8_t xmax, uint8_t ymax)
{
   13784:	b570      	push	{r4, r5, r6, lr}
	/* Keep and check bounding box within limits of LCD screen dimensions */
	if (xmin > (GLCD_LCD_WIDTH-1)) {
   13786:	b244      	sxtb	r4, r0
   13788:	2c00      	cmp	r4, #0
   1378a:	db22      	blt.n	137d2 <glcd_update_bbox+0x4e>
		xmin = GLCD_LCD_WIDTH-1;
	}
	if (xmax > (GLCD_LCD_WIDTH-1)) {
   1378c:	b254      	sxtb	r4, r2
   1378e:	2c00      	cmp	r4, #0
   13790:	db23      	blt.n	137da <glcd_update_bbox+0x56>
   13792:	1c0c      	adds	r4, r1, #0
   13794:	293f      	cmp	r1, #63	; 0x3f
   13796:	d900      	bls.n	1379a <glcd_update_bbox+0x16>
   13798:	243f      	movs	r4, #63	; 0x3f
   1379a:	b2e4      	uxtb	r4, r4
   1379c:	1c19      	adds	r1, r3, #0
   1379e:	2b3f      	cmp	r3, #63	; 0x3f
   137a0:	d900      	bls.n	137a4 <glcd_update_bbox+0x20>
   137a2:	213f      	movs	r1, #63	; 0x3f
	if (ymax > (GLCD_LCD_HEIGHT-1)) {
		ymax = GLCD_LCD_HEIGHT-1;
	}

	/* Update the bounding box size */
	if (xmin < glcd_bbox_selected->x_min) {
   137a4:	4d0e      	ldr	r5, [pc, #56]	; (137e0 <glcd_update_bbox+0x5c>)
   137a6:	b2c9      	uxtb	r1, r1
   137a8:	682b      	ldr	r3, [r5, #0]
   137aa:	781e      	ldrb	r6, [r3, #0]
   137ac:	4286      	cmp	r6, r0
   137ae:	d901      	bls.n	137b4 <glcd_update_bbox+0x30>
		glcd_bbox_selected->x_min = xmin;
   137b0:	7018      	strb	r0, [r3, #0]
   137b2:	682b      	ldr	r3, [r5, #0]
	}		
	if (xmax > glcd_bbox_selected->x_max) {
   137b4:	7898      	ldrb	r0, [r3, #2]
   137b6:	4290      	cmp	r0, r2
   137b8:	d201      	bcs.n	137be <glcd_update_bbox+0x3a>
		glcd_bbox_selected->x_max = xmax;
   137ba:	709a      	strb	r2, [r3, #2]
   137bc:	682b      	ldr	r3, [r5, #0]
	}
	if (ymin < glcd_bbox_selected->y_min) {
   137be:	785a      	ldrb	r2, [r3, #1]
   137c0:	42a2      	cmp	r2, r4
   137c2:	d901      	bls.n	137c8 <glcd_update_bbox+0x44>
		glcd_bbox_selected->y_min = ymin;
   137c4:	705c      	strb	r4, [r3, #1]
   137c6:	682b      	ldr	r3, [r5, #0]
	}		
	if (ymax > glcd_bbox_selected->y_max) {
   137c8:	78da      	ldrb	r2, [r3, #3]
   137ca:	428a      	cmp	r2, r1
   137cc:	d200      	bcs.n	137d0 <glcd_update_bbox+0x4c>
		glcd_bbox_selected->y_max = ymax;
   137ce:	70d9      	strb	r1, [r3, #3]
	}			
}
   137d0:	bd70      	pop	{r4, r5, r6, pc}
	if (xmax > (GLCD_LCD_WIDTH-1)) {
   137d2:	b254      	sxtb	r4, r2
		xmin = GLCD_LCD_WIDTH-1;
   137d4:	207f      	movs	r0, #127	; 0x7f
	if (xmax > (GLCD_LCD_WIDTH-1)) {
   137d6:	2c00      	cmp	r4, #0
   137d8:	dadb      	bge.n	13792 <glcd_update_bbox+0xe>
		xmax = GLCD_LCD_WIDTH-1;
   137da:	227f      	movs	r2, #127	; 0x7f
   137dc:	e7d9      	b.n	13792 <glcd_update_bbox+0xe>
   137de:	46c0      	nop			; (mov r8, r8)
   137e0:	20001c78 	.word	0x20001c78

000137e4 <glcd_reset_bbox>:
   137e4:	227f      	movs	r2, #127	; 0x7f
   137e6:	4b06      	ldr	r3, [pc, #24]	; (13800 <glcd_reset_bbox+0x1c>)
   137e8:	6819      	ldr	r1, [r3, #0]
   137ea:	700a      	strb	r2, [r1, #0]
   137ec:	2200      	movs	r2, #0
   137ee:	6819      	ldr	r1, [r3, #0]
   137f0:	708a      	strb	r2, [r1, #2]
   137f2:	213f      	movs	r1, #63	; 0x3f
   137f4:	6818      	ldr	r0, [r3, #0]
   137f6:	7041      	strb	r1, [r0, #1]
   137f8:	681b      	ldr	r3, [r3, #0]
   137fa:	70da      	strb	r2, [r3, #3]
   137fc:	4770      	bx	lr
   137fe:	46c0      	nop			; (mov r8, r8)
   13800:	20001c78 	.word	0x20001c78

00013804 <glcd_clear_buffer>:
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
	glcd_write();
}

void glcd_clear_buffer(void) {
	memset(glcd_buffer_selected, 0x00, GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8);
   13804:	2280      	movs	r2, #128	; 0x80
void glcd_clear_buffer(void) {
   13806:	b510      	push	{r4, lr}
	memset(glcd_buffer_selected, 0x00, GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8);
   13808:	4b0f      	ldr	r3, [pc, #60]	; (13848 <glcd_clear_buffer+0x44>)
   1380a:	00d2      	lsls	r2, r2, #3
   1380c:	6818      	ldr	r0, [r3, #0]
   1380e:	2100      	movs	r1, #0
   13810:	4b0e      	ldr	r3, [pc, #56]	; (1384c <glcd_clear_buffer+0x48>)
   13812:	4798      	blx	r3
	if (xmin < glcd_bbox_selected->x_min) {
   13814:	4a0e      	ldr	r2, [pc, #56]	; (13850 <glcd_clear_buffer+0x4c>)
   13816:	6813      	ldr	r3, [r2, #0]
   13818:	7819      	ldrb	r1, [r3, #0]
   1381a:	2900      	cmp	r1, #0
   1381c:	d002      	beq.n	13824 <glcd_clear_buffer+0x20>
		glcd_bbox_selected->x_min = xmin;
   1381e:	2100      	movs	r1, #0
   13820:	7019      	strb	r1, [r3, #0]
   13822:	6813      	ldr	r3, [r2, #0]
	if (xmax > glcd_bbox_selected->x_max) {
   13824:	7899      	ldrb	r1, [r3, #2]
   13826:	297e      	cmp	r1, #126	; 0x7e
   13828:	d802      	bhi.n	13830 <glcd_clear_buffer+0x2c>
		glcd_bbox_selected->x_max = xmax;
   1382a:	217f      	movs	r1, #127	; 0x7f
   1382c:	7099      	strb	r1, [r3, #2]
   1382e:	6813      	ldr	r3, [r2, #0]
	if (ymin < glcd_bbox_selected->y_min) {
   13830:	7859      	ldrb	r1, [r3, #1]
   13832:	2900      	cmp	r1, #0
   13834:	d002      	beq.n	1383c <glcd_clear_buffer+0x38>
		glcd_bbox_selected->y_min = ymin;
   13836:	2100      	movs	r1, #0
   13838:	7059      	strb	r1, [r3, #1]
   1383a:	6813      	ldr	r3, [r2, #0]
	if (ymax > glcd_bbox_selected->y_max) {
   1383c:	78da      	ldrb	r2, [r3, #3]
   1383e:	2a3e      	cmp	r2, #62	; 0x3e
   13840:	d801      	bhi.n	13846 <glcd_clear_buffer+0x42>
		glcd_bbox_selected->y_max = ymax;
   13842:	223f      	movs	r2, #63	; 0x3f
   13844:	70da      	strb	r2, [r3, #3]
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
}
   13846:	bd10      	pop	{r4, pc}
   13848:	20001c74 	.word	0x20001c74
   1384c:	0001fdfd 	.word	0x0001fdfd
   13850:	20001c78 	.word	0x20001c78

00013854 <glcd_select_screen>:

void glcd_select_screen(uint8_t *buffer, glcd_BoundingBox_t *bbox)
{
	glcd_buffer_selected = buffer;
   13854:	4b02      	ldr	r3, [pc, #8]	; (13860 <glcd_select_screen+0xc>)
   13856:	6018      	str	r0, [r3, #0]
	glcd_bbox_selected = bbox;
   13858:	4b02      	ldr	r3, [pc, #8]	; (13864 <glcd_select_screen+0x10>)
   1385a:	6019      	str	r1, [r3, #0]
}
   1385c:	4770      	bx	lr
   1385e:	46c0      	nop			; (mov r8, r8)
   13860:	20001c74 	.word	0x20001c74
   13864:	20001c78 	.word	0x20001c78

00013868 <glcd_set_pixel>:
#include <string.h>
#include "glcd.h"

/* Based on PCD8544 library by Limor Fried */
void glcd_set_pixel(uint8_t x, uint8_t y, uint8_t color) {
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   13868:	b243      	sxtb	r3, r0
void glcd_set_pixel(uint8_t x, uint8_t y, uint8_t color) {
   1386a:	b570      	push	{r4, r5, r6, lr}
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1386c:	2b00      	cmp	r3, #0
   1386e:	db12      	blt.n	13896 <glcd_set_pixel+0x2e>
   13870:	293f      	cmp	r1, #63	; 0x3f
   13872:	d810      	bhi.n	13896 <glcd_set_pixel+0x2e>
		return;
	}

	if (color) {
		/* Set black */
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   13874:	08cb      	lsrs	r3, r1, #3
   13876:	01db      	lsls	r3, r3, #7
   13878:	181b      	adds	r3, r3, r0
   1387a:	4d0b      	ldr	r5, [pc, #44]	; (138a8 <glcd_set_pixel+0x40>)
	if (color) {
   1387c:	2a00      	cmp	r2, #0
   1387e:	d00b      	beq.n	13898 <glcd_set_pixel+0x30>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   13880:	2407      	movs	r4, #7
   13882:	2201      	movs	r2, #1
   13884:	400c      	ands	r4, r1
   13886:	40a2      	lsls	r2, r4
   13888:	5cec      	ldrb	r4, [r5, r3]
   1388a:	4322      	orrs	r2, r4
   1388c:	54ea      	strb	r2, [r5, r3]
	} else {
		/* Set white */
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
	}

	glcd_update_bbox(x,y,x,y);
   1388e:	000b      	movs	r3, r1
   13890:	0002      	movs	r2, r0
   13892:	4c06      	ldr	r4, [pc, #24]	; (138ac <glcd_set_pixel+0x44>)
   13894:	47a0      	blx	r4
}
   13896:	bd70      	pop	{r4, r5, r6, pc}
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   13898:	2207      	movs	r2, #7
   1389a:	2401      	movs	r4, #1
   1389c:	400a      	ands	r2, r1
   1389e:	4094      	lsls	r4, r2
   138a0:	5cea      	ldrb	r2, [r5, r3]
   138a2:	43a2      	bics	r2, r4
   138a4:	54ea      	strb	r2, [r5, r3]
   138a6:	e7f2      	b.n	1388e <glcd_set_pixel+0x26>
   138a8:	20001874 	.word	0x20001874
   138ac:	00013785 	.word	0x00013785

000138b0 <glcd_draw_line>:
	glcd_update_bbox(x,y,x,y);
	glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] ^= ( 1 << (y%8));
}

/* Bresenham's algorithm - based on PCD8544 library Limor Fried */
void glcd_draw_line(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) {
   138b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   138b2:	4657      	mov	r7, sl
   138b4:	464e      	mov	r6, r9
   138b6:	4645      	mov	r5, r8
   138b8:	46de      	mov	lr, fp
   138ba:	001c      	movs	r4, r3
   138bc:	b5e0      	push	{r5, r6, r7, lr}
   138be:	000e      	movs	r6, r1
   138c0:	4681      	mov	r9, r0
   138c2:	b087      	sub	sp, #28
   138c4:	ab10      	add	r3, sp, #64	; 0x40
   138c6:	781b      	ldrb	r3, [r3, #0]
   138c8:	0015      	movs	r5, r2
   138ca:	9304      	str	r3, [sp, #16]
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
   138cc:	1ba3      	subs	r3, r4, r6
   138ce:	17d8      	asrs	r0, r3, #31
   138d0:	181b      	adds	r3, r3, r0
   138d2:	4043      	eors	r3, r0
   138d4:	4698      	mov	r8, r3
   138d6:	464b      	mov	r3, r9
   138d8:	1aef      	subs	r7, r5, r3
   138da:	17f8      	asrs	r0, r7, #31
   138dc:	9301      	str	r3, [sp, #4]
   138de:	183b      	adds	r3, r7, r0
   138e0:	4043      	eors	r3, r0
   138e2:	0021      	movs	r1, r4
   138e4:	0032      	movs	r2, r6
   138e6:	46aa      	mov	sl, r5
   138e8:	469b      	mov	fp, r3
   138ea:	9302      	str	r3, [sp, #8]
	uint8_t dx, dy;
	int8_t err;
	int8_t ystep;
	
	if (steep) {
   138ec:	4598      	cmp	r8, r3
   138ee:	dc07      	bgt.n	13900 <glcd_draw_line+0x50>
   138f0:	4643      	mov	r3, r8
   138f2:	46a2      	mov	sl, r4
   138f4:	9601      	str	r6, [sp, #4]
   138f6:	002c      	movs	r4, r5
   138f8:	464e      	mov	r6, r9
   138fa:	000d      	movs	r5, r1
   138fc:	4691      	mov	r9, r2
   138fe:	9302      	str	r3, [sp, #8]
		swap(x0, y0);
		swap(x1, y1);
	}
	
	if (x0 > x1) {
   13900:	42a6      	cmp	r6, r4
   13902:	d800      	bhi.n	13906 <glcd_draw_line+0x56>
   13904:	e094      	b.n	13a30 <glcd_draw_line+0x180>
		swap(x0, x1);
		swap(y0, y1);
	}
	
	glcd_update_bbox( x0, y0, x1, y1 );
   13906:	4f59      	ldr	r7, [pc, #356]	; (13a6c <glcd_draw_line+0x1bc>)
   13908:	464b      	mov	r3, r9
   1390a:	0032      	movs	r2, r6
   1390c:	0029      	movs	r1, r5
   1390e:	0020      	movs	r0, r4
   13910:	9705      	str	r7, [sp, #20]
   13912:	47b8      	blx	r7

	dx = x1 - x0;
	dy = abs(y1 - y0);
   13914:	4651      	mov	r1, sl
	dx = x1 - x0;
   13916:	1b33      	subs	r3, r6, r4
   13918:	b2db      	uxtb	r3, r3
   1391a:	001a      	movs	r2, r3
   1391c:	9303      	str	r3, [sp, #12]
	dy = abs(y1 - y0);
   1391e:	9b01      	ldr	r3, [sp, #4]
	
	err = dx / 2;
   13920:	0857      	lsrs	r7, r2, #1
	dy = abs(y1 - y0);
   13922:	1a5b      	subs	r3, r3, r1
   13924:	17d9      	asrs	r1, r3, #31
   13926:	185b      	adds	r3, r3, r1
   13928:	404b      	eors	r3, r1
   1392a:	b2db      	uxtb	r3, r3
   1392c:	469a      	mov	sl, r3
	
	if (y0 < y1) {
   1392e:	2301      	movs	r3, #1
   13930:	9302      	str	r3, [sp, #8]
   13932:	45a9      	cmp	r9, r5
   13934:	d800      	bhi.n	13938 <glcd_draw_line+0x88>
   13936:	e096      	b.n	13a66 <glcd_draw_line+0x1b6>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   13938:	4642      	mov	r2, r8
   1393a:	4b4d      	ldr	r3, [pc, #308]	; (13a70 <glcd_draw_line+0x1c0>)
   1393c:	9201      	str	r2, [sp, #4]
   1393e:	4699      	mov	r9, r3
   13940:	46b0      	mov	r8, r6
   13942:	e00d      	b.n	13960 <glcd_draw_line+0xb0>
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   13944:	062b      	lsls	r3, r5, #24
   13946:	d401      	bmi.n	1394c <glcd_draw_line+0x9c>
   13948:	2c3f      	cmp	r4, #63	; 0x3f
   1394a:	d93f      	bls.n	139cc <glcd_draw_line+0x11c>
		if (steep) {
			glcd_set_pixel(y0, x0, color);
		} else {
			glcd_set_pixel(x0, y0, color);
		}
		err -= dy;
   1394c:	4653      	mov	r3, sl
   1394e:	1aff      	subs	r7, r7, r3
   13950:	b2fb      	uxtb	r3, r7
   13952:	b25f      	sxtb	r7, r3
		if (err < 0) {
   13954:	2f00      	cmp	r7, #0
   13956:	db26      	blt.n	139a6 <glcd_draw_line+0xf6>
	for (; x0<=x1; x0++) {
   13958:	3401      	adds	r4, #1
   1395a:	b2e4      	uxtb	r4, r4
   1395c:	4544      	cmp	r4, r8
   1395e:	d82e      	bhi.n	139be <glcd_draw_line+0x10e>
		if (steep) {
   13960:	9b01      	ldr	r3, [sp, #4]
   13962:	455b      	cmp	r3, fp
   13964:	dcee      	bgt.n	13944 <glcd_draw_line+0x94>
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   13966:	0623      	lsls	r3, r4, #24
   13968:	d4f0      	bmi.n	1394c <glcd_draw_line+0x9c>
   1396a:	2d3f      	cmp	r5, #63	; 0x3f
   1396c:	d8ee      	bhi.n	1394c <glcd_draw_line+0x9c>
	if (color) {
   1396e:	9b04      	ldr	r3, [sp, #16]
   13970:	2b00      	cmp	r3, #0
   13972:	d041      	beq.n	139f8 <glcd_draw_line+0x148>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   13974:	2107      	movs	r1, #7
   13976:	2201      	movs	r2, #1
   13978:	4029      	ands	r1, r5
   1397a:	408a      	lsls	r2, r1
   1397c:	08eb      	lsrs	r3, r5, #3
   1397e:	b2db      	uxtb	r3, r3
   13980:	01db      	lsls	r3, r3, #7
   13982:	493b      	ldr	r1, [pc, #236]	; (13a70 <glcd_draw_line+0x1c0>)
   13984:	191b      	adds	r3, r3, r4
   13986:	5cc9      	ldrb	r1, [r1, r3]
   13988:	430a      	orrs	r2, r1
   1398a:	4939      	ldr	r1, [pc, #228]	; (13a70 <glcd_draw_line+0x1c0>)
   1398c:	54ca      	strb	r2, [r1, r3]
	glcd_update_bbox(x,y,x,y);
   1398e:	002b      	movs	r3, r5
   13990:	0022      	movs	r2, r4
   13992:	0029      	movs	r1, r5
   13994:	0020      	movs	r0, r4
   13996:	9e05      	ldr	r6, [sp, #20]
   13998:	47b0      	blx	r6
		err -= dy;
   1399a:	4653      	mov	r3, sl
   1399c:	1aff      	subs	r7, r7, r3
   1399e:	b2fb      	uxtb	r3, r7
   139a0:	b25f      	sxtb	r7, r3
		if (err < 0) {
   139a2:	2f00      	cmp	r7, #0
   139a4:	dad8      	bge.n	13958 <glcd_draw_line+0xa8>
			y0 += ystep;
   139a6:	9a02      	ldr	r2, [sp, #8]
	for (; x0<=x1; x0++) {
   139a8:	3401      	adds	r4, #1
			y0 += ystep;
   139aa:	4694      	mov	ip, r2
			err += dx;
   139ac:	9a03      	ldr	r2, [sp, #12]
			y0 += ystep;
   139ae:	4465      	add	r5, ip
			err += dx;
   139b0:	4694      	mov	ip, r2
	for (; x0<=x1; x0++) {
   139b2:	b2e4      	uxtb	r4, r4
			err += dx;
   139b4:	4463      	add	r3, ip
			y0 += ystep;
   139b6:	b2ed      	uxtb	r5, r5
			err += dx;
   139b8:	b25f      	sxtb	r7, r3
	for (; x0<=x1; x0++) {
   139ba:	4544      	cmp	r4, r8
   139bc:	d9d0      	bls.n	13960 <glcd_draw_line+0xb0>
		}
	}
}
   139be:	b007      	add	sp, #28
   139c0:	bc3c      	pop	{r2, r3, r4, r5}
   139c2:	4690      	mov	r8, r2
   139c4:	4699      	mov	r9, r3
   139c6:	46a2      	mov	sl, r4
   139c8:	46ab      	mov	fp, r5
   139ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (color) {
   139cc:	9b04      	ldr	r3, [sp, #16]
   139ce:	2b00      	cmp	r3, #0
   139d0:	d020      	beq.n	13a14 <glcd_draw_line+0x164>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   139d2:	2007      	movs	r0, #7
   139d4:	2201      	movs	r2, #1
   139d6:	4020      	ands	r0, r4
   139d8:	4082      	lsls	r2, r0
   139da:	08e3      	lsrs	r3, r4, #3
   139dc:	b2db      	uxtb	r3, r3
   139de:	4924      	ldr	r1, [pc, #144]	; (13a70 <glcd_draw_line+0x1c0>)
   139e0:	01db      	lsls	r3, r3, #7
   139e2:	195b      	adds	r3, r3, r5
   139e4:	5cc8      	ldrb	r0, [r1, r3]
   139e6:	4302      	orrs	r2, r0
   139e8:	54ca      	strb	r2, [r1, r3]
	glcd_update_bbox(x,y,x,y);
   139ea:	0023      	movs	r3, r4
   139ec:	002a      	movs	r2, r5
   139ee:	0021      	movs	r1, r4
   139f0:	0028      	movs	r0, r5
   139f2:	9e05      	ldr	r6, [sp, #20]
   139f4:	47b0      	blx	r6
   139f6:	e7a9      	b.n	1394c <glcd_draw_line+0x9c>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   139f8:	2207      	movs	r2, #7
   139fa:	2101      	movs	r1, #1
   139fc:	402a      	ands	r2, r5
   139fe:	4091      	lsls	r1, r2
   13a00:	464a      	mov	r2, r9
   13a02:	08eb      	lsrs	r3, r5, #3
   13a04:	b2db      	uxtb	r3, r3
   13a06:	01db      	lsls	r3, r3, #7
   13a08:	191b      	adds	r3, r3, r4
   13a0a:	5cd2      	ldrb	r2, [r2, r3]
   13a0c:	438a      	bics	r2, r1
   13a0e:	4649      	mov	r1, r9
   13a10:	54ca      	strb	r2, [r1, r3]
   13a12:	e7bc      	b.n	1398e <glcd_draw_line+0xde>
   13a14:	2207      	movs	r2, #7
   13a16:	2101      	movs	r1, #1
   13a18:	4022      	ands	r2, r4
   13a1a:	4091      	lsls	r1, r2
   13a1c:	08e3      	lsrs	r3, r4, #3
   13a1e:	b2db      	uxtb	r3, r3
   13a20:	01db      	lsls	r3, r3, #7
   13a22:	4a13      	ldr	r2, [pc, #76]	; (13a70 <glcd_draw_line+0x1c0>)
   13a24:	195b      	adds	r3, r3, r5
   13a26:	5cd2      	ldrb	r2, [r2, r3]
   13a28:	438a      	bics	r2, r1
   13a2a:	4911      	ldr	r1, [pc, #68]	; (13a70 <glcd_draw_line+0x1c0>)
   13a2c:	54ca      	strb	r2, [r1, r3]
   13a2e:	e7dc      	b.n	139ea <glcd_draw_line+0x13a>
	glcd_update_bbox( x0, y0, x1, y1 );
   13a30:	4f0e      	ldr	r7, [pc, #56]	; (13a6c <glcd_draw_line+0x1bc>)
   13a32:	002b      	movs	r3, r5
   13a34:	0022      	movs	r2, r4
   13a36:	4649      	mov	r1, r9
   13a38:	0030      	movs	r0, r6
   13a3a:	9705      	str	r7, [sp, #20]
   13a3c:	47b8      	blx	r7
	dy = abs(y1 - y0);
   13a3e:	466a      	mov	r2, sp
	dx = x1 - x0;
   13a40:	1ba3      	subs	r3, r4, r6
	dy = abs(y1 - y0);
   13a42:	7a12      	ldrb	r2, [r2, #8]
	dx = x1 - x0;
   13a44:	b2db      	uxtb	r3, r3
   13a46:	9303      	str	r3, [sp, #12]
	dy = abs(y1 - y0);
   13a48:	4692      	mov	sl, r2
	err = dx / 2;
   13a4a:	085f      	lsrs	r7, r3, #1
	if (y0 < y1) {
   13a4c:	45a9      	cmp	r9, r5
   13a4e:	d206      	bcs.n	13a5e <glcd_draw_line+0x1ae>
   13a50:	0023      	movs	r3, r4
   13a52:	0034      	movs	r4, r6
   13a54:	001e      	movs	r6, r3
   13a56:	2301      	movs	r3, #1
   13a58:	464d      	mov	r5, r9
   13a5a:	9302      	str	r3, [sp, #8]
   13a5c:	e76c      	b.n	13938 <glcd_draw_line+0x88>
   13a5e:	0023      	movs	r3, r4
   13a60:	464d      	mov	r5, r9
   13a62:	0034      	movs	r4, r6
   13a64:	001e      	movs	r6, r3
   13a66:	23ff      	movs	r3, #255	; 0xff
   13a68:	9302      	str	r3, [sp, #8]
   13a6a:	e765      	b.n	13938 <glcd_draw_line+0x88>
   13a6c:	00013785 	.word	0x00013785
   13a70:	20001874 	.word	0x20001874

00013a74 <glcd_fill_rect>:

void glcd_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
   13a74:	b5f0      	push	{r4, r5, r6, r7, lr}
   13a76:	464e      	mov	r6, r9
   13a78:	46de      	mov	lr, fp
   13a7a:	4657      	mov	r7, sl
   13a7c:	4645      	mov	r5, r8
   13a7e:	b5e0      	push	{r5, r6, r7, lr}
   13a80:	b089      	sub	sp, #36	; 0x24
   13a82:	9305      	str	r3, [sp, #20]
   13a84:	ab12      	add	r3, sp, #72	; 0x48
   13a86:	9101      	str	r1, [sp, #4]
	int16_t i;
	for (i=x; i<x+w; i++) {
   13a88:	4684      	mov	ip, r0
{
   13a8a:	7819      	ldrb	r1, [r3, #0]
	for (i=x; i<x+w; i++) {
   13a8c:	0013      	movs	r3, r2
   13a8e:	4463      	add	r3, ip
{
   13a90:	9006      	str	r0, [sp, #24]
   13a92:	9207      	str	r2, [sp, #28]
   13a94:	9104      	str	r1, [sp, #16]
	for (i=x; i<x+w; i++) {
   13a96:	b206      	sxth	r6, r0
   13a98:	9302      	str	r3, [sp, #8]
   13a9a:	4298      	cmp	r0, r3
   13a9c:	db00      	blt.n	13aa0 <glcd_fill_rect+0x2c>
   13a9e:	e076      	b.n	13b8e <glcd_fill_rect+0x11a>
   13aa0:	9a01      	ldr	r2, [sp, #4]
   13aa2:	4694      	mov	ip, r2
   13aa4:	b213      	sxth	r3, r2
   13aa6:	9303      	str	r3, [sp, #12]
   13aa8:	9b05      	ldr	r3, [sp, #20]
   13aaa:	4463      	add	r3, ip
   13aac:	001d      	movs	r5, r3
   13aae:	4b39      	ldr	r3, [pc, #228]	; (13b94 <glcd_fill_rect+0x120>)
   13ab0:	4698      	mov	r8, r3
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   13ab2:	4b39      	ldr	r3, [pc, #228]	; (13b98 <glcd_fill_rect+0x124>)
   13ab4:	4699      	mov	r9, r3
		int16_t j;
		for (j=y; j<y+h; j++) {
   13ab6:	9b01      	ldr	r3, [sp, #4]
   13ab8:	42ab      	cmp	r3, r5
   13aba:	da26      	bge.n	13b0a <glcd_fill_rect+0x96>
   13abc:	b2f7      	uxtb	r7, r6
   13abe:	0633      	lsls	r3, r6, #24
   13ac0:	d45a      	bmi.n	13b78 <glcd_fill_rect+0x104>
   13ac2:	9b04      	ldr	r3, [sp, #16]
   13ac4:	9c03      	ldr	r4, [sp, #12]
   13ac6:	2b00      	cmp	r3, #0
   13ac8:	d138      	bne.n	13b3c <glcd_fill_rect+0xc8>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   13aca:	3307      	adds	r3, #7
   13acc:	469b      	mov	fp, r3
   13ace:	3b06      	subs	r3, #6
   13ad0:	469a      	mov	sl, r3
   13ad2:	e003      	b.n	13adc <glcd_fill_rect+0x68>
   13ad4:	3401      	adds	r4, #1
   13ad6:	b224      	sxth	r4, r4
		for (j=y; j<y+h; j++) {
   13ad8:	42a5      	cmp	r5, r4
   13ada:	dd16      	ble.n	13b0a <glcd_fill_rect+0x96>
			glcd_set_pixel(i, j, color);
   13adc:	b2e1      	uxtb	r1, r4
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   13ade:	293f      	cmp	r1, #63	; 0x3f
   13ae0:	d8f8      	bhi.n	13ad4 <glcd_fill_rect+0x60>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   13ae2:	465a      	mov	r2, fp
   13ae4:	4650      	mov	r0, sl
   13ae6:	400a      	ands	r2, r1
   13ae8:	4090      	lsls	r0, r2
   13aea:	08cb      	lsrs	r3, r1, #3
   13aec:	4a2a      	ldr	r2, [pc, #168]	; (13b98 <glcd_fill_rect+0x124>)
   13aee:	01db      	lsls	r3, r3, #7
   13af0:	19db      	adds	r3, r3, r7
   13af2:	5cd2      	ldrb	r2, [r2, r3]
   13af4:	3401      	adds	r4, #1
   13af6:	4382      	bics	r2, r0
   13af8:	4827      	ldr	r0, [pc, #156]	; (13b98 <glcd_fill_rect+0x124>)
   13afa:	b224      	sxth	r4, r4
   13afc:	54c2      	strb	r2, [r0, r3]
	glcd_update_bbox(x,y,x,y);
   13afe:	000b      	movs	r3, r1
   13b00:	003a      	movs	r2, r7
   13b02:	0038      	movs	r0, r7
   13b04:	47c0      	blx	r8
		for (j=y; j<y+h; j++) {
   13b06:	42a5      	cmp	r5, r4
   13b08:	dce8      	bgt.n	13adc <glcd_fill_rect+0x68>
   13b0a:	3601      	adds	r6, #1
	for (i=x; i<x+w; i++) {
   13b0c:	9b02      	ldr	r3, [sp, #8]
   13b0e:	b236      	sxth	r6, r6
   13b10:	429e      	cmp	r6, r3
   13b12:	dbd0      	blt.n	13ab6 <glcd_fill_rect+0x42>
   13b14:	9806      	ldr	r0, [sp, #24]
		}
	}
	glcd_update_bbox(x, y, x+w-1, y+h-1);
   13b16:	9901      	ldr	r1, [sp, #4]
   13b18:	9b05      	ldr	r3, [sp, #20]
   13b1a:	468c      	mov	ip, r1
   13b1c:	3b01      	subs	r3, #1
   13b1e:	4463      	add	r3, ip
   13b20:	4684      	mov	ip, r0
   13b22:	9a07      	ldr	r2, [sp, #28]
   13b24:	b2db      	uxtb	r3, r3
   13b26:	3a01      	subs	r2, #1
   13b28:	4462      	add	r2, ip
   13b2a:	b2d2      	uxtb	r2, r2
   13b2c:	47c0      	blx	r8
}
   13b2e:	b009      	add	sp, #36	; 0x24
   13b30:	bc3c      	pop	{r2, r3, r4, r5}
   13b32:	4690      	mov	r8, r2
   13b34:	4699      	mov	r9, r3
   13b36:	46a2      	mov	sl, r4
   13b38:	46ab      	mov	fp, r5
   13b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   13b3c:	2307      	movs	r3, #7
   13b3e:	469b      	mov	fp, r3
   13b40:	3b06      	subs	r3, #6
   13b42:	469a      	mov	sl, r3
   13b44:	e003      	b.n	13b4e <glcd_fill_rect+0xda>
   13b46:	3401      	adds	r4, #1
   13b48:	b224      	sxth	r4, r4
		for (j=y; j<y+h; j++) {
   13b4a:	42a5      	cmp	r5, r4
   13b4c:	dddd      	ble.n	13b0a <glcd_fill_rect+0x96>
			glcd_set_pixel(i, j, color);
   13b4e:	b2e1      	uxtb	r1, r4
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   13b50:	293f      	cmp	r1, #63	; 0x3f
   13b52:	d8f8      	bhi.n	13b46 <glcd_fill_rect+0xd2>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   13b54:	465a      	mov	r2, fp
   13b56:	4650      	mov	r0, sl
   13b58:	400a      	ands	r2, r1
   13b5a:	4090      	lsls	r0, r2
   13b5c:	0002      	movs	r2, r0
   13b5e:	4648      	mov	r0, r9
   13b60:	08cb      	lsrs	r3, r1, #3
   13b62:	01db      	lsls	r3, r3, #7
   13b64:	19db      	adds	r3, r3, r7
   13b66:	5cc0      	ldrb	r0, [r0, r3]
   13b68:	4302      	orrs	r2, r0
   13b6a:	4648      	mov	r0, r9
   13b6c:	54c2      	strb	r2, [r0, r3]
	glcd_update_bbox(x,y,x,y);
   13b6e:	000b      	movs	r3, r1
   13b70:	003a      	movs	r2, r7
   13b72:	0038      	movs	r0, r7
   13b74:	47c0      	blx	r8
   13b76:	e7e6      	b.n	13b46 <glcd_fill_rect+0xd2>
		for (j=y; j<y+h; j++) {
   13b78:	9b03      	ldr	r3, [sp, #12]
   13b7a:	3301      	adds	r3, #1
   13b7c:	b21b      	sxth	r3, r3
   13b7e:	42ab      	cmp	r3, r5
   13b80:	dbfb      	blt.n	13b7a <glcd_fill_rect+0x106>
   13b82:	3601      	adds	r6, #1
	for (i=x; i<x+w; i++) {
   13b84:	9b02      	ldr	r3, [sp, #8]
   13b86:	b236      	sxth	r6, r6
   13b88:	429e      	cmp	r6, r3
   13b8a:	db94      	blt.n	13ab6 <glcd_fill_rect+0x42>
   13b8c:	e7c2      	b.n	13b14 <glcd_fill_rect+0xa0>
   13b8e:	4b01      	ldr	r3, [pc, #4]	; (13b94 <glcd_fill_rect+0x120>)
   13b90:	4698      	mov	r8, r3
   13b92:	e7c0      	b.n	13b16 <glcd_fill_rect+0xa2>
   13b94:	00013785 	.word	0x00013785
   13b98:	20001874 	.word	0x20001874

00013b9c <glcd_draw_rect>:

void glcd_draw_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
   13b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   13b9e:	46de      	mov	lr, fp
   13ba0:	4657      	mov	r7, sl
   13ba2:	4645      	mov	r5, r8
   13ba4:	464e      	mov	r6, r9
   13ba6:	b5e0      	push	{r5, r6, r7, lr}
   13ba8:	b08b      	sub	sp, #44	; 0x2c
   13baa:	9302      	str	r3, [sp, #8]
   13bac:	ab14      	add	r3, sp, #80	; 0x50
   13bae:	781b      	ldrb	r3, [r3, #0]
   13bb0:	4683      	mov	fp, r0
   13bb2:	9304      	str	r3, [sp, #16]
	int16_t i;
	for (i=x; i<x+w; i++) {
   13bb4:	0013      	movs	r3, r2
   13bb6:	445b      	add	r3, fp
   13bb8:	001d      	movs	r5, r3
   13bba:	9b02      	ldr	r3, [sp, #8]
{
   13bbc:	468a      	mov	sl, r1
   13bbe:	3b01      	subs	r3, #1
   13bc0:	9205      	str	r2, [sp, #20]
	for (i=x; i<x+w; i++) {
   13bc2:	b204      	sxth	r4, r0
   13bc4:	9306      	str	r3, [sp, #24]
   13bc6:	42a8      	cmp	r0, r5
   13bc8:	da21      	bge.n	13c0e <glcd_draw_rect+0x72>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   13bca:	2701      	movs	r7, #1
   13bcc:	4453      	add	r3, sl
   13bce:	b2de      	uxtb	r6, r3
   13bd0:	08cb      	lsrs	r3, r1, #3
   13bd2:	01db      	lsls	r3, r3, #7
   13bd4:	000a      	movs	r2, r1
   13bd6:	9307      	str	r3, [sp, #28]
   13bd8:	2307      	movs	r3, #7
   13bda:	0039      	movs	r1, r7
   13bdc:	401a      	ands	r2, r3
   13bde:	4091      	lsls	r1, r2
   13be0:	4033      	ands	r3, r6
   13be2:	409f      	lsls	r7, r3
   13be4:	b24a      	sxtb	r2, r1
   13be6:	4690      	mov	r8, r2
   13be8:	43d2      	mvns	r2, r2
   13bea:	b27f      	sxtb	r7, r7
   13bec:	43fb      	mvns	r3, r7
   13bee:	9208      	str	r2, [sp, #32]
   13bf0:	08f2      	lsrs	r2, r6, #3
   13bf2:	01d2      	lsls	r2, r2, #7
   13bf4:	4699      	mov	r9, r3
   13bf6:	9203      	str	r2, [sp, #12]
   13bf8:	4653      	mov	r3, sl
   13bfa:	2e3f      	cmp	r6, #63	; 0x3f
   13bfc:	d800      	bhi.n	13c00 <glcd_draw_rect+0x64>
   13bfe:	e0a7      	b.n	13d50 <glcd_draw_rect+0x1b4>
   13c00:	2b3f      	cmp	r3, #63	; 0x3f
   13c02:	d800      	bhi.n	13c06 <glcd_draw_rect+0x6a>
   13c04:	e0c3      	b.n	13d8e <glcd_draw_rect+0x1f2>
   13c06:	3401      	adds	r4, #1
   13c08:	b224      	sxth	r4, r4
	for (i=x; i<x+w; i++) {
   13c0a:	42ac      	cmp	r4, r5
   13c0c:	dbfb      	blt.n	13c06 <glcd_draw_rect+0x6a>
   13c0e:	4bbb      	ldr	r3, [pc, #748]	; (13efc <glcd_draw_rect+0x360>)
   13c10:	9301      	str	r3, [sp, #4]
   13c12:	9b06      	ldr	r3, [sp, #24]
   13c14:	4453      	add	r3, sl
   13c16:	b2db      	uxtb	r3, r3
   13c18:	9306      	str	r3, [sp, #24]
		glcd_set_pixel(i, y, color);
		glcd_set_pixel(i, y+h-1, color);
	}
	for (i=y; i<y+h; i++) {
   13c1a:	4653      	mov	r3, sl
   13c1c:	b21c      	sxth	r4, r3
   13c1e:	9b02      	ldr	r3, [sp, #8]
   13c20:	4453      	add	r3, sl
   13c22:	4698      	mov	r8, r3
   13c24:	4553      	cmp	r3, sl
   13c26:	dc00      	bgt.n	13c2a <glcd_draw_rect+0x8e>
   13c28:	e134      	b.n	13e94 <glcd_draw_rect+0x2f8>
   13c2a:	465b      	mov	r3, fp
   13c2c:	466a      	mov	r2, sp
   13c2e:	7213      	strb	r3, [r2, #8]
   13c30:	7a13      	ldrb	r3, [r2, #8]
   13c32:	b25b      	sxtb	r3, r3
   13c34:	4699      	mov	r9, r3
   13c36:	9b05      	ldr	r3, [sp, #20]
   13c38:	3b01      	subs	r3, #1
   13c3a:	9307      	str	r3, [sp, #28]
   13c3c:	445b      	add	r3, fp
   13c3e:	b2db      	uxtb	r3, r3
   13c40:	9305      	str	r3, [sp, #20]
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   13c42:	b25b      	sxtb	r3, r3
   13c44:	9303      	str	r3, [sp, #12]
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   13c46:	4653      	mov	r3, sl
   13c48:	9308      	str	r3, [sp, #32]
   13c4a:	e005      	b.n	13c58 <glcd_draw_rect+0xbc>
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   13c4c:	2d3f      	cmp	r5, #63	; 0x3f
   13c4e:	d93f      	bls.n	13cd0 <glcd_draw_rect+0x134>
   13c50:	3401      	adds	r4, #1
   13c52:	b224      	sxth	r4, r4
	for (i=y; i<y+h; i++) {
   13c54:	45a0      	cmp	r8, r4
   13c56:	dd2a      	ble.n	13cae <glcd_draw_rect+0x112>
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   13c58:	464b      	mov	r3, r9
		glcd_set_pixel(x, i, color);
   13c5a:	b2e5      	uxtb	r5, r4
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   13c5c:	2b00      	cmp	r3, #0
   13c5e:	daf5      	bge.n	13c4c <glcd_draw_rect+0xb0>
   13c60:	9b03      	ldr	r3, [sp, #12]
   13c62:	2b00      	cmp	r3, #0
   13c64:	dbf4      	blt.n	13c50 <glcd_draw_rect+0xb4>
   13c66:	2d3f      	cmp	r5, #63	; 0x3f
   13c68:	d8f2      	bhi.n	13c50 <glcd_draw_rect+0xb4>
   13c6a:	08ef      	lsrs	r7, r5, #3
   13c6c:	01fb      	lsls	r3, r7, #7
   13c6e:	9302      	str	r3, [sp, #8]
   13c70:	2307      	movs	r3, #7
   13c72:	2601      	movs	r6, #1
   13c74:	402b      	ands	r3, r5
   13c76:	409e      	lsls	r6, r3
	if (color) {
   13c78:	9b04      	ldr	r3, [sp, #16]
   13c7a:	b276      	sxtb	r6, r6
   13c7c:	2b00      	cmp	r3, #0
   13c7e:	d100      	bne.n	13c82 <glcd_draw_rect+0xe6>
   13c80:	e138      	b.n	13ef4 <glcd_draw_rect+0x358>
   13c82:	4b9f      	ldr	r3, [pc, #636]	; (13f00 <glcd_draw_rect+0x364>)
   13c84:	469a      	mov	sl, r3
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   13c86:	9b05      	ldr	r3, [sp, #20]
   13c88:	469c      	mov	ip, r3
   13c8a:	9b02      	ldr	r3, [sp, #8]
   13c8c:	4463      	add	r3, ip
   13c8e:	001f      	movs	r7, r3
   13c90:	4653      	mov	r3, sl
   13c92:	5ddb      	ldrb	r3, [r3, r7]
   13c94:	431e      	orrs	r6, r3
   13c96:	4653      	mov	r3, sl
   13c98:	55de      	strb	r6, [r3, r7]
	glcd_update_bbox(x,y,x,y);
   13c9a:	9805      	ldr	r0, [sp, #20]
   13c9c:	3401      	adds	r4, #1
   13c9e:	002b      	movs	r3, r5
   13ca0:	0029      	movs	r1, r5
   13ca2:	0002      	movs	r2, r0
   13ca4:	9d01      	ldr	r5, [sp, #4]
   13ca6:	b224      	sxth	r4, r4
   13ca8:	47a8      	blx	r5
	for (i=y; i<y+h; i++) {
   13caa:	45a0      	cmp	r8, r4
   13cac:	dcd4      	bgt.n	13c58 <glcd_draw_rect+0xbc>
   13cae:	9b08      	ldr	r3, [sp, #32]
   13cb0:	469a      	mov	sl, r3
   13cb2:	9b07      	ldr	r3, [sp, #28]
		glcd_set_pixel(x+w-1, i, color);
	} 
	glcd_update_bbox(x, y, x+w-1, y+h-1);
   13cb4:	445b      	add	r3, fp
   13cb6:	b2da      	uxtb	r2, r3
   13cb8:	4651      	mov	r1, sl
   13cba:	9b06      	ldr	r3, [sp, #24]
   13cbc:	4658      	mov	r0, fp
   13cbe:	9c01      	ldr	r4, [sp, #4]
   13cc0:	47a0      	blx	r4
}
   13cc2:	b00b      	add	sp, #44	; 0x2c
   13cc4:	bc3c      	pop	{r2, r3, r4, r5}
   13cc6:	4690      	mov	r8, r2
   13cc8:	4699      	mov	r9, r3
   13cca:	46a2      	mov	sl, r4
   13ccc:	46ab      	mov	fp, r5
   13cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   13cd0:	08ef      	lsrs	r7, r5, #3
	if (color) {
   13cd2:	9b04      	ldr	r3, [sp, #16]
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   13cd4:	01fa      	lsls	r2, r7, #7
   13cd6:	9202      	str	r2, [sp, #8]
	if (color) {
   13cd8:	2b00      	cmp	r3, #0
   13cda:	d016      	beq.n	13d0a <glcd_draw_rect+0x16e>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   13cdc:	465b      	mov	r3, fp
   13cde:	189a      	adds	r2, r3, r2
   13ce0:	2307      	movs	r3, #7
   13ce2:	2601      	movs	r6, #1
   13ce4:	402b      	ands	r3, r5
   13ce6:	409e      	lsls	r6, r3
   13ce8:	4b85      	ldr	r3, [pc, #532]	; (13f00 <glcd_draw_rect+0x364>)
   13cea:	b276      	sxtb	r6, r6
   13cec:	469a      	mov	sl, r3
   13cee:	4651      	mov	r1, sl
   13cf0:	5c9b      	ldrb	r3, [r3, r2]
	glcd_update_bbox(x,y,x,y);
   13cf2:	4658      	mov	r0, fp
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   13cf4:	4333      	orrs	r3, r6
   13cf6:	548b      	strb	r3, [r1, r2]
	glcd_update_bbox(x,y,x,y);
   13cf8:	9f01      	ldr	r7, [sp, #4]
   13cfa:	002b      	movs	r3, r5
   13cfc:	465a      	mov	r2, fp
   13cfe:	0029      	movs	r1, r5
   13d00:	47b8      	blx	r7
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   13d02:	9b03      	ldr	r3, [sp, #12]
   13d04:	2b00      	cmp	r3, #0
   13d06:	dba3      	blt.n	13c50 <glcd_draw_rect+0xb4>
   13d08:	e7bd      	b.n	13c86 <glcd_draw_rect+0xea>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   13d0a:	465b      	mov	r3, fp
   13d0c:	189a      	adds	r2, r3, r2
   13d0e:	2307      	movs	r3, #7
   13d10:	2601      	movs	r6, #1
   13d12:	402b      	ands	r3, r5
   13d14:	409e      	lsls	r6, r3
   13d16:	4b7a      	ldr	r3, [pc, #488]	; (13f00 <glcd_draw_rect+0x364>)
   13d18:	b276      	sxtb	r6, r6
   13d1a:	469a      	mov	sl, r3
   13d1c:	43f6      	mvns	r6, r6
   13d1e:	4651      	mov	r1, sl
   13d20:	5c9b      	ldrb	r3, [r3, r2]
	glcd_update_bbox(x,y,x,y);
   13d22:	4658      	mov	r0, fp
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   13d24:	4033      	ands	r3, r6
   13d26:	548b      	strb	r3, [r1, r2]
	glcd_update_bbox(x,y,x,y);
   13d28:	9f01      	ldr	r7, [sp, #4]
   13d2a:	002b      	movs	r3, r5
   13d2c:	465a      	mov	r2, fp
   13d2e:	0029      	movs	r1, r5
   13d30:	47b8      	blx	r7
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   13d32:	9b03      	ldr	r3, [sp, #12]
   13d34:	2b00      	cmp	r3, #0
   13d36:	da00      	bge.n	13d3a <glcd_draw_rect+0x19e>
   13d38:	e78a      	b.n	13c50 <glcd_draw_rect+0xb4>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   13d3a:	9b05      	ldr	r3, [sp, #20]
   13d3c:	469c      	mov	ip, r3
   13d3e:	9b02      	ldr	r3, [sp, #8]
   13d40:	4463      	add	r3, ip
   13d42:	001f      	movs	r7, r3
   13d44:	4653      	mov	r3, sl
   13d46:	5ddb      	ldrb	r3, [r3, r7]
   13d48:	401e      	ands	r6, r3
   13d4a:	4653      	mov	r3, sl
   13d4c:	55de      	strb	r6, [r3, r7]
   13d4e:	e7a4      	b.n	13c9a <glcd_draw_rect+0xfe>
   13d50:	2b3f      	cmp	r3, #63	; 0x3f
   13d52:	d93b      	bls.n	13dcc <glcd_draw_rect+0x230>
   13d54:	9b04      	ldr	r3, [sp, #16]
   13d56:	2b00      	cmp	r3, #0
   13d58:	d168      	bne.n	13e2c <glcd_draw_rect+0x290>
   13d5a:	4b68      	ldr	r3, [pc, #416]	; (13efc <glcd_draw_rect+0x360>)
   13d5c:	4f68      	ldr	r7, [pc, #416]	; (13f00 <glcd_draw_rect+0x364>)
   13d5e:	9301      	str	r3, [sp, #4]
   13d60:	9b03      	ldr	r3, [sp, #12]
   13d62:	9503      	str	r5, [sp, #12]
   13d64:	4698      	mov	r8, r3
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   13d66:	0623      	lsls	r3, r4, #24
   13d68:	d40b      	bmi.n	13d82 <glcd_draw_rect+0x1e6>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   13d6a:	4643      	mov	r3, r8
   13d6c:	4649      	mov	r1, r9
		glcd_set_pixel(i, y, color);
   13d6e:	b2e0      	uxtb	r0, r4
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   13d70:	18c2      	adds	r2, r0, r3
   13d72:	5cbb      	ldrb	r3, [r7, r2]
	glcd_update_bbox(x,y,x,y);
   13d74:	9d01      	ldr	r5, [sp, #4]
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   13d76:	400b      	ands	r3, r1
   13d78:	54bb      	strb	r3, [r7, r2]
	glcd_update_bbox(x,y,x,y);
   13d7a:	0031      	movs	r1, r6
   13d7c:	0033      	movs	r3, r6
   13d7e:	0002      	movs	r2, r0
   13d80:	47a8      	blx	r5
   13d82:	3401      	adds	r4, #1
	for (i=x; i<x+w; i++) {
   13d84:	9b03      	ldr	r3, [sp, #12]
   13d86:	b224      	sxth	r4, r4
   13d88:	42a3      	cmp	r3, r4
   13d8a:	dcec      	bgt.n	13d66 <glcd_draw_rect+0x1ca>
   13d8c:	e741      	b.n	13c12 <glcd_draw_rect+0x76>
   13d8e:	9b04      	ldr	r3, [sp, #16]
   13d90:	2b00      	cmp	r3, #0
   13d92:	d165      	bne.n	13e60 <glcd_draw_rect+0x2c4>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   13d94:	9a07      	ldr	r2, [sp, #28]
   13d96:	4b59      	ldr	r3, [pc, #356]	; (13efc <glcd_draw_rect+0x360>)
   13d98:	4690      	mov	r8, r2
   13d9a:	9a08      	ldr	r2, [sp, #32]
   13d9c:	4657      	mov	r7, sl
   13d9e:	4691      	mov	r9, r2
   13da0:	469a      	mov	sl, r3
   13da2:	4e57      	ldr	r6, [pc, #348]	; (13f00 <glcd_draw_rect+0x364>)
   13da4:	9301      	str	r3, [sp, #4]
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   13da6:	0623      	lsls	r3, r4, #24
   13da8:	d40a      	bmi.n	13dc0 <glcd_draw_rect+0x224>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   13daa:	4643      	mov	r3, r8
   13dac:	4649      	mov	r1, r9
		glcd_set_pixel(i, y, color);
   13dae:	b2e0      	uxtb	r0, r4
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   13db0:	18c2      	adds	r2, r0, r3
   13db2:	5cb3      	ldrb	r3, [r6, r2]
   13db4:	400b      	ands	r3, r1
   13db6:	54b3      	strb	r3, [r6, r2]
	glcd_update_bbox(x,y,x,y);
   13db8:	0039      	movs	r1, r7
   13dba:	003b      	movs	r3, r7
   13dbc:	0002      	movs	r2, r0
   13dbe:	47d0      	blx	sl
   13dc0:	3401      	adds	r4, #1
   13dc2:	b224      	sxth	r4, r4
	for (i=x; i<x+w; i++) {
   13dc4:	42a5      	cmp	r5, r4
   13dc6:	dcee      	bgt.n	13da6 <glcd_draw_rect+0x20a>
   13dc8:	46ba      	mov	sl, r7
   13dca:	e722      	b.n	13c12 <glcd_draw_rect+0x76>
   13dcc:	9b04      	ldr	r3, [sp, #16]
   13dce:	2b00      	cmp	r3, #0
   13dd0:	d164      	bne.n	13e9c <glcd_draw_rect+0x300>
   13dd2:	4b4a      	ldr	r3, [pc, #296]	; (13efc <glcd_draw_rect+0x360>)
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   13dd4:	4a4a      	ldr	r2, [pc, #296]	; (13f00 <glcd_draw_rect+0x364>)
   13dd6:	46ab      	mov	fp, r5
   13dd8:	4690      	mov	r8, r2
   13dda:	4655      	mov	r5, sl
   13ddc:	469a      	mov	sl, r3
   13dde:	9301      	str	r3, [sp, #4]
   13de0:	9009      	str	r0, [sp, #36]	; 0x24
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   13de2:	0623      	lsls	r3, r4, #24
   13de4:	d41a      	bmi.n	13e1c <glcd_draw_rect+0x280>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   13de6:	9b07      	ldr	r3, [sp, #28]
		glcd_set_pixel(i, y, color);
   13de8:	b2e7      	uxtb	r7, r4
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   13dea:	19da      	adds	r2, r3, r7
   13dec:	4643      	mov	r3, r8
   13dee:	9908      	ldr	r1, [sp, #32]
   13df0:	5c9b      	ldrb	r3, [r3, r2]
	glcd_update_bbox(x,y,x,y);
   13df2:	0038      	movs	r0, r7
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   13df4:	400b      	ands	r3, r1
   13df6:	4641      	mov	r1, r8
   13df8:	548b      	strb	r3, [r1, r2]
	glcd_update_bbox(x,y,x,y);
   13dfa:	002b      	movs	r3, r5
   13dfc:	003a      	movs	r2, r7
   13dfe:	0029      	movs	r1, r5
   13e00:	47d0      	blx	sl
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   13e02:	9b03      	ldr	r3, [sp, #12]
   13e04:	4649      	mov	r1, r9
   13e06:	19da      	adds	r2, r3, r7
   13e08:	4643      	mov	r3, r8
   13e0a:	5c9b      	ldrb	r3, [r3, r2]
	glcd_update_bbox(x,y,x,y);
   13e0c:	0038      	movs	r0, r7
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   13e0e:	400b      	ands	r3, r1
   13e10:	4641      	mov	r1, r8
   13e12:	548b      	strb	r3, [r1, r2]
	glcd_update_bbox(x,y,x,y);
   13e14:	0033      	movs	r3, r6
   13e16:	003a      	movs	r2, r7
   13e18:	0031      	movs	r1, r6
   13e1a:	47d0      	blx	sl
   13e1c:	3401      	adds	r4, #1
   13e1e:	b224      	sxth	r4, r4
	for (i=x; i<x+w; i++) {
   13e20:	45a3      	cmp	fp, r4
   13e22:	dcde      	bgt.n	13de2 <glcd_draw_rect+0x246>
   13e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13e26:	46aa      	mov	sl, r5
   13e28:	469b      	mov	fp, r3
   13e2a:	e6f2      	b.n	13c12 <glcd_draw_rect+0x76>
   13e2c:	4b33      	ldr	r3, [pc, #204]	; (13efc <glcd_draw_rect+0x360>)
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   13e2e:	46b9      	mov	r9, r7
   13e30:	9301      	str	r3, [sp, #4]
   13e32:	4b33      	ldr	r3, [pc, #204]	; (13f00 <glcd_draw_rect+0x364>)
   13e34:	4698      	mov	r8, r3
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   13e36:	0623      	lsls	r3, r4, #24
   13e38:	d40d      	bmi.n	13e56 <glcd_draw_rect+0x2ba>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   13e3a:	9b03      	ldr	r3, [sp, #12]
		glcd_set_pixel(i, y, color);
   13e3c:	b2e0      	uxtb	r0, r4
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   13e3e:	18c2      	adds	r2, r0, r3
   13e40:	4643      	mov	r3, r8
   13e42:	4649      	mov	r1, r9
   13e44:	5c9b      	ldrb	r3, [r3, r2]
	glcd_update_bbox(x,y,x,y);
   13e46:	9f01      	ldr	r7, [sp, #4]
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   13e48:	430b      	orrs	r3, r1
   13e4a:	4641      	mov	r1, r8
   13e4c:	548b      	strb	r3, [r1, r2]
	glcd_update_bbox(x,y,x,y);
   13e4e:	0033      	movs	r3, r6
   13e50:	0002      	movs	r2, r0
   13e52:	0031      	movs	r1, r6
   13e54:	47b8      	blx	r7
   13e56:	3401      	adds	r4, #1
   13e58:	b224      	sxth	r4, r4
	for (i=x; i<x+w; i++) {
   13e5a:	42ac      	cmp	r4, r5
   13e5c:	dbeb      	blt.n	13e36 <glcd_draw_rect+0x29a>
   13e5e:	e6d8      	b.n	13c12 <glcd_draw_rect+0x76>
   13e60:	4b26      	ldr	r3, [pc, #152]	; (13efc <glcd_draw_rect+0x360>)
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   13e62:	9a07      	ldr	r2, [sp, #28]
   13e64:	4657      	mov	r7, sl
   13e66:	4691      	mov	r9, r2
   13e68:	469a      	mov	sl, r3
   13e6a:	4e25      	ldr	r6, [pc, #148]	; (13f00 <glcd_draw_rect+0x364>)
   13e6c:	9301      	str	r3, [sp, #4]
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   13e6e:	0623      	lsls	r3, r4, #24
   13e70:	d40a      	bmi.n	13e88 <glcd_draw_rect+0x2ec>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   13e72:	464b      	mov	r3, r9
   13e74:	4641      	mov	r1, r8
		glcd_set_pixel(i, y, color);
   13e76:	b2e0      	uxtb	r0, r4
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   13e78:	18c2      	adds	r2, r0, r3
   13e7a:	5cb3      	ldrb	r3, [r6, r2]
   13e7c:	430b      	orrs	r3, r1
   13e7e:	54b3      	strb	r3, [r6, r2]
	glcd_update_bbox(x,y,x,y);
   13e80:	0039      	movs	r1, r7
   13e82:	003b      	movs	r3, r7
   13e84:	0002      	movs	r2, r0
   13e86:	47d0      	blx	sl
   13e88:	3401      	adds	r4, #1
   13e8a:	b224      	sxth	r4, r4
	for (i=x; i<x+w; i++) {
   13e8c:	42a5      	cmp	r5, r4
   13e8e:	dcee      	bgt.n	13e6e <glcd_draw_rect+0x2d2>
   13e90:	46ba      	mov	sl, r7
   13e92:	e6be      	b.n	13c12 <glcd_draw_rect+0x76>
   13e94:	9b05      	ldr	r3, [sp, #20]
   13e96:	3b01      	subs	r3, #1
   13e98:	9307      	str	r3, [sp, #28]
   13e9a:	e70b      	b.n	13cb4 <glcd_draw_rect+0x118>
   13e9c:	4b17      	ldr	r3, [pc, #92]	; (13efc <glcd_draw_rect+0x360>)
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   13e9e:	46bb      	mov	fp, r7
   13ea0:	4699      	mov	r9, r3
   13ea2:	4657      	mov	r7, sl
   13ea4:	46aa      	mov	sl, r5
   13ea6:	9301      	str	r3, [sp, #4]
   13ea8:	9008      	str	r0, [sp, #32]
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   13eaa:	0623      	lsls	r3, r4, #24
   13eac:	d41a      	bmi.n	13ee4 <glcd_draw_rect+0x348>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   13eae:	4641      	mov	r1, r8
   13eb0:	9b07      	ldr	r3, [sp, #28]
		glcd_set_pixel(i, y, color);
   13eb2:	b2e5      	uxtb	r5, r4
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   13eb4:	18ea      	adds	r2, r5, r3
   13eb6:	4b12      	ldr	r3, [pc, #72]	; (13f00 <glcd_draw_rect+0x364>)
	glcd_update_bbox(x,y,x,y);
   13eb8:	0028      	movs	r0, r5
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   13eba:	5c9b      	ldrb	r3, [r3, r2]
   13ebc:	430b      	orrs	r3, r1
   13ebe:	4910      	ldr	r1, [pc, #64]	; (13f00 <glcd_draw_rect+0x364>)
   13ec0:	548b      	strb	r3, [r1, r2]
	glcd_update_bbox(x,y,x,y);
   13ec2:	003b      	movs	r3, r7
   13ec4:	002a      	movs	r2, r5
   13ec6:	0039      	movs	r1, r7
   13ec8:	47c8      	blx	r9
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   13eca:	4659      	mov	r1, fp
   13ecc:	9b03      	ldr	r3, [sp, #12]
	glcd_update_bbox(x,y,x,y);
   13ece:	0028      	movs	r0, r5
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   13ed0:	18ea      	adds	r2, r5, r3
   13ed2:	4b0b      	ldr	r3, [pc, #44]	; (13f00 <glcd_draw_rect+0x364>)
   13ed4:	5c9b      	ldrb	r3, [r3, r2]
   13ed6:	430b      	orrs	r3, r1
   13ed8:	4909      	ldr	r1, [pc, #36]	; (13f00 <glcd_draw_rect+0x364>)
   13eda:	548b      	strb	r3, [r1, r2]
	glcd_update_bbox(x,y,x,y);
   13edc:	0033      	movs	r3, r6
   13ede:	002a      	movs	r2, r5
   13ee0:	0031      	movs	r1, r6
   13ee2:	47c8      	blx	r9
   13ee4:	3401      	adds	r4, #1
   13ee6:	b224      	sxth	r4, r4
	for (i=x; i<x+w; i++) {
   13ee8:	4554      	cmp	r4, sl
   13eea:	dbde      	blt.n	13eaa <glcd_draw_rect+0x30e>
   13eec:	9b08      	ldr	r3, [sp, #32]
   13eee:	46ba      	mov	sl, r7
   13ef0:	469b      	mov	fp, r3
   13ef2:	e68e      	b.n	13c12 <glcd_draw_rect+0x76>
   13ef4:	4b02      	ldr	r3, [pc, #8]	; (13f00 <glcd_draw_rect+0x364>)
   13ef6:	43f6      	mvns	r6, r6
   13ef8:	469a      	mov	sl, r3
   13efa:	e71e      	b.n	13d3a <glcd_draw_rect+0x19e>
   13efc:	00013785 	.word	0x00013785
   13f00:	20001874 	.word	0x20001874

00013f04 <glcd_draw_circle>:
	glcd_draw_line(x+1, y+h, x+w, y+h, color);
	glcd_draw_line(x+w, y+1, x+w, y+h, color);
}

void glcd_draw_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
   13f04:	b5f0      	push	{r4, r5, r6, r7, lr}
   13f06:	46de      	mov	lr, fp
   13f08:	4657      	mov	r7, sl
   13f0a:	464e      	mov	r6, r9
   13f0c:	4645      	mov	r5, r8
   13f0e:	b5e0      	push	{r5, r6, r7, lr}
   13f10:	b08b      	sub	sp, #44	; 0x2c
   13f12:	9307      	str	r3, [sp, #28]
		
	int8_t f = 1 - r;
   13f14:	2301      	movs	r3, #1
   13f16:	2401      	movs	r4, #1
   13f18:	1a9b      	subs	r3, r3, r2
   13f1a:	46a1      	mov	r9, r4
   13f1c:	b25c      	sxtb	r4, r3
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
   13f1e:	01d3      	lsls	r3, r2, #7
   13f20:	1a9b      	subs	r3, r3, r2
	int8_t x = 0;
	int8_t y = r;
	
	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
   13f22:	1a87      	subs	r7, r0, r2
   13f24:	468c      	mov	ip, r1
	int8_t ddF_y = -2 * r;
   13f26:	005b      	lsls	r3, r3, #1
	int8_t f = 1 - r;
   13f28:	46a3      	mov	fp, r4
	int8_t ddF_y = -2 * r;
   13f2a:	b25c      	sxtb	r4, r3
	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
   13f2c:	b2fb      	uxtb	r3, r7
   13f2e:	469a      	mov	sl, r3
   13f30:	1a8e      	subs	r6, r1, r2
   13f32:	1815      	adds	r5, r2, r0
	int8_t ddF_y = -2 * r;
   13f34:	9408      	str	r4, [sp, #32]
	int8_t y = r;
   13f36:	b254      	sxtb	r4, r2
	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
   13f38:	4462      	add	r2, ip
	int8_t y = r;
   13f3a:	9403      	str	r4, [sp, #12]
	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
   13f3c:	b2f6      	uxtb	r6, r6
   13f3e:	b2d4      	uxtb	r4, r2
   13f40:	b2ed      	uxtb	r5, r5
{
   13f42:	9106      	str	r1, [sp, #24]
	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
   13f44:	9005      	str	r0, [sp, #20]
   13f46:	0023      	movs	r3, r4
   13f48:	002a      	movs	r2, r5
   13f4a:	0031      	movs	r1, r6
   13f4c:	4650      	mov	r0, sl
   13f4e:	4fda      	ldr	r7, [pc, #872]	; (142b8 <glcd_draw_circle+0x3b4>)
   13f50:	47b8      	blx	r7
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   13f52:	466b      	mov	r3, sp
   13f54:	7d1b      	ldrb	r3, [r3, #20]
   13f56:	b25b      	sxtb	r3, r3
   13f58:	2b00      	cmp	r3, #0
   13f5a:	db05      	blt.n	13f68 <glcd_draw_circle+0x64>
   13f5c:	2c3f      	cmp	r4, #63	; 0x3f
   13f5e:	d800      	bhi.n	13f62 <glcd_draw_circle+0x5e>
   13f60:	e281      	b.n	14466 <glcd_draw_circle+0x562>
   13f62:	2e3f      	cmp	r6, #63	; 0x3f
   13f64:	d800      	bhi.n	13f68 <glcd_draw_circle+0x64>
   13f66:	e263      	b.n	14430 <glcd_draw_circle+0x52c>
   13f68:	b26b      	sxtb	r3, r5
   13f6a:	2b00      	cmp	r3, #0
   13f6c:	da00      	bge.n	13f70 <glcd_draw_circle+0x6c>
   13f6e:	e238      	b.n	143e2 <glcd_draw_circle+0x4de>
   13f70:	9b06      	ldr	r3, [sp, #24]
   13f72:	2b3f      	cmp	r3, #63	; 0x3f
   13f74:	d800      	bhi.n	13f78 <glcd_draw_circle+0x74>
   13f76:	e291      	b.n	1449c <glcd_draw_circle+0x598>
	glcd_set_pixel(x0, y0+r, color);
	glcd_set_pixel(x0, y0-r, color);
	glcd_set_pixel(x0+r, y0, color);
	glcd_set_pixel(x0-r, y0, color);
	
	while (x<y) {
   13f78:	9b03      	ldr	r3, [sp, #12]
   13f7a:	2b00      	cmp	r3, #0
   13f7c:	dc00      	bgt.n	13f80 <glcd_draw_circle+0x7c>
   13f7e:	e229      	b.n	143d4 <glcd_draw_circle+0x4d0>
   13f80:	9b06      	ldr	r3, [sp, #24]
   13f82:	9a05      	ldr	r2, [sp, #20]
   13f84:	1e5d      	subs	r5, r3, #1
   13f86:	1c5e      	adds	r6, r3, #1
   13f88:	0013      	movs	r3, r2
   13f8a:	3b01      	subs	r3, #1
   13f8c:	b2db      	uxtb	r3, r3
   13f8e:	9301      	str	r3, [sp, #4]
   13f90:	0013      	movs	r3, r2
   13f92:	3301      	adds	r3, #1
   13f94:	b2db      	uxtb	r3, r3
   13f96:	469a      	mov	sl, r3
   13f98:	2300      	movs	r3, #0
   13f9a:	9304      	str	r3, [sp, #16]
   13f9c:	4653      	mov	r3, sl
   13f9e:	b2f6      	uxtb	r6, r6
   13fa0:	b2ed      	uxtb	r5, r5
   13fa2:	9600      	str	r6, [sp, #0]
   13fa4:	9302      	str	r3, [sp, #8]
   13fa6:	e044      	b.n	14032 <glcd_draw_circle+0x12e>
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   13fa8:	2f3f      	cmp	r7, #63	; 0x3f
   13faa:	d800      	bhi.n	13fae <glcd_draw_circle+0xaa>
   13fac:	e105      	b.n	141ba <glcd_draw_circle+0x2b6>
   13fae:	466b      	mov	r3, sp
   13fb0:	791b      	ldrb	r3, [r3, #4]
   13fb2:	b25b      	sxtb	r3, r3
   13fb4:	4699      	mov	r9, r3
   13fb6:	2b00      	cmp	r3, #0
   13fb8:	da00      	bge.n	13fbc <glcd_draw_circle+0xb8>
   13fba:	e0c4      	b.n	14146 <glcd_draw_circle+0x242>
   13fbc:	2f3f      	cmp	r7, #63	; 0x3f
   13fbe:	d964      	bls.n	1408a <glcd_draw_circle+0x186>
		ddF_x += 2;
		f += ddF_x;
		
		glcd_set_pixel(x0 + x, y0 + y, color);
		glcd_set_pixel(x0 - x, y0 + y, color);
		glcd_set_pixel(x0 + x, y0 - y, color);
   13fc0:	9b06      	ldr	r3, [sp, #24]
   13fc2:	1b1f      	subs	r7, r3, r4
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   13fc4:	4653      	mov	r3, sl
		glcd_set_pixel(x0 + x, y0 - y, color);
   13fc6:	b2ff      	uxtb	r7, r7
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   13fc8:	2b00      	cmp	r3, #0
   13fca:	db7e      	blt.n	140ca <glcd_draw_circle+0x1c6>
   13fcc:	2f3f      	cmp	r7, #63	; 0x3f
   13fce:	d800      	bhi.n	13fd2 <glcd_draw_circle+0xce>
   13fd0:	e0bf      	b.n	14152 <glcd_draw_circle+0x24e>
		glcd_set_pixel(x0 - x, y0 - y, color);
		
		glcd_set_pixel(x0 + y, y0 + x, color);
   13fd2:	9b05      	ldr	r3, [sp, #20]
   13fd4:	191f      	adds	r7, r3, r4
   13fd6:	b2ff      	uxtb	r7, r7
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   13fd8:	b27b      	sxtb	r3, r7
   13fda:	4699      	mov	r9, r3
   13fdc:	2b00      	cmp	r3, #0
   13fde:	da00      	bge.n	13fe2 <glcd_draw_circle+0xde>
   13fe0:	e0a8      	b.n	14134 <glcd_draw_circle+0x230>
   13fe2:	9b00      	ldr	r3, [sp, #0]
   13fe4:	2b3f      	cmp	r3, #63	; 0x3f
   13fe6:	d800      	bhi.n	13fea <glcd_draw_circle+0xe6>
   13fe8:	e121      	b.n	1422e <glcd_draw_circle+0x32a>
		glcd_set_pixel(x0 - y, y0 + x, color);
   13fea:	9b05      	ldr	r3, [sp, #20]
   13fec:	1b1c      	subs	r4, r3, r4
   13fee:	b2e4      	uxtb	r4, r4
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   13ff0:	b263      	sxtb	r3, r4
   13ff2:	469a      	mov	sl, r3
   13ff4:	2b00      	cmp	r3, #0
   13ff6:	db06      	blt.n	14006 <glcd_draw_circle+0x102>
   13ff8:	9b00      	ldr	r3, [sp, #0]
   13ffa:	2b3f      	cmp	r3, #63	; 0x3f
   13ffc:	d800      	bhi.n	14000 <glcd_draw_circle+0xfc>
   13ffe:	e130      	b.n	14262 <glcd_draw_circle+0x35e>
   14000:	464b      	mov	r3, r9
   14002:	2b00      	cmp	r3, #0
   14004:	db75      	blt.n	140f2 <glcd_draw_circle+0x1ee>
   14006:	2d3f      	cmp	r5, #63	; 0x3f
   14008:	d800      	bhi.n	1400c <glcd_draw_circle+0x108>
   1400a:	e0f0      	b.n	141ee <glcd_draw_circle+0x2ea>
   1400c:	9e00      	ldr	r6, [sp, #0]
	while (x<y) {
   1400e:	9a04      	ldr	r2, [sp, #16]
   14010:	3601      	adds	r6, #1
   14012:	b2f3      	uxtb	r3, r6
   14014:	9300      	str	r3, [sp, #0]
   14016:	9b01      	ldr	r3, [sp, #4]
   14018:	3d01      	subs	r5, #1
   1401a:	3b01      	subs	r3, #1
   1401c:	b2db      	uxtb	r3, r3
   1401e:	9301      	str	r3, [sp, #4]
   14020:	9b02      	ldr	r3, [sp, #8]
   14022:	b2ed      	uxtb	r5, r5
   14024:	3301      	adds	r3, #1
   14026:	b2db      	uxtb	r3, r3
   14028:	9302      	str	r3, [sp, #8]
   1402a:	9b03      	ldr	r3, [sp, #12]
   1402c:	4293      	cmp	r3, r2
   1402e:	dc00      	bgt.n	14032 <glcd_draw_circle+0x12e>
   14030:	e1d0      	b.n	143d4 <glcd_draw_circle+0x4d0>
		if (f >= 0) {
   14032:	465b      	mov	r3, fp
   14034:	2b00      	cmp	r3, #0
   14036:	db0b      	blt.n	14050 <glcd_draw_circle+0x14c>
			y--;
   14038:	9b03      	ldr	r3, [sp, #12]
   1403a:	3b01      	subs	r3, #1
   1403c:	b25b      	sxtb	r3, r3
   1403e:	9303      	str	r3, [sp, #12]
			ddF_y += 2;
   14040:	9b08      	ldr	r3, [sp, #32]
   14042:	3302      	adds	r3, #2
   14044:	b2db      	uxtb	r3, r3
   14046:	b25a      	sxtb	r2, r3
			f += ddF_y;
   14048:	445b      	add	r3, fp
   1404a:	b25b      	sxtb	r3, r3
   1404c:	469b      	mov	fp, r3
			ddF_y += 2;
   1404e:	9208      	str	r2, [sp, #32]
   14050:	9b04      	ldr	r3, [sp, #16]
   14052:	3301      	adds	r3, #1
   14054:	b2db      	uxtb	r3, r3
   14056:	b25a      	sxtb	r2, r3
		f += ddF_x;
   14058:	005b      	lsls	r3, r3, #1
   1405a:	3301      	adds	r3, #1
   1405c:	445b      	add	r3, fp
   1405e:	b25b      	sxtb	r3, r3
   14060:	469b      	mov	fp, r3
		glcd_set_pixel(x0 + x, y0 + y, color);
   14062:	466b      	mov	r3, sp
   14064:	7b1c      	ldrb	r4, [r3, #12]
   14066:	9b06      	ldr	r3, [sp, #24]
   14068:	9204      	str	r2, [sp, #16]
   1406a:	191f      	adds	r7, r3, r4
   1406c:	466b      	mov	r3, sp
   1406e:	7a1b      	ldrb	r3, [r3, #8]
   14070:	b2ff      	uxtb	r7, r7
   14072:	b25b      	sxtb	r3, r3
   14074:	469a      	mov	sl, r3
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   14076:	2b00      	cmp	r3, #0
   14078:	da96      	bge.n	13fa8 <glcd_draw_circle+0xa4>
   1407a:	466b      	mov	r3, sp
   1407c:	791b      	ldrb	r3, [r3, #4]
   1407e:	b25b      	sxtb	r3, r3
   14080:	4699      	mov	r9, r3
   14082:	2b00      	cmp	r3, #0
   14084:	dba5      	blt.n	13fd2 <glcd_draw_circle+0xce>
   14086:	2f3f      	cmp	r7, #63	; 0x3f
   14088:	d89a      	bhi.n	13fc0 <glcd_draw_circle+0xbc>
	if (color) {
   1408a:	9b07      	ldr	r3, [sp, #28]
   1408c:	2b00      	cmp	r3, #0
   1408e:	d100      	bne.n	14092 <glcd_draw_circle+0x18e>
   14090:	e17e      	b.n	14390 <glcd_draw_circle+0x48c>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   14092:	9a01      	ldr	r2, [sp, #4]
   14094:	2107      	movs	r1, #7
   14096:	4694      	mov	ip, r2
   14098:	4a88      	ldr	r2, [pc, #544]	; (142bc <glcd_draw_circle+0x3b8>)
   1409a:	4039      	ands	r1, r7
   1409c:	4690      	mov	r8, r2
   1409e:	2201      	movs	r2, #1
   140a0:	408a      	lsls	r2, r1
   140a2:	4641      	mov	r1, r8
   140a4:	08fb      	lsrs	r3, r7, #3
   140a6:	01db      	lsls	r3, r3, #7
   140a8:	4463      	add	r3, ip
   140aa:	5cc9      	ldrb	r1, [r1, r3]
   140ac:	430a      	orrs	r2, r1
   140ae:	4641      	mov	r1, r8
   140b0:	54ca      	strb	r2, [r1, r3]
	glcd_update_bbox(x,y,x,y);
   140b2:	9801      	ldr	r0, [sp, #4]
   140b4:	003b      	movs	r3, r7
   140b6:	0039      	movs	r1, r7
   140b8:	0002      	movs	r2, r0
   140ba:	4e7f      	ldr	r6, [pc, #508]	; (142b8 <glcd_draw_circle+0x3b4>)
   140bc:	47b0      	blx	r6
		glcd_set_pixel(x0 + x, y0 - y, color);
   140be:	9b06      	ldr	r3, [sp, #24]
   140c0:	1b1f      	subs	r7, r3, r4
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   140c2:	4653      	mov	r3, sl
		glcd_set_pixel(x0 + x, y0 - y, color);
   140c4:	b2ff      	uxtb	r7, r7
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   140c6:	2b00      	cmp	r3, #0
   140c8:	da80      	bge.n	13fcc <glcd_draw_circle+0xc8>
   140ca:	2f3f      	cmp	r7, #63	; 0x3f
   140cc:	d881      	bhi.n	13fd2 <glcd_draw_circle+0xce>
   140ce:	08fb      	lsrs	r3, r7, #3
   140d0:	01db      	lsls	r3, r3, #7
   140d2:	2207      	movs	r2, #7
   140d4:	9309      	str	r3, [sp, #36]	; 0x24
   140d6:	2301      	movs	r3, #1
   140d8:	403a      	ands	r2, r7
   140da:	4093      	lsls	r3, r2
   140dc:	b25b      	sxtb	r3, r3
   140de:	469a      	mov	sl, r3
   140e0:	4b76      	ldr	r3, [pc, #472]	; (142bc <glcd_draw_circle+0x3b8>)
   140e2:	4698      	mov	r8, r3
	if (color) {
   140e4:	9b07      	ldr	r3, [sp, #28]
   140e6:	2b00      	cmp	r3, #0
   140e8:	d154      	bne.n	14194 <glcd_draw_circle+0x290>
   140ea:	4653      	mov	r3, sl
   140ec:	43db      	mvns	r3, r3
   140ee:	469a      	mov	sl, r3
   140f0:	e107      	b.n	14302 <glcd_draw_circle+0x3fe>
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   140f2:	2d3f      	cmp	r5, #63	; 0x3f
   140f4:	d88a      	bhi.n	1400c <glcd_draw_circle+0x108>
   140f6:	08eb      	lsrs	r3, r5, #3
   140f8:	01db      	lsls	r3, r3, #7
   140fa:	2207      	movs	r2, #7
   140fc:	9309      	str	r3, [sp, #36]	; 0x24
   140fe:	2301      	movs	r3, #1
   14100:	402a      	ands	r2, r5
   14102:	4093      	lsls	r3, r2
   14104:	b25b      	sxtb	r3, r3
   14106:	4699      	mov	r9, r3
	if (color) {
   14108:	9b07      	ldr	r3, [sp, #28]
   1410a:	2b00      	cmp	r3, #0
   1410c:	d100      	bne.n	14110 <glcd_draw_circle+0x20c>
   1410e:	e22f      	b.n	14570 <glcd_draw_circle+0x66c>
   14110:	4b6a      	ldr	r3, [pc, #424]	; (142bc <glcd_draw_circle+0x3b8>)
   14112:	4698      	mov	r8, r3
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   14114:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14116:	4649      	mov	r1, r9
   14118:	18e2      	adds	r2, r4, r3
   1411a:	4643      	mov	r3, r8
   1411c:	5c9b      	ldrb	r3, [r3, r2]
   1411e:	4319      	orrs	r1, r3
   14120:	000b      	movs	r3, r1
   14122:	4641      	mov	r1, r8
   14124:	548b      	strb	r3, [r1, r2]
	glcd_update_bbox(x,y,x,y);
   14126:	0022      	movs	r2, r4
   14128:	0020      	movs	r0, r4
   1412a:	002b      	movs	r3, r5
   1412c:	0029      	movs	r1, r5
   1412e:	4c62      	ldr	r4, [pc, #392]	; (142b8 <glcd_draw_circle+0x3b4>)
   14130:	47a0      	blx	r4
   14132:	e76b      	b.n	1400c <glcd_draw_circle+0x108>
		glcd_set_pixel(x0 - y, y0 + x, color);
   14134:	9b05      	ldr	r3, [sp, #20]
   14136:	1b1c      	subs	r4, r3, r4
   14138:	b2e4      	uxtb	r4, r4
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1413a:	b263      	sxtb	r3, r4
   1413c:	469a      	mov	sl, r3
   1413e:	2b00      	cmp	r3, #0
   14140:	da00      	bge.n	14144 <glcd_draw_circle+0x240>
   14142:	e763      	b.n	1400c <glcd_draw_circle+0x108>
   14144:	e758      	b.n	13ff8 <glcd_draw_circle+0xf4>
		glcd_set_pixel(x0 + x, y0 - y, color);
   14146:	9b06      	ldr	r3, [sp, #24]
   14148:	1b1f      	subs	r7, r3, r4
   1414a:	b2ff      	uxtb	r7, r7
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1414c:	2f3f      	cmp	r7, #63	; 0x3f
   1414e:	d900      	bls.n	14152 <glcd_draw_circle+0x24e>
   14150:	e73f      	b.n	13fd2 <glcd_draw_circle+0xce>
	if (color) {
   14152:	9b07      	ldr	r3, [sp, #28]
   14154:	2b00      	cmp	r3, #0
   14156:	d100      	bne.n	1415a <glcd_draw_circle+0x256>
   14158:	e0b2      	b.n	142c0 <glcd_draw_circle+0x3bc>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1415a:	08fb      	lsrs	r3, r7, #3
   1415c:	01db      	lsls	r3, r3, #7
   1415e:	2107      	movs	r1, #7
   14160:	469c      	mov	ip, r3
   14162:	9309      	str	r3, [sp, #36]	; 0x24
   14164:	2301      	movs	r3, #1
   14166:	4039      	ands	r1, r7
   14168:	408b      	lsls	r3, r1
   1416a:	b25b      	sxtb	r3, r3
   1416c:	469a      	mov	sl, r3
   1416e:	9802      	ldr	r0, [sp, #8]
   14170:	4b52      	ldr	r3, [pc, #328]	; (142bc <glcd_draw_circle+0x3b8>)
   14172:	0002      	movs	r2, r0
   14174:	4698      	mov	r8, r3
   14176:	4651      	mov	r1, sl
   14178:	4462      	add	r2, ip
   1417a:	5c9b      	ldrb	r3, [r3, r2]
	glcd_update_bbox(x,y,x,y);
   1417c:	4e4e      	ldr	r6, [pc, #312]	; (142b8 <glcd_draw_circle+0x3b4>)
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1417e:	430b      	orrs	r3, r1
   14180:	4641      	mov	r1, r8
   14182:	548b      	strb	r3, [r1, r2]
	glcd_update_bbox(x,y,x,y);
   14184:	003b      	movs	r3, r7
   14186:	0002      	movs	r2, r0
   14188:	0039      	movs	r1, r7
   1418a:	47b0      	blx	r6
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1418c:	464b      	mov	r3, r9
   1418e:	2b00      	cmp	r3, #0
   14190:	da00      	bge.n	14194 <glcd_draw_circle+0x290>
   14192:	e71e      	b.n	13fd2 <glcd_draw_circle+0xce>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   14194:	9901      	ldr	r1, [sp, #4]
   14196:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14198:	468c      	mov	ip, r1
   1419a:	4463      	add	r3, ip
   1419c:	001a      	movs	r2, r3
   1419e:	4643      	mov	r3, r8
   141a0:	4651      	mov	r1, sl
   141a2:	5c9b      	ldrb	r3, [r3, r2]
   141a4:	4319      	orrs	r1, r3
   141a6:	000b      	movs	r3, r1
   141a8:	4641      	mov	r1, r8
   141aa:	548b      	strb	r3, [r1, r2]
	glcd_update_bbox(x,y,x,y);
   141ac:	9801      	ldr	r0, [sp, #4]
   141ae:	003b      	movs	r3, r7
   141b0:	0002      	movs	r2, r0
   141b2:	0039      	movs	r1, r7
   141b4:	4e40      	ldr	r6, [pc, #256]	; (142b8 <glcd_draw_circle+0x3b4>)
   141b6:	47b0      	blx	r6
   141b8:	e70b      	b.n	13fd2 <glcd_draw_circle+0xce>
	if (color) {
   141ba:	9b07      	ldr	r3, [sp, #28]
   141bc:	2b00      	cmp	r3, #0
   141be:	d069      	beq.n	14294 <glcd_draw_circle+0x390>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   141c0:	9a02      	ldr	r2, [sp, #8]
   141c2:	2107      	movs	r1, #7
   141c4:	4694      	mov	ip, r2
   141c6:	4a3d      	ldr	r2, [pc, #244]	; (142bc <glcd_draw_circle+0x3b8>)
   141c8:	4039      	ands	r1, r7
   141ca:	4690      	mov	r8, r2
   141cc:	2201      	movs	r2, #1
   141ce:	408a      	lsls	r2, r1
   141d0:	4641      	mov	r1, r8
   141d2:	08fb      	lsrs	r3, r7, #3
   141d4:	01db      	lsls	r3, r3, #7
   141d6:	4463      	add	r3, ip
   141d8:	5cc9      	ldrb	r1, [r1, r3]
   141da:	430a      	orrs	r2, r1
   141dc:	4641      	mov	r1, r8
   141de:	54ca      	strb	r2, [r1, r3]
	glcd_update_bbox(x,y,x,y);
   141e0:	9802      	ldr	r0, [sp, #8]
   141e2:	003b      	movs	r3, r7
   141e4:	0002      	movs	r2, r0
   141e6:	0039      	movs	r1, r7
   141e8:	4e33      	ldr	r6, [pc, #204]	; (142b8 <glcd_draw_circle+0x3b4>)
   141ea:	47b0      	blx	r6
   141ec:	e6df      	b.n	13fae <glcd_draw_circle+0xaa>
	if (color) {
   141ee:	9b07      	ldr	r3, [sp, #28]
   141f0:	2b00      	cmp	r3, #0
   141f2:	d100      	bne.n	141f6 <glcd_draw_circle+0x2f2>
   141f4:	e0a3      	b.n	1433e <glcd_draw_circle+0x43a>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   141f6:	08eb      	lsrs	r3, r5, #3
   141f8:	01db      	lsls	r3, r3, #7
   141fa:	2107      	movs	r1, #7
   141fc:	18fa      	adds	r2, r7, r3
   141fe:	9309      	str	r3, [sp, #36]	; 0x24
   14200:	2301      	movs	r3, #1
   14202:	4029      	ands	r1, r5
   14204:	408b      	lsls	r3, r1
   14206:	b25b      	sxtb	r3, r3
   14208:	4699      	mov	r9, r3
   1420a:	4b2c      	ldr	r3, [pc, #176]	; (142bc <glcd_draw_circle+0x3b8>)
   1420c:	4649      	mov	r1, r9
   1420e:	4698      	mov	r8, r3
   14210:	5c9b      	ldrb	r3, [r3, r2]
	glcd_update_bbox(x,y,x,y);
   14212:	0038      	movs	r0, r7
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   14214:	430b      	orrs	r3, r1
   14216:	4641      	mov	r1, r8
	glcd_update_bbox(x,y,x,y);
   14218:	4e27      	ldr	r6, [pc, #156]	; (142b8 <glcd_draw_circle+0x3b4>)
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1421a:	548b      	strb	r3, [r1, r2]
	glcd_update_bbox(x,y,x,y);
   1421c:	002b      	movs	r3, r5
   1421e:	003a      	movs	r2, r7
   14220:	0029      	movs	r1, r5
   14222:	47b0      	blx	r6
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   14224:	4653      	mov	r3, sl
   14226:	2b00      	cmp	r3, #0
   14228:	db00      	blt.n	1422c <glcd_draw_circle+0x328>
   1422a:	e773      	b.n	14114 <glcd_draw_circle+0x210>
   1422c:	e6ee      	b.n	1400c <glcd_draw_circle+0x108>
	if (color) {
   1422e:	9b07      	ldr	r3, [sp, #28]
   14230:	2b00      	cmp	r3, #0
   14232:	d100      	bne.n	14236 <glcd_draw_circle+0x332>
   14234:	e0bd      	b.n	143b2 <glcd_draw_circle+0x4ae>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   14236:	4a21      	ldr	r2, [pc, #132]	; (142bc <glcd_draw_circle+0x3b8>)
   14238:	2107      	movs	r1, #7
   1423a:	4690      	mov	r8, r2
   1423c:	2201      	movs	r2, #1
   1423e:	9800      	ldr	r0, [sp, #0]
   14240:	4001      	ands	r1, r0
   14242:	408a      	lsls	r2, r1
   14244:	4641      	mov	r1, r8
   14246:	08c3      	lsrs	r3, r0, #3
   14248:	01db      	lsls	r3, r3, #7
   1424a:	19db      	adds	r3, r3, r7
   1424c:	5cc9      	ldrb	r1, [r1, r3]
   1424e:	430a      	orrs	r2, r1
   14250:	4641      	mov	r1, r8
   14252:	54ca      	strb	r2, [r1, r3]
   14254:	0001      	movs	r1, r0
	glcd_update_bbox(x,y,x,y);
   14256:	000b      	movs	r3, r1
   14258:	003a      	movs	r2, r7
   1425a:	0038      	movs	r0, r7
   1425c:	4e16      	ldr	r6, [pc, #88]	; (142b8 <glcd_draw_circle+0x3b4>)
   1425e:	47b0      	blx	r6
   14260:	e6c3      	b.n	13fea <glcd_draw_circle+0xe6>
	if (color) {
   14262:	9b07      	ldr	r3, [sp, #28]
   14264:	2b00      	cmp	r3, #0
   14266:	d059      	beq.n	1431c <glcd_draw_circle+0x418>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   14268:	4a14      	ldr	r2, [pc, #80]	; (142bc <glcd_draw_circle+0x3b8>)
   1426a:	2107      	movs	r1, #7
   1426c:	4690      	mov	r8, r2
   1426e:	2201      	movs	r2, #1
   14270:	9800      	ldr	r0, [sp, #0]
   14272:	4001      	ands	r1, r0
   14274:	408a      	lsls	r2, r1
   14276:	4641      	mov	r1, r8
   14278:	08c3      	lsrs	r3, r0, #3
   1427a:	01db      	lsls	r3, r3, #7
   1427c:	191b      	adds	r3, r3, r4
   1427e:	5cc9      	ldrb	r1, [r1, r3]
   14280:	430a      	orrs	r2, r1
   14282:	4641      	mov	r1, r8
   14284:	54ca      	strb	r2, [r1, r3]
   14286:	0001      	movs	r1, r0
	glcd_update_bbox(x,y,x,y);
   14288:	000b      	movs	r3, r1
   1428a:	0022      	movs	r2, r4
   1428c:	0020      	movs	r0, r4
   1428e:	4e0a      	ldr	r6, [pc, #40]	; (142b8 <glcd_draw_circle+0x3b4>)
   14290:	47b0      	blx	r6
   14292:	e6b5      	b.n	14000 <glcd_draw_circle+0xfc>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   14294:	9a02      	ldr	r2, [sp, #8]
   14296:	2101      	movs	r1, #1
   14298:	4694      	mov	ip, r2
   1429a:	4a08      	ldr	r2, [pc, #32]	; (142bc <glcd_draw_circle+0x3b8>)
   1429c:	08fb      	lsrs	r3, r7, #3
   1429e:	4690      	mov	r8, r2
   142a0:	2207      	movs	r2, #7
   142a2:	403a      	ands	r2, r7
   142a4:	4091      	lsls	r1, r2
   142a6:	4642      	mov	r2, r8
   142a8:	01db      	lsls	r3, r3, #7
   142aa:	4463      	add	r3, ip
   142ac:	5cd2      	ldrb	r2, [r2, r3]
   142ae:	438a      	bics	r2, r1
   142b0:	4641      	mov	r1, r8
   142b2:	54ca      	strb	r2, [r1, r3]
   142b4:	e794      	b.n	141e0 <glcd_draw_circle+0x2dc>
   142b6:	46c0      	nop			; (mov r8, r8)
   142b8:	00013785 	.word	0x00013785
   142bc:	20001874 	.word	0x20001874
   142c0:	08fb      	lsrs	r3, r7, #3
   142c2:	01db      	lsls	r3, r3, #7
   142c4:	2107      	movs	r1, #7
   142c6:	469c      	mov	ip, r3
   142c8:	9309      	str	r3, [sp, #36]	; 0x24
   142ca:	2301      	movs	r3, #1
   142cc:	4039      	ands	r1, r7
   142ce:	408b      	lsls	r3, r1
   142d0:	b25b      	sxtb	r3, r3
   142d2:	469a      	mov	sl, r3
   142d4:	4ba9      	ldr	r3, [pc, #676]	; (1457c <glcd_draw_circle+0x678>)
   142d6:	9802      	ldr	r0, [sp, #8]
   142d8:	4698      	mov	r8, r3
   142da:	4653      	mov	r3, sl
   142dc:	43db      	mvns	r3, r3
   142de:	469a      	mov	sl, r3
   142e0:	0002      	movs	r2, r0
   142e2:	4643      	mov	r3, r8
   142e4:	4651      	mov	r1, sl
   142e6:	4462      	add	r2, ip
   142e8:	5c9b      	ldrb	r3, [r3, r2]
	glcd_update_bbox(x,y,x,y);
   142ea:	4ea5      	ldr	r6, [pc, #660]	; (14580 <glcd_draw_circle+0x67c>)
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   142ec:	400b      	ands	r3, r1
   142ee:	4641      	mov	r1, r8
   142f0:	548b      	strb	r3, [r1, r2]
	glcd_update_bbox(x,y,x,y);
   142f2:	003b      	movs	r3, r7
   142f4:	0002      	movs	r2, r0
   142f6:	0039      	movs	r1, r7
   142f8:	47b0      	blx	r6
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   142fa:	464b      	mov	r3, r9
   142fc:	2b00      	cmp	r3, #0
   142fe:	da00      	bge.n	14302 <glcd_draw_circle+0x3fe>
   14300:	e667      	b.n	13fd2 <glcd_draw_circle+0xce>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   14302:	9901      	ldr	r1, [sp, #4]
   14304:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14306:	468c      	mov	ip, r1
   14308:	4463      	add	r3, ip
   1430a:	001a      	movs	r2, r3
   1430c:	4643      	mov	r3, r8
   1430e:	4651      	mov	r1, sl
   14310:	5c9b      	ldrb	r3, [r3, r2]
   14312:	4019      	ands	r1, r3
   14314:	000b      	movs	r3, r1
   14316:	4641      	mov	r1, r8
   14318:	548b      	strb	r3, [r1, r2]
   1431a:	e747      	b.n	141ac <glcd_draw_circle+0x2a8>
   1431c:	4a97      	ldr	r2, [pc, #604]	; (1457c <glcd_draw_circle+0x678>)
   1431e:	9900      	ldr	r1, [sp, #0]
   14320:	4690      	mov	r8, r2
   14322:	2207      	movs	r2, #7
   14324:	08cb      	lsrs	r3, r1, #3
   14326:	400a      	ands	r2, r1
   14328:	2101      	movs	r1, #1
   1432a:	4091      	lsls	r1, r2
   1432c:	4642      	mov	r2, r8
   1432e:	01db      	lsls	r3, r3, #7
   14330:	191b      	adds	r3, r3, r4
   14332:	5cd2      	ldrb	r2, [r2, r3]
   14334:	438a      	bics	r2, r1
   14336:	4641      	mov	r1, r8
   14338:	54ca      	strb	r2, [r1, r3]
   1433a:	9900      	ldr	r1, [sp, #0]
   1433c:	e7a4      	b.n	14288 <glcd_draw_circle+0x384>
   1433e:	08eb      	lsrs	r3, r5, #3
   14340:	01db      	lsls	r3, r3, #7
   14342:	2107      	movs	r1, #7
   14344:	18fa      	adds	r2, r7, r3
   14346:	9309      	str	r3, [sp, #36]	; 0x24
   14348:	2301      	movs	r3, #1
   1434a:	4029      	ands	r1, r5
   1434c:	408b      	lsls	r3, r1
   1434e:	b25b      	sxtb	r3, r3
   14350:	4699      	mov	r9, r3
   14352:	4b8a      	ldr	r3, [pc, #552]	; (1457c <glcd_draw_circle+0x678>)
	glcd_update_bbox(x,y,x,y);
   14354:	0038      	movs	r0, r7
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   14356:	4698      	mov	r8, r3
   14358:	464b      	mov	r3, r9
   1435a:	43db      	mvns	r3, r3
   1435c:	4699      	mov	r9, r3
   1435e:	4643      	mov	r3, r8
   14360:	4649      	mov	r1, r9
   14362:	5c9b      	ldrb	r3, [r3, r2]
	glcd_update_bbox(x,y,x,y);
   14364:	4e86      	ldr	r6, [pc, #536]	; (14580 <glcd_draw_circle+0x67c>)
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   14366:	400b      	ands	r3, r1
   14368:	4641      	mov	r1, r8
   1436a:	548b      	strb	r3, [r1, r2]
	glcd_update_bbox(x,y,x,y);
   1436c:	002b      	movs	r3, r5
   1436e:	003a      	movs	r2, r7
   14370:	0029      	movs	r1, r5
   14372:	47b0      	blx	r6
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   14374:	4653      	mov	r3, sl
   14376:	2b00      	cmp	r3, #0
   14378:	da00      	bge.n	1437c <glcd_draw_circle+0x478>
   1437a:	e647      	b.n	1400c <glcd_draw_circle+0x108>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1437c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1437e:	4649      	mov	r1, r9
   14380:	18e2      	adds	r2, r4, r3
   14382:	4643      	mov	r3, r8
   14384:	5c9b      	ldrb	r3, [r3, r2]
   14386:	4019      	ands	r1, r3
   14388:	000b      	movs	r3, r1
   1438a:	4641      	mov	r1, r8
   1438c:	548b      	strb	r3, [r1, r2]
   1438e:	e6ca      	b.n	14126 <glcd_draw_circle+0x222>
   14390:	9a01      	ldr	r2, [sp, #4]
   14392:	2101      	movs	r1, #1
   14394:	4694      	mov	ip, r2
   14396:	4a79      	ldr	r2, [pc, #484]	; (1457c <glcd_draw_circle+0x678>)
   14398:	08fb      	lsrs	r3, r7, #3
   1439a:	4690      	mov	r8, r2
   1439c:	2207      	movs	r2, #7
   1439e:	403a      	ands	r2, r7
   143a0:	4091      	lsls	r1, r2
   143a2:	4642      	mov	r2, r8
   143a4:	01db      	lsls	r3, r3, #7
   143a6:	4463      	add	r3, ip
   143a8:	5cd2      	ldrb	r2, [r2, r3]
   143aa:	438a      	bics	r2, r1
   143ac:	4641      	mov	r1, r8
   143ae:	54ca      	strb	r2, [r1, r3]
   143b0:	e67f      	b.n	140b2 <glcd_draw_circle+0x1ae>
   143b2:	4a72      	ldr	r2, [pc, #456]	; (1457c <glcd_draw_circle+0x678>)
   143b4:	9900      	ldr	r1, [sp, #0]
   143b6:	4690      	mov	r8, r2
   143b8:	2207      	movs	r2, #7
   143ba:	08cb      	lsrs	r3, r1, #3
   143bc:	400a      	ands	r2, r1
   143be:	2101      	movs	r1, #1
   143c0:	4091      	lsls	r1, r2
   143c2:	4642      	mov	r2, r8
   143c4:	01db      	lsls	r3, r3, #7
   143c6:	19db      	adds	r3, r3, r7
   143c8:	5cd2      	ldrb	r2, [r2, r3]
   143ca:	438a      	bics	r2, r1
   143cc:	4641      	mov	r1, r8
   143ce:	54ca      	strb	r2, [r1, r3]
   143d0:	9900      	ldr	r1, [sp, #0]
   143d2:	e740      	b.n	14256 <glcd_draw_circle+0x352>
		glcd_set_pixel(x0 + y, y0 - x, color);
		glcd_set_pixel(x0 - y, y0 - x, color);
		
	}
}
   143d4:	b00b      	add	sp, #44	; 0x2c
   143d6:	bc3c      	pop	{r2, r3, r4, r5}
   143d8:	4690      	mov	r8, r2
   143da:	4699      	mov	r9, r3
   143dc:	46a2      	mov	sl, r4
   143de:	46ab      	mov	fp, r5
   143e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   143e2:	4653      	mov	r3, sl
   143e4:	466a      	mov	r2, sp
   143e6:	7013      	strb	r3, [r2, #0]
   143e8:	7813      	ldrb	r3, [r2, #0]
   143ea:	b25b      	sxtb	r3, r3
   143ec:	2b00      	cmp	r3, #0
   143ee:	da00      	bge.n	143f2 <glcd_draw_circle+0x4ee>
   143f0:	e5c2      	b.n	13f78 <glcd_draw_circle+0x74>
   143f2:	9b06      	ldr	r3, [sp, #24]
   143f4:	2b3f      	cmp	r3, #63	; 0x3f
   143f6:	d900      	bls.n	143fa <glcd_draw_circle+0x4f6>
   143f8:	e5be      	b.n	13f78 <glcd_draw_circle+0x74>
   143fa:	001a      	movs	r2, r3
   143fc:	08de      	lsrs	r6, r3, #3
   143fe:	2307      	movs	r3, #7
   14400:	2401      	movs	r4, #1
   14402:	4013      	ands	r3, r2
   14404:	409c      	lsls	r4, r3
	if (color) {
   14406:	9b07      	ldr	r3, [sp, #28]
   14408:	01f6      	lsls	r6, r6, #7
   1440a:	b264      	sxtb	r4, r4
   1440c:	2b00      	cmp	r3, #0
   1440e:	d100      	bne.n	14412 <glcd_draw_circle+0x50e>
   14410:	e0aa      	b.n	14568 <glcd_draw_circle+0x664>
   14412:	4b5a      	ldr	r3, [pc, #360]	; (1457c <glcd_draw_circle+0x678>)
   14414:	4698      	mov	r8, r3
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   14416:	4643      	mov	r3, r8
   14418:	4456      	add	r6, sl
   1441a:	5d9b      	ldrb	r3, [r3, r6]
   1441c:	431c      	orrs	r4, r3
   1441e:	4643      	mov	r3, r8
   14420:	559c      	strb	r4, [r3, r6]
	glcd_update_bbox(x,y,x,y);
   14422:	9906      	ldr	r1, [sp, #24]
   14424:	4652      	mov	r2, sl
   14426:	000b      	movs	r3, r1
   14428:	4650      	mov	r0, sl
   1442a:	4c55      	ldr	r4, [pc, #340]	; (14580 <glcd_draw_circle+0x67c>)
   1442c:	47a0      	blx	r4
   1442e:	e5a3      	b.n	13f78 <glcd_draw_circle+0x74>
	if (color) {
   14430:	9b07      	ldr	r3, [sp, #28]
   14432:	2b00      	cmp	r3, #0
   14434:	d000      	beq.n	14438 <glcd_draw_circle+0x534>
   14436:	e086      	b.n	14546 <glcd_draw_circle+0x642>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   14438:	9a05      	ldr	r2, [sp, #20]
   1443a:	2101      	movs	r1, #1
   1443c:	4694      	mov	ip, r2
   1443e:	4a4f      	ldr	r2, [pc, #316]	; (1457c <glcd_draw_circle+0x678>)
   14440:	08f3      	lsrs	r3, r6, #3
   14442:	4690      	mov	r8, r2
   14444:	2207      	movs	r2, #7
   14446:	4032      	ands	r2, r6
   14448:	4091      	lsls	r1, r2
   1444a:	4642      	mov	r2, r8
   1444c:	01db      	lsls	r3, r3, #7
   1444e:	4463      	add	r3, ip
   14450:	5cd2      	ldrb	r2, [r2, r3]
   14452:	438a      	bics	r2, r1
   14454:	4641      	mov	r1, r8
   14456:	54ca      	strb	r2, [r1, r3]
	glcd_update_bbox(x,y,x,y);
   14458:	9805      	ldr	r0, [sp, #20]
   1445a:	0033      	movs	r3, r6
   1445c:	0002      	movs	r2, r0
   1445e:	0031      	movs	r1, r6
   14460:	4c47      	ldr	r4, [pc, #284]	; (14580 <glcd_draw_circle+0x67c>)
   14462:	47a0      	blx	r4
   14464:	e580      	b.n	13f68 <glcd_draw_circle+0x64>
	if (color) {
   14466:	9b07      	ldr	r3, [sp, #28]
   14468:	2b00      	cmp	r3, #0
   1446a:	d15a      	bne.n	14522 <glcd_draw_circle+0x61e>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1446c:	9b05      	ldr	r3, [sp, #20]
   1446e:	4649      	mov	r1, r9
   14470:	469c      	mov	ip, r3
   14472:	4b42      	ldr	r3, [pc, #264]	; (1457c <glcd_draw_circle+0x678>)
   14474:	08e2      	lsrs	r2, r4, #3
   14476:	4698      	mov	r8, r3
   14478:	2307      	movs	r3, #7
   1447a:	4023      	ands	r3, r4
   1447c:	4099      	lsls	r1, r3
   1447e:	000b      	movs	r3, r1
   14480:	4641      	mov	r1, r8
   14482:	01d2      	lsls	r2, r2, #7
   14484:	4462      	add	r2, ip
   14486:	5c89      	ldrb	r1, [r1, r2]
   14488:	4399      	bics	r1, r3
   1448a:	4643      	mov	r3, r8
   1448c:	5499      	strb	r1, [r3, r2]
	glcd_update_bbox(x,y,x,y);
   1448e:	9805      	ldr	r0, [sp, #20]
   14490:	0023      	movs	r3, r4
   14492:	0021      	movs	r1, r4
   14494:	0002      	movs	r2, r0
   14496:	4c3a      	ldr	r4, [pc, #232]	; (14580 <glcd_draw_circle+0x67c>)
   14498:	47a0      	blx	r4
   1449a:	e562      	b.n	13f62 <glcd_draw_circle+0x5e>
	if (color) {
   1449c:	9b07      	ldr	r3, [sp, #28]
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1449e:	9906      	ldr	r1, [sp, #24]
	if (color) {
   144a0:	2b00      	cmp	r3, #0
   144a2:	d122      	bne.n	144ea <glcd_draw_circle+0x5e6>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   144a4:	2307      	movs	r3, #7
   144a6:	2401      	movs	r4, #1
   144a8:	400b      	ands	r3, r1
   144aa:	409c      	lsls	r4, r3
   144ac:	4b33      	ldr	r3, [pc, #204]	; (1457c <glcd_draw_circle+0x678>)
   144ae:	b264      	sxtb	r4, r4
   144b0:	4698      	mov	r8, r3
   144b2:	43e4      	mvns	r4, r4
   144b4:	4640      	mov	r0, r8
   144b6:	08ce      	lsrs	r6, r1, #3
   144b8:	01f6      	lsls	r6, r6, #7
   144ba:	19aa      	adds	r2, r5, r6
   144bc:	5c9b      	ldrb	r3, [r3, r2]
   144be:	4023      	ands	r3, r4
   144c0:	5483      	strb	r3, [r0, r2]
	glcd_update_bbox(x,y,x,y);
   144c2:	002a      	movs	r2, r5
   144c4:	000b      	movs	r3, r1
   144c6:	0028      	movs	r0, r5
   144c8:	4d2d      	ldr	r5, [pc, #180]	; (14580 <glcd_draw_circle+0x67c>)
   144ca:	47a8      	blx	r5
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   144cc:	4653      	mov	r3, sl
   144ce:	466a      	mov	r2, sp
   144d0:	7013      	strb	r3, [r2, #0]
   144d2:	7813      	ldrb	r3, [r2, #0]
   144d4:	b25b      	sxtb	r3, r3
   144d6:	2b00      	cmp	r3, #0
   144d8:	da00      	bge.n	144dc <glcd_draw_circle+0x5d8>
   144da:	e54d      	b.n	13f78 <glcd_draw_circle+0x74>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   144dc:	4643      	mov	r3, r8
   144de:	4456      	add	r6, sl
   144e0:	5d9b      	ldrb	r3, [r3, r6]
   144e2:	401c      	ands	r4, r3
   144e4:	4643      	mov	r3, r8
   144e6:	559c      	strb	r4, [r3, r6]
   144e8:	e79b      	b.n	14422 <glcd_draw_circle+0x51e>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   144ea:	2307      	movs	r3, #7
   144ec:	2401      	movs	r4, #1
   144ee:	400b      	ands	r3, r1
   144f0:	409c      	lsls	r4, r3
   144f2:	4b22      	ldr	r3, [pc, #136]	; (1457c <glcd_draw_circle+0x678>)
   144f4:	08ce      	lsrs	r6, r1, #3
   144f6:	4698      	mov	r8, r3
   144f8:	4640      	mov	r0, r8
   144fa:	01f6      	lsls	r6, r6, #7
   144fc:	19aa      	adds	r2, r5, r6
   144fe:	5c9b      	ldrb	r3, [r3, r2]
   14500:	b264      	sxtb	r4, r4
   14502:	4323      	orrs	r3, r4
   14504:	5483      	strb	r3, [r0, r2]
	glcd_update_bbox(x,y,x,y);
   14506:	002a      	movs	r2, r5
   14508:	000b      	movs	r3, r1
   1450a:	0028      	movs	r0, r5
   1450c:	4d1c      	ldr	r5, [pc, #112]	; (14580 <glcd_draw_circle+0x67c>)
   1450e:	47a8      	blx	r5
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   14510:	4653      	mov	r3, sl
   14512:	466a      	mov	r2, sp
   14514:	7013      	strb	r3, [r2, #0]
   14516:	7813      	ldrb	r3, [r2, #0]
   14518:	b25b      	sxtb	r3, r3
   1451a:	2b00      	cmp	r3, #0
   1451c:	da00      	bge.n	14520 <glcd_draw_circle+0x61c>
   1451e:	e52b      	b.n	13f78 <glcd_draw_circle+0x74>
   14520:	e779      	b.n	14416 <glcd_draw_circle+0x512>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   14522:	9a05      	ldr	r2, [sp, #20]
   14524:	4649      	mov	r1, r9
   14526:	4694      	mov	ip, r2
   14528:	4a14      	ldr	r2, [pc, #80]	; (1457c <glcd_draw_circle+0x678>)
   1452a:	08e3      	lsrs	r3, r4, #3
   1452c:	4690      	mov	r8, r2
   1452e:	2207      	movs	r2, #7
   14530:	4022      	ands	r2, r4
   14532:	4091      	lsls	r1, r2
   14534:	000a      	movs	r2, r1
   14536:	4641      	mov	r1, r8
   14538:	01db      	lsls	r3, r3, #7
   1453a:	4463      	add	r3, ip
   1453c:	5cc9      	ldrb	r1, [r1, r3]
   1453e:	430a      	orrs	r2, r1
   14540:	4641      	mov	r1, r8
   14542:	54ca      	strb	r2, [r1, r3]
   14544:	e7a3      	b.n	1448e <glcd_draw_circle+0x58a>
   14546:	9a05      	ldr	r2, [sp, #20]
   14548:	2107      	movs	r1, #7
   1454a:	4694      	mov	ip, r2
   1454c:	4a0b      	ldr	r2, [pc, #44]	; (1457c <glcd_draw_circle+0x678>)
   1454e:	4031      	ands	r1, r6
   14550:	4690      	mov	r8, r2
   14552:	2201      	movs	r2, #1
   14554:	408a      	lsls	r2, r1
   14556:	4641      	mov	r1, r8
   14558:	08f3      	lsrs	r3, r6, #3
   1455a:	01db      	lsls	r3, r3, #7
   1455c:	4463      	add	r3, ip
   1455e:	5cc9      	ldrb	r1, [r1, r3]
   14560:	430a      	orrs	r2, r1
   14562:	4641      	mov	r1, r8
   14564:	54ca      	strb	r2, [r1, r3]
   14566:	e777      	b.n	14458 <glcd_draw_circle+0x554>
   14568:	4b04      	ldr	r3, [pc, #16]	; (1457c <glcd_draw_circle+0x678>)
   1456a:	43e4      	mvns	r4, r4
   1456c:	4698      	mov	r8, r3
   1456e:	e7b5      	b.n	144dc <glcd_draw_circle+0x5d8>
   14570:	4b02      	ldr	r3, [pc, #8]	; (1457c <glcd_draw_circle+0x678>)
   14572:	4698      	mov	r8, r3
   14574:	464b      	mov	r3, r9
   14576:	43db      	mvns	r3, r3
   14578:	4699      	mov	r9, r3
   1457a:	e6ff      	b.n	1437c <glcd_draw_circle+0x478>
   1457c:	20001874 	.word	0x20001874
   14580:	00013785 	.word	0x00013785

00014584 <glcd_fill_circle>:

void glcd_fill_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
   14584:	b5f0      	push	{r4, r5, r6, r7, lr}
   14586:	4645      	mov	r5, r8
   14588:	46de      	mov	lr, fp
   1458a:	4657      	mov	r7, sl
   1458c:	464e      	mov	r6, r9
   1458e:	b5e0      	push	{r5, r6, r7, lr}
   14590:	b08f      	sub	sp, #60	; 0x3c
   14592:	9301      	str	r3, [sp, #4]
   14594:	4698      	mov	r8, r3
	
	int8_t f = 1 - r;
   14596:	2301      	movs	r3, #1
{
   14598:	0006      	movs	r6, r0
   1459a:	900d      	str	r0, [sp, #52]	; 0x34
   1459c:	0010      	movs	r0, r2
	int8_t f = 1 - r;
   1459e:	1a9b      	subs	r3, r3, r2
   145a0:	b25c      	sxtb	r4, r3
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
   145a2:	01d3      	lsls	r3, r2, #7
   145a4:	1a9b      	subs	r3, r3, r2
   145a6:	005b      	lsls	r3, r3, #1
	int8_t f = 1 - r;
   145a8:	9407      	str	r4, [sp, #28]
	int8_t ddF_y = -2 * r;
   145aa:	b25c      	sxtb	r4, r3
   145ac:	940c      	str	r4, [sp, #48]	; 0x30
	int8_t x = 0;
	int8_t y = r;
   145ae:	b254      	sxtb	r4, r2
	
	int16_t i;

	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
   145b0:	1845      	adds	r5, r0, r1
	int8_t y = r;
   145b2:	9406      	str	r4, [sp, #24]
	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
   145b4:	1982      	adds	r2, r0, r6
   145b6:	1a0c      	subs	r4, r1, r0
   145b8:	1a30      	subs	r0, r6, r0
{
   145ba:	910a      	str	r1, [sp, #40]	; 0x28
	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
   145bc:	b2eb      	uxtb	r3, r5
   145be:	b2e1      	uxtb	r1, r4
   145c0:	b2d2      	uxtb	r2, r2
   145c2:	b2c0      	uxtb	r0, r0
   145c4:	4fc7      	ldr	r7, [pc, #796]	; (148e4 <glcd_fill_circle+0x360>)
	
	for (i=y0-r; i<=y0+r; i++) {
   145c6:	b224      	sxth	r4, r4
	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
   145c8:	47b8      	blx	r7
	for (i=y0-r; i<=y0+r; i++) {
   145ca:	42a5      	cmp	r5, r4
   145cc:	db29      	blt.n	14622 <glcd_fill_circle+0x9e>
   145ce:	b273      	sxtb	r3, r6
   145d0:	2b00      	cmp	r3, #0
   145d2:	da00      	bge.n	145d6 <glcd_fill_circle+0x52>
   145d4:	e0f9      	b.n	147ca <glcd_fill_circle+0x246>
   145d6:	4643      	mov	r3, r8
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   145d8:	4ec3      	ldr	r6, [pc, #780]	; (148e8 <glcd_fill_circle+0x364>)
   145da:	2b00      	cmp	r3, #0
   145dc:	d000      	beq.n	145e0 <glcd_fill_circle+0x5c>
   145de:	e17c      	b.n	148da <glcd_fill_circle+0x356>
   145e0:	3307      	adds	r3, #7
   145e2:	4699      	mov	r9, r3
   145e4:	3b06      	subs	r3, #6
   145e6:	4698      	mov	r8, r3
   145e8:	e003      	b.n	145f2 <glcd_fill_circle+0x6e>
   145ea:	3401      	adds	r4, #1
   145ec:	b224      	sxth	r4, r4
	for (i=y0-r; i<=y0+r; i++) {
   145ee:	42a5      	cmp	r5, r4
   145f0:	db17      	blt.n	14622 <glcd_fill_circle+0x9e>
		glcd_set_pixel(x0, i, color);
   145f2:	b2e1      	uxtb	r1, r4
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   145f4:	293f      	cmp	r1, #63	; 0x3f
   145f6:	d8f8      	bhi.n	145ea <glcd_fill_circle+0x66>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   145f8:	464a      	mov	r2, r9
   145fa:	4640      	mov	r0, r8
   145fc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   145fe:	400a      	ands	r2, r1
   14600:	46bc      	mov	ip, r7
   14602:	4090      	lsls	r0, r2
   14604:	08cb      	lsrs	r3, r1, #3
   14606:	01db      	lsls	r3, r3, #7
   14608:	4463      	add	r3, ip
   1460a:	5cf2      	ldrb	r2, [r6, r3]
   1460c:	3401      	adds	r4, #1
   1460e:	4382      	bics	r2, r0
   14610:	54f2      	strb	r2, [r6, r3]
	glcd_update_bbox(x,y,x,y);
   14612:	0038      	movs	r0, r7
   14614:	003a      	movs	r2, r7
   14616:	000b      	movs	r3, r1
   14618:	4fb2      	ldr	r7, [pc, #712]	; (148e4 <glcd_fill_circle+0x360>)
   1461a:	b224      	sxth	r4, r4
   1461c:	47b8      	blx	r7
	for (i=y0-r; i<=y0+r; i++) {
   1461e:	42a5      	cmp	r5, r4
   14620:	dae7      	bge.n	145f2 <glcd_fill_circle+0x6e>
	}
	
	while (x < y) {
   14622:	9b06      	ldr	r3, [sp, #24]
   14624:	2b00      	cmp	r3, #0
   14626:	dc00      	bgt.n	1462a <glcd_fill_circle+0xa6>
   14628:	e0c8      	b.n	147bc <glcd_fill_circle+0x238>
   1462a:	466b      	mov	r3, sp
   1462c:	2228      	movs	r2, #40	; 0x28
   1462e:	5e9b      	ldrsh	r3, [r3, r2]
   14630:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   14632:	930b      	str	r3, [sp, #44]	; 0x2c
   14634:	0013      	movs	r3, r2
   14636:	3301      	adds	r3, #1
   14638:	b2db      	uxtb	r3, r3
   1463a:	9305      	str	r3, [sp, #20]
   1463c:	0013      	movs	r3, r2
   1463e:	3b01      	subs	r3, #1
   14640:	b2db      	uxtb	r3, r3
   14642:	9302      	str	r3, [sp, #8]
   14644:	2300      	movs	r3, #0
   14646:	9308      	str	r3, [sp, #32]
		if (f >= 0) {
   14648:	9a07      	ldr	r2, [sp, #28]
   1464a:	2a00      	cmp	r2, #0
   1464c:	db0c      	blt.n	14668 <glcd_fill_circle+0xe4>
			y--;
			ddF_y += 2;
			f += ddF_y;
   1464e:	4694      	mov	ip, r2
			y--;
   14650:	9b06      	ldr	r3, [sp, #24]
   14652:	3b01      	subs	r3, #1
   14654:	b25b      	sxtb	r3, r3
   14656:	9306      	str	r3, [sp, #24]
			ddF_y += 2;
   14658:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1465a:	3302      	adds	r3, #2
   1465c:	b2db      	uxtb	r3, r3
   1465e:	b259      	sxtb	r1, r3
			f += ddF_y;
   14660:	4463      	add	r3, ip
   14662:	b25b      	sxtb	r3, r3
			ddF_y += 2;
   14664:	910c      	str	r1, [sp, #48]	; 0x30
			f += ddF_y;
   14666:	9307      	str	r3, [sp, #28]
   14668:	9b08      	ldr	r3, [sp, #32]
   1466a:	3301      	adds	r3, #1
   1466c:	b2db      	uxtb	r3, r3
   1466e:	b25a      	sxtb	r2, r3
   14670:	9208      	str	r2, [sp, #32]
		}
		x++;
		ddF_x += 2;
		f += ddF_x;
   14672:	9a07      	ldr	r2, [sp, #28]
   14674:	9304      	str	r3, [sp, #16]
   14676:	4694      	mov	ip, r2
   14678:	005b      	lsls	r3, r3, #1
   1467a:	3301      	adds	r3, #1
   1467c:	4463      	add	r3, ip
   1467e:	b25b      	sxtb	r3, r3
   14680:	9307      	str	r3, [sp, #28]
		
		for (i=y0-y; i<=y0+y; i++) {
   14682:	9b06      	ldr	r3, [sp, #24]
   14684:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14686:	469c      	mov	ip, r3
   14688:	1ad4      	subs	r4, r2, r3
   1468a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1468c:	b224      	sxth	r4, r4
   1468e:	4462      	add	r2, ip
   14690:	4690      	mov	r8, r2
   14692:	4294      	cmp	r4, r2
   14694:	dc3a      	bgt.n	1470c <glcd_fill_circle+0x188>
   14696:	466b      	mov	r3, sp
   14698:	7d1b      	ldrb	r3, [r3, #20]
   1469a:	b25b      	sxtb	r3, r3
   1469c:	4699      	mov	r9, r3
   1469e:	466b      	mov	r3, sp
   146a0:	7a1b      	ldrb	r3, [r3, #8]
   146a2:	b25b      	sxtb	r3, r3
   146a4:	469b      	mov	fp, r3
   146a6:	e006      	b.n	146b6 <glcd_fill_circle+0x132>
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   146a8:	2d3f      	cmp	r5, #63	; 0x3f
   146aa:	d800      	bhi.n	146ae <glcd_fill_circle+0x12a>
   146ac:	e097      	b.n	147de <glcd_fill_circle+0x25a>
   146ae:	3401      	adds	r4, #1
   146b0:	b224      	sxth	r4, r4
		for (i=y0-y; i<=y0+y; i++) {
   146b2:	4544      	cmp	r4, r8
   146b4:	dc2a      	bgt.n	1470c <glcd_fill_circle+0x188>
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   146b6:	464b      	mov	r3, r9
			glcd_set_pixel(x0+x, i, color);
   146b8:	b2e5      	uxtb	r5, r4
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   146ba:	2b00      	cmp	r3, #0
   146bc:	daf4      	bge.n	146a8 <glcd_fill_circle+0x124>
   146be:	465b      	mov	r3, fp
   146c0:	2b00      	cmp	r3, #0
   146c2:	dbf4      	blt.n	146ae <glcd_fill_circle+0x12a>
   146c4:	2d3f      	cmp	r5, #63	; 0x3f
   146c6:	d8f2      	bhi.n	146ae <glcd_fill_circle+0x12a>
   146c8:	08ef      	lsrs	r7, r5, #3
   146ca:	01fb      	lsls	r3, r7, #7
   146cc:	9303      	str	r3, [sp, #12]
   146ce:	2307      	movs	r3, #7
   146d0:	2601      	movs	r6, #1
   146d2:	402b      	ands	r3, r5
   146d4:	409e      	lsls	r6, r3
	if (color) {
   146d6:	9b01      	ldr	r3, [sp, #4]
   146d8:	b276      	sxtb	r6, r6
   146da:	2b00      	cmp	r3, #0
   146dc:	d100      	bne.n	146e0 <glcd_fill_circle+0x15c>
   146de:	e124      	b.n	1492a <glcd_fill_circle+0x3a6>
   146e0:	4b81      	ldr	r3, [pc, #516]	; (148e8 <glcd_fill_circle+0x364>)
   146e2:	469a      	mov	sl, r3
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   146e4:	9b02      	ldr	r3, [sp, #8]
   146e6:	469c      	mov	ip, r3
   146e8:	9b03      	ldr	r3, [sp, #12]
   146ea:	4463      	add	r3, ip
   146ec:	001f      	movs	r7, r3
   146ee:	4653      	mov	r3, sl
   146f0:	5ddb      	ldrb	r3, [r3, r7]
   146f2:	431e      	orrs	r6, r3
   146f4:	4653      	mov	r3, sl
   146f6:	55de      	strb	r6, [r3, r7]
	glcd_update_bbox(x,y,x,y);
   146f8:	9802      	ldr	r0, [sp, #8]
   146fa:	3401      	adds	r4, #1
   146fc:	002b      	movs	r3, r5
   146fe:	0029      	movs	r1, r5
   14700:	0002      	movs	r2, r0
   14702:	4d78      	ldr	r5, [pc, #480]	; (148e4 <glcd_fill_circle+0x360>)
   14704:	b224      	sxth	r4, r4
   14706:	47a8      	blx	r5
		for (i=y0-y; i<=y0+y; i++) {
   14708:	4544      	cmp	r4, r8
   1470a:	ddd4      	ble.n	146b6 <glcd_fill_circle+0x132>
			glcd_set_pixel(x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) {
   1470c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1470e:	9b04      	ldr	r3, [sp, #16]
   14710:	1ad4      	subs	r4, r2, r3
   14712:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   14714:	b224      	sxth	r4, r4
   14716:	4694      	mov	ip, r2
   14718:	4463      	add	r3, ip
   1471a:	4699      	mov	r9, r3
   1471c:	42a3      	cmp	r3, r4
   1471e:	db40      	blt.n	147a2 <glcd_fill_circle+0x21e>
   14720:	466b      	mov	r3, sp
   14722:	990d      	ldr	r1, [sp, #52]	; 0x34
   14724:	7e1b      	ldrb	r3, [r3, #24]
   14726:	18ca      	adds	r2, r1, r3
   14728:	b2d2      	uxtb	r2, r2
   1472a:	9209      	str	r2, [sp, #36]	; 0x24
   1472c:	b252      	sxtb	r2, r2
   1472e:	4692      	mov	sl, r2
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   14730:	466a      	mov	r2, sp
			glcd_set_pixel(x0+y, i, color);
			glcd_set_pixel(x0-y, i, color);
   14732:	1acb      	subs	r3, r1, r3
   14734:	b2db      	uxtb	r3, r3
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   14736:	7313      	strb	r3, [r2, #12]
			glcd_set_pixel(x0-y, i, color);
   14738:	4698      	mov	r8, r3
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   1473a:	7b13      	ldrb	r3, [r2, #12]
   1473c:	b25b      	sxtb	r3, r3
   1473e:	9304      	str	r3, [sp, #16]
   14740:	e006      	b.n	14750 <glcd_fill_circle+0x1cc>
   14742:	2d3f      	cmp	r5, #63	; 0x3f
   14744:	d800      	bhi.n	14748 <glcd_fill_circle+0x1c4>
   14746:	e08a      	b.n	1485e <glcd_fill_circle+0x2da>
   14748:	3401      	adds	r4, #1
   1474a:	b224      	sxth	r4, r4
		for (i=y0-x; i<=y0+x; i++) {
   1474c:	454c      	cmp	r4, r9
   1474e:	dc28      	bgt.n	147a2 <glcd_fill_circle+0x21e>
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   14750:	4653      	mov	r3, sl
			glcd_set_pixel(x0+y, i, color);
   14752:	b2e5      	uxtb	r5, r4
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   14754:	2b00      	cmp	r3, #0
   14756:	daf4      	bge.n	14742 <glcd_fill_circle+0x1be>
   14758:	9b04      	ldr	r3, [sp, #16]
   1475a:	2b00      	cmp	r3, #0
   1475c:	dbf4      	blt.n	14748 <glcd_fill_circle+0x1c4>
   1475e:	2d3f      	cmp	r5, #63	; 0x3f
   14760:	d8f2      	bhi.n	14748 <glcd_fill_circle+0x1c4>
   14762:	08ef      	lsrs	r7, r5, #3
   14764:	01fb      	lsls	r3, r7, #7
   14766:	9303      	str	r3, [sp, #12]
   14768:	2307      	movs	r3, #7
   1476a:	2601      	movs	r6, #1
   1476c:	402b      	ands	r3, r5
   1476e:	409e      	lsls	r6, r3
	if (color) {
   14770:	9b01      	ldr	r3, [sp, #4]
   14772:	b276      	sxtb	r6, r6
   14774:	2b00      	cmp	r3, #0
   14776:	d100      	bne.n	1477a <glcd_fill_circle+0x1f6>
   14778:	e0d3      	b.n	14922 <glcd_fill_circle+0x39e>
   1477a:	4b5b      	ldr	r3, [pc, #364]	; (148e8 <glcd_fill_circle+0x364>)
   1477c:	469b      	mov	fp, r3
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1477e:	9b03      	ldr	r3, [sp, #12]
   14780:	4443      	add	r3, r8
   14782:	001f      	movs	r7, r3
   14784:	465b      	mov	r3, fp
   14786:	5ddb      	ldrb	r3, [r3, r7]
   14788:	431e      	orrs	r6, r3
   1478a:	465b      	mov	r3, fp
   1478c:	55de      	strb	r6, [r3, r7]
   1478e:	3401      	adds	r4, #1
	glcd_update_bbox(x,y,x,y);
   14790:	002b      	movs	r3, r5
   14792:	0029      	movs	r1, r5
   14794:	4642      	mov	r2, r8
   14796:	4640      	mov	r0, r8
   14798:	4d52      	ldr	r5, [pc, #328]	; (148e4 <glcd_fill_circle+0x360>)
   1479a:	b224      	sxth	r4, r4
   1479c:	47a8      	blx	r5
		for (i=y0-x; i<=y0+x; i++) {
   1479e:	454c      	cmp	r4, r9
   147a0:	ddd6      	ble.n	14750 <glcd_fill_circle+0x1cc>
   147a2:	9b05      	ldr	r3, [sp, #20]
	while (x < y) {
   147a4:	9a08      	ldr	r2, [sp, #32]
   147a6:	3301      	adds	r3, #1
   147a8:	b2db      	uxtb	r3, r3
   147aa:	9305      	str	r3, [sp, #20]
   147ac:	9b02      	ldr	r3, [sp, #8]
   147ae:	3b01      	subs	r3, #1
   147b0:	b2db      	uxtb	r3, r3
   147b2:	9302      	str	r3, [sp, #8]
   147b4:	9b06      	ldr	r3, [sp, #24]
   147b6:	4293      	cmp	r3, r2
   147b8:	dd00      	ble.n	147bc <glcd_fill_circle+0x238>
   147ba:	e745      	b.n	14648 <glcd_fill_circle+0xc4>
		}    
	}
}
   147bc:	b00f      	add	sp, #60	; 0x3c
   147be:	bc3c      	pop	{r2, r3, r4, r5}
   147c0:	4690      	mov	r8, r2
   147c2:	4699      	mov	r9, r3
   147c4:	46a2      	mov	sl, r4
   147c6:	46ab      	mov	fp, r5
   147c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   147ca:	3401      	adds	r4, #1
   147cc:	b224      	sxth	r4, r4
	for (i=y0-r; i<=y0+r; i++) {
   147ce:	42ac      	cmp	r4, r5
   147d0:	dd00      	ble.n	147d4 <glcd_fill_circle+0x250>
   147d2:	e726      	b.n	14622 <glcd_fill_circle+0x9e>
   147d4:	3401      	adds	r4, #1
   147d6:	b224      	sxth	r4, r4
   147d8:	42ac      	cmp	r4, r5
   147da:	ddf6      	ble.n	147ca <glcd_fill_circle+0x246>
   147dc:	e721      	b.n	14622 <glcd_fill_circle+0x9e>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   147de:	08ef      	lsrs	r7, r5, #3
	if (color) {
   147e0:	9b01      	ldr	r3, [sp, #4]
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   147e2:	01fa      	lsls	r2, r7, #7
   147e4:	9203      	str	r2, [sp, #12]
   147e6:	9905      	ldr	r1, [sp, #20]
	if (color) {
   147e8:	2b00      	cmp	r3, #0
   147ea:	d016      	beq.n	1481a <glcd_fill_circle+0x296>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   147ec:	2307      	movs	r3, #7
   147ee:	2601      	movs	r6, #1
   147f0:	402b      	ands	r3, r5
   147f2:	409e      	lsls	r6, r3
   147f4:	4b3c      	ldr	r3, [pc, #240]	; (148e8 <glcd_fill_circle+0x364>)
   147f6:	188a      	adds	r2, r1, r2
   147f8:	469a      	mov	sl, r3
   147fa:	4650      	mov	r0, sl
   147fc:	5c9b      	ldrb	r3, [r3, r2]
   147fe:	b276      	sxtb	r6, r6
   14800:	4333      	orrs	r3, r6
   14802:	5483      	strb	r3, [r0, r2]
	glcd_update_bbox(x,y,x,y);
   14804:	4f37      	ldr	r7, [pc, #220]	; (148e4 <glcd_fill_circle+0x360>)
   14806:	002b      	movs	r3, r5
   14808:	0008      	movs	r0, r1
   1480a:	000a      	movs	r2, r1
   1480c:	0029      	movs	r1, r5
   1480e:	47b8      	blx	r7
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   14810:	465b      	mov	r3, fp
   14812:	2b00      	cmp	r3, #0
   14814:	da00      	bge.n	14818 <glcd_fill_circle+0x294>
   14816:	e74a      	b.n	146ae <glcd_fill_circle+0x12a>
   14818:	e764      	b.n	146e4 <glcd_fill_circle+0x160>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1481a:	2307      	movs	r3, #7
   1481c:	2601      	movs	r6, #1
   1481e:	402b      	ands	r3, r5
   14820:	409e      	lsls	r6, r3
   14822:	4b31      	ldr	r3, [pc, #196]	; (148e8 <glcd_fill_circle+0x364>)
   14824:	b276      	sxtb	r6, r6
   14826:	469a      	mov	sl, r3
   14828:	43f6      	mvns	r6, r6
   1482a:	4650      	mov	r0, sl
   1482c:	188a      	adds	r2, r1, r2
   1482e:	5c9b      	ldrb	r3, [r3, r2]
	glcd_update_bbox(x,y,x,y);
   14830:	4f2c      	ldr	r7, [pc, #176]	; (148e4 <glcd_fill_circle+0x360>)
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   14832:	4033      	ands	r3, r6
   14834:	5483      	strb	r3, [r0, r2]
	glcd_update_bbox(x,y,x,y);
   14836:	002b      	movs	r3, r5
   14838:	0008      	movs	r0, r1
   1483a:	000a      	movs	r2, r1
   1483c:	0029      	movs	r1, r5
   1483e:	47b8      	blx	r7
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   14840:	465b      	mov	r3, fp
   14842:	2b00      	cmp	r3, #0
   14844:	da00      	bge.n	14848 <glcd_fill_circle+0x2c4>
   14846:	e732      	b.n	146ae <glcd_fill_circle+0x12a>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   14848:	9b02      	ldr	r3, [sp, #8]
   1484a:	469c      	mov	ip, r3
   1484c:	9b03      	ldr	r3, [sp, #12]
   1484e:	4463      	add	r3, ip
   14850:	001f      	movs	r7, r3
   14852:	4653      	mov	r3, sl
   14854:	5ddb      	ldrb	r3, [r3, r7]
   14856:	401e      	ands	r6, r3
   14858:	4653      	mov	r3, sl
   1485a:	55de      	strb	r6, [r3, r7]
   1485c:	e74c      	b.n	146f8 <glcd_fill_circle+0x174>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1485e:	08ef      	lsrs	r7, r5, #3
	if (color) {
   14860:	9b01      	ldr	r3, [sp, #4]
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   14862:	01fa      	lsls	r2, r7, #7
   14864:	9203      	str	r2, [sp, #12]
   14866:	9909      	ldr	r1, [sp, #36]	; 0x24
	if (color) {
   14868:	2b00      	cmp	r3, #0
   1486a:	d016      	beq.n	1489a <glcd_fill_circle+0x316>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   1486c:	2307      	movs	r3, #7
   1486e:	2601      	movs	r6, #1
   14870:	402b      	ands	r3, r5
   14872:	409e      	lsls	r6, r3
   14874:	4b1c      	ldr	r3, [pc, #112]	; (148e8 <glcd_fill_circle+0x364>)
   14876:	188a      	adds	r2, r1, r2
   14878:	469b      	mov	fp, r3
   1487a:	4658      	mov	r0, fp
   1487c:	5c9b      	ldrb	r3, [r3, r2]
   1487e:	b276      	sxtb	r6, r6
   14880:	4333      	orrs	r3, r6
   14882:	5483      	strb	r3, [r0, r2]
	glcd_update_bbox(x,y,x,y);
   14884:	4f17      	ldr	r7, [pc, #92]	; (148e4 <glcd_fill_circle+0x360>)
   14886:	002b      	movs	r3, r5
   14888:	0008      	movs	r0, r1
   1488a:	000a      	movs	r2, r1
   1488c:	0029      	movs	r1, r5
   1488e:	47b8      	blx	r7
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   14890:	9b04      	ldr	r3, [sp, #16]
   14892:	2b00      	cmp	r3, #0
   14894:	da00      	bge.n	14898 <glcd_fill_circle+0x314>
   14896:	e757      	b.n	14748 <glcd_fill_circle+0x1c4>
   14898:	e771      	b.n	1477e <glcd_fill_circle+0x1fa>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   1489a:	2307      	movs	r3, #7
   1489c:	2601      	movs	r6, #1
   1489e:	402b      	ands	r3, r5
   148a0:	409e      	lsls	r6, r3
   148a2:	4b11      	ldr	r3, [pc, #68]	; (148e8 <glcd_fill_circle+0x364>)
   148a4:	b276      	sxtb	r6, r6
   148a6:	469b      	mov	fp, r3
   148a8:	43f6      	mvns	r6, r6
   148aa:	4658      	mov	r0, fp
   148ac:	188a      	adds	r2, r1, r2
   148ae:	5c9b      	ldrb	r3, [r3, r2]
	glcd_update_bbox(x,y,x,y);
   148b0:	4f0c      	ldr	r7, [pc, #48]	; (148e4 <glcd_fill_circle+0x360>)
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   148b2:	4033      	ands	r3, r6
   148b4:	5483      	strb	r3, [r0, r2]
	glcd_update_bbox(x,y,x,y);
   148b6:	002b      	movs	r3, r5
   148b8:	0008      	movs	r0, r1
   148ba:	000a      	movs	r2, r1
   148bc:	0029      	movs	r1, r5
   148be:	47b8      	blx	r7
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   148c0:	9b04      	ldr	r3, [sp, #16]
   148c2:	2b00      	cmp	r3, #0
   148c4:	da00      	bge.n	148c8 <glcd_fill_circle+0x344>
   148c6:	e73f      	b.n	14748 <glcd_fill_circle+0x1c4>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
   148c8:	9b03      	ldr	r3, [sp, #12]
   148ca:	4443      	add	r3, r8
   148cc:	001f      	movs	r7, r3
   148ce:	465b      	mov	r3, fp
   148d0:	5ddb      	ldrb	r3, [r3, r7]
   148d2:	401e      	ands	r6, r3
   148d4:	465b      	mov	r3, fp
   148d6:	55de      	strb	r6, [r3, r7]
   148d8:	e759      	b.n	1478e <glcd_fill_circle+0x20a>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   148da:	2307      	movs	r3, #7
   148dc:	4699      	mov	r9, r3
   148de:	3b06      	subs	r3, #6
   148e0:	4698      	mov	r8, r3
   148e2:	e008      	b.n	148f6 <glcd_fill_circle+0x372>
   148e4:	00013785 	.word	0x00013785
   148e8:	20001874 	.word	0x20001874
   148ec:	3401      	adds	r4, #1
   148ee:	b224      	sxth	r4, r4
	for (i=y0-r; i<=y0+r; i++) {
   148f0:	42a5      	cmp	r5, r4
   148f2:	da00      	bge.n	148f6 <glcd_fill_circle+0x372>
   148f4:	e695      	b.n	14622 <glcd_fill_circle+0x9e>
		glcd_set_pixel(x0, i, color);
   148f6:	b2e1      	uxtb	r1, r4
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
   148f8:	293f      	cmp	r1, #63	; 0x3f
   148fa:	d8f7      	bhi.n	148ec <glcd_fill_circle+0x368>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
   148fc:	464a      	mov	r2, r9
   148fe:	4640      	mov	r0, r8
   14900:	400a      	ands	r2, r1
   14902:	4090      	lsls	r0, r2
   14904:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   14906:	0002      	movs	r2, r0
   14908:	46bc      	mov	ip, r7
   1490a:	08cb      	lsrs	r3, r1, #3
   1490c:	01db      	lsls	r3, r3, #7
   1490e:	4463      	add	r3, ip
   14910:	5cf0      	ldrb	r0, [r6, r3]
   14912:	4302      	orrs	r2, r0
   14914:	54f2      	strb	r2, [r6, r3]
	glcd_update_bbox(x,y,x,y);
   14916:	0038      	movs	r0, r7
   14918:	003a      	movs	r2, r7
   1491a:	000b      	movs	r3, r1
   1491c:	4f05      	ldr	r7, [pc, #20]	; (14934 <glcd_fill_circle+0x3b0>)
   1491e:	47b8      	blx	r7
   14920:	e7e4      	b.n	148ec <glcd_fill_circle+0x368>
   14922:	4b05      	ldr	r3, [pc, #20]	; (14938 <glcd_fill_circle+0x3b4>)
   14924:	43f6      	mvns	r6, r6
   14926:	469b      	mov	fp, r3
   14928:	e7ce      	b.n	148c8 <glcd_fill_circle+0x344>
   1492a:	4b03      	ldr	r3, [pc, #12]	; (14938 <glcd_fill_circle+0x3b4>)
   1492c:	43f6      	mvns	r6, r6
   1492e:	469a      	mov	sl, r3
   14930:	e78a      	b.n	14848 <glcd_fill_circle+0x2c4>
   14932:	46c0      	nop			; (mov r8, r8)
   14934:	00013785 	.word	0x00013785
   14938:	20001874 	.word	0x20001874

0001493c <glcd_write>:
void glcd_write()
{

	uint8_t bank;

	for (bank = 0; bank < GLCD_NUMBER_OF_BANKS; bank++) {
   1493c:	2200      	movs	r2, #0
{
   1493e:	b5f0      	push	{r4, r5, r6, r7, lr}
   14940:	4657      	mov	r7, sl
   14942:	4645      	mov	r5, r8
   14944:	46de      	mov	lr, fp
   14946:	464e      	mov	r6, r9
	for (bank = 0; bank < GLCD_NUMBER_OF_BANKS; bank++) {
   14948:	4692      	mov	sl, r2
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   1494a:	4a28      	ldr	r2, [pc, #160]	; (149ec <glcd_write+0xb0>)
{
   1494c:	b5e0      	push	{r5, r6, r7, lr}
   1494e:	4690      	mov	r8, r2
   14950:	4a27      	ldr	r2, [pc, #156]	; (149f0 <glcd_write+0xb4>)
   14952:	2500      	movs	r5, #0
   14954:	4693      	mov	fp, r2
   14956:	4b27      	ldr	r3, [pc, #156]	; (149f4 <glcd_write+0xb8>)
	glcd_spi_write(c);	
   14958:	4f27      	ldr	r7, [pc, #156]	; (149f8 <glcd_write+0xbc>)
   1495a:	4699      	mov	r9, r3
   1495c:	681b      	ldr	r3, [r3, #0]
{
   1495e:	b083      	sub	sp, #12
   14960:	2208      	movs	r2, #8
   14962:	4694      	mov	ip, r2
   14964:	44ac      	add	ip, r5
   14966:	4662      	mov	r2, ip
   14968:	9201      	str	r2, [sp, #4]
		/* Each bank is a single row 8 bits tall */
		uint8_t column;		
		
		if (glcd_bbox_selected->y_min >= (bank+1)*8) {
   1496a:	785a      	ldrb	r2, [r3, #1]
   1496c:	4562      	cmp	r2, ip
   1496e:	da2d      	bge.n	149cc <glcd_write+0x90>
			continue; /* Skip the entire bank */
		}
		
		if (glcd_bbox_selected->y_max < bank*8) {
   14970:	78db      	ldrb	r3, [r3, #3]
   14972:	42ab      	cmp	r3, r5
   14974:	db31      	blt.n	149da <glcd_write+0x9e>
   14976:	2680      	movs	r6, #128	; 0x80
   14978:	4643      	mov	r3, r8
   1497a:	0536      	lsls	r6, r6, #20
   1497c:	615e      	str	r6, [r3, #20]
	glcd_command(ST7565R_PAGE_ADDRESS_SET | (0x0F & y)); /* 0x0F = 0b00001111 */
   1497e:	20b0      	movs	r0, #176	; 0xb0
	glcd_spi_write(c);	
   14980:	4653      	mov	r3, sl
   14982:	4318      	orrs	r0, r3
   14984:	47b8      	blx	r7
			break;    /* No more banks need updating */
		}
		
		glcd_set_y_address(bank);
		glcd_set_x_address(glcd_bbox_selected->x_min);
   14986:	464b      	mov	r3, r9
   14988:	681b      	ldr	r3, [r3, #0]
   1498a:	781c      	ldrb	r4, [r3, #0]
   1498c:	4643      	mov	r3, r8
   1498e:	615e      	str	r6, [r3, #20]
	glcd_command(ST7565R_COLUMN_ADDRESS_SET_UPPER | (addr >> 4));
   14990:	2310      	movs	r3, #16
   14992:	0920      	lsrs	r0, r4, #4
	glcd_spi_write(c);	
   14994:	4318      	orrs	r0, r3
   14996:	47b8      	blx	r7
   14998:	4643      	mov	r3, r8
   1499a:	200f      	movs	r0, #15
   1499c:	615e      	str	r6, [r3, #20]
   1499e:	4020      	ands	r0, r4
   149a0:	47b8      	blx	r7

		for (column = glcd_bbox_selected->x_min; column <= glcd_bbox_selected->x_max; column++)
   149a2:	464b      	mov	r3, r9
   149a4:	681b      	ldr	r3, [r3, #0]
   149a6:	781c      	ldrb	r4, [r3, #0]
   149a8:	789a      	ldrb	r2, [r3, #2]
   149aa:	42a2      	cmp	r2, r4
   149ac:	d30e      	bcc.n	149cc <glcd_write+0x90>
   149ae:	012d      	lsls	r5, r5, #4
		{
			glcd_data( glcd_buffer_selected[GLCD_NUMBER_OF_COLS * bank + column] );
   149b0:	465b      	mov	r3, fp
   149b2:	681b      	ldr	r3, [r3, #0]
   149b4:	191b      	adds	r3, r3, r4
   149b6:	5d58      	ldrb	r0, [r3, r5]
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   149b8:	4643      	mov	r3, r8
   149ba:	619e      	str	r6, [r3, #24]
	glcd_spi_write(c);	
   149bc:	47b8      	blx	r7
		for (column = glcd_bbox_selected->x_min; column <= glcd_bbox_selected->x_max; column++)
   149be:	464b      	mov	r3, r9
   149c0:	681b      	ldr	r3, [r3, #0]
   149c2:	3401      	adds	r4, #1
   149c4:	789a      	ldrb	r2, [r3, #2]
   149c6:	b2e4      	uxtb	r4, r4
   149c8:	42a2      	cmp	r2, r4
   149ca:	d2f1      	bcs.n	149b0 <glcd_write+0x74>
	for (bank = 0; bank < GLCD_NUMBER_OF_BANKS; bank++) {
   149cc:	4652      	mov	r2, sl
   149ce:	3201      	adds	r2, #1
   149d0:	b2d2      	uxtb	r2, r2
   149d2:	4692      	mov	sl, r2
   149d4:	9d01      	ldr	r5, [sp, #4]
   149d6:	2a10      	cmp	r2, #16
   149d8:	d1c2      	bne.n	14960 <glcd_write+0x24>
		}
	}

	glcd_reset_bbox();
   149da:	4b08      	ldr	r3, [pc, #32]	; (149fc <glcd_write+0xc0>)
   149dc:	4798      	blx	r3

}
   149de:	b003      	add	sp, #12
   149e0:	bc3c      	pop	{r2, r3, r4, r5}
   149e2:	4690      	mov	r8, r2
   149e4:	4699      	mov	r9, r3
   149e6:	46a2      	mov	sl, r4
   149e8:	46ab      	mov	fp, r5
   149ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   149ec:	40002800 	.word	0x40002800
   149f0:	20001c74 	.word	0x20001c74
   149f4:	20001c78 	.word	0x20001c78
   149f8:	00013749 	.word	0x00013749
   149fc:	000137e5 	.word	0x000137e5

00014a00 <glcd_ST7565R_init>:

void glcd_ST7565R_init(void) {
   14a00:	b570      	push	{r4, r5, r6, lr}
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   14a02:	2680      	movs	r6, #128	; 0x80
   14a04:	4d0f      	ldr	r5, [pc, #60]	; (14a44 <glcd_ST7565R_init+0x44>)
   14a06:	0536      	lsls	r6, r6, #20
	glcd_spi_write(c);	
   14a08:	4c0f      	ldr	r4, [pc, #60]	; (14a48 <glcd_ST7565R_init+0x48>)
   14a0a:	616e      	str	r6, [r5, #20]
   14a0c:	20a0      	movs	r0, #160	; 0xa0
   14a0e:	47a0      	blx	r4
   14a10:	616e      	str	r6, [r5, #20]
   14a12:	20ae      	movs	r0, #174	; 0xae
   14a14:	47a0      	blx	r4
   14a16:	616e      	str	r6, [r5, #20]
   14a18:	20c8      	movs	r0, #200	; 0xc8
   14a1a:	47a0      	blx	r4
   14a1c:	616e      	str	r6, [r5, #20]
   14a1e:	20a2      	movs	r0, #162	; 0xa2
   14a20:	47a0      	blx	r4
   14a22:	616e      	str	r6, [r5, #20]
   14a24:	202f      	movs	r0, #47	; 0x2f
   14a26:	47a0      	blx	r4
   14a28:	616e      	str	r6, [r5, #20]
   14a2a:	2026      	movs	r0, #38	; 0x26
   14a2c:	47a0      	blx	r4
   14a2e:	616e      	str	r6, [r5, #20]
   14a30:	2081      	movs	r0, #129	; 0x81
   14a32:	47a0      	blx	r4
   14a34:	616e      	str	r6, [r5, #20]
   14a36:	2014      	movs	r0, #20
   14a38:	47a0      	blx	r4
   14a3a:	616e      	str	r6, [r5, #20]
   14a3c:	20af      	movs	r0, #175	; 0xaf
   14a3e:	47a0      	blx	r4
	glcd_set_contrast(20); /* Set contrast, value experimentally determined, value 0 to 63 */
	glcd_command(0xaf); /* Display on */

#endif

}
   14a40:	bd70      	pop	{r4, r5, r6, pc}
   14a42:	46c0      	nop			; (mov r8, r8)
   14a44:	40002800 	.word	0x40002800
   14a48:	00013749 	.word	0x00013749

00014a4c <glcd_draw_char_xy>:
	font_current.end_char = end_char;
	font_current.table_type = type; /* Only supports MikroElektronika generated format at the moment */
}

uint8_t glcd_draw_char_xy(uint8_t x, uint8_t y, char c)
{
   14a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   14a4e:	46de      	mov	lr, fp
   14a50:	4657      	mov	r7, sl
   14a52:	464e      	mov	r6, r9
   14a54:	4645      	mov	r5, r8
   14a56:	b5e0      	push	{r5, r6, r7, lr}
	if (c < font_current.start_char || c > font_current.end_char) {
   14a58:	4bb1      	ldr	r3, [pc, #708]	; (14d20 <glcd_draw_char_xy+0x2d4>)
{
   14a5a:	b08f      	sub	sp, #60	; 0x3c
   14a5c:	9202      	str	r2, [sp, #8]
	if (c < font_current.start_char || c > font_current.end_char) {
   14a5e:	4699      	mov	r9, r3
   14a60:	799b      	ldrb	r3, [r3, #6]
{
   14a62:	468b      	mov	fp, r1
   14a64:	4682      	mov	sl, r0
   14a66:	0011      	movs	r1, r2
	if (c < font_current.start_char || c > font_current.end_char) {
   14a68:	4293      	cmp	r3, r2
   14a6a:	d83c      	bhi.n	14ae6 <glcd_draw_char_xy+0x9a>
   14a6c:	464a      	mov	r2, r9
   14a6e:	79d2      	ldrb	r2, [r2, #7]
   14a70:	428a      	cmp	r2, r1
   14a72:	d338      	bcc.n	14ae6 <glcd_draw_char_xy+0x9a>
		c = '.';
	}
	
	if (font_current.table_type == STANG) {
   14a74:	464a      	mov	r2, r9
   14a76:	7a12      	ldrb	r2, [r2, #8]
   14a78:	2a00      	cmp	r2, #0
   14a7a:	d13a      	bne.n	14af2 <glcd_draw_char_xy+0xa6>
		/* Font table in Pascal Stang format (single byte height with with no width specifier) */
		/* Maximum height of 8 bits only */
			
		uint8_t i;
		for ( i = 0; i < font_current.width; i++ ) {
   14a7c:	464a      	mov	r2, r9
   14a7e:	7917      	ldrb	r7, [r2, #4]
   14a80:	4652      	mov	r2, sl
   14a82:	9203      	str	r2, [sp, #12]
   14a84:	2200      	movs	r2, #0
   14a86:	9201      	str	r2, [sp, #4]
   14a88:	2f00      	cmp	r7, #0
   14a8a:	d037      	beq.n	14afc <glcd_draw_char_xy+0xb0>
					return 0;
				}
				if (dat & (1<<j)) {
					glcd_set_pixel(x+i,y+j,BLACK);
				} else {
					glcd_set_pixel(x+i,y+j,WHITE);
   14a8c:	003a      	movs	r2, r7
   14a8e:	4657      	mov	r7, sl
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
   14a90:	9902      	ldr	r1, [sp, #8]
   14a92:	9801      	ldr	r0, [sp, #4]
   14a94:	1acb      	subs	r3, r1, r3
   14a96:	435a      	muls	r2, r3
   14a98:	464b      	mov	r3, r9
   14a9a:	4684      	mov	ip, r0
   14a9c:	681b      	ldr	r3, [r3, #0]
   14a9e:	4463      	add	r3, ip
   14aa0:	5c9b      	ldrb	r3, [r3, r2]
   14aa2:	4698      	mov	r8, r3
   14aa4:	9b03      	ldr	r3, [sp, #12]
   14aa6:	4463      	add	r3, ip
   14aa8:	2b7f      	cmp	r3, #127	; 0x7f
   14aaa:	dc27      	bgt.n	14afc <glcd_draw_char_xy+0xb0>
   14aac:	465e      	mov	r6, fp
				if (dat & (1<<j)) {
   14aae:	2301      	movs	r3, #1
   14ab0:	3608      	adds	r6, #8
   14ab2:	b2f6      	uxtb	r6, r6
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
   14ab4:	465c      	mov	r4, fp
   14ab6:	2500      	movs	r5, #0
				if (dat & (1<<j)) {
   14ab8:	469a      	mov	sl, r3
   14aba:	e009      	b.n	14ad0 <glcd_draw_char_xy+0x84>
					glcd_set_pixel(x+i,y+j,WHITE);
   14abc:	2200      	movs	r2, #0
					glcd_set_pixel(x+i,y+j,BLACK);
   14abe:	0021      	movs	r1, r4
   14ac0:	3401      	adds	r4, #1
   14ac2:	0038      	movs	r0, r7
   14ac4:	4b97      	ldr	r3, [pc, #604]	; (14d24 <glcd_draw_char_xy+0x2d8>)
   14ac6:	b2e4      	uxtb	r4, r4
   14ac8:	4798      	blx	r3
   14aca:	3501      	adds	r5, #1
			for (j = 0; j < 8; j++) {
   14acc:	42b4      	cmp	r4, r6
   14ace:	d01e      	beq.n	14b0e <glcd_draw_char_xy+0xc2>
				if (x+i >= GLCD_LCD_WIDTH || y+j >= GLCD_LCD_HEIGHT) {
   14ad0:	465b      	mov	r3, fp
   14ad2:	195b      	adds	r3, r3, r5
   14ad4:	2b3f      	cmp	r3, #63	; 0x3f
   14ad6:	d811      	bhi.n	14afc <glcd_draw_char_xy+0xb0>
				if (dat & (1<<j)) {
   14ad8:	4643      	mov	r3, r8
   14ada:	4652      	mov	r2, sl
   14adc:	412b      	asrs	r3, r5
   14ade:	421a      	tst	r2, r3
   14ae0:	d0ec      	beq.n	14abc <glcd_draw_char_xy+0x70>
					glcd_set_pixel(x+i,y+j,BLACK);
   14ae2:	2201      	movs	r2, #1
   14ae4:	e7eb      	b.n	14abe <glcd_draw_char_xy+0x72>
		c = '.';
   14ae6:	222e      	movs	r2, #46	; 0x2e
   14ae8:	9202      	str	r2, [sp, #8]
	if (font_current.table_type == STANG) {
   14aea:	464a      	mov	r2, r9
   14aec:	7a12      	ldrb	r2, [r2, #8]
   14aee:	2a00      	cmp	r2, #0
   14af0:	d0c4      	beq.n	14a7c <glcd_draw_char_xy+0x30>
		
		/* always return how many pixels of width were written */
		/* here for "stang" format fonts, it is always fixed */
		return font_current.width;
		
	} else if (font_current.table_type == MIKRO) {
   14af2:	2a01      	cmp	r2, #1
   14af4:	d019      	beq.n	14b2a <glcd_draw_char_xy+0xde>
				}									
			}				
		}
		return var_width;	
	
	} else if (font_current.table_type == GLCD_UTILS) {
   14af6:	2a02      	cmp	r2, #2
   14af8:	d100      	bne.n	14afc <glcd_draw_char_xy+0xb0>
   14afa:	e0fc      	b.n	14cf6 <glcd_draw_char_xy+0x2aa>
		for ( i = 0; i < font_current.width; i++ ) {
   14afc:	2700      	movs	r7, #0
		/* Don't recognise the font table */
		return 0;
		
	}

}
   14afe:	0038      	movs	r0, r7
   14b00:	b00f      	add	sp, #60	; 0x3c
   14b02:	bc3c      	pop	{r2, r3, r4, r5}
   14b04:	4690      	mov	r8, r2
   14b06:	4699      	mov	r9, r3
   14b08:	46a2      	mov	sl, r4
   14b0a:	46ab      	mov	fp, r5
   14b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for ( i = 0; i < font_current.width; i++ ) {
   14b0e:	464a      	mov	r2, r9
   14b10:	9b01      	ldr	r3, [sp, #4]
   14b12:	3701      	adds	r7, #1
   14b14:	3301      	adds	r3, #1
   14b16:	b2db      	uxtb	r3, r3
   14b18:	9301      	str	r3, [sp, #4]
   14b1a:	7912      	ldrb	r2, [r2, #4]
   14b1c:	b2ff      	uxtb	r7, r7
   14b1e:	429a      	cmp	r2, r3
   14b20:	d800      	bhi.n	14b24 <glcd_draw_char_xy+0xd8>
   14b22:	e21f      	b.n	14f64 <glcd_draw_char_xy+0x518>
   14b24:	464b      	mov	r3, r9
   14b26:	799b      	ldrb	r3, [r3, #6]
   14b28:	e7b2      	b.n	14a90 <glcd_draw_char_xy+0x44>
		if ((font_current.height % 8) > 0){
   14b2a:	464a      	mov	r2, r9
   14b2c:	7952      	ldrb	r2, [r2, #5]
			bytes_high = (font_current.height / 8);
   14b2e:	08d1      	lsrs	r1, r2, #3
   14b30:	9101      	str	r1, [sp, #4]
		if ((font_current.height % 8) > 0){
   14b32:	0751      	lsls	r1, r2, #29
   14b34:	d002      	beq.n	14b3c <glcd_draw_char_xy+0xf0>
			bytes_high = (font_current.height / 8) + 1;
   14b36:	08d2      	lsrs	r2, r2, #3
   14b38:	3201      	adds	r2, #1
   14b3a:	9201      	str	r2, [sp, #4]
		bytes_per_char = font_current.width * bytes_high + 1; /* The +1 is the width byte at the start */
   14b3c:	464a      	mov	r2, r9
   14b3e:	9901      	ldr	r1, [sp, #4]
   14b40:	7912      	ldrb	r2, [r2, #4]
   14b42:	434a      	muls	r2, r1
		p = font_current.font_table + (c - font_current.start_char) * bytes_per_char;
   14b44:	9902      	ldr	r1, [sp, #8]
		bytes_per_char = font_current.width * bytes_high + 1; /* The +1 is the width byte at the start */
   14b46:	3201      	adds	r2, #1
		p = font_current.font_table + (c - font_current.start_char) * bytes_per_char;
   14b48:	1acb      	subs	r3, r1, r3
   14b4a:	b2d2      	uxtb	r2, r2
   14b4c:	435a      	muls	r2, r3
   14b4e:	464b      	mov	r3, r9
   14b50:	681b      	ldr	r3, [r3, #0]
   14b52:	469c      	mov	ip, r3
   14b54:	4462      	add	r2, ip
		var_width = *p;
   14b56:	7817      	ldrb	r7, [r2, #0]
		for ( i = 0; i < var_width; i++ ) {
   14b58:	2f00      	cmp	r7, #0
   14b5a:	d0cf      	beq.n	14afc <glcd_draw_char_xy+0xb0>
   14b5c:	9202      	str	r2, [sp, #8]
   14b5e:	4652      	mov	r2, sl
   14b60:	1e7b      	subs	r3, r7, #1
   14b62:	3201      	adds	r2, #1
   14b64:	b2db      	uxtb	r3, r3
   14b66:	189b      	adds	r3, r3, r2
   14b68:	9305      	str	r3, [sp, #20]
   14b6a:	465b      	mov	r3, fp
   14b6c:	9a01      	ldr	r2, [sp, #4]
   14b6e:	3b01      	subs	r3, #1
   14b70:	00d2      	lsls	r2, r2, #3
   14b72:	189b      	adds	r3, r3, r2
   14b74:	b2db      	uxtb	r3, r3
   14b76:	9303      	str	r3, [sp, #12]
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   14b78:	9706      	str	r7, [sp, #24]
			for ( j = 0; j < bytes_high; j++ ) {
   14b7a:	9b01      	ldr	r3, [sp, #4]
   14b7c:	2b00      	cmp	r3, #0
   14b7e:	d100      	bne.n	14b82 <glcd_draw_char_xy+0x136>
   14b80:	e201      	b.n	14f86 <glcd_draw_char_xy+0x53a>
				uint8_t dat = *( p + i*bytes_high + j );
   14b82:	9b02      	ldr	r3, [sp, #8]
   14b84:	785f      	ldrb	r7, [r3, #1]
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
   14b86:	4653      	mov	r3, sl
   14b88:	2b7f      	cmp	r3, #127	; 0x7f
   14b8a:	dcb7      	bgt.n	14afc <glcd_draw_char_xy+0xb0>
   14b8c:	465b      	mov	r3, fp
   14b8e:	2b3f      	cmp	r3, #63	; 0x3f
   14b90:	dcb4      	bgt.n	14afc <glcd_draw_char_xy+0xb0>
   14b92:	465b      	mov	r3, fp
   14b94:	1dde      	adds	r6, r3, #7
   14b96:	9b02      	ldr	r3, [sp, #8]
   14b98:	465c      	mov	r4, fp
   14b9a:	4698      	mov	r8, r3
   14b9c:	2500      	movs	r5, #0
   14b9e:	b2f6      	uxtb	r6, r6
					if ((j*8 + bit) >= font_current.height) {
   14ba0:	464b      	mov	r3, r9
   14ba2:	795b      	ldrb	r3, [r3, #5]
   14ba4:	42ab      	cmp	r3, r5
   14ba6:	dd0a      	ble.n	14bbe <glcd_draw_char_xy+0x172>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   14ba8:	466a      	mov	r2, sp
   14baa:	4653      	mov	r3, sl
   14bac:	7413      	strb	r3, [r2, #16]
   14bae:	b2e1      	uxtb	r1, r4
   14bb0:	7c10      	ldrb	r0, [r2, #16]
					if (dat & (1<<bit)) {
   14bb2:	07fb      	lsls	r3, r7, #31
   14bb4:	d500      	bpl.n	14bb8 <glcd_draw_char_xy+0x16c>
   14bb6:	e18c      	b.n	14ed2 <glcd_draw_char_xy+0x486>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   14bb8:	2200      	movs	r2, #0
   14bba:	4b5a      	ldr	r3, [pc, #360]	; (14d24 <glcd_draw_char_xy+0x2d8>)
   14bbc:	4798      	blx	r3
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
   14bbe:	2c3f      	cmp	r4, #63	; 0x3f
   14bc0:	d09c      	beq.n	14afc <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   14bc2:	464b      	mov	r3, r9
   14bc4:	795a      	ldrb	r2, [r3, #5]
   14bc6:	1c6b      	adds	r3, r5, #1
   14bc8:	429a      	cmp	r2, r3
   14bca:	dd0b      	ble.n	14be4 <glcd_draw_char_xy+0x198>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   14bcc:	466a      	mov	r2, sp
   14bce:	4653      	mov	r3, sl
   14bd0:	1fb1      	subs	r1, r6, #6
   14bd2:	7413      	strb	r3, [r2, #16]
   14bd4:	b2c9      	uxtb	r1, r1
   14bd6:	7c10      	ldrb	r0, [r2, #16]
					if (dat & (1<<bit)) {
   14bd8:	07bb      	lsls	r3, r7, #30
   14bda:	d500      	bpl.n	14bde <glcd_draw_char_xy+0x192>
   14bdc:	e182      	b.n	14ee4 <glcd_draw_char_xy+0x498>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   14bde:	2200      	movs	r2, #0
   14be0:	4b50      	ldr	r3, [pc, #320]	; (14d24 <glcd_draw_char_xy+0x2d8>)
   14be2:	4798      	blx	r3
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
   14be4:	2c3e      	cmp	r4, #62	; 0x3e
   14be6:	d100      	bne.n	14bea <glcd_draw_char_xy+0x19e>
   14be8:	e788      	b.n	14afc <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   14bea:	464b      	mov	r3, r9
   14bec:	795a      	ldrb	r2, [r3, #5]
   14bee:	1cab      	adds	r3, r5, #2
   14bf0:	429a      	cmp	r2, r3
   14bf2:	dd0b      	ble.n	14c0c <glcd_draw_char_xy+0x1c0>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   14bf4:	466a      	mov	r2, sp
   14bf6:	4653      	mov	r3, sl
   14bf8:	1f71      	subs	r1, r6, #5
   14bfa:	7413      	strb	r3, [r2, #16]
   14bfc:	b2c9      	uxtb	r1, r1
   14bfe:	7c10      	ldrb	r0, [r2, #16]
					if (dat & (1<<bit)) {
   14c00:	077b      	lsls	r3, r7, #29
   14c02:	d500      	bpl.n	14c06 <glcd_draw_char_xy+0x1ba>
   14c04:	e177      	b.n	14ef6 <glcd_draw_char_xy+0x4aa>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   14c06:	2200      	movs	r2, #0
   14c08:	4b46      	ldr	r3, [pc, #280]	; (14d24 <glcd_draw_char_xy+0x2d8>)
   14c0a:	4798      	blx	r3
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
   14c0c:	2c3d      	cmp	r4, #61	; 0x3d
   14c0e:	d100      	bne.n	14c12 <glcd_draw_char_xy+0x1c6>
   14c10:	e774      	b.n	14afc <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   14c12:	464b      	mov	r3, r9
   14c14:	795a      	ldrb	r2, [r3, #5]
   14c16:	1ceb      	adds	r3, r5, #3
   14c18:	429a      	cmp	r2, r3
   14c1a:	dd0b      	ble.n	14c34 <glcd_draw_char_xy+0x1e8>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   14c1c:	466a      	mov	r2, sp
   14c1e:	4653      	mov	r3, sl
   14c20:	1f31      	subs	r1, r6, #4
   14c22:	7413      	strb	r3, [r2, #16]
   14c24:	b2c9      	uxtb	r1, r1
   14c26:	7c10      	ldrb	r0, [r2, #16]
					if (dat & (1<<bit)) {
   14c28:	073b      	lsls	r3, r7, #28
   14c2a:	d500      	bpl.n	14c2e <glcd_draw_char_xy+0x1e2>
   14c2c:	e16c      	b.n	14f08 <glcd_draw_char_xy+0x4bc>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   14c2e:	2200      	movs	r2, #0
   14c30:	4b3c      	ldr	r3, [pc, #240]	; (14d24 <glcd_draw_char_xy+0x2d8>)
   14c32:	4798      	blx	r3
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
   14c34:	2c3c      	cmp	r4, #60	; 0x3c
   14c36:	d100      	bne.n	14c3a <glcd_draw_char_xy+0x1ee>
   14c38:	e760      	b.n	14afc <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   14c3a:	464b      	mov	r3, r9
   14c3c:	795a      	ldrb	r2, [r3, #5]
   14c3e:	1d2b      	adds	r3, r5, #4
   14c40:	429a      	cmp	r2, r3
   14c42:	dd0b      	ble.n	14c5c <glcd_draw_char_xy+0x210>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   14c44:	466a      	mov	r2, sp
   14c46:	4653      	mov	r3, sl
   14c48:	1ef1      	subs	r1, r6, #3
   14c4a:	7413      	strb	r3, [r2, #16]
   14c4c:	b2c9      	uxtb	r1, r1
   14c4e:	7c10      	ldrb	r0, [r2, #16]
					if (dat & (1<<bit)) {
   14c50:	06fb      	lsls	r3, r7, #27
   14c52:	d500      	bpl.n	14c56 <glcd_draw_char_xy+0x20a>
   14c54:	e161      	b.n	14f1a <glcd_draw_char_xy+0x4ce>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   14c56:	2200      	movs	r2, #0
   14c58:	4b32      	ldr	r3, [pc, #200]	; (14d24 <glcd_draw_char_xy+0x2d8>)
   14c5a:	4798      	blx	r3
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
   14c5c:	2c3b      	cmp	r4, #59	; 0x3b
   14c5e:	d100      	bne.n	14c62 <glcd_draw_char_xy+0x216>
   14c60:	e74c      	b.n	14afc <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   14c62:	464b      	mov	r3, r9
   14c64:	795a      	ldrb	r2, [r3, #5]
   14c66:	1d6b      	adds	r3, r5, #5
   14c68:	429a      	cmp	r2, r3
   14c6a:	dd0b      	ble.n	14c84 <glcd_draw_char_xy+0x238>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   14c6c:	466a      	mov	r2, sp
   14c6e:	4653      	mov	r3, sl
   14c70:	1eb1      	subs	r1, r6, #2
   14c72:	7413      	strb	r3, [r2, #16]
   14c74:	b2c9      	uxtb	r1, r1
   14c76:	7c10      	ldrb	r0, [r2, #16]
					if (dat & (1<<bit)) {
   14c78:	06bb      	lsls	r3, r7, #26
   14c7a:	d500      	bpl.n	14c7e <glcd_draw_char_xy+0x232>
   14c7c:	e156      	b.n	14f2c <glcd_draw_char_xy+0x4e0>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   14c7e:	2200      	movs	r2, #0
   14c80:	4b28      	ldr	r3, [pc, #160]	; (14d24 <glcd_draw_char_xy+0x2d8>)
   14c82:	4798      	blx	r3
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
   14c84:	2c3a      	cmp	r4, #58	; 0x3a
   14c86:	d100      	bne.n	14c8a <glcd_draw_char_xy+0x23e>
   14c88:	e738      	b.n	14afc <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   14c8a:	464b      	mov	r3, r9
   14c8c:	795a      	ldrb	r2, [r3, #5]
   14c8e:	1dab      	adds	r3, r5, #6
   14c90:	429a      	cmp	r2, r3
   14c92:	dd0b      	ble.n	14cac <glcd_draw_char_xy+0x260>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   14c94:	466a      	mov	r2, sp
   14c96:	4653      	mov	r3, sl
   14c98:	1e71      	subs	r1, r6, #1
   14c9a:	7413      	strb	r3, [r2, #16]
   14c9c:	b2c9      	uxtb	r1, r1
   14c9e:	7c10      	ldrb	r0, [r2, #16]
					if (dat & (1<<bit)) {
   14ca0:	067b      	lsls	r3, r7, #25
   14ca2:	d500      	bpl.n	14ca6 <glcd_draw_char_xy+0x25a>
   14ca4:	e14b      	b.n	14f3e <glcd_draw_char_xy+0x4f2>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   14ca6:	2200      	movs	r2, #0
   14ca8:	4b1e      	ldr	r3, [pc, #120]	; (14d24 <glcd_draw_char_xy+0x2d8>)
   14caa:	4798      	blx	r3
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
   14cac:	2c39      	cmp	r4, #57	; 0x39
   14cae:	d100      	bne.n	14cb2 <glcd_draw_char_xy+0x266>
   14cb0:	e724      	b.n	14afc <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   14cb2:	464b      	mov	r3, r9
   14cb4:	795a      	ldrb	r2, [r3, #5]
   14cb6:	1deb      	adds	r3, r5, #7
   14cb8:	429a      	cmp	r2, r3
   14cba:	dd0b      	ble.n	14cd4 <glcd_draw_char_xy+0x288>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   14cbc:	466a      	mov	r2, sp
   14cbe:	4653      	mov	r3, sl
   14cc0:	7413      	strb	r3, [r2, #16]
					if (dat & (1<<bit)) {
   14cc2:	09ff      	lsrs	r7, r7, #7
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   14cc4:	7c10      	ldrb	r0, [r2, #16]
					if (dat & (1<<bit)) {
   14cc6:	2f00      	cmp	r7, #0
   14cc8:	d000      	beq.n	14ccc <glcd_draw_char_xy+0x280>
   14cca:	e141      	b.n	14f50 <glcd_draw_char_xy+0x504>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   14ccc:	2200      	movs	r2, #0
   14cce:	0031      	movs	r1, r6
   14cd0:	4b14      	ldr	r3, [pc, #80]	; (14d24 <glcd_draw_char_xy+0x2d8>)
   14cd2:	4798      	blx	r3
			for ( j = 0; j < bytes_high; j++ ) {
   14cd4:	9b03      	ldr	r3, [sp, #12]
   14cd6:	42b3      	cmp	r3, r6
   14cd8:	d100      	bne.n	14cdc <glcd_draw_char_xy+0x290>
   14cda:	e154      	b.n	14f86 <glcd_draw_char_xy+0x53a>
				uint8_t dat = *( p + i*bytes_high + j );
   14cdc:	4643      	mov	r3, r8
   14cde:	789f      	ldrb	r7, [r3, #2]
   14ce0:	2301      	movs	r3, #1
   14ce2:	469c      	mov	ip, r3
   14ce4:	3608      	adds	r6, #8
   14ce6:	3408      	adds	r4, #8
   14ce8:	3508      	adds	r5, #8
   14cea:	44e0      	add	r8, ip
   14cec:	b2f6      	uxtb	r6, r6
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
   14cee:	2c40      	cmp	r4, #64	; 0x40
   14cf0:	d000      	beq.n	14cf4 <glcd_draw_char_xy+0x2a8>
   14cf2:	e755      	b.n	14ba0 <glcd_draw_char_xy+0x154>
   14cf4:	e702      	b.n	14afc <glcd_draw_char_xy+0xb0>
		bytes_high = font_current.height / 8 + 1;
   14cf6:	464a      	mov	r2, r9
		bytes_per_char = font_current.width * bytes_high;
   14cf8:	4649      	mov	r1, r9
		bytes_high = font_current.height / 8 + 1;
   14cfa:	7952      	ldrb	r2, [r2, #5]
		bytes_per_char = font_current.width * bytes_high;
   14cfc:	790f      	ldrb	r7, [r1, #4]
		bytes_high = font_current.height / 8 + 1;
   14cfe:	08d2      	lsrs	r2, r2, #3
   14d00:	1c51      	adds	r1, r2, #1
		bytes_per_char = font_current.width * bytes_high;
   14d02:	4379      	muls	r1, r7
		p = font_current.font_table + (c - font_current.start_char) * bytes_per_char;
   14d04:	9802      	ldr	r0, [sp, #8]
   14d06:	b2c9      	uxtb	r1, r1
   14d08:	1ac3      	subs	r3, r0, r3
   14d0a:	434b      	muls	r3, r1
   14d0c:	4649      	mov	r1, r9
   14d0e:	6809      	ldr	r1, [r1, #0]
   14d10:	1e78      	subs	r0, r7, #1
   14d12:	468c      	mov	ip, r1
   14d14:	4463      	add	r3, ip
   14d16:	9303      	str	r3, [sp, #12]
		n = 0; /* How many columns back from the end */
   14d18:	2100      	movs	r1, #0
   14d1a:	001c      	movs	r4, r3
   14d1c:	e00a      	b.n	14d34 <glcd_draw_char_xy+0x2e8>
   14d1e:	46c0      	nop			; (mov r8, r8)
   14d20:	20001c7c 	.word	0x20001c7c
   14d24:	00013869 	.word	0x00013869
				var_width--;
   14d28:	3f01      	subs	r7, #1
   14d2a:	b2ff      	uxtb	r7, r7
				if (var_width == 0) {
   14d2c:	2f00      	cmp	r7, #0
   14d2e:	d007      	beq.n	14d40 <glcd_draw_char_xy+0x2f4>
			n++;
   14d30:	3101      	adds	r1, #1
   14d32:	b2c9      	uxtb	r1, r1
				offset = (font_current.width - 1 - n) * row;
   14d34:	1a43      	subs	r3, r0, r1
   14d36:	4353      	muls	r3, r2
				max_byte = *(p + offset);
   14d38:	b2db      	uxtb	r3, r3
			if (max_byte == 0) {
   14d3a:	5ce3      	ldrb	r3, [r4, r3]
   14d3c:	2b00      	cmp	r3, #0
   14d3e:	d0f3      	beq.n	14d28 <glcd_draw_char_xy+0x2dc>
   14d40:	465b      	mov	r3, fp
   14d42:	3307      	adds	r3, #7
   14d44:	b2db      	uxtb	r3, r3
   14d46:	9305      	str	r3, [sp, #20]
   14d48:	00d2      	lsls	r2, r2, #3
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
   14d4a:	2300      	movs	r3, #0
   14d4c:	445a      	add	r2, fp
   14d4e:	465c      	mov	r4, fp
   14d50:	2606      	movs	r6, #6
   14d52:	46bb      	mov	fp, r7
   14d54:	3208      	adds	r2, #8
   14d56:	920d      	str	r2, [sp, #52]	; 0x34
   14d58:	9301      	str	r3, [sp, #4]
			for ( i = 0; i < var_width; i++ ) {
   14d5a:	465b      	mov	r3, fp
   14d5c:	2b00      	cmp	r3, #0
   14d5e:	d100      	bne.n	14d62 <glcd_draw_char_xy+0x316>
   14d60:	e102      	b.n	14f68 <glcd_draw_char_xy+0x51c>
				dat = *( p + j*font_current.width + i );
   14d62:	464b      	mov	r3, r9
   14d64:	9a01      	ldr	r2, [sp, #4]
   14d66:	791b      	ldrb	r3, [r3, #4]
   14d68:	9903      	ldr	r1, [sp, #12]
   14d6a:	4353      	muls	r3, r2
   14d6c:	5ccf      	ldrb	r7, [r1, r3]
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
   14d6e:	4653      	mov	r3, sl
   14d70:	2b7f      	cmp	r3, #127	; 0x7f
   14d72:	dd00      	ble.n	14d76 <glcd_draw_char_xy+0x32a>
   14d74:	e6c2      	b.n	14afc <glcd_draw_char_xy+0xb0>
   14d76:	00d3      	lsls	r3, r2, #3
   14d78:	9304      	str	r3, [sp, #16]
   14d7a:	2c3f      	cmp	r4, #63	; 0x3f
   14d7c:	dd00      	ble.n	14d80 <glcd_draw_char_xy+0x334>
   14d7e:	e6bd      	b.n	14afc <glcd_draw_char_xy+0xb0>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   14d80:	9a05      	ldr	r2, [sp, #20]
   14d82:	b2e3      	uxtb	r3, r4
   14d84:	9306      	str	r3, [sp, #24]
   14d86:	0013      	movs	r3, r2
   14d88:	3b06      	subs	r3, #6
   14d8a:	b2db      	uxtb	r3, r3
   14d8c:	9307      	str	r3, [sp, #28]
   14d8e:	0013      	movs	r3, r2
   14d90:	3b05      	subs	r3, #5
   14d92:	b2db      	uxtb	r3, r3
   14d94:	9308      	str	r3, [sp, #32]
   14d96:	0013      	movs	r3, r2
   14d98:	3b04      	subs	r3, #4
   14d9a:	b2db      	uxtb	r3, r3
   14d9c:	9309      	str	r3, [sp, #36]	; 0x24
   14d9e:	0013      	movs	r3, r2
   14da0:	3b03      	subs	r3, #3
   14da2:	b2db      	uxtb	r3, r3
   14da4:	930a      	str	r3, [sp, #40]	; 0x28
   14da6:	0013      	movs	r3, r2
   14da8:	3b02      	subs	r3, #2
   14daa:	b2db      	uxtb	r3, r3
   14dac:	930b      	str	r3, [sp, #44]	; 0x2c
   14dae:	0013      	movs	r3, r2
   14db0:	3b01      	subs	r3, #1
   14db2:	b2db      	uxtb	r3, r3
   14db4:	930c      	str	r3, [sp, #48]	; 0x30
   14db6:	2301      	movs	r3, #1
   14db8:	4655      	mov	r5, sl
   14dba:	4698      	mov	r8, r3
					if ((j*8 + bit) >= font_current.height) {
   14dbc:	464b      	mov	r3, r9
   14dbe:	9a04      	ldr	r2, [sp, #16]
   14dc0:	795b      	ldrb	r3, [r3, #5]
   14dc2:	4293      	cmp	r3, r2
   14dc4:	dd07      	ble.n	14dd6 <glcd_draw_char_xy+0x38a>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   14dc6:	b2e8      	uxtb	r0, r5
					if (dat & (1<<bit)) {
   14dc8:	07fb      	lsls	r3, r7, #31
   14dca:	d500      	bpl.n	14dce <glcd_draw_char_xy+0x382>
   14dcc:	e085      	b.n	14eda <glcd_draw_char_xy+0x48e>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   14dce:	2200      	movs	r2, #0
   14dd0:	9906      	ldr	r1, [sp, #24]
   14dd2:	4b74      	ldr	r3, [pc, #464]	; (14fa4 <glcd_draw_char_xy+0x558>)
   14dd4:	4798      	blx	r3
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
   14dd6:	2c3f      	cmp	r4, #63	; 0x3f
   14dd8:	d100      	bne.n	14ddc <glcd_draw_char_xy+0x390>
   14dda:	e68f      	b.n	14afc <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   14ddc:	464b      	mov	r3, r9
   14dde:	795a      	ldrb	r2, [r3, #5]
   14de0:	1f73      	subs	r3, r6, #5
   14de2:	429a      	cmp	r2, r3
   14de4:	dd06      	ble.n	14df4 <glcd_draw_char_xy+0x3a8>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   14de6:	b2e8      	uxtb	r0, r5
					if (dat & (1<<bit)) {
   14de8:	07bb      	lsls	r3, r7, #30
   14dea:	d47f      	bmi.n	14eec <glcd_draw_char_xy+0x4a0>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   14dec:	2200      	movs	r2, #0
   14dee:	9907      	ldr	r1, [sp, #28]
   14df0:	4b6c      	ldr	r3, [pc, #432]	; (14fa4 <glcd_draw_char_xy+0x558>)
   14df2:	4798      	blx	r3
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
   14df4:	2c3e      	cmp	r4, #62	; 0x3e
   14df6:	d100      	bne.n	14dfa <glcd_draw_char_xy+0x3ae>
   14df8:	e680      	b.n	14afc <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   14dfa:	464a      	mov	r2, r9
   14dfc:	7952      	ldrb	r2, [r2, #5]
   14dfe:	1f33      	subs	r3, r6, #4
   14e00:	4293      	cmp	r3, r2
   14e02:	da06      	bge.n	14e12 <glcd_draw_char_xy+0x3c6>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   14e04:	b2e8      	uxtb	r0, r5
					if (dat & (1<<bit)) {
   14e06:	077b      	lsls	r3, r7, #29
   14e08:	d479      	bmi.n	14efe <glcd_draw_char_xy+0x4b2>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   14e0a:	2200      	movs	r2, #0
   14e0c:	9908      	ldr	r1, [sp, #32]
   14e0e:	4b65      	ldr	r3, [pc, #404]	; (14fa4 <glcd_draw_char_xy+0x558>)
   14e10:	4798      	blx	r3
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
   14e12:	2c3d      	cmp	r4, #61	; 0x3d
   14e14:	d100      	bne.n	14e18 <glcd_draw_char_xy+0x3cc>
   14e16:	e671      	b.n	14afc <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   14e18:	464a      	mov	r2, r9
   14e1a:	7952      	ldrb	r2, [r2, #5]
   14e1c:	1ef3      	subs	r3, r6, #3
   14e1e:	4293      	cmp	r3, r2
   14e20:	da06      	bge.n	14e30 <glcd_draw_char_xy+0x3e4>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   14e22:	b2e8      	uxtb	r0, r5
					if (dat & (1<<bit)) {
   14e24:	073b      	lsls	r3, r7, #28
   14e26:	d473      	bmi.n	14f10 <glcd_draw_char_xy+0x4c4>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   14e28:	2200      	movs	r2, #0
   14e2a:	9909      	ldr	r1, [sp, #36]	; 0x24
   14e2c:	4b5d      	ldr	r3, [pc, #372]	; (14fa4 <glcd_draw_char_xy+0x558>)
   14e2e:	4798      	blx	r3
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
   14e30:	2c3c      	cmp	r4, #60	; 0x3c
   14e32:	d100      	bne.n	14e36 <glcd_draw_char_xy+0x3ea>
   14e34:	e662      	b.n	14afc <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   14e36:	464a      	mov	r2, r9
   14e38:	7952      	ldrb	r2, [r2, #5]
   14e3a:	1eb3      	subs	r3, r6, #2
   14e3c:	4293      	cmp	r3, r2
   14e3e:	da06      	bge.n	14e4e <glcd_draw_char_xy+0x402>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   14e40:	b2e8      	uxtb	r0, r5
					if (dat & (1<<bit)) {
   14e42:	06fb      	lsls	r3, r7, #27
   14e44:	d46d      	bmi.n	14f22 <glcd_draw_char_xy+0x4d6>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   14e46:	2200      	movs	r2, #0
   14e48:	990a      	ldr	r1, [sp, #40]	; 0x28
   14e4a:	4b56      	ldr	r3, [pc, #344]	; (14fa4 <glcd_draw_char_xy+0x558>)
   14e4c:	4798      	blx	r3
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
   14e4e:	2c3b      	cmp	r4, #59	; 0x3b
   14e50:	d100      	bne.n	14e54 <glcd_draw_char_xy+0x408>
   14e52:	e653      	b.n	14afc <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   14e54:	464a      	mov	r2, r9
   14e56:	7952      	ldrb	r2, [r2, #5]
   14e58:	1e73      	subs	r3, r6, #1
   14e5a:	4293      	cmp	r3, r2
   14e5c:	da06      	bge.n	14e6c <glcd_draw_char_xy+0x420>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   14e5e:	b2e8      	uxtb	r0, r5
					if (dat & (1<<bit)) {
   14e60:	06bb      	lsls	r3, r7, #26
   14e62:	d467      	bmi.n	14f34 <glcd_draw_char_xy+0x4e8>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   14e64:	2200      	movs	r2, #0
   14e66:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14e68:	4b4e      	ldr	r3, [pc, #312]	; (14fa4 <glcd_draw_char_xy+0x558>)
   14e6a:	4798      	blx	r3
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
   14e6c:	2c3a      	cmp	r4, #58	; 0x3a
   14e6e:	d100      	bne.n	14e72 <glcd_draw_char_xy+0x426>
   14e70:	e644      	b.n	14afc <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   14e72:	464b      	mov	r3, r9
   14e74:	795b      	ldrb	r3, [r3, #5]
   14e76:	429e      	cmp	r6, r3
   14e78:	da06      	bge.n	14e88 <glcd_draw_char_xy+0x43c>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   14e7a:	b2e8      	uxtb	r0, r5
					if (dat & (1<<bit)) {
   14e7c:	067b      	lsls	r3, r7, #25
   14e7e:	d462      	bmi.n	14f46 <glcd_draw_char_xy+0x4fa>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   14e80:	2200      	movs	r2, #0
   14e82:	990c      	ldr	r1, [sp, #48]	; 0x30
   14e84:	4b47      	ldr	r3, [pc, #284]	; (14fa4 <glcd_draw_char_xy+0x558>)
   14e86:	4798      	blx	r3
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
   14e88:	2c39      	cmp	r4, #57	; 0x39
   14e8a:	d100      	bne.n	14e8e <glcd_draw_char_xy+0x442>
   14e8c:	e636      	b.n	14afc <glcd_draw_char_xy+0xb0>
					if ((j*8 + bit) >= font_current.height) {
   14e8e:	464a      	mov	r2, r9
   14e90:	7952      	ldrb	r2, [r2, #5]
   14e92:	1c73      	adds	r3, r6, #1
   14e94:	4293      	cmp	r3, r2
   14e96:	da07      	bge.n	14ea8 <glcd_draw_char_xy+0x45c>
					if (dat & (1<<bit)) {
   14e98:	09ff      	lsrs	r7, r7, #7
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   14e9a:	b2e8      	uxtb	r0, r5
					if (dat & (1<<bit)) {
   14e9c:	2f00      	cmp	r7, #0
   14e9e:	d15c      	bne.n	14f5a <glcd_draw_char_xy+0x50e>
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
   14ea0:	2200      	movs	r2, #0
   14ea2:	9905      	ldr	r1, [sp, #20]
   14ea4:	4b3f      	ldr	r3, [pc, #252]	; (14fa4 <glcd_draw_char_xy+0x558>)
   14ea6:	4798      	blx	r3
			for ( i = 0; i < var_width; i++ ) {
   14ea8:	4643      	mov	r3, r8
   14eaa:	466a      	mov	r2, sp
   14eac:	7213      	strb	r3, [r2, #8]
   14eae:	7a13      	ldrb	r3, [r2, #8]
   14eb0:	459b      	cmp	fp, r3
   14eb2:	d959      	bls.n	14f68 <glcd_draw_char_xy+0x51c>
				dat = *( p + j*font_current.width + i );
   14eb4:	464b      	mov	r3, r9
   14eb6:	9a01      	ldr	r2, [sp, #4]
   14eb8:	791b      	ldrb	r3, [r3, #4]
   14eba:	3501      	adds	r5, #1
   14ebc:	4353      	muls	r3, r2
   14ebe:	9a03      	ldr	r2, [sp, #12]
   14ec0:	4442      	add	r2, r8
   14ec2:	5cd7      	ldrb	r7, [r2, r3]
   14ec4:	2301      	movs	r3, #1
   14ec6:	469c      	mov	ip, r3
   14ec8:	44e0      	add	r8, ip
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
   14eca:	2d80      	cmp	r5, #128	; 0x80
   14ecc:	d000      	beq.n	14ed0 <glcd_draw_char_xy+0x484>
   14ece:	e775      	b.n	14dbc <glcd_draw_char_xy+0x370>
   14ed0:	e614      	b.n	14afc <glcd_draw_char_xy+0xb0>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   14ed2:	2201      	movs	r2, #1
   14ed4:	4b33      	ldr	r3, [pc, #204]	; (14fa4 <glcd_draw_char_xy+0x558>)
   14ed6:	4798      	blx	r3
   14ed8:	e671      	b.n	14bbe <glcd_draw_char_xy+0x172>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   14eda:	2201      	movs	r2, #1
   14edc:	9906      	ldr	r1, [sp, #24]
   14ede:	4b31      	ldr	r3, [pc, #196]	; (14fa4 <glcd_draw_char_xy+0x558>)
   14ee0:	4798      	blx	r3
   14ee2:	e778      	b.n	14dd6 <glcd_draw_char_xy+0x38a>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   14ee4:	2201      	movs	r2, #1
   14ee6:	4b2f      	ldr	r3, [pc, #188]	; (14fa4 <glcd_draw_char_xy+0x558>)
   14ee8:	4798      	blx	r3
   14eea:	e67b      	b.n	14be4 <glcd_draw_char_xy+0x198>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   14eec:	2201      	movs	r2, #1
   14eee:	9907      	ldr	r1, [sp, #28]
   14ef0:	4b2c      	ldr	r3, [pc, #176]	; (14fa4 <glcd_draw_char_xy+0x558>)
   14ef2:	4798      	blx	r3
   14ef4:	e77e      	b.n	14df4 <glcd_draw_char_xy+0x3a8>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   14ef6:	2201      	movs	r2, #1
   14ef8:	4b2a      	ldr	r3, [pc, #168]	; (14fa4 <glcd_draw_char_xy+0x558>)
   14efa:	4798      	blx	r3
   14efc:	e686      	b.n	14c0c <glcd_draw_char_xy+0x1c0>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   14efe:	2201      	movs	r2, #1
   14f00:	9908      	ldr	r1, [sp, #32]
   14f02:	4b28      	ldr	r3, [pc, #160]	; (14fa4 <glcd_draw_char_xy+0x558>)
   14f04:	4798      	blx	r3
   14f06:	e784      	b.n	14e12 <glcd_draw_char_xy+0x3c6>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   14f08:	2201      	movs	r2, #1
   14f0a:	4b26      	ldr	r3, [pc, #152]	; (14fa4 <glcd_draw_char_xy+0x558>)
   14f0c:	4798      	blx	r3
   14f0e:	e691      	b.n	14c34 <glcd_draw_char_xy+0x1e8>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   14f10:	2201      	movs	r2, #1
   14f12:	9909      	ldr	r1, [sp, #36]	; 0x24
   14f14:	4b23      	ldr	r3, [pc, #140]	; (14fa4 <glcd_draw_char_xy+0x558>)
   14f16:	4798      	blx	r3
   14f18:	e78a      	b.n	14e30 <glcd_draw_char_xy+0x3e4>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   14f1a:	2201      	movs	r2, #1
   14f1c:	4b21      	ldr	r3, [pc, #132]	; (14fa4 <glcd_draw_char_xy+0x558>)
   14f1e:	4798      	blx	r3
   14f20:	e69c      	b.n	14c5c <glcd_draw_char_xy+0x210>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   14f22:	2201      	movs	r2, #1
   14f24:	990a      	ldr	r1, [sp, #40]	; 0x28
   14f26:	4b1f      	ldr	r3, [pc, #124]	; (14fa4 <glcd_draw_char_xy+0x558>)
   14f28:	4798      	blx	r3
   14f2a:	e790      	b.n	14e4e <glcd_draw_char_xy+0x402>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   14f2c:	2201      	movs	r2, #1
   14f2e:	4b1d      	ldr	r3, [pc, #116]	; (14fa4 <glcd_draw_char_xy+0x558>)
   14f30:	4798      	blx	r3
   14f32:	e6a7      	b.n	14c84 <glcd_draw_char_xy+0x238>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   14f34:	2201      	movs	r2, #1
   14f36:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14f38:	4b1a      	ldr	r3, [pc, #104]	; (14fa4 <glcd_draw_char_xy+0x558>)
   14f3a:	4798      	blx	r3
   14f3c:	e796      	b.n	14e6c <glcd_draw_char_xy+0x420>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   14f3e:	2201      	movs	r2, #1
   14f40:	4b18      	ldr	r3, [pc, #96]	; (14fa4 <glcd_draw_char_xy+0x558>)
   14f42:	4798      	blx	r3
   14f44:	e6b2      	b.n	14cac <glcd_draw_char_xy+0x260>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   14f46:	2201      	movs	r2, #1
   14f48:	990c      	ldr	r1, [sp, #48]	; 0x30
   14f4a:	4b16      	ldr	r3, [pc, #88]	; (14fa4 <glcd_draw_char_xy+0x558>)
   14f4c:	4798      	blx	r3
   14f4e:	e79b      	b.n	14e88 <glcd_draw_char_xy+0x43c>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   14f50:	2201      	movs	r2, #1
   14f52:	0031      	movs	r1, r6
   14f54:	4b13      	ldr	r3, [pc, #76]	; (14fa4 <glcd_draw_char_xy+0x558>)
   14f56:	4798      	blx	r3
   14f58:	e6bc      	b.n	14cd4 <glcd_draw_char_xy+0x288>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
   14f5a:	2201      	movs	r2, #1
   14f5c:	9905      	ldr	r1, [sp, #20]
   14f5e:	4b11      	ldr	r3, [pc, #68]	; (14fa4 <glcd_draw_char_xy+0x558>)
   14f60:	4798      	blx	r3
   14f62:	e7a1      	b.n	14ea8 <glcd_draw_char_xy+0x45c>
   14f64:	0017      	movs	r7, r2
   14f66:	e5ca      	b.n	14afe <glcd_draw_char_xy+0xb2>
   14f68:	9b01      	ldr	r3, [sp, #4]
   14f6a:	3408      	adds	r4, #8
   14f6c:	3301      	adds	r3, #1
   14f6e:	9301      	str	r3, [sp, #4]
   14f70:	9b05      	ldr	r3, [sp, #20]
   14f72:	3608      	adds	r6, #8
   14f74:	3308      	adds	r3, #8
   14f76:	b2db      	uxtb	r3, r3
   14f78:	9305      	str	r3, [sp, #20]
		for ( j = 0; j < bytes_high; j++ ) {
   14f7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14f7c:	42a3      	cmp	r3, r4
   14f7e:	d000      	beq.n	14f82 <glcd_draw_char_xy+0x536>
   14f80:	e6eb      	b.n	14d5a <glcd_draw_char_xy+0x30e>
   14f82:	465f      	mov	r7, fp
   14f84:	e5bb      	b.n	14afe <glcd_draw_char_xy+0xb2>
   14f86:	9a01      	ldr	r2, [sp, #4]
   14f88:	9b02      	ldr	r3, [sp, #8]
   14f8a:	4694      	mov	ip, r2
   14f8c:	4463      	add	r3, ip
   14f8e:	9302      	str	r3, [sp, #8]
   14f90:	2301      	movs	r3, #1
   14f92:	469c      	mov	ip, r3
		for ( i = 0; i < var_width; i++ ) {
   14f94:	9b05      	ldr	r3, [sp, #20]
   14f96:	44e2      	add	sl, ip
   14f98:	4553      	cmp	r3, sl
   14f9a:	d000      	beq.n	14f9e <glcd_draw_char_xy+0x552>
   14f9c:	e5ed      	b.n	14b7a <glcd_draw_char_xy+0x12e>
   14f9e:	9f06      	ldr	r7, [sp, #24]
   14fa0:	e5ad      	b.n	14afe <glcd_draw_char_xy+0xb2>
   14fa2:	46c0      	nop			; (mov r8, r8)
   14fa4:	00013869 	.word	0x00013869

00014fa8 <glcd_draw_string_xy>:

void glcd_draw_string_xy(uint8_t x, uint8_t y, char *c)
{
   14fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t width;

	if (y > (GLCD_LCD_HEIGHT - font_current.height - 1)) {
   14faa:	4b0c      	ldr	r3, [pc, #48]	; (14fdc <glcd_draw_string_xy+0x34>)
{
   14fac:	0014      	movs	r4, r2
	if (y > (GLCD_LCD_HEIGHT - font_current.height - 1)) {
   14fae:	795a      	ldrb	r2, [r3, #5]
   14fb0:	233f      	movs	r3, #63	; 0x3f
{
   14fb2:	0005      	movs	r5, r0
   14fb4:	000e      	movs	r6, r1
	if (y > (GLCD_LCD_HEIGHT - font_current.height - 1)) {
   14fb6:	1a9b      	subs	r3, r3, r2
   14fb8:	4299      	cmp	r1, r3
   14fba:	dc0d      	bgt.n	14fd8 <glcd_draw_string_xy+0x30>
		/* Character won't fit */
		return;
	}

	while (*c) {
   14fbc:	7822      	ldrb	r2, [r4, #0]
   14fbe:	2a00      	cmp	r2, #0
   14fc0:	d00a      	beq.n	14fd8 <glcd_draw_string_xy+0x30>
   14fc2:	4f07      	ldr	r7, [pc, #28]	; (14fe0 <glcd_draw_string_xy+0x38>)
		width = glcd_draw_char_xy(x,y,*c);
   14fc4:	0028      	movs	r0, r5
   14fc6:	0031      	movs	r1, r6
   14fc8:	47b8      	blx	r7
		x += (width + 1);
		c++;
   14fca:	3401      	adds	r4, #1
		x += (width + 1);
   14fcc:	1940      	adds	r0, r0, r5
	while (*c) {
   14fce:	7822      	ldrb	r2, [r4, #0]
		x += (width + 1);
   14fd0:	3001      	adds	r0, #1
   14fd2:	b2c5      	uxtb	r5, r0
	while (*c) {
   14fd4:	2a00      	cmp	r2, #0
   14fd6:	d1f5      	bne.n	14fc4 <glcd_draw_string_xy+0x1c>
	}		
}
   14fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14fda:	46c0      	nop			; (mov r8, r8)
   14fdc:	20001c7c 	.word	0x20001c7c
   14fe0:	00014a4d 	.word	0x00014a4d

00014fe4 <glcd_tiny_set_font>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_tiny_set_font(PGM_P font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#else
void glcd_tiny_set_font(const char * font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#endif
{
   14fe4:	b530      	push	{r4, r5, lr}
   14fe6:	ac03      	add	r4, sp, #12
   14fe8:	7825      	ldrb	r5, [r4, #0]
	font_current.font_table = font_table;
   14fea:	4c04      	ldr	r4, [pc, #16]	; (14ffc <glcd_tiny_set_font+0x18>)
	font_current.width = width;
	font_current.height = height;
	font_current.start_char = start_char;
   14fec:	71a3      	strb	r3, [r4, #6]
	font_current.end_char = end_char;
	font_current.table_type = STANG;
   14fee:	2300      	movs	r3, #0
	font_current.end_char = end_char;
   14ff0:	71e5      	strb	r5, [r4, #7]
	font_current.font_table = font_table;
   14ff2:	6020      	str	r0, [r4, #0]
	font_current.width = width;
   14ff4:	7121      	strb	r1, [r4, #4]
	font_current.height = height;
   14ff6:	7162      	strb	r2, [r4, #5]
	font_current.table_type = STANG;
   14ff8:	7223      	strb	r3, [r4, #8]
}
   14ffa:	bd30      	pop	{r4, r5, pc}
   14ffc:	20001c7c 	.word	0x20001c7c

00015000 <glcd_tiny_draw_char>:

void glcd_tiny_draw_char(uint8_t x, uint8_t line, char c)
{
   15000:	b5f0      	push	{r4, r5, r6, r7, lr}
   15002:	46c6      	mov	lr, r8
   15004:	b500      	push	{lr}
	uint8_t i;
	
	/* Only works for fonts < 8 bits in height */
	if (font_current.height >= 8) {
   15006:	4c22      	ldr	r4, [pc, #136]	; (15090 <glcd_tiny_draw_char+0x90>)
{
   15008:	0006      	movs	r6, r0
	if (font_current.height >= 8) {
   1500a:	7967      	ldrb	r7, [r4, #5]
{
   1500c:	4688      	mov	r8, r1
   1500e:	0015      	movs	r5, r2
	if (font_current.height >= 8) {
   15010:	2f07      	cmp	r7, #7
   15012:	d80e      	bhi.n	15032 <glcd_tiny_draw_char+0x32>
		return;
	}
	if (c < font_current.start_char || c > font_current.end_char) {
   15014:	79a3      	ldrb	r3, [r4, #6]
   15016:	4293      	cmp	r3, r2
   15018:	d90e      	bls.n	15038 <glcd_tiny_draw_char+0x38>
		c = '.';
   1501a:	252e      	movs	r5, #46	; 0x2e
	}
	if ( line >= GLCD_LCD_HEIGHT / (font_current.height + 1) ) {
   1501c:	3701      	adds	r7, #1
   1501e:	0039      	movs	r1, r7
   15020:	2040      	movs	r0, #64	; 0x40
   15022:	4b1c      	ldr	r3, [pc, #112]	; (15094 <glcd_tiny_draw_char+0x94>)
   15024:	4798      	blx	r3
   15026:	4580      	cmp	r8, r0
   15028:	da03      	bge.n	15032 <glcd_tiny_draw_char+0x32>
		return;
	}		
	if ( (x+font_current.width) >= GLCD_LCD_WIDTH ) {
   1502a:	7922      	ldrb	r2, [r4, #4]
   1502c:	18b2      	adds	r2, r6, r2
   1502e:	2a7f      	cmp	r2, #127	; 0x7f
   15030:	dd06      	ble.n	15040 <glcd_tiny_draw_char+0x40>
#else
		glcd_buffer_selected[x + (line * GLCD_LCD_WIDTH)] = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
		x++;
	}
}
   15032:	bc04      	pop	{r2}
   15034:	4690      	mov	r8, r2
   15036:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (c < font_current.start_char || c > font_current.end_char) {
   15038:	79e3      	ldrb	r3, [r4, #7]
   1503a:	4293      	cmp	r3, r2
   1503c:	d2ee      	bcs.n	1501c <glcd_tiny_draw_char+0x1c>
   1503e:	e7ec      	b.n	1501a <glcd_tiny_draw_char+0x1a>
	glcd_update_bbox(x, line*(font_current.height + 1), x+font_current.width, line*(font_current.height + 1) + (font_current.height + 1));
   15040:	4643      	mov	r3, r8
   15042:	4640      	mov	r0, r8
   15044:	b2f9      	uxtb	r1, r7
   15046:	3301      	adds	r3, #1
   15048:	434b      	muls	r3, r1
   1504a:	4341      	muls	r1, r0
   1504c:	b2d2      	uxtb	r2, r2
   1504e:	b2db      	uxtb	r3, r3
   15050:	b2c9      	uxtb	r1, r1
   15052:	0030      	movs	r0, r6
   15054:	4f10      	ldr	r7, [pc, #64]	; (15098 <glcd_tiny_draw_char+0x98>)
   15056:	47b8      	blx	r7
	for ( i = 0; i < font_current.width; i++ ) {
   15058:	7922      	ldrb	r2, [r4, #4]
   1505a:	2a00      	cmp	r2, #0
   1505c:	d0e9      	beq.n	15032 <glcd_tiny_draw_char+0x32>
   1505e:	4643      	mov	r3, r8
   15060:	480e      	ldr	r0, [pc, #56]	; (1509c <glcd_tiny_draw_char+0x9c>)
   15062:	01d9      	lsls	r1, r3, #7
   15064:	4680      	mov	r8, r0
   15066:	2300      	movs	r3, #0
		glcd_buffer_selected[x + (line * GLCD_LCD_WIDTH)] = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
   15068:	79a0      	ldrb	r0, [r4, #6]
   1506a:	1a28      	subs	r0, r5, r0
   1506c:	4342      	muls	r2, r0
   1506e:	6820      	ldr	r0, [r4, #0]
   15070:	18c0      	adds	r0, r0, r3
   15072:	5c82      	ldrb	r2, [r0, r2]
   15074:	4640      	mov	r0, r8
   15076:	4694      	mov	ip, r2
   15078:	4667      	mov	r7, ip
   1507a:	6800      	ldr	r0, [r0, #0]
   1507c:	18f2      	adds	r2, r6, r3
   1507e:	b2d2      	uxtb	r2, r2
   15080:	1840      	adds	r0, r0, r1
   15082:	5487      	strb	r7, [r0, r2]
	for ( i = 0; i < font_current.width; i++ ) {
   15084:	3301      	adds	r3, #1
   15086:	7922      	ldrb	r2, [r4, #4]
   15088:	b2db      	uxtb	r3, r3
   1508a:	429a      	cmp	r2, r3
   1508c:	d8ec      	bhi.n	15068 <glcd_tiny_draw_char+0x68>
   1508e:	e7d0      	b.n	15032 <glcd_tiny_draw_char+0x32>
   15090:	20001c7c 	.word	0x20001c7c
   15094:	0001ce31 	.word	0x0001ce31
   15098:	00013785 	.word	0x00013785
   1509c:	20001c74 	.word	0x20001c74

000150a0 <glcd_tiny_draw_string>:

void glcd_tiny_draw_string(uint8_t x, uint8_t line, char *str)
{
   150a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   150a2:	464e      	mov	r6, r9
   150a4:	4645      	mov	r5, r8
   150a6:	4657      	mov	r7, sl
   150a8:	46de      	mov	lr, fp
   150aa:	b5e0      	push	{r5, r6, r7, lr}
	if (font_current.height >= 8) {
   150ac:	4e40      	ldr	r6, [pc, #256]	; (151b0 <glcd_tiny_draw_string+0x110>)
{
   150ae:	0005      	movs	r5, r0
	if (font_current.height >= 8) {
   150b0:	7973      	ldrb	r3, [r6, #5]
{
   150b2:	4688      	mov	r8, r1
   150b4:	4691      	mov	r9, r2
	if (font_current.height >= 8) {
   150b6:	469a      	mov	sl, r3
   150b8:	2b07      	cmp	r3, #7
   150ba:	d82a      	bhi.n	15112 <glcd_tiny_draw_string+0x72>
   150bc:	4b3d      	ldr	r3, [pc, #244]	; (151b4 <glcd_tiny_draw_string+0x114>)
   150be:	469b      	mov	fp, r3
		return;
	}
	while (*str) {
   150c0:	464b      	mov	r3, r9
   150c2:	781f      	ldrb	r7, [r3, #0]
   150c4:	2f00      	cmp	r7, #0
   150c6:	d024      	beq.n	15112 <glcd_tiny_draw_string+0x72>
		glcd_tiny_draw_char(x, line, *str++);
   150c8:	2301      	movs	r3, #1
   150ca:	469c      	mov	ip, r3
	if (font_current.height >= 8) {
   150cc:	4653      	mov	r3, sl
		glcd_tiny_draw_char(x, line, *str++);
   150ce:	44e1      	add	r9, ip
	if (font_current.height >= 8) {
   150d0:	2b07      	cmp	r3, #7
   150d2:	d826      	bhi.n	15122 <glcd_tiny_draw_string+0x82>
	if (c < font_current.start_char || c > font_current.end_char) {
   150d4:	79b3      	ldrb	r3, [r6, #6]
   150d6:	42bb      	cmp	r3, r7
   150d8:	d821      	bhi.n	1511e <glcd_tiny_draw_string+0x7e>
   150da:	79f3      	ldrb	r3, [r6, #7]
   150dc:	42bb      	cmp	r3, r7
   150de:	d31e      	bcc.n	1511e <glcd_tiny_draw_string+0x7e>
	if ( line >= GLCD_LCD_HEIGHT / (font_current.height + 1) ) {
   150e0:	4653      	mov	r3, sl
   150e2:	1c5c      	adds	r4, r3, #1
   150e4:	0021      	movs	r1, r4
   150e6:	4b34      	ldr	r3, [pc, #208]	; (151b8 <glcd_tiny_draw_string+0x118>)
   150e8:	2040      	movs	r0, #64	; 0x40
   150ea:	4798      	blx	r3
   150ec:	7933      	ldrb	r3, [r6, #4]
   150ee:	4580      	cmp	r8, r0
   150f0:	da24      	bge.n	1513c <glcd_tiny_draw_string+0x9c>
	if ( (x+font_current.width) >= GLCD_LCD_WIDTH ) {
   150f2:	18ea      	adds	r2, r5, r3
   150f4:	2a7f      	cmp	r2, #127	; 0x7f
   150f6:	dd28      	ble.n	1514a <glcd_tiny_draw_string+0xaa>
   150f8:	3501      	adds	r5, #1
		x += (font_current.width + 1);
   150fa:	18ed      	adds	r5, r5, r3
   150fc:	b2ed      	uxtb	r5, r5
		if ((x + font_current.width + 1) > GLCD_LCD_WIDTH) {
   150fe:	18eb      	adds	r3, r5, r3
   15100:	2b7f      	cmp	r3, #127	; 0x7f
   15102:	dddd      	ble.n	150c0 <glcd_tiny_draw_string+0x20>
			x = 0; /* Ran out of this line */
			line++;
   15104:	4643      	mov	r3, r8
   15106:	3301      	adds	r3, #1
   15108:	b2db      	uxtb	r3, r3
   1510a:	4698      	mov	r8, r3
			x = 0; /* Ran out of this line */
   1510c:	2500      	movs	r5, #0
		}
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
   1510e:	4580      	cmp	r8, r0
   15110:	dbd6      	blt.n	150c0 <glcd_tiny_draw_string+0x20>
			return; /* Ran out of space :( */
	}
}
   15112:	bc3c      	pop	{r2, r3, r4, r5}
   15114:	4690      	mov	r8, r2
   15116:	4699      	mov	r9, r3
   15118:	46a2      	mov	sl, r4
   1511a:	46ab      	mov	fp, r5
   1511c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		c = '.';
   1511e:	272e      	movs	r7, #46	; 0x2e
   15120:	e7de      	b.n	150e0 <glcd_tiny_draw_string+0x40>
   15122:	7934      	ldrb	r4, [r6, #4]
   15124:	1c59      	adds	r1, r3, #1
   15126:	2040      	movs	r0, #64	; 0x40
   15128:	4b23      	ldr	r3, [pc, #140]	; (151b8 <glcd_tiny_draw_string+0x118>)
   1512a:	0027      	movs	r7, r4
   1512c:	4798      	blx	r3
   1512e:	3501      	adds	r5, #1
		x += (font_current.width + 1);
   15130:	192d      	adds	r5, r5, r4
   15132:	b2ed      	uxtb	r5, r5
		if ((x + font_current.width + 1) > GLCD_LCD_WIDTH) {
   15134:	19ef      	adds	r7, r5, r7
   15136:	2f7f      	cmp	r7, #127	; 0x7f
   15138:	dce4      	bgt.n	15104 <glcd_tiny_draw_string+0x64>
   1513a:	e7e8      	b.n	1510e <glcd_tiny_draw_string+0x6e>
   1513c:	3501      	adds	r5, #1
		x += (font_current.width + 1);
   1513e:	18ed      	adds	r5, r5, r3
		if ((x + font_current.width + 1) > GLCD_LCD_WIDTH) {
   15140:	b2ed      	uxtb	r5, r5
   15142:	18ed      	adds	r5, r5, r3
   15144:	2d7f      	cmp	r5, #127	; 0x7f
   15146:	dcdd      	bgt.n	15104 <glcd_tiny_draw_string+0x64>
   15148:	e7e3      	b.n	15112 <glcd_tiny_draw_string+0x72>
	glcd_update_bbox(x, line*(font_current.height + 1), x+font_current.width, line*(font_current.height + 1) + (font_current.height + 1));
   1514a:	4643      	mov	r3, r8
   1514c:	4641      	mov	r1, r8
   1514e:	b2e4      	uxtb	r4, r4
   15150:	3301      	adds	r3, #1
   15152:	4363      	muls	r3, r4
   15154:	434c      	muls	r4, r1
   15156:	b2db      	uxtb	r3, r3
   15158:	b2e1      	uxtb	r1, r4
   1515a:	b2d2      	uxtb	r2, r2
   1515c:	4c17      	ldr	r4, [pc, #92]	; (151bc <glcd_tiny_draw_string+0x11c>)
   1515e:	0028      	movs	r0, r5
   15160:	47a0      	blx	r4
   15162:	4643      	mov	r3, r8
	for ( i = 0; i < font_current.width; i++ ) {
   15164:	7934      	ldrb	r4, [r6, #4]
   15166:	01d9      	lsls	r1, r3, #7
   15168:	2300      	movs	r3, #0
   1516a:	2c00      	cmp	r4, #0
   1516c:	d018      	beq.n	151a0 <glcd_tiny_draw_string+0x100>
		glcd_buffer_selected[x + (line * GLCD_LCD_WIDTH)] = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
   1516e:	4658      	mov	r0, fp
   15170:	79b2      	ldrb	r2, [r6, #6]
   15172:	6800      	ldr	r0, [r0, #0]
   15174:	1aba      	subs	r2, r7, r2
   15176:	4354      	muls	r4, r2
   15178:	6832      	ldr	r2, [r6, #0]
   1517a:	1840      	adds	r0, r0, r1
   1517c:	18d2      	adds	r2, r2, r3
   1517e:	5d14      	ldrb	r4, [r2, r4]
   15180:	18ea      	adds	r2, r5, r3
   15182:	b2d2      	uxtb	r2, r2
   15184:	5484      	strb	r4, [r0, r2]
	for ( i = 0; i < font_current.width; i++ ) {
   15186:	3301      	adds	r3, #1
   15188:	7934      	ldrb	r4, [r6, #4]
   1518a:	b2db      	uxtb	r3, r3
   1518c:	429c      	cmp	r4, r3
   1518e:	d8ee      	bhi.n	1516e <glcd_tiny_draw_string+0xce>
   15190:	7973      	ldrb	r3, [r6, #5]
   15192:	2040      	movs	r0, #64	; 0x40
   15194:	469a      	mov	sl, r3
   15196:	1c59      	adds	r1, r3, #1
   15198:	4b07      	ldr	r3, [pc, #28]	; (151b8 <glcd_tiny_draw_string+0x118>)
   1519a:	0027      	movs	r7, r4
   1519c:	4798      	blx	r3
   1519e:	e7c6      	b.n	1512e <glcd_tiny_draw_string+0x8e>
   151a0:	7973      	ldrb	r3, [r6, #5]
   151a2:	2040      	movs	r0, #64	; 0x40
   151a4:	1c59      	adds	r1, r3, #1
   151a6:	469a      	mov	sl, r3
   151a8:	4b03      	ldr	r3, [pc, #12]	; (151b8 <glcd_tiny_draw_string+0x118>)
   151aa:	4798      	blx	r3
   151ac:	2700      	movs	r7, #0
   151ae:	e7be      	b.n	1512e <glcd_tiny_draw_string+0x8e>
   151b0:	20001c7c 	.word	0x20001c7c
   151b4:	20001c74 	.word	0x20001c74
   151b8:	0001ce31 	.word	0x0001ce31
   151bc:	00013785 	.word	0x00013785

000151c0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   151c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   151c2:	4645      	mov	r5, r8
   151c4:	46de      	mov	lr, fp
   151c6:	464e      	mov	r6, r9
   151c8:	4657      	mov	r7, sl
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   151ca:	0003      	movs	r3, r0
{
   151cc:	b5e0      	push	{r5, r6, r7, lr}
	module->hw = hw;
   151ce:	6019      	str	r1, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   151d0:	4bb7      	ldr	r3, [pc, #732]	; (154b0 <usart_init+0x2f0>)
{
   151d2:	b091      	sub	sp, #68	; 0x44
   151d4:	4680      	mov	r8, r0
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   151d6:	0008      	movs	r0, r1
   151d8:	4699      	mov	r9, r3
{
   151da:	000c      	movs	r4, r1
   151dc:	0015      	movs	r5, r2
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   151de:	4798      	blx	r3
   151e0:	0003      	movs	r3, r0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	if (sercom_index == 5) {
   151e2:	2805      	cmp	r0, #5
   151e4:	d100      	bne.n	151e8 <usart_init+0x28>
   151e6:	e109      	b.n	153fc <usart_init+0x23c>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   151e8:	0006      	movs	r6, r0
   151ea:	0007      	movs	r7, r0
   151ec:	3612      	adds	r6, #18
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   151ee:	2201      	movs	r2, #1
   151f0:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   151f2:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   151f4:	420a      	tst	r2, r1
   151f6:	d006      	beq.n	15206 <usart_init+0x46>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
   151f8:	b011      	add	sp, #68	; 0x44
   151fa:	bc3c      	pop	{r2, r3, r4, r5}
   151fc:	4690      	mov	r8, r2
   151fe:	4699      	mov	r9, r3
   15200:	46a2      	mov	sl, r4
   15202:	46ab      	mov	fp, r5
   15204:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   15206:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
   15208:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   1520a:	0789      	lsls	r1, r1, #30
   1520c:	d4f4      	bmi.n	151f8 <usart_init+0x38>
	if (sercom_index == 5) {
   1520e:	2b05      	cmp	r3, #5
   15210:	d100      	bne.n	15214 <usart_init+0x54>
   15212:	e11c      	b.n	1544e <usart_init+0x28e>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
   15214:	40ba      	lsls	r2, r7
			MCLK->APBCMASK.reg |= mask;
   15216:	4ba7      	ldr	r3, [pc, #668]	; (154b4 <usart_init+0x2f4>)
   15218:	69d9      	ldr	r1, [r3, #28]
   1521a:	430a      	orrs	r2, r1
   1521c:	61da      	str	r2, [r3, #28]
	gclk_chan_conf.source_generator = config->generator_source;
   1521e:	272d      	movs	r7, #45	; 0x2d
   15220:	5deb      	ldrb	r3, [r5, r7]
   15222:	a90a      	add	r1, sp, #40	; 0x28
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   15224:	b2f6      	uxtb	r6, r6
	gclk_chan_conf.source_generator = config->generator_source;
   15226:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   15228:	0030      	movs	r0, r6
   1522a:	4ba3      	ldr	r3, [pc, #652]	; (154b8 <usart_init+0x2f8>)
   1522c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   1522e:	0030      	movs	r0, r6
   15230:	4ba2      	ldr	r3, [pc, #648]	; (154bc <usart_init+0x2fc>)
   15232:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   15234:	4ba2      	ldr	r3, [pc, #648]	; (154c0 <usart_init+0x300>)
   15236:	5de8      	ldrb	r0, [r5, r7]
   15238:	2100      	movs	r1, #0
   1523a:	4798      	blx	r3
	module->character_size = config->character_size;
   1523c:	4642      	mov	r2, r8
   1523e:	7aeb      	ldrb	r3, [r5, #11]
   15240:	7153      	strb	r3, [r2, #5]
	module->receiver_enabled = config->receiver_enable;
   15242:	2324      	movs	r3, #36	; 0x24
   15244:	5ceb      	ldrb	r3, [r5, r3]
   15246:	7193      	strb	r3, [r2, #6]
	module->transmitter_enabled = config->transmitter_enable;
   15248:	2325      	movs	r3, #37	; 0x25
   1524a:	5ceb      	ldrb	r3, [r5, r3]
   1524c:	71d3      	strb	r3, [r2, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
   1524e:	7eeb      	ldrb	r3, [r5, #27]
   15250:	7213      	strb	r3, [r2, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   15252:	7f2b      	ldrb	r3, [r5, #28]
   15254:	7253      	strb	r3, [r2, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
   15256:	6813      	ldr	r3, [r2, #0]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   15258:	0018      	movs	r0, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
   1525a:	469a      	mov	sl, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1525c:	47c8      	blx	r9
	if (sercom_index == 5) {
   1525e:	2805      	cmp	r0, #5
   15260:	d100      	bne.n	15264 <usart_init+0xa4>
   15262:	e0f2      	b.n	1544a <usart_init+0x28a>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   15264:	3012      	adds	r0, #18
	uint16_t baud  = 0;
   15266:	2300      	movs	r3, #0
   15268:	ae0c      	add	r6, sp, #48	; 0x30
   1526a:	8033      	strh	r3, [r6, #0]
	switch (config->sample_rate) {
   1526c:	2380      	movs	r3, #128	; 0x80
   1526e:	8a2a      	ldrh	r2, [r5, #16]
   15270:	01db      	lsls	r3, r3, #7
   15272:	9202      	str	r2, [sp, #8]
   15274:	429a      	cmp	r2, r3
   15276:	d100      	bne.n	1527a <usart_init+0xba>
   15278:	e0f4      	b.n	15464 <usart_init+0x2a4>
   1527a:	d800      	bhi.n	1527e <usart_init+0xbe>
   1527c:	e0dc      	b.n	15438 <usart_init+0x278>
   1527e:	23c0      	movs	r3, #192	; 0xc0
   15280:	01db      	lsls	r3, r3, #7
   15282:	429a      	cmp	r2, r3
   15284:	d100      	bne.n	15288 <usart_init+0xc8>
   15286:	e0bc      	b.n	15402 <usart_init+0x242>
   15288:	2380      	movs	r3, #128	; 0x80
   1528a:	021b      	lsls	r3, r3, #8
   1528c:	429a      	cmp	r2, r3
   1528e:	d000      	beq.n	15292 <usart_init+0xd2>
   15290:	e0e3      	b.n	1545a <usart_init+0x29a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   15292:	2303      	movs	r3, #3
   15294:	9309      	str	r3, [sp, #36]	; 0x24
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   15296:	2300      	movs	r3, #0
   15298:	9308      	str	r3, [sp, #32]
	ctrla = (uint32_t)config->data_order |
   1529a:	682b      	ldr	r3, [r5, #0]
   1529c:	9303      	str	r3, [sp, #12]
		(uint32_t)config->mux_setting |
   1529e:	68eb      	ldr	r3, [r5, #12]
   152a0:	9304      	str	r3, [sp, #16]
		config->sample_adjustment |
   152a2:	696b      	ldr	r3, [r5, #20]
   152a4:	9305      	str	r3, [sp, #20]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   152a6:	7e2b      	ldrb	r3, [r5, #24]
   152a8:	9306      	str	r3, [sp, #24]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   152aa:	2326      	movs	r3, #38	; 0x26
   152ac:	5ceb      	ldrb	r3, [r5, r3]
   152ae:	9307      	str	r3, [sp, #28]
	transfer_mode = (uint32_t)config->transfer_mode;
   152b0:	686b      	ldr	r3, [r5, #4]
   152b2:	469b      	mov	fp, r3
	switch (transfer_mode)
   152b4:	2b00      	cmp	r3, #0
   152b6:	d100      	bne.n	152ba <usart_init+0xfa>
   152b8:	e0ad      	b.n	15416 <usart_init+0x256>
   152ba:	2380      	movs	r3, #128	; 0x80
   152bc:	055b      	lsls	r3, r3, #21
   152be:	459b      	cmp	fp, r3
   152c0:	d000      	beq.n	152c4 <usart_init+0x104>
   152c2:	e0a6      	b.n	15412 <usart_init+0x252>
			if (!config->use_external_clock) {
   152c4:	2327      	movs	r3, #39	; 0x27
   152c6:	5cea      	ldrb	r2, [r5, r3]
   152c8:	2300      	movs	r3, #0
   152ca:	2a00      	cmp	r2, #0
   152cc:	d100      	bne.n	152d0 <usart_init+0x110>
   152ce:	e0e4      	b.n	1549a <usart_init+0x2da>
	if(config->encoding_format_enable) {
   152d0:	7e6a      	ldrb	r2, [r5, #25]
   152d2:	2a00      	cmp	r2, #0
   152d4:	d002      	beq.n	152dc <usart_init+0x11c>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   152d6:	4651      	mov	r1, sl
   152d8:	7eaa      	ldrb	r2, [r5, #26]
   152da:	738a      	strb	r2, [r1, #14]
	usart_hw->BAUD.reg = baud;
   152dc:	4652      	mov	r2, sl
   152de:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
   152e0:	9a04      	ldr	r2, [sp, #16]
   152e2:	9b03      	ldr	r3, [sp, #12]
   152e4:	9f02      	ldr	r7, [sp, #8]
   152e6:	4313      	orrs	r3, r2
   152e8:	9a05      	ldr	r2, [sp, #20]
   152ea:	4313      	orrs	r3, r2
   152ec:	465a      	mov	r2, fp
   152ee:	4313      	orrs	r3, r2
   152f0:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   152f2:	9b06      	ldr	r3, [sp, #24]
   152f4:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
   152f6:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   152f8:	9b07      	ldr	r3, [sp, #28]
   152fa:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
   152fc:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
   152fe:	2327      	movs	r3, #39	; 0x27
   15300:	5ceb      	ldrb	r3, [r5, r3]
   15302:	2b00      	cmp	r3, #0
   15304:	d101      	bne.n	1530a <usart_init+0x14a>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   15306:	3304      	adds	r3, #4
   15308:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   1530a:	7e6b      	ldrb	r3, [r5, #25]
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   1530c:	7f2a      	ldrb	r2, [r5, #28]
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   1530e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   15310:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   15312:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   15314:	7f6a      	ldrb	r2, [r5, #29]
	ctrlb |= (uint32_t)config->character_size;
   15316:	7ae9      	ldrb	r1, [r5, #11]
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   15318:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   1531a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   1531c:	2224      	movs	r2, #36	; 0x24
   1531e:	5caa      	ldrb	r2, [r5, r2]
   15320:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   15322:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   15324:	2225      	movs	r2, #37	; 0x25
   15326:	5caa      	ldrb	r2, [r5, r2]
   15328:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   1532a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
   1532c:	7aaa      	ldrb	r2, [r5, #10]
   1532e:	430a      	orrs	r2, r1
	if (config->parity != USART_PARITY_NONE) {
   15330:	8929      	ldrh	r1, [r5, #8]
	ctrlb |= (uint32_t)config->character_size;
   15332:	431a      	orrs	r2, r3
   15334:	0010      	movs	r0, r2
	if (config->parity != USART_PARITY_NONE) {
   15336:	29ff      	cmp	r1, #255	; 0xff
   15338:	d100      	bne.n	1533c <usart_init+0x17c>
   1533a:	e098      	b.n	1546e <usart_init+0x2ae>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   1533c:	2380      	movs	r3, #128	; 0x80
   1533e:	045b      	lsls	r3, r3, #17
   15340:	431f      	orrs	r7, r3
		ctrlb |= config->parity;
   15342:	4308      	orrs	r0, r1
	if (config->run_in_standby || system_is_debugger_present()) {
   15344:	212c      	movs	r1, #44	; 0x2c
   15346:	5c69      	ldrb	r1, [r5, r1]
   15348:	2900      	cmp	r1, #0
   1534a:	d103      	bne.n	15354 <usart_init+0x194>
   1534c:	4b5d      	ldr	r3, [pc, #372]	; (154c4 <usart_init+0x304>)
   1534e:	789b      	ldrb	r3, [r3, #2]
   15350:	079b      	lsls	r3, r3, #30
   15352:	d501      	bpl.n	15358 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   15354:	2380      	movs	r3, #128	; 0x80
   15356:	431f      	orrs	r7, r3
   15358:	4643      	mov	r3, r8
   1535a:	681a      	ldr	r2, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
   1535c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   1535e:	2b00      	cmp	r3, #0
   15360:	d1fc      	bne.n	1535c <usart_init+0x19c>
	usart_hw->CTRLB.reg = ctrlb;
   15362:	4653      	mov	r3, sl
   15364:	6058      	str	r0, [r3, #4]
   15366:	4643      	mov	r3, r8
   15368:	681a      	ldr	r2, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
   1536a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   1536c:	2b00      	cmp	r3, #0
   1536e:	d1fc      	bne.n	1536a <usart_init+0x1aa>
	usart_hw->CTRLA.reg = ctrla;
   15370:	4652      	mov	r2, sl
   15372:	6017      	str	r7, [r2, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   15374:	af0b      	add	r7, sp, #44	; 0x2c
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   15376:	707b      	strb	r3, [r7, #1]
	config->powersave    = false;
   15378:	70fb      	strb	r3, [r7, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   1537a:	70bb      	strb	r3, [r7, #2]
	uint32_t pad_pinmuxes[] = {
   1537c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1537e:	2280      	movs	r2, #128	; 0x80
   15380:	930c      	str	r3, [sp, #48]	; 0x30
   15382:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   15384:	703a      	strb	r2, [r7, #0]
   15386:	6073      	str	r3, [r6, #4]
   15388:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1538a:	60b3      	str	r3, [r6, #8]
   1538c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   1538e:	2500      	movs	r5, #0
   15390:	60f3      	str	r3, [r6, #12]
			current_pinmux = _sercom_get_default_pad(hw, pad);
   15392:	4b4d      	ldr	r3, [pc, #308]	; (154c8 <usart_init+0x308>)
   15394:	469b      	mov	fp, r3
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   15396:	4b4d      	ldr	r3, [pc, #308]	; (154cc <usart_init+0x30c>)
   15398:	469a      	mov	sl, r3
		uint32_t current_pinmux = pad_pinmuxes[pad];
   1539a:	00ab      	lsls	r3, r5, #2
   1539c:	58f0      	ldr	r0, [r6, r3]
   1539e:	b2e9      	uxtb	r1, r5
		if (current_pinmux == PINMUX_DEFAULT) {
   153a0:	2800      	cmp	r0, #0
   153a2:	d033      	beq.n	1540c <usart_init+0x24c>
		if (current_pinmux != PINMUX_UNUSED) {
   153a4:	1c43      	adds	r3, r0, #1
   153a6:	d004      	beq.n	153b2 <usart_init+0x1f2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   153a8:	7038      	strb	r0, [r7, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   153aa:	0c00      	lsrs	r0, r0, #16
   153ac:	b2c0      	uxtb	r0, r0
   153ae:	0039      	movs	r1, r7
   153b0:	47d0      	blx	sl
   153b2:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
   153b4:	2d04      	cmp	r5, #4
   153b6:	d1f0      	bne.n	1539a <usart_init+0x1da>
		module->callback[i]            = NULL;
   153b8:	4640      	mov	r0, r8
   153ba:	2218      	movs	r2, #24
   153bc:	2100      	movs	r1, #0
   153be:	4b44      	ldr	r3, [pc, #272]	; (154d0 <usart_init+0x310>)
   153c0:	300c      	adds	r0, #12
   153c2:	4798      	blx	r3
	module->tx_buffer_ptr              = NULL;
   153c4:	2200      	movs	r2, #0
   153c6:	4643      	mov	r3, r8
	module->remaining_tx_buffer_length = 0x0000;
   153c8:	4641      	mov	r1, r8
	module->tx_buffer_ptr              = NULL;
   153ca:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   153cc:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   153ce:	2300      	movs	r3, #0
   153d0:	85ca      	strh	r2, [r1, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   153d2:	858a      	strh	r2, [r1, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   153d4:	3230      	adds	r2, #48	; 0x30
   153d6:	548b      	strb	r3, [r1, r2]
	module->callback_enable_mask       = 0x00;
   153d8:	3201      	adds	r2, #1
   153da:	548b      	strb	r3, [r1, r2]
	module->rx_status                  = STATUS_OK;
   153dc:	3201      	adds	r2, #1
   153de:	548b      	strb	r3, [r1, r2]
	module->tx_status                  = STATUS_OK;
   153e0:	3201      	adds	r2, #1
   153e2:	548b      	strb	r3, [r1, r2]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   153e4:	6808      	ldr	r0, [r1, #0]
   153e6:	47c8      	blx	r9
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   153e8:	4b3a      	ldr	r3, [pc, #232]	; (154d4 <usart_init+0x314>)
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   153ea:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   153ec:	493a      	ldr	r1, [pc, #232]	; (154d8 <usart_init+0x318>)
   153ee:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   153f0:	4642      	mov	r2, r8
   153f2:	4b3a      	ldr	r3, [pc, #232]	; (154dc <usart_init+0x31c>)
   153f4:	00a4      	lsls	r4, r4, #2
   153f6:	50e2      	str	r2, [r4, r3]
	return status_code;
   153f8:	2000      	movs	r0, #0
   153fa:	e6fd      	b.n	151f8 <usart_init+0x38>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
   153fc:	2618      	movs	r6, #24
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
   153fe:	2701      	movs	r7, #1
   15400:	e6f5      	b.n	151ee <usart_init+0x2e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   15402:	2308      	movs	r3, #8
   15404:	9309      	str	r3, [sp, #36]	; 0x24
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   15406:	3b07      	subs	r3, #7
   15408:	9308      	str	r3, [sp, #32]
   1540a:	e746      	b.n	1529a <usart_init+0xda>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   1540c:	0020      	movs	r0, r4
   1540e:	47d8      	blx	fp
   15410:	e7c8      	b.n	153a4 <usart_init+0x1e4>
	switch (transfer_mode)
   15412:	2300      	movs	r3, #0
   15414:	e75c      	b.n	152d0 <usart_init+0x110>
			if (config->use_external_clock) {
   15416:	2327      	movs	r3, #39	; 0x27
   15418:	5ceb      	ldrb	r3, [r5, r3]
   1541a:	2b00      	cmp	r3, #0
   1541c:	d02f      	beq.n	1547e <usart_init+0x2be>
				status_code =
   1541e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15420:	0032      	movs	r2, r6
   15422:	9300      	str	r3, [sp, #0]
   15424:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   15426:	9b08      	ldr	r3, [sp, #32]
   15428:	6a28      	ldr	r0, [r5, #32]
   1542a:	4f2d      	ldr	r7, [pc, #180]	; (154e0 <usart_init+0x320>)
   1542c:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
   1542e:	2800      	cmp	r0, #0
   15430:	d000      	beq.n	15434 <usart_init+0x274>
   15432:	e6e1      	b.n	151f8 <usart_init+0x38>
   15434:	8833      	ldrh	r3, [r6, #0]
   15436:	e74b      	b.n	152d0 <usart_init+0x110>
	switch (config->sample_rate) {
   15438:	2380      	movs	r3, #128	; 0x80
   1543a:	019b      	lsls	r3, r3, #6
   1543c:	429a      	cmp	r2, r3
   1543e:	d10c      	bne.n	1545a <usart_init+0x29a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   15440:	2310      	movs	r3, #16
   15442:	9309      	str	r3, [sp, #36]	; 0x24
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   15444:	3b0f      	subs	r3, #15
   15446:	9308      	str	r3, [sp, #32]
   15448:	e727      	b.n	1529a <usart_init+0xda>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
   1544a:	2018      	movs	r0, #24
   1544c:	e70b      	b.n	15266 <usart_init+0xa6>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
   1544e:	40ba      	lsls	r2, r7
			MCLK->APBDMASK.reg |= mask;
   15450:	4b18      	ldr	r3, [pc, #96]	; (154b4 <usart_init+0x2f4>)
   15452:	6a19      	ldr	r1, [r3, #32]
   15454:	430a      	orrs	r2, r1
   15456:	621a      	str	r2, [r3, #32]
   15458:	e6e1      	b.n	1521e <usart_init+0x5e>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   1545a:	2310      	movs	r3, #16
   1545c:	9309      	str	r3, [sp, #36]	; 0x24
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   1545e:	2300      	movs	r3, #0
   15460:	9308      	str	r3, [sp, #32]
   15462:	e71a      	b.n	1529a <usart_init+0xda>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   15464:	2308      	movs	r3, #8
   15466:	9309      	str	r3, [sp, #36]	; 0x24
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   15468:	2300      	movs	r3, #0
   1546a:	9308      	str	r3, [sp, #32]
   1546c:	e715      	b.n	1529a <usart_init+0xda>
		if(config->lin_slave_enable) {
   1546e:	7eeb      	ldrb	r3, [r5, #27]
   15470:	2b00      	cmp	r3, #0
   15472:	d100      	bne.n	15476 <usart_init+0x2b6>
   15474:	e766      	b.n	15344 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   15476:	2380      	movs	r3, #128	; 0x80
   15478:	04db      	lsls	r3, r3, #19
   1547a:	431f      	orrs	r7, r3
   1547c:	e762      	b.n	15344 <usart_init+0x184>
						_sercom_get_async_baud_val(config->baudrate,
   1547e:	6a2b      	ldr	r3, [r5, #32]
   15480:	b2c0      	uxtb	r0, r0
   15482:	001f      	movs	r7, r3
   15484:	4b17      	ldr	r3, [pc, #92]	; (154e4 <usart_init+0x324>)
   15486:	4798      	blx	r3
				status_code =
   15488:	9b09      	ldr	r3, [sp, #36]	; 0x24
						_sercom_get_async_baud_val(config->baudrate,
   1548a:	0001      	movs	r1, r0
				status_code =
   1548c:	9300      	str	r3, [sp, #0]
   1548e:	0032      	movs	r2, r6
   15490:	9b08      	ldr	r3, [sp, #32]
   15492:	0038      	movs	r0, r7
   15494:	4f12      	ldr	r7, [pc, #72]	; (154e0 <usart_init+0x320>)
   15496:	47b8      	blx	r7
   15498:	e7c9      	b.n	1542e <usart_init+0x26e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   1549a:	6a2b      	ldr	r3, [r5, #32]
   1549c:	b2c0      	uxtb	r0, r0
   1549e:	001f      	movs	r7, r3
   154a0:	4b10      	ldr	r3, [pc, #64]	; (154e4 <usart_init+0x324>)
   154a2:	4798      	blx	r3
   154a4:	0032      	movs	r2, r6
   154a6:	0001      	movs	r1, r0
   154a8:	4b0f      	ldr	r3, [pc, #60]	; (154e8 <usart_init+0x328>)
   154aa:	0038      	movs	r0, r7
   154ac:	4798      	blx	r3
   154ae:	e7be      	b.n	1542e <usart_init+0x26e>
   154b0:	00016115 	.word	0x00016115
   154b4:	40000400 	.word	0x40000400
   154b8:	000168f5 	.word	0x000168f5
   154bc:	00016935 	.word	0x00016935
   154c0:	00015f71 	.word	0x00015f71
   154c4:	41002000 	.word	0x41002000
   154c8:	00015fb9 	.word	0x00015fb9
   154cc:	000169f1 	.word	0x000169f1
   154d0:	0001fdfd 	.word	0x0001fdfd
   154d4:	0000fe49 	.word	0x0000fe49
   154d8:	0000ffd5 	.word	0x0000ffd5
   154dc:	20001444 	.word	0x20001444
   154e0:	00015d09 	.word	0x00015d09
   154e4:	0001696d 	.word	0x0001696d
   154e8:	00015ce1 	.word	0x00015ce1

000154ec <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   154ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   154ee:	4645      	mov	r5, r8
   154f0:	464e      	mov	r6, r9
   154f2:	46de      	mov	lr, fp
   154f4:	4657      	mov	r7, sl
   154f6:	b5e0      	push	{r5, r6, r7, lr}
   154f8:	0005      	movs	r5, r0
   154fa:	0014      	movs	r4, r2
	module->hw = hw;

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   154fc:	2202      	movs	r2, #2
	module->hw = hw;
   154fe:	6029      	str	r1, [r5, #0]
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   15500:	680b      	ldr	r3, [r1, #0]
{
   15502:	b087      	sub	sp, #28
   15504:	000e      	movs	r6, r1
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   15506:	4690      	mov	r8, r2
   15508:	421a      	tst	r2, r3
   1550a:	d10c      	bne.n	15526 <spi_init+0x3a>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   1550c:	2701      	movs	r7, #1
   1550e:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
   15510:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   15512:	421f      	tst	r7, r3
   15514:	d100      	bne.n	15518 <spi_init+0x2c>
   15516:	e0df      	b.n	156d8 <spi_init+0x1ec>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
   15518:	b007      	add	sp, #28
   1551a:	bc3c      	pop	{r2, r3, r4, r5}
   1551c:	4690      	mov	r8, r2
   1551e:	4699      	mov	r9, r3
   15520:	46a2      	mov	sl, r4
   15522:	46ab      	mov	fp, r5
   15524:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config->pinmux_pad2, config->pinmux_pad3
   15526:	6b23      	ldr	r3, [r4, #48]	; 0x30
		config->pinmux_pad0, config->pinmux_pad1,
   15528:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		config->pinmux_pad2, config->pinmux_pad3
   1552a:	4698      	mov	r8, r3
   1552c:	6b63      	ldr	r3, [r4, #52]	; 0x34
		config->pinmux_pad0, config->pinmux_pad1,
   1552e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
		config->pinmux_pad2, config->pinmux_pad3
   15530:	4699      	mov	r9, r3
		if (current_pinmux == PINMUX_DEFAULT) {
   15532:	2800      	cmp	r0, #0
   15534:	d100      	bne.n	15538 <spi_init+0x4c>
   15536:	e0bf      	b.n	156b8 <spi_init+0x1cc>
		if (current_pinmux == PINMUX_UNUSED) {
   15538:	1c43      	adds	r3, r0, #1
   1553a:	d01e      	beq.n	1557a <spi_init+0x8e>
		if ((current_pinmux & 0xFFFF) !=
   1553c:	0402      	lsls	r2, r0, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
   1553e:	0c00      	lsrs	r0, r0, #16
		if ((current_pinmux & 0xFFFF) !=
   15540:	0c13      	lsrs	r3, r2, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
   15542:	b2c0      	uxtb	r0, r0
		if ((current_pinmux & 0xFFFF) !=
   15544:	469b      	mov	fp, r3
	if (port_index < PORT_INST_NUM) {
   15546:	09c1      	lsrs	r1, r0, #7
	uint8_t group_index = (gpio_pin / 32);
   15548:	0943      	lsrs	r3, r0, #5
	if (port_index < PORT_INST_NUM) {
   1554a:	2900      	cmp	r1, #0
   1554c:	d000      	beq.n	15550 <spi_init+0x64>
   1554e:	e0be      	b.n	156ce <spi_init+0x1e2>
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
   15550:	311f      	adds	r1, #31
   15552:	4001      	ands	r1, r0
   15554:	468c      	mov	ip, r1

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   15556:	49ce      	ldr	r1, [pc, #824]	; (15890 <spi_init+0x3a4>)
   15558:	01db      	lsls	r3, r3, #7
   1555a:	468a      	mov	sl, r1
   1555c:	4661      	mov	r1, ip
   1555e:	4453      	add	r3, sl
   15560:	1859      	adds	r1, r3, r1
   15562:	3140      	adds	r1, #64	; 0x40
   15564:	7809      	ldrb	r1, [r1, #0]
   15566:	468a      	mov	sl, r1
   15568:	2101      	movs	r1, #1
   1556a:	4652      	mov	r2, sl
   1556c:	4211      	tst	r1, r2
   1556e:	d000      	beq.n	15572 <spi_init+0x86>
   15570:	e13e      	b.n	157f0 <spi_init+0x304>
   15572:	2380      	movs	r3, #128	; 0x80
   15574:	455b      	cmp	r3, fp
   15576:	d000      	beq.n	1557a <spi_init+0x8e>
   15578:	e09a      	b.n	156b0 <spi_init+0x1c4>
		if (current_pinmux == PINMUX_DEFAULT) {
   1557a:	2f00      	cmp	r7, #0
   1557c:	d100      	bne.n	15580 <spi_init+0x94>
   1557e:	e0a0      	b.n	156c2 <spi_init+0x1d6>
		if (current_pinmux == PINMUX_UNUSED) {
   15580:	1c7b      	adds	r3, r7, #1
   15582:	d019      	beq.n	155b8 <spi_init+0xcc>
		if ((current_pinmux & 0xFFFF) !=
   15584:	043a      	lsls	r2, r7, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
   15586:	0c3f      	lsrs	r7, r7, #16
		if ((current_pinmux & 0xFFFF) !=
   15588:	0c13      	lsrs	r3, r2, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
   1558a:	b2f8      	uxtb	r0, r7
		if ((current_pinmux & 0xFFFF) !=
   1558c:	469a      	mov	sl, r3
	if (port_index < PORT_INST_NUM) {
   1558e:	09c1      	lsrs	r1, r0, #7
	uint8_t group_index = (gpio_pin / 32);
   15590:	0943      	lsrs	r3, r0, #5
	if (port_index < PORT_INST_NUM) {
   15592:	2900      	cmp	r1, #0
   15594:	d000      	beq.n	15598 <spi_init+0xac>
   15596:	e09a      	b.n	156ce <spi_init+0x1e2>
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   15598:	49bd      	ldr	r1, [pc, #756]	; (15890 <spi_init+0x3a4>)
	uint32_t pin_index = (gpio_pin % 32);
   1559a:	271f      	movs	r7, #31
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   1559c:	468c      	mov	ip, r1
   1559e:	2201      	movs	r2, #1
   155a0:	01db      	lsls	r3, r3, #7
	uint32_t pin_index = (gpio_pin % 32);
   155a2:	4007      	ands	r7, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   155a4:	4463      	add	r3, ip
   155a6:	19d9      	adds	r1, r3, r7
   155a8:	3140      	adds	r1, #64	; 0x40
   155aa:	7809      	ldrb	r1, [r1, #0]
   155ac:	420a      	tst	r2, r1
   155ae:	d000      	beq.n	155b2 <spi_init+0xc6>
   155b0:	e12e      	b.n	15810 <spi_init+0x324>
   155b2:	2380      	movs	r3, #128	; 0x80
   155b4:	4553      	cmp	r3, sl
   155b6:	d17b      	bne.n	156b0 <spi_init+0x1c4>
		if (current_pinmux == PINMUX_DEFAULT) {
   155b8:	4643      	mov	r3, r8
   155ba:	2b00      	cmp	r3, #0
   155bc:	d100      	bne.n	155c0 <spi_init+0xd4>
   155be:	e13f      	b.n	15840 <spi_init+0x354>
		if (current_pinmux == PINMUX_UNUSED) {
   155c0:	4643      	mov	r3, r8
   155c2:	3301      	adds	r3, #1
   155c4:	d019      	beq.n	155fa <spi_init+0x10e>
		if ((current_pinmux & 0xFFFF) !=
   155c6:	4643      	mov	r3, r8
   155c8:	041a      	lsls	r2, r3, #16
   155ca:	0c13      	lsrs	r3, r2, #16
   155cc:	469a      	mov	sl, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
   155ce:	4643      	mov	r3, r8
   155d0:	0c18      	lsrs	r0, r3, #16
   155d2:	b2c0      	uxtb	r0, r0
	uint8_t group_index = (gpio_pin / 32);
   155d4:	0943      	lsrs	r3, r0, #5
	if (port_index < PORT_INST_NUM) {
   155d6:	09c1      	lsrs	r1, r0, #7
   155d8:	d179      	bne.n	156ce <spi_init+0x1e2>
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   155da:	49ad      	ldr	r1, [pc, #692]	; (15890 <spi_init+0x3a4>)
	uint32_t pin_index = (gpio_pin % 32);
   155dc:	271f      	movs	r7, #31
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   155de:	468c      	mov	ip, r1
   155e0:	2201      	movs	r2, #1
   155e2:	01db      	lsls	r3, r3, #7
	uint32_t pin_index = (gpio_pin % 32);
   155e4:	4007      	ands	r7, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   155e6:	4463      	add	r3, ip
   155e8:	19d9      	adds	r1, r3, r7
   155ea:	3140      	adds	r1, #64	; 0x40
   155ec:	7809      	ldrb	r1, [r1, #0]
   155ee:	420a      	tst	r2, r1
   155f0:	d000      	beq.n	155f4 <spi_init+0x108>
   155f2:	e119      	b.n	15828 <spi_init+0x33c>
   155f4:	2380      	movs	r3, #128	; 0x80
		if ((current_pinmux & 0xFFFF) !=
   155f6:	459a      	cmp	sl, r3
   155f8:	d15a      	bne.n	156b0 <spi_init+0x1c4>
		if (current_pinmux == PINMUX_DEFAULT) {
   155fa:	464b      	mov	r3, r9
   155fc:	2b00      	cmp	r3, #0
   155fe:	d100      	bne.n	15602 <spi_init+0x116>
   15600:	e124      	b.n	1584c <spi_init+0x360>
		if (current_pinmux == PINMUX_UNUSED) {
   15602:	464b      	mov	r3, r9
   15604:	3301      	adds	r3, #1
   15606:	d027      	beq.n	15658 <spi_init+0x16c>
		if ((current_pinmux & 0xFFFF) !=
   15608:	464b      	mov	r3, r9
   1560a:	0419      	lsls	r1, r3, #16
   1560c:	0c0b      	lsrs	r3, r1, #16
   1560e:	469a      	mov	sl, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
   15610:	464b      	mov	r3, r9
   15612:	0c18      	lsrs	r0, r3, #16
   15614:	b2c0      	uxtb	r0, r0
	uint8_t group_index = (gpio_pin / 32);
   15616:	0943      	lsrs	r3, r0, #5
	if (port_index < PORT_INST_NUM) {
   15618:	09c2      	lsrs	r2, r0, #7
   1561a:	d158      	bne.n	156ce <spi_init+0x1e2>
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   1561c:	4a9c      	ldr	r2, [pc, #624]	; (15890 <spi_init+0x3a4>)
	uint32_t pin_index = (gpio_pin % 32);
   1561e:	271f      	movs	r7, #31
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   15620:	4694      	mov	ip, r2
   15622:	01db      	lsls	r3, r3, #7
   15624:	4463      	add	r3, ip
	uint32_t pin_index = (gpio_pin % 32);
   15626:	4007      	ands	r7, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   15628:	19da      	adds	r2, r3, r7
   1562a:	3240      	adds	r2, #64	; 0x40
   1562c:	7812      	ldrb	r2, [r2, #0]
   1562e:	4690      	mov	r8, r2
   15630:	2201      	movs	r2, #1
   15632:	4694      	mov	ip, r2
   15634:	327f      	adds	r2, #127	; 0x7f
   15636:	4691      	mov	r9, r2
   15638:	4661      	mov	r1, ip
   1563a:	4642      	mov	r2, r8
   1563c:	4211      	tst	r1, r2
   1563e:	d009      	beq.n	15654 <spi_init+0x168>
		return SYSTEM_PINMUX_GPIO;
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
   15640:	087f      	lsrs	r7, r7, #1
   15642:	19db      	adds	r3, r3, r7
   15644:	3330      	adds	r3, #48	; 0x30
   15646:	781a      	ldrb	r2, [r3, #0]
   15648:	b2d2      	uxtb	r2, r2

	if (pin_index & 1) {
   1564a:	4201      	tst	r1, r0
   1564c:	d100      	bne.n	15650 <spi_init+0x164>
   1564e:	e103      	b.n	15858 <spi_init+0x36c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
   15650:	0913      	lsrs	r3, r2, #4
   15652:	4699      	mov	r9, r3
		if ((current_pinmux & 0xFFFF) !=
   15654:	45ca      	cmp	sl, r9
   15656:	d12b      	bne.n	156b0 <spi_init+0x1c4>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
   15658:	2011      	movs	r0, #17
   1565a:	4b8e      	ldr	r3, [pc, #568]	; (15894 <spi_init+0x3a8>)
   1565c:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
   1565e:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
   15660:	2700      	movs	r7, #0
	if (config->mode == SPI_MODE_MASTER) {
   15662:	2a01      	cmp	r2, #1
   15664:	d100      	bne.n	15668 <spi_init+0x17c>
   15666:	e127      	b.n	158b8 <spi_init+0x3cc>
	ctrla |= config->mux_setting;
   15668:	68a2      	ldr	r2, [r4, #8]
   1566a:	6863      	ldr	r3, [r4, #4]
	if (config->run_in_standby) {
   1566c:	7c61      	ldrb	r1, [r4, #17]
	ctrla |= config->mux_setting;
   1566e:	4313      	orrs	r3, r2
   15670:	68e2      	ldr	r2, [r4, #12]
   15672:	4313      	orrs	r3, r2
   15674:	433b      	orrs	r3, r7
	ctrlb |= config->character_size;
   15676:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
   15678:	2900      	cmp	r1, #0
   1567a:	d001      	beq.n	15680 <spi_init+0x194>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   1567c:	2180      	movs	r1, #128	; 0x80
   1567e:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
   15680:	7ca1      	ldrb	r1, [r4, #18]
   15682:	2900      	cmp	r1, #0
   15684:	d002      	beq.n	1568c <spi_init+0x1a0>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   15686:	2180      	movs	r1, #128	; 0x80
   15688:	0289      	lsls	r1, r1, #10
   1568a:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
   1568c:	7ce1      	ldrb	r1, [r4, #19]
   1568e:	2900      	cmp	r1, #0
   15690:	d002      	beq.n	15698 <spi_init+0x1ac>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   15692:	2180      	movs	r1, #128	; 0x80
   15694:	0089      	lsls	r1, r1, #2
   15696:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
   15698:	7d21      	ldrb	r1, [r4, #20]
   1569a:	2900      	cmp	r1, #0
   1569c:	d002      	beq.n	156a4 <spi_init+0x1b8>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   1569e:	2180      	movs	r1, #128	; 0x80
   156a0:	0189      	lsls	r1, r1, #6
   156a2:	430a      	orrs	r2, r1
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
   156a4:	2002      	movs	r0, #2
	if (spi_module->CTRLA.reg == ctrla &&
   156a6:	6831      	ldr	r1, [r6, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
   156a8:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
   156aa:	428b      	cmp	r3, r1
   156ac:	d100      	bne.n	156b0 <spi_init+0x1c4>
   156ae:	e0d7      	b.n	15860 <spi_init+0x374>
			module->hw = NULL;
   156b0:	2300      	movs	r3, #0
			return STATUS_ERR_DENIED;
   156b2:	201c      	movs	r0, #28
			module->hw = NULL;
   156b4:	602b      	str	r3, [r5, #0]
   156b6:	e72f      	b.n	15518 <spi_init+0x2c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   156b8:	2100      	movs	r1, #0
   156ba:	0030      	movs	r0, r6
   156bc:	4b76      	ldr	r3, [pc, #472]	; (15898 <spi_init+0x3ac>)
   156be:	4798      	blx	r3
   156c0:	e73a      	b.n	15538 <spi_init+0x4c>
   156c2:	2101      	movs	r1, #1
   156c4:	0030      	movs	r0, r6
   156c6:	4b74      	ldr	r3, [pc, #464]	; (15898 <spi_init+0x3ac>)
   156c8:	4798      	blx	r3
   156ca:	0007      	movs	r7, r0
   156cc:	e758      	b.n	15580 <spi_init+0x94>
	uint32_t pin_index = (gpio_pin % 32);
   156ce:	231f      	movs	r3, #31
   156d0:	4018      	ands	r0, r3
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   156d2:	3040      	adds	r0, #64	; 0x40
   156d4:	7803      	ldrb	r3, [r0, #0]
   156d6:	deff      	udf	#255	; 0xff
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   156d8:	0008      	movs	r0, r1
   156da:	4b70      	ldr	r3, [pc, #448]	; (1589c <spi_init+0x3b0>)
   156dc:	4798      	blx	r3
	if (sercom_index == 5) {
   156de:	2805      	cmp	r0, #5
   156e0:	d100      	bne.n	156e4 <spi_init+0x1f8>
   156e2:	e0cd      	b.n	15880 <spi_init+0x394>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   156e4:	4087      	lsls	r7, r0
			MCLK->APBCMASK.reg |= mask;
   156e6:	4b6e      	ldr	r3, [pc, #440]	; (158a0 <spi_init+0x3b4>)
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   156e8:	3012      	adds	r0, #18
   156ea:	69da      	ldr	r2, [r3, #28]
   156ec:	4317      	orrs	r7, r2
   156ee:	61df      	str	r7, [r3, #28]
   156f0:	b2c7      	uxtb	r7, r0
	gclk_chan_conf.source_generator = config->generator_source;
   156f2:	2324      	movs	r3, #36	; 0x24
   156f4:	466a      	mov	r2, sp
   156f6:	4698      	mov	r8, r3
   156f8:	5ce3      	ldrb	r3, [r4, r3]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   156fa:	4669      	mov	r1, sp
	gclk_chan_conf.source_generator = config->generator_source;
   156fc:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   156fe:	0038      	movs	r0, r7
   15700:	4b68      	ldr	r3, [pc, #416]	; (158a4 <spi_init+0x3b8>)
   15702:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   15704:	0038      	movs	r0, r7
   15706:	4b68      	ldr	r3, [pc, #416]	; (158a8 <spi_init+0x3bc>)
   15708:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   1570a:	4643      	mov	r3, r8
   1570c:	2100      	movs	r1, #0
   1570e:	5ce0      	ldrb	r0, [r4, r3]
   15710:	4b66      	ldr	r3, [pc, #408]	; (158ac <spi_init+0x3c0>)
   15712:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
   15714:	7823      	ldrb	r3, [r4, #0]
   15716:	2b01      	cmp	r3, #1
   15718:	d100      	bne.n	1571c <spi_init+0x230>
   1571a:	e0ab      	b.n	15874 <spi_init+0x388>
	SercomSpi *const spi_module = &(module->hw->SPI);
   1571c:	682a      	ldr	r2, [r5, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1571e:	4669      	mov	r1, sp
   15720:	4691      	mov	r9, r2
   15722:	2280      	movs	r2, #128	; 0x80
   15724:	710a      	strb	r2, [r1, #4]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   15726:	2200      	movs	r2, #0
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   15728:	4668      	mov	r0, sp
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1572a:	714a      	strb	r2, [r1, #5]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1572c:	2101      	movs	r1, #1
	config->powersave    = false;
   1572e:	71c2      	strb	r2, [r0, #7]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   15730:	7181      	strb	r1, [r0, #6]
	if(config->mode == SPI_MODE_SLAVE) {
   15732:	2b00      	cmp	r3, #0
   15734:	d100      	bne.n	15738 <spi_init+0x24c>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   15736:	7183      	strb	r3, [r0, #6]
	uint32_t pad_pinmuxes[] = {
   15738:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1573a:	af02      	add	r7, sp, #8
   1573c:	9302      	str	r3, [sp, #8]
   1573e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   15740:	2600      	movs	r6, #0
   15742:	607b      	str	r3, [r7, #4]
   15744:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15746:	60bb      	str	r3, [r7, #8]
   15748:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1574a:	60fb      	str	r3, [r7, #12]
			current_pinmux = _sercom_get_default_pad(hw, pad);
   1574c:	4b52      	ldr	r3, [pc, #328]	; (15898 <spi_init+0x3ac>)
   1574e:	469b      	mov	fp, r3
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   15750:	4b57      	ldr	r3, [pc, #348]	; (158b0 <spi_init+0x3c4>)
   15752:	469a      	mov	sl, r3
		uint32_t current_pinmux = pad_pinmuxes[pad];
   15754:	00b3      	lsls	r3, r6, #2
   15756:	58f8      	ldr	r0, [r7, r3]
   15758:	b2f1      	uxtb	r1, r6
		if (current_pinmux == PINMUX_DEFAULT) {
   1575a:	2800      	cmp	r0, #0
   1575c:	d045      	beq.n	157ea <spi_init+0x2fe>
		if (current_pinmux != PINMUX_UNUSED) {
   1575e:	1c43      	adds	r3, r0, #1
   15760:	d005      	beq.n	1576e <spi_init+0x282>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   15762:	466b      	mov	r3, sp
   15764:	7118      	strb	r0, [r3, #4]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   15766:	0c00      	lsrs	r0, r0, #16
   15768:	b2c0      	uxtb	r0, r0
   1576a:	a901      	add	r1, sp, #4
   1576c:	47d0      	blx	sl
   1576e:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
   15770:	2e04      	cmp	r6, #4
   15772:	d1ef      	bne.n	15754 <spi_init+0x268>
	module->mode             = config->mode;
   15774:	7823      	ldrb	r3, [r4, #0]
	uint16_t baud = 0;
   15776:	466a      	mov	r2, sp
	module->mode             = config->mode;
   15778:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
   1577a:	7c23      	ldrb	r3, [r4, #16]
   1577c:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
   1577e:	7ca3      	ldrb	r3, [r4, #18]
   15780:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
   15782:	7d23      	ldrb	r3, [r4, #20]
   15784:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
   15786:	2300      	movs	r3, #0
   15788:	8053      	strh	r3, [r2, #2]
	if (config->mode == SPI_MODE_MASTER) {
   1578a:	7823      	ldrb	r3, [r4, #0]
   1578c:	2b01      	cmp	r3, #1
   1578e:	d100      	bne.n	15792 <spi_init+0x2a6>
   15790:	e0a5      	b.n	158de <spi_init+0x3f2>
	ctrla |= config->transfer_mode;
   15792:	68a2      	ldr	r2, [r4, #8]
   15794:	6863      	ldr	r3, [r4, #4]
	ctrlb |= config->character_size;
   15796:	7c21      	ldrb	r1, [r4, #16]
	ctrla |= config->transfer_mode;
   15798:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
   1579a:	68e2      	ldr	r2, [r4, #12]
   1579c:	4313      	orrs	r3, r2
	if (config->run_in_standby || system_is_debugger_present()) {
   1579e:	7c62      	ldrb	r2, [r4, #17]
   157a0:	2a00      	cmp	r2, #0
   157a2:	d11f      	bne.n	157e4 <spi_init+0x2f8>
   157a4:	4a43      	ldr	r2, [pc, #268]	; (158b4 <spi_init+0x3c8>)
   157a6:	7892      	ldrb	r2, [r2, #2]
   157a8:	0792      	lsls	r2, r2, #30
   157aa:	d41b      	bmi.n	157e4 <spi_init+0x2f8>
	if (config->receiver_enable) {
   157ac:	7ca2      	ldrb	r2, [r4, #18]
   157ae:	2a00      	cmp	r2, #0
   157b0:	d002      	beq.n	157b8 <spi_init+0x2cc>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   157b2:	2280      	movs	r2, #128	; 0x80
   157b4:	0292      	lsls	r2, r2, #10
   157b6:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
   157b8:	7ce2      	ldrb	r2, [r4, #19]
   157ba:	2a00      	cmp	r2, #0
   157bc:	d002      	beq.n	157c4 <spi_init+0x2d8>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   157be:	2280      	movs	r2, #128	; 0x80
   157c0:	0092      	lsls	r2, r2, #2
   157c2:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
   157c4:	7d22      	ldrb	r2, [r4, #20]
   157c6:	2a00      	cmp	r2, #0
   157c8:	d002      	beq.n	157d0 <spi_init+0x2e4>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   157ca:	2280      	movs	r2, #128	; 0x80
   157cc:	0192      	lsls	r2, r2, #6
   157ce:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
   157d0:	464a      	mov	r2, r9
   157d2:	6812      	ldr	r2, [r2, #0]
	return STATUS_OK;
   157d4:	2000      	movs	r0, #0
	spi_module->CTRLA.reg |= ctrla;
   157d6:	4313      	orrs	r3, r2
   157d8:	464a      	mov	r2, r9
   157da:	6013      	str	r3, [r2, #0]
	spi_module->CTRLB.reg |= ctrlb;
   157dc:	6853      	ldr	r3, [r2, #4]
   157de:	430b      	orrs	r3, r1
   157e0:	6053      	str	r3, [r2, #4]
   157e2:	e699      	b.n	15518 <spi_init+0x2c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   157e4:	2280      	movs	r2, #128	; 0x80
   157e6:	4313      	orrs	r3, r2
   157e8:	e7e0      	b.n	157ac <spi_init+0x2c0>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   157ea:	4648      	mov	r0, r9
   157ec:	47d8      	blx	fp
   157ee:	e7b6      	b.n	1575e <spi_init+0x272>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
   157f0:	4662      	mov	r2, ip
   157f2:	0852      	lsrs	r2, r2, #1
   157f4:	4694      	mov	ip, r2
   157f6:	4463      	add	r3, ip
   157f8:	3330      	adds	r3, #48	; 0x30
   157fa:	781b      	ldrb	r3, [r3, #0]
   157fc:	b2db      	uxtb	r3, r3
   157fe:	469c      	mov	ip, r3
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
   15800:	091b      	lsrs	r3, r3, #4
	if (pin_index & 1) {
   15802:	4201      	tst	r1, r0
   15804:	d000      	beq.n	15808 <spi_init+0x31c>
   15806:	e6b5      	b.n	15574 <spi_init+0x88>
   15808:	230f      	movs	r3, #15
   1580a:	4662      	mov	r2, ip
   1580c:	4013      	ands	r3, r2
   1580e:	e6b1      	b.n	15574 <spi_init+0x88>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
   15810:	087f      	lsrs	r7, r7, #1
   15812:	19db      	adds	r3, r3, r7
   15814:	3330      	adds	r3, #48	; 0x30
   15816:	7819      	ldrb	r1, [r3, #0]
   15818:	b2c9      	uxtb	r1, r1
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
   1581a:	090b      	lsrs	r3, r1, #4
	if (pin_index & 1) {
   1581c:	4202      	tst	r2, r0
   1581e:	d000      	beq.n	15822 <spi_init+0x336>
   15820:	e6c8      	b.n	155b4 <spi_init+0xc8>
   15822:	230f      	movs	r3, #15
   15824:	400b      	ands	r3, r1
   15826:	e6c5      	b.n	155b4 <spi_init+0xc8>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
   15828:	087f      	lsrs	r7, r7, #1
   1582a:	19db      	adds	r3, r3, r7
   1582c:	3330      	adds	r3, #48	; 0x30
   1582e:	7819      	ldrb	r1, [r3, #0]
   15830:	b2c9      	uxtb	r1, r1
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
   15832:	090b      	lsrs	r3, r1, #4
	if (pin_index & 1) {
   15834:	4202      	tst	r2, r0
   15836:	d000      	beq.n	1583a <spi_init+0x34e>
   15838:	e6dd      	b.n	155f6 <spi_init+0x10a>
   1583a:	230f      	movs	r3, #15
   1583c:	400b      	ands	r3, r1
   1583e:	e6da      	b.n	155f6 <spi_init+0x10a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   15840:	2102      	movs	r1, #2
   15842:	0030      	movs	r0, r6
   15844:	4b14      	ldr	r3, [pc, #80]	; (15898 <spi_init+0x3ac>)
   15846:	4798      	blx	r3
   15848:	4680      	mov	r8, r0
   1584a:	e6b9      	b.n	155c0 <spi_init+0xd4>
   1584c:	2103      	movs	r1, #3
   1584e:	0030      	movs	r0, r6
   15850:	4b11      	ldr	r3, [pc, #68]	; (15898 <spi_init+0x3ac>)
   15852:	4798      	blx	r3
   15854:	4681      	mov	r9, r0
   15856:	e6d4      	b.n	15602 <spi_init+0x116>
   15858:	230f      	movs	r3, #15
   1585a:	401a      	ands	r2, r3
   1585c:	4691      	mov	r9, r2
   1585e:	e6f9      	b.n	15654 <spi_init+0x168>
			spi_module->CTRLB.reg == ctrlb) {
   15860:	6873      	ldr	r3, [r6, #4]
	if (spi_module->CTRLA.reg == ctrla &&
   15862:	4293      	cmp	r3, r2
   15864:	d000      	beq.n	15868 <spi_init+0x37c>
   15866:	e723      	b.n	156b0 <spi_init+0x1c4>
		module->mode           = config->mode;
   15868:	7823      	ldrb	r3, [r4, #0]
		return STATUS_OK;
   1586a:	2000      	movs	r0, #0
		module->mode           = config->mode;
   1586c:	716b      	strb	r3, [r5, #5]
		module->character_size = config->character_size;
   1586e:	7c23      	ldrb	r3, [r4, #16]
   15870:	71ab      	strb	r3, [r5, #6]
   15872:	e651      	b.n	15518 <spi_init+0x2c>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   15874:	220c      	movs	r2, #12
   15876:	6833      	ldr	r3, [r6, #0]
   15878:	4313      	orrs	r3, r2
   1587a:	6033      	str	r3, [r6, #0]
   1587c:	7823      	ldrb	r3, [r4, #0]
   1587e:	e74d      	b.n	1571c <spi_init+0x230>
			MCLK->APBDMASK.reg |= mask;
   15880:	4641      	mov	r1, r8
   15882:	4a07      	ldr	r2, [pc, #28]	; (158a0 <spi_init+0x3b4>)
   15884:	2718      	movs	r7, #24
   15886:	6a13      	ldr	r3, [r2, #32]
   15888:	430b      	orrs	r3, r1
   1588a:	6213      	str	r3, [r2, #32]
   1588c:	e731      	b.n	156f2 <spi_init+0x206>
   1588e:	46c0      	nop			; (mov r8, r8)
   15890:	40002800 	.word	0x40002800
   15894:	0001696d 	.word	0x0001696d
   15898:	00015fb9 	.word	0x00015fb9
   1589c:	00016115 	.word	0x00016115
   158a0:	40000400 	.word	0x40000400
   158a4:	000168f5 	.word	0x000168f5
   158a8:	00016935 	.word	0x00016935
   158ac:	00015f71 	.word	0x00015f71
   158b0:	000169f1 	.word	0x000169f1
   158b4:	41002000 	.word	0x41002000
		enum status_code error_code = _sercom_get_sync_baud_val(
   158b8:	0001      	movs	r1, r0
   158ba:	4b14      	ldr	r3, [pc, #80]	; (1590c <spi_init+0x420>)
   158bc:	aa02      	add	r2, sp, #8
   158be:	69a0      	ldr	r0, [r4, #24]
   158c0:	4798      	blx	r3
   158c2:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
   158c4:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
   158c6:	2b00      	cmp	r3, #0
   158c8:	d000      	beq.n	158cc <spi_init+0x3e0>
   158ca:	e625      	b.n	15518 <spi_init+0x2c>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
   158cc:	466a      	mov	r2, sp
   158ce:	7b33      	ldrb	r3, [r6, #12]
   158d0:	7a12      	ldrb	r2, [r2, #8]
			return STATUS_ERR_DENIED;
   158d2:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
   158d4:	429a      	cmp	r2, r3
   158d6:	d000      	beq.n	158da <spi_init+0x3ee>
   158d8:	e61e      	b.n	15518 <spi_init+0x2c>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
   158da:	370c      	adds	r7, #12
   158dc:	e6c4      	b.n	15668 <spi_init+0x17c>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   158de:	4b0c      	ldr	r3, [pc, #48]	; (15910 <spi_init+0x424>)
   158e0:	6828      	ldr	r0, [r5, #0]
   158e2:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   158e4:	3012      	adds	r0, #18
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   158e6:	4b0b      	ldr	r3, [pc, #44]	; (15914 <spi_init+0x428>)
   158e8:	b2c0      	uxtb	r0, r0
   158ea:	4798      	blx	r3
		enum status_code error_code = _sercom_get_sync_baud_val(
   158ec:	466b      	mov	r3, sp
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   158ee:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
   158f0:	1c9a      	adds	r2, r3, #2
   158f2:	69a0      	ldr	r0, [r4, #24]
   158f4:	4b05      	ldr	r3, [pc, #20]	; (1590c <spi_init+0x420>)
   158f6:	4798      	blx	r3
   158f8:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
   158fa:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
   158fc:	2b00      	cmp	r3, #0
   158fe:	d000      	beq.n	15902 <spi_init+0x416>
   15900:	e60a      	b.n	15518 <spi_init+0x2c>
		spi_module->BAUD.reg = (uint8_t)baud;
   15902:	466b      	mov	r3, sp
   15904:	464a      	mov	r2, r9
   15906:	789b      	ldrb	r3, [r3, #2]
   15908:	7313      	strb	r3, [r2, #12]
   1590a:	e742      	b.n	15792 <spi_init+0x2a6>
   1590c:	00015ce1 	.word	0x00015ce1
   15910:	00016115 	.word	0x00016115
   15914:	0001696d 	.word	0x0001696d

00015918 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   15918:	b5f0      	push	{r4, r5, r6, r7, lr}
   1591a:	46de      	mov	lr, fp
   1591c:	4657      	mov	r7, sl
   1591e:	464e      	mov	r6, r9
   15920:	4645      	mov	r5, r8
   15922:	468b      	mov	fp, r1
   15924:	b5e0      	push	{r5, r6, r7, lr}
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   15926:	2417      	movs	r4, #23
	if (length == 0) {
   15928:	2a00      	cmp	r2, #0
   1592a:	d106      	bne.n	1593a <spi_read_buffer_wait+0x22>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
   1592c:	0020      	movs	r0, r4
   1592e:	bc3c      	pop	{r2, r3, r4, r5}
   15930:	4690      	mov	r8, r2
   15932:	4699      	mov	r9, r3
   15934:	46a2      	mov	sl, r4
   15936:	46ab      	mov	fp, r5
   15938:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
   1593a:	79c4      	ldrb	r4, [r0, #7]
   1593c:	2c00      	cmp	r4, #0
   1593e:	d101      	bne.n	15944 <spi_read_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
   15940:	341c      	adds	r4, #28
   15942:	e7f3      	b.n	1592c <spi_read_buffer_wait+0x14>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   15944:	05db      	lsls	r3, r3, #23
   15946:	0ddb      	lsrs	r3, r3, #23
   15948:	469c      	mov	ip, r3
		while (!spi_is_ready_to_read(module)) {
   1594a:	2304      	movs	r3, #4
   1594c:	4698      	mov	r8, r3
	while (length--) {
   1594e:	4b22      	ldr	r3, [pc, #136]	; (159d8 <spi_read_buffer_wait+0xc0>)
   15950:	2600      	movs	r6, #0
			while (!spi_is_ready_to_write(module)) {
   15952:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(module)) {
   15954:	2404      	movs	r4, #4
	while (length--) {
   15956:	4699      	mov	r9, r3
   15958:	3a01      	subs	r2, #1
   1595a:	b295      	uxth	r5, r2
		if (module->mode == SPI_MODE_MASTER) {
   1595c:	7943      	ldrb	r3, [r0, #5]
   1595e:	6802      	ldr	r2, [r0, #0]
   15960:	2b01      	cmp	r3, #1
   15962:	d01e      	beq.n	159a2 <spi_read_buffer_wait+0x8a>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   15964:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_read(module)) {
   15966:	421c      	tst	r4, r3
   15968:	d0fc      	beq.n	15964 <spi_read_buffer_wait+0x4c>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   1596a:	4641      	mov	r1, r8
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1596c:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
   1596e:	4219      	tst	r1, r3
   15970:	d021      	beq.n	159b6 <spi_read_buffer_wait+0x9e>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   15972:	8b53      	ldrh	r3, [r2, #26]
   15974:	421c      	tst	r4, r3
   15976:	d126      	bne.n	159c6 <spi_read_buffer_wait+0xae>
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   15978:	7983      	ldrb	r3, [r0, #6]
   1597a:	2b01      	cmp	r3, #1
   1597c:	d027      	beq.n	159ce <spi_read_buffer_wait+0xb6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   1597e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   15980:	b2db      	uxtb	r3, r3
   15982:	469a      	mov	sl, r3
		rx_data[rx_pos++] = received_data;
   15984:	4652      	mov	r2, sl
   15986:	4659      	mov	r1, fp
   15988:	558a      	strb	r2, [r1, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1598a:	7982      	ldrb	r2, [r0, #6]
		rx_data[rx_pos++] = received_data;
   1598c:	1c73      	adds	r3, r6, #1
   1598e:	b29b      	uxth	r3, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   15990:	2a01      	cmp	r2, #1
   15992:	d012      	beq.n	159ba <spi_read_buffer_wait+0xa2>
		rx_data[rx_pos++] = received_data;
   15994:	001e      	movs	r6, r3
	while (length--) {
   15996:	3d01      	subs	r5, #1
   15998:	b2ad      	uxth	r5, r5
   1599a:	454d      	cmp	r5, r9
   1599c:	d1de      	bne.n	1595c <spi_read_buffer_wait+0x44>
	return STATUS_OK;
   1599e:	2400      	movs	r4, #0
   159a0:	e7c4      	b.n	1592c <spi_read_buffer_wait+0x14>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   159a2:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_write(module)) {
   159a4:	421f      	tst	r7, r3
   159a6:	d0fc      	beq.n	159a2 <spi_read_buffer_wait+0x8a>
   159a8:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
   159aa:	421f      	tst	r7, r3
   159ac:	d0da      	beq.n	15964 <spi_read_buffer_wait+0x4c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   159ae:	4663      	mov	r3, ip
   159b0:	6293      	str	r3, [r2, #40]	; 0x28
   159b2:	6802      	ldr	r2, [r0, #0]
   159b4:	e7d6      	b.n	15964 <spi_read_buffer_wait+0x4c>
		return STATUS_ERR_IO;
   159b6:	2410      	movs	r4, #16
   159b8:	e7b8      	b.n	1592c <spi_read_buffer_wait+0x14>
			rx_data[rx_pos++] = (received_data >> 8);
   159ba:	4652      	mov	r2, sl
   159bc:	3602      	adds	r6, #2
   159be:	0a12      	lsrs	r2, r2, #8
   159c0:	b2b6      	uxth	r6, r6
   159c2:	54ca      	strb	r2, [r1, r3]
   159c4:	e7e7      	b.n	15996 <spi_read_buffer_wait+0x7e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   159c6:	8354      	strh	r4, [r2, #26]
		*rx_data = (uint8_t)spi_module->DATA.reg;
   159c8:	6a93      	ldr	r3, [r2, #40]	; 0x28
		retval = STATUS_ERR_OVERFLOW;
   159ca:	241e      	movs	r4, #30
   159cc:	e7ae      	b.n	1592c <spi_read_buffer_wait+0x14>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   159ce:	6a93      	ldr	r3, [r2, #40]	; 0x28
   159d0:	05db      	lsls	r3, r3, #23
   159d2:	0ddb      	lsrs	r3, r3, #23
   159d4:	469a      	mov	sl, r3
   159d6:	e7d5      	b.n	15984 <spi_read_buffer_wait+0x6c>
   159d8:	0000ffff 	.word	0x0000ffff

000159dc <spi_transceive_wait>:
 */
enum status_code spi_transceive_wait(
		struct spi_module *const module,
		uint16_t tx_data,
		uint16_t *rx_data)
{
   159dc:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);

	if (!(module->receiver_enabled)) {
   159de:	79c3      	ldrb	r3, [r0, #7]
		return STATUS_ERR_DENIED;
   159e0:	251c      	movs	r5, #28
	if (!(module->receiver_enabled)) {
   159e2:	2b00      	cmp	r3, #0
   159e4:	d101      	bne.n	159ea <spi_transceive_wait+0xe>

	/* Read data */
	retval = spi_read(module, rx_data);

	return retval;
}
   159e6:	0028      	movs	r0, r5
   159e8:	bd30      	pop	{r4, r5, pc}
   159ea:	6803      	ldr	r3, [r0, #0]
	while (!spi_is_ready_to_write(module)) {
   159ec:	3d1b      	subs	r5, #27
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   159ee:	7e1c      	ldrb	r4, [r3, #24]
   159f0:	4225      	tst	r5, r4
   159f2:	d0fc      	beq.n	159ee <spi_transceive_wait+0x12>
   159f4:	7e1c      	ldrb	r4, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
   159f6:	4225      	tst	r5, r4
   159f8:	d114      	bne.n	15a24 <spi_transceive_wait+0x48>
	while (!spi_is_ready_to_read(module)) {
   159fa:	2404      	movs	r4, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   159fc:	7e19      	ldrb	r1, [r3, #24]
   159fe:	420c      	tst	r4, r1
   15a00:	d0fc      	beq.n	159fc <spi_transceive_wait+0x20>
   15a02:	7e19      	ldrb	r1, [r3, #24]
		return STATUS_ERR_IO;
   15a04:	2510      	movs	r5, #16
	if (!spi_is_ready_to_read(module)) {
   15a06:	420c      	tst	r4, r1
   15a08:	d0ed      	beq.n	159e6 <spi_transceive_wait+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   15a0a:	8b59      	ldrh	r1, [r3, #26]
	enum status_code retval = STATUS_OK;
   15a0c:	2500      	movs	r5, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   15a0e:	0749      	lsls	r1, r1, #29
   15a10:	d501      	bpl.n	15a16 <spi_transceive_wait+0x3a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   15a12:	835c      	strh	r4, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
   15a14:	351e      	adds	r5, #30
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   15a16:	7981      	ldrb	r1, [r0, #6]
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   15a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   15a1a:	2901      	cmp	r1, #1
   15a1c:	d007      	beq.n	15a2e <spi_transceive_wait+0x52>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   15a1e:	b2db      	uxtb	r3, r3
   15a20:	8013      	strh	r3, [r2, #0]
   15a22:	e7e0      	b.n	159e6 <spi_transceive_wait+0xa>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   15a24:	05c9      	lsls	r1, r1, #23
   15a26:	0dc9      	lsrs	r1, r1, #23
   15a28:	6299      	str	r1, [r3, #40]	; 0x28
   15a2a:	6803      	ldr	r3, [r0, #0]
   15a2c:	e7e5      	b.n	159fa <spi_transceive_wait+0x1e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   15a2e:	05db      	lsls	r3, r3, #23
   15a30:	0ddb      	lsrs	r3, r3, #23
   15a32:	8013      	strh	r3, [r2, #0]
   15a34:	e7d7      	b.n	159e6 <spi_transceive_wait+0xa>
   15a36:	46c0      	nop			; (mov r8, r8)

00015a38 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   15a38:	b570      	push	{r4, r5, r6, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   15a3a:	7943      	ldrb	r3, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
   15a3c:	2415      	movs	r4, #21
	if (module->mode != SPI_MODE_MASTER) {
   15a3e:	2b01      	cmp	r3, #1
   15a40:	d001      	beq.n	15a46 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
   15a42:	0020      	movs	r0, r4
   15a44:	bd70      	pop	{r4, r5, r6, pc}
	if(!(module->master_slave_select_enable))
   15a46:	7a04      	ldrb	r4, [r0, #8]
   15a48:	2c00      	cmp	r4, #0
   15a4a:	d13a      	bne.n	15ac2 <spi_select_slave+0x8a>
		if (select) {
   15a4c:	2a00      	cmp	r2, #0
   15a4e:	d03a      	beq.n	15ac6 <spi_select_slave+0x8e>
			if (slave->address_enabled) {
   15a50:	784a      	ldrb	r2, [r1, #1]
   15a52:	2a00      	cmp	r2, #0
   15a54:	d046      	beq.n	15ae4 <spi_select_slave+0xac>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   15a56:	6802      	ldr	r2, [r0, #0]
   15a58:	7e12      	ldrb	r2, [r2, #24]
				if (!spi_is_ready_to_write(module)) {
   15a5a:	401a      	ands	r2, r3
   15a5c:	d10d      	bne.n	15a7a <spi_select_slave+0x42>
					port_pin_set_output_level(slave->ss_pin, true);
   15a5e:	7808      	ldrb	r0, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);
   15a60:	0941      	lsrs	r1, r0, #5
	if (port_index < PORT_INST_NUM) {
   15a62:	09c4      	lsrs	r4, r0, #7
   15a64:	d13c      	bne.n	15ae0 <spi_select_slave+0xa8>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   15a66:	321f      	adds	r2, #31
   15a68:	4002      	ands	r2, r0
   15a6a:	4093      	lsls	r3, r2
		port_base->OUTSET.reg = pin_mask;
   15a6c:	01ca      	lsls	r2, r1, #7
   15a6e:	4926      	ldr	r1, [pc, #152]	; (15b08 <spi_select_slave+0xd0>)
					return STATUS_BUSY;
   15a70:	3405      	adds	r4, #5
   15a72:	468c      	mov	ip, r1
   15a74:	4462      	add	r2, ip
   15a76:	6193      	str	r3, [r2, #24]
   15a78:	e7e3      	b.n	15a42 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
   15a7a:	780d      	ldrb	r5, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);
   15a7c:	096a      	lsrs	r2, r5, #5
	if (port_index < PORT_INST_NUM) {
   15a7e:	09ee      	lsrs	r6, r5, #7
   15a80:	d13f      	bne.n	15b02 <spi_select_slave+0xca>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   15a82:	241f      	movs	r4, #31
   15a84:	402c      	ands	r4, r5
   15a86:	001d      	movs	r5, r3
   15a88:	40a5      	lsls	r5, r4
   15a8a:	002c      	movs	r4, r5
	} else {
		port_base->OUTCLR.reg = pin_mask;
   15a8c:	4d1e      	ldr	r5, [pc, #120]	; (15b08 <spi_select_slave+0xd0>)
   15a8e:	01d2      	lsls	r2, r2, #7
   15a90:	46ac      	mov	ip, r5
   15a92:	4462      	add	r2, ip
   15a94:	6154      	str	r4, [r2, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
   15a96:	6802      	ldr	r2, [r0, #0]
				spi_write(module, slave->address);
   15a98:	788c      	ldrb	r4, [r1, #2]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   15a9a:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
   15a9c:	420b      	tst	r3, r1
   15a9e:	d000      	beq.n	15aa2 <spi_select_slave+0x6a>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   15aa0:	6294      	str	r4, [r2, #40]	; 0x28
				if (!(module->receiver_enabled)) {
   15aa2:	79c3      	ldrb	r3, [r0, #7]
   15aa4:	2b00      	cmp	r3, #0
   15aa6:	d10c      	bne.n	15ac2 <spi_select_slave+0x8a>
					while (!spi_is_ready_to_read(module)) {
   15aa8:	2104      	movs	r1, #4
   15aaa:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   15aac:	7e13      	ldrb	r3, [r2, #24]
   15aae:	4219      	tst	r1, r3
   15ab0:	d0fc      	beq.n	15aac <spi_select_slave+0x74>
   15ab2:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
   15ab4:	4219      	tst	r1, r3
   15ab6:	d004      	beq.n	15ac2 <spi_select_slave+0x8a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   15ab8:	8b53      	ldrh	r3, [r2, #26]
   15aba:	075b      	lsls	r3, r3, #29
   15abc:	d500      	bpl.n	15ac0 <spi_select_slave+0x88>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   15abe:	8351      	strh	r1, [r2, #26]
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   15ac0:	6a93      	ldr	r3, [r2, #40]	; 0x28
	return STATUS_OK;
   15ac2:	2400      	movs	r4, #0
   15ac4:	e7bd      	b.n	15a42 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
   15ac6:	7808      	ldrb	r0, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);
   15ac8:	0941      	lsrs	r1, r0, #5
	if (port_index < PORT_INST_NUM) {
   15aca:	09c4      	lsrs	r4, r0, #7
   15acc:	d108      	bne.n	15ae0 <spi_select_slave+0xa8>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   15ace:	221f      	movs	r2, #31
   15ad0:	4002      	ands	r2, r0
   15ad2:	4093      	lsls	r3, r2
		port_base->OUTSET.reg = pin_mask;
   15ad4:	01ca      	lsls	r2, r1, #7
   15ad6:	490c      	ldr	r1, [pc, #48]	; (15b08 <spi_select_slave+0xd0>)
   15ad8:	468c      	mov	ip, r1
   15ada:	4462      	add	r2, ip
   15adc:	6193      	str	r3, [r2, #24]
   15ade:	e7b0      	b.n	15a42 <spi_select_slave+0xa>
   15ae0:	6192      	str	r2, [r2, #24]
   15ae2:	deff      	udf	#255	; 0xff
				port_pin_set_output_level(slave->ss_pin, false);
   15ae4:	7808      	ldrb	r0, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);
   15ae6:	0941      	lsrs	r1, r0, #5
	if (port_index < PORT_INST_NUM) {
   15ae8:	09c4      	lsrs	r4, r0, #7
   15aea:	d108      	bne.n	15afe <spi_select_slave+0xc6>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   15aec:	221f      	movs	r2, #31
   15aee:	4002      	ands	r2, r0
   15af0:	4093      	lsls	r3, r2
		port_base->OUTCLR.reg = pin_mask;
   15af2:	01ca      	lsls	r2, r1, #7
   15af4:	4904      	ldr	r1, [pc, #16]	; (15b08 <spi_select_slave+0xd0>)
   15af6:	468c      	mov	ip, r1
   15af8:	4462      	add	r2, ip
   15afa:	6153      	str	r3, [r2, #20]
   15afc:	e7a1      	b.n	15a42 <spi_select_slave+0xa>
   15afe:	6152      	str	r2, [r2, #20]
   15b00:	deff      	udf	#255	; 0xff
   15b02:	6164      	str	r4, [r4, #20]
   15b04:	deff      	udf	#255	; 0xff
   15b06:	46c0      	nop			; (mov r8, r8)
   15b08:	40002800 	.word	0x40002800

00015b0c <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   15b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   15b0e:	46de      	mov	lr, fp
   15b10:	4657      	mov	r7, sl
   15b12:	464e      	mov	r6, r9
   15b14:	4645      	mov	r5, r8
   15b16:	b5e0      	push	{r5, r6, r7, lr}
   15b18:	468b      	mov	fp, r1
   15b1a:	b083      	sub	sp, #12
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   15b1c:	2317      	movs	r3, #23
	if (length == 0) {
   15b1e:	2a00      	cmp	r2, #0
   15b20:	d107      	bne.n	15b32 <spi_write_buffer_wait+0x26>
			}
		}
	}
#  endif
	return STATUS_OK;
}
   15b22:	0018      	movs	r0, r3
   15b24:	b003      	add	sp, #12
   15b26:	bc3c      	pop	{r2, r3, r4, r5}
   15b28:	4690      	mov	r8, r2
   15b2a:	4699      	mov	r9, r3
   15b2c:	46a2      	mov	sl, r4
   15b2e:	46ab      	mov	fp, r5
   15b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
			while (!spi_is_ready_to_read(module)) {
   15b32:	2304      	movs	r3, #4
   15b34:	4698      	mov	r8, r3
	while (length--) {
   15b36:	4b22      	ldr	r3, [pc, #136]	; (15bc0 <spi_write_buffer_wait+0xb4>)
   15b38:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
   15b3a:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
   15b3c:	2504      	movs	r5, #4
	while (length--) {
   15b3e:	469c      	mov	ip, r3
   15b40:	3a01      	subs	r2, #1
   15b42:	b296      	uxth	r6, r2
   15b44:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   15b46:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
   15b48:	421c      	tst	r4, r3
   15b4a:	d0fc      	beq.n	15b46 <spi_write_buffer_wait+0x3a>
		uint16_t data_to_send = tx_data[tx_pos++];
   15b4c:	1c7b      	adds	r3, r7, #1
   15b4e:	b29b      	uxth	r3, r3
   15b50:	469a      	mov	sl, r3
   15b52:	465b      	mov	r3, fp
   15b54:	5ddb      	ldrb	r3, [r3, r7]
   15b56:	9301      	str	r3, [sp, #4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   15b58:	7981      	ldrb	r1, [r0, #6]
   15b5a:	2901      	cmp	r1, #1
   15b5c:	d027      	beq.n	15bae <spi_write_buffer_wait+0xa2>
		uint16_t data_to_send = tx_data[tx_pos++];
   15b5e:	466b      	mov	r3, sp
   15b60:	4657      	mov	r7, sl
   15b62:	889b      	ldrh	r3, [r3, #4]
   15b64:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
   15b66:	420c      	tst	r4, r1
   15b68:	d002      	beq.n	15b70 <spi_write_buffer_wait+0x64>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   15b6a:	05db      	lsls	r3, r3, #23
   15b6c:	0ddb      	lsrs	r3, r3, #23
   15b6e:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
   15b70:	79c3      	ldrb	r3, [r0, #7]
   15b72:	2b00      	cmp	r3, #0
   15b74:	d00c      	beq.n	15b90 <spi_write_buffer_wait+0x84>
   15b76:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   15b78:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
   15b7a:	421d      	tst	r5, r3
   15b7c:	d0fc      	beq.n	15b78 <spi_write_buffer_wait+0x6c>
	if (!spi_is_ready_to_read(module)) {
   15b7e:	4641      	mov	r1, r8
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   15b80:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
   15b82:	4219      	tst	r1, r3
   15b84:	d004      	beq.n	15b90 <spi_write_buffer_wait+0x84>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   15b86:	8b53      	ldrh	r3, [r2, #26]
   15b88:	421d      	tst	r5, r3
   15b8a:	d000      	beq.n	15b8e <spi_write_buffer_wait+0x82>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   15b8c:	8355      	strh	r5, [r2, #26]
		*rx_data = (uint8_t)spi_module->DATA.reg;
   15b8e:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
   15b90:	3e01      	subs	r6, #1
   15b92:	b2b6      	uxth	r6, r6
   15b94:	4566      	cmp	r6, ip
   15b96:	d1d5      	bne.n	15b44 <spi_write_buffer_wait+0x38>
	if (module->mode == SPI_MODE_MASTER) {
   15b98:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
   15b9a:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
   15b9c:	2a01      	cmp	r2, #1
   15b9e:	d1c0      	bne.n	15b22 <spi_write_buffer_wait+0x16>
   15ba0:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
   15ba2:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   15ba4:	7e0b      	ldrb	r3, [r1, #24]
   15ba6:	421a      	tst	r2, r3
   15ba8:	d0fc      	beq.n	15ba4 <spi_write_buffer_wait+0x98>
	return STATUS_OK;
   15baa:	2300      	movs	r3, #0
   15bac:	e7b9      	b.n	15b22 <spi_write_buffer_wait+0x16>
			data_to_send |= (tx_data[tx_pos++] << 8);
   15bae:	465b      	mov	r3, fp
   15bb0:	4651      	mov	r1, sl
   15bb2:	5c59      	ldrb	r1, [r3, r1]
   15bb4:	9b01      	ldr	r3, [sp, #4]
   15bb6:	3702      	adds	r7, #2
   15bb8:	0209      	lsls	r1, r1, #8
   15bba:	b2bf      	uxth	r7, r7
   15bbc:	430b      	orrs	r3, r1
   15bbe:	e7d1      	b.n	15b64 <spi_write_buffer_wait+0x58>
   15bc0:	0000ffff 	.word	0x0000ffff

00015bc4 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
   15bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   15bc6:	464e      	mov	r6, r9
   15bc8:	4645      	mov	r5, r8
   15bca:	46de      	mov	lr, fp
   15bcc:	4657      	mov	r7, sl
   15bce:	b5e0      	push	{r5, r6, r7, lr}
   15bd0:	4691      	mov	r9, r2
   15bd2:	b083      	sub	sp, #12
   15bd4:	4688      	mov	r8, r1
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   15bd6:	2217      	movs	r2, #23
	if (length == 0) {
   15bd8:	2b00      	cmp	r3, #0
   15bda:	d107      	bne.n	15bec <spi_transceive_buffer_wait+0x28>
			}
		}
	}
#  endif
	return STATUS_OK;
}
   15bdc:	0010      	movs	r0, r2
   15bde:	b003      	add	sp, #12
   15be0:	bc3c      	pop	{r2, r3, r4, r5}
   15be2:	4690      	mov	r8, r2
   15be4:	4699      	mov	r9, r3
   15be6:	46a2      	mov	sl, r4
   15be8:	46ab      	mov	fp, r5
   15bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
   15bec:	79c2      	ldrb	r2, [r0, #7]
   15bee:	2a00      	cmp	r2, #0
   15bf0:	d101      	bne.n	15bf6 <spi_transceive_buffer_wait+0x32>
		return STATUS_ERR_DENIED;
   15bf2:	321c      	adds	r2, #28
   15bf4:	e7f2      	b.n	15bdc <spi_transceive_buffer_wait+0x18>
	while (length--) {
   15bf6:	3b01      	subs	r3, #1
   15bf8:	b29e      	uxth	r6, r3
   15bfa:	2300      	movs	r3, #0
   15bfc:	469c      	mov	ip, r3
		while (!spi_is_ready_to_read(module)) {
   15bfe:	3304      	adds	r3, #4
	while (length--) {
   15c00:	2100      	movs	r1, #0
		while (!spi_is_ready_to_write(module)) {
   15c02:	2401      	movs	r4, #1
		while (!spi_is_ready_to_read(module)) {
   15c04:	2504      	movs	r5, #4
   15c06:	469b      	mov	fp, r3
   15c08:	4667      	mov	r7, ip
   15c0a:	9600      	str	r6, [sp, #0]
   15c0c:	6803      	ldr	r3, [r0, #0]
   15c0e:	9e00      	ldr	r6, [sp, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   15c10:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(module)) {
   15c12:	4214      	tst	r4, r2
   15c14:	d0fc      	beq.n	15c10 <spi_transceive_buffer_wait+0x4c>
		uint16_t data_to_send = tx_data[tx_pos++];
   15c16:	1c4a      	adds	r2, r1, #1
   15c18:	b292      	uxth	r2, r2
   15c1a:	4694      	mov	ip, r2
   15c1c:	4642      	mov	r2, r8
   15c1e:	5c52      	ldrb	r2, [r2, r1]
   15c20:	9600      	str	r6, [sp, #0]
   15c22:	9201      	str	r2, [sp, #4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   15c24:	7986      	ldrb	r6, [r0, #6]
   15c26:	2e01      	cmp	r6, #1
   15c28:	d039      	beq.n	15c9e <spi_transceive_buffer_wait+0xda>
		uint16_t data_to_send = tx_data[tx_pos++];
   15c2a:	4661      	mov	r1, ip
   15c2c:	b292      	uxth	r2, r2
   15c2e:	7e1e      	ldrb	r6, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
   15c30:	4234      	tst	r4, r6
   15c32:	d032      	beq.n	15c9a <spi_transceive_buffer_wait+0xd6>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   15c34:	05d2      	lsls	r2, r2, #23
   15c36:	0dd2      	lsrs	r2, r2, #23
   15c38:	629a      	str	r2, [r3, #40]	; 0x28
   15c3a:	6803      	ldr	r3, [r0, #0]
   15c3c:	9e00      	ldr	r6, [sp, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   15c3e:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(module)) {
   15c40:	4215      	tst	r5, r2
   15c42:	d0fc      	beq.n	15c3e <spi_transceive_buffer_wait+0x7a>
   15c44:	9600      	str	r6, [sp, #0]
	if (!spi_is_ready_to_read(module)) {
   15c46:	465e      	mov	r6, fp
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   15c48:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
   15c4a:	4216      	tst	r6, r2
   15c4c:	d023      	beq.n	15c96 <spi_transceive_buffer_wait+0xd2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   15c4e:	8b5a      	ldrh	r2, [r3, #26]
   15c50:	4215      	tst	r5, r2
   15c52:	d135      	bne.n	15cc0 <spi_transceive_buffer_wait+0xfc>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   15c54:	7982      	ldrb	r2, [r0, #6]
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   15c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   15c58:	2a01      	cmp	r2, #1
   15c5a:	d038      	beq.n	15cce <spi_transceive_buffer_wait+0x10a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   15c5c:	b2db      	uxtb	r3, r3
   15c5e:	469c      	mov	ip, r3
		rx_data[rx_pos++] = received_data;
   15c60:	464a      	mov	r2, r9
   15c62:	4666      	mov	r6, ip
   15c64:	55d6      	strb	r6, [r2, r7]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   15c66:	7982      	ldrb	r2, [r0, #6]
		rx_data[rx_pos++] = received_data;
   15c68:	1c7b      	adds	r3, r7, #1
   15c6a:	b29b      	uxth	r3, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   15c6c:	2a01      	cmp	r2, #1
   15c6e:	d020      	beq.n	15cb2 <spi_transceive_buffer_wait+0xee>
		rx_data[rx_pos++] = received_data;
   15c70:	001f      	movs	r7, r3
	while (length--) {
   15c72:	9e00      	ldr	r6, [sp, #0]
   15c74:	4b19      	ldr	r3, [pc, #100]	; (15cdc <spi_transceive_buffer_wait+0x118>)
   15c76:	3e01      	subs	r6, #1
   15c78:	b2b2      	uxth	r2, r6
   15c7a:	9200      	str	r2, [sp, #0]
   15c7c:	429a      	cmp	r2, r3
   15c7e:	d1c5      	bne.n	15c0c <spi_transceive_buffer_wait+0x48>
	if (module->mode == SPI_MODE_MASTER) {
   15c80:	7943      	ldrb	r3, [r0, #5]
	return STATUS_OK;
   15c82:	2200      	movs	r2, #0
	if (module->mode == SPI_MODE_MASTER) {
   15c84:	2b01      	cmp	r3, #1
   15c86:	d1a9      	bne.n	15bdc <spi_transceive_buffer_wait+0x18>
   15c88:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
   15c8a:	3202      	adds	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   15c8c:	7e0b      	ldrb	r3, [r1, #24]
   15c8e:	421a      	tst	r2, r3
   15c90:	d0fc      	beq.n	15c8c <spi_transceive_buffer_wait+0xc8>
	return STATUS_OK;
   15c92:	2200      	movs	r2, #0
   15c94:	e7a2      	b.n	15bdc <spi_transceive_buffer_wait+0x18>
		return STATUS_ERR_IO;
   15c96:	2210      	movs	r2, #16
   15c98:	e7a0      	b.n	15bdc <spi_transceive_buffer_wait+0x18>
   15c9a:	9e00      	ldr	r6, [sp, #0]
   15c9c:	e7cf      	b.n	15c3e <spi_transceive_buffer_wait+0x7a>
			data_to_send |= (tx_data[tx_pos++] << 8);
   15c9e:	4646      	mov	r6, r8
   15ca0:	4662      	mov	r2, ip
   15ca2:	5cb2      	ldrb	r2, [r6, r2]
   15ca4:	9e01      	ldr	r6, [sp, #4]
   15ca6:	0212      	lsls	r2, r2, #8
   15ca8:	3102      	adds	r1, #2
   15caa:	4316      	orrs	r6, r2
   15cac:	b289      	uxth	r1, r1
   15cae:	0032      	movs	r2, r6
   15cb0:	e7bd      	b.n	15c2e <spi_transceive_buffer_wait+0x6a>
			rx_data[rx_pos++] = (received_data >> 8);
   15cb2:	4662      	mov	r2, ip
   15cb4:	464e      	mov	r6, r9
   15cb6:	3702      	adds	r7, #2
   15cb8:	0a12      	lsrs	r2, r2, #8
   15cba:	b2bf      	uxth	r7, r7
   15cbc:	54f2      	strb	r2, [r6, r3]
   15cbe:	e7d8      	b.n	15c72 <spi_transceive_buffer_wait+0xae>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   15cc0:	835d      	strh	r5, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   15cc2:	7982      	ldrb	r2, [r0, #6]
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   15cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   15cc6:	2a01      	cmp	r2, #1
   15cc8:	d005      	beq.n	15cd6 <spi_transceive_buffer_wait+0x112>
		retval = STATUS_ERR_OVERFLOW;
   15cca:	221e      	movs	r2, #30
   15ccc:	e786      	b.n	15bdc <spi_transceive_buffer_wait+0x18>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   15cce:	05db      	lsls	r3, r3, #23
   15cd0:	0ddb      	lsrs	r3, r3, #23
   15cd2:	469c      	mov	ip, r3
   15cd4:	e7c4      	b.n	15c60 <spi_transceive_buffer_wait+0x9c>
		retval = STATUS_ERR_OVERFLOW;
   15cd6:	321d      	adds	r2, #29
   15cd8:	e780      	b.n	15bdc <spi_transceive_buffer_wait+0x18>
   15cda:	46c0      	nop			; (mov r8, r8)
   15cdc:	0000ffff 	.word	0x0000ffff

00015ce0 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   15ce0:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   15ce2:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   15ce4:	2340      	movs	r3, #64	; 0x40
   15ce6:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
   15ce8:	4281      	cmp	r1, r0
   15cea:	d202      	bcs.n	15cf2 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
   15cec:	0018      	movs	r0, r3
   15cee:	bd10      	pop	{r4, pc}
		baud_calculated++;
   15cf0:	001c      	movs	r4, r3
   15cf2:	1c63      	adds	r3, r4, #1
		clock_value = clock_value - baudrate;
   15cf4:	1a09      	subs	r1, r1, r0
		baud_calculated++;
   15cf6:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
   15cf8:	4288      	cmp	r0, r1
   15cfa:	d9f9      	bls.n	15cf0 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   15cfc:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
   15cfe:	2cff      	cmp	r4, #255	; 0xff
   15d00:	d8f4      	bhi.n	15cec <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
   15d02:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
   15d04:	2300      	movs	r3, #0
   15d06:	e7f1      	b.n	15cec <_sercom_get_sync_baud_val+0xc>

00015d08 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   15d08:	b5f0      	push	{r4, r5, r6, r7, lr}
   15d0a:	46de      	mov	lr, fp
   15d0c:	4645      	mov	r5, r8
   15d0e:	4657      	mov	r7, sl
   15d10:	464e      	mov	r6, r9
   15d12:	b5e0      	push	{r5, r6, r7, lr}
   15d14:	b087      	sub	sp, #28
   15d16:	4693      	mov	fp, r2
   15d18:	aa10      	add	r2, sp, #64	; 0x40
   15d1a:	7814      	ldrb	r4, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   15d1c:	0002      	movs	r2, r0
{
   15d1e:	4688      	mov	r8, r1
	if ((baudrate * sample_num) > peripheral_clock) {
   15d20:	4362      	muls	r2, r4
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   15d22:	2140      	movs	r1, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
   15d24:	4542      	cmp	r2, r8
   15d26:	d907      	bls.n	15d38 <_sercom_get_async_baud_val+0x30>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
   15d28:	0008      	movs	r0, r1
   15d2a:	b007      	add	sp, #28
   15d2c:	bc3c      	pop	{r2, r3, r4, r5}
   15d2e:	4690      	mov	r8, r2
   15d30:	4699      	mov	r9, r3
   15d32:	46a2      	mov	sl, r4
   15d34:	46ab      	mov	fp, r5
   15d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   15d38:	2b00      	cmp	r3, #0
   15d3a:	d15f      	bne.n	15dfc <_sercom_get_async_baud_val+0xf4>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   15d3c:	0002      	movs	r2, r0
   15d3e:	2100      	movs	r1, #0
   15d40:	0020      	movs	r0, r4
   15d42:	4c8a      	ldr	r4, [pc, #552]	; (15f6c <_sercom_get_async_baud_val+0x264>)
   15d44:	47a0      	blx	r4
		ratio = long_division(temp1, peripheral_clock);
   15d46:	4643      	mov	r3, r8
   15d48:	9300      	str	r3, [sp, #0]
   15d4a:	2300      	movs	r3, #0
		bit_shift = (uint64_t)1 << i;
   15d4c:	2120      	movs	r1, #32
	uint64_t q = 0, r = 0, bit_shift;
   15d4e:	4698      	mov	r8, r3
		bit_shift = (uint64_t)1 << i;
   15d50:	468a      	mov	sl, r1
   15d52:	391f      	subs	r1, #31
	uint64_t q = 0, r = 0, bit_shift;
   15d54:	2700      	movs	r7, #0
		bit_shift = (uint64_t)1 << i;
   15d56:	468c      	mov	ip, r1
   15d58:	4641      	mov	r1, r8
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   15d5a:	4681      	mov	r9, r0
		ratio = long_division(temp1, peripheral_clock);
   15d5c:	9301      	str	r3, [sp, #4]
		bit_shift = (uint64_t)1 << i;
   15d5e:	46d8      	mov	r8, fp
	uint64_t q = 0, r = 0, bit_shift;
   15d60:	2200      	movs	r2, #0
   15d62:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
   15d64:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
   15d66:	9102      	str	r1, [sp, #8]
   15d68:	46bb      	mov	fp, r7
   15d6a:	e00f      	b.n	15d8c <_sercom_get_async_baud_val+0x84>
   15d6c:	42bd      	cmp	r5, r7
   15d6e:	d052      	beq.n	15e16 <_sercom_get_async_baud_val+0x10e>
   15d70:	46a3      	mov	fp, r4
   15d72:	9c00      	ldr	r4, [sp, #0]
   15d74:	9d01      	ldr	r5, [sp, #4]
   15d76:	9102      	str	r1, [sp, #8]
   15d78:	42bd      	cmp	r5, r7
   15d7a:	d834      	bhi.n	15de6 <_sercom_get_async_baud_val+0xde>
   15d7c:	42bd      	cmp	r5, r7
   15d7e:	d050      	beq.n	15e22 <_sercom_get_async_baud_val+0x11a>
   15d80:	0011      	movs	r1, r2
   15d82:	001c      	movs	r4, r3
   15d84:	000a      	movs	r2, r1
   15d86:	0023      	movs	r3, r4
	for (i = 63; i >= 0; i--) {
   15d88:	3801      	subs	r0, #1
   15d8a:	d332      	bcc.n	15df2 <_sercom_get_async_baud_val+0xea>
		bit_shift = (uint64_t)1 << i;
   15d8c:	2120      	movs	r1, #32
   15d8e:	4249      	negs	r1, r1
   15d90:	1841      	adds	r1, r0, r1
   15d92:	d43a      	bmi.n	15e0a <_sercom_get_async_baud_val+0x102>
   15d94:	4664      	mov	r4, ip
   15d96:	408c      	lsls	r4, r1
   15d98:	0021      	movs	r1, r4
   15d9a:	4664      	mov	r4, ip
   15d9c:	4084      	lsls	r4, r0
		r = r << 1;
   15d9e:	1892      	adds	r2, r2, r2
   15da0:	415b      	adcs	r3, r3
		bit_shift = (uint64_t)1 << i;
   15da2:	9404      	str	r4, [sp, #16]
			r |= 0x01;
   15da4:	4666      	mov	r6, ip
   15da6:	464c      	mov	r4, r9
   15da8:	4316      	orrs	r6, r2
   15daa:	420c      	tst	r4, r1
   15dac:	d000      	beq.n	15db0 <_sercom_get_async_baud_val+0xa8>
   15dae:	0032      	movs	r2, r6
			r = r - d;
   15db0:	0014      	movs	r4, r2
   15db2:	001d      	movs	r5, r3
   15db4:	0016      	movs	r6, r2
   15db6:	001f      	movs	r7, r3
   15db8:	9a00      	ldr	r2, [sp, #0]
   15dba:	9b01      	ldr	r3, [sp, #4]
   15dbc:	1aa4      	subs	r4, r4, r2
   15dbe:	419d      	sbcs	r5, r3
   15dc0:	0022      	movs	r2, r4
			q |= bit_shift;
   15dc2:	465c      	mov	r4, fp
			r = r - d;
   15dc4:	002b      	movs	r3, r5
			q |= bit_shift;
   15dc6:	9d04      	ldr	r5, [sp, #16]
   15dc8:	4325      	orrs	r5, r4
   15dca:	002c      	movs	r4, r5
   15dcc:	9d02      	ldr	r5, [sp, #8]
   15dce:	4329      	orrs	r1, r5
   15dd0:	9d01      	ldr	r5, [sp, #4]
   15dd2:	42bd      	cmp	r5, r7
   15dd4:	d9ca      	bls.n	15d6c <_sercom_get_async_baud_val+0x64>
   15dd6:	465c      	mov	r4, fp
   15dd8:	9902      	ldr	r1, [sp, #8]
   15dda:	46a3      	mov	fp, r4
   15ddc:	9c00      	ldr	r4, [sp, #0]
   15dde:	9d01      	ldr	r5, [sp, #4]
   15de0:	9102      	str	r1, [sp, #8]
   15de2:	42bd      	cmp	r5, r7
   15de4:	d9ca      	bls.n	15d7c <_sercom_get_async_baud_val+0x74>
   15de6:	0031      	movs	r1, r6
   15de8:	003c      	movs	r4, r7
   15dea:	000a      	movs	r2, r1
   15dec:	0023      	movs	r3, r4
	for (i = 63; i >= 0; i--) {
   15dee:	3801      	subs	r0, #1
   15df0:	d2cc      	bcs.n	15d8c <_sercom_get_async_baud_val+0x84>
   15df2:	465f      	mov	r7, fp
		scale = ((uint64_t)1 << SHIFT) - ratio;
   15df4:	427f      	negs	r7, r7
   15df6:	46c3      	mov	fp, r8
   15df8:	0c3f      	lsrs	r7, r7, #16
   15dfa:	e002      	b.n	15e02 <_sercom_get_async_baud_val+0xfa>
   15dfc:	2700      	movs	r7, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   15dfe:	2b01      	cmp	r3, #1
   15e00:	d015      	beq.n	15e2e <_sercom_get_async_baud_val+0x126>
	*baudval = baud_calculated;
   15e02:	465b      	mov	r3, fp
	return STATUS_OK;
   15e04:	2100      	movs	r1, #0
	*baudval = baud_calculated;
   15e06:	801f      	strh	r7, [r3, #0]
	return STATUS_OK;
   15e08:	e78e      	b.n	15d28 <_sercom_get_async_baud_val+0x20>
		bit_shift = (uint64_t)1 << i;
   15e0a:	4651      	mov	r1, sl
   15e0c:	4664      	mov	r4, ip
   15e0e:	1a09      	subs	r1, r1, r0
   15e10:	40cc      	lsrs	r4, r1
   15e12:	0021      	movs	r1, r4
   15e14:	e7c1      	b.n	15d9a <_sercom_get_async_baud_val+0x92>
   15e16:	9d00      	ldr	r5, [sp, #0]
   15e18:	42b5      	cmp	r5, r6
   15e1a:	d9a9      	bls.n	15d70 <_sercom_get_async_baud_val+0x68>
   15e1c:	465c      	mov	r4, fp
   15e1e:	9902      	ldr	r1, [sp, #8]
   15e20:	e7db      	b.n	15dda <_sercom_get_async_baud_val+0xd2>
   15e22:	9900      	ldr	r1, [sp, #0]
   15e24:	42b1      	cmp	r1, r6
   15e26:	d9ab      	bls.n	15d80 <_sercom_get_async_baud_val+0x78>
   15e28:	0031      	movs	r1, r6
   15e2a:	003c      	movs	r4, r7
   15e2c:	e7dd      	b.n	15dea <_sercom_get_async_baud_val+0xe2>
		temp1 = ((uint64_t)baudrate * sample_num);
   15e2e:	0022      	movs	r2, r4
   15e30:	2300      	movs	r3, #0
   15e32:	4c4e      	ldr	r4, [pc, #312]	; (15f6c <_sercom_get_async_baud_val+0x264>)
   15e34:	2100      	movs	r1, #0
   15e36:	47a0      	blx	r4
		bit_shift = (uint64_t)1 << i;
   15e38:	2401      	movs	r4, #1
		temp1 = ((uint64_t)baudrate * sample_num);
   15e3a:	000b      	movs	r3, r1
	uint64_t q = 0, r = 0, bit_shift;
   15e3c:	2100      	movs	r1, #0
		temp1 = ((uint64_t)baudrate * sample_num);
   15e3e:	0002      	movs	r2, r0
	uint64_t q = 0, r = 0, bit_shift;
   15e40:	468c      	mov	ip, r1
   15e42:	2000      	movs	r0, #0
   15e44:	2100      	movs	r1, #0
	for (i = 63; i >= 0; i--) {
   15e46:	263f      	movs	r6, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
   15e48:	46a1      	mov	r9, r4
   15e4a:	e018      	b.n	15e7e <_sercom_get_async_baud_val+0x176>
   15e4c:	0004      	movs	r4, r0
   15e4e:	000d      	movs	r5, r1
   15e50:	0020      	movs	r0, r4
   15e52:	0029      	movs	r1, r5
			r = r - d;
   15e54:	1aa4      	subs	r4, r4, r2
   15e56:	419d      	sbcs	r5, r3
   15e58:	9400      	str	r4, [sp, #0]
   15e5a:	9501      	str	r5, [sp, #4]
			q |= bit_shift;
   15e5c:	4664      	mov	r4, ip
   15e5e:	4327      	orrs	r7, r4
   15e60:	428b      	cmp	r3, r1
   15e62:	d81e      	bhi.n	15ea2 <_sercom_get_async_baud_val+0x19a>
   15e64:	d01b      	beq.n	15e9e <_sercom_get_async_baud_val+0x196>
   15e66:	46bc      	mov	ip, r7
   15e68:	428b      	cmp	r3, r1
   15e6a:	d815      	bhi.n	15e98 <_sercom_get_async_baud_val+0x190>
   15e6c:	d012      	beq.n	15e94 <_sercom_get_async_baud_val+0x18c>
   15e6e:	9800      	ldr	r0, [sp, #0]
   15e70:	9901      	ldr	r1, [sp, #4]
   15e72:	4682      	mov	sl, r0
   15e74:	000c      	movs	r4, r1
   15e76:	4650      	mov	r0, sl
   15e78:	0021      	movs	r1, r4
	for (i = 63; i >= 0; i--) {
   15e7a:	3e01      	subs	r6, #1
   15e7c:	d313      	bcc.n	15ea6 <_sercom_get_async_baud_val+0x19e>
		bit_shift = (uint64_t)1 << i;
   15e7e:	464f      	mov	r7, r9
		r = r << 1;
   15e80:	1800      	adds	r0, r0, r0
   15e82:	4149      	adcs	r1, r1
			r |= 0x01;
   15e84:	464c      	mov	r4, r9
		bit_shift = (uint64_t)1 << i;
   15e86:	40b7      	lsls	r7, r6
   15e88:	4645      	mov	r5, r8
			r |= 0x01;
   15e8a:	4304      	orrs	r4, r0
   15e8c:	422f      	tst	r7, r5
   15e8e:	d0dd      	beq.n	15e4c <_sercom_get_async_baud_val+0x144>
   15e90:	000d      	movs	r5, r1
   15e92:	e7dd      	b.n	15e50 <_sercom_get_async_baud_val+0x148>
   15e94:	4282      	cmp	r2, r0
   15e96:	d9ea      	bls.n	15e6e <_sercom_get_async_baud_val+0x166>
   15e98:	4682      	mov	sl, r0
   15e9a:	000c      	movs	r4, r1
   15e9c:	e7eb      	b.n	15e76 <_sercom_get_async_baud_val+0x16e>
   15e9e:	4282      	cmp	r2, r0
   15ea0:	d9e1      	bls.n	15e66 <_sercom_get_async_baud_val+0x15e>
   15ea2:	4667      	mov	r7, ip
   15ea4:	e7df      	b.n	15e66 <_sercom_get_async_baud_val+0x15e>
		if(baud_int > BAUD_INT_MAX) {
   15ea6:	2080      	movs	r0, #128	; 0x80
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   15ea8:	2140      	movs	r1, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
   15eaa:	0180      	lsls	r0, r0, #6
   15eac:	4287      	cmp	r7, r0
   15eae:	d900      	bls.n	15eb2 <_sercom_get_async_baud_val+0x1aa>
   15eb0:	e73a      	b.n	15d28 <_sercom_get_async_baud_val+0x20>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   15eb2:	4641      	mov	r1, r8
   15eb4:	0f49      	lsrs	r1, r1, #29
   15eb6:	000c      	movs	r4, r1
	for (i = 63; i >= 0; i--) {
   15eb8:	263f      	movs	r6, #63	; 0x3f
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   15eba:	4641      	mov	r1, r8
	for (i = 63; i >= 0; i--) {
   15ebc:	46b4      	mov	ip, r6
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   15ebe:	00c9      	lsls	r1, r1, #3
		bit_shift = (uint64_t)1 << i;
   15ec0:	3e3e      	subs	r6, #62	; 0x3e
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   15ec2:	000d      	movs	r5, r1
		bit_shift = (uint64_t)1 << i;
   15ec4:	46b0      	mov	r8, r6
	uint64_t q = 0, r = 0, bit_shift;
   15ec6:	2100      	movs	r1, #0
		bit_shift = (uint64_t)1 << i;
   15ec8:	465e      	mov	r6, fp
	uint64_t q = 0, r = 0, bit_shift;
   15eca:	4689      	mov	r9, r1
		bit_shift = (uint64_t)1 << i;
   15ecc:	9705      	str	r7, [sp, #20]
	uint64_t q = 0, r = 0, bit_shift;
   15ece:	2000      	movs	r0, #0
		bit_shift = (uint64_t)1 << i;
   15ed0:	4667      	mov	r7, ip
	uint64_t q = 0, r = 0, bit_shift;
   15ed2:	2100      	movs	r1, #0
		bit_shift = (uint64_t)1 << i;
   15ed4:	9604      	str	r6, [sp, #16]
   15ed6:	46a2      	mov	sl, r4
   15ed8:	46ac      	mov	ip, r5
   15eda:	e018      	b.n	15f0e <_sercom_get_async_baud_val+0x206>
   15edc:	0004      	movs	r4, r0
   15ede:	000d      	movs	r5, r1
   15ee0:	0020      	movs	r0, r4
   15ee2:	0029      	movs	r1, r5
			r = r - d;
   15ee4:	1aa4      	subs	r4, r4, r2
   15ee6:	419d      	sbcs	r5, r3
			q |= bit_shift;
   15ee8:	464e      	mov	r6, r9
			r = r - d;
   15eea:	9402      	str	r4, [sp, #8]
   15eec:	9503      	str	r5, [sp, #12]
			q |= bit_shift;
   15eee:	9c00      	ldr	r4, [sp, #0]
   15ef0:	4334      	orrs	r4, r6
   15ef2:	0026      	movs	r6, r4
   15ef4:	428b      	cmp	r3, r1
   15ef6:	d828      	bhi.n	15f4a <_sercom_get_async_baud_val+0x242>
   15ef8:	d025      	beq.n	15f46 <_sercom_get_async_baud_val+0x23e>
   15efa:	46b1      	mov	r9, r6
   15efc:	428b      	cmp	r3, r1
   15efe:	d81f      	bhi.n	15f40 <_sercom_get_async_baud_val+0x238>
   15f00:	d01c      	beq.n	15f3c <_sercom_get_async_baud_val+0x234>
   15f02:	9c02      	ldr	r4, [sp, #8]
   15f04:	9d03      	ldr	r5, [sp, #12]
   15f06:	0020      	movs	r0, r4
   15f08:	0029      	movs	r1, r5
	for (i = 63; i >= 0; i--) {
   15f0a:	3f01      	subs	r7, #1
   15f0c:	d324      	bcc.n	15f58 <_sercom_get_async_baud_val+0x250>
		bit_shift = (uint64_t)1 << i;
   15f0e:	2420      	movs	r4, #32
   15f10:	4264      	negs	r4, r4
   15f12:	193c      	adds	r4, r7, r4
   15f14:	d41b      	bmi.n	15f4e <_sercom_get_async_baud_val+0x246>
   15f16:	4645      	mov	r5, r8
   15f18:	40a5      	lsls	r5, r4
		r = r << 1;
   15f1a:	1800      	adds	r0, r0, r0
   15f1c:	4149      	adcs	r1, r1
			r |= 0x01;
   15f1e:	4644      	mov	r4, r8
		bit_shift = (uint64_t)1 << i;
   15f20:	4646      	mov	r6, r8
			r |= 0x01;
   15f22:	4304      	orrs	r4, r0
		bit_shift = (uint64_t)1 << i;
   15f24:	40be      	lsls	r6, r7
			r |= 0x01;
   15f26:	46a3      	mov	fp, r4
		if (n & bit_shift) {
   15f28:	4664      	mov	r4, ip
		bit_shift = (uint64_t)1 << i;
   15f2a:	9600      	str	r6, [sp, #0]
		if (n & bit_shift) {
   15f2c:	4034      	ands	r4, r6
   15f2e:	4656      	mov	r6, sl
   15f30:	4035      	ands	r5, r6
   15f32:	4325      	orrs	r5, r4
   15f34:	d0d2      	beq.n	15edc <_sercom_get_async_baud_val+0x1d4>
   15f36:	465c      	mov	r4, fp
   15f38:	000d      	movs	r5, r1
   15f3a:	e7d1      	b.n	15ee0 <_sercom_get_async_baud_val+0x1d8>
   15f3c:	4282      	cmp	r2, r0
   15f3e:	d9e0      	bls.n	15f02 <_sercom_get_async_baud_val+0x1fa>
   15f40:	0004      	movs	r4, r0
   15f42:	000d      	movs	r5, r1
   15f44:	e7df      	b.n	15f06 <_sercom_get_async_baud_val+0x1fe>
   15f46:	4282      	cmp	r2, r0
   15f48:	d9d7      	bls.n	15efa <_sercom_get_async_baud_val+0x1f2>
   15f4a:	464e      	mov	r6, r9
   15f4c:	e7d5      	b.n	15efa <_sercom_get_async_baud_val+0x1f2>
		bit_shift = (uint64_t)1 << i;
   15f4e:	2420      	movs	r4, #32
   15f50:	4645      	mov	r5, r8
   15f52:	1be4      	subs	r4, r4, r7
   15f54:	40e5      	lsrs	r5, r4
   15f56:	e7e0      	b.n	15f1a <_sercom_get_async_baud_val+0x212>
   15f58:	9b04      	ldr	r3, [sp, #16]
   15f5a:	9f05      	ldr	r7, [sp, #20]
   15f5c:	469b      	mov	fp, r3
		baud_fp = temp1 - 8 * baud_int;
   15f5e:	00fb      	lsls	r3, r7, #3
   15f60:	1af3      	subs	r3, r6, r3
		baud_calculated = baud_int | (baud_fp << 13);
   15f62:	b2db      	uxtb	r3, r3
   15f64:	035b      	lsls	r3, r3, #13
   15f66:	431f      	orrs	r7, r3
   15f68:	b2bf      	uxth	r7, r7
   15f6a:	e74a      	b.n	15e02 <_sercom_get_async_baud_val+0xfa>
   15f6c:	0001d175 	.word	0x0001d175

00015f70 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   15f70:	b530      	push	{r4, r5, lr}
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   15f72:	4c0e      	ldr	r4, [pc, #56]	; (15fac <sercom_set_gclk_generator+0x3c>)
{
   15f74:	b083      	sub	sp, #12
	if (!_sercom_config.generator_is_set || force_change) {
   15f76:	7823      	ldrb	r3, [r4, #0]
{
   15f78:	0005      	movs	r5, r0
	if (!_sercom_config.generator_is_set || force_change) {
   15f7a:	2b00      	cmp	r3, #0
   15f7c:	d006      	beq.n	15f8c <sercom_set_gclk_generator+0x1c>
   15f7e:	2900      	cmp	r1, #0
   15f80:	d104      	bne.n	15f8c <sercom_set_gclk_generator+0x1c>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
   15f82:	7863      	ldrb	r3, [r4, #1]
   15f84:	4283      	cmp	r3, r0
   15f86:	d00f      	beq.n	15fa8 <sercom_set_gclk_generator+0x38>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   15f88:	201d      	movs	r0, #29
   15f8a:	e00b      	b.n	15fa4 <sercom_set_gclk_generator+0x34>
		gclk_chan_conf.source_generator = generator_source;
   15f8c:	a901      	add	r1, sp, #4
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   15f8e:	2011      	movs	r0, #17
   15f90:	4b07      	ldr	r3, [pc, #28]	; (15fb0 <sercom_set_gclk_generator+0x40>)
		gclk_chan_conf.source_generator = generator_source;
   15f92:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   15f94:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   15f96:	2011      	movs	r0, #17
   15f98:	4b06      	ldr	r3, [pc, #24]	; (15fb4 <sercom_set_gclk_generator+0x44>)
   15f9a:	4798      	blx	r3
		_sercom_config.generator_is_set = true;
   15f9c:	2301      	movs	r3, #1
		return STATUS_OK;
   15f9e:	2000      	movs	r0, #0
		_sercom_config.generator_source = generator_source;
   15fa0:	7065      	strb	r5, [r4, #1]
		_sercom_config.generator_is_set = true;
   15fa2:	7023      	strb	r3, [r4, #0]
}
   15fa4:	b003      	add	sp, #12
   15fa6:	bd30      	pop	{r4, r5, pc}
		return STATUS_OK;
   15fa8:	2000      	movs	r0, #0
   15faa:	e7fb      	b.n	15fa4 <sercom_set_gclk_generator+0x34>
   15fac:	20000ee0 	.word	0x20000ee0
   15fb0:	000168f5 	.word	0x000168f5
   15fb4:	00016935 	.word	0x00016935

00015fb8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
   15fb8:	4b3a      	ldr	r3, [pc, #232]	; (160a4 <_sercom_get_default_pad+0xec>)
   15fba:	4298      	cmp	r0, r3
   15fbc:	d044      	beq.n	16048 <_sercom_get_default_pad+0x90>
   15fbe:	d90a      	bls.n	15fd6 <_sercom_get_default_pad+0x1e>
   15fc0:	4b39      	ldr	r3, [pc, #228]	; (160a8 <_sercom_get_default_pad+0xf0>)
   15fc2:	4298      	cmp	r0, r3
   15fc4:	d018      	beq.n	15ff8 <_sercom_get_default_pad+0x40>
   15fc6:	4b39      	ldr	r3, [pc, #228]	; (160ac <_sercom_get_default_pad+0xf4>)
   15fc8:	4298      	cmp	r0, r3
   15fca:	d033      	beq.n	16034 <_sercom_get_default_pad+0x7c>
   15fcc:	4b38      	ldr	r3, [pc, #224]	; (160b0 <_sercom_get_default_pad+0xf8>)
   15fce:	4298      	cmp	r0, r3
   15fd0:	d01c      	beq.n	1600c <_sercom_get_default_pad+0x54>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
   15fd2:	2000      	movs	r0, #0
}
   15fd4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
   15fd6:	2384      	movs	r3, #132	; 0x84
   15fd8:	05db      	lsls	r3, r3, #23
   15fda:	4298      	cmp	r0, r3
   15fdc:	d020      	beq.n	16020 <_sercom_get_default_pad+0x68>
   15fde:	4b35      	ldr	r3, [pc, #212]	; (160b4 <_sercom_get_default_pad+0xfc>)
   15fe0:	4298      	cmp	r0, r3
   15fe2:	d1f6      	bne.n	15fd2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   15fe4:	2901      	cmp	r1, #1
   15fe6:	d043      	beq.n	16070 <_sercom_get_default_pad+0xb8>
   15fe8:	2900      	cmp	r1, #0
   15fea:	d03f      	beq.n	1606c <_sercom_get_default_pad+0xb4>
   15fec:	2902      	cmp	r1, #2
   15fee:	d03b      	beq.n	16068 <_sercom_get_default_pad+0xb0>
   15ff0:	2903      	cmp	r1, #3
   15ff2:	d1ee      	bne.n	15fd2 <_sercom_get_default_pad+0x1a>
   15ff4:	4830      	ldr	r0, [pc, #192]	; (160b8 <_sercom_get_default_pad+0x100>)
   15ff6:	e7ed      	b.n	15fd4 <_sercom_get_default_pad+0x1c>
   15ff8:	2901      	cmp	r1, #1
   15ffa:	d031      	beq.n	16060 <_sercom_get_default_pad+0xa8>
   15ffc:	2900      	cmp	r1, #0
   15ffe:	d02d      	beq.n	1605c <_sercom_get_default_pad+0xa4>
   16000:	2902      	cmp	r1, #2
   16002:	d02f      	beq.n	16064 <_sercom_get_default_pad+0xac>
   16004:	2903      	cmp	r1, #3
   16006:	d1e4      	bne.n	15fd2 <_sercom_get_default_pad+0x1a>
   16008:	482c      	ldr	r0, [pc, #176]	; (160bc <_sercom_get_default_pad+0x104>)
   1600a:	e7e3      	b.n	15fd4 <_sercom_get_default_pad+0x1c>
   1600c:	2901      	cmp	r1, #1
   1600e:	d03f      	beq.n	16090 <_sercom_get_default_pad+0xd8>
   16010:	2900      	cmp	r1, #0
   16012:	d03b      	beq.n	1608c <_sercom_get_default_pad+0xd4>
   16014:	2902      	cmp	r1, #2
   16016:	d037      	beq.n	16088 <_sercom_get_default_pad+0xd0>
   16018:	2903      	cmp	r1, #3
   1601a:	d1da      	bne.n	15fd2 <_sercom_get_default_pad+0x1a>
   1601c:	4828      	ldr	r0, [pc, #160]	; (160c0 <_sercom_get_default_pad+0x108>)
   1601e:	e7d9      	b.n	15fd4 <_sercom_get_default_pad+0x1c>
   16020:	2901      	cmp	r1, #1
   16022:	d03d      	beq.n	160a0 <_sercom_get_default_pad+0xe8>
   16024:	2900      	cmp	r1, #0
   16026:	d039      	beq.n	1609c <_sercom_get_default_pad+0xe4>
   16028:	2902      	cmp	r1, #2
   1602a:	d02b      	beq.n	16084 <_sercom_get_default_pad+0xcc>
   1602c:	2903      	cmp	r1, #3
   1602e:	d1d0      	bne.n	15fd2 <_sercom_get_default_pad+0x1a>
   16030:	4824      	ldr	r0, [pc, #144]	; (160c4 <_sercom_get_default_pad+0x10c>)
   16032:	e7cf      	b.n	15fd4 <_sercom_get_default_pad+0x1c>
   16034:	2901      	cmp	r1, #1
   16036:	d023      	beq.n	16080 <_sercom_get_default_pad+0xc8>
   16038:	2900      	cmp	r1, #0
   1603a:	d01f      	beq.n	1607c <_sercom_get_default_pad+0xc4>
   1603c:	2902      	cmp	r1, #2
   1603e:	d01b      	beq.n	16078 <_sercom_get_default_pad+0xc0>
   16040:	2903      	cmp	r1, #3
   16042:	d1c6      	bne.n	15fd2 <_sercom_get_default_pad+0x1a>
   16044:	4820      	ldr	r0, [pc, #128]	; (160c8 <_sercom_get_default_pad+0x110>)
   16046:	e7c5      	b.n	15fd4 <_sercom_get_default_pad+0x1c>
   16048:	2901      	cmp	r1, #1
   1604a:	d025      	beq.n	16098 <_sercom_get_default_pad+0xe0>
   1604c:	2900      	cmp	r1, #0
   1604e:	d021      	beq.n	16094 <_sercom_get_default_pad+0xdc>
   16050:	2902      	cmp	r1, #2
   16052:	d00f      	beq.n	16074 <_sercom_get_default_pad+0xbc>
   16054:	2903      	cmp	r1, #3
   16056:	d1bc      	bne.n	15fd2 <_sercom_get_default_pad+0x1a>
   16058:	481c      	ldr	r0, [pc, #112]	; (160cc <_sercom_get_default_pad+0x114>)
   1605a:	e7bb      	b.n	15fd4 <_sercom_get_default_pad+0x1c>
   1605c:	481c      	ldr	r0, [pc, #112]	; (160d0 <_sercom_get_default_pad+0x118>)
   1605e:	e7b9      	b.n	15fd4 <_sercom_get_default_pad+0x1c>
   16060:	481c      	ldr	r0, [pc, #112]	; (160d4 <_sercom_get_default_pad+0x11c>)
   16062:	e7b7      	b.n	15fd4 <_sercom_get_default_pad+0x1c>
   16064:	481c      	ldr	r0, [pc, #112]	; (160d8 <_sercom_get_default_pad+0x120>)
   16066:	e7b5      	b.n	15fd4 <_sercom_get_default_pad+0x1c>
   16068:	481c      	ldr	r0, [pc, #112]	; (160dc <_sercom_get_default_pad+0x124>)
   1606a:	e7b3      	b.n	15fd4 <_sercom_get_default_pad+0x1c>
   1606c:	2003      	movs	r0, #3
   1606e:	e7b1      	b.n	15fd4 <_sercom_get_default_pad+0x1c>
   16070:	481b      	ldr	r0, [pc, #108]	; (160e0 <_sercom_get_default_pad+0x128>)
   16072:	e7af      	b.n	15fd4 <_sercom_get_default_pad+0x1c>
   16074:	481b      	ldr	r0, [pc, #108]	; (160e4 <_sercom_get_default_pad+0x12c>)
   16076:	e7ad      	b.n	15fd4 <_sercom_get_default_pad+0x1c>
   16078:	481b      	ldr	r0, [pc, #108]	; (160e8 <_sercom_get_default_pad+0x130>)
   1607a:	e7ab      	b.n	15fd4 <_sercom_get_default_pad+0x1c>
   1607c:	481b      	ldr	r0, [pc, #108]	; (160ec <_sercom_get_default_pad+0x134>)
   1607e:	e7a9      	b.n	15fd4 <_sercom_get_default_pad+0x1c>
   16080:	481b      	ldr	r0, [pc, #108]	; (160f0 <_sercom_get_default_pad+0x138>)
   16082:	e7a7      	b.n	15fd4 <_sercom_get_default_pad+0x1c>
   16084:	481b      	ldr	r0, [pc, #108]	; (160f4 <_sercom_get_default_pad+0x13c>)
   16086:	e7a5      	b.n	15fd4 <_sercom_get_default_pad+0x1c>
   16088:	481b      	ldr	r0, [pc, #108]	; (160f8 <_sercom_get_default_pad+0x140>)
   1608a:	e7a3      	b.n	15fd4 <_sercom_get_default_pad+0x1c>
   1608c:	481b      	ldr	r0, [pc, #108]	; (160fc <_sercom_get_default_pad+0x144>)
   1608e:	e7a1      	b.n	15fd4 <_sercom_get_default_pad+0x1c>
   16090:	481b      	ldr	r0, [pc, #108]	; (16100 <_sercom_get_default_pad+0x148>)
   16092:	e79f      	b.n	15fd4 <_sercom_get_default_pad+0x1c>
   16094:	481b      	ldr	r0, [pc, #108]	; (16104 <_sercom_get_default_pad+0x14c>)
   16096:	e79d      	b.n	15fd4 <_sercom_get_default_pad+0x1c>
   16098:	481b      	ldr	r0, [pc, #108]	; (16108 <_sercom_get_default_pad+0x150>)
   1609a:	e79b      	b.n	15fd4 <_sercom_get_default_pad+0x1c>
   1609c:	481b      	ldr	r0, [pc, #108]	; (1610c <_sercom_get_default_pad+0x154>)
   1609e:	e799      	b.n	15fd4 <_sercom_get_default_pad+0x1c>
   160a0:	481b      	ldr	r0, [pc, #108]	; (16110 <_sercom_get_default_pad+0x158>)
   160a2:	e797      	b.n	15fd4 <_sercom_get_default_pad+0x1c>
   160a4:	42000800 	.word	0x42000800
   160a8:	42001000 	.word	0x42001000
   160ac:	43000400 	.word	0x43000400
   160b0:	42000c00 	.word	0x42000c00
   160b4:	42000400 	.word	0x42000400
   160b8:	001f0003 	.word	0x001f0003
   160bc:	000f0003 	.word	0x000f0003
   160c0:	00130003 	.word	0x00130003
   160c4:	00070003 	.word	0x00070003
   160c8:	00190003 	.word	0x00190003
   160cc:	000b0003 	.word	0x000b0003
   160d0:	000c0003 	.word	0x000c0003
   160d4:	000d0003 	.word	0x000d0003
   160d8:	000e0003 	.word	0x000e0003
   160dc:	001e0003 	.word	0x001e0003
   160e0:	00010003 	.word	0x00010003
   160e4:	000a0003 	.word	0x000a0003
   160e8:	00180003 	.word	0x00180003
   160ec:	00160003 	.word	0x00160003
   160f0:	00170003 	.word	0x00170003
   160f4:	00060003 	.word	0x00060003
   160f8:	00120003 	.word	0x00120003
   160fc:	00100003 	.word	0x00100003
   16100:	00110003 	.word	0x00110003
   16104:	00080003 	.word	0x00080003
   16108:	00090003 	.word	0x00090003
   1610c:	00040003 	.word	0x00040003
   16110:	00050003 	.word	0x00050003

00016114 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   16114:	b570      	push	{r4, r5, r6, lr}
   16116:	b086      	sub	sp, #24
   16118:	0001      	movs	r1, r0
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   1611a:	4668      	mov	r0, sp
   1611c:	4b15      	ldr	r3, [pc, #84]	; (16174 <_sercom_get_sercom_inst_index+0x60>)
   1611e:	cb70      	ldmia	r3!, {r4, r5, r6}
   16120:	c070      	stmia	r0!, {r4, r5, r6}
   16122:	cb70      	ldmia	r3!, {r4, r5, r6}
   16124:	c070      	stmia	r0!, {r4, r5, r6}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   16126:	9b00      	ldr	r3, [sp, #0]
   16128:	428b      	cmp	r3, r1
   1612a:	d011      	beq.n	16150 <_sercom_get_sercom_inst_index+0x3c>
   1612c:	9b01      	ldr	r3, [sp, #4]
   1612e:	428b      	cmp	r3, r1
   16130:	d011      	beq.n	16156 <_sercom_get_sercom_inst_index+0x42>
   16132:	9b02      	ldr	r3, [sp, #8]
   16134:	428b      	cmp	r3, r1
   16136:	d011      	beq.n	1615c <_sercom_get_sercom_inst_index+0x48>
   16138:	9b03      	ldr	r3, [sp, #12]
   1613a:	428b      	cmp	r3, r1
   1613c:	d011      	beq.n	16162 <_sercom_get_sercom_inst_index+0x4e>
   1613e:	9b04      	ldr	r3, [sp, #16]
   16140:	428b      	cmp	r3, r1
   16142:	d011      	beq.n	16168 <_sercom_get_sercom_inst_index+0x54>
   16144:	9b05      	ldr	r3, [sp, #20]
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   16146:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   16148:	428b      	cmp	r3, r1
   1614a:	d010      	beq.n	1616e <_sercom_get_sercom_inst_index+0x5a>
}
   1614c:	b006      	add	sp, #24
   1614e:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   16150:	2000      	movs	r0, #0
			return i;
   16152:	b2c0      	uxtb	r0, r0
   16154:	e7fa      	b.n	1614c <_sercom_get_sercom_inst_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   16156:	2001      	movs	r0, #1
			return i;
   16158:	b2c0      	uxtb	r0, r0
   1615a:	e7f7      	b.n	1614c <_sercom_get_sercom_inst_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1615c:	2002      	movs	r0, #2
			return i;
   1615e:	b2c0      	uxtb	r0, r0
   16160:	e7f4      	b.n	1614c <_sercom_get_sercom_inst_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   16162:	2003      	movs	r0, #3
			return i;
   16164:	b2c0      	uxtb	r0, r0
   16166:	e7f1      	b.n	1614c <_sercom_get_sercom_inst_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   16168:	2004      	movs	r0, #4
			return i;
   1616a:	b2c0      	uxtb	r0, r0
   1616c:	e7ee      	b.n	1614c <_sercom_get_sercom_inst_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1616e:	3005      	adds	r0, #5
			return i;
   16170:	b2c0      	uxtb	r0, r0
   16172:	e7eb      	b.n	1614c <_sercom_get_sercom_inst_index+0x38>
   16174:	00025b14 	.word	0x00025b14

00016178 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   16178:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
   1617a:	4b09      	ldr	r3, [pc, #36]	; (161a0 <delay_init+0x28>)
   1617c:	2000      	movs	r0, #0
   1617e:	4798      	blx	r3
	cycles_per_ms /= 1000;
   16180:	21fa      	movs	r1, #250	; 0xfa
   16182:	4c08      	ldr	r4, [pc, #32]	; (161a4 <delay_init+0x2c>)
   16184:	0089      	lsls	r1, r1, #2
	cycles_per_ms = system_gclk_gen_get_hz(0);
   16186:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
   16188:	47a0      	blx	r4
   1618a:	4b07      	ldr	r3, [pc, #28]	; (161a8 <delay_init+0x30>)
	cycles_per_us = cycles_per_ms / 1000;
   1618c:	4907      	ldr	r1, [pc, #28]	; (161ac <delay_init+0x34>)
	cycles_per_ms /= 1000;
   1618e:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   16190:	0028      	movs	r0, r5
   16192:	47a0      	blx	r4

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   16194:	2205      	movs	r2, #5
	cycles_per_us = cycles_per_ms / 1000;
   16196:	4b06      	ldr	r3, [pc, #24]	; (161b0 <delay_init+0x38>)
   16198:	6018      	str	r0, [r3, #0]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   1619a:	4b06      	ldr	r3, [pc, #24]	; (161b4 <delay_init+0x3c>)
   1619c:	601a      	str	r2, [r3, #0]
}
   1619e:	bd70      	pop	{r4, r5, r6, pc}
   161a0:	00016889 	.word	0x00016889
   161a4:	0001cd1d 	.word	0x0001cd1d
   161a8:	200001c8 	.word	0x200001c8
   161ac:	000f4240 	.word	0x000f4240
   161b0:	200001cc 	.word	0x200001cc
   161b4:	e000e010 	.word	0xe000e010

000161b8 <delay_cycles_us>:
{
	if (n > 0) {
		SysTick->LOAD = n;
		SysTick->VAL = 0;

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   161b8:	2180      	movs	r1, #128	; 0x80
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
   161ba:	b530      	push	{r4, r5, lr}
		SysTick->VAL = 0;
   161bc:	2500      	movs	r5, #0
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
   161be:	4b08      	ldr	r3, [pc, #32]	; (161e0 <delay_cycles_us+0x28>)
		SysTick->LOAD = n;
   161c0:	4a08      	ldr	r2, [pc, #32]	; (161e4 <delay_cycles_us+0x2c>)
   161c2:	681c      	ldr	r4, [r3, #0]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   161c4:	0249      	lsls	r1, r1, #9
	while (n--) {
   161c6:	3801      	subs	r0, #1
   161c8:	d308      	bcc.n	161dc <delay_cycles_us+0x24>
	if (n > 0) {
   161ca:	2c00      	cmp	r4, #0
   161cc:	d0fb      	beq.n	161c6 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
   161ce:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
   161d0:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   161d2:	6813      	ldr	r3, [r2, #0]
   161d4:	420b      	tst	r3, r1
   161d6:	d0fc      	beq.n	161d2 <delay_cycles_us+0x1a>
   161d8:	3801      	subs	r0, #1
   161da:	d2f6      	bcs.n	161ca <delay_cycles_us+0x12>
	}
}
   161dc:	bd30      	pop	{r4, r5, pc}
   161de:	46c0      	nop			; (mov r8, r8)
   161e0:	200001cc 	.word	0x200001cc
   161e4:	e000e010 	.word	0xe000e010

000161e8 <delay_cycles_ms>:
   161e8:	2180      	movs	r1, #128	; 0x80
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
   161ea:	b530      	push	{r4, r5, lr}
		SysTick->VAL = 0;
   161ec:	2500      	movs	r5, #0
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
   161ee:	4b08      	ldr	r3, [pc, #32]	; (16210 <delay_cycles_ms+0x28>)
		SysTick->LOAD = n;
   161f0:	4a08      	ldr	r2, [pc, #32]	; (16214 <delay_cycles_ms+0x2c>)
   161f2:	681c      	ldr	r4, [r3, #0]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   161f4:	0249      	lsls	r1, r1, #9
	while (n--) {
   161f6:	3801      	subs	r0, #1
   161f8:	d308      	bcc.n	1620c <delay_cycles_ms+0x24>
	if (n > 0) {
   161fa:	2c00      	cmp	r4, #0
   161fc:	d0fb      	beq.n	161f6 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
   161fe:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
   16200:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   16202:	6813      	ldr	r3, [r2, #0]
   16204:	420b      	tst	r3, r1
   16206:	d0fc      	beq.n	16202 <delay_cycles_ms+0x1a>
   16208:	3801      	subs	r0, #1
   1620a:	d2f6      	bcs.n	161fa <delay_cycles_ms+0x12>
	}
}
   1620c:	bd30      	pop	{r4, r5, pc}
   1620e:	46c0      	nop			; (mov r8, r8)
   16210:	200001c8 	.word	0x200001c8
   16214:	e000e010 	.word	0xe000e010

00016218 <port_pin_set_config>:
	config->mux_position = SYSTEM_PINMUX_GPIO;
   16218:	2280      	movs	r2, #128	; 0x80
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   1621a:	b500      	push	{lr}
   1621c:	b083      	sub	sp, #12
   1621e:	ab01      	add	r3, sp, #4
   16220:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   16222:	780a      	ldrb	r2, [r1, #0]
   16224:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   16226:	784a      	ldrb	r2, [r1, #1]
   16228:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   1622a:	788a      	ldrb	r2, [r1, #2]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   1622c:	0019      	movs	r1, r3
	pinmux_config.powersave    = config->powersave;
   1622e:	70da      	strb	r2, [r3, #3]
	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   16230:	4b01      	ldr	r3, [pc, #4]	; (16238 <port_pin_set_config+0x20>)
   16232:	4798      	blx	r3
}
   16234:	b003      	add	sp, #12
   16236:	bd00      	pop	{pc}
   16238:	000169f1 	.word	0x000169f1

0001623c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   1623c:	b510      	push	{r4, lr}
	switch (clock_source) {
   1623e:	2808      	cmp	r0, #8
   16240:	d82d      	bhi.n	1629e <system_clock_source_get_hz+0x62>
   16242:	4b1c      	ldr	r3, [pc, #112]	; (162b4 <system_clock_source_get_hz+0x78>)
   16244:	0080      	lsls	r0, r0, #2
   16246:	581b      	ldr	r3, [r3, r0]
   16248:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   1624a:	2080      	movs	r0, #128	; 0x80
   1624c:	0200      	lsls	r0, r0, #8
		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
	}
}
   1624e:	bd10      	pop	{r4, pc}
		return _system_clock_inst.xosc32k.frequency;
   16250:	4b19      	ldr	r3, [pc, #100]	; (162b8 <system_clock_source_get_hz+0x7c>)
   16252:	6958      	ldr	r0, [r3, #20]
   16254:	e7fb      	b.n	1624e <system_clock_source_get_hz+0x12>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
   16256:	4b19      	ldr	r3, [pc, #100]	; (162bc <system_clock_source_get_hz+0x80>)
   16258:	7d18      	ldrb	r0, [r3, #20]
   1625a:	0700      	lsls	r0, r0, #28
   1625c:	0f80      	lsrs	r0, r0, #30
   1625e:	1c43      	adds	r3, r0, #1
   16260:	4817      	ldr	r0, [pc, #92]	; (162c0 <system_clock_source_get_hz+0x84>)
   16262:	4358      	muls	r0, r3
   16264:	e7f3      	b.n	1624e <system_clock_source_get_hz+0x12>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
   16266:	4c14      	ldr	r4, [pc, #80]	; (162b8 <system_clock_source_get_hz+0x7c>)
			return 0;
   16268:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
   1626a:	6823      	ldr	r3, [r4, #0]
   1626c:	079b      	lsls	r3, r3, #30
   1626e:	d5ee      	bpl.n	1624e <system_clock_source_get_hz+0x12>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   16270:	2280      	movs	r2, #128	; 0x80
   16272:	4912      	ldr	r1, [pc, #72]	; (162bc <system_clock_source_get_hz+0x80>)
   16274:	0052      	lsls	r2, r2, #1
   16276:	68cb      	ldr	r3, [r1, #12]
   16278:	4213      	tst	r3, r2
   1627a:	d0fc      	beq.n	16276 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
   1627c:	6823      	ldr	r3, [r4, #0]
   1627e:	075b      	lsls	r3, r3, #29
   16280:	d40f      	bmi.n	162a2 <system_clock_source_get_hz+0x66>
		return 48000000UL;
   16282:	4810      	ldr	r0, [pc, #64]	; (162c4 <system_clock_source_get_hz+0x88>)
   16284:	e7e3      	b.n	1624e <system_clock_source_get_hz+0x12>
		return _system_clock_inst.xosc.frequency;
   16286:	4b0c      	ldr	r3, [pc, #48]	; (162b8 <system_clock_source_get_hz+0x7c>)
   16288:	6918      	ldr	r0, [r3, #16]
   1628a:	e7e0      	b.n	1624e <system_clock_source_get_hz+0x12>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
   1628c:	2328      	movs	r3, #40	; 0x28
   1628e:	4a0b      	ldr	r2, [pc, #44]	; (162bc <system_clock_source_get_hz+0x80>)
			return 0;
   16290:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
   16292:	5cd3      	ldrb	r3, [r2, r3]
   16294:	079b      	lsls	r3, r3, #30
   16296:	d5da      	bpl.n	1624e <system_clock_source_get_hz+0x12>
		return _system_clock_inst.dpll.frequency;
   16298:	4b07      	ldr	r3, [pc, #28]	; (162b8 <system_clock_source_get_hz+0x7c>)
   1629a:	68d8      	ldr	r0, [r3, #12]
   1629c:	e7d7      	b.n	1624e <system_clock_source_get_hz+0x12>
		return 0;
   1629e:	2000      	movs	r0, #0
   162a0:	e7d5      	b.n	1624e <system_clock_source_get_hz+0x12>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
   162a2:	4b09      	ldr	r3, [pc, #36]	; (162c8 <system_clock_source_get_hz+0x8c>)
   162a4:	2000      	movs	r0, #0
   162a6:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
   162a8:	68a3      	ldr	r3, [r4, #8]
   162aa:	041b      	lsls	r3, r3, #16
   162ac:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
   162ae:	4358      	muls	r0, r3
   162b0:	e7cd      	b.n	1624e <system_clock_source_get_hz+0x12>
   162b2:	46c0      	nop			; (mov r8, r8)
   162b4:	00025b2c 	.word	0x00025b2c
   162b8:	20000ee4 	.word	0x20000ee4
   162bc:	40000c00 	.word	0x40000c00
   162c0:	003d0900 	.word	0x003d0900
   162c4:	02dc6c00 	.word	0x02dc6c00
   162c8:	0001696d 	.word	0x0001696d

000162cc <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
   162cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   162ce:	46d6      	mov	lr, sl
   162d0:	464f      	mov	r7, r9
   162d2:	4646      	mov	r6, r8
   162d4:	b5c0      	push	{r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;

	temp.bit.STARTUP = config->startup_time;

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
   162d6:	7801      	ldrb	r1, [r0, #0]
	temp.bit.STARTUP = config->startup_time;
   162d8:	7845      	ldrb	r5, [r0, #1]
	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
   162da:	424c      	negs	r4, r1
   162dc:	414c      	adcs	r4, r1
   162de:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
   162e0:	7881      	ldrb	r1, [r0, #2]
	temp.bit.EN32K = config->enable_32khz_output;

	temp.bit.ONDEMAND = config->on_demand;
   162e2:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.EN1K = config->enable_1khz_output;
   162e4:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
   162e6:	78c1      	ldrb	r1, [r0, #3]
	temp.bit.RUNSTDBY = config->run_in_standby;
   162e8:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
   162ea:	7a84      	ldrb	r4, [r0, #10]
	temp.bit.EN32K = config->enable_32khz_output;
   162ec:	4688      	mov	r8, r1

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
   162ee:	6840      	ldr	r0, [r0, #4]
   162f0:	4919      	ldr	r1, [pc, #100]	; (16358 <system_clock_source_xosc32k_set_config+0x8c>)
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
   162f2:	4b1a      	ldr	r3, [pc, #104]	; (1635c <system_clock_source_xosc32k_set_config+0x90>)

	OSC32KCTRL->XOSC32K = temp;
   162f4:	2204      	movs	r2, #4
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
   162f6:	469a      	mov	sl, r3
   162f8:	695b      	ldr	r3, [r3, #20]
	_system_clock_inst.xosc32k.frequency = config->frequency;
   162fa:	6148      	str	r0, [r1, #20]
	OSC32KCTRL->XOSC32K = temp;
   162fc:	4648      	mov	r0, r9
   162fe:	4393      	bics	r3, r2
   16300:	0080      	lsls	r0, r0, #2
   16302:	2101      	movs	r1, #1
   16304:	4303      	orrs	r3, r0
   16306:	4640      	mov	r0, r8
   16308:	3204      	adds	r2, #4
   1630a:	4008      	ands	r0, r1
   1630c:	00c0      	lsls	r0, r0, #3
   1630e:	4393      	bics	r3, r2
   16310:	4303      	orrs	r3, r0
   16312:	4660      	mov	r0, ip
   16314:	3208      	adds	r2, #8
   16316:	4008      	ands	r0, r1
   16318:	0100      	lsls	r0, r0, #4
   1631a:	4393      	bics	r3, r2
   1631c:	4303      	orrs	r3, r0
   1631e:	2040      	movs	r0, #64	; 0x40
   16320:	4652      	mov	r2, sl
   16322:	400f      	ands	r7, r1
   16324:	01bf      	lsls	r7, r7, #6
   16326:	4383      	bics	r3, r0
   16328:	433b      	orrs	r3, r7
   1632a:	3040      	adds	r0, #64	; 0x40
   1632c:	400e      	ands	r6, r1
   1632e:	4383      	bics	r3, r0
   16330:	3879      	subs	r0, #121	; 0x79
   16332:	01f6      	lsls	r6, r6, #7
   16334:	4005      	ands	r5, r0
   16336:	480a      	ldr	r0, [pc, #40]	; (16360 <system_clock_source_xosc32k_set_config+0x94>)
   16338:	4333      	orrs	r3, r6
   1633a:	022d      	lsls	r5, r5, #8
   1633c:	4003      	ands	r3, r0
   1633e:	4809      	ldr	r0, [pc, #36]	; (16364 <system_clock_source_xosc32k_set_config+0x98>)
   16340:	432b      	orrs	r3, r5
   16342:	4021      	ands	r1, r4
   16344:	0309      	lsls	r1, r1, #12
   16346:	4003      	ands	r3, r0
   16348:	430b      	orrs	r3, r1
   1634a:	6153      	str	r3, [r2, #20]
}
   1634c:	bc1c      	pop	{r2, r3, r4}
   1634e:	4690      	mov	r8, r2
   16350:	4699      	mov	r9, r3
   16352:	46a2      	mov	sl, r4
   16354:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16356:	46c0      	nop			; (mov r8, r8)
   16358:	20000ee4 	.word	0x20000ee4
   1635c:	40001000 	.word	0x40001000
   16360:	fffff8ff 	.word	0xfffff8ff
   16364:	ffffefff 	.word	0xffffefff

00016368 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
   16368:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
   1636a:	7a83      	ldrb	r3, [r0, #10]
			OSCCTRL_DFLLVAL_FINE(config->fine_value);
   1636c:	8982      	ldrh	r2, [r0, #12]
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
   1636e:	069b      	lsls	r3, r3, #26
			OSCCTRL_DFLLVAL_FINE(config->fine_value);
   16370:	0592      	lsls	r2, r2, #22
   16372:	0d92      	lsrs	r2, r2, #22
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
   16374:	0c1b      	lsrs	r3, r3, #16
   16376:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
   16378:	4a18      	ldr	r2, [pc, #96]	; (163dc <system_clock_source_dfll_set_config+0x74>)
   1637a:	6053      	str	r3, [r2, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
   1637c:	7a41      	ldrb	r1, [r0, #9]
   1637e:	7a03      	ldrb	r3, [r0, #8]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
   16380:	88c4      	ldrh	r4, [r0, #6]
			(uint32_t)config->wakeup_lock     |
   16382:	430b      	orrs	r3, r1
			(uint32_t)config->quick_lock      |
   16384:	8881      	ldrh	r1, [r0, #4]
   16386:	4321      	orrs	r1, r4
   16388:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
   1638a:	7841      	ldrb	r1, [r0, #1]
   1638c:	01c9      	lsls	r1, r1, #7
			(uint32_t)config->chill_cycle     |
   1638e:	430b      	orrs	r3, r1
			((uint32_t)config->run_in_stanby << OSCCTRL_DFLLCTRL_RUNSTDBY_Pos);
   16390:	7881      	ldrb	r1, [r0, #2]
   16392:	0189      	lsls	r1, r1, #6
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
   16394:	430b      	orrs	r3, r1
	_system_clock_inst.dfll.control =
   16396:	6013      	str	r3, [r2, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
   16398:	7803      	ldrb	r3, [r0, #0]
   1639a:	2b04      	cmp	r3, #4
   1639c:	d010      	beq.n	163c0 <system_clock_source_dfll_set_config+0x58>
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
   1639e:	2b20      	cmp	r3, #32
   163a0:	d10d      	bne.n	163be <system_clock_source_dfll_set_config+0x56>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   163a2:	7b83      	ldrb	r3, [r0, #14]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
   163a4:	8a41      	ldrh	r1, [r0, #18]
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   163a6:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   163a8:	430b      	orrs	r3, r1
   163aa:	8a01      	ldrh	r1, [r0, #16]
   163ac:	480c      	ldr	r0, [pc, #48]	; (163e0 <system_clock_source_dfll_set_config+0x78>)
   163ae:	0409      	lsls	r1, r1, #16
   163b0:	4001      	ands	r1, r0
   163b2:	430b      	orrs	r3, r1
		_system_clock_inst.dfll.mul =
   163b4:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
   163b6:	6811      	ldr	r1, [r2, #0]
   163b8:	4b0a      	ldr	r3, [pc, #40]	; (163e4 <system_clock_source_dfll_set_config+0x7c>)
   163ba:	430b      	orrs	r3, r1
   163bc:	6013      	str	r3, [r2, #0]
				OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_BPLCKC;
	}
}
   163be:	bd10      	pop	{r4, pc}
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   163c0:	7b81      	ldrb	r1, [r0, #14]
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
   163c2:	8a44      	ldrh	r4, [r0, #18]
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   163c4:	0689      	lsls	r1, r1, #26
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   163c6:	8a00      	ldrh	r0, [r0, #16]
   163c8:	4321      	orrs	r1, r4
   163ca:	4c05      	ldr	r4, [pc, #20]	; (163e0 <system_clock_source_dfll_set_config+0x78>)
   163cc:	0400      	lsls	r0, r0, #16
   163ce:	4020      	ands	r0, r4
   163d0:	4301      	orrs	r1, r0
		_system_clock_inst.dfll.mul =
   163d2:	6091      	str	r1, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
   163d4:	6811      	ldr	r1, [r2, #0]
   163d6:	430b      	orrs	r3, r1
   163d8:	6013      	str	r3, [r2, #0]
   163da:	e7f0      	b.n	163be <system_clock_source_dfll_set_config+0x56>
   163dc:	20000ee4 	.word	0x20000ee4
   163e0:	03ff0000 	.word	0x03ff0000
   163e4:	00000424 	.word	0x00000424

000163e8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
   163e8:	2808      	cmp	r0, #8
   163ea:	d850      	bhi.n	1648e <system_clock_source_enable+0xa6>
   163ec:	4b29      	ldr	r3, [pc, #164]	; (16494 <system_clock_source_enable+0xac>)
   163ee:	0080      	lsls	r0, r0, #2
   163f0:	581b      	ldr	r3, [r3, r0]
   163f2:	469f      	mov	pc, r3
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
		_system_clock_source_dfll_set_config_errata_9905();
		break;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
   163f4:	2128      	movs	r1, #40	; 0x28
   163f6:	2002      	movs	r0, #2
   163f8:	4a27      	ldr	r2, [pc, #156]	; (16498 <system_clock_source_enable+0xb0>)
   163fa:	5c53      	ldrb	r3, [r2, r1]
   163fc:	4303      	orrs	r3, r0
   163fe:	5453      	strb	r3, [r2, r1]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
   16400:	3036      	adds	r0, #54	; 0x36
   16402:	3926      	subs	r1, #38	; 0x26
   16404:	5c13      	ldrb	r3, [r2, r0]
   16406:	4219      	tst	r1, r3
   16408:	d1fc      	bne.n	16404 <system_clock_source_enable+0x1c>
		}
		break;

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   1640a:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
   1640c:	4770      	bx	lr
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
   1640e:	2102      	movs	r1, #2
   16410:	4a21      	ldr	r2, [pc, #132]	; (16498 <system_clock_source_enable+0xb0>)
	return STATUS_OK;
   16412:	2000      	movs	r0, #0
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
   16414:	8a13      	ldrh	r3, [r2, #16]
   16416:	430b      	orrs	r3, r1
   16418:	8213      	strh	r3, [r2, #16]
		break;
   1641a:	e7f7      	b.n	1640c <system_clock_source_enable+0x24>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
   1641c:	2102      	movs	r1, #2
   1641e:	4a1f      	ldr	r2, [pc, #124]	; (1649c <system_clock_source_enable+0xb4>)
	return STATUS_OK;
   16420:	2000      	movs	r0, #0
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
   16422:	6993      	ldr	r3, [r2, #24]
   16424:	430b      	orrs	r3, r1
   16426:	6193      	str	r3, [r2, #24]
		break;
   16428:	e7f0      	b.n	1640c <system_clock_source_enable+0x24>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
   1642a:	2102      	movs	r1, #2
   1642c:	4a1b      	ldr	r2, [pc, #108]	; (1649c <system_clock_source_enable+0xb4>)
	return STATUS_OK;
   1642e:	2000      	movs	r0, #0
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
   16430:	6953      	ldr	r3, [r2, #20]
   16432:	430b      	orrs	r3, r1
   16434:	6153      	str	r3, [r2, #20]
		break;
   16436:	e7e9      	b.n	1640c <system_clock_source_enable+0x24>
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
   16438:	2102      	movs	r1, #2
   1643a:	4a17      	ldr	r2, [pc, #92]	; (16498 <system_clock_source_enable+0xb0>)
		return STATUS_OK;
   1643c:	2000      	movs	r0, #0
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
   1643e:	7d13      	ldrb	r3, [r2, #20]
   16440:	430b      	orrs	r3, r1
   16442:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
   16444:	e7e2      	b.n	1640c <system_clock_source_enable+0x24>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
   16446:	2102      	movs	r1, #2
   16448:	4815      	ldr	r0, [pc, #84]	; (164a0 <system_clock_source_enable+0xb8>)
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
   1644a:	4a13      	ldr	r2, [pc, #76]	; (16498 <system_clock_source_enable+0xb0>)
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
   1644c:	6803      	ldr	r3, [r0, #0]
   1644e:	430b      	orrs	r3, r1
   16450:	6003      	str	r3, [r0, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
   16452:	8311      	strh	r1, [r2, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   16454:	31fe      	adds	r1, #254	; 0xfe
   16456:	68d3      	ldr	r3, [r2, #12]
   16458:	420b      	tst	r3, r1
   1645a:	d0fc      	beq.n	16456 <system_clock_source_enable+0x6e>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   1645c:	6883      	ldr	r3, [r0, #8]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   1645e:	2180      	movs	r1, #128	; 0x80
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   16460:	6213      	str	r3, [r2, #32]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
   16462:	2302      	movs	r3, #2
   16464:	8313      	strh	r3, [r2, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   16466:	4a0c      	ldr	r2, [pc, #48]	; (16498 <system_clock_source_enable+0xb0>)
   16468:	0049      	lsls	r1, r1, #1
   1646a:	68d3      	ldr	r3, [r2, #12]
   1646c:	420b      	tst	r3, r1
   1646e:	d0fc      	beq.n	1646a <system_clock_source_enable+0x82>
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   16470:	6843      	ldr	r3, [r0, #4]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   16472:	2180      	movs	r1, #128	; 0x80
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   16474:	61d3      	str	r3, [r2, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
   16476:	2300      	movs	r3, #0
   16478:	8313      	strh	r3, [r2, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   1647a:	4a07      	ldr	r2, [pc, #28]	; (16498 <system_clock_source_enable+0xb0>)
   1647c:	0049      	lsls	r1, r1, #1
   1647e:	68d3      	ldr	r3, [r2, #12]
   16480:	420b      	tst	r3, r1
   16482:	d0fc      	beq.n	1647e <system_clock_source_enable+0x96>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   16484:	6803      	ldr	r3, [r0, #0]
	return STATUS_OK;
   16486:	2000      	movs	r0, #0
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   16488:	b29b      	uxth	r3, r3
   1648a:	8313      	strh	r3, [r2, #24]
   1648c:	e7be      	b.n	1640c <system_clock_source_enable+0x24>
		return STATUS_ERR_INVALID_ARG;
   1648e:	2017      	movs	r0, #23
   16490:	e7bc      	b.n	1640c <system_clock_source_enable+0x24>
   16492:	46c0      	nop			; (mov r8, r8)
   16494:	00025b50 	.word	0x00025b50
   16498:	40000c00 	.word	0x40000c00
   1649c:	40001000 	.word	0x40001000
   164a0:	20000ee4 	.word	0x20000ee4

000164a4 <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
   164a4:	2808      	cmp	r0, #8
   164a6:	d832      	bhi.n	1650e <system_clock_source_disable+0x6a>
   164a8:	4b1a      	ldr	r3, [pc, #104]	; (16514 <system_clock_source_disable+0x70>)
   164aa:	0080      	lsls	r0, r0, #2
   164ac:	581b      	ldr	r3, [r3, r0]
   164ae:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
		break;
	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
   164b0:	2228      	movs	r2, #40	; 0x28
   164b2:	2002      	movs	r0, #2
   164b4:	4918      	ldr	r1, [pc, #96]	; (16518 <system_clock_source_disable+0x74>)
   164b6:	5c8b      	ldrb	r3, [r1, r2]
   164b8:	4383      	bics	r3, r0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
   164ba:	2000      	movs	r0, #0
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
   164bc:	548b      	strb	r3, [r1, r2]
}
   164be:	4770      	bx	lr
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
   164c0:	2102      	movs	r1, #2
   164c2:	4a15      	ldr	r2, [pc, #84]	; (16518 <system_clock_source_disable+0x74>)
	return STATUS_OK;
   164c4:	2000      	movs	r0, #0
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
   164c6:	8a13      	ldrh	r3, [r2, #16]
   164c8:	438b      	bics	r3, r1
   164ca:	8213      	strh	r3, [r2, #16]
		break;
   164cc:	e7f7      	b.n	164be <system_clock_source_disable+0x1a>
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
   164ce:	2102      	movs	r1, #2
   164d0:	4a12      	ldr	r2, [pc, #72]	; (1651c <system_clock_source_disable+0x78>)
	return STATUS_OK;
   164d2:	2000      	movs	r0, #0
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
   164d4:	6993      	ldr	r3, [r2, #24]
   164d6:	438b      	bics	r3, r1
   164d8:	6193      	str	r3, [r2, #24]
		break;
   164da:	e7f0      	b.n	164be <system_clock_source_disable+0x1a>
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
   164dc:	2102      	movs	r1, #2
   164de:	4a0f      	ldr	r2, [pc, #60]	; (1651c <system_clock_source_disable+0x78>)
	return STATUS_OK;
   164e0:	2000      	movs	r0, #0
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
   164e2:	6953      	ldr	r3, [r2, #20]
   164e4:	438b      	bics	r3, r1
   164e6:	6153      	str	r3, [r2, #20]
		break;
   164e8:	e7e9      	b.n	164be <system_clock_source_disable+0x1a>
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
   164ea:	2102      	movs	r1, #2
   164ec:	4a0a      	ldr	r2, [pc, #40]	; (16518 <system_clock_source_disable+0x74>)
	return STATUS_OK;
   164ee:	2000      	movs	r0, #0
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
   164f0:	7d13      	ldrb	r3, [r2, #20]
   164f2:	438b      	bics	r3, r1
   164f4:	7513      	strb	r3, [r2, #20]
		break;
   164f6:	e7e2      	b.n	164be <system_clock_source_disable+0x1a>
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
   164f8:	2102      	movs	r1, #2
   164fa:	4b09      	ldr	r3, [pc, #36]	; (16520 <system_clock_source_disable+0x7c>)
	return STATUS_OK;
   164fc:	2000      	movs	r0, #0
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
   164fe:	681a      	ldr	r2, [r3, #0]
   16500:	438a      	bics	r2, r1
   16502:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   16504:	681b      	ldr	r3, [r3, #0]
   16506:	4a04      	ldr	r2, [pc, #16]	; (16518 <system_clock_source_disable+0x74>)
   16508:	b29b      	uxth	r3, r3
   1650a:	8313      	strh	r3, [r2, #24]
		break;
   1650c:	e7d7      	b.n	164be <system_clock_source_disable+0x1a>
		return STATUS_ERR_INVALID_ARG;
   1650e:	2017      	movs	r0, #23
   16510:	e7d5      	b.n	164be <system_clock_source_disable+0x1a>
   16512:	46c0      	nop			; (mov r8, r8)
   16514:	00025b74 	.word	0x00025b74
   16518:	40000c00 	.word	0x40000c00
   1651c:	40001000 	.word	0x40001000
   16520:	20000ee4 	.word	0x20000ee4

00016524 <system_clock_source_is_ready>:
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
	uint32_t mask = 0;

	switch (clock_source) {
   16524:	2808      	cmp	r0, #8
   16526:	d82f      	bhi.n	16588 <system_clock_source_is_ready+0x64>
   16528:	4b18      	ldr	r3, [pc, #96]	; (1658c <system_clock_source_is_ready+0x68>)
   1652a:	0080      	lsls	r0, r0, #2
   1652c:	581b      	ldr	r3, [r3, r0]
   1652e:	469f      	mov	pc, r3
		return ((OSCCTRL->DPLLSTATUS.reg &
				(OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)) ==
				(OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK));
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   16530:	2001      	movs	r0, #1

	default:
		return false;
	}
}
   16532:	4770      	bx	lr
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
   16534:	4b16      	ldr	r3, [pc, #88]	; (16590 <system_clock_source_is_ready+0x6c>)
   16536:	68d8      	ldr	r0, [r3, #12]
   16538:	0780      	lsls	r0, r0, #30
   1653a:	0fc0      	lsrs	r0, r0, #31
   1653c:	e7f9      	b.n	16532 <system_clock_source_is_ready+0xe>
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
   1653e:	2001      	movs	r0, #1
   16540:	4b13      	ldr	r3, [pc, #76]	; (16590 <system_clock_source_is_ready+0x6c>)
   16542:	68db      	ldr	r3, [r3, #12]
   16544:	4018      	ands	r0, r3
   16546:	e7f4      	b.n	16532 <system_clock_source_is_ready+0xe>
		return ((OSCCTRL->STATUS.reg & mask) == mask);
   16548:	4b12      	ldr	r3, [pc, #72]	; (16594 <system_clock_source_is_ready+0x70>)
   1654a:	68d8      	ldr	r0, [r3, #12]
   1654c:	06c0      	lsls	r0, r0, #27
   1654e:	0fc0      	lsrs	r0, r0, #31
   16550:	e7ef      	b.n	16532 <system_clock_source_is_ready+0xe>
		return ((OSCCTRL->STATUS.reg & mask) == mask);
   16552:	4b10      	ldr	r3, [pc, #64]	; (16594 <system_clock_source_is_ready+0x70>)
   16554:	68d8      	ldr	r0, [r3, #12]
   16556:	23d0      	movs	r3, #208	; 0xd0
   16558:	011b      	lsls	r3, r3, #4
   1655a:	4018      	ands	r0, r3
   1655c:	4b0e      	ldr	r3, [pc, #56]	; (16598 <system_clock_source_is_ready+0x74>)
   1655e:	469c      	mov	ip, r3
   16560:	4460      	add	r0, ip
   16562:	4243      	negs	r3, r0
   16564:	4158      	adcs	r0, r3
   16566:	b2c0      	uxtb	r0, r0
   16568:	e7e3      	b.n	16532 <system_clock_source_is_ready+0xe>
		return ((OSCCTRL->DPLLSTATUS.reg &
   1656a:	233c      	movs	r3, #60	; 0x3c
				(OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)) ==
   1656c:	2003      	movs	r0, #3
		return ((OSCCTRL->DPLLSTATUS.reg &
   1656e:	4a09      	ldr	r2, [pc, #36]	; (16594 <system_clock_source_is_ready+0x70>)
   16570:	5cd3      	ldrb	r3, [r2, r3]
				(OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)) ==
   16572:	4018      	ands	r0, r3
   16574:	3803      	subs	r0, #3
   16576:	4243      	negs	r3, r0
   16578:	4158      	adcs	r0, r3
   1657a:	b2c0      	uxtb	r0, r0
   1657c:	e7d9      	b.n	16532 <system_clock_source_is_ready+0xe>
		return ((OSCCTRL->STATUS.reg & mask) == mask);
   1657e:	2001      	movs	r0, #1
   16580:	4b04      	ldr	r3, [pc, #16]	; (16594 <system_clock_source_is_ready+0x70>)
   16582:	68db      	ldr	r3, [r3, #12]
   16584:	4018      	ands	r0, r3
   16586:	e7d4      	b.n	16532 <system_clock_source_is_ready+0xe>
		return false;
   16588:	2000      	movs	r0, #0
   1658a:	e7d2      	b.n	16532 <system_clock_source_is_ready+0xe>
   1658c:	00025b98 	.word	0x00025b98
   16590:	40001000 	.word	0x40001000
   16594:	40000c00 	.word	0x40000c00
   16598:	fffff300 	.word	0xfffff300

0001659c <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   1659c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
   1659e:	2280      	movs	r2, #128	; 0x80
{
   165a0:	46c6      	mov	lr, r8
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   165a2:	211e      	movs	r1, #30
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
   165a4:	4b64      	ldr	r3, [pc, #400]	; (16738 <system_clock_init+0x19c>)
{
   165a6:	b500      	push	{lr}
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
   165a8:	0052      	lsls	r2, r2, #1
   165aa:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
   165ac:	4b63      	ldr	r3, [pc, #396]	; (1673c <system_clock_init+0x1a0>)
   165ae:	3afd      	subs	r2, #253	; 0xfd
   165b0:	609a      	str	r2, [r3, #8]
   165b2:	4a63      	ldr	r2, [pc, #396]	; (16740 <system_clock_init+0x1a4>)
{
   165b4:	b088      	sub	sp, #32
   165b6:	6853      	ldr	r3, [r2, #4]
   165b8:	438b      	bics	r3, r1
   165ba:	391a      	subs	r1, #26
   165bc:	430b      	orrs	r3, r1
   165be:	6053      	str	r3, [r2, #4]
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
   165c0:	2380      	movs	r3, #128	; 0x80
   165c2:	05db      	lsls	r3, r3, #23
   165c4:	789a      	ldrb	r2, [r3, #2]
   165c6:	2a02      	cmp	r2, #2
   165c8:	d00a      	beq.n	165e0 <system_clock_init+0x44>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
   165ca:	789a      	ldrb	r2, [r3, #2]
   165cc:	b252      	sxtb	r2, r2
   165ce:	2a00      	cmp	r2, #0
   165d0:	db06      	blt.n	165e0 <system_clock_init+0x44>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
   165d2:	2201      	movs	r2, #1
   165d4:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
   165d6:	3201      	adds	r2, #1
   165d8:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
   165da:	799a      	ldrb	r2, [r3, #6]
   165dc:	2a00      	cmp	r2, #0
   165de:	d0fc      	beq.n	165da <system_clock_init+0x3e>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
   165e0:	2280      	movs	r2, #128	; 0x80
   165e2:	4b55      	ldr	r3, [pc, #340]	; (16738 <system_clock_init+0x19c>)
   165e4:	4252      	negs	r2, r2
   165e6:	7d19      	ldrb	r1, [r3, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   165e8:	a803      	add	r0, sp, #12
   165ea:	430a      	orrs	r2, r1
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
   165ec:	2140      	movs	r1, #64	; 0x40
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
   165ee:	751a      	strb	r2, [r3, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
   165f0:	7d1a      	ldrb	r2, [r3, #20]
   165f2:	438a      	bics	r2, r1
   165f4:	751a      	strb	r2, [r3, #20]
   165f6:	2200      	movs	r2, #0
   165f8:	2300      	movs	r3, #0
   165fa:	8082      	strh	r2, [r0, #4]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   165fc:	80c2      	strh	r2, [r0, #6]
	config->fine_value      = 0xff / 4; /* Midpoint */
   165fe:	323f      	adds	r2, #63	; 0x3f
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   16600:	7203      	strb	r3, [r0, #8]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   16602:	7243      	strb	r3, [r0, #9]
	config->run_in_stanby   = false;
   16604:	7083      	strb	r3, [r0, #2]
	config->fine_value      = 0xff / 4; /* Midpoint */
   16606:	8182      	strh	r2, [r0, #12]
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
	dfll_conf.on_demand      = false;
   16608:	7043      	strb	r3, [r0, #1]
	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
   1660a:	3a3b      	subs	r2, #59	; 0x3b
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    26 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP5)
   1660c:	4b4d      	ldr	r3, [pc, #308]	; (16744 <system_clock_init+0x1a8>)
	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
   1660e:	7002      	strb	r2, [r0, #0]
	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP5)
   16610:	681b      	ldr	r3, [r3, #0]
   16612:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the Calibration value is not correct */
	if (coarse == 0x3f) {
   16614:	2b3f      	cmp	r3, #63	; 0x3f
   16616:	d100      	bne.n	1661a <system_clock_init+0x7e>
   16618:	e08b      	b.n	16732 <system_clock_init+0x196>
		coarse = 0x1f;
	}

	dfll_conf.coarse_value = coarse;
   1661a:	7283      	strb	r3, [r0, #10]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
   1661c:	2307      	movs	r3, #7
   1661e:	7383      	strb	r3, [r0, #14]
   16620:	4698      	mov	r8, r3
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
   16622:	4b49      	ldr	r3, [pc, #292]	; (16748 <system_clock_init+0x1ac>)
	config->high_when_disabled = false;
   16624:	2600      	movs	r6, #0
   16626:	9307      	str	r3, [sp, #28]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
   16628:	4b48      	ldr	r3, [pc, #288]	; (1674c <system_clock_init+0x1b0>)
   1662a:	4798      	blx	r3
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   1662c:	4b48      	ldr	r3, [pc, #288]	; (16750 <system_clock_init+0x1b4>)
   1662e:	4798      	blx	r3
   16630:	466b      	mov	r3, sp

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   16632:	466a      	mov	r2, sp
	config->division_factor    = 1;
   16634:	2701      	movs	r7, #1
	config->high_when_disabled = false;
   16636:	705e      	strb	r6, [r3, #1]
	config->output_enable      = false;
   16638:	725e      	strb	r6, [r3, #9]
   1663a:	2303      	movs	r3, #3
   1663c:	4669      	mov	r1, sp
   1663e:	2002      	movs	r0, #2
   16640:	4d44      	ldr	r5, [pc, #272]	; (16754 <system_clock_init+0x1b8>)
   16642:	7013      	strb	r3, [r2, #0]
   16644:	7217      	strb	r7, [r2, #8]
	config->division_factor    = 1;
   16646:	9701      	str	r7, [sp, #4]
   16648:	47a8      	blx	r5
   1664a:	2002      	movs	r0, #2
   1664c:	4c42      	ldr	r4, [pc, #264]	; (16758 <system_clock_init+0x1bc>)
   1664e:	47a0      	blx	r4
	config->high_when_disabled = false;
   16650:	466b      	mov	r3, sp
   16652:	4642      	mov	r2, r8
   16654:	4669      	mov	r1, sp
   16656:	2003      	movs	r0, #3
   16658:	701a      	strb	r2, [r3, #0]
   1665a:	705e      	strb	r6, [r3, #1]
	config->run_in_standby     = false;
   1665c:	721e      	strb	r6, [r3, #8]
	config->output_enable      = false;
   1665e:	725e      	strb	r6, [r3, #9]
	config->division_factor    = 1;
   16660:	9701      	str	r7, [sp, #4]
   16662:	47a8      	blx	r5
   16664:	2003      	movs	r0, #3
   16666:	47a0      	blx	r4
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
   16668:	466b      	mov	r3, sp
   1666a:	3602      	adds	r6, #2
		system_gclk_chan_set_config(OSCCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
   1666c:	4669      	mov	r1, sp
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
   1666e:	701e      	strb	r6, [r3, #0]
		system_gclk_chan_set_config(OSCCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
   16670:	2000      	movs	r0, #0
   16672:	4b3a      	ldr	r3, [pc, #232]	; (1675c <system_clock_init+0x1c0>)
   16674:	4798      	blx	r3
		system_gclk_chan_enable(OSCCTRL_GCLK_ID_DFLL48);
   16676:	2000      	movs	r0, #0
   16678:	4b39      	ldr	r3, [pc, #228]	; (16760 <system_clock_init+0x1c4>)
   1667a:	4798      	blx	r3
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   1667c:	2180      	movs	r1, #128	; 0x80
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
   1667e:	4839      	ldr	r0, [pc, #228]	; (16764 <system_clock_init+0x1c8>)
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
   16680:	4a2d      	ldr	r2, [pc, #180]	; (16738 <system_clock_init+0x19c>)
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
   16682:	6803      	ldr	r3, [r0, #0]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   16684:	0049      	lsls	r1, r1, #1
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
   16686:	4333      	orrs	r3, r6
   16688:	6003      	str	r3, [r0, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
   1668a:	8316      	strh	r6, [r2, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   1668c:	68d3      	ldr	r3, [r2, #12]
   1668e:	420b      	tst	r3, r1
   16690:	d0fc      	beq.n	1668c <system_clock_init+0xf0>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   16692:	6883      	ldr	r3, [r0, #8]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   16694:	2180      	movs	r1, #128	; 0x80
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   16696:	6213      	str	r3, [r2, #32]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
   16698:	2302      	movs	r3, #2
   1669a:	8313      	strh	r3, [r2, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   1669c:	4a26      	ldr	r2, [pc, #152]	; (16738 <system_clock_init+0x19c>)
   1669e:	0049      	lsls	r1, r1, #1
   166a0:	68d3      	ldr	r3, [r2, #12]
   166a2:	420b      	tst	r3, r1
   166a4:	d0fc      	beq.n	166a0 <system_clock_init+0x104>
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   166a6:	6843      	ldr	r3, [r0, #4]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   166a8:	2180      	movs	r1, #128	; 0x80
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   166aa:	61d3      	str	r3, [r2, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
   166ac:	2300      	movs	r3, #0
   166ae:	8313      	strh	r3, [r2, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   166b0:	4a21      	ldr	r2, [pc, #132]	; (16738 <system_clock_init+0x19c>)
   166b2:	0049      	lsls	r1, r1, #1
   166b4:	68d3      	ldr	r3, [r2, #12]
   166b6:	420b      	tst	r3, r1
   166b8:	d0fc      	beq.n	166b4 <system_clock_init+0x118>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   166ba:	6803      	ldr	r3, [r0, #0]
		return ((OSCCTRL->STATUS.reg & mask) == mask);
   166bc:	491e      	ldr	r1, [pc, #120]	; (16738 <system_clock_init+0x19c>)
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   166be:	b29b      	uxth	r3, r3
   166c0:	8313      	strh	r3, [r2, #24]
		return ((OSCCTRL->STATUS.reg & mask) == mask);
   166c2:	22d0      	movs	r2, #208	; 0xd0
   166c4:	0112      	lsls	r2, r2, #4
   166c6:	68cb      	ldr	r3, [r1, #12]
   166c8:	4013      	ands	r3, r2
#endif

	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
   166ca:	4293      	cmp	r3, r2
   166cc:	d1fb      	bne.n	166c6 <system_clock_init+0x12a>
	config->high_when_disabled = false;
   166ce:	2300      	movs	r3, #0
   166d0:	4698      	mov	r8, r3
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
   166d2:	2601      	movs	r6, #1
   166d4:	466b      	mov	r3, sp
   166d6:	4642      	mov	r2, r8
   166d8:	4f23      	ldr	r7, [pc, #140]	; (16768 <system_clock_init+0x1cc>)
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   166da:	4669      	mov	r1, sp
   166dc:	71be      	strb	r6, [r7, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
   166de:	717e      	strb	r6, [r7, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
   166e0:	713e      	strb	r6, [r7, #4]
   166e2:	705a      	strb	r2, [r3, #1]
	config->run_in_standby     = false;
   166e4:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   166e6:	725a      	strb	r2, [r3, #9]
   166e8:	466a      	mov	r2, sp
   166ea:	2307      	movs	r3, #7
   166ec:	2000      	movs	r0, #0
   166ee:	7013      	strb	r3, [r2, #0]
	config->division_factor    = 1;
   166f0:	9601      	str	r6, [sp, #4]
   166f2:	47a8      	blx	r5
   166f4:	2000      	movs	r0, #0
   166f6:	47a0      	blx	r4
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
   166f8:	4b1c      	ldr	r3, [pc, #112]	; (1676c <system_clock_init+0x1d0>)
   166fa:	2000      	movs	r0, #0
   166fc:	4798      	blx	r3
   166fe:	7939      	ldrb	r1, [r7, #4]
   16700:	4b1b      	ldr	r3, [pc, #108]	; (16770 <system_clock_init+0x1d4>)
   16702:	b2c9      	uxtb	r1, r1
   16704:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
   16706:	4b1b      	ldr	r3, [pc, #108]	; (16774 <system_clock_init+0x1d8>)
   16708:	4298      	cmp	r0, r3
   1670a:	d80e      	bhi.n	1672a <system_clock_init+0x18e>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
   1670c:	2280      	movs	r2, #128	; 0x80
   1670e:	05d2      	lsls	r2, r2, #23
   16710:	7893      	ldrb	r3, [r2, #2]
   16712:	2b00      	cmp	r3, #0
   16714:	d009      	beq.n	1672a <system_clock_init+0x18e>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
   16716:	7893      	ldrb	r3, [r2, #2]
   16718:	b25b      	sxtb	r3, r3
   1671a:	2b00      	cmp	r3, #0
   1671c:	db05      	blt.n	1672a <system_clock_init+0x18e>
	PM->PLCFG.reg = performance_level;
   1671e:	4643      	mov	r3, r8
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
   16720:	7196      	strb	r6, [r2, #6]
	PM->PLCFG.reg = performance_level;
   16722:	7093      	strb	r3, [r2, #2]
	while (!PM->INTFLAG.reg) {
   16724:	7993      	ldrb	r3, [r2, #6]
   16726:	2b00      	cmp	r3, #0
   16728:	d0fc      	beq.n	16724 <system_clock_init+0x188>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
   1672a:	b008      	add	sp, #32
   1672c:	bc04      	pop	{r2}
   1672e:	4690      	mov	r8, r2
   16730:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (coarse == 0x3f) {
   16732:	3b20      	subs	r3, #32
   16734:	e771      	b.n	1661a <system_clock_init+0x7e>
   16736:	46c0      	nop			; (mov r8, r8)
   16738:	40000c00 	.word	0x40000c00
   1673c:	40001400 	.word	0x40001400
   16740:	41004000 	.word	0x41004000
   16744:	00806020 	.word	0x00806020
   16748:	05b8003f 	.word	0x05b8003f
   1674c:	00016369 	.word	0x00016369
   16750:	00016779 	.word	0x00016779
   16754:	0001679d 	.word	0x0001679d
   16758:	00016849 	.word	0x00016849
   1675c:	000168f5 	.word	0x000168f5
   16760:	00016935 	.word	0x00016935
   16764:	20000ee4 	.word	0x20000ee4
   16768:	40000400 	.word	0x40000400
   1676c:	00016889 	.word	0x00016889
   16770:	0001cd1d 	.word	0x0001cd1d
   16774:	00b71b00 	.word	0x00b71b00

00016778 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
   16778:	2140      	movs	r1, #64	; 0x40
   1677a:	4a06      	ldr	r2, [pc, #24]	; (16794 <system_gclk_init+0x1c>)
   1677c:	6953      	ldr	r3, [r2, #20]
   1677e:	430b      	orrs	r3, r1
   16780:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
   16782:	2301      	movs	r3, #1
   16784:	4a04      	ldr	r2, [pc, #16]	; (16798 <system_gclk_init+0x20>)
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
   16786:	393f      	subs	r1, #63	; 0x3f
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
   16788:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
   1678a:	7813      	ldrb	r3, [r2, #0]
   1678c:	4219      	tst	r1, r3
   1678e:	d1fc      	bne.n	1678a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
   16790:	4770      	bx	lr
   16792:	46c0      	nop			; (mov r8, r8)
   16794:	40000400 	.word	0x40000400
   16798:	40001800 	.word	0x40001800

0001679c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   1679c:	b570      	push	{r4, r5, r6, lr}

	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   1679e:	784b      	ldrb	r3, [r1, #1]
{
   167a0:	0004      	movs	r4, r0
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
   167a2:	780d      	ldrb	r5, [r1, #0]
	if (config->high_when_disabled) {
   167a4:	2b00      	cmp	r3, #0
   167a6:	d002      	beq.n	167ae <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   167a8:	2380      	movs	r3, #128	; 0x80
   167aa:	00db      	lsls	r3, r3, #3
   167ac:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   167ae:	7a4b      	ldrb	r3, [r1, #9]
   167b0:	2b00      	cmp	r3, #0
   167b2:	d002      	beq.n	167ba <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   167b4:	2380      	movs	r3, #128	; 0x80
   167b6:	011b      	lsls	r3, r3, #4
   167b8:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   167ba:	6848      	ldr	r0, [r1, #4]
   167bc:	2801      	cmp	r0, #1
   167be:	d90f      	bls.n	167e0 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   167c0:	1e43      	subs	r3, r0, #1
   167c2:	4218      	tst	r0, r3
   167c4:	d12f      	bne.n	16826 <system_gclk_gen_set_config+0x8a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   167c6:	2802      	cmp	r0, #2
   167c8:	d033      	beq.n	16832 <system_gclk_gen_set_config+0x96>
   167ca:	2302      	movs	r3, #2
   167cc:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
   167ce:	3201      	adds	r2, #1
						mask <<= 1) {
   167d0:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
   167d2:	4298      	cmp	r0, r3
   167d4:	d8fb      	bhi.n	167ce <system_gclk_gen_set_config+0x32>
   167d6:	0412      	lsls	r2, r2, #16
   167d8:	2380      	movs	r3, #128	; 0x80
   167da:	015b      	lsls	r3, r3, #5
   167dc:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   167de:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   167e0:	7a0b      	ldrb	r3, [r1, #8]
   167e2:	2b00      	cmp	r3, #0
   167e4:	d002      	beq.n	167ec <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   167e6:	2380      	movs	r3, #128	; 0x80
   167e8:	019b      	lsls	r3, r3, #6
   167ea:	431d      	orrs	r5, r3
   167ec:	2604      	movs	r6, #4
   167ee:	40a6      	lsls	r6, r4
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
   167f0:	4911      	ldr	r1, [pc, #68]	; (16838 <system_gclk_gen_set_config+0x9c>)
   167f2:	4a12      	ldr	r2, [pc, #72]	; (1683c <system_gclk_gen_set_config+0xa0>)
   167f4:	684b      	ldr	r3, [r1, #4]
   167f6:	4013      	ands	r3, r2
   167f8:	421e      	tst	r6, r3
   167fa:	d1fb      	bne.n	167f4 <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
   167fc:	4b10      	ldr	r3, [pc, #64]	; (16840 <system_gclk_gen_set_config+0xa4>)
   167fe:	4798      	blx	r3
   16800:	4b0d      	ldr	r3, [pc, #52]	; (16838 <system_gclk_gen_set_config+0x9c>)
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
   16802:	2280      	movs	r2, #128	; 0x80
   16804:	469c      	mov	ip, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
   16806:	4661      	mov	r1, ip
   16808:	00a4      	lsls	r4, r4, #2
   1680a:	4464      	add	r4, ip
	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
   1680c:	6a23      	ldr	r3, [r4, #32]
   1680e:	0052      	lsls	r2, r2, #1
   16810:	4013      	ands	r3, r2
   16812:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
   16814:	4a09      	ldr	r2, [pc, #36]	; (1683c <system_gclk_gen_set_config+0xa0>)
	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
   16816:	6225      	str	r5, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
   16818:	684b      	ldr	r3, [r1, #4]
   1681a:	4013      	ands	r3, r2
   1681c:	421e      	tst	r6, r3
   1681e:	d1fb      	bne.n	16818 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
   16820:	4b08      	ldr	r3, [pc, #32]	; (16844 <system_gclk_gen_set_config+0xa8>)
   16822:	4798      	blx	r3
	while (system_gclk_is_syncing(generator)) {
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
   16824:	bd70      	pop	{r4, r5, r6, pc}
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   16826:	2380      	movs	r3, #128	; 0x80
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
   16828:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   1682a:	009b      	lsls	r3, r3, #2
   1682c:	4318      	orrs	r0, r3
   1682e:	4305      	orrs	r5, r0
   16830:	e7d6      	b.n	167e0 <system_gclk_gen_set_config+0x44>
			for (mask = (1UL << 1); mask < config->division_factor;
   16832:	2200      	movs	r2, #0
   16834:	e7d0      	b.n	167d8 <system_gclk_gen_set_config+0x3c>
   16836:	46c0      	nop			; (mov r8, r8)
   16838:	40001800 	.word	0x40001800
   1683c:	000007fc 	.word	0x000007fc
   16840:	0000198d 	.word	0x0000198d
   16844:	000019c9 	.word	0x000019c9

00016848 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   16848:	2204      	movs	r2, #4
   1684a:	b510      	push	{r4, lr}
   1684c:	4082      	lsls	r2, r0
   1684e:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
   16850:	4909      	ldr	r1, [pc, #36]	; (16878 <system_gclk_gen_enable+0x30>)
   16852:	480a      	ldr	r0, [pc, #40]	; (1687c <system_gclk_gen_enable+0x34>)
   16854:	6843      	ldr	r3, [r0, #4]
   16856:	400b      	ands	r3, r1
   16858:	421a      	tst	r2, r3
   1685a:	d1fb      	bne.n	16854 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
   1685c:	4b08      	ldr	r3, [pc, #32]	; (16880 <system_gclk_gen_enable+0x38>)
   1685e:	4798      	blx	r3
   16860:	4b06      	ldr	r3, [pc, #24]	; (1687c <system_gclk_gen_enable+0x34>)
   16862:	00a0      	lsls	r0, r4, #2
   16864:	469c      	mov	ip, r3
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
   16866:	2380      	movs	r3, #128	; 0x80
   16868:	4460      	add	r0, ip
   1686a:	6a02      	ldr	r2, [r0, #32]
   1686c:	005b      	lsls	r3, r3, #1
   1686e:	4313      	orrs	r3, r2
   16870:	6203      	str	r3, [r0, #32]
	cpu_irq_leave_critical();
   16872:	4b04      	ldr	r3, [pc, #16]	; (16884 <system_gclk_gen_enable+0x3c>)
   16874:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   16876:	bd10      	pop	{r4, pc}
   16878:	000007fc 	.word	0x000007fc
   1687c:	40001800 	.word	0x40001800
   16880:	0000198d 	.word	0x0000198d
   16884:	000019c9 	.word	0x000019c9

00016888 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   16888:	2204      	movs	r2, #4
   1688a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1688c:	4082      	lsls	r2, r0
   1688e:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
   16890:	4e12      	ldr	r6, [pc, #72]	; (168dc <system_gclk_gen_get_hz+0x54>)
   16892:	4913      	ldr	r1, [pc, #76]	; (168e0 <system_gclk_gen_get_hz+0x58>)
   16894:	6873      	ldr	r3, [r6, #4]
   16896:	400b      	ands	r3, r1
   16898:	421a      	tst	r2, r3
   1689a:	d1fb      	bne.n	16894 <system_gclk_gen_get_hz+0xc>

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
   1689c:	3408      	adds	r4, #8
   1689e:	00a4      	lsls	r4, r4, #2
	cpu_irq_enter_critical();
   168a0:	4b10      	ldr	r3, [pc, #64]	; (168e4 <system_gclk_gen_get_hz+0x5c>)
   168a2:	4798      	blx	r3
   168a4:	59a0      	ldr	r0, [r4, r6]
	uint32_t gen_input_hz = system_clock_source_get_hz(
   168a6:	4b10      	ldr	r3, [pc, #64]	; (168e8 <system_gclk_gen_get_hz+0x60>)
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
   168a8:	0700      	lsls	r0, r0, #28
   168aa:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
   168ac:	4798      	blx	r3

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
   168ae:	59a5      	ldr	r5, [r4, r6]
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
   168b0:	59a4      	ldr	r4, [r4, r6]
	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
   168b2:	04ed      	lsls	r5, r5, #19
	cpu_irq_leave_critical();
   168b4:	4b0d      	ldr	r3, [pc, #52]	; (168ec <system_gclk_gen_get_hz+0x64>)
   168b6:	0fed      	lsrs	r5, r5, #31
	uint32_t gen_input_hz = system_clock_source_get_hz(
   168b8:	0007      	movs	r7, r0
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
   168ba:	0c24      	lsrs	r4, r4, #16
   168bc:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   168be:	2d00      	cmp	r5, #0
   168c0:	d003      	beq.n	168ca <system_gclk_gen_get_hz+0x42>
		gen_input_hz /= divider;
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
   168c2:	3401      	adds	r4, #1
   168c4:	40e7      	lsrs	r7, r4
	}

	return gen_input_hz;
}
   168c6:	0038      	movs	r0, r7
   168c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!divsel && divider > 1) {
   168ca:	2c01      	cmp	r4, #1
   168cc:	d9fb      	bls.n	168c6 <system_gclk_gen_get_hz+0x3e>
		gen_input_hz /= divider;
   168ce:	0038      	movs	r0, r7
   168d0:	0021      	movs	r1, r4
   168d2:	4b07      	ldr	r3, [pc, #28]	; (168f0 <system_gclk_gen_get_hz+0x68>)
   168d4:	4798      	blx	r3
   168d6:	0007      	movs	r7, r0
   168d8:	e7f5      	b.n	168c6 <system_gclk_gen_get_hz+0x3e>
   168da:	46c0      	nop			; (mov r8, r8)
   168dc:	40001800 	.word	0x40001800
   168e0:	000007fc 	.word	0x000007fc
   168e4:	0000198d 	.word	0x0000198d
   168e8:	0001623d 	.word	0x0001623d
   168ec:	000019c9 	.word	0x000019c9
   168f0:	0001cd1d 	.word	0x0001cd1d

000168f4 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   168f4:	b570      	push	{r4, r5, r6, lr}
	cpu_irq_enter_critical();
   168f6:	4b0c      	ldr	r3, [pc, #48]	; (16928 <system_gclk_chan_set_config+0x34>)
   168f8:	0004      	movs	r4, r0
   168fa:	000e      	movs	r6, r1
   168fc:	4798      	blx	r3
   168fe:	4b0b      	ldr	r3, [pc, #44]	; (1692c <system_gclk_chan_set_config+0x38>)

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
   16900:	2280      	movs	r2, #128	; 0x80
   16902:	469c      	mov	ip, r3
   16904:	2140      	movs	r1, #64	; 0x40

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
   16906:	2580      	movs	r5, #128	; 0x80
   16908:	00a4      	lsls	r4, r4, #2
   1690a:	4464      	add	r4, ip
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
   1690c:	58a3      	ldr	r3, [r4, r2]
   1690e:	438b      	bics	r3, r1
   16910:	50a3      	str	r3, [r4, r2]
	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
   16912:	3a40      	subs	r2, #64	; 0x40
   16914:	5963      	ldr	r3, [r4, r5]
   16916:	421a      	tst	r2, r3
   16918:	d1fc      	bne.n	16914 <system_gclk_chan_set_config+0x20>
	cpu_irq_leave_critical();
   1691a:	4b05      	ldr	r3, [pc, #20]	; (16930 <system_gclk_chan_set_config+0x3c>)
   1691c:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
   1691e:	230f      	movs	r3, #15
   16920:	7832      	ldrb	r2, [r6, #0]
   16922:	4013      	ands	r3, r2
   16924:	5163      	str	r3, [r4, r5]
}
   16926:	bd70      	pop	{r4, r5, r6, pc}
   16928:	0000198d 	.word	0x0000198d
   1692c:	40001800 	.word	0x40001800
   16930:	000019c9 	.word	0x000019c9

00016934 <system_gclk_chan_enable>:
{
   16934:	b510      	push	{r4, lr}
	cpu_irq_enter_critical();
   16936:	4b0a      	ldr	r3, [pc, #40]	; (16960 <system_gclk_chan_enable+0x2c>)
   16938:	0004      	movs	r4, r0
   1693a:	4798      	blx	r3
   1693c:	4b09      	ldr	r3, [pc, #36]	; (16964 <system_gclk_chan_enable+0x30>)
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
   1693e:	2280      	movs	r2, #128	; 0x80
   16940:	469c      	mov	ip, r3
   16942:	2140      	movs	r1, #64	; 0x40
   16944:	00a0      	lsls	r0, r4, #2
   16946:	4460      	add	r0, ip
   16948:	5883      	ldr	r3, [r0, r2]
   1694a:	430b      	orrs	r3, r1
   1694c:	5083      	str	r3, [r0, r2]
	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
   1694e:	3140      	adds	r1, #64	; 0x40
   16950:	3a40      	subs	r2, #64	; 0x40
   16952:	5843      	ldr	r3, [r0, r1]
   16954:	421a      	tst	r2, r3
   16956:	d0fc      	beq.n	16952 <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
   16958:	4b03      	ldr	r3, [pc, #12]	; (16968 <system_gclk_chan_enable+0x34>)
   1695a:	4798      	blx	r3
}
   1695c:	bd10      	pop	{r4, pc}
   1695e:	46c0      	nop			; (mov r8, r8)
   16960:	0000198d 	.word	0x0000198d
   16964:	40001800 	.word	0x40001800
   16968:	000019c9 	.word	0x000019c9

0001696c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   1696c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1696e:	46c6      	mov	lr, r8
   16970:	0004      	movs	r4, r0
   16972:	b500      	push	{lr}
	cpu_irq_enter_critical();
   16974:	4e18      	ldr	r6, [pc, #96]	; (169d8 <system_gclk_chan_get_hz+0x6c>)
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
   16976:	4d19      	ldr	r5, [pc, #100]	; (169dc <system_gclk_chan_get_hz+0x70>)
   16978:	3420      	adds	r4, #32
   1697a:	47b0      	blx	r6
   1697c:	00a4      	lsls	r4, r4, #2
	cpu_irq_leave_critical();
   1697e:	4f18      	ldr	r7, [pc, #96]	; (169e0 <system_gclk_chan_get_hz+0x74>)
   16980:	5964      	ldr	r4, [r4, r5]
   16982:	47b8      	blx	r7
   16984:	2204      	movs	r2, #4
   16986:	0724      	lsls	r4, r4, #28
   16988:	0f24      	lsrs	r4, r4, #28
   1698a:	40a2      	lsls	r2, r4
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
   1698c:	4915      	ldr	r1, [pc, #84]	; (169e4 <system_gclk_chan_get_hz+0x78>)
   1698e:	686b      	ldr	r3, [r5, #4]
   16990:	400b      	ands	r3, r1
   16992:	421a      	tst	r2, r3
   16994:	d1fb      	bne.n	1698e <system_gclk_chan_get_hz+0x22>
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
   16996:	3408      	adds	r4, #8
   16998:	00a4      	lsls	r4, r4, #2
	cpu_irq_enter_critical();
   1699a:	47b0      	blx	r6
   1699c:	5960      	ldr	r0, [r4, r5]
	uint32_t gen_input_hz = system_clock_source_get_hz(
   1699e:	4b12      	ldr	r3, [pc, #72]	; (169e8 <system_gclk_chan_get_hz+0x7c>)
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
   169a0:	0700      	lsls	r0, r0, #28
   169a2:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
   169a4:	4798      	blx	r3
	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
   169a6:	5966      	ldr	r6, [r4, r5]
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
   169a8:	5964      	ldr	r4, [r4, r5]
	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
   169aa:	04f6      	lsls	r6, r6, #19
   169ac:	0ff6      	lsrs	r6, r6, #31
	uint32_t gen_input_hz = system_clock_source_get_hz(
   169ae:	4680      	mov	r8, r0
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
   169b0:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
   169b2:	47b8      	blx	r7
	if (!divsel && divider > 1) {
   169b4:	2e00      	cmp	r6, #0
   169b6:	d007      	beq.n	169c8 <system_gclk_chan_get_hz+0x5c>
		gen_input_hz >>= (divider+1);
   169b8:	4643      	mov	r3, r8
   169ba:	3401      	adds	r4, #1
   169bc:	40e3      	lsrs	r3, r4
   169be:	4698      	mov	r8, r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
}
   169c0:	4640      	mov	r0, r8
   169c2:	bc04      	pop	{r2}
   169c4:	4690      	mov	r8, r2
   169c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!divsel && divider > 1) {
   169c8:	2c01      	cmp	r4, #1
   169ca:	d9f9      	bls.n	169c0 <system_gclk_chan_get_hz+0x54>
		gen_input_hz /= divider;
   169cc:	4640      	mov	r0, r8
   169ce:	0021      	movs	r1, r4
   169d0:	4b06      	ldr	r3, [pc, #24]	; (169ec <system_gclk_chan_get_hz+0x80>)
   169d2:	4798      	blx	r3
   169d4:	4680      	mov	r8, r0
   169d6:	e7f3      	b.n	169c0 <system_gclk_chan_get_hz+0x54>
   169d8:	0000198d 	.word	0x0000198d
   169dc:	40001800 	.word	0x40001800
   169e0:	000019c9 	.word	0x000019c9
   169e4:	000007fc 	.word	0x000007fc
   169e8:	0001623d 	.word	0x0001623d
   169ec:	0001cd1d 	.word	0x0001cd1d

000169f0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   169f0:	b570      	push	{r4, r5, r6, lr}
	if (port_index < PORT_INST_NUM) {
   169f2:	09c2      	lsrs	r2, r0, #7
		return NULL;
   169f4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   169f6:	2a00      	cmp	r2, #0
   169f8:	d104      	bne.n	16a04 <system_pinmux_pin_set_config+0x14>
		return &(ports[port_index]->Group[group_index]);
   169fa:	4a2f      	ldr	r2, [pc, #188]	; (16ab8 <system_pinmux_pin_set_config+0xc8>)
   169fc:	0943      	lsrs	r3, r0, #5
   169fe:	4694      	mov	ip, r2
   16a00:	01db      	lsls	r3, r3, #7
   16a02:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   16a04:	221f      	movs	r2, #31
   16a06:	4010      	ands	r0, r2
   16a08:	3a1e      	subs	r2, #30
   16a0a:	4082      	lsls	r2, r0
	if (!config->powersave) {
   16a0c:	78c8      	ldrb	r0, [r1, #3]
   16a0e:	2800      	cmp	r0, #0
   16a10:	d131      	bne.n	16a76 <system_pinmux_pin_set_config+0x86>
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   16a12:	7808      	ldrb	r0, [r1, #0]
   16a14:	2880      	cmp	r0, #128	; 0x80
   16a16:	d047      	beq.n	16aa8 <system_pinmux_pin_set_config+0xb8>
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   16a18:	2480      	movs	r4, #128	; 0x80
   16a1a:	0600      	lsls	r0, r0, #24
   16a1c:	0264      	lsls	r4, r4, #9
   16a1e:	4320      	orrs	r0, r4
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   16a20:	784c      	ldrb	r4, [r1, #1]
   16a22:	2502      	movs	r5, #2
   16a24:	0026      	movs	r6, r4
   16a26:	43ae      	bics	r6, r5
   16a28:	d107      	bne.n	16a3a <system_pinmux_pin_set_config+0x4a>
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   16a2a:	788c      	ldrb	r4, [r1, #2]
   16a2c:	2c00      	cmp	r4, #0
   16a2e:	d137      	bne.n	16aa0 <system_pinmux_pin_set_config+0xb0>
			pin_cfg |= PORT_WRCONFIG_INEN;
   16a30:	2480      	movs	r4, #128	; 0x80
   16a32:	02a4      	lsls	r4, r4, #10
   16a34:	4320      	orrs	r0, r4
			port->DIRCLR.reg = pin_mask;
   16a36:	605a      	str	r2, [r3, #4]
   16a38:	784c      	ldrb	r4, [r1, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   16a3a:	3c01      	subs	r4, #1
   16a3c:	2c01      	cmp	r4, #1
   16a3e:	d935      	bls.n	16aac <system_pinmux_pin_set_config+0xbc>
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   16a40:	24a0      	movs	r4, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   16a42:	0415      	lsls	r5, r2, #16
   16a44:	0c2d      	lsrs	r5, r5, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   16a46:	05e4      	lsls	r4, r4, #23
   16a48:	432c      	orrs	r4, r5
   16a4a:	4304      	orrs	r4, r0
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   16a4c:	629c      	str	r4, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   16a4e:	24d0      	movs	r4, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
   16a50:	0c15      	lsrs	r5, r2, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   16a52:	0624      	lsls	r4, r4, #24
   16a54:	432c      	orrs	r4, r5
   16a56:	4304      	orrs	r4, r0
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   16a58:	629c      	str	r4, [r3, #40]	; 0x28
	if(!config->powersave) {
   16a5a:	78cc      	ldrb	r4, [r1, #3]
   16a5c:	2c00      	cmp	r4, #0
   16a5e:	d109      	bne.n	16a74 <system_pinmux_pin_set_config+0x84>
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   16a60:	0340      	lsls	r0, r0, #13
   16a62:	d503      	bpl.n	16a6c <system_pinmux_pin_set_config+0x7c>
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   16a64:	7888      	ldrb	r0, [r1, #2]
   16a66:	2801      	cmp	r0, #1
   16a68:	d023      	beq.n	16ab2 <system_pinmux_pin_set_config+0xc2>
				port->OUTCLR.reg = pin_mask;
   16a6a:	615a      	str	r2, [r3, #20]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   16a6c:	7849      	ldrb	r1, [r1, #1]
   16a6e:	3901      	subs	r1, #1
   16a70:	2901      	cmp	r1, #1
   16a72:	d913      	bls.n	16a9c <system_pinmux_pin_set_config+0xac>

	_system_pinmux_config(port, pin_mask, config);
}
   16a74:	bd70      	pop	{r4, r5, r6, pc}
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   16a76:	20a0      	movs	r0, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   16a78:	0414      	lsls	r4, r2, #16
   16a7a:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   16a7c:	05c0      	lsls	r0, r0, #23
   16a7e:	4320      	orrs	r0, r4
		port->DIRCLR.reg = pin_mask;
   16a80:	605a      	str	r2, [r3, #4]
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   16a82:	6298      	str	r0, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   16a84:	20d0      	movs	r0, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
   16a86:	0c14      	lsrs	r4, r2, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   16a88:	0600      	lsls	r0, r0, #24
   16a8a:	4320      	orrs	r0, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   16a8c:	6298      	str	r0, [r3, #40]	; 0x28
	if(!config->powersave) {
   16a8e:	78c8      	ldrb	r0, [r1, #3]
   16a90:	2800      	cmp	r0, #0
   16a92:	d1ef      	bne.n	16a74 <system_pinmux_pin_set_config+0x84>
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   16a94:	7849      	ldrb	r1, [r1, #1]
   16a96:	3901      	subs	r1, #1
   16a98:	2901      	cmp	r1, #1
   16a9a:	d8eb      	bhi.n	16a74 <system_pinmux_pin_set_config+0x84>
			port->DIRSET.reg = pin_mask;
   16a9c:	609a      	str	r2, [r3, #8]
}
   16a9e:	e7e9      	b.n	16a74 <system_pinmux_pin_set_config+0x84>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   16aa0:	24c0      	movs	r4, #192	; 0xc0
   16aa2:	02e4      	lsls	r4, r4, #11
   16aa4:	4320      	orrs	r0, r4
   16aa6:	e7c6      	b.n	16a36 <system_pinmux_pin_set_config+0x46>
	uint32_t pin_cfg = 0;
   16aa8:	2000      	movs	r0, #0
   16aaa:	e7b9      	b.n	16a20 <system_pinmux_pin_set_config+0x30>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   16aac:	4c03      	ldr	r4, [pc, #12]	; (16abc <system_pinmux_pin_set_config+0xcc>)
   16aae:	4020      	ands	r0, r4
   16ab0:	e7c6      	b.n	16a40 <system_pinmux_pin_set_config+0x50>
				port->OUTSET.reg = pin_mask;
   16ab2:	619a      	str	r2, [r3, #24]
   16ab4:	e7da      	b.n	16a6c <system_pinmux_pin_set_config+0x7c>
   16ab6:	46c0      	nop			; (mov r8, r8)
   16ab8:	40002800 	.word	0x40002800
   16abc:	fffbffff 	.word	0xfffbffff

00016ac0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
   16ac0:	4770      	bx	lr
   16ac2:	46c0      	nop			; (mov r8, r8)

00016ac4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   16ac4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   16ac6:	4b05      	ldr	r3, [pc, #20]	; (16adc <system_init+0x18>)
   16ac8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   16aca:	4b05      	ldr	r3, [pc, #20]	; (16ae0 <system_init+0x1c>)
   16acc:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   16ace:	4b05      	ldr	r3, [pc, #20]	; (16ae4 <system_init+0x20>)
   16ad0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   16ad2:	4b05      	ldr	r3, [pc, #20]	; (16ae8 <system_init+0x24>)
   16ad4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   16ad6:	4b05      	ldr	r3, [pc, #20]	; (16aec <system_init+0x28>)
   16ad8:	4798      	blx	r3
}
   16ada:	bd10      	pop	{r4, pc}
   16adc:	0001659d 	.word	0x0001659d
   16ae0:	00000115 	.word	0x00000115
   16ae4:	00016ac1 	.word	0x00016ac1
   16ae8:	0000f1f9 	.word	0x0000f1f9
   16aec:	00016ac1 	.word	0x00016ac1

00016af0 <fn_debug_charger>:
		}

	}//End of main program while loop
}//end of main

void fn_debug_charger(void){
   16af0:	b5f0      	push	{r4, r5, r6, r7, lr}
   16af2:	4645      	mov	r5, r8
   16af4:	46de      	mov	lr, fp
   16af6:	4657      	mov	r7, sl
   16af8:	464e      	mov	r6, r9
	uint8_t addressList[] = {
   16afa:	2206      	movs	r2, #6
   16afc:	2300      	movs	r3, #0
void fn_debug_charger(void){
   16afe:	b5e0      	push	{r5, r6, r7, lr}
   16b00:	b087      	sub	sp, #28
	uint8_t addressList[] = {
   16b02:	ad01      	add	r5, sp, #4
   16b04:	70aa      	strb	r2, [r5, #2]
   16b06:	3201      	adds	r2, #1
   16b08:	70ea      	strb	r2, [r5, #3]
   16b0a:	3204      	adds	r2, #4
   16b0c:	712a      	strb	r2, [r5, #4]
   16b0e:	3201      	adds	r2, #1
   16b10:	716a      	strb	r2, [r5, #5]
	uint8_t i;
	uint8_t data;
	char binStr[10]; 
	
	//  Set initial conditions
	if (state_change) {
   16b12:	4a20      	ldr	r2, [pc, #128]	; (16b94 <fn_debug_charger+0xa4>)
	uint8_t addressList[] = {
   16b14:	702b      	strb	r3, [r5, #0]
	if (state_change) {
   16b16:	7812      	ldrb	r2, [r2, #0]
	uint8_t addressList[] = {
   16b18:	3302      	adds	r3, #2
   16b1a:	706b      	strb	r3, [r5, #1]
	if (state_change) {
   16b1c:	2a00      	cmp	r2, #0
   16b1e:	d006      	beq.n	16b2e <fn_debug_charger+0x3e>
		cur_Y = 2;
   16b20:	4a1d      	ldr	r2, [pc, #116]	; (16b98 <fn_debug_charger+0xa8>)
   16b22:	6013      	str	r3, [r2, #0]
		cur_Y_low = 2;
   16b24:	4a1d      	ldr	r2, [pc, #116]	; (16b9c <fn_debug_charger+0xac>)
   16b26:	6013      	str	r3, [r2, #0]
		cur_Y_high = 5;
   16b28:	2205      	movs	r2, #5
   16b2a:	4b1d      	ldr	r3, [pc, #116]	; (16ba0 <fn_debug_charger+0xb0>)
   16b2c:	601a      	str	r2, [r3, #0]
	}
		
	// Display
	glcd_clear_buffer();
   16b2e:	4b1d      	ldr	r3, [pc, #116]	; (16ba4 <fn_debug_charger+0xb4>)
   16b30:	4798      	blx	r3
	//  Display Title
	sprintf(display_str,"Charger Debug:");
   16b32:	4f1d      	ldr	r7, [pc, #116]	; (16ba8 <fn_debug_charger+0xb8>)
   16b34:	220f      	movs	r2, #15
   16b36:	491d      	ldr	r1, [pc, #116]	; (16bac <fn_debug_charger+0xbc>)
   16b38:	4b1d      	ldr	r3, [pc, #116]	; (16bb0 <fn_debug_charger+0xc0>)
   16b3a:	0038      	movs	r0, r7
   16b3c:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   16b3e:	4b1d      	ldr	r3, [pc, #116]	; (16bb4 <fn_debug_charger+0xc4>)
   16b40:	003a      	movs	r2, r7
   16b42:	2100      	movs	r1, #0
   16b44:	2000      	movs	r0, #0
   16b46:	4698      	mov	r8, r3
   16b48:	4798      	blx	r3
   16b4a:	4b1b      	ldr	r3, [pc, #108]	; (16bb8 <fn_debug_charger+0xc8>)
	
	for (i=0;i<sizeof(addressList);i++){
   16b4c:	2400      	movs	r4, #0
   16b4e:	469b      	mov	fp, r3
   16b50:	4b1a      	ldr	r3, [pc, #104]	; (16bbc <fn_debug_charger+0xcc>)
   16b52:	469a      	mov	sl, r3
   16b54:	4b1a      	ldr	r3, [pc, #104]	; (16bc0 <fn_debug_charger+0xd0>)
   16b56:	4699      	mov	r9, r3
		data = getChargerRegister(addressList[i]);
   16b58:	782e      	ldrb	r6, [r5, #0]
		bin2str(data, binStr);
		sprintf(display_str, "Add:%02x = %s", 
			addressList[i], binStr);
		glcd_tiny_draw_string(10, i+1, display_str);
   16b5a:	3401      	adds	r4, #1
		data = getChargerRegister(addressList[i]);
   16b5c:	0030      	movs	r0, r6
   16b5e:	47d8      	blx	fp
		bin2str(data, binStr);
   16b60:	a903      	add	r1, sp, #12
   16b62:	47d0      	blx	sl
		glcd_tiny_draw_string(10, i+1, display_str);
   16b64:	b2e4      	uxtb	r4, r4
		sprintf(display_str, "Add:%02x = %s", 
   16b66:	0032      	movs	r2, r6
   16b68:	ab03      	add	r3, sp, #12
   16b6a:	4649      	mov	r1, r9
   16b6c:	0038      	movs	r0, r7
   16b6e:	4e15      	ldr	r6, [pc, #84]	; (16bc4 <fn_debug_charger+0xd4>)
   16b70:	47b0      	blx	r6
		glcd_tiny_draw_string(10, i+1, display_str);
   16b72:	003a      	movs	r2, r7
   16b74:	0021      	movs	r1, r4
   16b76:	200a      	movs	r0, #10
   16b78:	47c0      	blx	r8
   16b7a:	3501      	adds	r5, #1
	for (i=0;i<sizeof(addressList);i++){
   16b7c:	2c06      	cmp	r4, #6
   16b7e:	d1eb      	bne.n	16b58 <fn_debug_charger+0x68>
	
	
	
	
	
	glcd_write();
   16b80:	4b11      	ldr	r3, [pc, #68]	; (16bc8 <fn_debug_charger+0xd8>)
   16b82:	4798      	blx	r3
	
}
   16b84:	b007      	add	sp, #28
   16b86:	bc3c      	pop	{r2, r3, r4, r5}
   16b88:	4690      	mov	r8, r2
   16b8a:	4699      	mov	r9, r3
   16b8c:	46a2      	mov	sl, r4
   16b8e:	46ab      	mov	fp, r5
   16b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16b92:	46c0      	nop			; (mov r8, r8)
   16b94:	200001d0 	.word	0x200001d0
   16b98:	20003170 	.word	0x20003170
   16b9c:	20004b48 	.word	0x20004b48
   16ba0:	20003de4 	.word	0x20003de4
   16ba4:	00013805 	.word	0x00013805
   16ba8:	200033a8 	.word	0x200033a8
   16bac:	0002608c 	.word	0x0002608c
   16bb0:	0001fd79 	.word	0x0001fd79
   16bb4:	000150a1 	.word	0x000150a1
   16bb8:	00007739 	.word	0x00007739
   16bbc:	00007755 	.word	0x00007755
   16bc0:	0002609c 	.word	0x0002609c
   16bc4:	0001fe91 	.word	0x0001fe91
   16bc8:	0001493d 	.word	0x0001493d

00016bcc <fn_disp_loop_report>:
	}
		
	glcd_write();
}

void fn_disp_loop_report(void){
   16bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   16bce:	46c6      	mov	lr, r8
   16bd0:	b500      	push	{lr}
	char unit_str[4];
	//float total_error;
	
	if (options.current_unit_dist == feet){
   16bd2:	4b39      	ldr	r3, [pc, #228]	; (16cb8 <fn_disp_loop_report+0xec>)
void fn_disp_loop_report(void){
   16bd4:	b084      	sub	sp, #16
	if (options.current_unit_dist == feet){
   16bd6:	791b      	ldrb	r3, [r3, #4]
   16bd8:	2b00      	cmp	r3, #0
   16bda:	d064      	beq.n	16ca6 <fn_disp_loop_report+0xda>
		strcpy(unit_str,"ft");
		}else{
		strcpy(unit_str,"m");
   16bdc:	ab03      	add	r3, sp, #12
   16bde:	4698      	mov	r8, r3
   16be0:	236d      	movs	r3, #109	; 0x6d
   16be2:	4642      	mov	r2, r8
   16be4:	8013      	strh	r3, [r2, #0]
	}
	
	
	glcd_clear_buffer();
   16be6:	4b35      	ldr	r3, [pc, #212]	; (16cbc <fn_disp_loop_report+0xf0>)
   16be8:	4798      	blx	r3
	sprintf(display_str, "Loop Test Report:");
   16bea:	4c35      	ldr	r4, [pc, #212]	; (16cc0 <fn_disp_loop_report+0xf4>)
   16bec:	4b35      	ldr	r3, [pc, #212]	; (16cc4 <fn_disp_loop_report+0xf8>)
   16bee:	2212      	movs	r2, #18
   16bf0:	4935      	ldr	r1, [pc, #212]	; (16cc8 <fn_disp_loop_report+0xfc>)
   16bf2:	0020      	movs	r0, r4
   16bf4:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   16bf6:	4d35      	ldr	r5, [pc, #212]	; (16ccc <fn_disp_loop_report+0x100>)
   16bf8:	0022      	movs	r2, r4
   16bfa:	2100      	movs	r1, #0
   16bfc:	2000      	movs	r0, #0
   16bfe:	47a8      	blx	r5
	
	sprintf(display_str,"Segments: %d",nPoints);
   16c00:	4b33      	ldr	r3, [pc, #204]	; (16cd0 <fn_disp_loop_report+0x104>)
   16c02:	4e34      	ldr	r6, [pc, #208]	; (16cd4 <fn_disp_loop_report+0x108>)
   16c04:	681a      	ldr	r2, [r3, #0]
   16c06:	4934      	ldr	r1, [pc, #208]	; (16cd8 <fn_disp_loop_report+0x10c>)
   16c08:	0020      	movs	r0, r4
   16c0a:	47b0      	blx	r6
	glcd_tiny_draw_string(0,1,display_str);
   16c0c:	0022      	movs	r2, r4
   16c0e:	2101      	movs	r1, #1
   16c10:	2000      	movs	r0, #0
   16c12:	47a8      	blx	r5
	
	sprintf(display_str,"Total Length: %.1f %s", loop_distance, unit_str);
   16c14:	4b31      	ldr	r3, [pc, #196]	; (16cdc <fn_disp_loop_report+0x110>)
   16c16:	4f32      	ldr	r7, [pc, #200]	; (16ce0 <fn_disp_loop_report+0x114>)
   16c18:	6818      	ldr	r0, [r3, #0]
   16c1a:	47b8      	blx	r7
   16c1c:	000b      	movs	r3, r1
   16c1e:	4641      	mov	r1, r8
   16c20:	0002      	movs	r2, r0
   16c22:	9100      	str	r1, [sp, #0]
   16c24:	0020      	movs	r0, r4
   16c26:	492f      	ldr	r1, [pc, #188]	; (16ce4 <fn_disp_loop_report+0x118>)
   16c28:	47b0      	blx	r6
	glcd_tiny_draw_string(0,2,display_str);
   16c2a:	0022      	movs	r2, r4
   16c2c:	2102      	movs	r1, #2
   16c2e:	2000      	movs	r0, #0
   16c30:	47a8      	blx	r5
	
	sprintf(display_str,"Horz Err: %.3f %s", loop_horizontal, unit_str);
   16c32:	4b2d      	ldr	r3, [pc, #180]	; (16ce8 <fn_disp_loop_report+0x11c>)
   16c34:	6818      	ldr	r0, [r3, #0]
   16c36:	47b8      	blx	r7
   16c38:	000b      	movs	r3, r1
   16c3a:	4641      	mov	r1, r8
   16c3c:	0002      	movs	r2, r0
   16c3e:	9100      	str	r1, [sp, #0]
   16c40:	0020      	movs	r0, r4
   16c42:	492a      	ldr	r1, [pc, #168]	; (16cec <fn_disp_loop_report+0x120>)
   16c44:	47b0      	blx	r6
	glcd_tiny_draw_string(0,3,display_str);
   16c46:	0022      	movs	r2, r4
   16c48:	2103      	movs	r1, #3
   16c4a:	2000      	movs	r0, #0
   16c4c:	47a8      	blx	r5
	
	sprintf(display_str,"Vert Err: %.3f %s", loop_vertical, unit_str);
   16c4e:	4b28      	ldr	r3, [pc, #160]	; (16cf0 <fn_disp_loop_report+0x124>)
   16c50:	6818      	ldr	r0, [r3, #0]
   16c52:	47b8      	blx	r7
   16c54:	000b      	movs	r3, r1
   16c56:	4641      	mov	r1, r8
   16c58:	0002      	movs	r2, r0
   16c5a:	9100      	str	r1, [sp, #0]
   16c5c:	0020      	movs	r0, r4
   16c5e:	4925      	ldr	r1, [pc, #148]	; (16cf4 <fn_disp_loop_report+0x128>)
   16c60:	47b0      	blx	r6
	glcd_tiny_draw_string(0,4,display_str);
   16c62:	0022      	movs	r2, r4
   16c64:	2104      	movs	r1, #4
   16c66:	2000      	movs	r0, #0
   16c68:	47a8      	blx	r5
	
	sprintf(display_str,"  Azim Err: %.1f deg", loop_azimuth);
   16c6a:	4b23      	ldr	r3, [pc, #140]	; (16cf8 <fn_disp_loop_report+0x12c>)
   16c6c:	6818      	ldr	r0, [r3, #0]
   16c6e:	47b8      	blx	r7
   16c70:	000b      	movs	r3, r1
   16c72:	0002      	movs	r2, r0
   16c74:	4921      	ldr	r1, [pc, #132]	; (16cfc <fn_disp_loop_report+0x130>)
   16c76:	0020      	movs	r0, r4
   16c78:	47b0      	blx	r6
	glcd_tiny_draw_string(0,5,display_str);
   16c7a:	0022      	movs	r2, r4
   16c7c:	2105      	movs	r1, #5
   16c7e:	2000      	movs	r0, #0
   16c80:	47a8      	blx	r5
	
	sprintf(display_str,"Loop Err: %.3f%% ", loop_error);
   16c82:	4b1f      	ldr	r3, [pc, #124]	; (16d00 <fn_disp_loop_report+0x134>)
   16c84:	6818      	ldr	r0, [r3, #0]
   16c86:	47b8      	blx	r7
   16c88:	000b      	movs	r3, r1
   16c8a:	0002      	movs	r2, r0
   16c8c:	491d      	ldr	r1, [pc, #116]	; (16d04 <fn_disp_loop_report+0x138>)
   16c8e:	0020      	movs	r0, r4
   16c90:	47b0      	blx	r6
	glcd_tiny_draw_string(0,5,display_str);
   16c92:	0022      	movs	r2, r4
   16c94:	2105      	movs	r1, #5
   16c96:	2000      	movs	r0, #0
   16c98:	47a8      	blx	r5
	
	
	
	glcd_write();
   16c9a:	4b1b      	ldr	r3, [pc, #108]	; (16d08 <fn_disp_loop_report+0x13c>)
   16c9c:	4798      	blx	r3
	
}
   16c9e:	b004      	add	sp, #16
   16ca0:	bc04      	pop	{r2}
   16ca2:	4690      	mov	r8, r2
   16ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(unit_str,"ft");
   16ca6:	ab03      	add	r3, sp, #12
   16ca8:	4698      	mov	r8, r3
   16caa:	4641      	mov	r1, r8
   16cac:	4b17      	ldr	r3, [pc, #92]	; (16d0c <fn_disp_loop_report+0x140>)
   16cae:	881a      	ldrh	r2, [r3, #0]
   16cb0:	800a      	strh	r2, [r1, #0]
   16cb2:	789b      	ldrb	r3, [r3, #2]
   16cb4:	708b      	strb	r3, [r1, #2]
   16cb6:	e796      	b.n	16be6 <fn_disp_loop_report+0x1a>
   16cb8:	2000332c 	.word	0x2000332c
   16cbc:	00013805 	.word	0x00013805
   16cc0:	200033a8 	.word	0x200033a8
   16cc4:	0001fd79 	.word	0x0001fd79
   16cc8:	000262a4 	.word	0x000262a4
   16ccc:	000150a1 	.word	0x000150a1
   16cd0:	20003340 	.word	0x20003340
   16cd4:	0001fe91 	.word	0x0001fe91
   16cd8:	000262b8 	.word	0x000262b8
   16cdc:	20003324 	.word	0x20003324
   16ce0:	0001fb6d 	.word	0x0001fb6d
   16ce4:	000262c8 	.word	0x000262c8
   16ce8:	20003fdc 	.word	0x20003fdc
   16cec:	000262e0 	.word	0x000262e0
   16cf0:	2000331c 	.word	0x2000331c
   16cf4:	000262f4 	.word	0x000262f4
   16cf8:	200055cc 	.word	0x200055cc
   16cfc:	00026308 	.word	0x00026308
   16d00:	200054ac 	.word	0x200054ac
   16d04:	00026320 	.word	0x00026320
   16d08:	0001493d 	.word	0x0001493d
   16d0c:	000262a0 	.word	0x000262a0

00016d10 <fn_debug_rawData>:
void fn_debug_rawData(void){
   16d10:	b5f0      	push	{r4, r5, r6, r7, lr}
   16d12:	46de      	mov	lr, fp
   16d14:	4657      	mov	r7, sl
   16d16:	464e      	mov	r6, r9
   16d18:	4645      	mov	r5, r8
   16d1a:	b5e0      	push	{r5, r6, r7, lr}
   16d1c:	b0b1      	sub	sp, #196	; 0xc4
	quick_measurement( &meas_debug);	
   16d1e:	a802      	add	r0, sp, #8
   16d20:	4b47      	ldr	r3, [pc, #284]	; (16e40 <fn_debug_rawData+0x130>)
   16d22:	4798      	blx	r3
	glcd_clear_buffer();	
   16d24:	4b47      	ldr	r3, [pc, #284]	; (16e44 <fn_debug_rawData+0x134>)
   16d26:	4798      	blx	r3
	sprintf(display_str, "Acc 1     Acc 2  Done");
   16d28:	4c47      	ldr	r4, [pc, #284]	; (16e48 <fn_debug_rawData+0x138>)
   16d2a:	2216      	movs	r2, #22
   16d2c:	4947      	ldr	r1, [pc, #284]	; (16e4c <fn_debug_rawData+0x13c>)
   16d2e:	0020      	movs	r0, r4
   16d30:	4b47      	ldr	r3, [pc, #284]	; (16e50 <fn_debug_rawData+0x140>)
   16d32:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   16d34:	4b47      	ldr	r3, [pc, #284]	; (16e54 <fn_debug_rawData+0x144>)
   16d36:	0022      	movs	r2, r4
   16d38:	2100      	movs	r1, #0
   16d3a:	2000      	movs	r0, #0
   16d3c:	4698      	mov	r8, r3
   16d3e:	4798      	blx	r3
	sprintf(display_str, "X: %+0.3f %+0.3f", meas_debug.a1Raw[0], meas_debug.a2Raw[0]);
   16d40:	4d45      	ldr	r5, [pc, #276]	; (16e58 <fn_debug_rawData+0x148>)
   16d42:	980b      	ldr	r0, [sp, #44]	; 0x2c
   16d44:	47a8      	blx	r5
   16d46:	4b45      	ldr	r3, [pc, #276]	; (16e5c <fn_debug_rawData+0x14c>)
   16d48:	0006      	movs	r6, r0
   16d4a:	980e      	ldr	r0, [sp, #56]	; 0x38
   16d4c:	469a      	mov	sl, r3
   16d4e:	000f      	movs	r7, r1
   16d50:	47a8      	blx	r5
   16d52:	003b      	movs	r3, r7
   16d54:	9000      	str	r0, [sp, #0]
   16d56:	9101      	str	r1, [sp, #4]
   16d58:	0032      	movs	r2, r6
   16d5a:	4651      	mov	r1, sl
   16d5c:	4e40      	ldr	r6, [pc, #256]	; (16e60 <fn_debug_rawData+0x150>)
   16d5e:	0020      	movs	r0, r4
   16d60:	47b0      	blx	r6
	glcd_tiny_draw_string(0,1,display_str);
   16d62:	0022      	movs	r2, r4
   16d64:	2101      	movs	r1, #1
   16d66:	2000      	movs	r0, #0
   16d68:	47c0      	blx	r8
	sprintf(display_str, "Y: %+0.3f %+0.3f", meas_debug.a1Raw[1], meas_debug.a2Raw[1]);
   16d6a:	980c      	ldr	r0, [sp, #48]	; 0x30
   16d6c:	47a8      	blx	r5
   16d6e:	4b3d      	ldr	r3, [pc, #244]	; (16e64 <fn_debug_rawData+0x154>)
	sprintf(display_str, "X: %+0.3f %+0.3f", meas_debug.a1Raw[0], meas_debug.a2Raw[0]);
   16d70:	46b1      	mov	r9, r6
	sprintf(display_str, "Y: %+0.3f %+0.3f", meas_debug.a1Raw[1], meas_debug.a2Raw[1]);
   16d72:	0006      	movs	r6, r0
   16d74:	980f      	ldr	r0, [sp, #60]	; 0x3c
   16d76:	469b      	mov	fp, r3
   16d78:	000f      	movs	r7, r1
   16d7a:	47a8      	blx	r5
   16d7c:	003b      	movs	r3, r7
   16d7e:	9000      	str	r0, [sp, #0]
   16d80:	9101      	str	r1, [sp, #4]
   16d82:	0032      	movs	r2, r6
   16d84:	4659      	mov	r1, fp
   16d86:	0020      	movs	r0, r4
   16d88:	47c8      	blx	r9
	glcd_tiny_draw_string(0,2,display_str);
   16d8a:	0022      	movs	r2, r4
   16d8c:	2102      	movs	r1, #2
   16d8e:	2000      	movs	r0, #0
   16d90:	47c0      	blx	r8
	sprintf(display_str, "Z: %+0.3f %+0.3f", meas_debug.a1Raw[2], meas_debug.a2Raw[2]);
   16d92:	980d      	ldr	r0, [sp, #52]	; 0x34
   16d94:	47a8      	blx	r5
   16d96:	0006      	movs	r6, r0
   16d98:	9810      	ldr	r0, [sp, #64]	; 0x40
   16d9a:	000f      	movs	r7, r1
   16d9c:	47a8      	blx	r5
   16d9e:	003b      	movs	r3, r7
   16da0:	9000      	str	r0, [sp, #0]
   16da2:	9101      	str	r1, [sp, #4]
   16da4:	0032      	movs	r2, r6
   16da6:	4930      	ldr	r1, [pc, #192]	; (16e68 <fn_debug_rawData+0x158>)
   16da8:	0020      	movs	r0, r4
   16daa:	47c8      	blx	r9
	glcd_tiny_draw_string(0,3,display_str);
   16dac:	0022      	movs	r2, r4
   16dae:	2103      	movs	r1, #3
   16db0:	2000      	movs	r0, #0
   16db2:	47c0      	blx	r8
	sprintf(display_str, "Comp 1    Comp 2  ");
   16db4:	4b26      	ldr	r3, [pc, #152]	; (16e50 <fn_debug_rawData+0x140>)
   16db6:	2213      	movs	r2, #19
   16db8:	492c      	ldr	r1, [pc, #176]	; (16e6c <fn_debug_rawData+0x15c>)
   16dba:	0020      	movs	r0, r4
   16dbc:	4798      	blx	r3
	glcd_tiny_draw_string(0,4,display_str);
   16dbe:	0022      	movs	r2, r4
   16dc0:	2104      	movs	r1, #4
   16dc2:	2000      	movs	r0, #0
   16dc4:	47c0      	blx	r8
	sprintf(display_str, "X: %+0.3f %+0.3f", meas_debug.m1Raw[0], meas_debug.m2Raw[0]);
   16dc6:	9811      	ldr	r0, [sp, #68]	; 0x44
   16dc8:	47a8      	blx	r5
   16dca:	0006      	movs	r6, r0
   16dcc:	9814      	ldr	r0, [sp, #80]	; 0x50
   16dce:	000f      	movs	r7, r1
   16dd0:	47a8      	blx	r5
   16dd2:	003b      	movs	r3, r7
   16dd4:	9000      	str	r0, [sp, #0]
   16dd6:	9101      	str	r1, [sp, #4]
   16dd8:	0032      	movs	r2, r6
   16dda:	4651      	mov	r1, sl
   16ddc:	0020      	movs	r0, r4
   16dde:	47c8      	blx	r9
	glcd_tiny_draw_string(0,5,display_str);
   16de0:	0022      	movs	r2, r4
   16de2:	2105      	movs	r1, #5
   16de4:	2000      	movs	r0, #0
   16de6:	47c0      	blx	r8
	sprintf(display_str, "Y: %+0.3f %+0.3f", meas_debug.m1Raw[1], meas_debug.m2Raw[1]);
   16de8:	9812      	ldr	r0, [sp, #72]	; 0x48
   16dea:	47a8      	blx	r5
   16dec:	0006      	movs	r6, r0
   16dee:	9815      	ldr	r0, [sp, #84]	; 0x54
   16df0:	000f      	movs	r7, r1
   16df2:	47a8      	blx	r5
   16df4:	003b      	movs	r3, r7
   16df6:	9000      	str	r0, [sp, #0]
   16df8:	9101      	str	r1, [sp, #4]
   16dfa:	0032      	movs	r2, r6
   16dfc:	4659      	mov	r1, fp
   16dfe:	0020      	movs	r0, r4
   16e00:	47c8      	blx	r9
	glcd_tiny_draw_string(0,6,display_str);
   16e02:	0022      	movs	r2, r4
   16e04:	2106      	movs	r1, #6
   16e06:	2000      	movs	r0, #0
   16e08:	47c0      	blx	r8
	sprintf(display_str, "Z: %+0.3f %+0.3f Exit", meas_debug.m1Raw[2], meas_debug.m2Raw[2]);
   16e0a:	9813      	ldr	r0, [sp, #76]	; 0x4c
   16e0c:	47a8      	blx	r5
   16e0e:	0006      	movs	r6, r0
   16e10:	9816      	ldr	r0, [sp, #88]	; 0x58
   16e12:	000f      	movs	r7, r1
   16e14:	47a8      	blx	r5
   16e16:	003b      	movs	r3, r7
   16e18:	9000      	str	r0, [sp, #0]
   16e1a:	9101      	str	r1, [sp, #4]
   16e1c:	0032      	movs	r2, r6
   16e1e:	4914      	ldr	r1, [pc, #80]	; (16e70 <fn_debug_rawData+0x160>)
   16e20:	0020      	movs	r0, r4
   16e22:	47c8      	blx	r9
	glcd_tiny_draw_string(0,7,display_str);
   16e24:	0022      	movs	r2, r4
   16e26:	2107      	movs	r1, #7
   16e28:	2000      	movs	r0, #0
   16e2a:	47c0      	blx	r8
	glcd_write();	
   16e2c:	4b11      	ldr	r3, [pc, #68]	; (16e74 <fn_debug_rawData+0x164>)
   16e2e:	4798      	blx	r3
}
   16e30:	b031      	add	sp, #196	; 0xc4
   16e32:	bc3c      	pop	{r2, r3, r4, r5}
   16e34:	4690      	mov	r8, r2
   16e36:	4699      	mov	r9, r3
   16e38:	46a2      	mov	sl, r4
   16e3a:	46ab      	mov	fp, r5
   16e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16e3e:	46c0      	nop			; (mov r8, r8)
   16e40:	0000c995 	.word	0x0000c995
   16e44:	00013805 	.word	0x00013805
   16e48:	200033a8 	.word	0x200033a8
   16e4c:	000260ac 	.word	0x000260ac
   16e50:	0001fd79 	.word	0x0001fd79
   16e54:	000150a1 	.word	0x000150a1
   16e58:	0001fb6d 	.word	0x0001fb6d
   16e5c:	000260c4 	.word	0x000260c4
   16e60:	0001fe91 	.word	0x0001fe91
   16e64:	000260d8 	.word	0x000260d8
   16e68:	000260ec 	.word	0x000260ec
   16e6c:	00026100 	.word	0x00026100
   16e70:	00026114 	.word	0x00026114
   16e74:	0001493d 	.word	0x0001493d

00016e78 <fn_process_azm_quick_cal>:
void fn_process_azm_quick_cal(void){
   16e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	EEPROM_loadCalRawData(azm_quick);
   16e7a:	2001      	movs	r0, #1
   16e7c:	4b16      	ldr	r3, [pc, #88]	; (16ed8 <fn_process_azm_quick_cal+0x60>)
   16e7e:	4798      	blx	r3
	load_cal_report();
   16e80:	4b16      	ldr	r3, [pc, #88]	; (16edc <fn_process_azm_quick_cal+0x64>)
   16e82:	4798      	blx	r3
	nGroups = cal_report.groups;
   16e84:	4b16      	ldr	r3, [pc, #88]	; (16ee0 <fn_process_azm_quick_cal+0x68>)
   16e86:	4a17      	ldr	r2, [pc, #92]	; (16ee4 <fn_process_azm_quick_cal+0x6c>)
   16e88:	6859      	ldr	r1, [r3, #4]
   16e8a:	6011      	str	r1, [r2, #0]
	nPoints = cal_report.points;
   16e8c:	689a      	ldr	r2, [r3, #8]
   16e8e:	4b16      	ldr	r3, [pc, #88]	; (16ee8 <fn_process_azm_quick_cal+0x70>)
   16e90:	601a      	str	r2, [r3, #0]
	glcd_clear_buffer();
   16e92:	4b16      	ldr	r3, [pc, #88]	; (16eec <fn_process_azm_quick_cal+0x74>)
   16e94:	4798      	blx	r3
	sprintf(display_str, "Processing Data...");
   16e96:	4c16      	ldr	r4, [pc, #88]	; (16ef0 <fn_process_azm_quick_cal+0x78>)
   16e98:	4f16      	ldr	r7, [pc, #88]	; (16ef4 <fn_process_azm_quick_cal+0x7c>)
   16e9a:	2213      	movs	r2, #19
   16e9c:	4916      	ldr	r1, [pc, #88]	; (16ef8 <fn_process_azm_quick_cal+0x80>)
   16e9e:	0020      	movs	r0, r4
   16ea0:	47b8      	blx	r7
	glcd_tiny_draw_string(0,1,display_str);
   16ea2:	0022      	movs	r2, r4
   16ea4:	2101      	movs	r1, #1
   16ea6:	2000      	movs	r0, #0
   16ea8:	4e14      	ldr	r6, [pc, #80]	; (16efc <fn_process_azm_quick_cal+0x84>)
   16eaa:	47b0      	blx	r6
	glcd_write();
   16eac:	4d14      	ldr	r5, [pc, #80]	; (16f00 <fn_process_azm_quick_cal+0x88>)
   16eae:	47a8      	blx	r5
	cal_azm_quick_process();
   16eb0:	4b14      	ldr	r3, [pc, #80]	; (16f04 <fn_process_azm_quick_cal+0x8c>)
   16eb2:	4798      	blx	r3
	wdt_reset_count();
   16eb4:	4b14      	ldr	r3, [pc, #80]	; (16f08 <fn_process_azm_quick_cal+0x90>)
   16eb6:	4798      	blx	r3
	sprintf(display_str, "Calibration Complete!");
   16eb8:	2216      	movs	r2, #22
   16eba:	4914      	ldr	r1, [pc, #80]	; (16f0c <fn_process_azm_quick_cal+0x94>)
   16ebc:	0020      	movs	r0, r4
   16ebe:	47b8      	blx	r7
	glcd_tiny_draw_string(0,3,display_str);
   16ec0:	0022      	movs	r2, r4
   16ec2:	2103      	movs	r1, #3
   16ec4:	2000      	movs	r0, #0
   16ec6:	47b0      	blx	r6
	glcd_write();
   16ec8:	47a8      	blx	r5
	delay_s(3);
   16eca:	4811      	ldr	r0, [pc, #68]	; (16f10 <fn_process_azm_quick_cal+0x98>)
   16ecc:	4b11      	ldr	r3, [pc, #68]	; (16f14 <fn_process_azm_quick_cal+0x9c>)
   16ece:	4798      	blx	r3
	current_input = input_state_complete;
   16ed0:	2208      	movs	r2, #8
   16ed2:	4b11      	ldr	r3, [pc, #68]	; (16f18 <fn_process_azm_quick_cal+0xa0>)
   16ed4:	601a      	str	r2, [r3, #0]
}
   16ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16ed8:	0000857d 	.word	0x0000857d
   16edc:	00008d41 	.word	0x00008d41
   16ee0:	20004b4c 	.word	0x20004b4c
   16ee4:	20003924 	.word	0x20003924
   16ee8:	20003340 	.word	0x20003340
   16eec:	00013805 	.word	0x00013805
   16ef0:	200033a8 	.word	0x200033a8
   16ef4:	0001fd79 	.word	0x0001fd79
   16ef8:	000265c0 	.word	0x000265c0
   16efc:	000150a1 	.word	0x000150a1
   16f00:	0001493d 	.word	0x0001493d
   16f04:	000125fd 	.word	0x000125fd
   16f08:	00003c15 	.word	0x00003c15
   16f0c:	000265d4 	.word	0x000265d4
   16f10:	00000bb8 	.word	0x00000bb8
   16f14:	000161e9 	.word	0x000161e9
   16f18:	2000403c 	.word	0x2000403c

00016f1c <fn_aim_abort>:
	
	glcd_write();
}


void fn_aim_abort(void){
   16f1c:	b510      	push	{r4, lr}
	rangefinder_on_off(false);
   16f1e:	4b05      	ldr	r3, [pc, #20]	; (16f34 <fn_aim_abort+0x18>)
   16f20:	2000      	movs	r0, #0
   16f22:	4798      	blx	r3
   16f24:	2204      	movs	r2, #4
   16f26:	4b04      	ldr	r3, [pc, #16]	; (16f38 <fn_aim_abort+0x1c>)
   16f28:	615a      	str	r2, [r3, #20]
	ioport_set_pin_level(laser_reset, false);

	current_input = input_state_complete;
   16f2a:	4b04      	ldr	r3, [pc, #16]	; (16f3c <fn_aim_abort+0x20>)
   16f2c:	3204      	adds	r2, #4
   16f2e:	601a      	str	r2, [r3, #0]
	
}
   16f30:	bd10      	pop	{r4, pc}
   16f32:	46c0      	nop			; (mov r8, r8)
   16f34:	0000c5dd 	.word	0x0000c5dd
   16f38:	40002800 	.word	0x40002800
   16f3c:	2000403c 	.word	0x2000403c

00016f40 <fn_disp_cal_report>:
void  fn_disp_cal_report(void){
   16f40:	b5f0      	push	{r4, r5, r6, r7, lr}
   16f42:	46de      	mov	lr, fp
   16f44:	4657      	mov	r7, sl
   16f46:	464e      	mov	r6, r9
   16f48:	4645      	mov	r5, r8
   16f4a:	b5e0      	push	{r5, r6, r7, lr}
	if (state_change){
   16f4c:	4bbe      	ldr	r3, [pc, #760]	; (17248 <fn_disp_cal_report+0x308>)
void  fn_disp_cal_report(void){
   16f4e:	b087      	sub	sp, #28
	if (state_change){
   16f50:	781b      	ldrb	r3, [r3, #0]
   16f52:	2b00      	cmp	r3, #0
   16f54:	d100      	bne.n	16f58 <fn_disp_cal_report+0x18>
   16f56:	e07d      	b.n	17054 <fn_disp_cal_report+0x114>
		pageView = 1;
   16f58:	2301      	movs	r3, #1
   16f5a:	4ebc      	ldr	r6, [pc, #752]	; (1724c <fn_disp_cal_report+0x30c>)
   16f5c:	7033      	strb	r3, [r6, #0]
	switch(last_input){
   16f5e:	4bbc      	ldr	r3, [pc, #752]	; (17250 <fn_disp_cal_report+0x310>)
   16f60:	681b      	ldr	r3, [r3, #0]
   16f62:	2b03      	cmp	r3, #3
   16f64:	d100      	bne.n	16f68 <fn_disp_cal_report+0x28>
   16f66:	e0fb      	b.n	17160 <fn_disp_cal_report+0x220>
	glcd_clear_buffer();
   16f68:	4bba      	ldr	r3, [pc, #744]	; (17254 <fn_disp_cal_report+0x314>)
   16f6a:	4798      	blx	r3
	sprintf(display_str, "Calibration Report:");
   16f6c:	4cba      	ldr	r4, [pc, #744]	; (17258 <fn_disp_cal_report+0x318>)
   16f6e:	4bbb      	ldr	r3, [pc, #748]	; (1725c <fn_disp_cal_report+0x31c>)
   16f70:	2214      	movs	r2, #20
   16f72:	49bb      	ldr	r1, [pc, #748]	; (17260 <fn_disp_cal_report+0x320>)
   16f74:	0020      	movs	r0, r4
   16f76:	4699      	mov	r9, r3
   16f78:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   16f7a:	0022      	movs	r2, r4
   16f7c:	2100      	movs	r1, #0
   16f7e:	2000      	movs	r0, #0
   16f80:	4db8      	ldr	r5, [pc, #736]	; (17264 <fn_disp_cal_report+0x324>)
   16f82:	47a8      	blx	r5
	switch(pageView){
   16f84:	7833      	ldrb	r3, [r6, #0]
   16f86:	2b02      	cmp	r3, #2
   16f88:	d100      	bne.n	16f8c <fn_disp_cal_report+0x4c>
   16f8a:	e0f4      	b.n	17176 <fn_disp_cal_report+0x236>
   16f8c:	d96f      	bls.n	1706e <fn_disp_cal_report+0x12e>
   16f8e:	2b03      	cmp	r3, #3
   16f90:	d100      	bne.n	16f94 <fn_disp_cal_report+0x54>
   16f92:	e1a9      	b.n	172e8 <fn_disp_cal_report+0x3a8>
   16f94:	2b04      	cmp	r3, #4
   16f96:	d148      	bne.n	1702a <fn_disp_cal_report+0xea>
			sprintf(display_str, "Distance");
   16f98:	2209      	movs	r2, #9
   16f9a:	49b3      	ldr	r1, [pc, #716]	; (17268 <fn_disp_cal_report+0x328>)
   16f9c:	0020      	movs	r0, r4
   16f9e:	47c8      	blx	r9
			glcd_tiny_draw_string(0,1,display_str);
   16fa0:	0022      	movs	r2, r4
   16fa2:	2101      	movs	r1, #1
   16fa4:	2000      	movs	r0, #0
   16fa6:	47a8      	blx	r5
				cal_report.time_rangeFinder.hours, cal_report.time_rangeFinder.minutes, cal_report.time_rangeFinder.seconds);
   16fa8:	2078      	movs	r0, #120	; 0x78
				cal_report.time_rangeFinder.year, cal_report.time_rangeFinder.month, cal_report.time_rangeFinder.date,
   16faa:	237d      	movs	r3, #125	; 0x7d
   16fac:	227e      	movs	r2, #126	; 0x7e
   16fae:	49af      	ldr	r1, [pc, #700]	; (1726c <fn_disp_cal_report+0x32c>)
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   16fb0:	4faf      	ldr	r7, [pc, #700]	; (17270 <fn_disp_cal_report+0x330>)
   16fb2:	5c08      	ldrb	r0, [r1, r0]
   16fb4:	5ccb      	ldrb	r3, [r1, r3]
   16fb6:	5c8a      	ldrb	r2, [r1, r2]
   16fb8:	9003      	str	r0, [sp, #12]
				cal_report.time_rangeFinder.hours, cal_report.time_rangeFinder.minutes, cal_report.time_rangeFinder.seconds);
   16fba:	2079      	movs	r0, #121	; 0x79
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   16fbc:	5c08      	ldrb	r0, [r1, r0]
   16fbe:	46b8      	mov	r8, r7
   16fc0:	9002      	str	r0, [sp, #8]
				cal_report.time_rangeFinder.hours, cal_report.time_rangeFinder.minutes, cal_report.time_rangeFinder.seconds);
   16fc2:	207a      	movs	r0, #122	; 0x7a
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   16fc4:	5c08      	ldrb	r0, [r1, r0]
   16fc6:	9001      	str	r0, [sp, #4]
				cal_report.time_rangeFinder.year, cal_report.time_rangeFinder.month, cal_report.time_rangeFinder.date,
   16fc8:	207c      	movs	r0, #124	; 0x7c
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   16fca:	5c09      	ldrb	r1, [r1, r0]
   16fcc:	0020      	movs	r0, r4
   16fce:	9100      	str	r1, [sp, #0]
   16fd0:	49a8      	ldr	r1, [pc, #672]	; (17274 <fn_disp_cal_report+0x334>)
   16fd2:	47b8      	blx	r7
			glcd_tiny_draw_string(0,2,display_str);
   16fd4:	0022      	movs	r2, r4
   16fd6:	2102      	movs	r1, #2
   16fd8:	2000      	movs	r0, #0
   16fda:	47a8      	blx	r5
			sprintf(display_str,"Rangefinder Offset:");
   16fdc:	2214      	movs	r2, #20
   16fde:	49a6      	ldr	r1, [pc, #664]	; (17278 <fn_disp_cal_report+0x338>)
   16fe0:	0020      	movs	r0, r4
   16fe2:	47c8      	blx	r9
			glcd_tiny_draw_string(0,4,display_str);
   16fe4:	0022      	movs	r2, r4
   16fe6:	2104      	movs	r1, #4
   16fe8:	2000      	movs	r0, #0
   16fea:	47a8      	blx	r5
			sprintf(display_str,"  %.4f meters", dist_calst.dist_offset);
   16fec:	4ba3      	ldr	r3, [pc, #652]	; (1727c <fn_disp_cal_report+0x33c>)
   16fee:	4fa4      	ldr	r7, [pc, #656]	; (17280 <fn_disp_cal_report+0x340>)
   16ff0:	6d98      	ldr	r0, [r3, #88]	; 0x58
   16ff2:	4699      	mov	r9, r3
   16ff4:	47b8      	blx	r7
   16ff6:	000b      	movs	r3, r1
   16ff8:	0002      	movs	r2, r0
   16ffa:	49a2      	ldr	r1, [pc, #648]	; (17284 <fn_disp_cal_report+0x344>)
   16ffc:	0020      	movs	r0, r4
   16ffe:	47c0      	blx	r8
			glcd_tiny_draw_string(0,5,display_str);
   17000:	0022      	movs	r2, r4
   17002:	2105      	movs	r1, #5
   17004:	2000      	movs	r0, #0
   17006:	47a8      	blx	r5
			sprintf(display_str,"  %.4f feet", dist_calst.dist_offset*MT2FT);
   17008:	464b      	mov	r3, r9
   1700a:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1700c:	47b8      	blx	r7
   1700e:	4a9e      	ldr	r2, [pc, #632]	; (17288 <fn_disp_cal_report+0x348>)
   17010:	4b9e      	ldr	r3, [pc, #632]	; (1728c <fn_disp_cal_report+0x34c>)
   17012:	4f9f      	ldr	r7, [pc, #636]	; (17290 <fn_disp_cal_report+0x350>)
   17014:	47b8      	blx	r7
   17016:	0002      	movs	r2, r0
   17018:	000b      	movs	r3, r1
   1701a:	0020      	movs	r0, r4
   1701c:	499d      	ldr	r1, [pc, #628]	; (17294 <fn_disp_cal_report+0x354>)
   1701e:	47c0      	blx	r8
			glcd_tiny_draw_string(0,6,display_str);
   17020:	0022      	movs	r2, r4
   17022:	2106      	movs	r1, #6
   17024:	2000      	movs	r0, #0
   17026:	47a8      	blx	r5
   17028:	7833      	ldrb	r3, [r6, #0]
	switch (pageView){
   1702a:	2b01      	cmp	r3, #1
   1702c:	d100      	bne.n	17030 <fn_disp_cal_report+0xf0>
   1702e:	e089      	b.n	17144 <fn_disp_cal_report+0x204>
   17030:	2b04      	cmp	r3, #4
   17032:	d000      	beq.n	17036 <fn_disp_cal_report+0xf6>
   17034:	e098      	b.n	17168 <fn_disp_cal_report+0x228>
			drawSoftKeys("","<","","Exit");
   17036:	4898      	ldr	r0, [pc, #608]	; (17298 <fn_disp_cal_report+0x358>)
   17038:	4b98      	ldr	r3, [pc, #608]	; (1729c <fn_disp_cal_report+0x35c>)
   1703a:	0002      	movs	r2, r0
   1703c:	4998      	ldr	r1, [pc, #608]	; (172a0 <fn_disp_cal_report+0x360>)
   1703e:	4c99      	ldr	r4, [pc, #612]	; (172a4 <fn_disp_cal_report+0x364>)
   17040:	47a0      	blx	r4
	glcd_write();
   17042:	4b99      	ldr	r3, [pc, #612]	; (172a8 <fn_disp_cal_report+0x368>)
   17044:	4798      	blx	r3
}
   17046:	b007      	add	sp, #28
   17048:	bc3c      	pop	{r2, r3, r4, r5}
   1704a:	4690      	mov	r8, r2
   1704c:	4699      	mov	r9, r3
   1704e:	46a2      	mov	sl, r4
   17050:	46ab      	mov	fp, r5
   17052:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch(last_input){
   17054:	4b7e      	ldr	r3, [pc, #504]	; (17250 <fn_disp_cal_report+0x310>)
			if (pageView>1){pageView--;}
   17056:	4e7d      	ldr	r6, [pc, #500]	; (1724c <fn_disp_cal_report+0x30c>)
	switch(last_input){
   17058:	681b      	ldr	r3, [r3, #0]
   1705a:	2b02      	cmp	r3, #2
   1705c:	d079      	beq.n	17152 <fn_disp_cal_report+0x212>
   1705e:	2b03      	cmp	r3, #3
   17060:	d000      	beq.n	17064 <fn_disp_cal_report+0x124>
   17062:	e781      	b.n	16f68 <fn_disp_cal_report+0x28>
   17064:	7833      	ldrb	r3, [r6, #0]
			if (pageView<maxPages){pageView++;}
   17066:	2b03      	cmp	r3, #3
   17068:	d900      	bls.n	1706c <fn_disp_cal_report+0x12c>
   1706a:	e77d      	b.n	16f68 <fn_disp_cal_report+0x28>
   1706c:	e079      	b.n	17162 <fn_disp_cal_report+0x222>
	switch(pageView){
   1706e:	2b01      	cmp	r3, #1
   17070:	d1de      	bne.n	17030 <fn_disp_cal_report+0xf0>
			sprintf(display_str, "Inclination & Azimuth");
   17072:	2216      	movs	r2, #22
   17074:	498d      	ldr	r1, [pc, #564]	; (172ac <fn_disp_cal_report+0x36c>)
   17076:	0020      	movs	r0, r4
   17078:	47c8      	blx	r9
			glcd_tiny_draw_string(0,1,display_str);
   1707a:	0022      	movs	r2, r4
   1707c:	2101      	movs	r1, #1
   1707e:	2000      	movs	r0, #0
   17080:	47a8      	blx	r5
				cal_report.time_inc_azm.year, cal_report.time_inc_azm.month, cal_report.time_inc_azm.date,
   17082:	4b7a      	ldr	r3, [pc, #488]	; (1726c <fn_disp_cal_report+0x32c>)
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   17084:	4f7a      	ldr	r7, [pc, #488]	; (17270 <fn_disp_cal_report+0x330>)
				cal_report.time_inc_azm.year, cal_report.time_inc_azm.month, cal_report.time_inc_azm.date,
   17086:	469b      	mov	fp, r3
   17088:	2355      	movs	r3, #85	; 0x55
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   1708a:	465a      	mov	r2, fp
   1708c:	4659      	mov	r1, fp
   1708e:	5cd3      	ldrb	r3, [r2, r3]
				cal_report.time_inc_azm.year, cal_report.time_inc_azm.month, cal_report.time_inc_azm.date,
   17090:	2256      	movs	r2, #86	; 0x56
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   17092:	4658      	mov	r0, fp
   17094:	5c8a      	ldrb	r2, [r1, r2]
				cal_report.time_inc_azm.hours, cal_report.time_inc_azm.minutes, cal_report.time_inc_azm.seconds);
   17096:	2150      	movs	r1, #80	; 0x50
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   17098:	5c41      	ldrb	r1, [r0, r1]
   1709a:	46b8      	mov	r8, r7
   1709c:	9103      	str	r1, [sp, #12]
				cal_report.time_inc_azm.hours, cal_report.time_inc_azm.minutes, cal_report.time_inc_azm.seconds);
   1709e:	2151      	movs	r1, #81	; 0x51
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   170a0:	5c41      	ldrb	r1, [r0, r1]
   170a2:	9102      	str	r1, [sp, #8]
				cal_report.time_inc_azm.hours, cal_report.time_inc_azm.minutes, cal_report.time_inc_azm.seconds);
   170a4:	2152      	movs	r1, #82	; 0x52
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   170a6:	5c41      	ldrb	r1, [r0, r1]
   170a8:	9101      	str	r1, [sp, #4]
				cal_report.time_inc_azm.year, cal_report.time_inc_azm.month, cal_report.time_inc_azm.date,
   170aa:	2154      	movs	r1, #84	; 0x54
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   170ac:	5c41      	ldrb	r1, [r0, r1]
   170ae:	0020      	movs	r0, r4
   170b0:	9100      	str	r1, [sp, #0]
   170b2:	4970      	ldr	r1, [pc, #448]	; (17274 <fn_disp_cal_report+0x334>)
   170b4:	47b8      	blx	r7
			glcd_tiny_draw_string(0,2,display_str);
   170b6:	0022      	movs	r2, r4
   170b8:	2102      	movs	r1, #2
   170ba:	2000      	movs	r0, #0
   170bc:	47a8      	blx	r5
			sprintf(display_str,"4-Point Groups: %d", cal_report.groups);
   170be:	465b      	mov	r3, fp
   170c0:	497b      	ldr	r1, [pc, #492]	; (172b0 <fn_disp_cal_report+0x370>)
   170c2:	685a      	ldr	r2, [r3, #4]
   170c4:	0020      	movs	r0, r4
   170c6:	47b8      	blx	r7
			glcd_tiny_draw_string(0,3,display_str);
   170c8:	0022      	movs	r2, r4
   170ca:	2103      	movs	r1, #3
   170cc:	2000      	movs	r0, #0
   170ce:	47a8      	blx	r5
			sprintf(display_str,"Azm Stdev: %.3f", cal_report.azm_angle_err);
   170d0:	4b6b      	ldr	r3, [pc, #428]	; (17280 <fn_disp_cal_report+0x340>)
   170d2:	4699      	mov	r9, r3
   170d4:	465b      	mov	r3, fp
   170d6:	6a58      	ldr	r0, [r3, #36]	; 0x24
   170d8:	47c8      	blx	r9
   170da:	000b      	movs	r3, r1
   170dc:	0002      	movs	r2, r0
   170de:	4975      	ldr	r1, [pc, #468]	; (172b4 <fn_disp_cal_report+0x374>)
   170e0:	0020      	movs	r0, r4
   170e2:	47b8      	blx	r7
			glcd_tiny_draw_string(0,5,display_str);
   170e4:	0022      	movs	r2, r4
   170e6:	2105      	movs	r1, #5
   170e8:	2000      	movs	r0, #0
   170ea:	47a8      	blx	r5
			glcd_draw_circle(98, 41, 1, BLACK);// Draw degree symbol
   170ec:	2201      	movs	r2, #1
   170ee:	2301      	movs	r3, #1
   170f0:	2129      	movs	r1, #41	; 0x29
   170f2:	2062      	movs	r0, #98	; 0x62
   170f4:	4f70      	ldr	r7, [pc, #448]	; (172b8 <fn_disp_cal_report+0x378>)
   170f6:	47b8      	blx	r7
			sprintf(display_str,"Inc Stdev: %.3f", cal_report.inc_angle_err);
   170f8:	465b      	mov	r3, fp
   170fa:	6a18      	ldr	r0, [r3, #32]
   170fc:	47c8      	blx	r9
   170fe:	000b      	movs	r3, r1
   17100:	0002      	movs	r2, r0
   17102:	496e      	ldr	r1, [pc, #440]	; (172bc <fn_disp_cal_report+0x37c>)
   17104:	0020      	movs	r0, r4
   17106:	47c0      	blx	r8
			glcd_tiny_draw_string(0,6,display_str);
   17108:	0022      	movs	r2, r4
   1710a:	2106      	movs	r1, #6
   1710c:	2000      	movs	r0, #0
   1710e:	47a8      	blx	r5
			glcd_draw_circle(98, 49, 1, BLACK);// Draw degree symbol
   17110:	2301      	movs	r3, #1
   17112:	2201      	movs	r2, #1
   17114:	2131      	movs	r1, #49	; 0x31
   17116:	2062      	movs	r0, #98	; 0x62
   17118:	47b8      	blx	r7
			if (options.current_unit_temp==fahrenheit){
   1711a:	4b69      	ldr	r3, [pc, #420]	; (172c0 <fn_disp_cal_report+0x380>)
   1711c:	795b      	ldrb	r3, [r3, #5]
   1711e:	2b05      	cmp	r3, #5
   17120:	d100      	bne.n	17124 <fn_disp_cal_report+0x1e4>
   17122:	e14a      	b.n	173ba <fn_disp_cal_report+0x47a>
				sprintf(display_str,"Temp: %0.1f C", cal_report.time_inc_azm.temperatureC);
   17124:	465b      	mov	r3, fp
   17126:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   17128:	47c8      	blx	r9
   1712a:	0002      	movs	r2, r0
   1712c:	000b      	movs	r3, r1
   1712e:	0020      	movs	r0, r4
   17130:	4964      	ldr	r1, [pc, #400]	; (172c4 <fn_disp_cal_report+0x384>)
   17132:	47c0      	blx	r8
			glcd_tiny_draw_string(0,7,display_str);
   17134:	0022      	movs	r2, r4
   17136:	2107      	movs	r1, #7
   17138:	2000      	movs	r0, #0
   1713a:	47a8      	blx	r5
   1713c:	7833      	ldrb	r3, [r6, #0]
	switch (pageView){
   1713e:	2b01      	cmp	r3, #1
   17140:	d000      	beq.n	17144 <fn_disp_cal_report+0x204>
   17142:	e775      	b.n	17030 <fn_disp_cal_report+0xf0>
			drawSoftKeys("","",">","Exit");
   17144:	4854      	ldr	r0, [pc, #336]	; (17298 <fn_disp_cal_report+0x358>)
   17146:	4b55      	ldr	r3, [pc, #340]	; (1729c <fn_disp_cal_report+0x35c>)
   17148:	4a5f      	ldr	r2, [pc, #380]	; (172c8 <fn_disp_cal_report+0x388>)
   1714a:	0001      	movs	r1, r0
   1714c:	4c55      	ldr	r4, [pc, #340]	; (172a4 <fn_disp_cal_report+0x364>)
   1714e:	47a0      	blx	r4
			break;
   17150:	e777      	b.n	17042 <fn_disp_cal_report+0x102>
			if (pageView>1){pageView--;}
   17152:	7833      	ldrb	r3, [r6, #0]
   17154:	2b01      	cmp	r3, #1
   17156:	d800      	bhi.n	1715a <fn_disp_cal_report+0x21a>
   17158:	e706      	b.n	16f68 <fn_disp_cal_report+0x28>
   1715a:	3b01      	subs	r3, #1
   1715c:	7033      	strb	r3, [r6, #0]
   1715e:	e703      	b.n	16f68 <fn_disp_cal_report+0x28>
	switch(last_input){
   17160:	2301      	movs	r3, #1
			if (pageView<maxPages){pageView++;}
   17162:	3301      	adds	r3, #1
   17164:	7033      	strb	r3, [r6, #0]
   17166:	e6ff      	b.n	16f68 <fn_disp_cal_report+0x28>
			drawSoftKeys("","<",">","Exit");
   17168:	4b4c      	ldr	r3, [pc, #304]	; (1729c <fn_disp_cal_report+0x35c>)
   1716a:	4a57      	ldr	r2, [pc, #348]	; (172c8 <fn_disp_cal_report+0x388>)
   1716c:	494c      	ldr	r1, [pc, #304]	; (172a0 <fn_disp_cal_report+0x360>)
   1716e:	484a      	ldr	r0, [pc, #296]	; (17298 <fn_disp_cal_report+0x358>)
   17170:	4c4c      	ldr	r4, [pc, #304]	; (172a4 <fn_disp_cal_report+0x364>)
   17172:	47a0      	blx	r4
   17174:	e765      	b.n	17042 <fn_disp_cal_report+0x102>
			sprintf(display_str, "Inclination:");
   17176:	220d      	movs	r2, #13
   17178:	4954      	ldr	r1, [pc, #336]	; (172cc <fn_disp_cal_report+0x38c>)
   1717a:	0020      	movs	r0, r4
   1717c:	47c8      	blx	r9
			glcd_tiny_draw_string(0,1,display_str);
   1717e:	0022      	movs	r2, r4
   17180:	2101      	movs	r1, #1
   17182:	2000      	movs	r0, #0
   17184:	47a8      	blx	r5
			cal_report.time_inc_azm.year, cal_report.time_inc_azm.month, cal_report.time_inc_azm.date,
   17186:	4b39      	ldr	r3, [pc, #228]	; (1726c <fn_disp_cal_report+0x32c>)
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   17188:	4f39      	ldr	r7, [pc, #228]	; (17270 <fn_disp_cal_report+0x330>)
			cal_report.time_inc_azm.year, cal_report.time_inc_azm.month, cal_report.time_inc_azm.date,
   1718a:	469b      	mov	fp, r3
   1718c:	2355      	movs	r3, #85	; 0x55
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   1718e:	465a      	mov	r2, fp
   17190:	4659      	mov	r1, fp
   17192:	5cd3      	ldrb	r3, [r2, r3]
			cal_report.time_inc_azm.year, cal_report.time_inc_azm.month, cal_report.time_inc_azm.date,
   17194:	2256      	movs	r2, #86	; 0x56
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   17196:	4658      	mov	r0, fp
   17198:	5c8a      	ldrb	r2, [r1, r2]
			cal_report.time_inc_azm.hours, cal_report.time_inc_azm.minutes, cal_report.time_inc_azm.seconds);
   1719a:	2150      	movs	r1, #80	; 0x50
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   1719c:	5c41      	ldrb	r1, [r0, r1]
   1719e:	9103      	str	r1, [sp, #12]
			cal_report.time_inc_azm.hours, cal_report.time_inc_azm.minutes, cal_report.time_inc_azm.seconds);
   171a0:	2151      	movs	r1, #81	; 0x51
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   171a2:	5c41      	ldrb	r1, [r0, r1]
   171a4:	9102      	str	r1, [sp, #8]
			cal_report.time_inc_azm.hours, cal_report.time_inc_azm.minutes, cal_report.time_inc_azm.seconds);
   171a6:	2152      	movs	r1, #82	; 0x52
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   171a8:	5c41      	ldrb	r1, [r0, r1]
   171aa:	9101      	str	r1, [sp, #4]
			cal_report.time_inc_azm.year, cal_report.time_inc_azm.month, cal_report.time_inc_azm.date,
   171ac:	2154      	movs	r1, #84	; 0x54
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   171ae:	5c41      	ldrb	r1, [r0, r1]
   171b0:	0020      	movs	r0, r4
   171b2:	9100      	str	r1, [sp, #0]
   171b4:	492f      	ldr	r1, [pc, #188]	; (17274 <fn_disp_cal_report+0x334>)
   171b6:	47b8      	blx	r7
			glcd_tiny_draw_string(0,2,display_str);
   171b8:	0022      	movs	r2, r4
   171ba:	2102      	movs	r1, #2
   171bc:	2000      	movs	r0, #0
   171be:	47a8      	blx	r5
			sprintf(display_str,"A1-A2 Delta X,Y,Z %%");
   171c0:	4943      	ldr	r1, [pc, #268]	; (172d0 <fn_disp_cal_report+0x390>)
   171c2:	0020      	movs	r0, r4
   171c4:	47b8      	blx	r7
			glcd_tiny_draw_string(0,3,display_str);
   171c6:	0022      	movs	r2, r4
   171c8:	2103      	movs	r1, #3
   171ca:	2000      	movs	r0, #0
   171cc:	47a8      	blx	r5
				cal_report.disp_stdev_acc[0]*100, cal_report.disp_stdev_acc[1]*100, cal_report.disp_stdev_acc[2]*100);
   171ce:	4b41      	ldr	r3, [pc, #260]	; (172d4 <fn_disp_cal_report+0x394>)
   171d0:	4941      	ldr	r1, [pc, #260]	; (172d8 <fn_disp_cal_report+0x398>)
   171d2:	469a      	mov	sl, r3
   171d4:	465b      	mov	r3, fp
   171d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
   171d8:	47d0      	blx	sl
			sprintf(display_str,"%.3f, %.3f, %.3f",
   171da:	4b29      	ldr	r3, [pc, #164]	; (17280 <fn_disp_cal_report+0x340>)
   171dc:	4699      	mov	r9, r3
   171de:	4798      	blx	r3
				cal_report.disp_stdev_acc[0]*100, cal_report.disp_stdev_acc[1]*100, cal_report.disp_stdev_acc[2]*100);
   171e0:	465b      	mov	r3, fp
			sprintf(display_str,"%.3f, %.3f, %.3f",
   171e2:	9004      	str	r0, [sp, #16]
   171e4:	9105      	str	r1, [sp, #20]
				cal_report.disp_stdev_acc[0]*100, cal_report.disp_stdev_acc[1]*100, cal_report.disp_stdev_acc[2]*100);
   171e6:	6c18      	ldr	r0, [r3, #64]	; 0x40
   171e8:	493b      	ldr	r1, [pc, #236]	; (172d8 <fn_disp_cal_report+0x398>)
   171ea:	47d0      	blx	sl
			sprintf(display_str,"%.3f, %.3f, %.3f",
   171ec:	47c8      	blx	r9
				cal_report.disp_stdev_acc[0]*100, cal_report.disp_stdev_acc[1]*100, cal_report.disp_stdev_acc[2]*100);
   171ee:	465b      	mov	r3, fp
			sprintf(display_str,"%.3f, %.3f, %.3f",
   171f0:	9002      	str	r0, [sp, #8]
   171f2:	9103      	str	r1, [sp, #12]
				cal_report.disp_stdev_acc[0]*100, cal_report.disp_stdev_acc[1]*100, cal_report.disp_stdev_acc[2]*100);
   171f4:	4938      	ldr	r1, [pc, #224]	; (172d8 <fn_disp_cal_report+0x398>)
   171f6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
   171f8:	47d0      	blx	sl
			sprintf(display_str,"%.3f, %.3f, %.3f",
   171fa:	47c8      	blx	r9
   171fc:	9a04      	ldr	r2, [sp, #16]
   171fe:	9b05      	ldr	r3, [sp, #20]
   17200:	9000      	str	r0, [sp, #0]
   17202:	9101      	str	r1, [sp, #4]
   17204:	4935      	ldr	r1, [pc, #212]	; (172dc <fn_disp_cal_report+0x39c>)
   17206:	0020      	movs	r0, r4
   17208:	47b8      	blx	r7
			glcd_tiny_draw_string(0,4,display_str);
   1720a:	0022      	movs	r2, r4
   1720c:	2104      	movs	r1, #4
   1720e:	2000      	movs	r0, #0
   17210:	47a8      	blx	r5
			sprintf(display_str,"Magnitude Error %%");
   17212:	4933      	ldr	r1, [pc, #204]	; (172e0 <fn_disp_cal_report+0x3a0>)
   17214:	0020      	movs	r0, r4
   17216:	47b8      	blx	r7
			glcd_tiny_draw_string(0,5,display_str);
   17218:	0022      	movs	r2, r4
   1721a:	2105      	movs	r1, #5
   1721c:	2000      	movs	r0, #0
   1721e:	47a8      	blx	r5
			sprintf(display_str,"A1:%.3f A2:%.3f", cal_report.mag_stdev_a1*100, cal_report.mag_stdev_a2*100);
   17220:	465b      	mov	r3, fp
   17222:	492d      	ldr	r1, [pc, #180]	; (172d8 <fn_disp_cal_report+0x398>)
   17224:	6a98      	ldr	r0, [r3, #40]	; 0x28
   17226:	47d0      	blx	sl
   17228:	47c8      	blx	r9
   1722a:	465b      	mov	r3, fp
   1722c:	9004      	str	r0, [sp, #16]
   1722e:	9105      	str	r1, [sp, #20]
   17230:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   17232:	4929      	ldr	r1, [pc, #164]	; (172d8 <fn_disp_cal_report+0x398>)
   17234:	47d0      	blx	sl
   17236:	47c8      	blx	r9
   17238:	9a04      	ldr	r2, [sp, #16]
   1723a:	9b05      	ldr	r3, [sp, #20]
   1723c:	9000      	str	r0, [sp, #0]
   1723e:	9101      	str	r1, [sp, #4]
   17240:	4928      	ldr	r1, [pc, #160]	; (172e4 <fn_disp_cal_report+0x3a4>)
   17242:	0020      	movs	r0, r4
   17244:	47b8      	blx	r7
   17246:	e6eb      	b.n	17020 <fn_disp_cal_report+0xe0>
   17248:	200001d0 	.word	0x200001d0
   1724c:	20000f26 	.word	0x20000f26
   17250:	200044f0 	.word	0x200044f0
   17254:	00013805 	.word	0x00013805
   17258:	200033a8 	.word	0x200033a8
   1725c:	0001fd79 	.word	0x0001fd79
   17260:	0002612c 	.word	0x0002612c
   17264:	000150a1 	.word	0x000150a1
   17268:	0002625c 	.word	0x0002625c
   1726c:	20004b4c 	.word	0x20004b4c
   17270:	0001fe91 	.word	0x0001fe91
   17274:	00026158 	.word	0x00026158
   17278:	00026268 	.word	0x00026268
   1727c:	20005450 	.word	0x20005450
   17280:	0001fb6d 	.word	0x0001fb6d
   17284:	0002627c 	.word	0x0002627c
   17288:	0abb44e5 	.word	0x0abb44e5
   1728c:	400a3f29 	.word	0x400a3f29
   17290:	0001eea5 	.word	0x0001eea5
   17294:	0002628c 	.word	0x0002628c
   17298:	000252c0 	.word	0x000252c0
   1729c:	00026298 	.word	0x00026298
   172a0:	00024d78 	.word	0x00024d78
   172a4:	000080b9 	.word	0x000080b9
   172a8:	0001493d 	.word	0x0001493d
   172ac:	00026140 	.word	0x00026140
   172b0:	00026178 	.word	0x00026178
   172b4:	0002618c 	.word	0x0002618c
   172b8:	00013f05 	.word	0x00013f05
   172bc:	0002619c 	.word	0x0002619c
   172c0:	2000332c 	.word	0x2000332c
   172c4:	000261bc 	.word	0x000261bc
   172c8:	00024d7c 	.word	0x00024d7c
   172cc:	000261cc 	.word	0x000261cc
   172d0:	000261dc 	.word	0x000261dc
   172d4:	0001d939 	.word	0x0001d939
   172d8:	42c80000 	.word	0x42c80000
   172dc:	000261f4 	.word	0x000261f4
   172e0:	00026208 	.word	0x00026208
   172e4:	0002621c 	.word	0x0002621c
			sprintf(display_str, "Azimuth");
   172e8:	2208      	movs	r2, #8
   172ea:	4938      	ldr	r1, [pc, #224]	; (173cc <fn_disp_cal_report+0x48c>)
   172ec:	0020      	movs	r0, r4
   172ee:	47c8      	blx	r9
			glcd_tiny_draw_string(0,1,display_str);
   172f0:	0022      	movs	r2, r4
   172f2:	2101      	movs	r1, #1
   172f4:	2000      	movs	r0, #0
   172f6:	47a8      	blx	r5
			cal_report.time_quick_azm.year, cal_report.time_quick_azm.month, cal_report.time_quick_azm.date,
   172f8:	4b35      	ldr	r3, [pc, #212]	; (173d0 <fn_disp_cal_report+0x490>)
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   172fa:	4f36      	ldr	r7, [pc, #216]	; (173d4 <fn_disp_cal_report+0x494>)
			cal_report.time_quick_azm.year, cal_report.time_quick_azm.month, cal_report.time_quick_azm.date,
   172fc:	469b      	mov	fp, r3
   172fe:	2369      	movs	r3, #105	; 0x69
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   17300:	465a      	mov	r2, fp
   17302:	4659      	mov	r1, fp
   17304:	5cd3      	ldrb	r3, [r2, r3]
			cal_report.time_quick_azm.year, cal_report.time_quick_azm.month, cal_report.time_quick_azm.date,
   17306:	226a      	movs	r2, #106	; 0x6a
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   17308:	4658      	mov	r0, fp
   1730a:	5c8a      	ldrb	r2, [r1, r2]
			cal_report.time_quick_azm.hours, cal_report.time_quick_azm.minutes, cal_report.time_quick_azm.seconds);
   1730c:	2164      	movs	r1, #100	; 0x64
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   1730e:	5c41      	ldrb	r1, [r0, r1]
   17310:	9103      	str	r1, [sp, #12]
			cal_report.time_quick_azm.hours, cal_report.time_quick_azm.minutes, cal_report.time_quick_azm.seconds);
   17312:	2165      	movs	r1, #101	; 0x65
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   17314:	5c41      	ldrb	r1, [r0, r1]
   17316:	9102      	str	r1, [sp, #8]
			cal_report.time_quick_azm.hours, cal_report.time_quick_azm.minutes, cal_report.time_quick_azm.seconds);
   17318:	2166      	movs	r1, #102	; 0x66
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   1731a:	5c41      	ldrb	r1, [r0, r1]
   1731c:	9101      	str	r1, [sp, #4]
			cal_report.time_quick_azm.year, cal_report.time_quick_azm.month, cal_report.time_quick_azm.date,
   1731e:	2168      	movs	r1, #104	; 0x68
			sprintf(display_str,"20%02x.%02x.%02x@%02x:%02x:%02x",
   17320:	5c41      	ldrb	r1, [r0, r1]
   17322:	0020      	movs	r0, r4
   17324:	9100      	str	r1, [sp, #0]
   17326:	492c      	ldr	r1, [pc, #176]	; (173d8 <fn_disp_cal_report+0x498>)
   17328:	47b8      	blx	r7
			glcd_tiny_draw_string(0,2,display_str);
   1732a:	0022      	movs	r2, r4
   1732c:	2102      	movs	r1, #2
   1732e:	2000      	movs	r0, #0
   17330:	47a8      	blx	r5
			sprintf(display_str,"M1-M2 Delta X,Y,Z %%");
   17332:	492a      	ldr	r1, [pc, #168]	; (173dc <fn_disp_cal_report+0x49c>)
   17334:	0020      	movs	r0, r4
   17336:	47b8      	blx	r7
			glcd_tiny_draw_string(0,3,display_str);
   17338:	0022      	movs	r2, r4
   1733a:	2103      	movs	r1, #3
   1733c:	2000      	movs	r0, #0
   1733e:	47a8      	blx	r5
			cal_report.disp_stdev_comp[0]*100, cal_report.disp_stdev_comp[1]*100, cal_report.disp_stdev_comp[2]*100);
   17340:	4b27      	ldr	r3, [pc, #156]	; (173e0 <fn_disp_cal_report+0x4a0>)
   17342:	4928      	ldr	r1, [pc, #160]	; (173e4 <fn_disp_cal_report+0x4a4>)
   17344:	469a      	mov	sl, r3
   17346:	465b      	mov	r3, fp
   17348:	6c58      	ldr	r0, [r3, #68]	; 0x44
   1734a:	47d0      	blx	sl
			sprintf(display_str,"%.3f, %.3f, %.3f",
   1734c:	4b26      	ldr	r3, [pc, #152]	; (173e8 <fn_disp_cal_report+0x4a8>)
   1734e:	4699      	mov	r9, r3
   17350:	4798      	blx	r3
			cal_report.disp_stdev_comp[0]*100, cal_report.disp_stdev_comp[1]*100, cal_report.disp_stdev_comp[2]*100);
   17352:	465b      	mov	r3, fp
			sprintf(display_str,"%.3f, %.3f, %.3f",
   17354:	9004      	str	r0, [sp, #16]
   17356:	9105      	str	r1, [sp, #20]
			cal_report.disp_stdev_comp[0]*100, cal_report.disp_stdev_comp[1]*100, cal_report.disp_stdev_comp[2]*100);
   17358:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   1735a:	4922      	ldr	r1, [pc, #136]	; (173e4 <fn_disp_cal_report+0x4a4>)
   1735c:	47d0      	blx	sl
			sprintf(display_str,"%.3f, %.3f, %.3f",
   1735e:	47c8      	blx	r9
			cal_report.disp_stdev_comp[0]*100, cal_report.disp_stdev_comp[1]*100, cal_report.disp_stdev_comp[2]*100);
   17360:	465b      	mov	r3, fp
			sprintf(display_str,"%.3f, %.3f, %.3f",
   17362:	9002      	str	r0, [sp, #8]
   17364:	9103      	str	r1, [sp, #12]
			cal_report.disp_stdev_comp[0]*100, cal_report.disp_stdev_comp[1]*100, cal_report.disp_stdev_comp[2]*100);
   17366:	491f      	ldr	r1, [pc, #124]	; (173e4 <fn_disp_cal_report+0x4a4>)
   17368:	6c98      	ldr	r0, [r3, #72]	; 0x48
   1736a:	47d0      	blx	sl
			sprintf(display_str,"%.3f, %.3f, %.3f",
   1736c:	47c8      	blx	r9
   1736e:	9a04      	ldr	r2, [sp, #16]
   17370:	9b05      	ldr	r3, [sp, #20]
   17372:	9000      	str	r0, [sp, #0]
   17374:	9101      	str	r1, [sp, #4]
   17376:	491d      	ldr	r1, [pc, #116]	; (173ec <fn_disp_cal_report+0x4ac>)
   17378:	0020      	movs	r0, r4
   1737a:	47b8      	blx	r7
			glcd_tiny_draw_string(0,4,display_str);
   1737c:	0022      	movs	r2, r4
   1737e:	2104      	movs	r1, #4
   17380:	2000      	movs	r0, #0
   17382:	47a8      	blx	r5
			sprintf(display_str,"Magnitude Error %%");
   17384:	491a      	ldr	r1, [pc, #104]	; (173f0 <fn_disp_cal_report+0x4b0>)
   17386:	0020      	movs	r0, r4
   17388:	47b8      	blx	r7
			glcd_tiny_draw_string(0,5,display_str);
   1738a:	0022      	movs	r2, r4
   1738c:	2105      	movs	r1, #5
   1738e:	2000      	movs	r0, #0
   17390:	47a8      	blx	r5
			sprintf(display_str,"M1:%.3f M2:%.3f", cal_report.mag_stdev_m1*100, cal_report.mag_stdev_m2*100);
   17392:	465b      	mov	r3, fp
   17394:	4913      	ldr	r1, [pc, #76]	; (173e4 <fn_disp_cal_report+0x4a4>)
   17396:	6b18      	ldr	r0, [r3, #48]	; 0x30
   17398:	47d0      	blx	sl
   1739a:	47c8      	blx	r9
   1739c:	465b      	mov	r3, fp
   1739e:	9004      	str	r0, [sp, #16]
   173a0:	9105      	str	r1, [sp, #20]
   173a2:	6b58      	ldr	r0, [r3, #52]	; 0x34
   173a4:	490f      	ldr	r1, [pc, #60]	; (173e4 <fn_disp_cal_report+0x4a4>)
   173a6:	47d0      	blx	sl
   173a8:	47c8      	blx	r9
   173aa:	9a04      	ldr	r2, [sp, #16]
   173ac:	9b05      	ldr	r3, [sp, #20]
   173ae:	9000      	str	r0, [sp, #0]
   173b0:	9101      	str	r1, [sp, #4]
   173b2:	4910      	ldr	r1, [pc, #64]	; (173f4 <fn_disp_cal_report+0x4b4>)
   173b4:	0020      	movs	r0, r4
   173b6:	47b8      	blx	r7
   173b8:	e632      	b.n	17020 <fn_disp_cal_report+0xe0>
				sprintf(display_str,"Temp: %0.1f F", cal_report.time_inc_azm.temperatureF);
   173ba:	465b      	mov	r3, fp
   173bc:	6e18      	ldr	r0, [r3, #96]	; 0x60
   173be:	47c8      	blx	r9
   173c0:	0002      	movs	r2, r0
   173c2:	000b      	movs	r3, r1
   173c4:	0020      	movs	r0, r4
   173c6:	490c      	ldr	r1, [pc, #48]	; (173f8 <fn_disp_cal_report+0x4b8>)
   173c8:	47c0      	blx	r8
   173ca:	e6b3      	b.n	17134 <fn_disp_cal_report+0x1f4>
   173cc:	0002622c 	.word	0x0002622c
   173d0:	20004b4c 	.word	0x20004b4c
   173d4:	0001fe91 	.word	0x0001fe91
   173d8:	00026158 	.word	0x00026158
   173dc:	00026234 	.word	0x00026234
   173e0:	0001d939 	.word	0x0001d939
   173e4:	42c80000 	.word	0x42c80000
   173e8:	0001fb6d 	.word	0x0001fb6d
   173ec:	000261f4 	.word	0x000261f4
   173f0:	00026208 	.word	0x00026208
   173f4:	0002624c 	.word	0x0002624c
   173f8:	000261ac 	.word	0x000261ac

000173fc <fn_menu1>:
void fn_menu1(void){
   173fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   173fe:	46d6      	mov	lr, sl
   17400:	464f      	mov	r7, r9
   17402:	4646      	mov	r6, r8
   17404:	b5c0      	push	{r6, r7, lr}
	if (state_change){
   17406:	4b59      	ldr	r3, [pc, #356]	; (1756c <fn_menu1+0x170>)
   17408:	781b      	ldrb	r3, [r3, #0]
   1740a:	2b00      	cmp	r3, #0
   1740c:	d15f      	bne.n	174ce <fn_menu1+0xd2>
   1740e:	4b58      	ldr	r3, [pc, #352]	; (17570 <fn_menu1+0x174>)
   17410:	4c58      	ldr	r4, [pc, #352]	; (17574 <fn_menu1+0x178>)
   17412:	469a      	mov	sl, r3
	glcd_clear_buffer();
   17414:	4b58      	ldr	r3, [pc, #352]	; (17578 <fn_menu1+0x17c>)
   17416:	4798      	blx	r3
	switch(last_input){
   17418:	6823      	ldr	r3, [r4, #0]
   1741a:	2b02      	cmp	r3, #2
   1741c:	d069      	beq.n	174f2 <fn_menu1+0xf6>
   1741e:	2b03      	cmp	r3, #3
   17420:	d100      	bne.n	17424 <fn_menu1+0x28>
   17422:	e083      	b.n	1752c <fn_menu1+0x130>
   17424:	2b01      	cmp	r3, #1
   17426:	d06e      	beq.n	17506 <fn_menu1+0x10a>
	sprintf(display_str, "Menu:");
   17428:	4c54      	ldr	r4, [pc, #336]	; (1757c <fn_menu1+0x180>)
   1742a:	4e55      	ldr	r6, [pc, #340]	; (17580 <fn_menu1+0x184>)
   1742c:	2206      	movs	r2, #6
   1742e:	4955      	ldr	r1, [pc, #340]	; (17584 <fn_menu1+0x188>)
   17430:	0020      	movs	r0, r4
   17432:	47b0      	blx	r6
	glcd_tiny_draw_string(0,0,display_str);
   17434:	4d54      	ldr	r5, [pc, #336]	; (17588 <fn_menu1+0x18c>)
   17436:	0022      	movs	r2, r4
   17438:	2100      	movs	r1, #0
   1743a:	2000      	movs	r0, #0
   1743c:	47a8      	blx	r5
	drawSoftKeys("Enter","<",">","Back");
   1743e:	4b53      	ldr	r3, [pc, #332]	; (1758c <fn_menu1+0x190>)
   17440:	4f53      	ldr	r7, [pc, #332]	; (17590 <fn_menu1+0x194>)
   17442:	4698      	mov	r8, r3
   17444:	4953      	ldr	r1, [pc, #332]	; (17594 <fn_menu1+0x198>)
   17446:	4b54      	ldr	r3, [pc, #336]	; (17598 <fn_menu1+0x19c>)
   17448:	4642      	mov	r2, r8
   1744a:	4854      	ldr	r0, [pc, #336]	; (1759c <fn_menu1+0x1a0>)
   1744c:	47b8      	blx	r7
	sprintf(display_str, "Options");
   1744e:	2208      	movs	r2, #8
   17450:	4953      	ldr	r1, [pc, #332]	; (175a0 <fn_menu1+0x1a4>)
   17452:	0020      	movs	r0, r4
   17454:	47b0      	blx	r6
	glcd_tiny_draw_string(10,1,display_str);
   17456:	0022      	movs	r2, r4
   17458:	2101      	movs	r1, #1
   1745a:	200a      	movs	r0, #10
   1745c:	47a8      	blx	r5
	sprintf(display_str, "Error Info");
   1745e:	220b      	movs	r2, #11
   17460:	4950      	ldr	r1, [pc, #320]	; (175a4 <fn_menu1+0x1a8>)
   17462:	0020      	movs	r0, r4
   17464:	47b0      	blx	r6
	glcd_tiny_draw_string(10,2,display_str);
   17466:	0022      	movs	r2, r4
   17468:	2102      	movs	r1, #2
   1746a:	200a      	movs	r0, #10
   1746c:	47a8      	blx	r5
	sprintf(display_str, "Calibration");
   1746e:	220c      	movs	r2, #12
   17470:	494d      	ldr	r1, [pc, #308]	; (175a8 <fn_menu1+0x1ac>)
   17472:	0020      	movs	r0, r4
   17474:	47b0      	blx	r6
	glcd_tiny_draw_string(10,3,display_str);
   17476:	0022      	movs	r2, r4
   17478:	2103      	movs	r1, #3
   1747a:	200a      	movs	r0, #10
   1747c:	47a8      	blx	r5
	sprintf(display_str, "Set Clock");
   1747e:	220a      	movs	r2, #10
   17480:	494a      	ldr	r1, [pc, #296]	; (175ac <fn_menu1+0x1b0>)
   17482:	0020      	movs	r0, r4
   17484:	47b0      	blx	r6
	glcd_tiny_draw_string(10,4,display_str);
   17486:	0022      	movs	r2, r4
   17488:	2104      	movs	r1, #4
   1748a:	200a      	movs	r0, #10
   1748c:	47a8      	blx	r5
	sprintf(display_str, "Bluetooth");
   1748e:	220a      	movs	r2, #10
   17490:	4947      	ldr	r1, [pc, #284]	; (175b0 <fn_menu1+0x1b4>)
   17492:	0020      	movs	r0, r4
   17494:	47b0      	blx	r6
	glcd_tiny_draw_string(10,5,display_str);
   17496:	0022      	movs	r2, r4
   17498:	2105      	movs	r1, #5
   1749a:	200a      	movs	r0, #10
   1749c:	47a8      	blx	r5
	sprintf(display_str, "Debug Menu");
   1749e:	220b      	movs	r2, #11
   174a0:	4944      	ldr	r1, [pc, #272]	; (175b4 <fn_menu1+0x1b8>)
   174a2:	0020      	movs	r0, r4
   174a4:	47b0      	blx	r6
	glcd_tiny_draw_string(10,6,display_str);
   174a6:	0022      	movs	r2, r4
   174a8:	2106      	movs	r1, #6
   174aa:	200a      	movs	r0, #10
   174ac:	47a8      	blx	r5
	sprintf(display_str, ">");
   174ae:	4641      	mov	r1, r8
   174b0:	2202      	movs	r2, #2
   174b2:	0020      	movs	r0, r4
   174b4:	47b0      	blx	r6
	glcd_tiny_draw_string(3, cur_Y,display_str);
   174b6:	4653      	mov	r3, sl
   174b8:	0022      	movs	r2, r4
   174ba:	7819      	ldrb	r1, [r3, #0]
   174bc:	2003      	movs	r0, #3
   174be:	47a8      	blx	r5
	glcd_write();
   174c0:	4b3d      	ldr	r3, [pc, #244]	; (175b8 <fn_menu1+0x1bc>)
   174c2:	4798      	blx	r3
}
   174c4:	bc1c      	pop	{r2, r3, r4}
   174c6:	4690      	mov	r8, r2
   174c8:	4699      	mov	r9, r3
   174ca:	46a2      	mov	sl, r4
   174cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		cur_Y=1;
   174ce:	4b28      	ldr	r3, [pc, #160]	; (17570 <fn_menu1+0x174>)
		last_input = input_none;
   174d0:	4c28      	ldr	r4, [pc, #160]	; (17574 <fn_menu1+0x178>)
		cur_Y=1;
   174d2:	469a      	mov	sl, r3
   174d4:	2301      	movs	r3, #1
   174d6:	4652      	mov	r2, sl
   174d8:	6013      	str	r3, [r2, #0]
		cur_Y_low=1;
   174da:	4a38      	ldr	r2, [pc, #224]	; (175bc <fn_menu1+0x1c0>)
   174dc:	6013      	str	r3, [r2, #0]
		cur_Y_high=6;
   174de:	2206      	movs	r2, #6
   174e0:	4b37      	ldr	r3, [pc, #220]	; (175c0 <fn_menu1+0x1c4>)
   174e2:	601a      	str	r2, [r3, #0]
		last_input = input_none;
   174e4:	2300      	movs	r3, #0
   174e6:	6023      	str	r3, [r4, #0]
	glcd_clear_buffer();
   174e8:	4b23      	ldr	r3, [pc, #140]	; (17578 <fn_menu1+0x17c>)
   174ea:	4798      	blx	r3
	switch(last_input){
   174ec:	6823      	ldr	r3, [r4, #0]
   174ee:	2b02      	cmp	r3, #2
   174f0:	d195      	bne.n	1741e <fn_menu1+0x22>
			if(cur_Y > cur_Y_low){--cur_Y; }
   174f2:	4653      	mov	r3, sl
   174f4:	4a31      	ldr	r2, [pc, #196]	; (175bc <fn_menu1+0x1c0>)
   174f6:	681b      	ldr	r3, [r3, #0]
   174f8:	6812      	ldr	r2, [r2, #0]
   174fa:	4293      	cmp	r3, r2
   174fc:	dd94      	ble.n	17428 <fn_menu1+0x2c>
   174fe:	4652      	mov	r2, sl
   17500:	3b01      	subs	r3, #1
   17502:	6013      	str	r3, [r2, #0]
   17504:	e790      	b.n	17428 <fn_menu1+0x2c>
			if(cur_Y == 1){ // Options
   17506:	4653      	mov	r3, sl
   17508:	681b      	ldr	r3, [r3, #0]
   1750a:	2b01      	cmp	r3, #1
   1750c:	d01d      	beq.n	1754a <fn_menu1+0x14e>
			} else if (cur_Y==2){// Error Info
   1750e:	2b02      	cmp	r3, #2
   17510:	d017      	beq.n	17542 <fn_menu1+0x146>
			} else if (cur_Y==3){ // Calibration
   17512:	2b03      	cmp	r3, #3
   17514:	d01d      	beq.n	17552 <fn_menu1+0x156>
			} else if (cur_Y==4){ // Set Clock
   17516:	2b04      	cmp	r3, #4
   17518:	d01f      	beq.n	1755a <fn_menu1+0x15e>
			} else if (cur_Y==5){ //  Bluetooth
   1751a:	2b05      	cmp	r3, #5
   1751c:	d021      	beq.n	17562 <fn_menu1+0x166>
			} else if (cur_Y==6){ // Debug
   1751e:	2b06      	cmp	r3, #6
   17520:	d000      	beq.n	17524 <fn_menu1+0x128>
   17522:	e781      	b.n	17428 <fn_menu1+0x2c>
				current_input = input_menu_debug;
   17524:	2218      	movs	r2, #24
   17526:	4b27      	ldr	r3, [pc, #156]	; (175c4 <fn_menu1+0x1c8>)
   17528:	601a      	str	r2, [r3, #0]
   1752a:	e77d      	b.n	17428 <fn_menu1+0x2c>
			if(cur_Y < cur_Y_high){++cur_Y; }
   1752c:	4653      	mov	r3, sl
   1752e:	4a24      	ldr	r2, [pc, #144]	; (175c0 <fn_menu1+0x1c4>)
   17530:	681b      	ldr	r3, [r3, #0]
   17532:	6812      	ldr	r2, [r2, #0]
   17534:	4293      	cmp	r3, r2
   17536:	db00      	blt.n	1753a <fn_menu1+0x13e>
   17538:	e776      	b.n	17428 <fn_menu1+0x2c>
   1753a:	4652      	mov	r2, sl
   1753c:	3301      	adds	r3, #1
   1753e:	6013      	str	r3, [r2, #0]
   17540:	e772      	b.n	17428 <fn_menu1+0x2c>
				current_input = input_error_info;
   17542:	220c      	movs	r2, #12
   17544:	4b1f      	ldr	r3, [pc, #124]	; (175c4 <fn_menu1+0x1c8>)
   17546:	601a      	str	r2, [r3, #0]
   17548:	e76e      	b.n	17428 <fn_menu1+0x2c>
				current_input = input_set_units;
   1754a:	220b      	movs	r2, #11
   1754c:	4b1d      	ldr	r3, [pc, #116]	; (175c4 <fn_menu1+0x1c8>)
   1754e:	601a      	str	r2, [r3, #0]
   17550:	e76a      	b.n	17428 <fn_menu1+0x2c>
				current_input = input_cal_menu;
   17552:	220d      	movs	r2, #13
   17554:	4b1b      	ldr	r3, [pc, #108]	; (175c4 <fn_menu1+0x1c8>)
   17556:	601a      	str	r2, [r3, #0]
   17558:	e766      	b.n	17428 <fn_menu1+0x2c>
				current_input = input_set_clock;
   1755a:	2209      	movs	r2, #9
   1755c:	4b19      	ldr	r3, [pc, #100]	; (175c4 <fn_menu1+0x1c8>)
   1755e:	601a      	str	r2, [r3, #0]
   17560:	e762      	b.n	17428 <fn_menu1+0x2c>
				current_input = input_set_bluetooth;
   17562:	220a      	movs	r2, #10
   17564:	4b17      	ldr	r3, [pc, #92]	; (175c4 <fn_menu1+0x1c8>)
   17566:	601a      	str	r2, [r3, #0]
   17568:	e75e      	b.n	17428 <fn_menu1+0x2c>
   1756a:	46c0      	nop			; (mov r8, r8)
   1756c:	200001d0 	.word	0x200001d0
   17570:	20003170 	.word	0x20003170
   17574:	200044f0 	.word	0x200044f0
   17578:	00013805 	.word	0x00013805
   1757c:	200033a8 	.word	0x200033a8
   17580:	0001fd79 	.word	0x0001fd79
   17584:	000264b4 	.word	0x000264b4
   17588:	000150a1 	.word	0x000150a1
   1758c:	00024d7c 	.word	0x00024d7c
   17590:	000080b9 	.word	0x000080b9
   17594:	00024d78 	.word	0x00024d78
   17598:	000264bc 	.word	0x000264bc
   1759c:	000264c4 	.word	0x000264c4
   175a0:	000264cc 	.word	0x000264cc
   175a4:	000264d4 	.word	0x000264d4
   175a8:	000250b0 	.word	0x000250b0
   175ac:	000264e0 	.word	0x000264e0
   175b0:	000264ec 	.word	0x000264ec
   175b4:	000264f8 	.word	0x000264f8
   175b8:	0001493d 	.word	0x0001493d
   175bc:	20004b48 	.word	0x20004b48
   175c0:	20003de4 	.word	0x20003de4
   175c4:	2000403c 	.word	0x2000403c

000175c8 <fn_menu_debug>:
void fn_menu_debug(void){
   175c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   175ca:	46d6      	mov	lr, sl
   175cc:	464f      	mov	r7, r9
   175ce:	4646      	mov	r6, r8
   175d0:	b5c0      	push	{r6, r7, lr}
	if (state_change) {
   175d2:	4b50      	ldr	r3, [pc, #320]	; (17714 <fn_menu_debug+0x14c>)
   175d4:	781b      	ldrb	r3, [r3, #0]
   175d6:	2b00      	cmp	r3, #0
   175d8:	d157      	bne.n	1768a <fn_menu_debug+0xc2>
   175da:	4b4f      	ldr	r3, [pc, #316]	; (17718 <fn_menu_debug+0x150>)
   175dc:	469a      	mov	sl, r3
	switch(last_input){
   175de:	4b4f      	ldr	r3, [pc, #316]	; (1771c <fn_menu_debug+0x154>)
   175e0:	681b      	ldr	r3, [r3, #0]
   175e2:	2b02      	cmp	r3, #2
   175e4:	d05f      	beq.n	176a6 <fn_menu_debug+0xde>
   175e6:	2b03      	cmp	r3, #3
   175e8:	d100      	bne.n	175ec <fn_menu_debug+0x24>
   175ea:	e077      	b.n	176dc <fn_menu_debug+0x114>
   175ec:	2b01      	cmp	r3, #1
   175ee:	d064      	beq.n	176ba <fn_menu_debug+0xf2>
	glcd_clear_buffer();
   175f0:	4b4b      	ldr	r3, [pc, #300]	; (17720 <fn_menu_debug+0x158>)
   175f2:	4798      	blx	r3
	sprintf(display_str,"Debug Menu:");
   175f4:	4c4b      	ldr	r4, [pc, #300]	; (17724 <fn_menu_debug+0x15c>)
   175f6:	4e4c      	ldr	r6, [pc, #304]	; (17728 <fn_menu_debug+0x160>)
   175f8:	220c      	movs	r2, #12
   175fa:	494c      	ldr	r1, [pc, #304]	; (1772c <fn_menu_debug+0x164>)
   175fc:	0020      	movs	r0, r4
   175fe:	47b0      	blx	r6
	glcd_tiny_draw_string(0,0,display_str);
   17600:	4d4b      	ldr	r5, [pc, #300]	; (17730 <fn_menu_debug+0x168>)
   17602:	0022      	movs	r2, r4
   17604:	2100      	movs	r1, #0
   17606:	2000      	movs	r0, #0
   17608:	47a8      	blx	r5
	sprintf(display_str, "Sensor Raw Data");
   1760a:	2210      	movs	r2, #16
   1760c:	4949      	ldr	r1, [pc, #292]	; (17734 <fn_menu_debug+0x16c>)
   1760e:	0020      	movs	r0, r4
   17610:	47b0      	blx	r6
	glcd_tiny_draw_string(5, 2, display_str);
   17612:	0022      	movs	r2, r4
   17614:	2102      	movs	r1, #2
   17616:	2005      	movs	r0, #5
   17618:	47a8      	blx	r5
	sprintf(display_str, "Backlight Manual");
   1761a:	2211      	movs	r2, #17
   1761c:	4946      	ldr	r1, [pc, #280]	; (17738 <fn_menu_debug+0x170>)
   1761e:	0020      	movs	r0, r4
   17620:	47b0      	blx	r6
	glcd_tiny_draw_string(5, 3, display_str);
   17622:	0022      	movs	r2, r4
   17624:	2103      	movs	r1, #3
   17626:	2005      	movs	r0, #5
   17628:	47a8      	blx	r5
	sprintf(display_str, "Charger Info");
   1762a:	220d      	movs	r2, #13
   1762c:	4943      	ldr	r1, [pc, #268]	; (1773c <fn_menu_debug+0x174>)
   1762e:	0020      	movs	r0, r4
   17630:	47b0      	blx	r6
	glcd_tiny_draw_string(5, 4, display_str);
   17632:	0022      	movs	r2, r4
   17634:	2104      	movs	r1, #4
   17636:	2005      	movs	r0, #5
   17638:	47a8      	blx	r5
	sprintf(display_str, "Reprocess Full Cal");
   1763a:	2213      	movs	r2, #19
   1763c:	4940      	ldr	r1, [pc, #256]	; (17740 <fn_menu_debug+0x178>)
   1763e:	0020      	movs	r0, r4
   17640:	47b0      	blx	r6
	glcd_tiny_draw_string(5, 5, display_str);
   17642:	0022      	movs	r2, r4
   17644:	2105      	movs	r1, #5
   17646:	2005      	movs	r0, #5
   17648:	47a8      	blx	r5
	sprintf(display_str, "Reprocess AZM Cal");
   1764a:	2212      	movs	r2, #18
   1764c:	493d      	ldr	r1, [pc, #244]	; (17744 <fn_menu_debug+0x17c>)
   1764e:	0020      	movs	r0, r4
   17650:	47b0      	blx	r6
	glcd_tiny_draw_string(5, 6, display_str);
   17652:	0022      	movs	r2, r4
   17654:	2106      	movs	r1, #6
   17656:	2005      	movs	r0, #5
   17658:	47a8      	blx	r5
	drawSoftKeys("Enter","<",">","Back");
   1765a:	4b3b      	ldr	r3, [pc, #236]	; (17748 <fn_menu_debug+0x180>)
   1765c:	4f3b      	ldr	r7, [pc, #236]	; (1774c <fn_menu_debug+0x184>)
   1765e:	4698      	mov	r8, r3
   17660:	493b      	ldr	r1, [pc, #236]	; (17750 <fn_menu_debug+0x188>)
   17662:	4642      	mov	r2, r8
   17664:	4b3b      	ldr	r3, [pc, #236]	; (17754 <fn_menu_debug+0x18c>)
   17666:	483c      	ldr	r0, [pc, #240]	; (17758 <fn_menu_debug+0x190>)
   17668:	47b8      	blx	r7
	sprintf(display_str, ">");
   1766a:	4641      	mov	r1, r8
   1766c:	2202      	movs	r2, #2
   1766e:	0020      	movs	r0, r4
   17670:	47b0      	blx	r6
	glcd_tiny_draw_string(0, cur_Y,display_str);
   17672:	4653      	mov	r3, sl
   17674:	0022      	movs	r2, r4
   17676:	7819      	ldrb	r1, [r3, #0]
   17678:	2000      	movs	r0, #0
   1767a:	47a8      	blx	r5
	glcd_write();
   1767c:	4b37      	ldr	r3, [pc, #220]	; (1775c <fn_menu_debug+0x194>)
   1767e:	4798      	blx	r3
}
   17680:	bc1c      	pop	{r2, r3, r4}
   17682:	4690      	mov	r8, r2
   17684:	4699      	mov	r9, r3
   17686:	46a2      	mov	sl, r4
   17688:	bdf0      	pop	{r4, r5, r6, r7, pc}
		cur_Y = 2;
   1768a:	4b23      	ldr	r3, [pc, #140]	; (17718 <fn_menu_debug+0x150>)
   1768c:	469a      	mov	sl, r3
   1768e:	2302      	movs	r3, #2
   17690:	4652      	mov	r2, sl
   17692:	6013      	str	r3, [r2, #0]
		cur_Y_low = 2;
   17694:	4a32      	ldr	r2, [pc, #200]	; (17760 <fn_menu_debug+0x198>)
   17696:	6013      	str	r3, [r2, #0]
		cur_Y_high = 6;
   17698:	2206      	movs	r2, #6
   1769a:	4b32      	ldr	r3, [pc, #200]	; (17764 <fn_menu_debug+0x19c>)
   1769c:	601a      	str	r2, [r3, #0]
	switch(last_input){
   1769e:	4b1f      	ldr	r3, [pc, #124]	; (1771c <fn_menu_debug+0x154>)
   176a0:	681b      	ldr	r3, [r3, #0]
   176a2:	2b02      	cmp	r3, #2
   176a4:	d19f      	bne.n	175e6 <fn_menu_debug+0x1e>
			if(cur_Y > cur_Y_low){--cur_Y; }
   176a6:	4653      	mov	r3, sl
   176a8:	4a2d      	ldr	r2, [pc, #180]	; (17760 <fn_menu_debug+0x198>)
   176aa:	681b      	ldr	r3, [r3, #0]
   176ac:	6812      	ldr	r2, [r2, #0]
   176ae:	4293      	cmp	r3, r2
   176b0:	dd9e      	ble.n	175f0 <fn_menu_debug+0x28>
   176b2:	4652      	mov	r2, sl
   176b4:	3b01      	subs	r3, #1
   176b6:	6013      	str	r3, [r2, #0]
   176b8:	e79a      	b.n	175f0 <fn_menu_debug+0x28>
			if (cur_Y==2){
   176ba:	4653      	mov	r3, sl
   176bc:	681b      	ldr	r3, [r3, #0]
   176be:	2b02      	cmp	r3, #2
   176c0:	d01b      	beq.n	176fa <fn_menu_debug+0x132>
			}else if(cur_Y == 3){
   176c2:	2b03      	cmp	r3, #3
   176c4:	d015      	beq.n	176f2 <fn_menu_debug+0x12a>
			} else if(cur_Y == 4){
   176c6:	2b04      	cmp	r3, #4
   176c8:	d01b      	beq.n	17702 <fn_menu_debug+0x13a>
			}else if(cur_Y == 5){
   176ca:	2b05      	cmp	r3, #5
   176cc:	d01d      	beq.n	1770a <fn_menu_debug+0x142>
			}else if(cur_Y == 6){
   176ce:	2b06      	cmp	r3, #6
   176d0:	d000      	beq.n	176d4 <fn_menu_debug+0x10c>
   176d2:	e78d      	b.n	175f0 <fn_menu_debug+0x28>
				current_input = input_reprocess_azm_quick_cal;
   176d4:	221b      	movs	r2, #27
   176d6:	4b24      	ldr	r3, [pc, #144]	; (17768 <fn_menu_debug+0x1a0>)
   176d8:	601a      	str	r2, [r3, #0]
   176da:	e789      	b.n	175f0 <fn_menu_debug+0x28>
			if(cur_Y < cur_Y_high){++cur_Y; }
   176dc:	4653      	mov	r3, sl
   176de:	4a21      	ldr	r2, [pc, #132]	; (17764 <fn_menu_debug+0x19c>)
   176e0:	681b      	ldr	r3, [r3, #0]
   176e2:	6812      	ldr	r2, [r2, #0]
   176e4:	4293      	cmp	r3, r2
   176e6:	db00      	blt.n	176ea <fn_menu_debug+0x122>
   176e8:	e782      	b.n	175f0 <fn_menu_debug+0x28>
   176ea:	4652      	mov	r2, sl
   176ec:	3301      	adds	r3, #1
   176ee:	6013      	str	r3, [r2, #0]
   176f0:	e77e      	b.n	175f0 <fn_menu_debug+0x28>
				current_input = input_debug_backlight;
   176f2:	2214      	movs	r2, #20
   176f4:	4b1c      	ldr	r3, [pc, #112]	; (17768 <fn_menu_debug+0x1a0>)
   176f6:	601a      	str	r2, [r3, #0]
   176f8:	e77a      	b.n	175f0 <fn_menu_debug+0x28>
				current_input = input_debug_rawData;
   176fa:	2213      	movs	r2, #19
   176fc:	4b1a      	ldr	r3, [pc, #104]	; (17768 <fn_menu_debug+0x1a0>)
   176fe:	601a      	str	r2, [r3, #0]
   17700:	e776      	b.n	175f0 <fn_menu_debug+0x28>
				current_input = input_debug_charger;
   17702:	2215      	movs	r2, #21
   17704:	4b18      	ldr	r3, [pc, #96]	; (17768 <fn_menu_debug+0x1a0>)
   17706:	601a      	str	r2, [r3, #0]
   17708:	e772      	b.n	175f0 <fn_menu_debug+0x28>
				current_input = input_reprocess_inc_azm_cal;
   1770a:	221a      	movs	r2, #26
   1770c:	4b16      	ldr	r3, [pc, #88]	; (17768 <fn_menu_debug+0x1a0>)
   1770e:	601a      	str	r2, [r3, #0]
   17710:	e76e      	b.n	175f0 <fn_menu_debug+0x28>
   17712:	46c0      	nop			; (mov r8, r8)
   17714:	200001d0 	.word	0x200001d0
   17718:	20003170 	.word	0x20003170
   1771c:	200044f0 	.word	0x200044f0
   17720:	00013805 	.word	0x00013805
   17724:	200033a8 	.word	0x200033a8
   17728:	0001fd79 	.word	0x0001fd79
   1772c:	00026558 	.word	0x00026558
   17730:	000150a1 	.word	0x000150a1
   17734:	00026564 	.word	0x00026564
   17738:	00026574 	.word	0x00026574
   1773c:	00026588 	.word	0x00026588
   17740:	00026598 	.word	0x00026598
   17744:	000265ac 	.word	0x000265ac
   17748:	00024d7c 	.word	0x00024d7c
   1774c:	000080b9 	.word	0x000080b9
   17750:	00024d78 	.word	0x00024d78
   17754:	000264bc 	.word	0x000264bc
   17758:	000264c4 	.word	0x000264c4
   1775c:	0001493d 	.word	0x0001493d
   17760:	20004b48 	.word	0x20004b48
   17764:	20003de4 	.word	0x20003de4
   17768:	2000403c 	.word	0x2000403c

0001776c <fn_menu_cal>:
void fn_menu_cal(void){
   1776c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1776e:	46d6      	mov	lr, sl
   17770:	464f      	mov	r7, r9
   17772:	4646      	mov	r6, r8
   17774:	b5c0      	push	{r6, r7, lr}
	if (state_change) {
   17776:	4b4d      	ldr	r3, [pc, #308]	; (178ac <fn_menu_cal+0x140>)
   17778:	781b      	ldrb	r3, [r3, #0]
   1777a:	2b00      	cmp	r3, #0
   1777c:	d156      	bne.n	1782c <fn_menu_cal+0xc0>
   1777e:	4b4c      	ldr	r3, [pc, #304]	; (178b0 <fn_menu_cal+0x144>)
   17780:	469a      	mov	sl, r3
	switch(last_input){
   17782:	4b4c      	ldr	r3, [pc, #304]	; (178b4 <fn_menu_cal+0x148>)
   17784:	681b      	ldr	r3, [r3, #0]
   17786:	2b02      	cmp	r3, #2
   17788:	d05e      	beq.n	17848 <fn_menu_cal+0xdc>
   1778a:	2b03      	cmp	r3, #3
   1778c:	d06e      	beq.n	1786c <fn_menu_cal+0x100>
   1778e:	2b01      	cmp	r3, #1
   17790:	d064      	beq.n	1785c <fn_menu_cal+0xf0>
	glcd_clear_buffer();
   17792:	4b49      	ldr	r3, [pc, #292]	; (178b8 <fn_menu_cal+0x14c>)
   17794:	4798      	blx	r3
	sprintf(display_str,"Calibration:");
   17796:	4c49      	ldr	r4, [pc, #292]	; (178bc <fn_menu_cal+0x150>)
   17798:	4e49      	ldr	r6, [pc, #292]	; (178c0 <fn_menu_cal+0x154>)
   1779a:	220d      	movs	r2, #13
   1779c:	4949      	ldr	r1, [pc, #292]	; (178c4 <fn_menu_cal+0x158>)
   1779e:	0020      	movs	r0, r4
   177a0:	47b0      	blx	r6
	glcd_tiny_draw_string(0,0,display_str);
   177a2:	4d49      	ldr	r5, [pc, #292]	; (178c8 <fn_menu_cal+0x15c>)
   177a4:	0022      	movs	r2, r4
   177a6:	2100      	movs	r1, #0
   177a8:	2000      	movs	r0, #0
   177aa:	47a8      	blx	r5
	sprintf(display_str, "Display Report");
   177ac:	220f      	movs	r2, #15
   177ae:	4947      	ldr	r1, [pc, #284]	; (178cc <fn_menu_cal+0x160>)
   177b0:	0020      	movs	r0, r4
   177b2:	47b0      	blx	r6
	glcd_tiny_draw_string(5, 1, display_str);
   177b4:	0022      	movs	r2, r4
   177b6:	2101      	movs	r1, #1
   177b8:	2005      	movs	r0, #5
   177ba:	47a8      	blx	r5
	sprintf(display_str, "Loop Test");
   177bc:	220a      	movs	r2, #10
   177be:	4944      	ldr	r1, [pc, #272]	; (178d0 <fn_menu_cal+0x164>)
   177c0:	0020      	movs	r0, r4
   177c2:	47b0      	blx	r6
	glcd_tiny_draw_string(5, 2, display_str);
   177c4:	0022      	movs	r2, r4
   177c6:	2102      	movs	r1, #2
   177c8:	2005      	movs	r0, #5
   177ca:	47a8      	blx	r5
	sprintf(display_str, "CAL: Quick AZM");
   177cc:	220f      	movs	r2, #15
   177ce:	4941      	ldr	r1, [pc, #260]	; (178d4 <fn_menu_cal+0x168>)
   177d0:	0020      	movs	r0, r4
   177d2:	47b0      	blx	r6
	glcd_tiny_draw_string(5, 3, display_str);
   177d4:	0022      	movs	r2, r4
   177d6:	2103      	movs	r1, #3
   177d8:	2005      	movs	r0, #5
   177da:	47a8      	blx	r5
	sprintf(display_str,"CAL: Full INC&AZM");
   177dc:	2212      	movs	r2, #18
   177de:	493e      	ldr	r1, [pc, #248]	; (178d8 <fn_menu_cal+0x16c>)
   177e0:	0020      	movs	r0, r4
   177e2:	47b0      	blx	r6
	glcd_tiny_draw_string(5, 4, display_str);
   177e4:	0022      	movs	r2, r4
   177e6:	2104      	movs	r1, #4
   177e8:	2005      	movs	r0, #5
   177ea:	47a8      	blx	r5
	sprintf(display_str,"CAL: Range-finder");
   177ec:	2212      	movs	r2, #18
   177ee:	493b      	ldr	r1, [pc, #236]	; (178dc <fn_menu_cal+0x170>)
   177f0:	0020      	movs	r0, r4
   177f2:	47b0      	blx	r6
	glcd_tiny_draw_string(5, 5, display_str);
   177f4:	0022      	movs	r2, r4
   177f6:	2105      	movs	r1, #5
   177f8:	2005      	movs	r0, #5
   177fa:	47a8      	blx	r5
	drawSoftKeys("Enter","<",">","Back");
   177fc:	4b38      	ldr	r3, [pc, #224]	; (178e0 <fn_menu_cal+0x174>)
   177fe:	4f39      	ldr	r7, [pc, #228]	; (178e4 <fn_menu_cal+0x178>)
   17800:	4698      	mov	r8, r3
   17802:	4939      	ldr	r1, [pc, #228]	; (178e8 <fn_menu_cal+0x17c>)
   17804:	4642      	mov	r2, r8
   17806:	4b39      	ldr	r3, [pc, #228]	; (178ec <fn_menu_cal+0x180>)
   17808:	4839      	ldr	r0, [pc, #228]	; (178f0 <fn_menu_cal+0x184>)
   1780a:	47b8      	blx	r7
	sprintf(display_str, ">");
   1780c:	4641      	mov	r1, r8
   1780e:	2202      	movs	r2, #2
   17810:	0020      	movs	r0, r4
   17812:	47b0      	blx	r6
	glcd_tiny_draw_string(0, cur_Y,display_str);
   17814:	4653      	mov	r3, sl
   17816:	0022      	movs	r2, r4
   17818:	7819      	ldrb	r1, [r3, #0]
   1781a:	2000      	movs	r0, #0
   1781c:	47a8      	blx	r5
	glcd_write();
   1781e:	4b35      	ldr	r3, [pc, #212]	; (178f4 <fn_menu_cal+0x188>)
   17820:	4798      	blx	r3
}
   17822:	bc1c      	pop	{r2, r3, r4}
   17824:	4690      	mov	r8, r2
   17826:	4699      	mov	r9, r3
   17828:	46a2      	mov	sl, r4
   1782a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		cur_Y = 1;
   1782c:	4b20      	ldr	r3, [pc, #128]	; (178b0 <fn_menu_cal+0x144>)
   1782e:	469a      	mov	sl, r3
   17830:	2301      	movs	r3, #1
   17832:	4652      	mov	r2, sl
   17834:	6013      	str	r3, [r2, #0]
		cur_Y_low = 1;
   17836:	4a30      	ldr	r2, [pc, #192]	; (178f8 <fn_menu_cal+0x18c>)
   17838:	6013      	str	r3, [r2, #0]
		cur_Y_high = 5;
   1783a:	2205      	movs	r2, #5
   1783c:	4b2f      	ldr	r3, [pc, #188]	; (178fc <fn_menu_cal+0x190>)
   1783e:	601a      	str	r2, [r3, #0]
	switch(last_input){
   17840:	4b1c      	ldr	r3, [pc, #112]	; (178b4 <fn_menu_cal+0x148>)
   17842:	681b      	ldr	r3, [r3, #0]
   17844:	2b02      	cmp	r3, #2
   17846:	d1a0      	bne.n	1778a <fn_menu_cal+0x1e>
			if(cur_Y > cur_Y_low){--cur_Y; }
   17848:	4653      	mov	r3, sl
   1784a:	4a2b      	ldr	r2, [pc, #172]	; (178f8 <fn_menu_cal+0x18c>)
   1784c:	681b      	ldr	r3, [r3, #0]
   1784e:	6812      	ldr	r2, [r2, #0]
   17850:	4293      	cmp	r3, r2
   17852:	dd9e      	ble.n	17792 <fn_menu_cal+0x26>
   17854:	4652      	mov	r2, sl
   17856:	3b01      	subs	r3, #1
   17858:	6013      	str	r3, [r2, #0]
   1785a:	e79a      	b.n	17792 <fn_menu_cal+0x26>
			switch (cur_Y){
   1785c:	4653      	mov	r3, sl
   1785e:	681b      	ldr	r3, [r3, #0]
   17860:	2b05      	cmp	r3, #5
   17862:	d896      	bhi.n	17792 <fn_menu_cal+0x26>
   17864:	4a26      	ldr	r2, [pc, #152]	; (17900 <fn_menu_cal+0x194>)
   17866:	009b      	lsls	r3, r3, #2
   17868:	58d3      	ldr	r3, [r2, r3]
   1786a:	469f      	mov	pc, r3
			if(cur_Y < cur_Y_high){++cur_Y; }
   1786c:	4653      	mov	r3, sl
   1786e:	4a23      	ldr	r2, [pc, #140]	; (178fc <fn_menu_cal+0x190>)
   17870:	681b      	ldr	r3, [r3, #0]
   17872:	6812      	ldr	r2, [r2, #0]
   17874:	4293      	cmp	r3, r2
   17876:	db00      	blt.n	1787a <fn_menu_cal+0x10e>
   17878:	e78b      	b.n	17792 <fn_menu_cal+0x26>
   1787a:	4652      	mov	r2, sl
   1787c:	3301      	adds	r3, #1
   1787e:	6013      	str	r3, [r2, #0]
   17880:	e787      	b.n	17792 <fn_menu_cal+0x26>
					current_input = input_dist_calibration;
   17882:	220e      	movs	r2, #14
   17884:	4b1f      	ldr	r3, [pc, #124]	; (17904 <fn_menu_cal+0x198>)
   17886:	601a      	str	r2, [r3, #0]
					break;
   17888:	e783      	b.n	17792 <fn_menu_cal+0x26>
					current_input = input_disp_cal_report;
   1788a:	2210      	movs	r2, #16
   1788c:	4b1d      	ldr	r3, [pc, #116]	; (17904 <fn_menu_cal+0x198>)
   1788e:	601a      	str	r2, [r3, #0]
					break;
   17890:	e77f      	b.n	17792 <fn_menu_cal+0x26>
					current_input = input_loop_test;
   17892:	2212      	movs	r2, #18
   17894:	4b1b      	ldr	r3, [pc, #108]	; (17904 <fn_menu_cal+0x198>)
   17896:	601a      	str	r2, [r3, #0]
					break;
   17898:	e77b      	b.n	17792 <fn_menu_cal+0x26>
					current_input = input_azm_quick_calibration;
   1789a:	2211      	movs	r2, #17
   1789c:	4b19      	ldr	r3, [pc, #100]	; (17904 <fn_menu_cal+0x198>)
   1789e:	601a      	str	r2, [r3, #0]
					break;
   178a0:	e777      	b.n	17792 <fn_menu_cal+0x26>
					current_input = input_inc_azm_full_calibration;
   178a2:	220f      	movs	r2, #15
   178a4:	4b17      	ldr	r3, [pc, #92]	; (17904 <fn_menu_cal+0x198>)
   178a6:	601a      	str	r2, [r3, #0]
					break;
   178a8:	e773      	b.n	17792 <fn_menu_cal+0x26>
   178aa:	46c0      	nop			; (mov r8, r8)
   178ac:	200001d0 	.word	0x200001d0
   178b0:	20003170 	.word	0x20003170
   178b4:	200044f0 	.word	0x200044f0
   178b8:	00013805 	.word	0x00013805
   178bc:	200033a8 	.word	0x200033a8
   178c0:	0001fd79 	.word	0x0001fd79
   178c4:	00025e30 	.word	0x00025e30
   178c8:	000150a1 	.word	0x000150a1
   178cc:	00026504 	.word	0x00026504
   178d0:	00026514 	.word	0x00026514
   178d4:	00026520 	.word	0x00026520
   178d8:	00026530 	.word	0x00026530
   178dc:	00026544 	.word	0x00026544
   178e0:	00024d7c 	.word	0x00024d7c
   178e4:	000080b9 	.word	0x000080b9
   178e8:	00024d78 	.word	0x00024d78
   178ec:	000264bc 	.word	0x000264bc
   178f0:	000264c4 	.word	0x000264c4
   178f4:	0001493d 	.word	0x0001493d
   178f8:	20004b48 	.word	0x20004b48
   178fc:	20003de4 	.word	0x20003de4
   17900:	00025bbc 	.word	0x00025bbc
   17904:	2000403c 	.word	0x2000403c

00017908 <fn_process_inc_azm_full_cal>:
void fn_process_inc_azm_full_cal(void){
   17908:	b5f0      	push	{r4, r5, r6, r7, lr}
   1790a:	46de      	mov	lr, fp
   1790c:	4645      	mov	r5, r8
   1790e:	464e      	mov	r6, r9
   17910:	4657      	mov	r7, sl
   17912:	b5e0      	push	{r5, r6, r7, lr}
	wdt_disable();
   17914:	4b80      	ldr	r3, [pc, #512]	; (17b18 <fn_process_inc_azm_full_cal+0x210>)
void fn_process_inc_azm_full_cal(void){
   17916:	b0c9      	sub	sp, #292	; 0x124
	wdt_disable();
   17918:	4798      	blx	r3
   1791a:	ae0f      	add	r6, sp, #60	; 0x3c
	load_cal_report();
   1791c:	4b7f      	ldr	r3, [pc, #508]	; (17b1c <fn_process_inc_azm_full_cal+0x214>)
   1791e:	4798      	blx	r3
   17920:	ad08      	add	r5, sp, #32
   17922:	4c7f      	ldr	r4, [pc, #508]	; (17b20 <fn_process_inc_azm_full_cal+0x218>)
   17924:	2219      	movs	r2, #25
   17926:	2100      	movs	r1, #0
   17928:	0030      	movs	r0, r6
   1792a:	47a0      	blx	r4
   1792c:	2219      	movs	r2, #25
   1792e:	2100      	movs	r1, #0
   17930:	0028      	movs	r0, r5
   17932:	47a0      	blx	r4
   17934:	2264      	movs	r2, #100	; 0x64
   17936:	2100      	movs	r1, #0
   17938:	a816      	add	r0, sp, #88	; 0x58
   1793a:	47a0      	blx	r4
   1793c:	2264      	movs	r2, #100	; 0x64
   1793e:	2100      	movs	r1, #0
   17940:	a82f      	add	r0, sp, #188	; 0xbc
   17942:	47a0      	blx	r4
	glcd_clear_buffer();
   17944:	4b77      	ldr	r3, [pc, #476]	; (17b24 <fn_process_inc_azm_full_cal+0x21c>)
   17946:	4798      	blx	r3
   17948:	2303      	movs	r3, #3
   1794a:	9305      	str	r3, [sp, #20]
   1794c:	4b76      	ldr	r3, [pc, #472]	; (17b28 <fn_process_inc_azm_full_cal+0x220>)
   1794e:	4698      	mov	r8, r3
		for (g=cal_report.groupsAll;g>=0;g--){	
   17950:	4b76      	ldr	r3, [pc, #472]	; (17b2c <fn_process_inc_azm_full_cal+0x224>)
   17952:	68dc      	ldr	r4, [r3, #12]
   17954:	2c00      	cmp	r4, #0
   17956:	db5e      	blt.n	17a16 <fn_process_inc_azm_full_cal+0x10e>
   17958:	aa16      	add	r2, sp, #88	; 0x58
   1795a:	4694      	mov	ip, r2
   1795c:	00a3      	lsls	r3, r4, #2
   1795e:	449c      	add	ip, r3
   17960:	4662      	mov	r2, ip
   17962:	9202      	str	r2, [sp, #8]
   17964:	aa2f      	add	r2, sp, #188	; 0xbc
   17966:	4694      	mov	ip, r2
   17968:	4463      	add	r3, ip
   1796a:	9303      	str	r3, [sp, #12]
   1796c:	2300      	movs	r3, #0
   1796e:	4699      	mov	r9, r3
   17970:	4b6f      	ldr	r3, [pc, #444]	; (17b30 <fn_process_inc_azm_full_cal+0x228>)
   17972:	9304      	str	r3, [sp, #16]
   17974:	4b6f      	ldr	r3, [pc, #444]	; (17b34 <fn_process_inc_azm_full_cal+0x22c>)
   17976:	469b      	mov	fp, r3
   17978:	4b6f      	ldr	r3, [pc, #444]	; (17b38 <fn_process_inc_azm_full_cal+0x230>)
   1797a:	469a      	mov	sl, r3
			sprintf(display_str, "Processing Cal Data:");
   1797c:	2215      	movs	r2, #21
   1797e:	496f      	ldr	r1, [pc, #444]	; (17b3c <fn_process_inc_azm_full_cal+0x234>)
   17980:	486f      	ldr	r0, [pc, #444]	; (17b40 <fn_process_inc_azm_full_cal+0x238>)
   17982:	47c0      	blx	r8
			glcd_tiny_draw_string(0,0,display_str);
   17984:	4a6e      	ldr	r2, [pc, #440]	; (17b40 <fn_process_inc_azm_full_cal+0x238>)
   17986:	2100      	movs	r1, #0
   17988:	2000      	movs	r0, #0
   1798a:	4b6e      	ldr	r3, [pc, #440]	; (17b44 <fn_process_inc_azm_full_cal+0x23c>)
   1798c:	4798      	blx	r3
			sprintf(display_str, "Iteration %d of %d     ", g, cal_report.groupsAll);
   1798e:	4b67      	ldr	r3, [pc, #412]	; (17b2c <fn_process_inc_azm_full_cal+0x224>)
   17990:	0022      	movs	r2, r4
   17992:	68db      	ldr	r3, [r3, #12]
   17994:	496c      	ldr	r1, [pc, #432]	; (17b48 <fn_process_inc_azm_full_cal+0x240>)
   17996:	486a      	ldr	r0, [pc, #424]	; (17b40 <fn_process_inc_azm_full_cal+0x238>)
   17998:	9f04      	ldr	r7, [sp, #16]
   1799a:	47b8      	blx	r7
			glcd_tiny_draw_string(0,2,display_str);
   1799c:	2102      	movs	r1, #2
   1799e:	4a68      	ldr	r2, [pc, #416]	; (17b40 <fn_process_inc_azm_full_cal+0x238>)
   179a0:	2000      	movs	r0, #0
   179a2:	4b68      	ldr	r3, [pc, #416]	; (17b44 <fn_process_inc_azm_full_cal+0x23c>)
   179a4:	4798      	blx	r3
			glcd_write();
   179a6:	4b69      	ldr	r3, [pc, #420]	; (17b4c <fn_process_inc_azm_full_cal+0x244>)
   179a8:	4798      	blx	r3
			EEPROM_loadCalRawData(inc_azm_full);
   179aa:	4b69      	ldr	r3, [pc, #420]	; (17b50 <fn_process_inc_azm_full_cal+0x248>)
   179ac:	2000      	movs	r0, #0
   179ae:	4798      	blx	r3
			for (k=1;k<=cal_report.groupsAll;k++){
   179b0:	4b5e      	ldr	r3, [pc, #376]	; (17b2c <fn_process_inc_azm_full_cal+0x224>)
   179b2:	68d9      	ldr	r1, [r3, #12]
   179b4:	2900      	cmp	r1, #0
   179b6:	d011      	beq.n	179dc <fn_process_inc_azm_full_cal+0xd4>
   179b8:	2301      	movs	r3, #1
   179ba:	e004      	b.n	179c6 <fn_process_inc_azm_full_cal+0xbe>
   179bc:	2201      	movs	r2, #1
   179be:	54ea      	strb	r2, [r5, r3]
   179c0:	3301      	adds	r3, #1
   179c2:	428b      	cmp	r3, r1
   179c4:	d80a      	bhi.n	179dc <fn_process_inc_azm_full_cal+0xd4>
   179c6:	5cf2      	ldrb	r2, [r6, r3]
   179c8:	2a00      	cmp	r2, #0
   179ca:	d1f7      	bne.n	179bc <fn_process_inc_azm_full_cal+0xb4>
				if (permGroupRemove[k]||(k==g)){
   179cc:	1ae2      	subs	r2, r4, r3
   179ce:	4257      	negs	r7, r2
   179d0:	4157      	adcs	r7, r2
   179d2:	1c3a      	adds	r2, r7, #0
   179d4:	54ea      	strb	r2, [r5, r3]
			for (k=1;k<=cal_report.groupsAll;k++){
   179d6:	3301      	adds	r3, #1
   179d8:	428b      	cmp	r3, r1
   179da:	d9f4      	bls.n	179c6 <fn_process_inc_azm_full_cal+0xbe>
			nGroups = cal_removeGroup(tempGroupRemove, cal_report.groupsAll);
   179dc:	4b5d      	ldr	r3, [pc, #372]	; (17b54 <fn_process_inc_azm_full_cal+0x24c>)
   179de:	0028      	movs	r0, r5
   179e0:	4798      	blx	r3
   179e2:	465b      	mov	r3, fp
   179e4:	6018      	str	r0, [r3, #0]
			nPoints = nGroups*GROUP_SIZE;
   179e6:	4653      	mov	r3, sl
   179e8:	0080      	lsls	r0, r0, #2
   179ea:	6018      	str	r0, [r3, #0]
			if (g==0){
   179ec:	2c00      	cmp	r4, #0
   179ee:	d100      	bne.n	179f2 <fn_process_inc_azm_full_cal+0xea>
   179f0:	e087      	b.n	17b02 <fn_process_inc_azm_full_cal+0x1fa>
			cal_full_inc_azm_process(iterations);
   179f2:	4b59      	ldr	r3, [pc, #356]	; (17b58 <fn_process_inc_azm_full_cal+0x250>)
   179f4:	2001      	movs	r0, #1
   179f6:	4798      	blx	r3
			incErrArray[g] = cal_report.inc_angle_err;
   179f8:	464a      	mov	r2, r9
   179fa:	494c      	ldr	r1, [pc, #304]	; (17b2c <fn_process_inc_azm_full_cal+0x224>)
   179fc:	9b02      	ldr	r3, [sp, #8]
   179fe:	6a09      	ldr	r1, [r1, #32]
   17a00:	5099      	str	r1, [r3, r2]
			azmErrArray[g] = cal_report.azm_angle_err;
   17a02:	494a      	ldr	r1, [pc, #296]	; (17b2c <fn_process_inc_azm_full_cal+0x224>)
   17a04:	9b03      	ldr	r3, [sp, #12]
   17a06:	6a49      	ldr	r1, [r1, #36]	; 0x24
   17a08:	5099      	str	r1, [r3, r2]
   17a0a:	2304      	movs	r3, #4
   17a0c:	425b      	negs	r3, r3
   17a0e:	469c      	mov	ip, r3
   17a10:	44e1      	add	r9, ip
		for (g=cal_report.groupsAll;g>=0;g--){	
   17a12:	3c01      	subs	r4, #1
   17a14:	d2b2      	bcs.n	1797c <fn_process_inc_azm_full_cal+0x74>
		uint32_t badGroup = 0;
   17a16:	2300      	movs	r3, #0
   17a18:	9306      	str	r3, [sp, #24]
		float badGroupDelta = 0;
   17a1a:	2300      	movs	r3, #0
		cal_findBadGroup(incErrArray, azmErrArray, &badGroup, &badGroupDelta);
   17a1c:	a92f      	add	r1, sp, #188	; 0xbc
		float badGroupDelta = 0;
   17a1e:	9307      	str	r3, [sp, #28]
		cal_findBadGroup(incErrArray, azmErrArray, &badGroup, &badGroupDelta);
   17a20:	a816      	add	r0, sp, #88	; 0x58
   17a22:	ab07      	add	r3, sp, #28
   17a24:	aa06      	add	r2, sp, #24
   17a26:	4c4d      	ldr	r4, [pc, #308]	; (17b5c <fn_process_inc_azm_full_cal+0x254>)
   17a28:	47a0      	blx	r4
		if (badGroupDelta>BAD_GROUP_THRESHOLD){
   17a2a:	21fc      	movs	r1, #252	; 0xfc
   17a2c:	9807      	ldr	r0, [sp, #28]
   17a2e:	0589      	lsls	r1, r1, #22
   17a30:	4b4b      	ldr	r3, [pc, #300]	; (17b60 <fn_process_inc_azm_full_cal+0x258>)
   17a32:	4798      	blx	r3
   17a34:	2800      	cmp	r0, #0
   17a36:	d03e      	beq.n	17ab6 <fn_process_inc_azm_full_cal+0x1ae>
			permGroupRemove[badGroup] = true;
   17a38:	2301      	movs	r3, #1
   17a3a:	9a06      	ldr	r2, [sp, #24]
			sprintf(display_str, "Detected Bad Group");
   17a3c:	4949      	ldr	r1, [pc, #292]	; (17b64 <fn_process_inc_azm_full_cal+0x25c>)
			permGroupRemove[badGroup] = true;
   17a3e:	54b3      	strb	r3, [r6, r2]
			sprintf(display_str, "Detected Bad Group");
   17a40:	483f      	ldr	r0, [pc, #252]	; (17b40 <fn_process_inc_azm_full_cal+0x238>)
   17a42:	2213      	movs	r2, #19
   17a44:	47c0      	blx	r8
			glcd_tiny_draw_string(0,4,display_str);
   17a46:	4b3f      	ldr	r3, [pc, #252]	; (17b44 <fn_process_inc_azm_full_cal+0x23c>)
   17a48:	4a3d      	ldr	r2, [pc, #244]	; (17b40 <fn_process_inc_azm_full_cal+0x238>)
   17a4a:	2104      	movs	r1, #4
   17a4c:	2000      	movs	r0, #0
   17a4e:	4798      	blx	r3
			sprintf(display_str, "                     ");// Clear line
   17a50:	2216      	movs	r2, #22
   17a52:	4945      	ldr	r1, [pc, #276]	; (17b68 <fn_process_inc_azm_full_cal+0x260>)
   17a54:	483a      	ldr	r0, [pc, #232]	; (17b40 <fn_process_inc_azm_full_cal+0x238>)
   17a56:	47c0      	blx	r8
			glcd_tiny_draw_string(0,5,display_str);
   17a58:	4a39      	ldr	r2, [pc, #228]	; (17b40 <fn_process_inc_azm_full_cal+0x238>)
   17a5a:	2105      	movs	r1, #5
   17a5c:	2000      	movs	r0, #0
   17a5e:	4b39      	ldr	r3, [pc, #228]	; (17b44 <fn_process_inc_azm_full_cal+0x23c>)
   17a60:	4798      	blx	r3
			sprintf(display_str, "GRP %d Error %0.3fdeg", badGroup, badGroupDelta);
   17a62:	4b42      	ldr	r3, [pc, #264]	; (17b6c <fn_process_inc_azm_full_cal+0x264>)
   17a64:	9807      	ldr	r0, [sp, #28]
   17a66:	4798      	blx	r3
   17a68:	9c06      	ldr	r4, [sp, #24]
   17a6a:	9000      	str	r0, [sp, #0]
   17a6c:	9101      	str	r1, [sp, #4]
   17a6e:	0022      	movs	r2, r4
   17a70:	493f      	ldr	r1, [pc, #252]	; (17b70 <fn_process_inc_azm_full_cal+0x268>)
   17a72:	4b2f      	ldr	r3, [pc, #188]	; (17b30 <fn_process_inc_azm_full_cal+0x228>)
   17a74:	4832      	ldr	r0, [pc, #200]	; (17b40 <fn_process_inc_azm_full_cal+0x238>)
   17a76:	4798      	blx	r3
			glcd_tiny_draw_string(0,5,display_str);
   17a78:	4b32      	ldr	r3, [pc, #200]	; (17b44 <fn_process_inc_azm_full_cal+0x23c>)
   17a7a:	4a31      	ldr	r2, [pc, #196]	; (17b40 <fn_process_inc_azm_full_cal+0x238>)
   17a7c:	2105      	movs	r1, #5
   17a7e:	2000      	movs	r0, #0
   17a80:	4798      	blx	r3
			sprintf(display_str, "Group Removed, ");
   17a82:	2210      	movs	r2, #16
   17a84:	493b      	ldr	r1, [pc, #236]	; (17b74 <fn_process_inc_azm_full_cal+0x26c>)
   17a86:	482e      	ldr	r0, [pc, #184]	; (17b40 <fn_process_inc_azm_full_cal+0x238>)
   17a88:	47c0      	blx	r8
			glcd_tiny_draw_string(0,6,display_str);
   17a8a:	4b2e      	ldr	r3, [pc, #184]	; (17b44 <fn_process_inc_azm_full_cal+0x23c>)
   17a8c:	4a2c      	ldr	r2, [pc, #176]	; (17b40 <fn_process_inc_azm_full_cal+0x238>)
   17a8e:	2106      	movs	r1, #6
   17a90:	2000      	movs	r0, #0
   17a92:	4798      	blx	r3
			sprintf(display_str, "Restarting Analysis");
   17a94:	2214      	movs	r2, #20
   17a96:	4938      	ldr	r1, [pc, #224]	; (17b78 <fn_process_inc_azm_full_cal+0x270>)
   17a98:	4829      	ldr	r0, [pc, #164]	; (17b40 <fn_process_inc_azm_full_cal+0x238>)
   17a9a:	47c0      	blx	r8
			glcd_tiny_draw_string(0,7,display_str);
   17a9c:	4a28      	ldr	r2, [pc, #160]	; (17b40 <fn_process_inc_azm_full_cal+0x238>)
   17a9e:	2107      	movs	r1, #7
   17aa0:	2000      	movs	r0, #0
   17aa2:	4b28      	ldr	r3, [pc, #160]	; (17b44 <fn_process_inc_azm_full_cal+0x23c>)
   17aa4:	4798      	blx	r3
			glcd_write();
   17aa6:	4b29      	ldr	r3, [pc, #164]	; (17b4c <fn_process_inc_azm_full_cal+0x244>)
   17aa8:	4798      	blx	r3
   17aaa:	9b05      	ldr	r3, [sp, #20]
   17aac:	3b01      	subs	r3, #1
   17aae:	9305      	str	r3, [sp, #20]
	for (iter=0;iter<MAX_BAD_GROUPS;iter++){
   17ab0:	2b00      	cmp	r3, #0
   17ab2:	d000      	beq.n	17ab6 <fn_process_inc_azm_full_cal+0x1ae>
   17ab4:	e74c      	b.n	17950 <fn_process_inc_azm_full_cal+0x48>
	SD_save_raw_data(inc_azm_full);
   17ab6:	4b31      	ldr	r3, [pc, #196]	; (17b7c <fn_process_inc_azm_full_cal+0x274>)
   17ab8:	2000      	movs	r0, #0
   17aba:	4798      	blx	r3
	SD_write_report();
   17abc:	4b30      	ldr	r3, [pc, #192]	; (17b80 <fn_process_inc_azm_full_cal+0x278>)
   17abe:	4798      	blx	r3
	SD_add_cal_history(inc_azm_full);
   17ac0:	4b30      	ldr	r3, [pc, #192]	; (17b84 <fn_process_inc_azm_full_cal+0x27c>)
   17ac2:	2000      	movs	r0, #0
   17ac4:	4798      	blx	r3
	save_calibration();
   17ac6:	4b30      	ldr	r3, [pc, #192]	; (17b88 <fn_process_inc_azm_full_cal+0x280>)
   17ac8:	4798      	blx	r3
	glcd_clear_buffer();
   17aca:	4b16      	ldr	r3, [pc, #88]	; (17b24 <fn_process_inc_azm_full_cal+0x21c>)
   17acc:	4798      	blx	r3
	sprintf(display_str, "Calibration Complete!");
   17ace:	2216      	movs	r2, #22
   17ad0:	492e      	ldr	r1, [pc, #184]	; (17b8c <fn_process_inc_azm_full_cal+0x284>)
   17ad2:	481b      	ldr	r0, [pc, #108]	; (17b40 <fn_process_inc_azm_full_cal+0x238>)
   17ad4:	47c0      	blx	r8
	glcd_tiny_draw_string(0,2,display_str);
   17ad6:	4a1a      	ldr	r2, [pc, #104]	; (17b40 <fn_process_inc_azm_full_cal+0x238>)
   17ad8:	2102      	movs	r1, #2
   17ada:	2000      	movs	r0, #0
   17adc:	4b19      	ldr	r3, [pc, #100]	; (17b44 <fn_process_inc_azm_full_cal+0x23c>)
   17ade:	4798      	blx	r3
	glcd_write();
   17ae0:	4b1a      	ldr	r3, [pc, #104]	; (17b4c <fn_process_inc_azm_full_cal+0x244>)
   17ae2:	4798      	blx	r3
	delay_s(3);
   17ae4:	482a      	ldr	r0, [pc, #168]	; (17b90 <fn_process_inc_azm_full_cal+0x288>)
   17ae6:	4b2b      	ldr	r3, [pc, #172]	; (17b94 <fn_process_inc_azm_full_cal+0x28c>)
   17ae8:	4798      	blx	r3
	wdt_enable();
   17aea:	4b2b      	ldr	r3, [pc, #172]	; (17b98 <fn_process_inc_azm_full_cal+0x290>)
   17aec:	4798      	blx	r3
	current_input = input_state_complete;
   17aee:	2208      	movs	r2, #8
   17af0:	4b2a      	ldr	r3, [pc, #168]	; (17b9c <fn_process_inc_azm_full_cal+0x294>)
   17af2:	601a      	str	r2, [r3, #0]
}
   17af4:	b049      	add	sp, #292	; 0x124
   17af6:	bc3c      	pop	{r2, r3, r4, r5}
   17af8:	4690      	mov	r8, r2
   17afa:	4699      	mov	r9, r3
   17afc:	46a2      	mov	sl, r4
   17afe:	46ab      	mov	fp, r5
   17b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
			cal_full_inc_azm_process(iterations);
   17b02:	4b15      	ldr	r3, [pc, #84]	; (17b58 <fn_process_inc_azm_full_cal+0x250>)
   17b04:	2003      	movs	r0, #3
   17b06:	4798      	blx	r3
			incErrArray[g] = cal_report.inc_angle_err;
   17b08:	4b08      	ldr	r3, [pc, #32]	; (17b2c <fn_process_inc_azm_full_cal+0x224>)
   17b0a:	6a1b      	ldr	r3, [r3, #32]
   17b0c:	9316      	str	r3, [sp, #88]	; 0x58
			azmErrArray[g] = cal_report.azm_angle_err;
   17b0e:	4b07      	ldr	r3, [pc, #28]	; (17b2c <fn_process_inc_azm_full_cal+0x224>)
   17b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17b12:	932f      	str	r3, [sp, #188]	; 0xbc
   17b14:	e77f      	b.n	17a16 <fn_process_inc_azm_full_cal+0x10e>
   17b16:	46c0      	nop			; (mov r8, r8)
   17b18:	0000d87d 	.word	0x0000d87d
   17b1c:	00008d41 	.word	0x00008d41
   17b20:	0001fdfd 	.word	0x0001fdfd
   17b24:	00013805 	.word	0x00013805
   17b28:	0001fd79 	.word	0x0001fd79
   17b2c:	20004b4c 	.word	0x20004b4c
   17b30:	0001fe91 	.word	0x0001fe91
   17b34:	20003924 	.word	0x20003924
   17b38:	20003340 	.word	0x20003340
   17b3c:	000265ec 	.word	0x000265ec
   17b40:	200033a8 	.word	0x200033a8
   17b44:	000150a1 	.word	0x000150a1
   17b48:	00026604 	.word	0x00026604
   17b4c:	0001493d 	.word	0x0001493d
   17b50:	0000857d 	.word	0x0000857d
   17b54:	00010715 	.word	0x00010715
   17b58:	00012439 	.word	0x00012439
   17b5c:	00010809 	.word	0x00010809
   17b60:	0001d0d1 	.word	0x0001d0d1
   17b64:	0002661c 	.word	0x0002661c
   17b68:	00026630 	.word	0x00026630
   17b6c:	0001fb6d 	.word	0x0001fb6d
   17b70:	00026648 	.word	0x00026648
   17b74:	00026660 	.word	0x00026660
   17b78:	00026670 	.word	0x00026670
   17b7c:	0000c075 	.word	0x0000c075
   17b80:	0000ba69 	.word	0x0000ba69
   17b84:	0000b491 	.word	0x0000b491
   17b88:	00008b05 	.word	0x00008b05
   17b8c:	000265d4 	.word	0x000265d4
   17b90:	00000bb8 	.word	0x00000bb8
   17b94:	000161e9 	.word	0x000161e9
   17b98:	0000d855 	.word	0x0000d855
   17b9c:	2000403c 	.word	0x2000403c

00017ba0 <fn_measure>:
void fn_measure(void){
   17ba0:	b570      	push	{r4, r5, r6, lr}
	data_buf_ind = data_buf_ind+1;
   17ba2:	4e18      	ldr	r6, [pc, #96]	; (17c04 <fn_measure+0x64>)
   17ba4:	7833      	ldrb	r3, [r6, #0]
   17ba6:	3301      	adds	r3, #1
   17ba8:	b2db      	uxtb	r3, r3
	if (data_buf_ind >= NBUFF_MEAS){data_buf_ind = 0;}
   17baa:	2b05      	cmp	r3, #5
   17bac:	d824      	bhi.n	17bf8 <fn_measure+0x58>
   17bae:	20b8      	movs	r0, #184	; 0xb8
   17bb0:	4358      	muls	r0, r3
   17bb2:	4c15      	ldr	r4, [pc, #84]	; (17c08 <fn_measure+0x68>)
	data_buf_ind = data_buf_ind+1;
   17bb4:	7033      	strb	r3, [r6, #0]
   17bb6:	1820      	adds	r0, r4, r0
	data_ref = data_ref+1;
   17bb8:	4914      	ldr	r1, [pc, #80]	; (17c0c <fn_measure+0x6c>)
	if (data_ref>= 999){data_ref = 1;}
   17bba:	4d15      	ldr	r5, [pc, #84]	; (17c10 <fn_measure+0x70>)
	data_ref = data_ref+1;
   17bbc:	680a      	ldr	r2, [r1, #0]
   17bbe:	3201      	adds	r2, #1
	if (data_ref>= 999){data_ref = 1;}
   17bc0:	42aa      	cmp	r2, r5
   17bc2:	d900      	bls.n	17bc6 <fn_measure+0x26>
   17bc4:	2201      	movs	r2, #1
	data_buf[data_buf_ind].index_ref = data_ref;
   17bc6:	25b8      	movs	r5, #184	; 0xb8
   17bc8:	436b      	muls	r3, r5
   17bca:	50e2      	str	r2, [r4, r3]
	full_measurement(&data_buf[data_buf_ind], options.shot_delay);
   17bcc:	4b11      	ldr	r3, [pc, #68]	; (17c14 <fn_measure+0x74>)
	if (data_ref>= 999){data_ref = 1;}
   17bce:	600a      	str	r2, [r1, #0]
	full_measurement(&data_buf[data_buf_ind], options.shot_delay);
   17bd0:	7999      	ldrb	r1, [r3, #6]
   17bd2:	4b11      	ldr	r3, [pc, #68]	; (17c18 <fn_measure+0x78>)
   17bd4:	4798      	blx	r3
	save_measurement(&data_buf[data_buf_ind]);
   17bd6:	7830      	ldrb	r0, [r6, #0]
   17bd8:	4b10      	ldr	r3, [pc, #64]	; (17c1c <fn_measure+0x7c>)
   17bda:	4368      	muls	r0, r5
   17bdc:	1820      	adds	r0, r4, r0
   17bde:	4798      	blx	r3
	rangefinder_on_off(false);
   17be0:	2000      	movs	r0, #0
   17be2:	4b0f      	ldr	r3, [pc, #60]	; (17c20 <fn_measure+0x80>)
   17be4:	4798      	blx	r3
	BLE_sendMeas(&data_buf[data_buf_ind]);
   17be6:	7830      	ldrb	r0, [r6, #0]
   17be8:	4b0e      	ldr	r3, [pc, #56]	; (17c24 <fn_measure+0x84>)
   17bea:	4368      	muls	r0, r5
   17bec:	1820      	adds	r0, r4, r0
   17bee:	4798      	blx	r3
	current_input = input_state_complete;
   17bf0:	2208      	movs	r2, #8
   17bf2:	4b0d      	ldr	r3, [pc, #52]	; (17c28 <fn_measure+0x88>)
   17bf4:	601a      	str	r2, [r3, #0]
}
   17bf6:	bd70      	pop	{r4, r5, r6, pc}
	if (data_buf_ind >= NBUFF_MEAS){data_buf_ind = 0;}
   17bf8:	2300      	movs	r3, #0
   17bfa:	4c03      	ldr	r4, [pc, #12]	; (17c08 <fn_measure+0x68>)
   17bfc:	7033      	strb	r3, [r6, #0]
   17bfe:	0020      	movs	r0, r4
   17c00:	e7da      	b.n	17bb8 <fn_measure+0x18>
   17c02:	46c0      	nop			; (mov r8, r8)
   17c04:	20000f04 	.word	0x20000f04
   17c08:	20002790 	.word	0x20002790
   17c0c:	20000f08 	.word	0x20000f08
   17c10:	000003e6 	.word	0x000003e6
   17c14:	2000332c 	.word	0x2000332c
   17c18:	0000d291 	.word	0x0000d291
   17c1c:	0000c1b1 	.word	0x0000c1b1
   17c20:	0000c5dd 	.word	0x0000c5dd
   17c24:	00007a99 	.word	0x00007a99
   17c28:	2000403c 	.word	0x2000403c

00017c2c <fn_error_info>:
void fn_error_info(void){
   17c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   17c2e:	46d6      	mov	lr, sl
   17c30:	464f      	mov	r7, r9
   17c32:	4646      	mov	r6, r8
   17c34:	b5c0      	push	{r6, r7, lr}
	if (state_change){ // Perform first time entering function
   17c36:	4bb3      	ldr	r3, [pc, #716]	; (17f04 <fn_error_info+0x2d8>)
   17c38:	7819      	ldrb	r1, [r3, #0]
   17c3a:	b2c9      	uxtb	r1, r1
   17c3c:	2900      	cmp	r1, #0
   17c3e:	d068      	beq.n	17d12 <fn_error_info+0xe6>
		shot_list_ind = 0;
   17c40:	2300      	movs	r3, #0
		nshots = 0;
   17c42:	4ab1      	ldr	r2, [pc, #708]	; (17f08 <fn_error_info+0x2dc>)
		shot_list_ind = 0;
   17c44:	4cb1      	ldr	r4, [pc, #708]	; (17f0c <fn_error_info+0x2e0>)
		nshots = 0;
   17c46:	7013      	strb	r3, [r2, #0]
		shot_list_ind = 0;
   17c48:	7023      	strb	r3, [r4, #0]
		temp_buf_ind = data_buf_ind;
   17c4a:	4bb1      	ldr	r3, [pc, #708]	; (17f10 <fn_error_info+0x2e4>)
		nshots = 0;
   17c4c:	4690      	mov	r8, r2
		temp_buf_ind = data_buf_ind;
   17c4e:	781a      	ldrb	r2, [r3, #0]
			if (data_buf[temp_buf_ind].num_errors>0){
   17c50:	23b8      	movs	r3, #184	; 0xb8
   17c52:	4353      	muls	r3, r2
   17c54:	4eaf      	ldr	r6, [pc, #700]	; (17f14 <fn_error_info+0x2e8>)
   17c56:	18f3      	adds	r3, r6, r3
   17c58:	3390      	adds	r3, #144	; 0x90
   17c5a:	681b      	ldr	r3, [r3, #0]
   17c5c:	2b00      	cmp	r3, #0
   17c5e:	d000      	beq.n	17c62 <fn_error_info+0x36>
   17c60:	e0b5      	b.n	17dce <fn_error_info+0x1a2>
   17c62:	2500      	movs	r5, #0
   17c64:	2000      	movs	r0, #0
			if (temp_buf_ind == 0){ temp_buf_ind = NBUFF_MEAS-1;}//  Buffer wrap-around
   17c66:	2a00      	cmp	r2, #0
   17c68:	d100      	bne.n	17c6c <fn_error_info+0x40>
   17c6a:	e0b7      	b.n	17ddc <fn_error_info+0x1b0>
			else {temp_buf_ind--;}
   17c6c:	3a01      	subs	r2, #1
   17c6e:	b2d3      	uxtb	r3, r2
			if (data_buf[temp_buf_ind].num_errors>0){
   17c70:	22b8      	movs	r2, #184	; 0xb8
   17c72:	435a      	muls	r2, r3
   17c74:	18b2      	adds	r2, r6, r2
   17c76:	3290      	adds	r2, #144	; 0x90
   17c78:	6812      	ldr	r2, [r2, #0]
   17c7a:	2a00      	cmp	r2, #0
   17c7c:	d000      	beq.n	17c80 <fn_error_info+0x54>
   17c7e:	e0b4      	b.n	17dea <fn_error_info+0x1be>
			if (temp_buf_ind == 0){ temp_buf_ind = NBUFF_MEAS-1;}//  Buffer wrap-around
   17c80:	2b00      	cmp	r3, #0
   17c82:	d000      	beq.n	17c86 <fn_error_info+0x5a>
   17c84:	e0b9      	b.n	17dfa <fn_error_info+0x1ce>
			if (data_buf[temp_buf_ind].num_errors>0){
   17c86:	2385      	movs	r3, #133	; 0x85
   17c88:	00db      	lsls	r3, r3, #3
   17c8a:	58f3      	ldr	r3, [r6, r3]
   17c8c:	2b00      	cmp	r3, #0
   17c8e:	d100      	bne.n	17c92 <fn_error_info+0x66>
   17c90:	e0eb      	b.n	17e6a <fn_error_info+0x23e>
			if (temp_buf_ind == 0){ temp_buf_ind = NBUFF_MEAS-1;}//  Buffer wrap-around
   17c92:	2305      	movs	r3, #5
				shot_list_ind++;
   17c94:	000d      	movs	r5, r1
				shot_list[shot_list_ind] = temp_buf_ind;
   17c96:	4aa0      	ldr	r2, [pc, #640]	; (17f18 <fn_error_info+0x2ec>)
   17c98:	5413      	strb	r3, [r2, r0]
				shot_list_ind++;
   17c9a:	3001      	adds	r0, #1
   17c9c:	b2c0      	uxtb	r0, r0
			if (temp_buf_ind == 0){ temp_buf_ind = NBUFF_MEAS-1;}//  Buffer wrap-around
   17c9e:	2b00      	cmp	r3, #0
   17ca0:	d000      	beq.n	17ca4 <fn_error_info+0x78>
   17ca2:	e0e3      	b.n	17e6c <fn_error_info+0x240>
			if (data_buf[temp_buf_ind].num_errors>0){
   17ca4:	2385      	movs	r3, #133	; 0x85
   17ca6:	00db      	lsls	r3, r3, #3
   17ca8:	58f3      	ldr	r3, [r6, r3]
   17caa:	2b00      	cmp	r3, #0
   17cac:	d100      	bne.n	17cb0 <fn_error_info+0x84>
   17cae:	e0ed      	b.n	17e8c <fn_error_info+0x260>
			if (temp_buf_ind == 0){ temp_buf_ind = NBUFF_MEAS-1;}//  Buffer wrap-around
   17cb0:	2305      	movs	r3, #5
				shot_list_ind++;
   17cb2:	000d      	movs	r5, r1
				shot_list[shot_list_ind] = temp_buf_ind;
   17cb4:	4a98      	ldr	r2, [pc, #608]	; (17f18 <fn_error_info+0x2ec>)
   17cb6:	5413      	strb	r3, [r2, r0]
				shot_list_ind++;
   17cb8:	3001      	adds	r0, #1
   17cba:	b2c0      	uxtb	r0, r0
			if (temp_buf_ind == 0){ temp_buf_ind = NBUFF_MEAS-1;}//  Buffer wrap-around
   17cbc:	2b00      	cmp	r3, #0
   17cbe:	d000      	beq.n	17cc2 <fn_error_info+0x96>
   17cc0:	e0e5      	b.n	17e8e <fn_error_info+0x262>
			if (data_buf[temp_buf_ind].num_errors>0){
   17cc2:	2385      	movs	r3, #133	; 0x85
   17cc4:	00db      	lsls	r3, r3, #3
   17cc6:	58f3      	ldr	r3, [r6, r3]
   17cc8:	2b00      	cmp	r3, #0
   17cca:	d100      	bne.n	17cce <fn_error_info+0xa2>
   17ccc:	e0ef      	b.n	17eae <fn_error_info+0x282>
			if (temp_buf_ind == 0){ temp_buf_ind = NBUFF_MEAS-1;}//  Buffer wrap-around
   17cce:	2305      	movs	r3, #5
				shot_list_ind++;
   17cd0:	000d      	movs	r5, r1
				shot_list[shot_list_ind] = temp_buf_ind;
   17cd2:	4a91      	ldr	r2, [pc, #580]	; (17f18 <fn_error_info+0x2ec>)
   17cd4:	5413      	strb	r3, [r2, r0]
				shot_list_ind++;
   17cd6:	3001      	adds	r0, #1
   17cd8:	b2c0      	uxtb	r0, r0
			if (temp_buf_ind == 0){ temp_buf_ind = NBUFF_MEAS-1;}//  Buffer wrap-around
   17cda:	2b00      	cmp	r3, #0
   17cdc:	d000      	beq.n	17ce0 <fn_error_info+0xb4>
   17cde:	e0e7      	b.n	17eb0 <fn_error_info+0x284>
			if (data_buf[temp_buf_ind].num_errors>0){
   17ce0:	2385      	movs	r3, #133	; 0x85
   17ce2:	00db      	lsls	r3, r3, #3
   17ce4:	58f3      	ldr	r3, [r6, r3]
   17ce6:	2b00      	cmp	r3, #0
   17ce8:	d000      	beq.n	17cec <fn_error_info+0xc0>
   17cea:	e100      	b.n	17eee <fn_error_info+0x2c2>
   17cec:	0029      	movs	r1, r5
   17cee:	2900      	cmp	r1, #0
   17cf0:	d000      	beq.n	17cf4 <fn_error_info+0xc8>
   17cf2:	e0ee      	b.n	17ed2 <fn_error_info+0x2a6>
		shot_list_ind = 0;
   17cf4:	2200      	movs	r2, #0
		last_input = input_none;
   17cf6:	4b89      	ldr	r3, [pc, #548]	; (17f1c <fn_error_info+0x2f0>)
		shot_list_ind = 0;
   17cf8:	7022      	strb	r2, [r4, #0]
		last_input = input_none;
   17cfa:	601a      	str	r2, [r3, #0]
	switch(last_input){
   17cfc:	681b      	ldr	r3, [r3, #0]
   17cfe:	2b03      	cmp	r3, #3
   17d00:	d112      	bne.n	17d28 <fn_error_info+0xfc>
   17d02:	2300      	movs	r3, #0
			if(shot_list_ind<nshots){
   17d04:	4642      	mov	r2, r8
   17d06:	7812      	ldrb	r2, [r2, #0]
   17d08:	429a      	cmp	r2, r3
   17d0a:	d90d      	bls.n	17d28 <fn_error_info+0xfc>
				shot_list_ind++;
   17d0c:	3301      	adds	r3, #1
   17d0e:	7023      	strb	r3, [r4, #0]
   17d10:	e00a      	b.n	17d28 <fn_error_info+0xfc>
	switch(last_input){
   17d12:	4b82      	ldr	r3, [pc, #520]	; (17f1c <fn_error_info+0x2f0>)
			if(shot_list_ind>0){
   17d14:	4c7d      	ldr	r4, [pc, #500]	; (17f0c <fn_error_info+0x2e0>)
	switch(last_input){
   17d16:	681b      	ldr	r3, [r3, #0]
   17d18:	2b02      	cmp	r3, #2
   17d1a:	d100      	bne.n	17d1e <fn_error_info+0xf2>
   17d1c:	e0dc      	b.n	17ed8 <fn_error_info+0x2ac>
   17d1e:	2b03      	cmp	r3, #3
   17d20:	d100      	bne.n	17d24 <fn_error_info+0xf8>
   17d22:	e0e0      	b.n	17ee6 <fn_error_info+0x2ba>
   17d24:	4b78      	ldr	r3, [pc, #480]	; (17f08 <fn_error_info+0x2dc>)
   17d26:	4698      	mov	r8, r3
	glcd_clear_buffer();
   17d28:	4b7d      	ldr	r3, [pc, #500]	; (17f20 <fn_error_info+0x2f4>)
   17d2a:	4798      	blx	r3
	sprintf(display_str,"Error Information:");
   17d2c:	4d7d      	ldr	r5, [pc, #500]	; (17f24 <fn_error_info+0x2f8>)
   17d2e:	4b7e      	ldr	r3, [pc, #504]	; (17f28 <fn_error_info+0x2fc>)
   17d30:	2213      	movs	r2, #19
   17d32:	497e      	ldr	r1, [pc, #504]	; (17f2c <fn_error_info+0x300>)
   17d34:	0028      	movs	r0, r5
   17d36:	469a      	mov	sl, r3
   17d38:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   17d3a:	002a      	movs	r2, r5
   17d3c:	2100      	movs	r1, #0
   17d3e:	2000      	movs	r0, #0
   17d40:	4f7b      	ldr	r7, [pc, #492]	; (17f30 <fn_error_info+0x304>)
   17d42:	47b8      	blx	r7
	if(shot_list_ind==0){
   17d44:	7823      	ldrb	r3, [r4, #0]
   17d46:	2b00      	cmp	r3, #0
   17d48:	d100      	bne.n	17d4c <fn_error_info+0x120>
   17d4a:	e087      	b.n	17e5c <fn_error_info+0x230>
	}else if (shot_list_ind>=nshots){
   17d4c:	4642      	mov	r2, r8
   17d4e:	7812      	ldrb	r2, [r2, #0]
   17d50:	429a      	cmp	r2, r3
   17d52:	d900      	bls.n	17d56 <fn_error_info+0x12a>
   17d54:	e07b      	b.n	17e4e <fn_error_info+0x222>
		drawSoftKeys("","<","","Back");
   17d56:	4877      	ldr	r0, [pc, #476]	; (17f34 <fn_error_info+0x308>)
   17d58:	4b77      	ldr	r3, [pc, #476]	; (17f38 <fn_error_info+0x30c>)
   17d5a:	0002      	movs	r2, r0
   17d5c:	4977      	ldr	r1, [pc, #476]	; (17f3c <fn_error_info+0x310>)
   17d5e:	4e78      	ldr	r6, [pc, #480]	; (17f40 <fn_error_info+0x314>)
   17d60:	47b0      	blx	r6
	if(nshots<= shot_list_ind){//  display null message
   17d62:	4642      	mov	r2, r8
   17d64:	7823      	ldrb	r3, [r4, #0]
   17d66:	7812      	ldrb	r2, [r2, #0]
   17d68:	429a      	cmp	r2, r3
   17d6a:	d956      	bls.n	17e1a <fn_error_info+0x1ee>
		sprintf(display_str,"Measurement %d", data_buf[temp_buf_ind].index_ref);
   17d6c:	24b8      	movs	r4, #184	; 0xb8
		temp_buf_ind = shot_list[shot_list_ind];
   17d6e:	4a6a      	ldr	r2, [pc, #424]	; (17f18 <fn_error_info+0x2ec>)
		sprintf(display_str,"Measurement %d", data_buf[temp_buf_ind].index_ref);
   17d70:	4e68      	ldr	r6, [pc, #416]	; (17f14 <fn_error_info+0x2e8>)
		temp_buf_ind = shot_list[shot_list_ind];
   17d72:	5cd3      	ldrb	r3, [r2, r3]
		sprintf(display_str,"Measurement %d", data_buf[temp_buf_ind].index_ref);
   17d74:	4973      	ldr	r1, [pc, #460]	; (17f44 <fn_error_info+0x318>)
   17d76:	435c      	muls	r4, r3
   17d78:	0028      	movs	r0, r5
   17d7a:	5932      	ldr	r2, [r6, r4]
   17d7c:	4b72      	ldr	r3, [pc, #456]	; (17f48 <fn_error_info+0x31c>)
   17d7e:	4798      	blx	r3
		for (i=0;i<min(5, data_buf[temp_buf_ind].num_errors); i++){
   17d80:	1936      	adds	r6, r6, r4
		glcd_tiny_draw_string(0,1,display_str);
   17d82:	002a      	movs	r2, r5
   17d84:	2101      	movs	r1, #1
   17d86:	2000      	movs	r0, #0
   17d88:	47b8      	blx	r7
		for (i=0;i<min(5, data_buf[temp_buf_ind].num_errors); i++){
   17d8a:	0033      	movs	r3, r6
   17d8c:	3390      	adds	r3, #144	; 0x90
   17d8e:	681a      	ldr	r2, [r3, #0]
   17d90:	2a00      	cmp	r2, #0
   17d92:	d015      	beq.n	17dc0 <fn_error_info+0x194>
   17d94:	4a6d      	ldr	r2, [pc, #436]	; (17f4c <fn_error_info+0x320>)
   17d96:	2400      	movs	r4, #0
   17d98:	4691      	mov	r9, r2
   17d9a:	4698      	mov	r8, r3
			gen_err_message(display_str, &data_buf[temp_buf_ind], i);
   17d9c:	0022      	movs	r2, r4
   17d9e:	0031      	movs	r1, r6
   17da0:	0028      	movs	r0, r5
   17da2:	47c8      	blx	r9
			glcd_tiny_draw_string(0,i+2,display_str);
   17da4:	1ca1      	adds	r1, r4, #2
   17da6:	b2c9      	uxtb	r1, r1
   17da8:	002a      	movs	r2, r5
   17daa:	2000      	movs	r0, #0
   17dac:	47b8      	blx	r7
		for (i=0;i<min(5, data_buf[temp_buf_ind].num_errors); i++){
   17dae:	4643      	mov	r3, r8
   17db0:	681b      	ldr	r3, [r3, #0]
   17db2:	3401      	adds	r4, #1
   17db4:	b2e4      	uxtb	r4, r4
   17db6:	2b05      	cmp	r3, #5
   17db8:	d900      	bls.n	17dbc <fn_error_info+0x190>
   17dba:	2305      	movs	r3, #5
   17dbc:	429c      	cmp	r4, r3
   17dbe:	d3ed      	bcc.n	17d9c <fn_error_info+0x170>
	glcd_write();
   17dc0:	4b63      	ldr	r3, [pc, #396]	; (17f50 <fn_error_info+0x324>)
   17dc2:	4798      	blx	r3
}
   17dc4:	bc1c      	pop	{r2, r3, r4}
   17dc6:	4690      	mov	r8, r2
   17dc8:	4699      	mov	r9, r3
   17dca:	46a2      	mov	sl, r4
   17dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
				shot_list[shot_list_ind] = temp_buf_ind;
   17dce:	4b52      	ldr	r3, [pc, #328]	; (17f18 <fn_error_info+0x2ec>)
   17dd0:	000d      	movs	r5, r1
   17dd2:	701a      	strb	r2, [r3, #0]
				shot_list_ind++;
   17dd4:	2001      	movs	r0, #1
			if (temp_buf_ind == 0){ temp_buf_ind = NBUFF_MEAS-1;}//  Buffer wrap-around
   17dd6:	2a00      	cmp	r2, #0
   17dd8:	d000      	beq.n	17ddc <fn_error_info+0x1b0>
   17dda:	e747      	b.n	17c6c <fn_error_info+0x40>
			if (data_buf[temp_buf_ind].num_errors>0){
   17ddc:	2385      	movs	r3, #133	; 0x85
   17dde:	00db      	lsls	r3, r3, #3
   17de0:	58f3      	ldr	r3, [r6, r3]
   17de2:	2b00      	cmp	r3, #0
   17de4:	d100      	bne.n	17de8 <fn_error_info+0x1bc>
   17de6:	e08b      	b.n	17f00 <fn_error_info+0x2d4>
			if (temp_buf_ind == 0){ temp_buf_ind = NBUFF_MEAS-1;}//  Buffer wrap-around
   17de8:	2305      	movs	r3, #5
				shot_list[shot_list_ind] = temp_buf_ind;
   17dea:	4a4b      	ldr	r2, [pc, #300]	; (17f18 <fn_error_info+0x2ec>)
				shot_list_ind++;
   17dec:	000d      	movs	r5, r1
				shot_list[shot_list_ind] = temp_buf_ind;
   17dee:	5413      	strb	r3, [r2, r0]
				shot_list_ind++;
   17df0:	3001      	adds	r0, #1
   17df2:	b2c0      	uxtb	r0, r0
			if (temp_buf_ind == 0){ temp_buf_ind = NBUFF_MEAS-1;}//  Buffer wrap-around
   17df4:	2b00      	cmp	r3, #0
   17df6:	d100      	bne.n	17dfa <fn_error_info+0x1ce>
   17df8:	e745      	b.n	17c86 <fn_error_info+0x5a>
			if (data_buf[temp_buf_ind].num_errors>0){
   17dfa:	22b8      	movs	r2, #184	; 0xb8
			else {temp_buf_ind--;}
   17dfc:	3b01      	subs	r3, #1
   17dfe:	b2db      	uxtb	r3, r3
			if (data_buf[temp_buf_ind].num_errors>0){
   17e00:	435a      	muls	r2, r3
   17e02:	18b2      	adds	r2, r6, r2
   17e04:	3290      	adds	r2, #144	; 0x90
   17e06:	6812      	ldr	r2, [r2, #0]
   17e08:	2a00      	cmp	r2, #0
   17e0a:	d100      	bne.n	17e0e <fn_error_info+0x1e2>
   17e0c:	e747      	b.n	17c9e <fn_error_info+0x72>
				shot_list[shot_list_ind] = temp_buf_ind;
   17e0e:	4a42      	ldr	r2, [pc, #264]	; (17f18 <fn_error_info+0x2ec>)
				shot_list_ind++;
   17e10:	000d      	movs	r5, r1
				shot_list[shot_list_ind] = temp_buf_ind;
   17e12:	5413      	strb	r3, [r2, r0]
				shot_list_ind++;
   17e14:	3001      	adds	r0, #1
   17e16:	b2c0      	uxtb	r0, r0
   17e18:	e741      	b.n	17c9e <fn_error_info+0x72>
		sprintf(display_str,"No Additional Errors");
   17e1a:	2215      	movs	r2, #21
   17e1c:	494d      	ldr	r1, [pc, #308]	; (17f54 <fn_error_info+0x328>)
   17e1e:	0028      	movs	r0, r5
   17e20:	47d0      	blx	sl
		glcd_tiny_draw_string(8,1,display_str);
   17e22:	002a      	movs	r2, r5
   17e24:	2101      	movs	r1, #1
   17e26:	2008      	movs	r0, #8
   17e28:	47b8      	blx	r7
		sprintf(display_str,"to Report in Last");
   17e2a:	2212      	movs	r2, #18
   17e2c:	494a      	ldr	r1, [pc, #296]	; (17f58 <fn_error_info+0x32c>)
   17e2e:	0028      	movs	r0, r5
   17e30:	47d0      	blx	sl
		glcd_tiny_draw_string(8,2,display_str);
   17e32:	002a      	movs	r2, r5
   17e34:	2102      	movs	r1, #2
   17e36:	2008      	movs	r0, #8
   17e38:	47b8      	blx	r7
		sprintf(display_str,"%d Measurements", NBUFF_MEAS);
   17e3a:	2206      	movs	r2, #6
   17e3c:	4947      	ldr	r1, [pc, #284]	; (17f5c <fn_error_info+0x330>)
   17e3e:	0028      	movs	r0, r5
   17e40:	4b41      	ldr	r3, [pc, #260]	; (17f48 <fn_error_info+0x31c>)
   17e42:	4798      	blx	r3
		glcd_tiny_draw_string(8,3,display_str);
   17e44:	002a      	movs	r2, r5
   17e46:	2103      	movs	r1, #3
   17e48:	2008      	movs	r0, #8
   17e4a:	47b8      	blx	r7
   17e4c:	e7b8      	b.n	17dc0 <fn_error_info+0x194>
		drawSoftKeys("","<",">","Back");
   17e4e:	4b3a      	ldr	r3, [pc, #232]	; (17f38 <fn_error_info+0x30c>)
   17e50:	4a43      	ldr	r2, [pc, #268]	; (17f60 <fn_error_info+0x334>)
   17e52:	493a      	ldr	r1, [pc, #232]	; (17f3c <fn_error_info+0x310>)
   17e54:	4837      	ldr	r0, [pc, #220]	; (17f34 <fn_error_info+0x308>)
   17e56:	4e3a      	ldr	r6, [pc, #232]	; (17f40 <fn_error_info+0x314>)
   17e58:	47b0      	blx	r6
   17e5a:	e782      	b.n	17d62 <fn_error_info+0x136>
		drawSoftKeys("","",">","Back");
   17e5c:	4835      	ldr	r0, [pc, #212]	; (17f34 <fn_error_info+0x308>)
   17e5e:	4b36      	ldr	r3, [pc, #216]	; (17f38 <fn_error_info+0x30c>)
   17e60:	4a3f      	ldr	r2, [pc, #252]	; (17f60 <fn_error_info+0x334>)
   17e62:	0001      	movs	r1, r0
   17e64:	4e36      	ldr	r6, [pc, #216]	; (17f40 <fn_error_info+0x314>)
   17e66:	47b0      	blx	r6
   17e68:	e77b      	b.n	17d62 <fn_error_info+0x136>
			if (temp_buf_ind == 0){ temp_buf_ind = NBUFF_MEAS-1;}//  Buffer wrap-around
   17e6a:	3305      	adds	r3, #5
			if (data_buf[temp_buf_ind].num_errors>0){
   17e6c:	22b8      	movs	r2, #184	; 0xb8
			else {temp_buf_ind--;}
   17e6e:	3b01      	subs	r3, #1
   17e70:	b2db      	uxtb	r3, r3
			if (data_buf[temp_buf_ind].num_errors>0){
   17e72:	435a      	muls	r2, r3
   17e74:	18b2      	adds	r2, r6, r2
   17e76:	3290      	adds	r2, #144	; 0x90
   17e78:	6812      	ldr	r2, [r2, #0]
   17e7a:	2a00      	cmp	r2, #0
   17e7c:	d100      	bne.n	17e80 <fn_error_info+0x254>
   17e7e:	e71d      	b.n	17cbc <fn_error_info+0x90>
				shot_list[shot_list_ind] = temp_buf_ind;
   17e80:	4a25      	ldr	r2, [pc, #148]	; (17f18 <fn_error_info+0x2ec>)
				shot_list_ind++;
   17e82:	000d      	movs	r5, r1
				shot_list[shot_list_ind] = temp_buf_ind;
   17e84:	5413      	strb	r3, [r2, r0]
				shot_list_ind++;
   17e86:	3001      	adds	r0, #1
   17e88:	b2c0      	uxtb	r0, r0
   17e8a:	e717      	b.n	17cbc <fn_error_info+0x90>
			if (temp_buf_ind == 0){ temp_buf_ind = NBUFF_MEAS-1;}//  Buffer wrap-around
   17e8c:	3305      	adds	r3, #5
			if (data_buf[temp_buf_ind].num_errors>0){
   17e8e:	22b8      	movs	r2, #184	; 0xb8
			else {temp_buf_ind--;}
   17e90:	3b01      	subs	r3, #1
   17e92:	b2db      	uxtb	r3, r3
			if (data_buf[temp_buf_ind].num_errors>0){
   17e94:	435a      	muls	r2, r3
   17e96:	18b2      	adds	r2, r6, r2
   17e98:	3290      	adds	r2, #144	; 0x90
   17e9a:	6812      	ldr	r2, [r2, #0]
   17e9c:	2a00      	cmp	r2, #0
   17e9e:	d100      	bne.n	17ea2 <fn_error_info+0x276>
   17ea0:	e71b      	b.n	17cda <fn_error_info+0xae>
				shot_list[shot_list_ind] = temp_buf_ind;
   17ea2:	4a1d      	ldr	r2, [pc, #116]	; (17f18 <fn_error_info+0x2ec>)
				shot_list_ind++;
   17ea4:	000d      	movs	r5, r1
				shot_list[shot_list_ind] = temp_buf_ind;
   17ea6:	5413      	strb	r3, [r2, r0]
				shot_list_ind++;
   17ea8:	3001      	adds	r0, #1
   17eaa:	b2c0      	uxtb	r0, r0
   17eac:	e715      	b.n	17cda <fn_error_info+0xae>
			if (temp_buf_ind == 0){ temp_buf_ind = NBUFF_MEAS-1;}//  Buffer wrap-around
   17eae:	3305      	adds	r3, #5
			if (data_buf[temp_buf_ind].num_errors>0){
   17eb0:	22b8      	movs	r2, #184	; 0xb8
			else {temp_buf_ind--;}
   17eb2:	3b01      	subs	r3, #1
   17eb4:	b2db      	uxtb	r3, r3
			if (data_buf[temp_buf_ind].num_errors>0){
   17eb6:	435a      	muls	r2, r3
   17eb8:	18b6      	adds	r6, r6, r2
   17eba:	3690      	adds	r6, #144	; 0x90
   17ebc:	6832      	ldr	r2, [r6, #0]
   17ebe:	2a00      	cmp	r2, #0
   17ec0:	d100      	bne.n	17ec4 <fn_error_info+0x298>
   17ec2:	e713      	b.n	17cec <fn_error_info+0xc0>
				shot_list[shot_list_ind] = temp_buf_ind;
   17ec4:	4a14      	ldr	r2, [pc, #80]	; (17f18 <fn_error_info+0x2ec>)
   17ec6:	5413      	strb	r3, [r2, r0]
				shot_list_ind++;
   17ec8:	3001      	adds	r0, #1
   17eca:	b2c0      	uxtb	r0, r0
			if (temp_buf_ind == 0){ temp_buf_ind = NBUFF_MEAS-1;}//  Buffer wrap-around
   17ecc:	2b00      	cmp	r3, #0
   17ece:	d000      	beq.n	17ed2 <fn_error_info+0x2a6>
   17ed0:	e70d      	b.n	17cee <fn_error_info+0xc2>
   17ed2:	4643      	mov	r3, r8
   17ed4:	7018      	strb	r0, [r3, #0]
   17ed6:	e70d      	b.n	17cf4 <fn_error_info+0xc8>
			if(shot_list_ind>0){
   17ed8:	7823      	ldrb	r3, [r4, #0]
   17eda:	2b00      	cmp	r3, #0
   17edc:	d100      	bne.n	17ee0 <fn_error_info+0x2b4>
   17ede:	e721      	b.n	17d24 <fn_error_info+0xf8>
				shot_list_ind--;
   17ee0:	3b01      	subs	r3, #1
   17ee2:	7023      	strb	r3, [r4, #0]
   17ee4:	e71e      	b.n	17d24 <fn_error_info+0xf8>
   17ee6:	4a08      	ldr	r2, [pc, #32]	; (17f08 <fn_error_info+0x2dc>)
   17ee8:	7823      	ldrb	r3, [r4, #0]
   17eea:	4690      	mov	r8, r2
   17eec:	e70a      	b.n	17d04 <fn_error_info+0xd8>
			if (temp_buf_ind == 0){ temp_buf_ind = NBUFF_MEAS-1;}//  Buffer wrap-around
   17eee:	2305      	movs	r3, #5
				shot_list[shot_list_ind] = temp_buf_ind;
   17ef0:	4a09      	ldr	r2, [pc, #36]	; (17f18 <fn_error_info+0x2ec>)
   17ef2:	5413      	strb	r3, [r2, r0]
				shot_list_ind++;
   17ef4:	3001      	adds	r0, #1
   17ef6:	b2c0      	uxtb	r0, r0
			if (temp_buf_ind == 0){ temp_buf_ind = NBUFF_MEAS-1;}//  Buffer wrap-around
   17ef8:	2b00      	cmp	r3, #0
   17efa:	d000      	beq.n	17efe <fn_error_info+0x2d2>
   17efc:	e6f7      	b.n	17cee <fn_error_info+0xc2>
   17efe:	e7e8      	b.n	17ed2 <fn_error_info+0x2a6>
   17f00:	3305      	adds	r3, #5
   17f02:	e77a      	b.n	17dfa <fn_error_info+0x1ce>
   17f04:	200001d0 	.word	0x200001d0
   17f08:	20000f25 	.word	0x20000f25
   17f0c:	20000f2f 	.word	0x20000f2f
   17f10:	20000f04 	.word	0x20000f04
   17f14:	20002790 	.word	0x20002790
   17f18:	20000f28 	.word	0x20000f28
   17f1c:	200044f0 	.word	0x200044f0
   17f20:	00013805 	.word	0x00013805
   17f24:	200033a8 	.word	0x200033a8
   17f28:	0001fd79 	.word	0x0001fd79
   17f2c:	00026390 	.word	0x00026390
   17f30:	000150a1 	.word	0x000150a1
   17f34:	000252c0 	.word	0x000252c0
   17f38:	000264bc 	.word	0x000264bc
   17f3c:	00024d78 	.word	0x00024d78
   17f40:	000080b9 	.word	0x000080b9
   17f44:	000263e0 	.word	0x000263e0
   17f48:	0001fe91 	.word	0x0001fe91
   17f4c:	0000d5d9 	.word	0x0000d5d9
   17f50:	0001493d 	.word	0x0001493d
   17f54:	000263a4 	.word	0x000263a4
   17f58:	000263bc 	.word	0x000263bc
   17f5c:	000263d0 	.word	0x000263d0
   17f60:	00024d7c 	.word	0x00024d7c

00017f64 <fn_debug_backlight>:
void fn_debug_backlight(void){
   17f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17f66:	46ce      	mov	lr, r9
   17f68:	4647      	mov	r7, r8
   17f6a:	b580      	push	{r7, lr}
	if (state_change) {
   17f6c:	4b4f      	ldr	r3, [pc, #316]	; (180ac <fn_debug_backlight+0x148>)
   17f6e:	781b      	ldrb	r3, [r3, #0]
   17f70:	2b00      	cmp	r3, #0
   17f72:	d000      	beq.n	17f76 <fn_debug_backlight+0x12>
   17f74:	e071      	b.n	1805a <fn_debug_backlight+0xf6>
   17f76:	4b4e      	ldr	r3, [pc, #312]	; (180b0 <fn_debug_backlight+0x14c>)
   17f78:	4698      	mov	r8, r3
	switch(cur_Y){
   17f7a:	4643      	mov	r3, r8
   17f7c:	681b      	ldr	r3, [r3, #0]
   17f7e:	2b03      	cmp	r3, #3
   17f80:	d100      	bne.n	17f84 <fn_debug_backlight+0x20>
   17f82:	e07f      	b.n	18084 <fn_debug_backlight+0x120>
   17f84:	2b04      	cmp	r3, #4
   17f86:	d100      	bne.n	17f8a <fn_debug_backlight+0x26>
   17f88:	e08b      	b.n	180a2 <fn_debug_backlight+0x13e>
			colorChar = 'r';
   17f8a:	2172      	movs	r1, #114	; 0x72
			break;
   17f8c:	2072      	movs	r0, #114	; 0x72
			colorChar = 'r';
   17f8e:	4a49      	ldr	r2, [pc, #292]	; (180b4 <fn_debug_backlight+0x150>)
   17f90:	7011      	strb	r1, [r2, #0]
	switch(last_input){
   17f92:	4a49      	ldr	r2, [pc, #292]	; (180b8 <fn_debug_backlight+0x154>)
   17f94:	6812      	ldr	r2, [r2, #0]
   17f96:	2a02      	cmp	r2, #2
   17f98:	d100      	bne.n	17f9c <fn_debug_backlight+0x38>
   17f9a:	e07c      	b.n	18096 <fn_debug_backlight+0x132>
   17f9c:	2a02      	cmp	r2, #2
   17f9e:	d951      	bls.n	18044 <fn_debug_backlight+0xe0>
   17fa0:	2a03      	cmp	r2, #3
   17fa2:	d00a      	beq.n	17fba <fn_debug_backlight+0x56>
   17fa4:	2a04      	cmp	r2, #4
   17fa6:	d106      	bne.n	17fb6 <fn_debug_backlight+0x52>
			if(cur_Y < cur_Y_high){++cur_Y; }
   17fa8:	4a44      	ldr	r2, [pc, #272]	; (180bc <fn_debug_backlight+0x158>)
   17faa:	6812      	ldr	r2, [r2, #0]
   17fac:	4293      	cmp	r3, r2
   17fae:	da02      	bge.n	17fb6 <fn_debug_backlight+0x52>
   17fb0:	4642      	mov	r2, r8
   17fb2:	3301      	adds	r3, #1
   17fb4:	6013      	str	r3, [r2, #0]
   17fb6:	4e42      	ldr	r6, [pc, #264]	; (180c0 <fn_debug_backlight+0x15c>)
   17fb8:	e005      	b.n	17fc6 <fn_debug_backlight+0x62>
			colorPtr = backlightCustomAdjust(colorChar, -1);
   17fba:	2101      	movs	r1, #1
   17fbc:	4b41      	ldr	r3, [pc, #260]	; (180c4 <fn_debug_backlight+0x160>)
   17fbe:	4249      	negs	r1, r1
   17fc0:	4798      	blx	r3
   17fc2:	4e3f      	ldr	r6, [pc, #252]	; (180c0 <fn_debug_backlight+0x15c>)
   17fc4:	6030      	str	r0, [r6, #0]
	glcd_clear_buffer();
   17fc6:	4b40      	ldr	r3, [pc, #256]	; (180c8 <fn_debug_backlight+0x164>)
   17fc8:	4798      	blx	r3
	sprintf(display_str,"Backlight Debug:");
   17fca:	4c40      	ldr	r4, [pc, #256]	; (180cc <fn_debug_backlight+0x168>)
   17fcc:	4b40      	ldr	r3, [pc, #256]	; (180d0 <fn_debug_backlight+0x16c>)
   17fce:	2211      	movs	r2, #17
   17fd0:	4940      	ldr	r1, [pc, #256]	; (180d4 <fn_debug_backlight+0x170>)
   17fd2:	0020      	movs	r0, r4
   17fd4:	4699      	mov	r9, r3
   17fd6:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   17fd8:	4d3f      	ldr	r5, [pc, #252]	; (180d8 <fn_debug_backlight+0x174>)
   17fda:	0022      	movs	r2, r4
   17fdc:	2100      	movs	r1, #0
   17fde:	2000      	movs	r0, #0
   17fe0:	47a8      	blx	r5
	sprintf(display_str, "Red:   %d", colorPtr->red);
   17fe2:	6833      	ldr	r3, [r6, #0]
   17fe4:	4f3d      	ldr	r7, [pc, #244]	; (180dc <fn_debug_backlight+0x178>)
   17fe6:	791a      	ldrb	r2, [r3, #4]
   17fe8:	493d      	ldr	r1, [pc, #244]	; (180e0 <fn_debug_backlight+0x17c>)
   17fea:	0020      	movs	r0, r4
   17fec:	47b8      	blx	r7
	glcd_tiny_draw_string(20, 2, display_str);
   17fee:	0022      	movs	r2, r4
   17ff0:	2102      	movs	r1, #2
   17ff2:	2014      	movs	r0, #20
   17ff4:	47a8      	blx	r5
	sprintf(display_str, "Green: %d", colorPtr->green);
   17ff6:	6833      	ldr	r3, [r6, #0]
   17ff8:	493a      	ldr	r1, [pc, #232]	; (180e4 <fn_debug_backlight+0x180>)
   17ffa:	799a      	ldrb	r2, [r3, #6]
   17ffc:	0020      	movs	r0, r4
   17ffe:	47b8      	blx	r7
	glcd_tiny_draw_string(20, 3, display_str);
   18000:	0022      	movs	r2, r4
   18002:	2103      	movs	r1, #3
   18004:	2014      	movs	r0, #20
   18006:	47a8      	blx	r5
	sprintf(display_str, "Blue:  %d", colorPtr->blue);
   18008:	6833      	ldr	r3, [r6, #0]
   1800a:	4937      	ldr	r1, [pc, #220]	; (180e8 <fn_debug_backlight+0x184>)
   1800c:	795a      	ldrb	r2, [r3, #5]
   1800e:	0020      	movs	r0, r4
   18010:	47b8      	blx	r7
	glcd_tiny_draw_string(20, 4, display_str);
   18012:	0022      	movs	r2, r4
   18014:	2104      	movs	r1, #4
   18016:	2014      	movs	r0, #20
   18018:	47a8      	blx	r5
	drawSoftKeys("","Up","Down","");
   1801a:	4834      	ldr	r0, [pc, #208]	; (180ec <fn_debug_backlight+0x188>)
   1801c:	4e34      	ldr	r6, [pc, #208]	; (180f0 <fn_debug_backlight+0x18c>)
   1801e:	0003      	movs	r3, r0
   18020:	4a34      	ldr	r2, [pc, #208]	; (180f4 <fn_debug_backlight+0x190>)
   18022:	4935      	ldr	r1, [pc, #212]	; (180f8 <fn_debug_backlight+0x194>)
   18024:	47b0      	blx	r6
	sprintf(display_str, ">");
   18026:	2202      	movs	r2, #2
   18028:	4934      	ldr	r1, [pc, #208]	; (180fc <fn_debug_backlight+0x198>)
   1802a:	0020      	movs	r0, r4
   1802c:	47c8      	blx	r9
	glcd_tiny_draw_string(10, cur_Y,display_str);
   1802e:	4643      	mov	r3, r8
   18030:	0022      	movs	r2, r4
   18032:	7819      	ldrb	r1, [r3, #0]
   18034:	200a      	movs	r0, #10
   18036:	47a8      	blx	r5
	glcd_write();
   18038:	4b31      	ldr	r3, [pc, #196]	; (18100 <fn_debug_backlight+0x19c>)
   1803a:	4798      	blx	r3
}
   1803c:	bc0c      	pop	{r2, r3}
   1803e:	4690      	mov	r8, r2
   18040:	4699      	mov	r9, r3
   18042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch(last_input){
   18044:	2a01      	cmp	r2, #1
   18046:	d1b6      	bne.n	17fb6 <fn_debug_backlight+0x52>
			if(cur_Y > cur_Y_low){--cur_Y; }
   18048:	4a2e      	ldr	r2, [pc, #184]	; (18104 <fn_debug_backlight+0x1a0>)
   1804a:	6812      	ldr	r2, [r2, #0]
   1804c:	4293      	cmp	r3, r2
   1804e:	ddb2      	ble.n	17fb6 <fn_debug_backlight+0x52>
   18050:	4642      	mov	r2, r8
   18052:	3b01      	subs	r3, #1
   18054:	6013      	str	r3, [r2, #0]
   18056:	4e1a      	ldr	r6, [pc, #104]	; (180c0 <fn_debug_backlight+0x15c>)
   18058:	e7b5      	b.n	17fc6 <fn_debug_backlight+0x62>
		cur_Y = 2;
   1805a:	4b15      	ldr	r3, [pc, #84]	; (180b0 <fn_debug_backlight+0x14c>)
		options.backlight_setting.colorRef = 0;//  0 is custom Color
   1805c:	482a      	ldr	r0, [pc, #168]	; (18108 <fn_debug_backlight+0x1a4>)
		cur_Y = 2;
   1805e:	4698      	mov	r8, r3
   18060:	2302      	movs	r3, #2
   18062:	4642      	mov	r2, r8
   18064:	6013      	str	r3, [r2, #0]
		cur_Y_low = 2;
   18066:	4a27      	ldr	r2, [pc, #156]	; (18104 <fn_debug_backlight+0x1a0>)
		backlightOn(&options.backlight_setting);
   18068:	3010      	adds	r0, #16
		cur_Y_low = 2;
   1806a:	6013      	str	r3, [r2, #0]
		cur_Y_high = 4;
   1806c:	2204      	movs	r2, #4
   1806e:	4b13      	ldr	r3, [pc, #76]	; (180bc <fn_debug_backlight+0x158>)
   18070:	601a      	str	r2, [r3, #0]
		options.backlight_setting.colorRef = 0;//  0 is custom Color
   18072:	2300      	movs	r3, #0
   18074:	7043      	strb	r3, [r0, #1]
		backlightOn(&options.backlight_setting);
   18076:	4b25      	ldr	r3, [pc, #148]	; (1810c <fn_debug_backlight+0x1a8>)
   18078:	4798      	blx	r3
	switch(cur_Y){
   1807a:	4643      	mov	r3, r8
   1807c:	681b      	ldr	r3, [r3, #0]
   1807e:	2b03      	cmp	r3, #3
   18080:	d000      	beq.n	18084 <fn_debug_backlight+0x120>
   18082:	e77f      	b.n	17f84 <fn_debug_backlight+0x20>
			colorChar = 'g';
   18084:	2167      	movs	r1, #103	; 0x67
   18086:	4a0b      	ldr	r2, [pc, #44]	; (180b4 <fn_debug_backlight+0x150>)
			break;
   18088:	2067      	movs	r0, #103	; 0x67
			colorChar = 'g';
   1808a:	7011      	strb	r1, [r2, #0]
	switch(last_input){
   1808c:	4a0a      	ldr	r2, [pc, #40]	; (180b8 <fn_debug_backlight+0x154>)
   1808e:	6812      	ldr	r2, [r2, #0]
   18090:	2a02      	cmp	r2, #2
   18092:	d000      	beq.n	18096 <fn_debug_backlight+0x132>
   18094:	e782      	b.n	17f9c <fn_debug_backlight+0x38>
			colorPtr = backlightCustomAdjust(colorChar, 1);
   18096:	2101      	movs	r1, #1
   18098:	4b0a      	ldr	r3, [pc, #40]	; (180c4 <fn_debug_backlight+0x160>)
   1809a:	4798      	blx	r3
   1809c:	4e08      	ldr	r6, [pc, #32]	; (180c0 <fn_debug_backlight+0x15c>)
   1809e:	6030      	str	r0, [r6, #0]
			break;
   180a0:	e791      	b.n	17fc6 <fn_debug_backlight+0x62>
			colorChar = 'b';
   180a2:	2162      	movs	r1, #98	; 0x62
   180a4:	4a03      	ldr	r2, [pc, #12]	; (180b4 <fn_debug_backlight+0x150>)
			break;
   180a6:	2062      	movs	r0, #98	; 0x62
			colorChar = 'b';
   180a8:	7011      	strb	r1, [r2, #0]
			break;
   180aa:	e772      	b.n	17f92 <fn_debug_backlight+0x2e>
   180ac:	200001d0 	.word	0x200001d0
   180b0:	20003170 	.word	0x20003170
   180b4:	20000efe 	.word	0x20000efe
   180b8:	200044f0 	.word	0x200044f0
   180bc:	20003de4 	.word	0x20003de4
   180c0:	20000f00 	.word	0x20000f00
   180c4:	00006fdd 	.word	0x00006fdd
   180c8:	00013805 	.word	0x00013805
   180cc:	200033a8 	.word	0x200033a8
   180d0:	0001fd79 	.word	0x0001fd79
   180d4:	00026048 	.word	0x00026048
   180d8:	000150a1 	.word	0x000150a1
   180dc:	0001fe91 	.word	0x0001fe91
   180e0:	0002605c 	.word	0x0002605c
   180e4:	00026068 	.word	0x00026068
   180e8:	00026074 	.word	0x00026074
   180ec:	000252c0 	.word	0x000252c0
   180f0:	000080b9 	.word	0x000080b9
   180f4:	00026080 	.word	0x00026080
   180f8:	00026088 	.word	0x00026088
   180fc:	00024d7c 	.word	0x00024d7c
   18100:	0001493d 	.word	0x0001493d
   18104:	20004b48 	.word	0x20004b48
   18108:	2000332c 	.word	0x2000332c
   1810c:	00007425 	.word	0x00007425

00018110 <fn_set_options>:
void fn_set_options(void){
   18110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18112:	46ce      	mov	lr, r9
   18114:	4647      	mov	r7, r8
   18116:	b580      	push	{r7, lr}
	if (state_change) {
   18118:	4b85      	ldr	r3, [pc, #532]	; (18330 <fn_set_options+0x220>)
   1811a:	781b      	ldrb	r3, [r3, #0]
   1811c:	2b00      	cmp	r3, #0
   1811e:	d100      	bne.n	18122 <fn_set_options+0x12>
   18120:	e081      	b.n	18226 <fn_set_options+0x116>
		cur_Y = 1;
   18122:	4b84      	ldr	r3, [pc, #528]	; (18334 <fn_set_options+0x224>)
   18124:	4699      	mov	r9, r3
   18126:	2301      	movs	r3, #1
   18128:	464a      	mov	r2, r9
   1812a:	6013      	str	r3, [r2, #0]
		cur_Y_low = 1;
   1812c:	4a82      	ldr	r2, [pc, #520]	; (18338 <fn_set_options+0x228>)
   1812e:	6013      	str	r3, [r2, #0]
		cur_Y_high = 7;
   18130:	4a82      	ldr	r2, [pc, #520]	; (1833c <fn_set_options+0x22c>)
   18132:	3306      	adds	r3, #6
   18134:	6013      	str	r3, [r2, #0]
	switch(last_input){
   18136:	4b82      	ldr	r3, [pc, #520]	; (18340 <fn_set_options+0x230>)
   18138:	681b      	ldr	r3, [r3, #0]
   1813a:	2b02      	cmp	r3, #2
   1813c:	d005      	beq.n	1814a <fn_set_options+0x3a>
   1813e:	2b03      	cmp	r3, #3
   18140:	d100      	bne.n	18144 <fn_set_options+0x34>
   18142:	e099      	b.n	18278 <fn_set_options+0x168>
   18144:	2b01      	cmp	r3, #1
   18146:	d100      	bne.n	1814a <fn_set_options+0x3a>
   18148:	e0e6      	b.n	18318 <fn_set_options+0x208>
   1814a:	4e7e      	ldr	r6, [pc, #504]	; (18344 <fn_set_options+0x234>)
	glcd_clear_buffer();
   1814c:	4b7e      	ldr	r3, [pc, #504]	; (18348 <fn_set_options+0x238>)
   1814e:	4798      	blx	r3
	if (options.current_unit_dist==feet){
   18150:	7933      	ldrb	r3, [r6, #4]
		sprintf(display_str, "Dist: Feet");
   18152:	4c7e      	ldr	r4, [pc, #504]	; (1834c <fn_set_options+0x23c>)
	if (options.current_unit_dist==feet){
   18154:	2b00      	cmp	r3, #0
   18156:	d000      	beq.n	1815a <fn_set_options+0x4a>
   18158:	e077      	b.n	1824a <fn_set_options+0x13a>
		sprintf(display_str, "Dist: Feet");
   1815a:	4b7d      	ldr	r3, [pc, #500]	; (18350 <fn_set_options+0x240>)
   1815c:	220b      	movs	r2, #11
   1815e:	497d      	ldr	r1, [pc, #500]	; (18354 <fn_set_options+0x244>)
   18160:	0020      	movs	r0, r4
   18162:	4698      	mov	r8, r3
   18164:	4798      	blx	r3
	glcd_tiny_draw_string(5, 1, display_str);
   18166:	0022      	movs	r2, r4
   18168:	2101      	movs	r1, #1
   1816a:	2005      	movs	r0, #5
   1816c:	4d7a      	ldr	r5, [pc, #488]	; (18358 <fn_set_options+0x248>)
   1816e:	47a8      	blx	r5
	if (options.current_unit_temp==fahrenheit){
   18170:	7973      	ldrb	r3, [r6, #5]
   18172:	2b05      	cmp	r3, #5
   18174:	d100      	bne.n	18178 <fn_set_options+0x68>
   18176:	e077      	b.n	18268 <fn_set_options+0x158>
		sprintf(display_str, "Temp: Celsius");
   18178:	220e      	movs	r2, #14
   1817a:	4978      	ldr	r1, [pc, #480]	; (1835c <fn_set_options+0x24c>)
   1817c:	0020      	movs	r0, r4
   1817e:	47c0      	blx	r8
	glcd_tiny_draw_string(5, 2, display_str);
   18180:	0022      	movs	r2, r4
   18182:	2102      	movs	r1, #2
   18184:	2005      	movs	r0, #5
   18186:	47a8      	blx	r5
	sprintf(display_str,"Shot Delay: %d sec",options.shot_delay);
   18188:	4f75      	ldr	r7, [pc, #468]	; (18360 <fn_set_options+0x250>)
   1818a:	79b2      	ldrb	r2, [r6, #6]
   1818c:	4975      	ldr	r1, [pc, #468]	; (18364 <fn_set_options+0x254>)
   1818e:	0020      	movs	r0, r4
   18190:	47b8      	blx	r7
	glcd_tiny_draw_string(5, 3, display_str);
   18192:	0022      	movs	r2, r4
   18194:	2103      	movs	r1, #3
   18196:	2005      	movs	r0, #5
   18198:	47a8      	blx	r5
	sprintf(display_str,"Charge Curr: %dmA",options.chargeCurrent);
   1819a:	68b2      	ldr	r2, [r6, #8]
   1819c:	4972      	ldr	r1, [pc, #456]	; (18368 <fn_set_options+0x258>)
   1819e:	0020      	movs	r0, r4
   181a0:	47b8      	blx	r7
	glcd_tiny_draw_string(5, 4, display_str);
   181a2:	0022      	movs	r2, r4
   181a4:	2104      	movs	r1, #4
   181a6:	2005      	movs	r0, #5
   181a8:	47a8      	blx	r5
	sprintf(display_str,"Err Sens: %0.2f deg", options.errorSensitivity);
   181aa:	68f0      	ldr	r0, [r6, #12]
   181ac:	4b6f      	ldr	r3, [pc, #444]	; (1836c <fn_set_options+0x25c>)
   181ae:	4798      	blx	r3
   181b0:	000b      	movs	r3, r1
   181b2:	0002      	movs	r2, r0
   181b4:	496e      	ldr	r1, [pc, #440]	; (18370 <fn_set_options+0x260>)
   181b6:	0020      	movs	r0, r4
   181b8:	47b8      	blx	r7
	glcd_tiny_draw_string(5, 5, display_str);
   181ba:	0022      	movs	r2, r4
   181bc:	2105      	movs	r1, #5
   181be:	2005      	movs	r0, #5
   181c0:	47a8      	blx	r5
	sprintf(display_str,"BL Color: %s", backlightGetCurrentColor(&options.backlight_setting));
   181c2:	0030      	movs	r0, r6
   181c4:	4b6b      	ldr	r3, [pc, #428]	; (18374 <fn_set_options+0x264>)
   181c6:	3010      	adds	r0, #16
   181c8:	4798      	blx	r3
   181ca:	496b      	ldr	r1, [pc, #428]	; (18378 <fn_set_options+0x268>)
   181cc:	0002      	movs	r2, r0
   181ce:	0020      	movs	r0, r4
   181d0:	47b8      	blx	r7
	glcd_tiny_draw_string(5, 6, display_str);
   181d2:	0022      	movs	r2, r4
   181d4:	2106      	movs	r1, #6
   181d6:	2005      	movs	r0, #5
   181d8:	47a8      	blx	r5
	sprintf(display_str,"BL Level: %d", options.backlight_setting.brightness);
   181da:	7c32      	ldrb	r2, [r6, #16]
   181dc:	4967      	ldr	r1, [pc, #412]	; (1837c <fn_set_options+0x26c>)
   181de:	0020      	movs	r0, r4
   181e0:	47b8      	blx	r7
	glcd_tiny_draw_string(5, 7, display_str);
   181e2:	0022      	movs	r2, r4
   181e4:	2107      	movs	r1, #7
   181e6:	2005      	movs	r0, #5
   181e8:	47a8      	blx	r5
	sprintf(display_str,"Options:");
   181ea:	2209      	movs	r2, #9
   181ec:	4964      	ldr	r1, [pc, #400]	; (18380 <fn_set_options+0x270>)
   181ee:	0020      	movs	r0, r4
   181f0:	47c0      	blx	r8
	glcd_tiny_draw_string(0,0,display_str);
   181f2:	0022      	movs	r2, r4
   181f4:	2100      	movs	r1, #0
   181f6:	2000      	movs	r0, #0
   181f8:	47a8      	blx	r5
	drawSoftKeys("Adjust","<",">","Back");
   181fa:	4e62      	ldr	r6, [pc, #392]	; (18384 <fn_set_options+0x274>)
   181fc:	4b62      	ldr	r3, [pc, #392]	; (18388 <fn_set_options+0x278>)
   181fe:	0032      	movs	r2, r6
   18200:	4f62      	ldr	r7, [pc, #392]	; (1838c <fn_set_options+0x27c>)
   18202:	4963      	ldr	r1, [pc, #396]	; (18390 <fn_set_options+0x280>)
   18204:	4863      	ldr	r0, [pc, #396]	; (18394 <fn_set_options+0x284>)
   18206:	47b8      	blx	r7
	sprintf(display_str, ">");
   18208:	0031      	movs	r1, r6
   1820a:	2202      	movs	r2, #2
   1820c:	0020      	movs	r0, r4
   1820e:	47c0      	blx	r8
	glcd_tiny_draw_string(0, cur_Y,display_str);
   18210:	464b      	mov	r3, r9
   18212:	0022      	movs	r2, r4
   18214:	7819      	ldrb	r1, [r3, #0]
   18216:	2000      	movs	r0, #0
   18218:	47a8      	blx	r5
	glcd_write();
   1821a:	4b5f      	ldr	r3, [pc, #380]	; (18398 <fn_set_options+0x288>)
   1821c:	4798      	blx	r3
}
   1821e:	bc0c      	pop	{r2, r3}
   18220:	4690      	mov	r8, r2
   18222:	4699      	mov	r9, r3
   18224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch(last_input){
   18226:	4b46      	ldr	r3, [pc, #280]	; (18340 <fn_set_options+0x230>)
   18228:	681b      	ldr	r3, [r3, #0]
   1822a:	2b02      	cmp	r3, #2
   1822c:	d033      	beq.n	18296 <fn_set_options+0x186>
   1822e:	2b03      	cmp	r3, #3
   18230:	d01f      	beq.n	18272 <fn_set_options+0x162>
   18232:	2b01      	cmp	r3, #1
   18234:	d12b      	bne.n	1828e <fn_set_options+0x17e>
			switch (cur_Y){
   18236:	4b3f      	ldr	r3, [pc, #252]	; (18334 <fn_set_options+0x224>)
   18238:	4699      	mov	r9, r3
   1823a:	681b      	ldr	r3, [r3, #0]
   1823c:	2b07      	cmp	r3, #7
   1823e:	d900      	bls.n	18242 <fn_set_options+0x132>
   18240:	e783      	b.n	1814a <fn_set_options+0x3a>
   18242:	4a56      	ldr	r2, [pc, #344]	; (1839c <fn_set_options+0x28c>)
   18244:	009b      	lsls	r3, r3, #2
   18246:	58d3      	ldr	r3, [r2, r3]
   18248:	469f      	mov	pc, r3
		sprintf(display_str, "Dist: Meters");
   1824a:	4b41      	ldr	r3, [pc, #260]	; (18350 <fn_set_options+0x240>)
   1824c:	220d      	movs	r2, #13
   1824e:	4954      	ldr	r1, [pc, #336]	; (183a0 <fn_set_options+0x290>)
   18250:	0020      	movs	r0, r4
   18252:	4698      	mov	r8, r3
   18254:	4798      	blx	r3
	glcd_tiny_draw_string(5, 1, display_str);
   18256:	0022      	movs	r2, r4
   18258:	2101      	movs	r1, #1
   1825a:	2005      	movs	r0, #5
   1825c:	4d3e      	ldr	r5, [pc, #248]	; (18358 <fn_set_options+0x248>)
   1825e:	47a8      	blx	r5
	if (options.current_unit_temp==fahrenheit){
   18260:	7973      	ldrb	r3, [r6, #5]
   18262:	2b05      	cmp	r3, #5
   18264:	d000      	beq.n	18268 <fn_set_options+0x158>
   18266:	e787      	b.n	18178 <fn_set_options+0x68>
		sprintf(display_str, "Temp: Fahrenheit");
   18268:	2211      	movs	r2, #17
   1826a:	494e      	ldr	r1, [pc, #312]	; (183a4 <fn_set_options+0x294>)
   1826c:	0020      	movs	r0, r4
   1826e:	47c0      	blx	r8
   18270:	e786      	b.n	18180 <fn_set_options+0x70>
   18272:	4b30      	ldr	r3, [pc, #192]	; (18334 <fn_set_options+0x224>)
   18274:	4a31      	ldr	r2, [pc, #196]	; (1833c <fn_set_options+0x22c>)
   18276:	4699      	mov	r9, r3
			if(cur_Y < cur_Y_high){++cur_Y; }
   18278:	464b      	mov	r3, r9
   1827a:	6812      	ldr	r2, [r2, #0]
   1827c:	681b      	ldr	r3, [r3, #0]
   1827e:	4293      	cmp	r3, r2
   18280:	db00      	blt.n	18284 <fn_set_options+0x174>
   18282:	e762      	b.n	1814a <fn_set_options+0x3a>
   18284:	464a      	mov	r2, r9
   18286:	3301      	adds	r3, #1
   18288:	6013      	str	r3, [r2, #0]
   1828a:	4e2e      	ldr	r6, [pc, #184]	; (18344 <fn_set_options+0x234>)
   1828c:	e75e      	b.n	1814c <fn_set_options+0x3c>
   1828e:	4b29      	ldr	r3, [pc, #164]	; (18334 <fn_set_options+0x224>)
   18290:	4e2c      	ldr	r6, [pc, #176]	; (18344 <fn_set_options+0x234>)
   18292:	4699      	mov	r9, r3
   18294:	e75a      	b.n	1814c <fn_set_options+0x3c>
   18296:	4b27      	ldr	r3, [pc, #156]	; (18334 <fn_set_options+0x224>)
			if(cur_Y > cur_Y_low){--cur_Y; }
   18298:	4a27      	ldr	r2, [pc, #156]	; (18338 <fn_set_options+0x228>)
   1829a:	4699      	mov	r9, r3
   1829c:	6812      	ldr	r2, [r2, #0]
   1829e:	681b      	ldr	r3, [r3, #0]
   182a0:	429a      	cmp	r2, r3
   182a2:	db00      	blt.n	182a6 <fn_set_options+0x196>
   182a4:	e751      	b.n	1814a <fn_set_options+0x3a>
   182a6:	464a      	mov	r2, r9
   182a8:	3b01      	subs	r3, #1
   182aa:	6013      	str	r3, [r2, #0]
   182ac:	e74d      	b.n	1814a <fn_set_options+0x3a>
					backlightLevelToggle(&options.backlight_setting);
   182ae:	4e3e      	ldr	r6, [pc, #248]	; (183a8 <fn_set_options+0x298>)
   182b0:	4b3e      	ldr	r3, [pc, #248]	; (183ac <fn_set_options+0x29c>)
   182b2:	0030      	movs	r0, r6
   182b4:	4798      	blx	r3
					save_user_settings();
   182b6:	4b3e      	ldr	r3, [pc, #248]	; (183b0 <fn_set_options+0x2a0>)
   182b8:	4798      	blx	r3
   182ba:	3e10      	subs	r6, #16
					break;
   182bc:	e746      	b.n	1814c <fn_set_options+0x3c>
					if (options.current_unit_temp == celsius){ options.current_unit_temp = fahrenheit;}
   182be:	4e21      	ldr	r6, [pc, #132]	; (18344 <fn_set_options+0x234>)
   182c0:	7973      	ldrb	r3, [r6, #5]
   182c2:	3b04      	subs	r3, #4
   182c4:	4259      	negs	r1, r3
   182c6:	4159      	adcs	r1, r3
   182c8:	1d0b      	adds	r3, r1, #4
   182ca:	7173      	strb	r3, [r6, #5]
					save_user_settings();
   182cc:	4b38      	ldr	r3, [pc, #224]	; (183b0 <fn_set_options+0x2a0>)
   182ce:	4798      	blx	r3
					break;
   182d0:	e73c      	b.n	1814c <fn_set_options+0x3c>
					options.shot_delay = options.shot_delay+1;
   182d2:	4e1c      	ldr	r6, [pc, #112]	; (18344 <fn_set_options+0x234>)
   182d4:	79b3      	ldrb	r3, [r6, #6]
   182d6:	3301      	adds	r3, #1
   182d8:	b2db      	uxtb	r3, r3
					if (options.shot_delay>SHOT_DELAY_MAX){options.shot_delay = 0;}
   182da:	2b05      	cmp	r3, #5
   182dc:	d900      	bls.n	182e0 <fn_set_options+0x1d0>
   182de:	2300      	movs	r3, #0
   182e0:	71b3      	strb	r3, [r6, #6]
   182e2:	e009      	b.n	182f8 <fn_set_options+0x1e8>
					if (options.chargeCurrent == 500){ options.chargeCurrent = 100;}
   182e4:	23fa      	movs	r3, #250	; 0xfa
   182e6:	4e17      	ldr	r6, [pc, #92]	; (18344 <fn_set_options+0x234>)
   182e8:	005b      	lsls	r3, r3, #1
   182ea:	68b2      	ldr	r2, [r6, #8]
					else{options.chargeCurrent = 500;}
   182ec:	0018      	movs	r0, r3
					if (options.chargeCurrent == 500){ options.chargeCurrent = 100;}
   182ee:	429a      	cmp	r2, r3
   182f0:	d01a      	beq.n	18328 <fn_set_options+0x218>
					setChargeCurrent(options.chargeCurrent);
   182f2:	4b30      	ldr	r3, [pc, #192]	; (183b4 <fn_set_options+0x2a4>)
   182f4:	60b0      	str	r0, [r6, #8]
   182f6:	4798      	blx	r3
					save_user_settings();
   182f8:	4b2d      	ldr	r3, [pc, #180]	; (183b0 <fn_set_options+0x2a0>)
   182fa:	4798      	blx	r3
					break;
   182fc:	e726      	b.n	1814c <fn_set_options+0x3c>
					adjustErrorSensitivity();
   182fe:	4b2e      	ldr	r3, [pc, #184]	; (183b8 <fn_set_options+0x2a8>)
   18300:	4798      	blx	r3
					save_user_settings();
   18302:	4b2b      	ldr	r3, [pc, #172]	; (183b0 <fn_set_options+0x2a0>)
   18304:	4798      	blx	r3
   18306:	e720      	b.n	1814a <fn_set_options+0x3a>
					backlightColorToggle(&options.backlight_setting);					
   18308:	4e27      	ldr	r6, [pc, #156]	; (183a8 <fn_set_options+0x298>)
   1830a:	4b2c      	ldr	r3, [pc, #176]	; (183bc <fn_set_options+0x2ac>)
   1830c:	0030      	movs	r0, r6
   1830e:	4798      	blx	r3
					save_user_settings();
   18310:	4b27      	ldr	r3, [pc, #156]	; (183b0 <fn_set_options+0x2a0>)
   18312:	4798      	blx	r3
   18314:	3e10      	subs	r6, #16
					break;
   18316:	e719      	b.n	1814c <fn_set_options+0x3c>
   18318:	4e0a      	ldr	r6, [pc, #40]	; (18344 <fn_set_options+0x234>)
					if (options.current_unit_dist == feet){ options.current_unit_dist = meters;}
   1831a:	7932      	ldrb	r2, [r6, #4]
   1831c:	4253      	negs	r3, r2
   1831e:	4153      	adcs	r3, r2
   18320:	7133      	strb	r3, [r6, #4]
					save_user_settings();
   18322:	4b23      	ldr	r3, [pc, #140]	; (183b0 <fn_set_options+0x2a0>)
   18324:	4798      	blx	r3
					break;
   18326:	e711      	b.n	1814c <fn_set_options+0x3c>
					if (options.chargeCurrent == 500){ options.chargeCurrent = 100;}
   18328:	3891      	subs	r0, #145	; 0x91
   1832a:	38ff      	subs	r0, #255	; 0xff
   1832c:	e7e1      	b.n	182f2 <fn_set_options+0x1e2>
   1832e:	46c0      	nop			; (mov r8, r8)
   18330:	200001d0 	.word	0x200001d0
   18334:	20003170 	.word	0x20003170
   18338:	20004b48 	.word	0x20004b48
   1833c:	20003de4 	.word	0x20003de4
   18340:	200044f0 	.word	0x200044f0
   18344:	2000332c 	.word	0x2000332c
   18348:	00013805 	.word	0x00013805
   1834c:	200033a8 	.word	0x200033a8
   18350:	0001fd79 	.word	0x0001fd79
   18354:	00026760 	.word	0x00026760
   18358:	000150a1 	.word	0x000150a1
   1835c:	00026790 	.word	0x00026790
   18360:	0001fe91 	.word	0x0001fe91
   18364:	000267a0 	.word	0x000267a0
   18368:	000267b4 	.word	0x000267b4
   1836c:	0001fb6d 	.word	0x0001fb6d
   18370:	000267c8 	.word	0x000267c8
   18374:	00007415 	.word	0x00007415
   18378:	000267dc 	.word	0x000267dc
   1837c:	000267ec 	.word	0x000267ec
   18380:	000267fc 	.word	0x000267fc
   18384:	00024d7c 	.word	0x00024d7c
   18388:	000264bc 	.word	0x000264bc
   1838c:	000080b9 	.word	0x000080b9
   18390:	00024d78 	.word	0x00024d78
   18394:	00026808 	.word	0x00026808
   18398:	0001493d 	.word	0x0001493d
   1839c:	00025bd4 	.word	0x00025bd4
   183a0:	0002676c 	.word	0x0002676c
   183a4:	0002677c 	.word	0x0002677c
   183a8:	2000333c 	.word	0x2000333c
   183ac:	00007311 	.word	0x00007311
   183b0:	00008799 	.word	0x00008799
   183b4:	000076f1 	.word	0x000076f1
   183b8:	0000cb11 	.word	0x0000cb11
   183bc:	0000701d 	.word	0x0000701d

000183c0 <fn_set_clock>:
void fn_set_clock(void){
   183c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   183c2:	46d6      	mov	lr, sl
   183c4:	464f      	mov	r7, r9
   183c6:	4646      	mov	r6, r8
   183c8:	b5c0      	push	{r6, r7, lr}
   183ca:	b08c      	sub	sp, #48	; 0x30
	CLOCK_SETTING clock_table[] = {
   183cc:	466a      	mov	r2, sp
   183ce:	4b6c      	ldr	r3, [pc, #432]	; (18580 <fn_set_clock+0x1c0>)
   183d0:	466c      	mov	r4, sp
   183d2:	cb23      	ldmia	r3!, {r0, r1, r5}
   183d4:	c223      	stmia	r2!, {r0, r1, r5}
   183d6:	cb23      	ldmia	r3!, {r0, r1, r5}
   183d8:	c223      	stmia	r2!, {r0, r1, r5}
   183da:	cb23      	ldmia	r3!, {r0, r1, r5}
   183dc:	c223      	stmia	r2!, {r0, r1, r5}
   183de:	cb23      	ldmia	r3!, {r0, r1, r5}
   183e0:	c223      	stmia	r2!, {r0, r1, r5}
	if (state_change) {
   183e2:	4b68      	ldr	r3, [pc, #416]	; (18584 <fn_set_clock+0x1c4>)
   183e4:	781b      	ldrb	r3, [r3, #0]
   183e6:	2b00      	cmp	r3, #0
   183e8:	d000      	beq.n	183ec <fn_set_clock+0x2c>
   183ea:	e086      	b.n	184fa <fn_set_clock+0x13a>
   183ec:	4b66      	ldr	r3, [pc, #408]	; (18588 <fn_set_clock+0x1c8>)
   183ee:	4d67      	ldr	r5, [pc, #412]	; (1858c <fn_set_clock+0x1cc>)
   183f0:	4699      	mov	r9, r3
   183f2:	464b      	mov	r3, r9
		if (cur_Y==clock_table[i].y_pos){
   183f4:	7822      	ldrb	r2, [r4, #0]
   183f6:	681b      	ldr	r3, [r3, #0]
   183f8:	429a      	cmp	r2, r3
   183fa:	d100      	bne.n	183fe <fn_set_clock+0x3e>
   183fc:	e0ac      	b.n	18558 <fn_set_clock+0x198>
   183fe:	7a22      	ldrb	r2, [r4, #8]
   18400:	4293      	cmp	r3, r2
   18402:	d100      	bne.n	18406 <fn_set_clock+0x46>
   18404:	e0b1      	b.n	1856a <fn_set_clock+0x1aa>
   18406:	7c22      	ldrb	r2, [r4, #16]
   18408:	4293      	cmp	r3, r2
   1840a:	d100      	bne.n	1840e <fn_set_clock+0x4e>
   1840c:	e0af      	b.n	1856e <fn_set_clock+0x1ae>
   1840e:	7e22      	ldrb	r2, [r4, #24]
   18410:	4293      	cmp	r3, r2
   18412:	d100      	bne.n	18416 <fn_set_clock+0x56>
   18414:	e0ad      	b.n	18572 <fn_set_clock+0x1b2>
   18416:	2220      	movs	r2, #32
   18418:	5ca2      	ldrb	r2, [r4, r2]
   1841a:	4293      	cmp	r3, r2
   1841c:	d100      	bne.n	18420 <fn_set_clock+0x60>
   1841e:	e0aa      	b.n	18576 <fn_set_clock+0x1b6>
   18420:	2228      	movs	r2, #40	; 0x28
   18422:	5ca2      	ldrb	r2, [r4, r2]
   18424:	429a      	cmp	r2, r3
   18426:	d100      	bne.n	1842a <fn_set_clock+0x6a>
   18428:	e0a7      	b.n	1857a <fn_set_clock+0x1ba>
	switch(last_input){
   1842a:	4a59      	ldr	r2, [pc, #356]	; (18590 <fn_set_clock+0x1d0>)
   1842c:	6812      	ldr	r2, [r2, #0]
   1842e:	2a02      	cmp	r2, #2
   18430:	d100      	bne.n	18434 <fn_set_clock+0x74>
   18432:	e081      	b.n	18538 <fn_set_clock+0x178>
   18434:	2a03      	cmp	r2, #3
   18436:	d100      	bne.n	1843a <fn_set_clock+0x7a>
   18438:	e073      	b.n	18522 <fn_set_clock+0x162>
   1843a:	2a01      	cmp	r2, #1
   1843c:	d055      	beq.n	184ea <fn_set_clock+0x12a>
	glcd_clear_buffer();
   1843e:	4b55      	ldr	r3, [pc, #340]	; (18594 <fn_set_clock+0x1d4>)
   18440:	4798      	blx	r3
	sprintf(display_str,"Set Clock:");
   18442:	4c55      	ldr	r4, [pc, #340]	; (18598 <fn_set_clock+0x1d8>)
   18444:	4b55      	ldr	r3, [pc, #340]	; (1859c <fn_set_clock+0x1dc>)
   18446:	220b      	movs	r2, #11
   18448:	4955      	ldr	r1, [pc, #340]	; (185a0 <fn_set_clock+0x1e0>)
   1844a:	0020      	movs	r0, r4
   1844c:	4698      	mov	r8, r3
   1844e:	4798      	blx	r3
	glcd_tiny_draw_string(0,0,display_str);
   18450:	4e54      	ldr	r6, [pc, #336]	; (185a4 <fn_set_clock+0x1e4>)
   18452:	0022      	movs	r2, r4
   18454:	2100      	movs	r1, #0
   18456:	2000      	movs	r0, #0
   18458:	47b0      	blx	r6
	sprintf(display_str,"Year:   20%02x", temp_time.year);
   1845a:	4f53      	ldr	r7, [pc, #332]	; (185a8 <fn_set_clock+0x1e8>)
   1845c:	79aa      	ldrb	r2, [r5, #6]
   1845e:	4953      	ldr	r1, [pc, #332]	; (185ac <fn_set_clock+0x1ec>)
   18460:	0020      	movs	r0, r4
   18462:	47b8      	blx	r7
	glcd_tiny_draw_string(10,1,display_str);
   18464:	0022      	movs	r2, r4
   18466:	2101      	movs	r1, #1
   18468:	200a      	movs	r0, #10
   1846a:	47b0      	blx	r6
	sprintf(display_str,"Month:  %02x", temp_time.month);
   1846c:	796a      	ldrb	r2, [r5, #5]
   1846e:	4950      	ldr	r1, [pc, #320]	; (185b0 <fn_set_clock+0x1f0>)
   18470:	0020      	movs	r0, r4
   18472:	47b8      	blx	r7
	glcd_tiny_draw_string(10,2,display_str);
   18474:	0022      	movs	r2, r4
   18476:	2102      	movs	r1, #2
   18478:	200a      	movs	r0, #10
   1847a:	47b0      	blx	r6
	sprintf(display_str,"Date:   %02x", temp_time.date);
   1847c:	792a      	ldrb	r2, [r5, #4]
   1847e:	494d      	ldr	r1, [pc, #308]	; (185b4 <fn_set_clock+0x1f4>)
   18480:	0020      	movs	r0, r4
   18482:	47b8      	blx	r7
	glcd_tiny_draw_string(10,3,display_str);
   18484:	0022      	movs	r2, r4
   18486:	2103      	movs	r1, #3
   18488:	200a      	movs	r0, #10
   1848a:	47b0      	blx	r6
	sprintf(display_str,"Hour:   %02x", temp_time.hours);
   1848c:	78aa      	ldrb	r2, [r5, #2]
   1848e:	494a      	ldr	r1, [pc, #296]	; (185b8 <fn_set_clock+0x1f8>)
   18490:	0020      	movs	r0, r4
   18492:	47b8      	blx	r7
	glcd_tiny_draw_string(10,4,display_str);
   18494:	0022      	movs	r2, r4
   18496:	2104      	movs	r1, #4
   18498:	200a      	movs	r0, #10
   1849a:	47b0      	blx	r6
	sprintf(display_str,"Minute: %02x", temp_time.minutes);
   1849c:	786a      	ldrb	r2, [r5, #1]
   1849e:	4947      	ldr	r1, [pc, #284]	; (185bc <fn_set_clock+0x1fc>)
   184a0:	0020      	movs	r0, r4
   184a2:	47b8      	blx	r7
	glcd_tiny_draw_string(10,5,display_str);
   184a4:	0022      	movs	r2, r4
   184a6:	2105      	movs	r1, #5
   184a8:	200a      	movs	r0, #10
   184aa:	47b0      	blx	r6
	sprintf(display_str,"Second: %02x", temp_time.seconds);
   184ac:	782a      	ldrb	r2, [r5, #0]
   184ae:	4944      	ldr	r1, [pc, #272]	; (185c0 <fn_set_clock+0x200>)
   184b0:	0020      	movs	r0, r4
   184b2:	47b8      	blx	r7
	glcd_tiny_draw_string(10,6,display_str);
   184b4:	0022      	movs	r2, r4
   184b6:	2106      	movs	r1, #6
   184b8:	200a      	movs	r0, #10
   184ba:	47b0      	blx	r6
	drawSoftKeys("Next","+","-","Cancel");
   184bc:	4b41      	ldr	r3, [pc, #260]	; (185c4 <fn_set_clock+0x204>)
   184be:	4a42      	ldr	r2, [pc, #264]	; (185c8 <fn_set_clock+0x208>)
   184c0:	4942      	ldr	r1, [pc, #264]	; (185cc <fn_set_clock+0x20c>)
   184c2:	4843      	ldr	r0, [pc, #268]	; (185d0 <fn_set_clock+0x210>)
   184c4:	4d43      	ldr	r5, [pc, #268]	; (185d4 <fn_set_clock+0x214>)
   184c6:	47a8      	blx	r5
	sprintf(display_str, ">");
   184c8:	2202      	movs	r2, #2
   184ca:	4943      	ldr	r1, [pc, #268]	; (185d8 <fn_set_clock+0x218>)
   184cc:	0020      	movs	r0, r4
   184ce:	47c0      	blx	r8
	glcd_tiny_draw_string(1, cur_Y,display_str);
   184d0:	464b      	mov	r3, r9
   184d2:	0022      	movs	r2, r4
   184d4:	7819      	ldrb	r1, [r3, #0]
   184d6:	2001      	movs	r0, #1
   184d8:	47b0      	blx	r6
	glcd_write();
   184da:	4b40      	ldr	r3, [pc, #256]	; (185dc <fn_set_clock+0x21c>)
   184dc:	4798      	blx	r3
}
   184de:	b00c      	add	sp, #48	; 0x30
   184e0:	bc1c      	pop	{r2, r3, r4}
   184e2:	4690      	mov	r8, r2
   184e4:	4699      	mov	r9, r3
   184e6:	46a2      	mov	sl, r4
   184e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(cur_Y >= cur_Y_high){
   184ea:	4a3d      	ldr	r2, [pc, #244]	; (185e0 <fn_set_clock+0x220>)
   184ec:	6812      	ldr	r2, [r2, #0]
   184ee:	429a      	cmp	r2, r3
   184f0:	dd2c      	ble.n	1854c <fn_set_clock+0x18c>
			else{++cur_Y;}
   184f2:	464a      	mov	r2, r9
   184f4:	3301      	adds	r3, #1
   184f6:	6013      	str	r3, [r2, #0]
   184f8:	e7a1      	b.n	1843e <fn_set_clock+0x7e>
		cur_Y = 1;
   184fa:	4b23      	ldr	r3, [pc, #140]	; (18588 <fn_set_clock+0x1c8>)
   184fc:	4699      	mov	r9, r3
   184fe:	2301      	movs	r3, #1
   18500:	464a      	mov	r2, r9
   18502:	6013      	str	r3, [r2, #0]
		cur_Y_low = 1;
   18504:	4a37      	ldr	r2, [pc, #220]	; (185e4 <fn_set_clock+0x224>)
   18506:	6013      	str	r3, [r2, #0]
		cur_Y_high = 6;
   18508:	2206      	movs	r2, #6
   1850a:	4b35      	ldr	r3, [pc, #212]	; (185e0 <fn_set_clock+0x220>)
   1850c:	601a      	str	r2, [r3, #0]
		get_time();
   1850e:	4b36      	ldr	r3, [pc, #216]	; (185e8 <fn_set_clock+0x228>)
   18510:	4798      	blx	r3
		memcpy(&temp_time,&current_time,sizeof(current_time));	
   18512:	4d1e      	ldr	r5, [pc, #120]	; (1858c <fn_set_clock+0x1cc>)
   18514:	4b35      	ldr	r3, [pc, #212]	; (185ec <fn_set_clock+0x22c>)
   18516:	002a      	movs	r2, r5
   18518:	cb43      	ldmia	r3!, {r0, r1, r6}
   1851a:	c243      	stmia	r2!, {r0, r1, r6}
   1851c:	cb03      	ldmia	r3!, {r0, r1}
   1851e:	c203      	stmia	r2!, {r0, r1}
   18520:	e767      	b.n	183f2 <fn_set_clock+0x32>
			*unitPtr = incBcdData(*unitPtr, -1, unitMin, unitMax);
   18522:	4643      	mov	r3, r8
   18524:	2101      	movs	r1, #1
   18526:	7818      	ldrb	r0, [r3, #0]
   18528:	4652      	mov	r2, sl
   1852a:	003b      	movs	r3, r7
   1852c:	4249      	negs	r1, r1
   1852e:	4c30      	ldr	r4, [pc, #192]	; (185f0 <fn_set_clock+0x230>)
   18530:	47a0      	blx	r4
   18532:	4643      	mov	r3, r8
   18534:	7018      	strb	r0, [r3, #0]
			break;
   18536:	e782      	b.n	1843e <fn_set_clock+0x7e>
			*unitPtr = incBcdData(*unitPtr, 1, unitMin, unitMax);
   18538:	4643      	mov	r3, r8
   1853a:	4652      	mov	r2, sl
   1853c:	7818      	ldrb	r0, [r3, #0]
   1853e:	2101      	movs	r1, #1
   18540:	003b      	movs	r3, r7
   18542:	4c2b      	ldr	r4, [pc, #172]	; (185f0 <fn_set_clock+0x230>)
   18544:	47a0      	blx	r4
   18546:	4643      	mov	r3, r8
   18548:	7018      	strb	r0, [r3, #0]
			break;
   1854a:	e778      	b.n	1843e <fn_set_clock+0x7e>
				set_time();
   1854c:	4b29      	ldr	r3, [pc, #164]	; (185f4 <fn_set_clock+0x234>)
   1854e:	4798      	blx	r3
				current_input = input_state_complete;
   18550:	2208      	movs	r2, #8
   18552:	4b29      	ldr	r3, [pc, #164]	; (185f8 <fn_set_clock+0x238>)
   18554:	601a      	str	r2, [r3, #0]
   18556:	e772      	b.n	1843e <fn_set_clock+0x7e>
		if (cur_Y==clock_table[i].y_pos){
   18558:	2200      	movs	r2, #0
			unitMax = clock_table[i].max;
   1855a:	00d2      	lsls	r2, r2, #3
   1855c:	18a4      	adds	r4, r4, r2
			unitMin = clock_table[i].min;
   1855e:	7862      	ldrb	r2, [r4, #1]
			unitMax = clock_table[i].max;
   18560:	78a7      	ldrb	r7, [r4, #2]
			unitMin = clock_table[i].min;
   18562:	4692      	mov	sl, r2
			unitPtr = clock_table[i].ptr;
   18564:	6862      	ldr	r2, [r4, #4]
   18566:	4690      	mov	r8, r2
			break;
   18568:	e75f      	b.n	1842a <fn_set_clock+0x6a>
		if (cur_Y==clock_table[i].y_pos){
   1856a:	2201      	movs	r2, #1
   1856c:	e7f5      	b.n	1855a <fn_set_clock+0x19a>
   1856e:	2202      	movs	r2, #2
   18570:	e7f3      	b.n	1855a <fn_set_clock+0x19a>
   18572:	2203      	movs	r2, #3
   18574:	e7f1      	b.n	1855a <fn_set_clock+0x19a>
   18576:	2204      	movs	r2, #4
   18578:	e7ef      	b.n	1855a <fn_set_clock+0x19a>
   1857a:	2205      	movs	r2, #5
   1857c:	e7ed      	b.n	1855a <fn_set_clock+0x19a>
   1857e:	46c0      	nop			; (mov r8, r8)
   18580:	00025c0c 	.word	0x00025c0c
   18584:	200001d0 	.word	0x200001d0
   18588:	20003170 	.word	0x20003170
   1858c:	20003174 	.word	0x20003174
   18590:	200044f0 	.word	0x200044f0
   18594:	00013805 	.word	0x00013805
   18598:	200033a8 	.word	0x200033a8
   1859c:	0001fd79 	.word	0x0001fd79
   185a0:	000266dc 	.word	0x000266dc
   185a4:	000150a1 	.word	0x000150a1
   185a8:	0001fe91 	.word	0x0001fe91
   185ac:	000266e8 	.word	0x000266e8
   185b0:	000266f8 	.word	0x000266f8
   185b4:	00026708 	.word	0x00026708
   185b8:	00026718 	.word	0x00026718
   185bc:	00026728 	.word	0x00026728
   185c0:	00026738 	.word	0x00026738
   185c4:	00026748 	.word	0x00026748
   185c8:	00026750 	.word	0x00026750
   185cc:	00026754 	.word	0x00026754
   185d0:	00026758 	.word	0x00026758
   185d4:	000080b9 	.word	0x000080b9
   185d8:	00024d7c 	.word	0x00024d7c
   185dc:	0001493d 	.word	0x0001493d
   185e0:	20003de4 	.word	0x20003de4
   185e4:	20004b48 	.word	0x20004b48
   185e8:	00007c61 	.word	0x00007c61
   185ec:	20002778 	.word	0x20002778
   185f0:	00007f35 	.word	0x00007f35
   185f4:	00007d01 	.word	0x00007d01
   185f8:	2000403c 	.word	0x2000403c

000185fc <fn_set_bluetooth>:
void fn_set_bluetooth(void){
   185fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   185fe:	46de      	mov	lr, fp
   18600:	4657      	mov	r7, sl
   18602:	464e      	mov	r6, r9
   18604:	4645      	mov	r5, r8
   18606:	b5e0      	push	{r5, r6, r7, lr}
   18608:	b083      	sub	sp, #12
	char str_on[] = "On";
   1860a:	4669      	mov	r1, sp
   1860c:	4b86      	ldr	r3, [pc, #536]	; (18828 <fn_set_bluetooth+0x22c>)
   1860e:	881a      	ldrh	r2, [r3, #0]
   18610:	800a      	strh	r2, [r1, #0]
   18612:	789b      	ldrb	r3, [r3, #2]
   18614:	708b      	strb	r3, [r1, #2]
	char str_off[] = "Off";
   18616:	4b85      	ldr	r3, [pc, #532]	; (1882c <fn_set_bluetooth+0x230>)
   18618:	9301      	str	r3, [sp, #4]
	if (state_change) {
   1861a:	4b85      	ldr	r3, [pc, #532]	; (18830 <fn_set_bluetooth+0x234>)
   1861c:	781b      	ldrb	r3, [r3, #0]
   1861e:	2b00      	cmp	r3, #0
   18620:	d000      	beq.n	18624 <fn_set_bluetooth+0x28>
   18622:	e089      	b.n	18738 <fn_set_bluetooth+0x13c>
   18624:	4b83      	ldr	r3, [pc, #524]	; (18834 <fn_set_bluetooth+0x238>)
   18626:	469b      	mov	fp, r3
   18628:	4b83      	ldr	r3, [pc, #524]	; (18838 <fn_set_bluetooth+0x23c>)
	switch(last_input){
   1862a:	681c      	ldr	r4, [r3, #0]
   1862c:	2c02      	cmp	r4, #2
   1862e:	d100      	bne.n	18632 <fn_set_bluetooth+0x36>
   18630:	e093      	b.n	1875a <fn_set_bluetooth+0x15e>
   18632:	2c03      	cmp	r4, #3
   18634:	d100      	bne.n	18638 <fn_set_bluetooth+0x3c>
   18636:	e0b2      	b.n	1879e <fn_set_bluetooth+0x1a2>
   18638:	2c01      	cmp	r4, #1
   1863a:	d100      	bne.n	1863e <fn_set_bluetooth+0x42>
   1863c:	e09a      	b.n	18774 <fn_set_bluetooth+0x178>
   1863e:	4b7f      	ldr	r3, [pc, #508]	; (1883c <fn_set_bluetooth+0x240>)
   18640:	4699      	mov	r9, r3
	glcd_clear_buffer();
   18642:	4b7f      	ldr	r3, [pc, #508]	; (18840 <fn_set_bluetooth+0x244>)
   18644:	4798      	blx	r3
	sprintf(display_str,"Bluetooth:");
   18646:	4c7f      	ldr	r4, [pc, #508]	; (18844 <fn_set_bluetooth+0x248>)
   18648:	4e7f      	ldr	r6, [pc, #508]	; (18848 <fn_set_bluetooth+0x24c>)
   1864a:	220b      	movs	r2, #11
   1864c:	497f      	ldr	r1, [pc, #508]	; (1884c <fn_set_bluetooth+0x250>)
   1864e:	0020      	movs	r0, r4
   18650:	47b0      	blx	r6
	glcd_tiny_draw_string(0,0,display_str);
   18652:	4d7f      	ldr	r5, [pc, #508]	; (18850 <fn_set_bluetooth+0x254>)
   18654:	0022      	movs	r2, r4
   18656:	2100      	movs	r1, #0
   18658:	2000      	movs	r0, #0
   1865a:	47a8      	blx	r5
	sprintf(display_str,"AutoRun On/Off");
   1865c:	220f      	movs	r2, #15
   1865e:	497d      	ldr	r1, [pc, #500]	; (18854 <fn_set_bluetooth+0x258>)
   18660:	0020      	movs	r0, r4
   18662:	47b0      	blx	r6
	glcd_tiny_draw_string(25, 2, display_str);
   18664:	0022      	movs	r2, r4
   18666:	2102      	movs	r1, #2
   18668:	2019      	movs	r0, #25
   1866a:	47a8      	blx	r5
	sprintf(display_str,"Reset On/Off");
   1866c:	220d      	movs	r2, #13
   1866e:	497a      	ldr	r1, [pc, #488]	; (18858 <fn_set_bluetooth+0x25c>)
   18670:	0020      	movs	r0, r4
   18672:	47b0      	blx	r6
	glcd_tiny_draw_string(25, 3, display_str);
   18674:	0022      	movs	r2, r4
   18676:	2103      	movs	r1, #3
   18678:	2019      	movs	r0, #25
   1867a:	47a8      	blx	r5
	sprintf(display_str,"OTA On/Off");
   1867c:	220b      	movs	r2, #11
   1867e:	4977      	ldr	r1, [pc, #476]	; (1885c <fn_set_bluetooth+0x260>)
   18680:	0020      	movs	r0, r4
   18682:	47b0      	blx	r6
	glcd_tiny_draw_string(25, 4, display_str);
   18684:	0022      	movs	r2, r4
   18686:	2104      	movs	r1, #4
   18688:	2019      	movs	r0, #25
   1868a:	47a8      	blx	r5
	sprintf(display_str,"MC UART On/Off");
   1868c:	220f      	movs	r2, #15
   1868e:	4974      	ldr	r1, [pc, #464]	; (18860 <fn_set_bluetooth+0x264>)
   18690:	0020      	movs	r0, r4
   18692:	47b0      	blx	r6
	glcd_tiny_draw_string(25, 5, display_str);
   18694:	0022      	movs	r2, r4
   18696:	2105      	movs	r1, #5
   18698:	2019      	movs	r0, #25
   1869a:	47a8      	blx	r5
	sprintf(display_str,"CMD MODE");
   1869c:	2209      	movs	r2, #9
   1869e:	4971      	ldr	r1, [pc, #452]	; (18864 <fn_set_bluetooth+0x268>)
   186a0:	0020      	movs	r0, r4
   186a2:	47b0      	blx	r6
	glcd_tiny_draw_string(25, 6, display_str);
   186a4:	0022      	movs	r2, r4
   186a6:	2106      	movs	r1, #6
   186a8:	2019      	movs	r0, #25
   186aa:	47a8      	blx	r5
	drawSoftKeys("Adjust","<",">","Back");
   186ac:	4b6e      	ldr	r3, [pc, #440]	; (18868 <fn_set_bluetooth+0x26c>)
   186ae:	496f      	ldr	r1, [pc, #444]	; (1886c <fn_set_bluetooth+0x270>)
   186b0:	4698      	mov	r8, r3
   186b2:	486f      	ldr	r0, [pc, #444]	; (18870 <fn_set_bluetooth+0x274>)
   186b4:	4b6f      	ldr	r3, [pc, #444]	; (18874 <fn_set_bluetooth+0x278>)
   186b6:	4642      	mov	r2, r8
   186b8:	4f6f      	ldr	r7, [pc, #444]	; (18878 <fn_set_bluetooth+0x27c>)
   186ba:	47b8      	blx	r7
	sprintf(display_str, ">");
   186bc:	2202      	movs	r2, #2
   186be:	4641      	mov	r1, r8
   186c0:	0020      	movs	r0, r4
   186c2:	47b0      	blx	r6
	glcd_tiny_draw_string(18, cur_Y,display_str);
   186c4:	465b      	mov	r3, fp
   186c6:	0022      	movs	r2, r4
   186c8:	7819      	ldrb	r1, [r3, #0]
   186ca:	2012      	movs	r0, #18
   186cc:	47a8      	blx	r5
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
   186ce:	4b6b      	ldr	r3, [pc, #428]	; (1887c <fn_set_bluetooth+0x280>)
	else{ str_ptr = str_on;}
   186d0:	466a      	mov	r2, sp
   186d2:	6a1b      	ldr	r3, [r3, #32]
	if (ioport_get_pin_level(BLE_autorun)){ str_ptr = str_off;}
   186d4:	045b      	lsls	r3, r3, #17
   186d6:	d500      	bpl.n	186da <fn_set_bluetooth+0xde>
   186d8:	aa01      	add	r2, sp, #4
	glcd_tiny_draw_string(0, 2,str_ptr);
   186da:	2102      	movs	r1, #2
   186dc:	2000      	movs	r0, #0
   186de:	47a8      	blx	r5
   186e0:	4b66      	ldr	r3, [pc, #408]	; (1887c <fn_set_bluetooth+0x280>)
	else{str_ptr = str_on;}
   186e2:	466a      	mov	r2, sp
   186e4:	6a1b      	ldr	r3, [r3, #32]
	if (ioport_get_pin_level(BLE_reset)){ str_ptr = str_off;}
   186e6:	071b      	lsls	r3, r3, #28
   186e8:	d500      	bpl.n	186ec <fn_set_bluetooth+0xf0>
   186ea:	aa01      	add	r2, sp, #4
	glcd_tiny_draw_string(0, 3,str_ptr);
   186ec:	2103      	movs	r1, #3
   186ee:	2000      	movs	r0, #0
   186f0:	47a8      	blx	r5
   186f2:	4b63      	ldr	r3, [pc, #396]	; (18880 <fn_set_bluetooth+0x284>)
	else{str_ptr = str_off;}
   186f4:	aa01      	add	r2, sp, #4
   186f6:	6a1b      	ldr	r3, [r3, #32]
	if (ioport_get_pin_level(BLE_ota)){ str_ptr = str_on;}
   186f8:	025b      	lsls	r3, r3, #9
   186fa:	d500      	bpl.n	186fe <fn_set_bluetooth+0x102>
   186fc:	466a      	mov	r2, sp
	glcd_tiny_draw_string(0, 4,str_ptr);
   186fe:	2104      	movs	r1, #4
   18700:	2000      	movs	r0, #0
   18702:	47a8      	blx	r5
	if (isBleCommEnabled()){ str_ptr = str_on;}
   18704:	47c8      	blx	r9
	else{str_ptr = str_off;}
   18706:	aa01      	add	r2, sp, #4
	if (isBleCommEnabled()){ str_ptr = str_on;}
   18708:	2800      	cmp	r0, #0
   1870a:	d000      	beq.n	1870e <fn_set_bluetooth+0x112>
   1870c:	466a      	mov	r2, sp
	glcd_tiny_draw_string(0, 5,str_ptr);
   1870e:	2105      	movs	r1, #5
   18710:	2000      	movs	r0, #0
   18712:	47a8      	blx	r5
   18714:	4b59      	ldr	r3, [pc, #356]	; (1887c <fn_set_bluetooth+0x280>)
	else{str_ptr = str_off;}
   18716:	aa01      	add	r2, sp, #4
   18718:	6a1b      	ldr	r3, [r3, #32]
	if (ioport_get_pin_level(BLE_COMMAND_MODE)){ str_ptr = str_on;}
   1871a:	025b      	lsls	r3, r3, #9
   1871c:	d500      	bpl.n	18720 <fn_set_bluetooth+0x124>
   1871e:	466a      	mov	r2, sp
	glcd_tiny_draw_string(0, 6,str_ptr);
   18720:	2106      	movs	r1, #6
   18722:	2000      	movs	r0, #0
   18724:	47a8      	blx	r5
	glcd_write();
   18726:	4b57      	ldr	r3, [pc, #348]	; (18884 <fn_set_bluetooth+0x288>)
   18728:	4798      	blx	r3
}
   1872a:	b003      	add	sp, #12
   1872c:	bc3c      	pop	{r2, r3, r4, r5}
   1872e:	4690      	mov	r8, r2
   18730:	4699      	mov	r9, r3
   18732:	46a2      	mov	sl, r4
   18734:	46ab      	mov	fp, r5
   18736:	bdf0      	pop	{r4, r5, r6, r7, pc}
		cur_Y=2;
   18738:	4b3e      	ldr	r3, [pc, #248]	; (18834 <fn_set_bluetooth+0x238>)
   1873a:	469b      	mov	fp, r3
   1873c:	2302      	movs	r3, #2
   1873e:	465a      	mov	r2, fp
   18740:	6013      	str	r3, [r2, #0]
		cur_Y_low=2;
   18742:	4a51      	ldr	r2, [pc, #324]	; (18888 <fn_set_bluetooth+0x28c>)
   18744:	6013      	str	r3, [r2, #0]
		cur_Y_high=6;
   18746:	2206      	movs	r2, #6
   18748:	4b50      	ldr	r3, [pc, #320]	; (1888c <fn_set_bluetooth+0x290>)
   1874a:	601a      	str	r2, [r3, #0]
		last_input = input_none;
   1874c:	2200      	movs	r2, #0
   1874e:	4b3a      	ldr	r3, [pc, #232]	; (18838 <fn_set_bluetooth+0x23c>)
   18750:	601a      	str	r2, [r3, #0]
	switch(last_input){
   18752:	681c      	ldr	r4, [r3, #0]
   18754:	2c02      	cmp	r4, #2
   18756:	d000      	beq.n	1875a <fn_set_bluetooth+0x15e>
   18758:	e76b      	b.n	18632 <fn_set_bluetooth+0x36>
			if(cur_Y > cur_Y_low){--cur_Y; }
   1875a:	465b      	mov	r3, fp
   1875c:	4a4a      	ldr	r2, [pc, #296]	; (18888 <fn_set_bluetooth+0x28c>)
   1875e:	681b      	ldr	r3, [r3, #0]
   18760:	6812      	ldr	r2, [r2, #0]
   18762:	4293      	cmp	r3, r2
   18764:	dc00      	bgt.n	18768 <fn_set_bluetooth+0x16c>
   18766:	e76a      	b.n	1863e <fn_set_bluetooth+0x42>
   18768:	465a      	mov	r2, fp
   1876a:	3b01      	subs	r3, #1
   1876c:	6013      	str	r3, [r2, #0]
   1876e:	4b33      	ldr	r3, [pc, #204]	; (1883c <fn_set_bluetooth+0x240>)
   18770:	4699      	mov	r9, r3
   18772:	e766      	b.n	18642 <fn_set_bluetooth+0x46>
			if(cur_Y == 2){
   18774:	465b      	mov	r3, fp
   18776:	681b      	ldr	r3, [r3, #0]
   18778:	2b02      	cmp	r3, #2
   1877a:	d01d      	beq.n	187b8 <fn_set_bluetooth+0x1bc>
			} else if (cur_Y==3){
   1877c:	2b03      	cmp	r3, #3
   1877e:	d025      	beq.n	187cc <fn_set_bluetooth+0x1d0>
			} else if (cur_Y==4){
   18780:	2b04      	cmp	r3, #4
   18782:	d02a      	beq.n	187da <fn_set_bluetooth+0x1de>
			} else if (cur_Y==5){
   18784:	2b05      	cmp	r3, #5
   18786:	d030      	beq.n	187ea <fn_set_bluetooth+0x1ee>
			}else if (cur_Y==6){
   18788:	2b06      	cmp	r3, #6
   1878a:	d000      	beq.n	1878e <fn_set_bluetooth+0x192>
   1878c:	e757      	b.n	1863e <fn_set_bluetooth+0x42>
   1878e:	2280      	movs	r2, #128	; 0x80
   18790:	4b3a      	ldr	r3, [pc, #232]	; (1887c <fn_set_bluetooth+0x280>)
   18792:	03d2      	lsls	r2, r2, #15
   18794:	6a19      	ldr	r1, [r3, #32]
	if (level) {
   18796:	4211      	tst	r1, r2
   18798:	d014      	beq.n	187c4 <fn_set_bluetooth+0x1c8>
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   1879a:	615a      	str	r2, [r3, #20]
   1879c:	e74f      	b.n	1863e <fn_set_bluetooth+0x42>
			if(cur_Y < cur_Y_high){++cur_Y; }
   1879e:	465b      	mov	r3, fp
   187a0:	4a3a      	ldr	r2, [pc, #232]	; (1888c <fn_set_bluetooth+0x290>)
   187a2:	681b      	ldr	r3, [r3, #0]
   187a4:	6812      	ldr	r2, [r2, #0]
   187a6:	4293      	cmp	r3, r2
   187a8:	db00      	blt.n	187ac <fn_set_bluetooth+0x1b0>
   187aa:	e748      	b.n	1863e <fn_set_bluetooth+0x42>
   187ac:	465a      	mov	r2, fp
   187ae:	3301      	adds	r3, #1
   187b0:	6013      	str	r3, [r2, #0]
   187b2:	4b22      	ldr	r3, [pc, #136]	; (1883c <fn_set_bluetooth+0x240>)
   187b4:	4699      	mov	r9, r3
   187b6:	e744      	b.n	18642 <fn_set_bluetooth+0x46>
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
   187b8:	2280      	movs	r2, #128	; 0x80
   187ba:	4b30      	ldr	r3, [pc, #192]	; (1887c <fn_set_bluetooth+0x280>)
   187bc:	01d2      	lsls	r2, r2, #7
   187be:	6a19      	ldr	r1, [r3, #32]
	if (level) {
   187c0:	4211      	tst	r1, r2
   187c2:	d1ea      	bne.n	1879a <fn_set_bluetooth+0x19e>
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   187c4:	619a      	str	r2, [r3, #24]
   187c6:	4b1d      	ldr	r3, [pc, #116]	; (1883c <fn_set_bluetooth+0x240>)
   187c8:	4699      	mov	r9, r3
   187ca:	e73a      	b.n	18642 <fn_set_bluetooth+0x46>
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
   187cc:	2208      	movs	r2, #8
   187ce:	4b2b      	ldr	r3, [pc, #172]	; (1887c <fn_set_bluetooth+0x280>)
   187d0:	6a19      	ldr	r1, [r3, #32]
	if (level) {
   187d2:	420a      	tst	r2, r1
   187d4:	d0f6      	beq.n	187c4 <fn_set_bluetooth+0x1c8>
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   187d6:	615a      	str	r2, [r3, #20]
   187d8:	e731      	b.n	1863e <fn_set_bluetooth+0x42>
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
   187da:	2280      	movs	r2, #128	; 0x80
   187dc:	4b28      	ldr	r3, [pc, #160]	; (18880 <fn_set_bluetooth+0x284>)
   187de:	03d2      	lsls	r2, r2, #15
   187e0:	6a19      	ldr	r1, [r3, #32]
	if (level) {
   187e2:	4211      	tst	r1, r2
   187e4:	d0ee      	beq.n	187c4 <fn_set_bluetooth+0x1c8>
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   187e6:	615a      	str	r2, [r3, #20]
   187e8:	e729      	b.n	1863e <fn_set_bluetooth+0x42>
				if (isBleCommEnabled()){
   187ea:	4b14      	ldr	r3, [pc, #80]	; (1883c <fn_set_bluetooth+0x240>)
   187ec:	4699      	mov	r9, r3
   187ee:	4798      	blx	r3
   187f0:	2800      	cmp	r0, #0
   187f2:	d015      	beq.n	18820 <fn_set_bluetooth+0x224>
	SercomUsart *const usart_hw = &(module->hw->USART);
   187f4:	4e26      	ldr	r6, [pc, #152]	; (18890 <fn_set_bluetooth+0x294>)
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   187f6:	4b27      	ldr	r3, [pc, #156]	; (18894 <fn_set_bluetooth+0x298>)
	SercomUsart *const usart_hw = &(module->hw->USART);
   187f8:	6835      	ldr	r5, [r6, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   187fa:	0028      	movs	r0, r5
   187fc:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   187fe:	231f      	movs	r3, #31
   18800:	4018      	ands	r0, r3
   18802:	4084      	lsls	r4, r0
   18804:	4a24      	ldr	r2, [pc, #144]	; (18898 <fn_set_bluetooth+0x29c>)
   18806:	3361      	adds	r3, #97	; 0x61
   18808:	50d4      	str	r4, [r2, r3]
   1880a:	6832      	ldr	r2, [r6, #0]
	return (usart_hw->SYNCBUSY.reg);
   1880c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   1880e:	2b00      	cmp	r3, #0
   18810:	d1fc      	bne.n	1880c <fn_set_bluetooth+0x210>
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
   18812:	2202      	movs	r2, #2
   18814:	682b      	ldr	r3, [r5, #0]
   18816:	4393      	bics	r3, r2
   18818:	602b      	str	r3, [r5, #0]
					BLE_usart_isolate();
   1881a:	4b20      	ldr	r3, [pc, #128]	; (1889c <fn_set_bluetooth+0x2a0>)
   1881c:	4798      	blx	r3
   1881e:	e710      	b.n	18642 <fn_set_bluetooth+0x46>
					configure_usart_BLE();
   18820:	4b1f      	ldr	r3, [pc, #124]	; (188a0 <fn_set_bluetooth+0x2a4>)
   18822:	4798      	blx	r3
   18824:	e70d      	b.n	18642 <fn_set_bluetooth+0x46>
   18826:	46c0      	nop			; (mov r8, r8)
   18828:	000266d8 	.word	0x000266d8
   1882c:	0066664f 	.word	0x0066664f
   18830:	200001d0 	.word	0x200001d0
   18834:	20003170 	.word	0x20003170
   18838:	200044f0 	.word	0x200044f0
   1883c:	000130c9 	.word	0x000130c9
   18840:	00013805 	.word	0x00013805
   18844:	200033a8 	.word	0x200033a8
   18848:	0001fd79 	.word	0x0001fd79
   1884c:	00026684 	.word	0x00026684
   18850:	000150a1 	.word	0x000150a1
   18854:	00026690 	.word	0x00026690
   18858:	000266a0 	.word	0x000266a0
   1885c:	000266b0 	.word	0x000266b0
   18860:	000266bc 	.word	0x000266bc
   18864:	000266cc 	.word	0x000266cc
   18868:	00024d7c 	.word	0x00024d7c
   1886c:	00024d78 	.word	0x00024d78
   18870:	00026808 	.word	0x00026808
   18874:	000264bc 	.word	0x000264bc
   18878:	000080b9 	.word	0x000080b9
   1887c:	40002800 	.word	0x40002800
   18880:	40002880 	.word	0x40002880
   18884:	0001493d 	.word	0x0001493d
   18888:	20004b48 	.word	0x20004b48
   1888c:	20003de4 	.word	0x20003de4
   18890:	20001020 	.word	0x20001020
   18894:	0000fe91 	.word	0x0000fe91
   18898:	e000e100 	.word	0xe000e100
   1889c:	00012f59 	.word	0x00012f59
   188a0:	00012e45 	.word	0x00012e45

000188a4 <extint_routine>:
	extint_register_callback(extint_routine, 5,	EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(5,EXTINT_CALLBACK_TYPE_DETECT);
}

void extint_routine(void)
{
   188a4:	b510      	push	{r4, lr}
	enum INPUT tempInput;
	
	//cpu_irq_disable();
	
	
	current_time_ms = getCurrentMs(); 
   188a6:	4b2a      	ldr	r3, [pc, #168]	; (18950 <extint_routine+0xac>)
   188a8:	4798      	blx	r3
	
	

	switch (extint_get_current_channel()){
   188aa:	4b2a      	ldr	r3, [pc, #168]	; (18954 <extint_routine+0xb0>)
	current_time_ms = getCurrentMs(); 
   188ac:	0004      	movs	r4, r0
	switch (extint_get_current_channel()){
   188ae:	4798      	blx	r3
   188b0:	3804      	subs	r0, #4
   188b2:	b2c0      	uxtb	r0, r0
   188b4:	2805      	cmp	r0, #5
   188b6:	d80e      	bhi.n	188d6 <extint_routine+0x32>
   188b8:	4b27      	ldr	r3, [pc, #156]	; (18958 <extint_routine+0xb4>)
   188ba:	0080      	lsls	r0, r0, #2
   188bc:	581b      	ldr	r3, [r3, r0]
   188be:	469f      	mov	pc, r3
			break;
		case 6:
			tempInput = input_button3;
			break;
		case 4:
			tempInput = input_button2;
   188c0:	2002      	movs	r0, #2
	
	
	
	//  Debounce Function
	if(tempInput != input_none){
		if((current_time_ms-last_time_ms)>DEBOUNCE_MS){
   188c2:	2196      	movs	r1, #150	; 0x96
   188c4:	4a25      	ldr	r2, [pc, #148]	; (1895c <extint_routine+0xb8>)
   188c6:	0049      	lsls	r1, r1, #1
   188c8:	6813      	ldr	r3, [r2, #0]
   188ca:	1ae3      	subs	r3, r4, r3
   188cc:	428b      	cmp	r3, r1
   188ce:	d902      	bls.n	188d6 <extint_routine+0x32>
			last_time_ms = current_time_ms;	
			current_input = tempInput;
   188d0:	4b23      	ldr	r3, [pc, #140]	; (18960 <extint_routine+0xbc>)
			last_time_ms = current_time_ms;	
   188d2:	6014      	str	r4, [r2, #0]
			current_input = tempInput;
   188d4:	6018      	str	r0, [r3, #0]
		}
	}
	//cpu_irq_enable();
	
	
}
   188d6:	bd10      	pop	{r4, pc}
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
   188d8:	4b22      	ldr	r3, [pc, #136]	; (18964 <extint_routine+0xc0>)
   188da:	6a1a      	ldr	r2, [r3, #32]
	static uint32_t last_time_ms;
	
	static uint8_t click_counter=0;
	
	
	switch (current_state){
   188dc:	4b22      	ldr	r3, [pc, #136]	; (18968 <extint_routine+0xc4>)
   188de:	681b      	ldr	r3, [r3, #0]
   188e0:	2b04      	cmp	r3, #4
   188e2:	d012      	beq.n	1890a <extint_routine+0x66>
   188e4:	2b05      	cmp	r3, #5
   188e6:	d0f6      	beq.n	188d6 <extint_routine+0x32>
			}else{
				return input_none;
			}			
			break;
		default:
			if (buttonOn){
   188e8:	0693      	lsls	r3, r2, #26
   188ea:	d424      	bmi.n	18936 <extint_routine+0x92>
				//  Trigger on if button is pressed
				if(!buttonE_triggered){
   188ec:	4b1f      	ldr	r3, [pc, #124]	; (1896c <extint_routine+0xc8>)
   188ee:	781a      	ldrb	r2, [r3, #0]
   188f0:	2a00      	cmp	r2, #0
   188f2:	d1f0      	bne.n	188d6 <extint_routine+0x32>
					buttonE_triggered=true;
   188f4:	3201      	adds	r2, #1
   188f6:	701a      	strb	r2, [r3, #0]
					//trigger timer
					timerStartExt();
   188f8:	4b1d      	ldr	r3, [pc, #116]	; (18970 <extint_routine+0xcc>)
   188fa:	4798      	blx	r3
   188fc:	e7eb      	b.n	188d6 <extint_routine+0x32>
			tempInput = input_button3;
   188fe:	2003      	movs	r0, #3
   18900:	e7df      	b.n	188c2 <extint_routine+0x1e>
			tempInput = input_button4;
   18902:	2004      	movs	r0, #4
   18904:	e7dd      	b.n	188c2 <extint_routine+0x1e>
			tempInput = input_button1;
   18906:	2001      	movs	r0, #1
			break;
   18908:	e7db      	b.n	188c2 <extint_routine+0x1e>
			if ((current_time_ms-last_time_ms)<DEBOUNCE_MS_QUICK3){
   1890a:	212c      	movs	r1, #44	; 0x2c
   1890c:	4a19      	ldr	r2, [pc, #100]	; (18974 <extint_routine+0xd0>)
   1890e:	31ff      	adds	r1, #255	; 0xff
   18910:	6813      	ldr	r3, [r2, #0]
   18912:	1ae3      	subs	r3, r4, r3
   18914:	428b      	cmp	r3, r1
   18916:	d9de      	bls.n	188d6 <extint_routine+0x32>
			if( (current_time_ms-last_time_ms)<QUICK3_MS){
   18918:	4917      	ldr	r1, [pc, #92]	; (18978 <extint_routine+0xd4>)
   1891a:	428b      	cmp	r3, r1
   1891c:	d812      	bhi.n	18944 <extint_routine+0xa0>
				click_counter++;
   1891e:	4917      	ldr	r1, [pc, #92]	; (1897c <extint_routine+0xd8>)
			last_time_ms = current_time_ms;
   18920:	6014      	str	r4, [r2, #0]
				click_counter++;
   18922:	780b      	ldrb	r3, [r1, #0]
   18924:	3301      	adds	r3, #1
   18926:	b2db      	uxtb	r3, r3
   18928:	700b      	strb	r3, [r1, #0]
			if (click_counter>=3){
   1892a:	2b02      	cmp	r3, #2
   1892c:	d9d3      	bls.n	188d6 <extint_routine+0x32>
				click_counter = 0;
   1892e:	2300      	movs	r3, #0
				return input_wakeup;
   18930:	2016      	movs	r0, #22
				click_counter = 0;
   18932:	700b      	strb	r3, [r1, #0]
   18934:	e7c5      	b.n	188c2 <extint_routine+0x1e>
				}
				return input_none;
			}else{
				//  Releaed in a short amount of time, normal input
				buttonE_triggered=false;
   18936:	2200      	movs	r2, #0
   18938:	4b0c      	ldr	r3, [pc, #48]	; (1896c <extint_routine+0xc8>)
   1893a:	701a      	strb	r2, [r3, #0]
				timerStopExt();
   1893c:	4b10      	ldr	r3, [pc, #64]	; (18980 <extint_routine+0xdc>)
   1893e:	4798      	blx	r3
				return input_buttonE;
   18940:	2005      	movs	r0, #5
   18942:	e7be      	b.n	188c2 <extint_routine+0x1e>
   18944:	2101      	movs	r1, #1
   18946:	4b0d      	ldr	r3, [pc, #52]	; (1897c <extint_routine+0xd8>)
			last_time_ms = current_time_ms;
   18948:	6014      	str	r4, [r2, #0]
   1894a:	7019      	strb	r1, [r3, #0]
   1894c:	e7c3      	b.n	188d6 <extint_routine+0x32>
   1894e:	46c0      	nop			; (mov r8, r8)
   18950:	0000dbc1 	.word	0x0000dbc1
   18954:	0000f1ad 	.word	0x0000f1ad
   18958:	00025bf4 	.word	0x00025bf4
   1895c:	20000f14 	.word	0x20000f14
   18960:	2000403c 	.word	0x2000403c
   18964:	40002800 	.word	0x40002800
   18968:	2000278c 	.word	0x2000278c
   1896c:	20000efc 	.word	0x20000efc
   18970:	0000dbd5 	.word	0x0000dbd5
   18974:	20000f18 	.word	0x20000f18
   18978:	00000bb7 	.word	0x00000bb7
   1897c:	20000efd 	.word	0x20000efd
   18980:	0000dc01 	.word	0x0000dc01

00018984 <cal_disp_message>:
void cal_disp_message(void){
   18984:	b570      	push	{r4, r5, r6, lr}
	wdt_disable();
   18986:	4b6c      	ldr	r3, [pc, #432]	; (18b38 <cal_disp_message+0x1b4>)
   18988:	4798      	blx	r3
	glcd_clear_buffer();
   1898a:	4b6c      	ldr	r3, [pc, #432]	; (18b3c <cal_disp_message+0x1b8>)
   1898c:	4798      	blx	r3
	switch(current_state){
   1898e:	4b6c      	ldr	r3, [pc, #432]	; (18b40 <cal_disp_message+0x1bc>)
   18990:	681b      	ldr	r3, [r3, #0]
   18992:	2b0c      	cmp	r3, #12
   18994:	d100      	bne.n	18998 <cal_disp_message+0x14>
   18996:	e0a4      	b.n	18ae2 <cal_disp_message+0x15e>
   18998:	d800      	bhi.n	1899c <cal_disp_message+0x18>
   1899a:	e080      	b.n	18a9e <cal_disp_message+0x11a>
   1899c:	2b0d      	cmp	r3, #13
   1899e:	d04b      	beq.n	18a38 <cal_disp_message+0xb4>
   189a0:	2b11      	cmp	r3, #17
   189a2:	d000      	beq.n	189a6 <cal_disp_message+0x22>
   189a4:	e091      	b.n	18aca <cal_disp_message+0x146>
			sprintf(display_str, "Loop Test:");
   189a6:	4c67      	ldr	r4, [pc, #412]	; (18b44 <cal_disp_message+0x1c0>)
   189a8:	4e67      	ldr	r6, [pc, #412]	; (18b48 <cal_disp_message+0x1c4>)
   189aa:	220b      	movs	r2, #11
   189ac:	4967      	ldr	r1, [pc, #412]	; (18b4c <cal_disp_message+0x1c8>)
   189ae:	0020      	movs	r0, r4
   189b0:	47b0      	blx	r6
			glcd_tiny_draw_string(0,0,display_str);
   189b2:	4d67      	ldr	r5, [pc, #412]	; (18b50 <cal_disp_message+0x1cc>)
   189b4:	0022      	movs	r2, r4
   189b6:	2100      	movs	r1, #0
   189b8:	2000      	movs	r0, #0
   189ba:	47a8      	blx	r5
			sprintf(display_str, "Take a series of");
   189bc:	2211      	movs	r2, #17
   189be:	4965      	ldr	r1, [pc, #404]	; (18b54 <cal_disp_message+0x1d0>)
   189c0:	0020      	movs	r0, r4
   189c2:	47b0      	blx	r6
			glcd_tiny_draw_string(0,1,display_str);
   189c4:	0022      	movs	r2, r4
   189c6:	2101      	movs	r1, #1
   189c8:	2000      	movs	r0, #0
   189ca:	47a8      	blx	r5
			sprintf(display_str, "measurements ending");
   189cc:	2214      	movs	r2, #20
   189ce:	4962      	ldr	r1, [pc, #392]	; (18b58 <cal_disp_message+0x1d4>)
   189d0:	0020      	movs	r0, r4
   189d2:	47b0      	blx	r6
			glcd_tiny_draw_string(0,2,display_str);
   189d4:	0022      	movs	r2, r4
   189d6:	2102      	movs	r1, #2
   189d8:	2000      	movs	r0, #0
   189da:	47a8      	blx	r5
			sprintf(display_str, "back at the first");
   189dc:	2212      	movs	r2, #18
   189de:	495f      	ldr	r1, [pc, #380]	; (18b5c <cal_disp_message+0x1d8>)
   189e0:	0020      	movs	r0, r4
   189e2:	47b0      	blx	r6
			glcd_tiny_draw_string(0,3,display_str);
   189e4:	0022      	movs	r2, r4
   189e6:	2103      	movs	r1, #3
   189e8:	2000      	movs	r0, #0
   189ea:	47a8      	blx	r5
			sprintf(display_str, "point.  Press 'Done'");
   189ec:	2215      	movs	r2, #21
   189ee:	495c      	ldr	r1, [pc, #368]	; (18b60 <cal_disp_message+0x1dc>)
   189f0:	0020      	movs	r0, r4
   189f2:	47b0      	blx	r6
			glcd_tiny_draw_string(0,4,display_str);
   189f4:	0022      	movs	r2, r4
   189f6:	2104      	movs	r1, #4
   189f8:	2000      	movs	r0, #0
   189fa:	47a8      	blx	r5
			sprintf(display_str, "when complete.");
   189fc:	220f      	movs	r2, #15
   189fe:	4959      	ldr	r1, [pc, #356]	; (18b64 <cal_disp_message+0x1e0>)
   18a00:	0020      	movs	r0, r4
   18a02:	47b0      	blx	r6
			glcd_tiny_draw_string(0,5,display_str);
   18a04:	0022      	movs	r2, r4
   18a06:	2105      	movs	r1, #5
   18a08:	2000      	movs	r0, #0
   18a0a:	47a8      	blx	r5
	sprintf(display_str, "Press any button...");
   18a0c:	2214      	movs	r2, #20
   18a0e:	4956      	ldr	r1, [pc, #344]	; (18b68 <cal_disp_message+0x1e4>)
   18a10:	0020      	movs	r0, r4
   18a12:	47b0      	blx	r6
	glcd_tiny_draw_string(10,7,display_str);
   18a14:	0022      	movs	r2, r4
   18a16:	2107      	movs	r1, #7
   18a18:	200a      	movs	r0, #10
   18a1a:	47a8      	blx	r5
	glcd_write();
   18a1c:	4b53      	ldr	r3, [pc, #332]	; (18b6c <cal_disp_message+0x1e8>)
   18a1e:	4798      	blx	r3
   18a20:	4a53      	ldr	r2, [pc, #332]	; (18b70 <cal_disp_message+0x1ec>)
	while((current_input == input_none) || (current_input == input_1sec));//hold here until an input
   18a22:	6813      	ldr	r3, [r2, #0]
   18a24:	2b00      	cmp	r3, #0
   18a26:	d0fc      	beq.n	18a22 <cal_disp_message+0x9e>
   18a28:	6813      	ldr	r3, [r2, #0]
   18a2a:	2b07      	cmp	r3, #7
   18a2c:	d0f9      	beq.n	18a22 <cal_disp_message+0x9e>
	current_input = input_none;
   18a2e:	2300      	movs	r3, #0
   18a30:	6013      	str	r3, [r2, #0]
	wdt_enable();
   18a32:	4b50      	ldr	r3, [pc, #320]	; (18b74 <cal_disp_message+0x1f0>)
   18a34:	4798      	blx	r3
}
   18a36:	bd70      	pop	{r4, r5, r6, pc}
			sprintf(display_str, "Distance Calibration:");
   18a38:	4c42      	ldr	r4, [pc, #264]	; (18b44 <cal_disp_message+0x1c0>)
   18a3a:	2216      	movs	r2, #22
   18a3c:	494e      	ldr	r1, [pc, #312]	; (18b78 <cal_disp_message+0x1f4>)
   18a3e:	4e42      	ldr	r6, [pc, #264]	; (18b48 <cal_disp_message+0x1c4>)
   18a40:	0020      	movs	r0, r4
   18a42:	47b0      	blx	r6
			glcd_tiny_draw_string(0,0,display_str);
   18a44:	0022      	movs	r2, r4
   18a46:	2100      	movs	r1, #0
   18a48:	2000      	movs	r0, #0
   18a4a:	4d41      	ldr	r5, [pc, #260]	; (18b50 <cal_disp_message+0x1cc>)
   18a4c:	47a8      	blx	r5
			sprintf(display_str, "Place a target at");
   18a4e:	2212      	movs	r2, #18
   18a50:	494a      	ldr	r1, [pc, #296]	; (18b7c <cal_disp_message+0x1f8>)
   18a52:	0020      	movs	r0, r4
   18a54:	47b0      	blx	r6
			glcd_tiny_draw_string(0,1,display_str);
   18a56:	0022      	movs	r2, r4
   18a58:	2101      	movs	r1, #1
   18a5a:	2000      	movs	r0, #0
   18a5c:	47a8      	blx	r5
			if (options.current_unit_dist == feet){
   18a5e:	4b48      	ldr	r3, [pc, #288]	; (18b80 <cal_disp_message+0x1fc>)
   18a60:	791b      	ldrb	r3, [r3, #4]
   18a62:	2b00      	cmp	r3, #0
   18a64:	d061      	beq.n	18b2a <cal_disp_message+0x1a6>
				sprintf(display_str, "  %.1f meters.", DIST_CAL_SETPOINT_MT);
   18a66:	2201      	movs	r2, #1
   18a68:	4946      	ldr	r1, [pc, #280]	; (18b84 <cal_disp_message+0x200>)
   18a6a:	0020      	movs	r0, r4
   18a6c:	4b46      	ldr	r3, [pc, #280]	; (18b88 <cal_disp_message+0x204>)
   18a6e:	4798      	blx	r3
			glcd_tiny_draw_string(0,2,display_str);
   18a70:	0022      	movs	r2, r4
   18a72:	2102      	movs	r1, #2
   18a74:	2000      	movs	r0, #0
   18a76:	47a8      	blx	r5
			sprintf(display_str, "Take min. 4 shots in");
   18a78:	2215      	movs	r2, #21
   18a7a:	4944      	ldr	r1, [pc, #272]	; (18b8c <cal_disp_message+0x208>)
   18a7c:	0020      	movs	r0, r4
   18a7e:	47b0      	blx	r6
			glcd_tiny_draw_string(0,3,display_str);
   18a80:	0022      	movs	r2, r4
   18a82:	2103      	movs	r1, #3
   18a84:	2000      	movs	r0, #0
   18a86:	47a8      	blx	r5
			sprintf(display_str, "Multiple Orientations");
   18a88:	2216      	movs	r2, #22
   18a8a:	4941      	ldr	r1, [pc, #260]	; (18b90 <cal_disp_message+0x20c>)
   18a8c:	0020      	movs	r0, r4
   18a8e:	47b0      	blx	r6
			glcd_tiny_draw_string(0,4,display_str);
   18a90:	0022      	movs	r2, r4
   18a92:	2104      	movs	r1, #4
   18a94:	2000      	movs	r0, #0
   18a96:	47a8      	blx	r5
			sprintf(display_str, "Only last 4 used.");
   18a98:	2212      	movs	r2, #18
   18a9a:	493e      	ldr	r1, [pc, #248]	; (18b94 <cal_disp_message+0x210>)
   18a9c:	e7b0      	b.n	18a00 <cal_disp_message+0x7c>
	switch(current_state){
   18a9e:	2b0b      	cmp	r3, #11
   18aa0:	d113      	bne.n	18aca <cal_disp_message+0x146>
			sprintf(display_str, "Azm/Inc Calibration:");
   18aa2:	4c28      	ldr	r4, [pc, #160]	; (18b44 <cal_disp_message+0x1c0>)
   18aa4:	4e28      	ldr	r6, [pc, #160]	; (18b48 <cal_disp_message+0x1c4>)
   18aa6:	2215      	movs	r2, #21
   18aa8:	493b      	ldr	r1, [pc, #236]	; (18b98 <cal_disp_message+0x214>)
   18aaa:	0020      	movs	r0, r4
   18aac:	47b0      	blx	r6
			glcd_tiny_draw_string(0,0,display_str);
   18aae:	0022      	movs	r2, r4
   18ab0:	2100      	movs	r1, #0
   18ab2:	2000      	movs	r0, #0
   18ab4:	4d26      	ldr	r5, [pc, #152]	; (18b50 <cal_disp_message+0x1cc>)
   18ab6:	47a8      	blx	r5
			sprintf(display_str, "Take Uni-Directional Groups of 4 Shots    while rotating       instrument. Only last4 shots of each groupwill be saved");
   18ab8:	2277      	movs	r2, #119	; 0x77
   18aba:	4938      	ldr	r1, [pc, #224]	; (18b9c <cal_disp_message+0x218>)
   18abc:	0020      	movs	r0, r4
   18abe:	47b0      	blx	r6
			glcd_tiny_draw_string(0,1,display_str);
   18ac0:	0022      	movs	r2, r4
   18ac2:	2101      	movs	r1, #1
   18ac4:	2000      	movs	r0, #0
   18ac6:	47a8      	blx	r5
			break;
   18ac8:	e7a0      	b.n	18a0c <cal_disp_message+0x88>
			sprintf(display_str, "Hello World");
   18aca:	4c1e      	ldr	r4, [pc, #120]	; (18b44 <cal_disp_message+0x1c0>)
   18acc:	220c      	movs	r2, #12
   18ace:	4934      	ldr	r1, [pc, #208]	; (18ba0 <cal_disp_message+0x21c>)
   18ad0:	0020      	movs	r0, r4
   18ad2:	4e1d      	ldr	r6, [pc, #116]	; (18b48 <cal_disp_message+0x1c4>)
   18ad4:	47b0      	blx	r6
			glcd_tiny_draw_string(0,2,display_str);
   18ad6:	0022      	movs	r2, r4
   18ad8:	2102      	movs	r1, #2
   18ada:	2000      	movs	r0, #0
   18adc:	4d1c      	ldr	r5, [pc, #112]	; (18b50 <cal_disp_message+0x1cc>)
   18ade:	47a8      	blx	r5
			break;
   18ae0:	e794      	b.n	18a0c <cal_disp_message+0x88>
			sprintf(display_str, "Azm Quick Calibration");
   18ae2:	4c18      	ldr	r4, [pc, #96]	; (18b44 <cal_disp_message+0x1c0>)
   18ae4:	4e18      	ldr	r6, [pc, #96]	; (18b48 <cal_disp_message+0x1c4>)
   18ae6:	2216      	movs	r2, #22
   18ae8:	492e      	ldr	r1, [pc, #184]	; (18ba4 <cal_disp_message+0x220>)
   18aea:	0020      	movs	r0, r4
   18aec:	47b0      	blx	r6
			glcd_tiny_draw_string(0,0,display_str);
   18aee:	4d18      	ldr	r5, [pc, #96]	; (18b50 <cal_disp_message+0x1cc>)
   18af0:	0022      	movs	r2, r4
   18af2:	2100      	movs	r1, #0
   18af4:	2000      	movs	r0, #0
   18af6:	47a8      	blx	r5
			sprintf(display_str, "Rotate device slowly ");
   18af8:	2216      	movs	r2, #22
   18afa:	492b      	ldr	r1, [pc, #172]	; (18ba8 <cal_disp_message+0x224>)
   18afc:	0020      	movs	r0, r4
   18afe:	47b0      	blx	r6
			glcd_tiny_draw_string(0,2,display_str);
   18b00:	0022      	movs	r2, r4
   18b02:	2102      	movs	r1, #2
   18b04:	2000      	movs	r0, #0
   18b06:	47a8      	blx	r5
			sprintf(display_str, "to cover all points  ");
   18b08:	2216      	movs	r2, #22
   18b0a:	4928      	ldr	r1, [pc, #160]	; (18bac <cal_disp_message+0x228>)
   18b0c:	0020      	movs	r0, r4
   18b0e:	47b0      	blx	r6
			glcd_tiny_draw_string(0,3,display_str);
   18b10:	0022      	movs	r2, r4
   18b12:	2103      	movs	r1, #3
   18b14:	2000      	movs	r0, #0
   18b16:	47a8      	blx	r5
			sprintf(display_str, "in grid.  ");
   18b18:	220b      	movs	r2, #11
   18b1a:	4925      	ldr	r1, [pc, #148]	; (18bb0 <cal_disp_message+0x22c>)
   18b1c:	0020      	movs	r0, r4
   18b1e:	47b0      	blx	r6
			glcd_tiny_draw_string(0,4,display_str);
   18b20:	0022      	movs	r2, r4
   18b22:	2104      	movs	r1, #4
   18b24:	2000      	movs	r0, #0
   18b26:	47a8      	blx	r5
			break;
   18b28:	e770      	b.n	18a0c <cal_disp_message+0x88>
				sprintf(display_str, "  %.1f feet.", DIST_CAL_SETPOINT_FT);
   18b2a:	2203      	movs	r2, #3
   18b2c:	4921      	ldr	r1, [pc, #132]	; (18bb4 <cal_disp_message+0x230>)
   18b2e:	0020      	movs	r0, r4
   18b30:	4b15      	ldr	r3, [pc, #84]	; (18b88 <cal_disp_message+0x204>)
   18b32:	4798      	blx	r3
   18b34:	e79c      	b.n	18a70 <cal_disp_message+0xec>
   18b36:	46c0      	nop			; (mov r8, r8)
   18b38:	0000d87d 	.word	0x0000d87d
   18b3c:	00013805 	.word	0x00013805
   18b40:	2000278c 	.word	0x2000278c
   18b44:	200033a8 	.word	0x200033a8
   18b48:	0001fd79 	.word	0x0001fd79
   18b4c:	00025f48 	.word	0x00025f48
   18b50:	000150a1 	.word	0x000150a1
   18b54:	00025f54 	.word	0x00025f54
   18b58:	00025f68 	.word	0x00025f68
   18b5c:	00025f7c 	.word	0x00025f7c
   18b60:	00025f90 	.word	0x00025f90
   18b64:	00025fa8 	.word	0x00025fa8
   18b68:	00024d64 	.word	0x00024d64
   18b6c:	0001493d 	.word	0x0001493d
   18b70:	2000403c 	.word	0x2000403c
   18b74:	0000d855 	.word	0x0000d855
   18b78:	00025eb8 	.word	0x00025eb8
   18b7c:	00025ed0 	.word	0x00025ed0
   18b80:	2000332c 	.word	0x2000332c
   18b84:	00025ef4 	.word	0x00025ef4
   18b88:	0001fe91 	.word	0x0001fe91
   18b8c:	00025f04 	.word	0x00025f04
   18b90:	00025f1c 	.word	0x00025f1c
   18b94:	00025f34 	.word	0x00025f34
   18b98:	00025e28 	.word	0x00025e28
   18b9c:	00025e40 	.word	0x00025e40
   18ba0:	0002600c 	.word	0x0002600c
   18ba4:	00025fb8 	.word	0x00025fb8
   18ba8:	00025fd0 	.word	0x00025fd0
   18bac:	00025fe8 	.word	0x00025fe8
   18bb0:	00026000 	.word	0x00026000
   18bb4:	00025ee4 	.word	0x00025ee4

00018bb8 <fn_azm_quick_calibration>:
void fn_azm_quick_calibration(void){
   18bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   18bba:	46de      	mov	lr, fp
   18bbc:	4657      	mov	r7, sl
   18bbe:	464e      	mov	r6, r9
   18bc0:	4645      	mov	r5, r8
   18bc2:	b5e0      	push	{r5, r6, r7, lr}
	uint8_t segBand[] = {3, 9, 9, 18, 18, 18, 9, 9, 3};// 96 total units
   18bc4:	4bae      	ldr	r3, [pc, #696]	; (18e80 <fn_azm_quick_calibration+0x2c8>)
void fn_azm_quick_calibration(void){
   18bc6:	b0f5      	sub	sp, #468	; 0x1d4
	uint8_t segBand[] = {3, 9, 9, 18, 18, 18, 9, 9, 3};// 96 total units
   18bc8:	3330      	adds	r3, #48	; 0x30
   18bca:	aa0c      	add	r2, sp, #48	; 0x30
   18bcc:	cb03      	ldmia	r3!, {r0, r1}
   18bce:	c203      	stmia	r2!, {r0, r1}
   18bd0:	781b      	ldrb	r3, [r3, #0]
   18bd2:	7013      	strb	r3, [r2, #0]
	if (state_change){
   18bd4:	4bab      	ldr	r3, [pc, #684]	; (18e84 <fn_azm_quick_calibration+0x2cc>)
   18bd6:	781b      	ldrb	r3, [r3, #0]
   18bd8:	2b00      	cmp	r3, #0
   18bda:	d000      	beq.n	18bde <fn_azm_quick_calibration+0x26>
   18bdc:	e142      	b.n	18e64 <fn_azm_quick_calibration+0x2ac>
	measCounterCurrent = 0;
   18bde:	2300      	movs	r3, #0
   18be0:	4aa9      	ldr	r2, [pc, #676]	; (18e88 <fn_azm_quick_calibration+0x2d0>)
   18be2:	6013      	str	r3, [r2, #0]
					if((xPos>=xSeg1)&(xPos<xSeg2)&(yPos>=ySeg1) &(yPos<ySeg2)){
   18be4:	4ba9      	ldr	r3, [pc, #676]	; (18e8c <fn_azm_quick_calibration+0x2d4>)
   18be6:	469a      	mov	sl, r3
	while(current_input==input_none){
   18be8:	4ba9      	ldr	r3, [pc, #676]	; (18e90 <fn_azm_quick_calibration+0x2d8>)
   18bea:	681b      	ldr	r3, [r3, #0]
   18bec:	2b00      	cmp	r3, #0
   18bee:	d000      	beq.n	18bf2 <fn_azm_quick_calibration+0x3a>
   18bf0:	e111      	b.n	18e16 <fn_azm_quick_calibration+0x25e>
		quick_measurement(&tempM);	
   18bf2:	a846      	add	r0, sp, #280	; 0x118
   18bf4:	4ba7      	ldr	r3, [pc, #668]	; (18e94 <fn_azm_quick_calibration+0x2dc>)
   18bf6:	4798      	blx	r3
		measCounterCurrent++;//  Debug; checking measurement rate
   18bf8:	4ba3      	ldr	r3, [pc, #652]	; (18e88 <fn_azm_quick_calibration+0x2d0>)
   18bfa:	4aa3      	ldr	r2, [pc, #652]	; (18e88 <fn_azm_quick_calibration+0x2d0>)
   18bfc:	681b      	ldr	r3, [r3, #0]
		tempM.roll = tempM.roll+180;
   18bfe:	49a6      	ldr	r1, [pc, #664]	; (18e98 <fn_azm_quick_calibration+0x2e0>)
		measCounterCurrent++;//  Debug; checking measurement rate
   18c00:	9302      	str	r3, [sp, #8]
   18c02:	3301      	adds	r3, #1
   18c04:	6013      	str	r3, [r2, #0]
		tempM.roll = tempM.roll+180;
   18c06:	4ca5      	ldr	r4, [pc, #660]	; (18e9c <fn_azm_quick_calibration+0x2e4>)
   18c08:	984b      	ldr	r0, [sp, #300]	; 0x12c
   18c0a:	47a0      	blx	r4
		if (tempM.roll>360){tempM.roll = tempM.roll-360;}
   18c0c:	49a4      	ldr	r1, [pc, #656]	; (18ea0 <fn_azm_quick_calibration+0x2e8>)
   18c0e:	4ba5      	ldr	r3, [pc, #660]	; (18ea4 <fn_azm_quick_calibration+0x2ec>)
		tempM.roll = tempM.roll+180;
   18c10:	1c05      	adds	r5, r0, #0
		if (tempM.roll>360){tempM.roll = tempM.roll-360;}
   18c12:	4798      	blx	r3
   18c14:	2800      	cmp	r0, #0
   18c16:	d004      	beq.n	18c22 <fn_azm_quick_calibration+0x6a>
   18c18:	1c28      	adds	r0, r5, #0
   18c1a:	49a1      	ldr	r1, [pc, #644]	; (18ea0 <fn_azm_quick_calibration+0x2e8>)
   18c1c:	4ba2      	ldr	r3, [pc, #648]	; (18ea8 <fn_azm_quick_calibration+0x2f0>)
   18c1e:	4798      	blx	r3
   18c20:	1c05      	adds	r5, r0, #0
		yPos = yMin+((tempM.roll)/360)*(yHeight); 
   18c22:	4ea2      	ldr	r6, [pc, #648]	; (18eac <fn_azm_quick_calibration+0x2f4>)
		if (tempM.roll>360){tempM.roll = tempM.roll-360;}
   18c24:	954b      	str	r5, [sp, #300]	; 0x12c
		yPos = yMin+((tempM.roll)/360)*(yHeight); 
   18c26:	499e      	ldr	r1, [pc, #632]	; (18ea0 <fn_azm_quick_calibration+0x2e8>)
   18c28:	1c28      	adds	r0, r5, #0
   18c2a:	47b0      	blx	r6
   18c2c:	4da0      	ldr	r5, [pc, #640]	; (18eb0 <fn_azm_quick_calibration+0x2f8>)
   18c2e:	49a1      	ldr	r1, [pc, #644]	; (18eb4 <fn_azm_quick_calibration+0x2fc>)
   18c30:	47a8      	blx	r5
   18c32:	49a1      	ldr	r1, [pc, #644]	; (18eb8 <fn_azm_quick_calibration+0x300>)
   18c34:	47a0      	blx	r4
		calc_theta_XY( tempM.m1Raw , &temp, &angX);
   18c36:	aa0a      	add	r2, sp, #40	; 0x28
   18c38:	4ba0      	ldr	r3, [pc, #640]	; (18ebc <fn_azm_quick_calibration+0x304>)
		yPos = yMin+((tempM.roll)/360)*(yHeight); 
   18c3a:	9004      	str	r0, [sp, #16]
		calc_theta_XY( tempM.m1Raw , &temp, &angX);
   18c3c:	a90b      	add	r1, sp, #44	; 0x2c
   18c3e:	a855      	add	r0, sp, #340	; 0x154
   18c40:	4798      	blx	r3
		xPos = xMin+((angX+90)/180)*(nBands*bandWidth);
   18c42:	499f      	ldr	r1, [pc, #636]	; (18ec0 <fn_azm_quick_calibration+0x308>)
   18c44:	980a      	ldr	r0, [sp, #40]	; 0x28
   18c46:	47a0      	blx	r4
   18c48:	4993      	ldr	r1, [pc, #588]	; (18e98 <fn_azm_quick_calibration+0x2e0>)
   18c4a:	47b0      	blx	r6
   18c4c:	4999      	ldr	r1, [pc, #612]	; (18eb4 <fn_azm_quick_calibration+0x2fc>)
   18c4e:	47a8      	blx	r5
   18c50:	4999      	ldr	r1, [pc, #612]	; (18eb8 <fn_azm_quick_calibration+0x300>)
   18c52:	47a0      	blx	r4
		glcd_clear_buffer();
   18c54:	4b9b      	ldr	r3, [pc, #620]	; (18ec4 <fn_azm_quick_calibration+0x30c>)
		xPos = xMin+((angX+90)/180)*(nBands*bandWidth);
   18c56:	9002      	str	r0, [sp, #8]
		glcd_clear_buffer();
   18c58:	4798      	blx	r3
		nPoints = 0;
   18c5a:	4b9b      	ldr	r3, [pc, #620]	; (18ec8 <fn_azm_quick_calibration+0x310>)
   18c5c:	469b      	mov	fp, r3
   18c5e:	2300      	movs	r3, #0
   18c60:	465a      	mov	r2, fp
   18c62:	6013      	str	r3, [r2, #0]
   18c64:	ab0c      	add	r3, sp, #48	; 0x30
   18c66:	9309      	str	r3, [sp, #36]	; 0x24
   18c68:	2305      	movs	r3, #5
   18c6a:	9306      	str	r3, [sp, #24]
		trackerInd = 0;
   18c6c:	2300      	movs	r3, #0
						backlightOff();
   18c6e:	001e      	movs	r6, r3
			nSeg = segBand[band];
   18c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
			segHeight = yHeight/nSeg;
   18c72:	2036      	movs	r0, #54	; 0x36
			nSeg = segBand[band];
   18c74:	781c      	ldrb	r4, [r3, #0]
			segHeight = yHeight/nSeg;
   18c76:	4b95      	ldr	r3, [pc, #596]	; (18ecc <fn_azm_quick_calibration+0x314>)
   18c78:	0021      	movs	r1, r4
   18c7a:	4798      	blx	r3
   18c7c:	b2c3      	uxtb	r3, r0
   18c7e:	4699      	mov	r9, r3
			xSeg1 = xMin+bandWidth*band;
   18c80:	466b      	mov	r3, sp
   18c82:	7e1b      	ldrb	r3, [r3, #24]
   18c84:	9308      	str	r3, [sp, #32]
			for (seg=0;seg<nSeg;seg++){
   18c86:	2c00      	cmp	r4, #0
   18c88:	d100      	bne.n	18c8c <fn_azm_quick_calibration+0xd4>
   18c8a:	e0df      	b.n	18e4c <fn_azm_quick_calibration+0x294>
   18c8c:	464b      	mov	r3, r9
   18c8e:	19a4      	adds	r4, r4, r6
   18c90:	1d5f      	adds	r7, r3, #5
   18c92:	b2e3      	uxtb	r3, r4
   18c94:	9305      	str	r3, [sp, #20]
   18c96:	ab2d      	add	r3, sp, #180	; 0xb4
   18c98:	9303      	str	r3, [sp, #12]
   18c9a:	9b06      	ldr	r3, [sp, #24]
   18c9c:	b2ff      	uxtb	r7, r7
   18c9e:	3306      	adds	r3, #6
   18ca0:	9307      	str	r3, [sp, #28]
				ySeg1 = yMin+segHeight*seg;
   18ca2:	464b      	mov	r3, r9
   18ca4:	1afd      	subs	r5, r7, r3
				if(tracker[trackerInd]){
   18ca6:	9b03      	ldr	r3, [sp, #12]
				ySeg1 = yMin+segHeight*seg;
   18ca8:	b2ed      	uxtb	r5, r5
				if(tracker[trackerInd]){
   18caa:	5d9b      	ldrb	r3, [r3, r6]
   18cac:	2b00      	cmp	r3, #0
   18cae:	d000      	beq.n	18cb2 <fn_azm_quick_calibration+0xfa>
   18cb0:	e0be      	b.n	18e30 <fn_azm_quick_calibration+0x278>
					if((xPos>=xSeg1)&(xPos<xSeg2)&(yPos>=ySeg1) &(yPos<ySeg2)){
   18cb2:	9807      	ldr	r0, [sp, #28]
   18cb4:	47d0      	blx	sl
   18cb6:	2301      	movs	r3, #1
   18cb8:	1c01      	adds	r1, r0, #0
   18cba:	4698      	mov	r8, r3
   18cbc:	9802      	ldr	r0, [sp, #8]
   18cbe:	4b84      	ldr	r3, [pc, #528]	; (18ed0 <fn_azm_quick_calibration+0x318>)
   18cc0:	4798      	blx	r3
   18cc2:	2800      	cmp	r0, #0
   18cc4:	d101      	bne.n	18cca <fn_azm_quick_calibration+0x112>
   18cc6:	2300      	movs	r3, #0
   18cc8:	4698      	mov	r8, r3
   18cca:	9806      	ldr	r0, [sp, #24]
   18ccc:	47d0      	blx	sl
   18cce:	4b81      	ldr	r3, [pc, #516]	; (18ed4 <fn_azm_quick_calibration+0x31c>)
   18cd0:	1c01      	adds	r1, r0, #0
   18cd2:	9802      	ldr	r0, [sp, #8]
   18cd4:	2401      	movs	r4, #1
   18cd6:	4798      	blx	r3
   18cd8:	2800      	cmp	r0, #0
   18cda:	d100      	bne.n	18cde <fn_azm_quick_calibration+0x126>
   18cdc:	2400      	movs	r4, #0
   18cde:	4643      	mov	r3, r8
   18ce0:	0028      	movs	r0, r5
   18ce2:	401c      	ands	r4, r3
   18ce4:	47d0      	blx	sl
   18ce6:	4b7b      	ldr	r3, [pc, #492]	; (18ed4 <fn_azm_quick_calibration+0x31c>)
   18ce8:	1c01      	adds	r1, r0, #0
   18cea:	9804      	ldr	r0, [sp, #16]
   18cec:	2501      	movs	r5, #1
   18cee:	4798      	blx	r3
   18cf0:	2800      	cmp	r0, #0
   18cf2:	d100      	bne.n	18cf6 <fn_azm_quick_calibration+0x13e>
   18cf4:	2500      	movs	r5, #0
   18cf6:	402c      	ands	r4, r5
   18cf8:	07e3      	lsls	r3, r4, #31
   18cfa:	d520      	bpl.n	18d3e <fn_azm_quick_calibration+0x186>
   18cfc:	0038      	movs	r0, r7
   18cfe:	47d0      	blx	sl
   18d00:	4b73      	ldr	r3, [pc, #460]	; (18ed0 <fn_azm_quick_calibration+0x318>)
   18d02:	1c01      	adds	r1, r0, #0
   18d04:	9804      	ldr	r0, [sp, #16]
   18d06:	4798      	blx	r3
   18d08:	2800      	cmp	r0, #0
   18d0a:	d018      	beq.n	18d3e <fn_azm_quick_calibration+0x186>
						backlightOff();
   18d0c:	2400      	movs	r4, #0
   18d0e:	4b72      	ldr	r3, [pc, #456]	; (18ed8 <fn_azm_quick_calibration+0x320>)
   18d10:	4798      	blx	r3
   18d12:	4d72      	ldr	r5, [pc, #456]	; (18edc <fn_azm_quick_calibration+0x324>)
							read_mag_double(m1Buf[k], m2Buf[k]);
   18d14:	ab1e      	add	r3, sp, #120	; 0x78
   18d16:	1919      	adds	r1, r3, r4
   18d18:	ab0f      	add	r3, sp, #60	; 0x3c
   18d1a:	1918      	adds	r0, r3, r4
   18d1c:	340c      	adds	r4, #12
   18d1e:	47a8      	blx	r5
						for(k=0;k<NBUFFQAZM;k++){
   18d20:	2c3c      	cmp	r4, #60	; 0x3c
   18d22:	d1f7      	bne.n	18d14 <fn_azm_quick_calibration+0x15c>
						backlightOn(&options.backlight_setting);
   18d24:	486e      	ldr	r0, [pc, #440]	; (18ee0 <fn_azm_quick_calibration+0x328>)
   18d26:	4b6f      	ldr	r3, [pc, #444]	; (18ee4 <fn_azm_quick_calibration+0x32c>)
   18d28:	4798      	blx	r3
						if (cal_azm_quick_add_point(m1Buf, m2Buf, trackerInd)){
   18d2a:	0032      	movs	r2, r6
   18d2c:	a91e      	add	r1, sp, #120	; 0x78
   18d2e:	a80f      	add	r0, sp, #60	; 0x3c
   18d30:	4b6d      	ldr	r3, [pc, #436]	; (18ee8 <fn_azm_quick_calibration+0x330>)
   18d32:	4798      	blx	r3
   18d34:	2800      	cmp	r0, #0
   18d36:	d002      	beq.n	18d3e <fn_azm_quick_calibration+0x186>
							tracker[trackerInd] = true;
   18d38:	2301      	movs	r3, #1
   18d3a:	9a03      	ldr	r2, [sp, #12]
   18d3c:	5593      	strb	r3, [r2, r6]
				trackerInd++;
   18d3e:	3601      	adds	r6, #1
			for (seg=0;seg<nSeg;seg++){
   18d40:	9b05      	ldr	r3, [sp, #20]
   18d42:	444f      	add	r7, r9
				trackerInd++;
   18d44:	b2f6      	uxtb	r6, r6
   18d46:	b2ff      	uxtb	r7, r7
			for (seg=0;seg<nSeg;seg++){
   18d48:	429e      	cmp	r6, r3
   18d4a:	d1aa      	bne.n	18ca2 <fn_azm_quick_calibration+0xea>
   18d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18d4e:	3301      	adds	r3, #1
   18d50:	9309      	str	r3, [sp, #36]	; 0x24
   18d52:	9b07      	ldr	r3, [sp, #28]
   18d54:	9306      	str	r3, [sp, #24]
		for (band=0;band<nBands;band++){
   18d56:	2b3b      	cmp	r3, #59	; 0x3b
   18d58:	d18a      	bne.n	18c70 <fn_azm_quick_calibration+0xb8>
   18d5a:	46b1      	mov	r9, r6
 		glcd_draw_line(0, yPos,64, yPos, BLACK);
   18d5c:	9804      	ldr	r0, [sp, #16]
   18d5e:	4e63      	ldr	r6, [pc, #396]	; (18eec <fn_azm_quick_calibration+0x334>)
   18d60:	47b0      	blx	r6
   18d62:	2401      	movs	r4, #1
   18d64:	b2c1      	uxtb	r1, r0
   18d66:	000b      	movs	r3, r1
   18d68:	2240      	movs	r2, #64	; 0x40
   18d6a:	4d61      	ldr	r5, [pc, #388]	; (18ef0 <fn_azm_quick_calibration+0x338>)
   18d6c:	9400      	str	r4, [sp, #0]
   18d6e:	2000      	movs	r0, #0
   18d70:	47a8      	blx	r5
		glcd_draw_line(xPos, 0,xPos, 64, BLACK);
   18d72:	9802      	ldr	r0, [sp, #8]
   18d74:	47b0      	blx	r6
   18d76:	b2c0      	uxtb	r0, r0
   18d78:	0002      	movs	r2, r0
   18d7a:	9400      	str	r4, [sp, #0]
   18d7c:	2340      	movs	r3, #64	; 0x40
   18d7e:	2100      	movs	r1, #0
   18d80:	47a8      	blx	r5
		glcd_draw_rect(xMin-1, yMin-1, nBands*bandWidth+1, yHeight+1,BLACK);
   18d82:	2337      	movs	r3, #55	; 0x37
   18d84:	9400      	str	r4, [sp, #0]
   18d86:	2237      	movs	r2, #55	; 0x37
   18d88:	2104      	movs	r1, #4
   18d8a:	2004      	movs	r0, #4
   18d8c:	4c59      	ldr	r4, [pc, #356]	; (18ef4 <fn_azm_quick_calibration+0x33c>)
   18d8e:	47a0      	blx	r4
		sprintf(display_str, "AZM Cal:");
   18d90:	4c59      	ldr	r4, [pc, #356]	; (18ef8 <fn_azm_quick_calibration+0x340>)
   18d92:	4e5a      	ldr	r6, [pc, #360]	; (18efc <fn_azm_quick_calibration+0x344>)
   18d94:	2209      	movs	r2, #9
   18d96:	495a      	ldr	r1, [pc, #360]	; (18f00 <fn_azm_quick_calibration+0x348>)
   18d98:	0020      	movs	r0, r4
   18d9a:	47b0      	blx	r6
		glcd_tiny_draw_string(65,0,display_str);	
   18d9c:	4d59      	ldr	r5, [pc, #356]	; (18f04 <fn_azm_quick_calibration+0x34c>)
   18d9e:	0022      	movs	r2, r4
   18da0:	2100      	movs	r1, #0
   18da2:	2041      	movs	r0, #65	; 0x41
   18da4:	47a8      	blx	r5
		sprintf(display_str, "Abort");
   18da6:	2206      	movs	r2, #6
   18da8:	4957      	ldr	r1, [pc, #348]	; (18f08 <fn_azm_quick_calibration+0x350>)
   18daa:	0020      	movs	r0, r4
   18dac:	47b0      	blx	r6
		glcd_tiny_draw_string(97,7,display_str);
   18dae:	0022      	movs	r2, r4
   18db0:	2107      	movs	r1, #7
   18db2:	2061      	movs	r0, #97	; 0x61
   18db4:	47a8      	blx	r5
		sprintf(display_str, "Rate: %d", measCounterLast);
   18db6:	4b55      	ldr	r3, [pc, #340]	; (18f0c <fn_azm_quick_calibration+0x354>)
   18db8:	4955      	ldr	r1, [pc, #340]	; (18f10 <fn_azm_quick_calibration+0x358>)
   18dba:	681b      	ldr	r3, [r3, #0]
   18dbc:	4f55      	ldr	r7, [pc, #340]	; (18f14 <fn_azm_quick_calibration+0x35c>)
   18dbe:	001a      	movs	r2, r3
   18dc0:	0020      	movs	r0, r4
   18dc2:	9302      	str	r3, [sp, #8]
   18dc4:	47b8      	blx	r7
		glcd_tiny_draw_string(70,1,display_str);
   18dc6:	0022      	movs	r2, r4
   18dc8:	2101      	movs	r1, #1
   18dca:	2046      	movs	r0, #70	; 0x46
   18dcc:	47a8      	blx	r5
		sprintf(display_str, "Status:");
   18dce:	2208      	movs	r2, #8
   18dd0:	4951      	ldr	r1, [pc, #324]	; (18f18 <fn_azm_quick_calibration+0x360>)
   18dd2:	0020      	movs	r0, r4
   18dd4:	47b0      	blx	r6
		glcd_tiny_draw_string(70,2,display_str);
   18dd6:	0022      	movs	r2, r4
   18dd8:	2102      	movs	r1, #2
   18dda:	2046      	movs	r0, #70	; 0x46
   18ddc:	47a8      	blx	r5
		sprintf(display_str, "%d / %d", nPoints, trackerInd);
   18dde:	465a      	mov	r2, fp
   18de0:	464b      	mov	r3, r9
   18de2:	6812      	ldr	r2, [r2, #0]
   18de4:	494d      	ldr	r1, [pc, #308]	; (18f1c <fn_azm_quick_calibration+0x364>)
   18de6:	0020      	movs	r0, r4
   18de8:	47b8      	blx	r7
		glcd_tiny_draw_string(70,3,display_str);
   18dea:	0022      	movs	r2, r4
   18dec:	2103      	movs	r1, #3
   18dee:	2046      	movs	r0, #70	; 0x46
   18df0:	47a8      	blx	r5
		glcd_write();
   18df2:	4b4b      	ldr	r3, [pc, #300]	; (18f20 <fn_azm_quick_calibration+0x368>)
   18df4:	4798      	blx	r3
		if (nPoints>=trackerInd){
   18df6:	465b      	mov	r3, fp
   18df8:	681b      	ldr	r3, [r3, #0]
   18dfa:	4599      	cmp	r9, r3
   18dfc:	d900      	bls.n	18e00 <fn_azm_quick_calibration+0x248>
   18dfe:	e6f3      	b.n	18be8 <fn_azm_quick_calibration+0x30>
			cal_done(azm_quick);
   18e00:	4b48      	ldr	r3, [pc, #288]	; (18f24 <fn_azm_quick_calibration+0x36c>)
   18e02:	2001      	movs	r0, #1
   18e04:	4798      	blx	r3
			current_input = input_state_complete;
   18e06:	2308      	movs	r3, #8
   18e08:	4a21      	ldr	r2, [pc, #132]	; (18e90 <fn_azm_quick_calibration+0x2d8>)
   18e0a:	6013      	str	r3, [r2, #0]
	while(current_input==input_none){
   18e0c:	4b20      	ldr	r3, [pc, #128]	; (18e90 <fn_azm_quick_calibration+0x2d8>)
   18e0e:	681b      	ldr	r3, [r3, #0]
   18e10:	2b00      	cmp	r3, #0
   18e12:	d100      	bne.n	18e16 <fn_azm_quick_calibration+0x25e>
   18e14:	e6ed      	b.n	18bf2 <fn_azm_quick_calibration+0x3a>
	measCounterLast = measCounterCurrent;
   18e16:	4b1c      	ldr	r3, [pc, #112]	; (18e88 <fn_azm_quick_calibration+0x2d0>)
   18e18:	681b      	ldr	r3, [r3, #0]
   18e1a:	9302      	str	r3, [sp, #8]
   18e1c:	9a02      	ldr	r2, [sp, #8]
   18e1e:	4b3b      	ldr	r3, [pc, #236]	; (18f0c <fn_azm_quick_calibration+0x354>)
   18e20:	601a      	str	r2, [r3, #0]
}
   18e22:	b075      	add	sp, #468	; 0x1d4
   18e24:	bc3c      	pop	{r2, r3, r4, r5}
   18e26:	4690      	mov	r8, r2
   18e28:	4699      	mov	r9, r3
   18e2a:	46a2      	mov	sl, r4
   18e2c:	46ab      	mov	fp, r5
   18e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
					nPoints++;
   18e30:	465b      	mov	r3, fp
   18e32:	465a      	mov	r2, fp
   18e34:	681b      	ldr	r3, [r3, #0]
					glcd_fill_rect(xSeg1, ySeg1, bandWidth, segHeight,BLACK);
   18e36:	0029      	movs	r1, r5
					nPoints++;
   18e38:	3301      	adds	r3, #1
   18e3a:	6013      	str	r3, [r2, #0]
					glcd_fill_rect(xSeg1, ySeg1, bandWidth, segHeight,BLACK);
   18e3c:	2301      	movs	r3, #1
   18e3e:	2206      	movs	r2, #6
   18e40:	9300      	str	r3, [sp, #0]
   18e42:	9808      	ldr	r0, [sp, #32]
   18e44:	464b      	mov	r3, r9
   18e46:	4c38      	ldr	r4, [pc, #224]	; (18f28 <fn_azm_quick_calibration+0x370>)
   18e48:	47a0      	blx	r4
   18e4a:	e778      	b.n	18d3e <fn_azm_quick_calibration+0x186>
   18e4c:	9b06      	ldr	r3, [sp, #24]
   18e4e:	3306      	adds	r3, #6
   18e50:	9307      	str	r3, [sp, #28]
   18e52:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18e54:	3301      	adds	r3, #1
   18e56:	9309      	str	r3, [sp, #36]	; 0x24
   18e58:	9b07      	ldr	r3, [sp, #28]
   18e5a:	9306      	str	r3, [sp, #24]
		for (band=0;band<nBands;band++){
   18e5c:	2b3b      	cmp	r3, #59	; 0x3b
   18e5e:	d000      	beq.n	18e62 <fn_azm_quick_calibration+0x2aa>
   18e60:	e706      	b.n	18c70 <fn_azm_quick_calibration+0xb8>
   18e62:	e77a      	b.n	18d5a <fn_azm_quick_calibration+0x1a2>
		cal_disp_message();
   18e64:	4b31      	ldr	r3, [pc, #196]	; (18f2c <fn_azm_quick_calibration+0x374>)
   18e66:	4798      	blx	r3
   18e68:	2264      	movs	r2, #100	; 0x64
   18e6a:	2100      	movs	r1, #0
   18e6c:	4b30      	ldr	r3, [pc, #192]	; (18f30 <fn_azm_quick_calibration+0x378>)
   18e6e:	a82d      	add	r0, sp, #180	; 0xb4
   18e70:	4798      	blx	r3
		cal_init();
   18e72:	4b30      	ldr	r3, [pc, #192]	; (18f34 <fn_azm_quick_calibration+0x37c>)
   18e74:	4798      	blx	r3
		last_input = input_none;
   18e76:	2200      	movs	r2, #0
   18e78:	4b2f      	ldr	r3, [pc, #188]	; (18f38 <fn_azm_quick_calibration+0x380>)
   18e7a:	601a      	str	r2, [r3, #0]
   18e7c:	e6af      	b.n	18bde <fn_azm_quick_calibration+0x26>
   18e7e:	46c0      	nop			; (mov r8, r8)
   18e80:	00025c0c 	.word	0x00025c0c
   18e84:	200001d0 	.word	0x200001d0
   18e88:	20000f1c 	.word	0x20000f1c
   18e8c:	0001def1 	.word	0x0001def1
   18e90:	2000403c 	.word	0x2000403c
   18e94:	0000c995 	.word	0x0000c995
   18e98:	43340000 	.word	0x43340000
   18e9c:	0001d235 	.word	0x0001d235
   18ea0:	43b40000 	.word	0x43b40000
   18ea4:	0001d0d1 	.word	0x0001d0d1
   18ea8:	0001db79 	.word	0x0001db79
   18eac:	0001d559 	.word	0x0001d559
   18eb0:	0001d939 	.word	0x0001d939
   18eb4:	42580000 	.word	0x42580000
   18eb8:	40a00000 	.word	0x40a00000
   18ebc:	0000967d 	.word	0x0000967d
   18ec0:	42b40000 	.word	0x42b40000
   18ec4:	00013805 	.word	0x00013805
   18ec8:	20003340 	.word	0x20003340
   18ecc:	0001ce31 	.word	0x0001ce31
   18ed0:	0001d0a9 	.word	0x0001d0a9
   18ed4:	0001d0e5 	.word	0x0001d0e5
   18ed8:	0000751d 	.word	0x0000751d
   18edc:	0000c7d5 	.word	0x0000c7d5
   18ee0:	2000333c 	.word	0x2000333c
   18ee4:	00007425 	.word	0x00007425
   18ee8:	00010cd9 	.word	0x00010cd9
   18eec:	0001d1c9 	.word	0x0001d1c9
   18ef0:	000138b1 	.word	0x000138b1
   18ef4:	00013b9d 	.word	0x00013b9d
   18ef8:	200033a8 	.word	0x200033a8
   18efc:	0001fd79 	.word	0x0001fd79
   18f00:	00026018 	.word	0x00026018
   18f04:	000150a1 	.word	0x000150a1
   18f08:	00026024 	.word	0x00026024
   18f0c:	20000f20 	.word	0x20000f20
   18f10:	0002602c 	.word	0x0002602c
   18f14:	0001fe91 	.word	0x0001fe91
   18f18:	00026038 	.word	0x00026038
   18f1c:	00026040 	.word	0x00026040
   18f20:	0001493d 	.word	0x0001493d
   18f24:	00010925 	.word	0x00010925
   18f28:	00013a75 	.word	0x00013a75
   18f2c:	00018985 	.word	0x00018985
   18f30:	0001fdfd 	.word	0x0001fdfd
   18f34:	00010895 	.word	0x00010895
   18f38:	200044f0 	.word	0x200044f0

00018f3c <fn_inc_azm_full_calibration>:
void fn_inc_azm_full_calibration(void){
   18f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   18f3e:	46de      	mov	lr, fp
   18f40:	4657      	mov	r7, sl
   18f42:	464e      	mov	r6, r9
   18f44:	4645      	mov	r5, r8
   18f46:	b5e0      	push	{r5, r6, r7, lr}
	if (state_change){
   18f48:	4baf      	ldr	r3, [pc, #700]	; (19208 <fn_inc_azm_full_calibration+0x2cc>)
void fn_inc_azm_full_calibration(void){
   18f4a:	b0b3      	sub	sp, #204	; 0xcc
	if (state_change){
   18f4c:	781b      	ldrb	r3, [r3, #0]
   18f4e:	2b00      	cmp	r3, #0
   18f50:	d000      	beq.n	18f54 <fn_inc_azm_full_calibration+0x18>
   18f52:	e129      	b.n	191a8 <fn_inc_azm_full_calibration+0x26c>
   18f54:	4cad      	ldr	r4, [pc, #692]	; (1920c <fn_inc_azm_full_calibration+0x2d0>)
	switch(last_input){
   18f56:	6823      	ldr	r3, [r4, #0]
   18f58:	2b03      	cmp	r3, #3
   18f5a:	d100      	bne.n	18f5e <fn_inc_azm_full_calibration+0x22>
   18f5c:	e12f      	b.n	191be <fn_inc_azm_full_calibration+0x282>
   18f5e:	2b05      	cmp	r3, #5
   18f60:	d100      	bne.n	18f64 <fn_inc_azm_full_calibration+0x28>
   18f62:	e133      	b.n	191cc <fn_inc_azm_full_calibration+0x290>
   18f64:	2b01      	cmp	r3, #1
   18f66:	d100      	bne.n	18f6a <fn_inc_azm_full_calibration+0x2e>
   18f68:	e0fc      	b.n	19164 <fn_inc_azm_full_calibration+0x228>
   18f6a:	4ba9      	ldr	r3, [pc, #676]	; (19210 <fn_inc_azm_full_calibration+0x2d4>)
   18f6c:	469a      	mov	sl, r3
   18f6e:	4ba9      	ldr	r3, [pc, #676]	; (19214 <fn_inc_azm_full_calibration+0x2d8>)
   18f70:	9302      	str	r3, [sp, #8]
	last_input = input_none;	
   18f72:	2300      	movs	r3, #0
	glcd_draw_rect(boxMinX-1, boxAminY, boxWidth+2, boxHeight, BLACK);
   18f74:	2501      	movs	r5, #1
	last_input = input_none;	
   18f76:	6023      	str	r3, [r4, #0]
	glcd_clear_buffer();
   18f78:	4ba7      	ldr	r3, [pc, #668]	; (19218 <fn_inc_azm_full_calibration+0x2dc>)
   18f7a:	4798      	blx	r3
	sprintf(display_str, "Calibration Mode");
   18f7c:	4ca7      	ldr	r4, [pc, #668]	; (1921c <fn_inc_azm_full_calibration+0x2e0>)
   18f7e:	2211      	movs	r2, #17
   18f80:	49a7      	ldr	r1, [pc, #668]	; (19220 <fn_inc_azm_full_calibration+0x2e4>)
   18f82:	48a8      	ldr	r0, [pc, #672]	; (19224 <fn_inc_azm_full_calibration+0x2e8>)
   18f84:	47a0      	blx	r4
	glcd_tiny_draw_string(0,0,display_str);
   18f86:	4ba8      	ldr	r3, [pc, #672]	; (19228 <fn_inc_azm_full_calibration+0x2ec>)
   18f88:	4aa6      	ldr	r2, [pc, #664]	; (19224 <fn_inc_azm_full_calibration+0x2e8>)
   18f8a:	2100      	movs	r1, #0
   18f8c:	2000      	movs	r0, #0
   18f8e:	4798      	blx	r3
	sprintf(display_str, "Accelerometer");
   18f90:	220e      	movs	r2, #14
   18f92:	49a6      	ldr	r1, [pc, #664]	; (1922c <fn_inc_azm_full_calibration+0x2f0>)
   18f94:	48a3      	ldr	r0, [pc, #652]	; (19224 <fn_inc_azm_full_calibration+0x2e8>)
   18f96:	47a0      	blx	r4
	glcd_tiny_draw_string(0,1,display_str);
   18f98:	4ba3      	ldr	r3, [pc, #652]	; (19228 <fn_inc_azm_full_calibration+0x2ec>)
   18f9a:	4aa2      	ldr	r2, [pc, #648]	; (19224 <fn_inc_azm_full_calibration+0x2e8>)
   18f9c:	2101      	movs	r1, #1
   18f9e:	2000      	movs	r0, #0
   18fa0:	4798      	blx	r3
	sprintf(display_str, "Magnetometer");
   18fa2:	220d      	movs	r2, #13
   18fa4:	49a2      	ldr	r1, [pc, #648]	; (19230 <fn_inc_azm_full_calibration+0x2f4>)
   18fa6:	489f      	ldr	r0, [pc, #636]	; (19224 <fn_inc_azm_full_calibration+0x2e8>)
   18fa8:	47a0      	blx	r4
	glcd_tiny_draw_string(0,4,display_str);
   18faa:	4a9e      	ldr	r2, [pc, #632]	; (19224 <fn_inc_azm_full_calibration+0x2e8>)
   18fac:	2104      	movs	r1, #4
   18fae:	2000      	movs	r0, #0
   18fb0:	4b9d      	ldr	r3, [pc, #628]	; (19228 <fn_inc_azm_full_calibration+0x2ec>)
   18fb2:	4798      	blx	r3
	glcd_draw_rect(boxMinX-1, boxAminY, boxWidth+2, boxHeight, BLACK);
   18fb4:	2308      	movs	r3, #8
   18fb6:	2251      	movs	r2, #81	; 0x51
   18fb8:	2110      	movs	r1, #16
   18fba:	2001      	movs	r0, #1
   18fbc:	4c9d      	ldr	r4, [pc, #628]	; (19234 <fn_inc_azm_full_calibration+0x2f8>)
   18fbe:	9500      	str	r5, [sp, #0]
   18fc0:	47a0      	blx	r4
	glcd_draw_rect(boxMinX-1, boxMminY, boxWidth+2, boxHeight, BLACK);
   18fc2:	2308      	movs	r3, #8
   18fc4:	9500      	str	r5, [sp, #0]
   18fc6:	2251      	movs	r2, #81	; 0x51
   18fc8:	2128      	movs	r1, #40	; 0x28
   18fca:	2001      	movs	r0, #1
   18fcc:	47a0      	blx	r4
	for (i=0;i<nGroups;i++){
   18fce:	4653      	mov	r3, sl
   18fd0:	681b      	ldr	r3, [r3, #0]
   18fd2:	2b00      	cmp	r3, #0
   18fd4:	d031      	beq.n	1903a <fn_inc_azm_full_calibration+0xfe>
   18fd6:	4b98      	ldr	r3, [pc, #608]	; (19238 <fn_inc_azm_full_calibration+0x2fc>)
   18fd8:	4e98      	ldr	r6, [pc, #608]	; (1923c <fn_inc_azm_full_calibration+0x300>)
   18fda:	469b      	mov	fp, r3
   18fdc:	4b98      	ldr	r3, [pc, #608]	; (19240 <fn_inc_azm_full_calibration+0x304>)
   18fde:	2500      	movs	r5, #0
   18fe0:	4699      	mov	r9, r3
		glcd_draw_line(posX_A ,boxAminY, posX_A, boxAminY+boxHeight-1, BLACK);
   18fe2:	2301      	movs	r3, #1
   18fe4:	4698      	mov	r8, r3
   18fe6:	0033      	movs	r3, r6
	for (i=0;i<nGroups;i++){
   18fe8:	2700      	movs	r7, #0
		glcd_draw_line(posX_A ,boxAminY, posX_A, boxAminY+boxHeight-1, BLACK);
   18fea:	465e      	mov	r6, fp
   18fec:	469b      	mov	fp, r3
   18fee:	006c      	lsls	r4, r5, #1
		posX_A = getDispX(a1Raw[ind],boxMinX, boxWidth, false);
   18ff0:	4b94      	ldr	r3, [pc, #592]	; (19244 <fn_inc_azm_full_calibration+0x308>)
   18ff2:	1964      	adds	r4, r4, r5
   18ff4:	00a4      	lsls	r4, r4, #2
   18ff6:	224f      	movs	r2, #79	; 0x4f
   18ff8:	2102      	movs	r1, #2
   18ffa:	1918      	adds	r0, r3, r4
   18ffc:	2300      	movs	r3, #0
   18ffe:	47d8      	blx	fp
		glcd_draw_line(posX_A ,boxAminY, posX_A, boxAminY+boxHeight-1, BLACK);
   19000:	47b0      	blx	r6
   19002:	4643      	mov	r3, r8
   19004:	b2c0      	uxtb	r0, r0
   19006:	0002      	movs	r2, r0
   19008:	9300      	str	r3, [sp, #0]
   1900a:	2110      	movs	r1, #16
   1900c:	2317      	movs	r3, #23
   1900e:	47c8      	blx	r9
		posX_M = getDispX(m1Raw[ind],boxMinX, boxWidth, true);
   19010:	4b8d      	ldr	r3, [pc, #564]	; (19248 <fn_inc_azm_full_calibration+0x30c>)
   19012:	224f      	movs	r2, #79	; 0x4f
   19014:	2102      	movs	r1, #2
   19016:	1918      	adds	r0, r3, r4
   19018:	2301      	movs	r3, #1
   1901a:	47d8      	blx	fp
		glcd_draw_line(posX_M ,boxMminY, posX_M, boxMminY+boxHeight-1, BLACK);
   1901c:	47b0      	blx	r6
   1901e:	4643      	mov	r3, r8
   19020:	b2c0      	uxtb	r0, r0
   19022:	9300      	str	r3, [sp, #0]
   19024:	0002      	movs	r2, r0
   19026:	232f      	movs	r3, #47	; 0x2f
   19028:	2128      	movs	r1, #40	; 0x28
   1902a:	47c8      	blx	r9
	for (i=0;i<nGroups;i++){
   1902c:	4653      	mov	r3, sl
   1902e:	681b      	ldr	r3, [r3, #0]
   19030:	3504      	adds	r5, #4
   19032:	3701      	adds	r7, #1
   19034:	b2ed      	uxtb	r5, r5
   19036:	42bb      	cmp	r3, r7
   19038:	d8d9      	bhi.n	18fee <fn_inc_azm_full_calibration+0xb2>
			glcd_draw_circle(statBarMinX, yCir, circleRadius, BLACK);
   1903a:	4b84      	ldr	r3, [pc, #528]	; (1924c <fn_inc_azm_full_calibration+0x310>)
	for (i=0;i<nGroups;i++){
   1903c:	240f      	movs	r4, #15
   1903e:	2500      	movs	r5, #0
			glcd_draw_circle(statBarMinX, yCir, circleRadius, BLACK);
   19040:	4698      	mov	r8, r3
   19042:	4e83      	ldr	r6, [pc, #524]	; (19250 <fn_inc_azm_full_calibration+0x314>)
			glcd_fill_circle(statBarMinX, yCir, circleRadius, BLACK);
   19044:	4f83      	ldr	r7, [pc, #524]	; (19254 <fn_inc_azm_full_calibration+0x318>)
		if (i<cal_getGroupPoints()){
   19046:	47b0      	blx	r6
			glcd_fill_circle(statBarMinX, yCir, circleRadius, BLACK);
   19048:	2301      	movs	r3, #1
   1904a:	2205      	movs	r2, #5
   1904c:	0021      	movs	r1, r4
		if (i<cal_getGroupPoints()){
   1904e:	42a8      	cmp	r0, r5
   19050:	d800      	bhi.n	19054 <fn_inc_azm_full_calibration+0x118>
   19052:	e099      	b.n	19188 <fn_inc_azm_full_calibration+0x24c>
   19054:	340a      	adds	r4, #10
			glcd_fill_circle(statBarMinX, yCir, circleRadius, BLACK);
   19056:	2058      	movs	r0, #88	; 0x58
   19058:	b2e4      	uxtb	r4, r4
   1905a:	47b8      	blx	r7
	for (i=0;i<GROUP_SIZE;i++){
   1905c:	3501      	adds	r5, #1
   1905e:	2c37      	cmp	r4, #55	; 0x37
   19060:	d1f1      	bne.n	19046 <fn_inc_azm_full_calibration+0x10a>
	sprintf(display_str, "G%d", cal_getCurrentGroup());
   19062:	4d7d      	ldr	r5, [pc, #500]	; (19258 <fn_inc_azm_full_calibration+0x31c>)
   19064:	47a8      	blx	r5
   19066:	497d      	ldr	r1, [pc, #500]	; (1925c <fn_inc_azm_full_calibration+0x320>)
   19068:	0002      	movs	r2, r0
   1906a:	4c7d      	ldr	r4, [pc, #500]	; (19260 <fn_inc_azm_full_calibration+0x324>)
   1906c:	486d      	ldr	r0, [pc, #436]	; (19224 <fn_inc_azm_full_calibration+0x2e8>)
   1906e:	47a0      	blx	r4
	glcd_draw_string_xy(statBarMinX-9,statBarMinY+10*GROUP_SIZE-3,display_str);
   19070:	4a6c      	ldr	r2, [pc, #432]	; (19224 <fn_inc_azm_full_calibration+0x2e8>)
   19072:	2134      	movs	r1, #52	; 0x34
   19074:	204f      	movs	r0, #79	; 0x4f
   19076:	4b7b      	ldr	r3, [pc, #492]	; (19264 <fn_inc_azm_full_calibration+0x328>)
   19078:	4798      	blx	r3
	sprintf(display_str,"%d of min %d", nGroups, MIN_GROUPS);
   1907a:	4652      	mov	r2, sl
   1907c:	2309      	movs	r3, #9
   1907e:	6812      	ldr	r2, [r2, #0]
   19080:	4979      	ldr	r1, [pc, #484]	; (19268 <fn_inc_azm_full_calibration+0x32c>)
   19082:	4868      	ldr	r0, [pc, #416]	; (19224 <fn_inc_azm_full_calibration+0x2e8>)
   19084:	47a0      	blx	r4
	glcd_tiny_draw_string(0,7,display_str);
   19086:	4b68      	ldr	r3, [pc, #416]	; (19228 <fn_inc_azm_full_calibration+0x2ec>)
   19088:	4a66      	ldr	r2, [pc, #408]	; (19224 <fn_inc_azm_full_calibration+0x2e8>)
   1908a:	2107      	movs	r1, #7
   1908c:	2000      	movs	r0, #0
   1908e:	4798      	blx	r3
	if (nGroups >= MIN_GROUPS){
   19090:	4653      	mov	r3, sl
   19092:	681b      	ldr	r3, [r3, #0]
   19094:	2b08      	cmp	r3, #8
   19096:	d800      	bhi.n	1909a <fn_inc_azm_full_calibration+0x15e>
   19098:	e07f      	b.n	1919a <fn_inc_azm_full_calibration+0x25e>
		drawSoftKeys("Done",""," ","Abort");
   1909a:	4b74      	ldr	r3, [pc, #464]	; (1926c <fn_inc_azm_full_calibration+0x330>)
   1909c:	4a74      	ldr	r2, [pc, #464]	; (19270 <fn_inc_azm_full_calibration+0x334>)
   1909e:	4975      	ldr	r1, [pc, #468]	; (19274 <fn_inc_azm_full_calibration+0x338>)
   190a0:	4875      	ldr	r0, [pc, #468]	; (19278 <fn_inc_azm_full_calibration+0x33c>)
   190a2:	4e76      	ldr	r6, [pc, #472]	; (1927c <fn_inc_azm_full_calibration+0x340>)
   190a4:	47b0      	blx	r6
	sprintf(display_str," G%d", cal_getCurrentGroup());
   190a6:	47a8      	blx	r5
   190a8:	4975      	ldr	r1, [pc, #468]	; (19280 <fn_inc_azm_full_calibration+0x344>)
   190aa:	0002      	movs	r2, r0
   190ac:	485d      	ldr	r0, [pc, #372]	; (19224 <fn_inc_azm_full_calibration+0x2e8>)
   190ae:	47a0      	blx	r4
	draw2LineSoftKey("Reset",display_str,3);
   190b0:	2203      	movs	r2, #3
   190b2:	495c      	ldr	r1, [pc, #368]	; (19224 <fn_inc_azm_full_calibration+0x2e8>)
   190b4:	4873      	ldr	r0, [pc, #460]	; (19284 <fn_inc_azm_full_calibration+0x348>)
   190b6:	4b74      	ldr	r3, [pc, #464]	; (19288 <fn_inc_azm_full_calibration+0x34c>)
   190b8:	4798      	blx	r3
	glcd_write();
   190ba:	4b74      	ldr	r3, [pc, #464]	; (1928c <fn_inc_azm_full_calibration+0x350>)
   190bc:	4798      	blx	r3
	while(current_input==input_none){	
   190be:	9a02      	ldr	r2, [sp, #8]
   190c0:	6813      	ldr	r3, [r2, #0]
   190c2:	2b00      	cmp	r3, #0
   190c4:	d147      	bne.n	19156 <fn_inc_azm_full_calibration+0x21a>
   190c6:	ab04      	add	r3, sp, #16
   190c8:	9303      	str	r3, [sp, #12]
   190ca:	4b5b      	ldr	r3, [pc, #364]	; (19238 <fn_inc_azm_full_calibration+0x2fc>)
   190cc:	4e5b      	ldr	r6, [pc, #364]	; (1923c <fn_inc_azm_full_calibration+0x300>)
   190ce:	469b      	mov	fp, r3
   190d0:	4b6f      	ldr	r3, [pc, #444]	; (19290 <fn_inc_azm_full_calibration+0x354>)
   190d2:	9602      	str	r6, [sp, #8]
   190d4:	469a      	mov	sl, r3
   190d6:	4b6f      	ldr	r3, [pc, #444]	; (19294 <fn_inc_azm_full_calibration+0x358>)
   190d8:	465e      	mov	r6, fp
   190da:	4699      	mov	r9, r3
   190dc:	4b6e      	ldr	r3, [pc, #440]	; (19298 <fn_inc_azm_full_calibration+0x35c>)
   190de:	4693      	mov	fp, r2
   190e0:	4698      	mov	r8, r3
   190e2:	4f6e      	ldr	r7, [pc, #440]	; (1929c <fn_inc_azm_full_calibration+0x360>)
		quick_measurement(&temp_meas);
   190e4:	9803      	ldr	r0, [sp, #12]
   190e6:	4b6e      	ldr	r3, [pc, #440]	; (192a0 <fn_inc_azm_full_calibration+0x364>)
   190e8:	4798      	blx	r3
		posX_A = getDispX(temp_meas.a1Raw,boxMinX, boxWidth, false);
   190ea:	2300      	movs	r3, #0
   190ec:	224f      	movs	r2, #79	; 0x4f
   190ee:	2102      	movs	r1, #2
   190f0:	9c02      	ldr	r4, [sp, #8]
   190f2:	a80d      	add	r0, sp, #52	; 0x34
   190f4:	47a0      	blx	r4
		posX_M = getDispX(temp_meas.m1Raw,boxMinX, boxWidth, true);
   190f6:	2301      	movs	r3, #1
		posX_A = getDispX(temp_meas.a1Raw,boxMinX, boxWidth, false);
   190f8:	1c05      	adds	r5, r0, #0
		posX_M = getDispX(temp_meas.m1Raw,boxMinX, boxWidth, true);
   190fa:	224f      	movs	r2, #79	; 0x4f
   190fc:	2102      	movs	r1, #2
   190fe:	9c02      	ldr	r4, [sp, #8]
   19100:	a813      	add	r0, sp, #76	; 0x4c
   19102:	47a0      	blx	r4
		glcd_tiny_draw_char(lastPosA, 3, ' ');
   19104:	4653      	mov	r3, sl
		posX_M = getDispX(temp_meas.m1Raw,boxMinX, boxWidth, true);
   19106:	1c04      	adds	r4, r0, #0
		glcd_tiny_draw_char(lastPosA, 3, ' ');
   19108:	2220      	movs	r2, #32
   1910a:	7818      	ldrb	r0, [r3, #0]
   1910c:	2103      	movs	r1, #3
   1910e:	47b8      	blx	r7
		glcd_tiny_draw_char(lastPosM, 6, ' ');
   19110:	464b      	mov	r3, r9
   19112:	2220      	movs	r2, #32
   19114:	7818      	ldrb	r0, [r3, #0]
   19116:	2106      	movs	r1, #6
   19118:	47b8      	blx	r7
		posX_A = posX_A-2; // To account for width of character
   1911a:	2180      	movs	r1, #128	; 0x80
   1911c:	1c28      	adds	r0, r5, #0
   1911e:	05c9      	lsls	r1, r1, #23
   19120:	47c0      	blx	r8
		glcd_tiny_draw_char(posX_A, 3, '^');
   19122:	47b0      	blx	r6
   19124:	b2c5      	uxtb	r5, r0
   19126:	225e      	movs	r2, #94	; 0x5e
   19128:	2103      	movs	r1, #3
   1912a:	0028      	movs	r0, r5
   1912c:	47b8      	blx	r7
		posX_M = posX_M-2; // To account for width of character
   1912e:	2180      	movs	r1, #128	; 0x80
   19130:	1c20      	adds	r0, r4, #0
   19132:	05c9      	lsls	r1, r1, #23
   19134:	47c0      	blx	r8
		glcd_tiny_draw_char(posX_M, 6, '^');
   19136:	47b0      	blx	r6
   19138:	b2c4      	uxtb	r4, r0
   1913a:	225e      	movs	r2, #94	; 0x5e
   1913c:	2106      	movs	r1, #6
   1913e:	0020      	movs	r0, r4
   19140:	47b8      	blx	r7
		glcd_write();
   19142:	4b52      	ldr	r3, [pc, #328]	; (1928c <fn_inc_azm_full_calibration+0x350>)
   19144:	4798      	blx	r3
		lastPosA = posX_A;
   19146:	4653      	mov	r3, sl
   19148:	701d      	strb	r5, [r3, #0]
		lastPosM = posX_M;
   1914a:	464b      	mov	r3, r9
   1914c:	701c      	strb	r4, [r3, #0]
	while(current_input==input_none){	
   1914e:	465b      	mov	r3, fp
   19150:	681b      	ldr	r3, [r3, #0]
   19152:	2b00      	cmp	r3, #0
   19154:	d0c6      	beq.n	190e4 <fn_inc_azm_full_calibration+0x1a8>
}
   19156:	b033      	add	sp, #204	; 0xcc
   19158:	bc3c      	pop	{r2, r3, r4, r5}
   1915a:	4690      	mov	r8, r2
   1915c:	4699      	mov	r9, r3
   1915e:	46a2      	mov	sl, r4
   19160:	46ab      	mov	fp, r5
   19162:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (nGroups>=MIN_GROUPS){//  Requires min_groups to complete
   19164:	4b2a      	ldr	r3, [pc, #168]	; (19210 <fn_inc_azm_full_calibration+0x2d4>)
   19166:	469a      	mov	sl, r3
   19168:	681b      	ldr	r3, [r3, #0]
   1916a:	2b08      	cmp	r3, #8
   1916c:	d800      	bhi.n	19170 <fn_inc_azm_full_calibration+0x234>
   1916e:	e6fe      	b.n	18f6e <fn_inc_azm_full_calibration+0x32>
				rangefinder_on_off(false);
   19170:	2000      	movs	r0, #0
   19172:	4b4c      	ldr	r3, [pc, #304]	; (192a4 <fn_inc_azm_full_calibration+0x368>)
   19174:	4798      	blx	r3
				cal_done(inc_azm_full);
   19176:	4b4c      	ldr	r3, [pc, #304]	; (192a8 <fn_inc_azm_full_calibration+0x36c>)
   19178:	2000      	movs	r0, #0
   1917a:	4798      	blx	r3
				current_input = input_state_complete;
   1917c:	4b25      	ldr	r3, [pc, #148]	; (19214 <fn_inc_azm_full_calibration+0x2d8>)
   1917e:	001a      	movs	r2, r3
   19180:	9302      	str	r3, [sp, #8]
   19182:	2308      	movs	r3, #8
   19184:	6013      	str	r3, [r2, #0]
   19186:	e6f4      	b.n	18f72 <fn_inc_azm_full_calibration+0x36>
   19188:	340a      	adds	r4, #10
			glcd_draw_circle(statBarMinX, yCir, circleRadius, BLACK);
   1918a:	2058      	movs	r0, #88	; 0x58
   1918c:	b2e4      	uxtb	r4, r4
   1918e:	47c0      	blx	r8
	for (i=0;i<GROUP_SIZE;i++){
   19190:	3501      	adds	r5, #1
   19192:	2c37      	cmp	r4, #55	; 0x37
   19194:	d000      	beq.n	19198 <fn_inc_azm_full_calibration+0x25c>
   19196:	e756      	b.n	19046 <fn_inc_azm_full_calibration+0x10a>
   19198:	e763      	b.n	19062 <fn_inc_azm_full_calibration+0x126>
		drawSoftKeys(" "," ","","Abort");
   1919a:	4835      	ldr	r0, [pc, #212]	; (19270 <fn_inc_azm_full_calibration+0x334>)
   1919c:	4b33      	ldr	r3, [pc, #204]	; (1926c <fn_inc_azm_full_calibration+0x330>)
   1919e:	4a35      	ldr	r2, [pc, #212]	; (19274 <fn_inc_azm_full_calibration+0x338>)
   191a0:	0001      	movs	r1, r0
   191a2:	4e36      	ldr	r6, [pc, #216]	; (1927c <fn_inc_azm_full_calibration+0x340>)
   191a4:	47b0      	blx	r6
   191a6:	e77e      	b.n	190a6 <fn_inc_azm_full_calibration+0x16a>
		cal_disp_message();
   191a8:	4b40      	ldr	r3, [pc, #256]	; (192ac <fn_inc_azm_full_calibration+0x370>)
   191aa:	4798      	blx	r3
		cal_init();
   191ac:	4b40      	ldr	r3, [pc, #256]	; (192b0 <fn_inc_azm_full_calibration+0x374>)
   191ae:	4798      	blx	r3
		last_input = input_none;
   191b0:	2300      	movs	r3, #0
   191b2:	4c16      	ldr	r4, [pc, #88]	; (1920c <fn_inc_azm_full_calibration+0x2d0>)
   191b4:	6023      	str	r3, [r4, #0]
	switch(last_input){
   191b6:	6823      	ldr	r3, [r4, #0]
   191b8:	2b03      	cmp	r3, #3
   191ba:	d000      	beq.n	191be <fn_inc_azm_full_calibration+0x282>
   191bc:	e6cf      	b.n	18f5e <fn_inc_azm_full_calibration+0x22>
			cal_resetGroup();
   191be:	4b3d      	ldr	r3, [pc, #244]	; (192b4 <fn_inc_azm_full_calibration+0x378>)
   191c0:	4798      	blx	r3
   191c2:	4b13      	ldr	r3, [pc, #76]	; (19210 <fn_inc_azm_full_calibration+0x2d4>)
   191c4:	469a      	mov	sl, r3
   191c6:	4b13      	ldr	r3, [pc, #76]	; (19214 <fn_inc_azm_full_calibration+0x2d8>)
   191c8:	9302      	str	r3, [sp, #8]
			break;
   191ca:	e6d2      	b.n	18f72 <fn_inc_azm_full_calibration+0x36>
			if (!isLaserOn()){
   191cc:	4b3a      	ldr	r3, [pc, #232]	; (192b8 <fn_inc_azm_full_calibration+0x37c>)
   191ce:	4798      	blx	r3
   191d0:	2800      	cmp	r0, #0
   191d2:	d10a      	bne.n	191ea <fn_inc_azm_full_calibration+0x2ae>
				rangefinder_on_off(true);
   191d4:	3001      	adds	r0, #1
   191d6:	4b33      	ldr	r3, [pc, #204]	; (192a4 <fn_inc_azm_full_calibration+0x368>)
   191d8:	4798      	blx	r3
				laser_on_off(true);
   191da:	4b38      	ldr	r3, [pc, #224]	; (192bc <fn_inc_azm_full_calibration+0x380>)
   191dc:	2001      	movs	r0, #1
   191de:	4798      	blx	r3
   191e0:	4b0b      	ldr	r3, [pc, #44]	; (19210 <fn_inc_azm_full_calibration+0x2d4>)
   191e2:	469a      	mov	sl, r3
   191e4:	4b0b      	ldr	r3, [pc, #44]	; (19214 <fn_inc_azm_full_calibration+0x2d8>)
   191e6:	9302      	str	r3, [sp, #8]
   191e8:	e6c3      	b.n	18f72 <fn_inc_azm_full_calibration+0x36>
				full_measurement(&temp_meas, options.shot_delay);
   191ea:	4b35      	ldr	r3, [pc, #212]	; (192c0 <fn_inc_azm_full_calibration+0x384>)
   191ec:	7999      	ldrb	r1, [r3, #6]
   191ee:	ab04      	add	r3, sp, #16
   191f0:	001d      	movs	r5, r3
   191f2:	0018      	movs	r0, r3
   191f4:	4b33      	ldr	r3, [pc, #204]	; (192c4 <fn_inc_azm_full_calibration+0x388>)
   191f6:	4798      	blx	r3
				rangefinder_on_off(false);
   191f8:	2000      	movs	r0, #0
   191fa:	4b2a      	ldr	r3, [pc, #168]	; (192a4 <fn_inc_azm_full_calibration+0x368>)
   191fc:	4798      	blx	r3
				cal_add_datapoint(&temp_meas);
   191fe:	0028      	movs	r0, r5
   19200:	4b31      	ldr	r3, [pc, #196]	; (192c8 <fn_inc_azm_full_calibration+0x38c>)
   19202:	4798      	blx	r3
   19204:	e6b1      	b.n	18f6a <fn_inc_azm_full_calibration+0x2e>
   19206:	46c0      	nop			; (mov r8, r8)
   19208:	200001d0 	.word	0x200001d0
   1920c:	200044f0 	.word	0x200044f0
   19210:	20003924 	.word	0x20003924
   19214:	2000403c 	.word	0x2000403c
   19218:	00013805 	.word	0x00013805
   1921c:	0001fd79 	.word	0x0001fd79
   19220:	000263f0 	.word	0x000263f0
   19224:	200033a8 	.word	0x200033a8
   19228:	000150a1 	.word	0x000150a1
   1922c:	00026404 	.word	0x00026404
   19230:	00026414 	.word	0x00026414
   19234:	00013b9d 	.word	0x00013b9d
   19238:	0001d1c9 	.word	0x0001d1c9
   1923c:	00007fc9 	.word	0x00007fc9
   19240:	000138b1 	.word	0x000138b1
   19244:	20004040 	.word	0x20004040
   19248:	20003470 	.word	0x20003470
   1924c:	00013f05 	.word	0x00013f05
   19250:	000106d5 	.word	0x000106d5
   19254:	00014585 	.word	0x00014585
   19258:	000106e1 	.word	0x000106e1
   1925c:	00026424 	.word	0x00026424
   19260:	0001fe91 	.word	0x0001fe91
   19264:	00014fa9 	.word	0x00014fa9
   19268:	00026428 	.word	0x00026428
   1926c:	00026024 	.word	0x00026024
   19270:	00026644 	.word	0x00026644
   19274:	000252c0 	.word	0x000252c0
   19278:	00026438 	.word	0x00026438
   1927c:	000080b9 	.word	0x000080b9
   19280:	00026440 	.word	0x00026440
   19284:	00026448 	.word	0x00026448
   19288:	000081f5 	.word	0x000081f5
   1928c:	0001493d 	.word	0x0001493d
   19290:	20000f12 	.word	0x20000f12
   19294:	20000f13 	.word	0x20000f13
   19298:	0001db79 	.word	0x0001db79
   1929c:	00015001 	.word	0x00015001
   192a0:	0000c995 	.word	0x0000c995
   192a4:	0000c5dd 	.word	0x0000c5dd
   192a8:	00010925 	.word	0x00010925
   192ac:	00018985 	.word	0x00018985
   192b0:	00010895 	.word	0x00010895
   192b4:	000106ed 	.word	0x000106ed
   192b8:	0000c401 	.word	0x0000c401
   192bc:	0000c609 	.word	0x0000c609
   192c0:	2000332c 	.word	0x2000332c
   192c4:	0000d291 	.word	0x0000d291
   192c8:	000113f1 	.word	0x000113f1

000192cc <fn_loop_test>:
void fn_loop_test(void){
   192cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   192ce:	46d6      	mov	lr, sl
   192d0:	464f      	mov	r7, r9
   192d2:	4646      	mov	r6, r8
   192d4:	b5c0      	push	{r6, r7, lr}
	if (state_change){
   192d6:	4b6c      	ldr	r3, [pc, #432]	; (19488 <fn_loop_test+0x1bc>)
void fn_loop_test(void){
   192d8:	b0ae      	sub	sp, #184	; 0xb8
	if (state_change){
   192da:	781b      	ldrb	r3, [r3, #0]
   192dc:	2b00      	cmp	r3, #0
   192de:	d000      	beq.n	192e2 <fn_loop_test+0x16>
   192e0:	e0bc      	b.n	1945c <fn_loop_test+0x190>
   192e2:	4c6a      	ldr	r4, [pc, #424]	; (1948c <fn_loop_test+0x1c0>)
	switch(last_input){
   192e4:	6823      	ldr	r3, [r4, #0]
   192e6:	2b01      	cmp	r3, #1
   192e8:	d100      	bne.n	192ec <fn_loop_test+0x20>
   192ea:	e0b0      	b.n	1944e <fn_loop_test+0x182>
   192ec:	2b05      	cmp	r3, #5
   192ee:	d100      	bne.n	192f2 <fn_loop_test+0x26>
   192f0:	e09a      	b.n	19428 <fn_loop_test+0x15c>
   192f2:	4b67      	ldr	r3, [pc, #412]	; (19490 <fn_loop_test+0x1c4>)
   192f4:	4699      	mov	r9, r3
	last_input = input_none;
   192f6:	2300      	movs	r3, #0
   192f8:	6023      	str	r3, [r4, #0]
	glcd_clear_buffer();
   192fa:	4b66      	ldr	r3, [pc, #408]	; (19494 <fn_loop_test+0x1c8>)
   192fc:	4798      	blx	r3
	sprintf(display_str, "Loop Test:");
   192fe:	4c66      	ldr	r4, [pc, #408]	; (19498 <fn_loop_test+0x1cc>)
   19300:	220b      	movs	r2, #11
   19302:	4966      	ldr	r1, [pc, #408]	; (1949c <fn_loop_test+0x1d0>)
   19304:	0020      	movs	r0, r4
   19306:	4e66      	ldr	r6, [pc, #408]	; (194a0 <fn_loop_test+0x1d4>)
   19308:	47b0      	blx	r6
	glcd_tiny_draw_string(0,0,display_str);
   1930a:	0022      	movs	r2, r4
   1930c:	2100      	movs	r1, #0
   1930e:	2000      	movs	r0, #0
   19310:	4d64      	ldr	r5, [pc, #400]	; (194a4 <fn_loop_test+0x1d8>)
   19312:	47a8      	blx	r5
	sprintf(display_str, "Segments: %d", nPoints);
   19314:	4b64      	ldr	r3, [pc, #400]	; (194a8 <fn_loop_test+0x1dc>)
   19316:	4965      	ldr	r1, [pc, #404]	; (194ac <fn_loop_test+0x1e0>)
   19318:	681a      	ldr	r2, [r3, #0]
   1931a:	4f65      	ldr	r7, [pc, #404]	; (194b0 <fn_loop_test+0x1e4>)
   1931c:	0020      	movs	r0, r4
   1931e:	47b8      	blx	r7
	glcd_tiny_draw_string(0,2,display_str);
   19320:	0022      	movs	r2, r4
   19322:	2102      	movs	r1, #2
   19324:	2000      	movs	r0, #0
   19326:	47a8      	blx	r5
	sprintf(display_str, "Loop length: %.1f", loop_distance);
   19328:	4b62      	ldr	r3, [pc, #392]	; (194b4 <fn_loop_test+0x1e8>)
   1932a:	4698      	mov	r8, r3
   1932c:	4b62      	ldr	r3, [pc, #392]	; (194b8 <fn_loop_test+0x1ec>)
   1932e:	6818      	ldr	r0, [r3, #0]
   19330:	47c0      	blx	r8
   19332:	000b      	movs	r3, r1
   19334:	0002      	movs	r2, r0
   19336:	4961      	ldr	r1, [pc, #388]	; (194bc <fn_loop_test+0x1f0>)
   19338:	0020      	movs	r0, r4
   1933a:	47b8      	blx	r7
	if (options.current_unit_dist == feet){
   1933c:	464b      	mov	r3, r9
   1933e:	791b      	ldrb	r3, [r3, #4]
		strcat(display_str,"ft");
   19340:	0020      	movs	r0, r4
	if (options.current_unit_dist == feet){
   19342:	2b00      	cmp	r3, #0
   19344:	d162      	bne.n	1940c <fn_loop_test+0x140>
		strcat(display_str,"ft");
   19346:	4b5e      	ldr	r3, [pc, #376]	; (194c0 <fn_loop_test+0x1f4>)
   19348:	469a      	mov	sl, r3
   1934a:	4798      	blx	r3
   1934c:	2203      	movs	r2, #3
   1934e:	1820      	adds	r0, r4, r0
   19350:	495c      	ldr	r1, [pc, #368]	; (194c4 <fn_loop_test+0x1f8>)
   19352:	47b0      	blx	r6
	glcd_tiny_draw_string(0,3,display_str);
   19354:	0022      	movs	r2, r4
   19356:	2103      	movs	r1, #3
   19358:	2000      	movs	r0, #0
   1935a:	47a8      	blx	r5
	sprintf(display_str, "Displacement from P1:");
   1935c:	2216      	movs	r2, #22
   1935e:	495a      	ldr	r1, [pc, #360]	; (194c8 <fn_loop_test+0x1fc>)
   19360:	0020      	movs	r0, r4
   19362:	47b0      	blx	r6
	glcd_tiny_draw_string(0,4,display_str);
   19364:	0022      	movs	r2, r4
   19366:	2104      	movs	r1, #4
   19368:	2000      	movs	r0, #0
   1936a:	47a8      	blx	r5
	sprintf(display_str, "Horizontal: %.1f", loop_horizontal);
   1936c:	4b57      	ldr	r3, [pc, #348]	; (194cc <fn_loop_test+0x200>)
   1936e:	6818      	ldr	r0, [r3, #0]
   19370:	47c0      	blx	r8
   19372:	000b      	movs	r3, r1
   19374:	0002      	movs	r2, r0
   19376:	4956      	ldr	r1, [pc, #344]	; (194d0 <fn_loop_test+0x204>)
   19378:	0020      	movs	r0, r4
   1937a:	47b8      	blx	r7
	if (options.current_unit_dist == feet){
   1937c:	464b      	mov	r3, r9
   1937e:	791b      	ldrb	r3, [r3, #4]
		strcat(display_str,"ft");
   19380:	0020      	movs	r0, r4
	if (options.current_unit_dist == feet){
   19382:	2b00      	cmp	r3, #0
   19384:	d14a      	bne.n	1941c <fn_loop_test+0x150>
		strcat(display_str,"ft");
   19386:	47d0      	blx	sl
   19388:	2203      	movs	r2, #3
   1938a:	1820      	adds	r0, r4, r0
   1938c:	494d      	ldr	r1, [pc, #308]	; (194c4 <fn_loop_test+0x1f8>)
   1938e:	47b0      	blx	r6
	glcd_tiny_draw_string(0,5,display_str);
   19390:	0022      	movs	r2, r4
   19392:	2105      	movs	r1, #5
   19394:	2000      	movs	r0, #0
   19396:	47a8      	blx	r5
	sprintf(display_str, "Vertical: %.1f", loop_vertical);
   19398:	4b4e      	ldr	r3, [pc, #312]	; (194d4 <fn_loop_test+0x208>)
   1939a:	6818      	ldr	r0, [r3, #0]
   1939c:	47c0      	blx	r8
   1939e:	000b      	movs	r3, r1
   193a0:	0002      	movs	r2, r0
   193a2:	494d      	ldr	r1, [pc, #308]	; (194d8 <fn_loop_test+0x20c>)
   193a4:	0020      	movs	r0, r4
   193a6:	47b8      	blx	r7
	if (options.current_unit_dist == feet){
   193a8:	464b      	mov	r3, r9
   193aa:	791b      	ldrb	r3, [r3, #4]
		strcat(display_str,"ft");
   193ac:	0020      	movs	r0, r4
	if (options.current_unit_dist == feet){
   193ae:	2b00      	cmp	r3, #0
   193b0:	d047      	beq.n	19442 <fn_loop_test+0x176>
		strcat(display_str,"m");
   193b2:	47d0      	blx	sl
   193b4:	2202      	movs	r2, #2
   193b6:	1820      	adds	r0, r4, r0
   193b8:	4948      	ldr	r1, [pc, #288]	; (194dc <fn_loop_test+0x210>)
   193ba:	47b0      	blx	r6
	glcd_tiny_draw_string(0,6,display_str);
   193bc:	0022      	movs	r2, r4
   193be:	2106      	movs	r1, #6
   193c0:	2000      	movs	r0, #0
   193c2:	47a8      	blx	r5
	sprintf(display_str, "Azimuth: %.1f", loop_azimuth);
   193c4:	4b46      	ldr	r3, [pc, #280]	; (194e0 <fn_loop_test+0x214>)
   193c6:	6818      	ldr	r0, [r3, #0]
   193c8:	47c0      	blx	r8
   193ca:	000b      	movs	r3, r1
   193cc:	0002      	movs	r2, r0
   193ce:	4945      	ldr	r1, [pc, #276]	; (194e4 <fn_loop_test+0x218>)
   193d0:	0020      	movs	r0, r4
   193d2:	47b8      	blx	r7
	glcd_tiny_draw_string(0,7,display_str);
   193d4:	0022      	movs	r2, r4
   193d6:	2107      	movs	r1, #7
   193d8:	2000      	movs	r0, #0
   193da:	47a8      	blx	r5
	sprintf(display_str, "Done");
   193dc:	2205      	movs	r2, #5
   193de:	4942      	ldr	r1, [pc, #264]	; (194e8 <fn_loop_test+0x21c>)
   193e0:	0020      	movs	r0, r4
   193e2:	47b0      	blx	r6
	glcd_tiny_draw_string(100,0,display_str);
   193e4:	0022      	movs	r2, r4
   193e6:	2100      	movs	r1, #0
   193e8:	2064      	movs	r0, #100	; 0x64
   193ea:	47a8      	blx	r5
	sprintf(display_str, "Abort");
   193ec:	2206      	movs	r2, #6
   193ee:	493f      	ldr	r1, [pc, #252]	; (194ec <fn_loop_test+0x220>)
   193f0:	0020      	movs	r0, r4
   193f2:	47b0      	blx	r6
	glcd_tiny_draw_string(97,7,display_str);
   193f4:	0022      	movs	r2, r4
   193f6:	2107      	movs	r1, #7
   193f8:	2061      	movs	r0, #97	; 0x61
   193fa:	47a8      	blx	r5
	glcd_write();
   193fc:	4b3c      	ldr	r3, [pc, #240]	; (194f0 <fn_loop_test+0x224>)
   193fe:	4798      	blx	r3
}
   19400:	b02e      	add	sp, #184	; 0xb8
   19402:	bc1c      	pop	{r2, r3, r4}
   19404:	4690      	mov	r8, r2
   19406:	4699      	mov	r9, r3
   19408:	46a2      	mov	sl, r4
   1940a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat(display_str,"m");
   1940c:	4b2c      	ldr	r3, [pc, #176]	; (194c0 <fn_loop_test+0x1f4>)
   1940e:	469a      	mov	sl, r3
   19410:	4798      	blx	r3
   19412:	2202      	movs	r2, #2
   19414:	1820      	adds	r0, r4, r0
   19416:	4931      	ldr	r1, [pc, #196]	; (194dc <fn_loop_test+0x210>)
   19418:	47b0      	blx	r6
   1941a:	e79b      	b.n	19354 <fn_loop_test+0x88>
		strcat(display_str,"m");
   1941c:	47d0      	blx	sl
   1941e:	2202      	movs	r2, #2
   19420:	1820      	adds	r0, r4, r0
   19422:	492e      	ldr	r1, [pc, #184]	; (194dc <fn_loop_test+0x210>)
   19424:	47b0      	blx	r6
   19426:	e7b3      	b.n	19390 <fn_loop_test+0xc4>
			if (!isLaserOn()){
   19428:	4b32      	ldr	r3, [pc, #200]	; (194f4 <fn_loop_test+0x228>)
   1942a:	4798      	blx	r3
   1942c:	2800      	cmp	r0, #0
   1942e:	d11d      	bne.n	1946c <fn_loop_test+0x1a0>
				rangefinder_on_off(true);
   19430:	3001      	adds	r0, #1
   19432:	4b31      	ldr	r3, [pc, #196]	; (194f8 <fn_loop_test+0x22c>)
   19434:	4798      	blx	r3
				laser_on_off(true);
   19436:	4b31      	ldr	r3, [pc, #196]	; (194fc <fn_loop_test+0x230>)
   19438:	2001      	movs	r0, #1
   1943a:	4798      	blx	r3
   1943c:	4b14      	ldr	r3, [pc, #80]	; (19490 <fn_loop_test+0x1c4>)
   1943e:	4699      	mov	r9, r3
   19440:	e759      	b.n	192f6 <fn_loop_test+0x2a>
		strcat(display_str,"ft");
   19442:	47d0      	blx	sl
   19444:	2203      	movs	r2, #3
   19446:	1820      	adds	r0, r4, r0
   19448:	491e      	ldr	r1, [pc, #120]	; (194c4 <fn_loop_test+0x1f8>)
   1944a:	47b0      	blx	r6
   1944c:	e7b6      	b.n	193bc <fn_loop_test+0xf0>
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   1944e:	2204      	movs	r2, #4
   19450:	4b2b      	ldr	r3, [pc, #172]	; (19500 <fn_loop_test+0x234>)
   19452:	615a      	str	r2, [r3, #20]
			current_input = input_state_complete;
   19454:	4b2b      	ldr	r3, [pc, #172]	; (19504 <fn_loop_test+0x238>)
   19456:	3204      	adds	r2, #4
   19458:	601a      	str	r2, [r3, #0]
   1945a:	e74a      	b.n	192f2 <fn_loop_test+0x26>
		cal_disp_message();
   1945c:	4b2a      	ldr	r3, [pc, #168]	; (19508 <fn_loop_test+0x23c>)
   1945e:	4798      	blx	r3
		cal_init();
   19460:	4b2a      	ldr	r3, [pc, #168]	; (1950c <fn_loop_test+0x240>)
   19462:	4798      	blx	r3
		last_input = input_none;
   19464:	2300      	movs	r3, #0
   19466:	4c09      	ldr	r4, [pc, #36]	; (1948c <fn_loop_test+0x1c0>)
   19468:	6023      	str	r3, [r4, #0]
   1946a:	e73b      	b.n	192e4 <fn_loop_test+0x18>
				full_measurement(&temp_meas, options.shot_delay);
   1946c:	4b08      	ldr	r3, [pc, #32]	; (19490 <fn_loop_test+0x1c4>)
   1946e:	4668      	mov	r0, sp
   19470:	7999      	ldrb	r1, [r3, #6]
   19472:	4699      	mov	r9, r3
   19474:	4b26      	ldr	r3, [pc, #152]	; (19510 <fn_loop_test+0x244>)
   19476:	4798      	blx	r3
				rangefinder_on_off(false);
   19478:	2000      	movs	r0, #0
   1947a:	4b1f      	ldr	r3, [pc, #124]	; (194f8 <fn_loop_test+0x22c>)
   1947c:	4798      	blx	r3
				cal_loop_test(&temp_meas);
   1947e:	4668      	mov	r0, sp
   19480:	4b24      	ldr	r3, [pc, #144]	; (19514 <fn_loop_test+0x248>)
   19482:	4798      	blx	r3
   19484:	e737      	b.n	192f6 <fn_loop_test+0x2a>
   19486:	46c0      	nop			; (mov r8, r8)
   19488:	200001d0 	.word	0x200001d0
   1948c:	200044f0 	.word	0x200044f0
   19490:	2000332c 	.word	0x2000332c
   19494:	00013805 	.word	0x00013805
   19498:	200033a8 	.word	0x200033a8
   1949c:	00025f48 	.word	0x00025f48
   194a0:	0001fd79 	.word	0x0001fd79
   194a4:	000150a1 	.word	0x000150a1
   194a8:	20003340 	.word	0x20003340
   194ac:	000262b8 	.word	0x000262b8
   194b0:	0001fe91 	.word	0x0001fe91
   194b4:	0001fb6d 	.word	0x0001fb6d
   194b8:	20003324 	.word	0x20003324
   194bc:	00026450 	.word	0x00026450
   194c0:	0001fffd 	.word	0x0001fffd
   194c4:	000262a0 	.word	0x000262a0
   194c8:	00026468 	.word	0x00026468
   194cc:	20003fdc 	.word	0x20003fdc
   194d0:	00026480 	.word	0x00026480
   194d4:	2000331c 	.word	0x2000331c
   194d8:	00026494 	.word	0x00026494
   194dc:	00026464 	.word	0x00026464
   194e0:	200055cc 	.word	0x200055cc
   194e4:	000264a4 	.word	0x000264a4
   194e8:	00026438 	.word	0x00026438
   194ec:	00026024 	.word	0x00026024
   194f0:	0001493d 	.word	0x0001493d
   194f4:	0000c401 	.word	0x0000c401
   194f8:	0000c5dd 	.word	0x0000c5dd
   194fc:	0000c609 	.word	0x0000c609
   19500:	40002800 	.word	0x40002800
   19504:	2000403c 	.word	0x2000403c
   19508:	00018985 	.word	0x00018985
   1950c:	00010895 	.word	0x00010895
   19510:	0000d291 	.word	0x0000d291
   19514:	00010df5 	.word	0x00010df5

00019518 <fn_dist_calibration>:
void fn_dist_calibration(void){
   19518:	b5f0      	push	{r4, r5, r6, r7, lr}
   1951a:	46de      	mov	lr, fp
   1951c:	4657      	mov	r7, sl
   1951e:	464e      	mov	r6, r9
   19520:	4645      	mov	r5, r8
   19522:	b5e0      	push	{r5, r6, r7, lr}
	if (state_change){
   19524:	4b59      	ldr	r3, [pc, #356]	; (1968c <fn_dist_calibration+0x174>)
void fn_dist_calibration(void){
   19526:	b0b3      	sub	sp, #204	; 0xcc
	if (state_change){
   19528:	781b      	ldrb	r3, [r3, #0]
   1952a:	2b00      	cmp	r3, #0
   1952c:	d000      	beq.n	19530 <fn_dist_calibration+0x18>
   1952e:	e098      	b.n	19662 <fn_dist_calibration+0x14a>
   19530:	4c57      	ldr	r4, [pc, #348]	; (19690 <fn_dist_calibration+0x178>)
	switch(last_input){
   19532:	6823      	ldr	r3, [r4, #0]
   19534:	2b01      	cmp	r3, #1
   19536:	d100      	bne.n	1953a <fn_dist_calibration+0x22>
   19538:	e086      	b.n	19648 <fn_dist_calibration+0x130>
   1953a:	2b05      	cmp	r3, #5
   1953c:	d100      	bne.n	19540 <fn_dist_calibration+0x28>
   1953e:	e078      	b.n	19632 <fn_dist_calibration+0x11a>
   19540:	4b54      	ldr	r3, [pc, #336]	; (19694 <fn_dist_calibration+0x17c>)
   19542:	9303      	str	r3, [sp, #12]
   19544:	4b54      	ldr	r3, [pc, #336]	; (19698 <fn_dist_calibration+0x180>)
   19546:	4699      	mov	r9, r3
	last_input = input_none;
   19548:	2300      	movs	r3, #0
   1954a:	6023      	str	r3, [r4, #0]
	glcd_clear_buffer();
   1954c:	4b53      	ldr	r3, [pc, #332]	; (1969c <fn_dist_calibration+0x184>)
   1954e:	4798      	blx	r3
	sprintf(display_str, "Calibration Mode");
   19550:	4c53      	ldr	r4, [pc, #332]	; (196a0 <fn_dist_calibration+0x188>)
   19552:	2211      	movs	r2, #17
   19554:	4953      	ldr	r1, [pc, #332]	; (196a4 <fn_dist_calibration+0x18c>)
   19556:	0020      	movs	r0, r4
   19558:	4f53      	ldr	r7, [pc, #332]	; (196a8 <fn_dist_calibration+0x190>)
   1955a:	47b8      	blx	r7
	glcd_tiny_draw_string(0,0,display_str);
   1955c:	0022      	movs	r2, r4
   1955e:	2100      	movs	r1, #0
   19560:	2000      	movs	r0, #0
   19562:	4e52      	ldr	r6, [pc, #328]	; (196ac <fn_dist_calibration+0x194>)
   19564:	47b0      	blx	r6
	if (options.current_unit_dist == feet){
   19566:	464b      	mov	r3, r9
   19568:	791b      	ldrb	r3, [r3, #4]
   1956a:	2b00      	cmp	r3, #0
   1956c:	d15a      	bne.n	19624 <fn_dist_calibration+0x10c>
		sprintf(display_str, " Target %.1f feet",DIST_CAL_SETPOINT_FT);
   1956e:	4b50      	ldr	r3, [pc, #320]	; (196b0 <fn_dist_calibration+0x198>)
   19570:	2203      	movs	r2, #3
   19572:	4950      	ldr	r1, [pc, #320]	; (196b4 <fn_dist_calibration+0x19c>)
   19574:	0020      	movs	r0, r4
   19576:	4698      	mov	r8, r3
   19578:	4798      	blx	r3
	glcd_tiny_draw_string(0,1,display_str);
   1957a:	0022      	movs	r2, r4
   1957c:	2101      	movs	r1, #1
   1957e:	2000      	movs	r0, #0
   19580:	47b0      	blx	r6
   19582:	4b4d      	ldr	r3, [pc, #308]	; (196b8 <fn_dist_calibration+0x1a0>)
   19584:	2500      	movs	r5, #0
   19586:	469b      	mov	fp, r3
   19588:	4b4c      	ldr	r3, [pc, #304]	; (196bc <fn_dist_calibration+0x1a4>)
   1958a:	469a      	mov	sl, r3
		sprintf(display_str,"M%d: %2.4f ",k,dist_disp_buf[k]);
   1958c:	4a4c      	ldr	r2, [pc, #304]	; (196c0 <fn_dist_calibration+0x1a8>)
   1958e:	00ab      	lsls	r3, r5, #2
   19590:	58d0      	ldr	r0, [r2, r3]
   19592:	47d0      	blx	sl
   19594:	002a      	movs	r2, r5
   19596:	9000      	str	r0, [sp, #0]
   19598:	9101      	str	r1, [sp, #4]
   1959a:	4659      	mov	r1, fp
   1959c:	0020      	movs	r0, r4
   1959e:	47c0      	blx	r8
		if (options.current_unit_dist == feet){
   195a0:	464b      	mov	r3, r9
   195a2:	791b      	ldrb	r3, [r3, #4]
			strcat(display_str,"ft");
   195a4:	0020      	movs	r0, r4
		if (options.current_unit_dist == feet){
   195a6:	2b00      	cmp	r3, #0
   195a8:	d136      	bne.n	19618 <fn_dist_calibration+0x100>
			strcat(display_str,"ft");
   195aa:	4b46      	ldr	r3, [pc, #280]	; (196c4 <fn_dist_calibration+0x1ac>)
   195ac:	4798      	blx	r3
   195ae:	2203      	movs	r2, #3
   195b0:	4945      	ldr	r1, [pc, #276]	; (196c8 <fn_dist_calibration+0x1b0>)
   195b2:	1820      	adds	r0, r4, r0
			strcat(display_str,"m");
   195b4:	47b8      	blx	r7
		glcd_tiny_draw_string(0,k+2,display_str);
   195b6:	1ca9      	adds	r1, r5, #2
   195b8:	b2c9      	uxtb	r1, r1
   195ba:	0022      	movs	r2, r4
   195bc:	2000      	movs	r0, #0
   195be:	3501      	adds	r5, #1
   195c0:	47b0      	blx	r6
	for (k=0;k<4;k++){
   195c2:	2d04      	cmp	r5, #4
   195c4:	d1e2      	bne.n	1958c <fn_dist_calibration+0x74>
	sprintf(display_str, "Offset: %f", temp_dist_offset);
   195c6:	4b41      	ldr	r3, [pc, #260]	; (196cc <fn_dist_calibration+0x1b4>)
   195c8:	6818      	ldr	r0, [r3, #0]
   195ca:	47d0      	blx	sl
   195cc:	000b      	movs	r3, r1
   195ce:	0002      	movs	r2, r0
   195d0:	493f      	ldr	r1, [pc, #252]	; (196d0 <fn_dist_calibration+0x1b8>)
   195d2:	0020      	movs	r0, r4
   195d4:	47c0      	blx	r8
	glcd_tiny_draw_string(0,6,display_str);
   195d6:	0022      	movs	r2, r4
   195d8:	2106      	movs	r1, #6
   195da:	2000      	movs	r0, #0
   195dc:	47b0      	blx	r6
	if (cal_getGroupPoints() >= SHOT_SIZE){
   195de:	9b03      	ldr	r3, [sp, #12]
   195e0:	4798      	blx	r3
   195e2:	2803      	cmp	r0, #3
   195e4:	d907      	bls.n	195f6 <fn_dist_calibration+0xde>
		sprintf(display_str, "Calibration      Done");
   195e6:	2216      	movs	r2, #22
   195e8:	493a      	ldr	r1, [pc, #232]	; (196d4 <fn_dist_calibration+0x1bc>)
   195ea:	0020      	movs	r0, r4
   195ec:	47b8      	blx	r7
		glcd_tiny_draw_string(0,0,display_str);
   195ee:	0022      	movs	r2, r4
   195f0:	2100      	movs	r1, #0
   195f2:	2000      	movs	r0, #0
   195f4:	47b0      	blx	r6
	sprintf(display_str, "Abort");
   195f6:	2206      	movs	r2, #6
   195f8:	4937      	ldr	r1, [pc, #220]	; (196d8 <fn_dist_calibration+0x1c0>)
   195fa:	0020      	movs	r0, r4
   195fc:	47b8      	blx	r7
	glcd_tiny_draw_string(97,7,display_str);
   195fe:	0022      	movs	r2, r4
   19600:	2107      	movs	r1, #7
   19602:	2061      	movs	r0, #97	; 0x61
   19604:	47b0      	blx	r6
	glcd_write();
   19606:	4b35      	ldr	r3, [pc, #212]	; (196dc <fn_dist_calibration+0x1c4>)
   19608:	4798      	blx	r3
}
   1960a:	b033      	add	sp, #204	; 0xcc
   1960c:	bc3c      	pop	{r2, r3, r4, r5}
   1960e:	4690      	mov	r8, r2
   19610:	4699      	mov	r9, r3
   19612:	46a2      	mov	sl, r4
   19614:	46ab      	mov	fp, r5
   19616:	bdf0      	pop	{r4, r5, r6, r7, pc}
			strcat(display_str,"m");
   19618:	4b2a      	ldr	r3, [pc, #168]	; (196c4 <fn_dist_calibration+0x1ac>)
   1961a:	4798      	blx	r3
   1961c:	2202      	movs	r2, #2
   1961e:	1820      	adds	r0, r4, r0
   19620:	492f      	ldr	r1, [pc, #188]	; (196e0 <fn_dist_calibration+0x1c8>)
   19622:	e7c7      	b.n	195b4 <fn_dist_calibration+0x9c>
		sprintf(display_str, " Target %.1f meters.",DIST_CAL_SETPOINT_MT);
   19624:	4b22      	ldr	r3, [pc, #136]	; (196b0 <fn_dist_calibration+0x198>)
   19626:	2201      	movs	r2, #1
   19628:	492e      	ldr	r1, [pc, #184]	; (196e4 <fn_dist_calibration+0x1cc>)
   1962a:	0020      	movs	r0, r4
   1962c:	4698      	mov	r8, r3
   1962e:	4798      	blx	r3
   19630:	e7a3      	b.n	1957a <fn_dist_calibration+0x62>
			if (!isLaserOn()){
   19632:	4b2d      	ldr	r3, [pc, #180]	; (196e8 <fn_dist_calibration+0x1d0>)
   19634:	4798      	blx	r3
   19636:	2800      	cmp	r0, #0
   19638:	d11b      	bne.n	19672 <fn_dist_calibration+0x15a>
				rangefinder_on_off(true);
   1963a:	3001      	adds	r0, #1
   1963c:	4b2b      	ldr	r3, [pc, #172]	; (196ec <fn_dist_calibration+0x1d4>)
   1963e:	4798      	blx	r3
				laser_on_off(true);
   19640:	2001      	movs	r0, #1
   19642:	4b2b      	ldr	r3, [pc, #172]	; (196f0 <fn_dist_calibration+0x1d8>)
   19644:	4798      	blx	r3
   19646:	e77b      	b.n	19540 <fn_dist_calibration+0x28>
			if (cal_getGroupPoints() >= SHOT_SIZE){
   19648:	4b12      	ldr	r3, [pc, #72]	; (19694 <fn_dist_calibration+0x17c>)
   1964a:	9303      	str	r3, [sp, #12]
   1964c:	4798      	blx	r3
   1964e:	2803      	cmp	r0, #3
   19650:	d800      	bhi.n	19654 <fn_dist_calibration+0x13c>
   19652:	e777      	b.n	19544 <fn_dist_calibration+0x2c>
				rangefinder_on_off(false);
   19654:	4b25      	ldr	r3, [pc, #148]	; (196ec <fn_dist_calibration+0x1d4>)
   19656:	2000      	movs	r0, #0
   19658:	4798      	blx	r3
				current_input = input_state_complete;
   1965a:	2208      	movs	r2, #8
   1965c:	4b25      	ldr	r3, [pc, #148]	; (196f4 <fn_dist_calibration+0x1dc>)
   1965e:	601a      	str	r2, [r3, #0]
   19660:	e770      	b.n	19544 <fn_dist_calibration+0x2c>
		cal_disp_message();
   19662:	4b25      	ldr	r3, [pc, #148]	; (196f8 <fn_dist_calibration+0x1e0>)
   19664:	4798      	blx	r3
		cal_init();
   19666:	4b25      	ldr	r3, [pc, #148]	; (196fc <fn_dist_calibration+0x1e4>)
   19668:	4798      	blx	r3
		last_input = input_none;
   1966a:	2300      	movs	r3, #0
   1966c:	4c08      	ldr	r4, [pc, #32]	; (19690 <fn_dist_calibration+0x178>)
   1966e:	6023      	str	r3, [r4, #0]
   19670:	e75f      	b.n	19532 <fn_dist_calibration+0x1a>
				full_measurement(&temp_meas, options.shot_delay);
   19672:	4b09      	ldr	r3, [pc, #36]	; (19698 <fn_dist_calibration+0x180>)
   19674:	a804      	add	r0, sp, #16
   19676:	7999      	ldrb	r1, [r3, #6]
   19678:	4699      	mov	r9, r3
   1967a:	4b21      	ldr	r3, [pc, #132]	; (19700 <fn_dist_calibration+0x1e8>)
   1967c:	4798      	blx	r3
				rangefinder_on_off(true);
   1967e:	4b1b      	ldr	r3, [pc, #108]	; (196ec <fn_dist_calibration+0x1d4>)
   19680:	2001      	movs	r0, #1
   19682:	4798      	blx	r3
   19684:	4b03      	ldr	r3, [pc, #12]	; (19694 <fn_dist_calibration+0x17c>)
   19686:	9303      	str	r3, [sp, #12]
   19688:	e75e      	b.n	19548 <fn_dist_calibration+0x30>
   1968a:	46c0      	nop			; (mov r8, r8)
   1968c:	200001d0 	.word	0x200001d0
   19690:	200044f0 	.word	0x200044f0
   19694:	000106d5 	.word	0x000106d5
   19698:	2000332c 	.word	0x2000332c
   1969c:	00013805 	.word	0x00013805
   196a0:	200033a8 	.word	0x200033a8
   196a4:	000263f0 	.word	0x000263f0
   196a8:	0001fd79 	.word	0x0001fd79
   196ac:	000150a1 	.word	0x000150a1
   196b0:	0001fe91 	.word	0x0001fe91
   196b4:	00026334 	.word	0x00026334
   196b8:	00026360 	.word	0x00026360
   196bc:	0001fb6d 	.word	0x0001fb6d
   196c0:	20003090 	.word	0x20003090
   196c4:	0001fffd 	.word	0x0001fffd
   196c8:	000262a0 	.word	0x000262a0
   196cc:	20003de0 	.word	0x20003de0
   196d0:	0002636c 	.word	0x0002636c
   196d4:	00026378 	.word	0x00026378
   196d8:	00026024 	.word	0x00026024
   196dc:	0001493d 	.word	0x0001493d
   196e0:	00026464 	.word	0x00026464
   196e4:	00026348 	.word	0x00026348
   196e8:	0000c401 	.word	0x0000c401
   196ec:	0000c5dd 	.word	0x0000c5dd
   196f0:	0000c609 	.word	0x0000c609
   196f4:	2000403c 	.word	0x2000403c
   196f8:	00018985 	.word	0x00018985
   196fc:	00010895 	.word	0x00010895
   19700:	0000d291 	.word	0x0000d291

00019704 <print_data_screen>:
void print_data_screen(void){
   19704:	b5f0      	push	{r4, r5, r6, r7, lr}
   19706:	46de      	mov	lr, fp
   19708:	4657      	mov	r7, sl
   1970a:	464e      	mov	r6, r9
   1970c:	4645      	mov	r5, r8
   1970e:	b5e0      	push	{r5, r6, r7, lr}
	get_time();
   19710:	4bba      	ldr	r3, [pc, #744]	; (199fc <print_data_screen+0x2f8>)
void print_data_screen(void){
   19712:	b089      	sub	sp, #36	; 0x24
	get_time();
   19714:	4798      	blx	r3
	isCharging = getChargerStatus();
   19716:	4bba      	ldr	r3, [pc, #744]	; (19a00 <print_data_screen+0x2fc>)
   19718:	4798      	blx	r3
   1971a:	1e43      	subs	r3, r0, #1
   1971c:	4198      	sbcs	r0, r3
   1971e:	4fb9      	ldr	r7, [pc, #740]	; (19a04 <print_data_screen+0x300>)
   19720:	b2c0      	uxtb	r0, r0
	glcd_clear_buffer();
   19722:	4bb9      	ldr	r3, [pc, #740]	; (19a08 <print_data_screen+0x304>)
	isCharging = getChargerStatus();
   19724:	7038      	strb	r0, [r7, #0]
	glcd_clear_buffer();
   19726:	4798      	blx	r3
	if (options.current_unit_temp == fahrenheit){
   19728:	4bb8      	ldr	r3, [pc, #736]	; (19a0c <print_data_screen+0x308>)
		sprintf(display_str,"T:%4.1fF", current_time.temperatureF);
   1972a:	4cb9      	ldr	r4, [pc, #740]	; (19a10 <print_data_screen+0x30c>)
	if (options.current_unit_temp == fahrenheit){
   1972c:	795b      	ldrb	r3, [r3, #5]
   1972e:	2b05      	cmp	r3, #5
   19730:	d100      	bne.n	19734 <print_data_screen+0x30>
   19732:	e14c      	b.n	199ce <print_data_screen+0x2ca>
		sprintf(display_str,"T:%0.1fC", current_time.temperatureC);
   19734:	4bb7      	ldr	r3, [pc, #732]	; (19a14 <print_data_screen+0x310>)
   19736:	68e0      	ldr	r0, [r4, #12]
   19738:	9305      	str	r3, [sp, #20]
   1973a:	4798      	blx	r3
   1973c:	4eb6      	ldr	r6, [pc, #728]	; (19a18 <print_data_screen+0x314>)
   1973e:	4db7      	ldr	r5, [pc, #732]	; (19a1c <print_data_screen+0x318>)
   19740:	0002      	movs	r2, r0
   19742:	000b      	movs	r3, r1
   19744:	0030      	movs	r0, r6
   19746:	49b6      	ldr	r1, [pc, #728]	; (19a20 <print_data_screen+0x31c>)
   19748:	9502      	str	r5, [sp, #8]
   1974a:	47a8      	blx	r5
	glcd_tiny_draw_string(86,7,display_str);
   1974c:	0032      	movs	r2, r6
   1974e:	2107      	movs	r1, #7
   19750:	2056      	movs	r0, #86	; 0x56
   19752:	4db4      	ldr	r5, [pc, #720]	; (19a24 <print_data_screen+0x320>)
   19754:	47a8      	blx	r5
	sprintf(display_str,"%02x:%02x:%02x", current_time.hours, current_time.minutes, current_time.seconds);
   19756:	7821      	ldrb	r1, [r4, #0]
   19758:	7863      	ldrb	r3, [r4, #1]
   1975a:	78a2      	ldrb	r2, [r4, #2]
   1975c:	0030      	movs	r0, r6
   1975e:	9100      	str	r1, [sp, #0]
   19760:	9c02      	ldr	r4, [sp, #8]
   19762:	49b1      	ldr	r1, [pc, #708]	; (19a28 <print_data_screen+0x324>)
   19764:	47a0      	blx	r4
	glcd_tiny_draw_string(0,7,display_str);
   19766:	0032      	movs	r2, r6
   19768:	2107      	movs	r1, #7
   1976a:	2000      	movs	r0, #0
   1976c:	47a8      	blx	r5
	if (isCharging){
   1976e:	783b      	ldrb	r3, [r7, #0]
   19770:	2b00      	cmp	r3, #0
   19772:	d000      	beq.n	19776 <print_data_screen+0x72>
   19774:	e102      	b.n	1997c <print_data_screen+0x278>
		flipper = true;
   19776:	2201      	movs	r2, #1
   19778:	4bac      	ldr	r3, [pc, #688]	; (19a2c <print_data_screen+0x328>)
   1977a:	4cad      	ldr	r4, [pc, #692]	; (19a30 <print_data_screen+0x32c>)
   1977c:	701a      	strb	r2, [r3, #0]
		sprintf(display_str,"B:%02d%%", getBatteryLevel());		
   1977e:	4bad      	ldr	r3, [pc, #692]	; (19a34 <print_data_screen+0x330>)
   19780:	4798      	blx	r3
   19782:	49ad      	ldr	r1, [pc, #692]	; (19a38 <print_data_screen+0x334>)
   19784:	0002      	movs	r2, r0
   19786:	9b02      	ldr	r3, [sp, #8]
   19788:	0030      	movs	r0, r6
   1978a:	4798      	blx	r3
	glcd_tiny_draw_string(51,7,display_str);
   1978c:	0032      	movs	r2, r6
   1978e:	2107      	movs	r1, #7
   19790:	2033      	movs	r0, #51	; 0x33
   19792:	47a8      	blx	r5
	sprintf(display_str,"REF");
   19794:	4da9      	ldr	r5, [pc, #676]	; (19a3c <print_data_screen+0x338>)
   19796:	2204      	movs	r2, #4
   19798:	49a9      	ldr	r1, [pc, #676]	; (19a40 <print_data_screen+0x33c>)
   1979a:	0030      	movs	r0, r6
   1979c:	47a8      	blx	r5
	glcd_draw_string_xy(x1,y1, display_str);
   1979e:	4ba9      	ldr	r3, [pc, #676]	; (19a44 <print_data_screen+0x340>)
   197a0:	0032      	movs	r2, r6
   197a2:	2100      	movs	r1, #0
   197a4:	2000      	movs	r0, #0
   197a6:	4798      	blx	r3
	sprintf(display_str,"DIST");
   197a8:	2205      	movs	r2, #5
   197aa:	49a7      	ldr	r1, [pc, #668]	; (19a48 <print_data_screen+0x344>)
   197ac:	0030      	movs	r0, r6
   197ae:	47a8      	blx	r5
	glcd_draw_string_xy(x2,y1,display_str);
   197b0:	4ba4      	ldr	r3, [pc, #656]	; (19a44 <print_data_screen+0x340>)
   197b2:	0032      	movs	r2, r6
   197b4:	2100      	movs	r1, #0
   197b6:	201c      	movs	r0, #28
   197b8:	4798      	blx	r3
	sprintf(display_str,"AZM");
   197ba:	2204      	movs	r2, #4
   197bc:	49a3      	ldr	r1, [pc, #652]	; (19a4c <print_data_screen+0x348>)
   197be:	0030      	movs	r0, r6
   197c0:	47a8      	blx	r5
	glcd_draw_string_xy(x3, y1, display_str);
   197c2:	0032      	movs	r2, r6
   197c4:	2100      	movs	r1, #0
   197c6:	203f      	movs	r0, #63	; 0x3f
   197c8:	4b9e      	ldr	r3, [pc, #632]	; (19a44 <print_data_screen+0x340>)
   197ca:	4798      	blx	r3
	glcd_draw_circle(x3+21, y1+2, 2, BLACK);
   197cc:	2301      	movs	r3, #1
   197ce:	4fa0      	ldr	r7, [pc, #640]	; (19a50 <print_data_screen+0x34c>)
   197d0:	2202      	movs	r2, #2
   197d2:	2102      	movs	r1, #2
   197d4:	2054      	movs	r0, #84	; 0x54
   197d6:	47b8      	blx	r7
	sprintf(display_str,"INCL");
   197d8:	2205      	movs	r2, #5
   197da:	499e      	ldr	r1, [pc, #632]	; (19a54 <print_data_screen+0x350>)
   197dc:	0030      	movs	r0, r6
   197de:	47a8      	blx	r5
	glcd_draw_line(0, y1+8, 128, y1+8, BLACK);
   197e0:	2501      	movs	r5, #1
	glcd_draw_string_xy(x4, y1, display_str);
   197e2:	0032      	movs	r2, r6
   197e4:	2100      	movs	r1, #0
   197e6:	2062      	movs	r0, #98	; 0x62
   197e8:	4b96      	ldr	r3, [pc, #600]	; (19a44 <print_data_screen+0x340>)
   197ea:	4798      	blx	r3
	glcd_draw_circle(x4+26, y1+2, 2, BLACK);
   197ec:	2301      	movs	r3, #1
   197ee:	2202      	movs	r2, #2
   197f0:	2102      	movs	r1, #2
   197f2:	207c      	movs	r0, #124	; 0x7c
   197f4:	47b8      	blx	r7
	glcd_draw_line(0, y1+8, 128, y1+8, BLACK);
   197f6:	2308      	movs	r3, #8
   197f8:	2280      	movs	r2, #128	; 0x80
   197fa:	2108      	movs	r1, #8
   197fc:	2000      	movs	r0, #0
   197fe:	9500      	str	r5, [sp, #0]
   19800:	47a0      	blx	r4
	glcd_draw_line(0, y2+8, 128, y2+8, BLACK);
   19802:	2312      	movs	r3, #18
   19804:	2280      	movs	r2, #128	; 0x80
   19806:	2112      	movs	r1, #18
   19808:	2000      	movs	r0, #0
   1980a:	9500      	str	r5, [sp, #0]
   1980c:	47a0      	blx	r4
	glcd_draw_line(x2-2, 0, x2-2, 53, BLACK);
   1980e:	2335      	movs	r3, #53	; 0x35
   19810:	221a      	movs	r2, #26
   19812:	2100      	movs	r1, #0
   19814:	201a      	movs	r0, #26
   19816:	9500      	str	r5, [sp, #0]
   19818:	47a0      	blx	r4
	glcd_draw_line(x3-2, 0, x3-2, 53, BLACK);
   1981a:	2335      	movs	r3, #53	; 0x35
   1981c:	223d      	movs	r2, #61	; 0x3d
   1981e:	2100      	movs	r1, #0
   19820:	203d      	movs	r0, #61	; 0x3d
   19822:	9500      	str	r5, [sp, #0]
   19824:	47a0      	blx	r4
	glcd_draw_line(x4-2, 0, x4-2, 53, BLACK);
   19826:	2335      	movs	r3, #53	; 0x35
   19828:	9500      	str	r5, [sp, #0]
   1982a:	2260      	movs	r2, #96	; 0x60
   1982c:	2100      	movs	r1, #0
   1982e:	2060      	movs	r0, #96	; 0x60
   19830:	47a0      	blx	r4
   19832:	230a      	movs	r3, #10
   19834:	9303      	str	r3, [sp, #12]
   19836:	9304      	str	r3, [sp, #16]
   19838:	4b87      	ldr	r3, [pc, #540]	; (19a58 <print_data_screen+0x354>)
	for (i=0;i<num_lines;i++){
   1983a:	2700      	movs	r7, #0
   1983c:	469b      	mov	fp, r3
   1983e:	4b87      	ldr	r3, [pc, #540]	; (19a5c <print_data_screen+0x358>)
   19840:	469a      	mov	sl, r3
		temp_index=data_buf_ind-i;
   19842:	4b87      	ldr	r3, [pc, #540]	; (19a60 <print_data_screen+0x35c>)
		if(current_state==st_aim){//bump everything down to display active reading
   19844:	4652      	mov	r2, sl
		temp_index=data_buf_ind-i;
   19846:	781c      	ldrb	r4, [r3, #0]
		temp_ref=data_ref-i;
   19848:	465b      	mov	r3, fp
   1984a:	681b      	ldr	r3, [r3, #0]
		if(current_state==st_aim){//bump everything down to display active reading
   1984c:	6812      	ldr	r2, [r2, #0]
		temp_index=data_buf_ind-i;
   1984e:	1be4      	subs	r4, r4, r7
		temp_ref=data_ref-i;
   19850:	1bdb      	subs	r3, r3, r7
		temp_index=data_buf_ind-i;
   19852:	b2a4      	uxth	r4, r4
		temp_ref=data_ref-i;
   19854:	b29b      	uxth	r3, r3
		if(current_state==st_aim){//bump everything down to display active reading
   19856:	2a00      	cmp	r2, #0
   19858:	d100      	bne.n	1985c <print_data_screen+0x158>
   1985a:	e07c      	b.n	19956 <print_data_screen+0x252>
		temp_index=data_buf_ind-i;
   1985c:	b224      	sxth	r4, r4
		temp_ref=data_ref-i;
   1985e:	b21b      	sxth	r3, r3
		if (temp_index<0){
   19860:	2c00      	cmp	r4, #0
   19862:	da00      	bge.n	19866 <print_data_screen+0x162>
   19864:	e07e      	b.n	19964 <print_data_screen+0x260>
			}else if(temp_index>=NBUFF_MEAS){
   19866:	2c05      	cmp	r4, #5
   19868:	dd01      	ble.n	1986e <print_data_screen+0x16a>
			temp_index = temp_index-NBUFF_MEAS;
   1986a:	3c06      	subs	r4, #6
   1986c:	b224      	sxth	r4, r4
		if ((temp_ref)>0){
   1986e:	2b00      	cmp	r3, #0
   19870:	dd5b      	ble.n	1992a <print_data_screen+0x226>
			else {y_temp=y2+9*i;	}
   19872:	9b03      	ldr	r3, [sp, #12]
   19874:	4698      	mov	r8, r3
			if(i<2){y_temp=y2+10*i;}
   19876:	2f01      	cmp	r7, #1
   19878:	d800      	bhi.n	1987c <print_data_screen+0x178>
   1987a:	e07c      	b.n	19976 <print_data_screen+0x272>
			if((current_state==st_main_display)||(i>0)){//do not print reference and distance for active reading
   1987c:	4653      	mov	r3, sl
   1987e:	681b      	ldr	r3, [r3, #0]
   19880:	2b02      	cmp	r3, #2
   19882:	d002      	beq.n	1988a <print_data_screen+0x186>
   19884:	2f00      	cmp	r7, #0
   19886:	d100      	bne.n	1988a <print_data_screen+0x186>
   19888:	e0ae      	b.n	199e8 <print_data_screen+0x2e4>
				sprintf(display_str, "%d", data_buf[temp_index].index_ref);//reference
   1988a:	25b8      	movs	r5, #184	; 0xb8
   1988c:	4365      	muls	r5, r4
   1988e:	4b75      	ldr	r3, [pc, #468]	; (19a64 <print_data_screen+0x360>)
   19890:	4975      	ldr	r1, [pc, #468]	; (19a68 <print_data_screen+0x364>)
   19892:	9306      	str	r3, [sp, #24]
   19894:	595b      	ldr	r3, [r3, r5]
   19896:	0030      	movs	r0, r6
   19898:	001a      	movs	r2, r3
   1989a:	9307      	str	r3, [sp, #28]
   1989c:	9b02      	ldr	r3, [sp, #8]
   1989e:	4798      	blx	r3
				glcd_draw_string_xy(x1, y_temp, display_str);
   198a0:	4642      	mov	r2, r8
   198a2:	466b      	mov	r3, sp
   198a4:	771a      	strb	r2, [r3, #28]
   198a6:	b2d2      	uxtb	r2, r2
   198a8:	4690      	mov	r8, r2
   198aa:	4b66      	ldr	r3, [pc, #408]	; (19a44 <print_data_screen+0x340>)
   198ac:	0032      	movs	r2, r6
   198ae:	4641      	mov	r1, r8
   198b0:	2000      	movs	r0, #0
   198b2:	4798      	blx	r3
				sprintf(display_str, "%.1f", data_buf[temp_index].distCal);//distance
   198b4:	4a6b      	ldr	r2, [pc, #428]	; (19a64 <print_data_screen+0x360>)
   198b6:	4694      	mov	ip, r2
   198b8:	4465      	add	r5, ip
   198ba:	6a28      	ldr	r0, [r5, #32]
   198bc:	9a05      	ldr	r2, [sp, #20]
   198be:	9507      	str	r5, [sp, #28]
   198c0:	4790      	blx	r2
   198c2:	000b      	movs	r3, r1
   198c4:	4969      	ldr	r1, [pc, #420]	; (19a6c <print_data_screen+0x368>)
   198c6:	0002      	movs	r2, r0
   198c8:	9d02      	ldr	r5, [sp, #8]
   198ca:	0030      	movs	r0, r6
   198cc:	4689      	mov	r9, r1
   198ce:	47a8      	blx	r5
				glcd_draw_string_xy(x2, y_temp, display_str);
   198d0:	4b5c      	ldr	r3, [pc, #368]	; (19a44 <print_data_screen+0x340>)
   198d2:	0032      	movs	r2, r6
   198d4:	4641      	mov	r1, r8
   198d6:	201c      	movs	r0, #28
   198d8:	4798      	blx	r3
				if (data_buf[temp_index].num_errors!=0){
   198da:	9d07      	ldr	r5, [sp, #28]
   198dc:	3590      	adds	r5, #144	; 0x90
   198de:	682b      	ldr	r3, [r5, #0]
   198e0:	2b00      	cmp	r3, #0
   198e2:	d142      	bne.n	1996a <print_data_screen+0x266>
			sprintf(display_str, "%.1f", data_buf[temp_index].azimuth);//Azimuth
   198e4:	23b8      	movs	r3, #184	; 0xb8
   198e6:	435c      	muls	r4, r3
   198e8:	9b06      	ldr	r3, [sp, #24]
   198ea:	9d05      	ldr	r5, [sp, #20]
   198ec:	469c      	mov	ip, r3
   198ee:	0023      	movs	r3, r4
   198f0:	4463      	add	r3, ip
   198f2:	68d8      	ldr	r0, [r3, #12]
   198f4:	9306      	str	r3, [sp, #24]
   198f6:	47a8      	blx	r5
   198f8:	9c02      	ldr	r4, [sp, #8]
   198fa:	0002      	movs	r2, r0
   198fc:	000b      	movs	r3, r1
   198fe:	0030      	movs	r0, r6
   19900:	4649      	mov	r1, r9
   19902:	47a0      	blx	r4
			glcd_draw_string_xy(x3, y_temp, display_str);
   19904:	0032      	movs	r2, r6
   19906:	4641      	mov	r1, r8
   19908:	203f      	movs	r0, #63	; 0x3f
   1990a:	4b4e      	ldr	r3, [pc, #312]	; (19a44 <print_data_screen+0x340>)
   1990c:	4798      	blx	r3
			sprintf(display_str, "%.1f", data_buf[temp_index].inclination);//Inclination
   1990e:	9b06      	ldr	r3, [sp, #24]
   19910:	6918      	ldr	r0, [r3, #16]
   19912:	47a8      	blx	r5
   19914:	9c02      	ldr	r4, [sp, #8]
   19916:	0002      	movs	r2, r0
   19918:	000b      	movs	r3, r1
   1991a:	0030      	movs	r0, r6
   1991c:	4649      	mov	r1, r9
   1991e:	47a0      	blx	r4
			glcd_draw_string_xy(x4, y_temp, display_str);
   19920:	0032      	movs	r2, r6
   19922:	4641      	mov	r1, r8
   19924:	2062      	movs	r0, #98	; 0x62
   19926:	4b47      	ldr	r3, [pc, #284]	; (19a44 <print_data_screen+0x340>)
   19928:	4798      	blx	r3
   1992a:	9b04      	ldr	r3, [sp, #16]
	for (i=0;i<num_lines;i++){
   1992c:	3701      	adds	r7, #1
   1992e:	330a      	adds	r3, #10
   19930:	b29b      	uxth	r3, r3
   19932:	9304      	str	r3, [sp, #16]
   19934:	9b03      	ldr	r3, [sp, #12]
   19936:	b2bf      	uxth	r7, r7
   19938:	3309      	adds	r3, #9
   1993a:	b29b      	uxth	r3, r3
   1993c:	9303      	str	r3, [sp, #12]
   1993e:	2f05      	cmp	r7, #5
   19940:	d000      	beq.n	19944 <print_data_screen+0x240>
   19942:	e77e      	b.n	19842 <print_data_screen+0x13e>
	glcd_write();
   19944:	4b4a      	ldr	r3, [pc, #296]	; (19a70 <print_data_screen+0x36c>)
   19946:	4798      	blx	r3
}
   19948:	b009      	add	sp, #36	; 0x24
   1994a:	bc3c      	pop	{r2, r3, r4, r5}
   1994c:	4690      	mov	r8, r2
   1994e:	4699      	mov	r9, r3
   19950:	46a2      	mov	sl, r4
   19952:	46ab      	mov	fp, r5
   19954:	bdf0      	pop	{r4, r5, r6, r7, pc}
			temp_index=temp_index+1;
   19956:	3401      	adds	r4, #1
			temp_ref=temp_ref+1;
   19958:	3301      	adds	r3, #1
			temp_index=temp_index+1;
   1995a:	b224      	sxth	r4, r4
			temp_ref=temp_ref+1;
   1995c:	b21b      	sxth	r3, r3
		if (temp_index<0){
   1995e:	2c00      	cmp	r4, #0
   19960:	db00      	blt.n	19964 <print_data_screen+0x260>
   19962:	e780      	b.n	19866 <print_data_screen+0x162>
			temp_index = NBUFF_MEAS+temp_index;
   19964:	3406      	adds	r4, #6
   19966:	b224      	sxth	r4, r4
   19968:	e781      	b.n	1986e <print_data_screen+0x16a>
					glcd_draw_string_xy(x1+18, y_temp, "E");				
   1996a:	4a42      	ldr	r2, [pc, #264]	; (19a74 <print_data_screen+0x370>)
   1996c:	4641      	mov	r1, r8
   1996e:	2012      	movs	r0, #18
   19970:	4b34      	ldr	r3, [pc, #208]	; (19a44 <print_data_screen+0x340>)
   19972:	4798      	blx	r3
   19974:	e7b6      	b.n	198e4 <print_data_screen+0x1e0>
			if(i<2){y_temp=y2+10*i;}
   19976:	9b04      	ldr	r3, [sp, #16]
   19978:	4698      	mov	r8, r3
   1997a:	e77f      	b.n	1987c <print_data_screen+0x178>
		flipper = !flipper;
   1997c:	2301      	movs	r3, #1
   1997e:	2201      	movs	r2, #1
   19980:	4698      	mov	r8, r3
   19982:	4f2a      	ldr	r7, [pc, #168]	; (19a2c <print_data_screen+0x328>)
		glcd_draw_line(49, 64, 49, 54, BLACK);
   19984:	4c2a      	ldr	r4, [pc, #168]	; (19a30 <print_data_screen+0x32c>)
		flipper = !flipper;
   19986:	783b      	ldrb	r3, [r7, #0]
		glcd_draw_line(49, 64, 49, 54, BLACK);
   19988:	2140      	movs	r1, #64	; 0x40
		flipper = !flipper;
   1998a:	4053      	eors	r3, r2
   1998c:	703b      	strb	r3, [r7, #0]
		glcd_draw_line(49, 64, 49, 54, BLACK);
   1998e:	4643      	mov	r3, r8
   19990:	2231      	movs	r2, #49	; 0x31
   19992:	9300      	str	r3, [sp, #0]
   19994:	2031      	movs	r0, #49	; 0x31
   19996:	3335      	adds	r3, #53	; 0x35
   19998:	47a0      	blx	r4
		glcd_draw_line(49, 54, 83, 54, BLACK);
   1999a:	4643      	mov	r3, r8
   1999c:	2253      	movs	r2, #83	; 0x53
   1999e:	9300      	str	r3, [sp, #0]
   199a0:	2136      	movs	r1, #54	; 0x36
   199a2:	3335      	adds	r3, #53	; 0x35
   199a4:	2031      	movs	r0, #49	; 0x31
   199a6:	47a0      	blx	r4
		glcd_draw_line(83, 64, 83, 54, BLACK);
   199a8:	4643      	mov	r3, r8
   199aa:	2253      	movs	r2, #83	; 0x53
   199ac:	9300      	str	r3, [sp, #0]
   199ae:	2140      	movs	r1, #64	; 0x40
   199b0:	3335      	adds	r3, #53	; 0x35
   199b2:	2053      	movs	r0, #83	; 0x53
   199b4:	47a0      	blx	r4
	if (flipper){
   199b6:	783b      	ldrb	r3, [r7, #0]
   199b8:	2b00      	cmp	r3, #0
   199ba:	d000      	beq.n	199be <print_data_screen+0x2ba>
   199bc:	e6df      	b.n	1977e <print_data_screen+0x7a>
		sprintf(display_str,"B:%02d", getBatteryLevel());
   199be:	4b1d      	ldr	r3, [pc, #116]	; (19a34 <print_data_screen+0x330>)
   199c0:	4798      	blx	r3
   199c2:	492d      	ldr	r1, [pc, #180]	; (19a78 <print_data_screen+0x374>)
   199c4:	0002      	movs	r2, r0
   199c6:	9b02      	ldr	r3, [sp, #8]
   199c8:	0030      	movs	r0, r6
   199ca:	4798      	blx	r3
   199cc:	e6de      	b.n	1978c <print_data_screen+0x88>
		sprintf(display_str,"T:%4.1fF", current_time.temperatureF);
   199ce:	4b11      	ldr	r3, [pc, #68]	; (19a14 <print_data_screen+0x310>)
   199d0:	6920      	ldr	r0, [r4, #16]
   199d2:	9305      	str	r3, [sp, #20]
   199d4:	4798      	blx	r3
   199d6:	4e10      	ldr	r6, [pc, #64]	; (19a18 <print_data_screen+0x314>)
   199d8:	4d10      	ldr	r5, [pc, #64]	; (19a1c <print_data_screen+0x318>)
   199da:	0002      	movs	r2, r0
   199dc:	000b      	movs	r3, r1
   199de:	0030      	movs	r0, r6
   199e0:	4926      	ldr	r1, [pc, #152]	; (19a7c <print_data_screen+0x378>)
   199e2:	9502      	str	r5, [sp, #8]
   199e4:	47a8      	blx	r5
   199e6:	e6b1      	b.n	1974c <print_data_screen+0x48>
   199e8:	4643      	mov	r3, r8
   199ea:	466a      	mov	r2, sp
   199ec:	7613      	strb	r3, [r2, #24]
   199ee:	7e13      	ldrb	r3, [r2, #24]
   199f0:	4698      	mov	r8, r3
   199f2:	4b1c      	ldr	r3, [pc, #112]	; (19a64 <print_data_screen+0x360>)
   199f4:	9306      	str	r3, [sp, #24]
   199f6:	4b1d      	ldr	r3, [pc, #116]	; (19a6c <print_data_screen+0x368>)
   199f8:	4699      	mov	r9, r3
   199fa:	e773      	b.n	198e4 <print_data_screen+0x1e0>
   199fc:	00007c61 	.word	0x00007c61
   19a00:	00007719 	.word	0x00007719
   19a04:	20000f11 	.word	0x20000f11
   19a08:	00013805 	.word	0x00013805
   19a0c:	2000332c 	.word	0x2000332c
   19a10:	20002778 	.word	0x20002778
   19a14:	0001fb6d 	.word	0x0001fb6d
   19a18:	200033a8 	.word	0x200033a8
   19a1c:	0001fe91 	.word	0x0001fe91
   19a20:	0002681c 	.word	0x0002681c
   19a24:	000150a1 	.word	0x000150a1
   19a28:	00026828 	.word	0x00026828
   19a2c:	20000f10 	.word	0x20000f10
   19a30:	000138b1 	.word	0x000138b1
   19a34:	000076a1 	.word	0x000076a1
   19a38:	00026838 	.word	0x00026838
   19a3c:	0001fd79 	.word	0x0001fd79
   19a40:	0002684c 	.word	0x0002684c
   19a44:	00014fa9 	.word	0x00014fa9
   19a48:	00026850 	.word	0x00026850
   19a4c:	00026858 	.word	0x00026858
   19a50:	00013f05 	.word	0x00013f05
   19a54:	0002685c 	.word	0x0002685c
   19a58:	20000f08 	.word	0x20000f08
   19a5c:	2000278c 	.word	0x2000278c
   19a60:	20000f04 	.word	0x20000f04
   19a64:	20002790 	.word	0x20002790
   19a68:	00026188 	.word	0x00026188
   19a6c:	0002648c 	.word	0x0002648c
   19a70:	0001493d 	.word	0x0001493d
   19a74:	00026864 	.word	0x00026864
   19a78:	00026844 	.word	0x00026844
   19a7c:	00026810 	.word	0x00026810

00019a80 <fn_aim>:
void fn_aim(void){
   19a80:	b510      	push	{r4, lr}
	if (state_change) {
   19a82:	4b0d      	ldr	r3, [pc, #52]	; (19ab8 <fn_aim+0x38>)
   19a84:	781b      	ldrb	r3, [r3, #0]
   19a86:	2b00      	cmp	r3, #0
   19a88:	d10f      	bne.n	19aaa <fn_aim+0x2a>
	temp_index = data_buf_ind+1;
   19a8a:	4b0c      	ldr	r3, [pc, #48]	; (19abc <fn_aim+0x3c>)
   19a8c:	7818      	ldrb	r0, [r3, #0]
   19a8e:	3001      	adds	r0, #1
	if(temp_index>=NBUFF_MEAS){temp_index = 0;}
   19a90:	2805      	cmp	r0, #5
   19a92:	d905      	bls.n	19aa0 <fn_aim+0x20>
   19a94:	480a      	ldr	r0, [pc, #40]	; (19ac0 <fn_aim+0x40>)
	quick_measurement(&data_buf[temp_index]);
   19a96:	4b0b      	ldr	r3, [pc, #44]	; (19ac4 <fn_aim+0x44>)
   19a98:	4798      	blx	r3
	print_data_screen();
   19a9a:	4b0b      	ldr	r3, [pc, #44]	; (19ac8 <fn_aim+0x48>)
   19a9c:	4798      	blx	r3
}
   19a9e:	bd10      	pop	{r4, pc}
   19aa0:	23b8      	movs	r3, #184	; 0xb8
   19aa2:	4358      	muls	r0, r3
   19aa4:	4b06      	ldr	r3, [pc, #24]	; (19ac0 <fn_aim+0x40>)
   19aa6:	18c0      	adds	r0, r0, r3
   19aa8:	e7f5      	b.n	19a96 <fn_aim+0x16>
		rangefinder_on_off(true);
   19aaa:	2001      	movs	r0, #1
   19aac:	4b07      	ldr	r3, [pc, #28]	; (19acc <fn_aim+0x4c>)
   19aae:	4798      	blx	r3
		laser_on_off(true);
   19ab0:	2001      	movs	r0, #1
   19ab2:	4b07      	ldr	r3, [pc, #28]	; (19ad0 <fn_aim+0x50>)
   19ab4:	4798      	blx	r3
   19ab6:	e7e8      	b.n	19a8a <fn_aim+0xa>
   19ab8:	200001d0 	.word	0x200001d0
   19abc:	20000f04 	.word	0x20000f04
   19ac0:	20002790 	.word	0x20002790
   19ac4:	0000c995 	.word	0x0000c995
   19ac8:	00019705 	.word	0x00019705
   19acc:	0000c5dd 	.word	0x0000c5dd
   19ad0:	0000c609 	.word	0x0000c609

00019ad4 <fn_main_display>:
	print_data_screen();
   19ad4:	4b0b      	ldr	r3, [pc, #44]	; (19b04 <fn_main_display+0x30>)
void fn_main_display(void){
   19ad6:	b510      	push	{r4, lr}
	print_data_screen();
   19ad8:	4798      	blx	r3
	if(last_input==input_button2){
   19ada:	4b0b      	ldr	r3, [pc, #44]	; (19b08 <fn_main_display+0x34>)
   19adc:	681a      	ldr	r2, [r3, #0]
   19ade:	2a02      	cmp	r2, #2
   19ae0:	d009      	beq.n	19af6 <fn_main_display+0x22>
	}else if(last_input==input_button3){
   19ae2:	681b      	ldr	r3, [r3, #0]
   19ae4:	2b03      	cmp	r3, #3
   19ae6:	d000      	beq.n	19aea <fn_main_display+0x16>
}
   19ae8:	bd10      	pop	{r4, pc}
		backlightMinus(&options.backlight_setting);
   19aea:	4808      	ldr	r0, [pc, #32]	; (19b0c <fn_main_display+0x38>)
   19aec:	4b08      	ldr	r3, [pc, #32]	; (19b10 <fn_main_display+0x3c>)
   19aee:	4798      	blx	r3
			save_user_settings();
   19af0:	4b08      	ldr	r3, [pc, #32]	; (19b14 <fn_main_display+0x40>)
   19af2:	4798      	blx	r3
}
   19af4:	e7f8      	b.n	19ae8 <fn_main_display+0x14>
		backlightPlus(&options.backlight_setting);
   19af6:	4805      	ldr	r0, [pc, #20]	; (19b0c <fn_main_display+0x38>)
   19af8:	4b07      	ldr	r3, [pc, #28]	; (19b18 <fn_main_display+0x44>)
   19afa:	4798      	blx	r3
		save_user_settings();
   19afc:	4b05      	ldr	r3, [pc, #20]	; (19b14 <fn_main_display+0x40>)
   19afe:	4798      	blx	r3
   19b00:	e7f2      	b.n	19ae8 <fn_main_display+0x14>
   19b02:	46c0      	nop			; (mov r8, r8)
   19b04:	00019705 	.word	0x00019705
   19b08:	200044f0 	.word	0x200044f0
   19b0c:	2000333c 	.word	0x2000333c
   19b10:	00007215 	.word	0x00007215
   19b14:	00008799 	.word	0x00008799
   19b18:	00007119 	.word	0x00007119

00019b1c <config_pins_powerup>:
void config_pins_powerup(void){
   19b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   19b1e:	46ce      	mov	lr, r9
   19b20:	4647      	mov	r7, r8
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   19b22:	2480      	movs	r4, #128	; 0x80
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   19b24:	2049      	movs	r0, #73	; 0x49
   19b26:	2202      	movs	r2, #2
   19b28:	b580      	push	{r7, lr}
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   19b2a:	4954      	ldr	r1, [pc, #336]	; (19c7c <config_pins_powerup+0x160>)
   19b2c:	00a4      	lsls	r4, r4, #2
   19b2e:	604c      	str	r4, [r1, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   19b30:	5c0b      	ldrb	r3, [r1, r0]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   19b32:	2510      	movs	r5, #16
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   19b34:	4313      	orrs	r3, r2
   19b36:	b2db      	uxtb	r3, r3
   19b38:	540b      	strb	r3, [r1, r0]
	base->WRCONFIG.reg =
   19b3a:	4b51      	ldr	r3, [pc, #324]	; (19c80 <config_pins_powerup+0x164>)
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   19b3c:	2644      	movs	r6, #68	; 0x44
	base->WRCONFIG.reg =
   19b3e:	628b      	str	r3, [r1, #40]	; 0x28
	base->WRCONFIG.reg =
   19b40:	4b50      	ldr	r3, [pc, #320]	; (19c84 <config_pins_powerup+0x168>)
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   19b42:	2780      	movs	r7, #128	; 0x80
	base->WRCONFIG.reg =
   19b44:	4698      	mov	r8, r3
   19b46:	4640      	mov	r0, r8
   19b48:	628b      	str	r3, [r1, #40]	; 0x28
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   19b4a:	4b4f      	ldr	r3, [pc, #316]	; (19c88 <config_pins_powerup+0x16c>)
		base->OUTSET.reg = mask;
   19b4c:	618c      	str	r4, [r1, #24]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   19b4e:	605d      	str	r5, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   19b50:	5d9c      	ldrb	r4, [r3, r6]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   19b52:	053f      	lsls	r7, r7, #20
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   19b54:	4314      	orrs	r4, r2
   19b56:	b2e4      	uxtb	r4, r4
   19b58:	559c      	strb	r4, [r3, r6]
	base->WRCONFIG.reg =
   19b5a:	4c4c      	ldr	r4, [pc, #304]	; (19c8c <config_pins_powerup+0x170>)
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   19b5c:	3602      	adds	r6, #2
	base->WRCONFIG.reg =
   19b5e:	629c      	str	r4, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   19b60:	6298      	str	r0, [r3, #40]	; 0x28
		base->OUTSET.reg = mask;
   19b62:	619d      	str	r5, [r3, #24]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   19b64:	3530      	adds	r5, #48	; 0x30
   19b66:	605d      	str	r5, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   19b68:	5d9c      	ldrb	r4, [r3, r6]
   19b6a:	b083      	sub	sp, #12
   19b6c:	4314      	orrs	r4, r2
   19b6e:	b2e4      	uxtb	r4, r4
   19b70:	559c      	strb	r4, [r3, r6]
	base->WRCONFIG.reg =
   19b72:	4c47      	ldr	r4, [pc, #284]	; (19c90 <config_pins_powerup+0x174>)
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   19b74:	3601      	adds	r6, #1
	base->WRCONFIG.reg =
   19b76:	629c      	str	r4, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   19b78:	6298      	str	r0, [r3, #40]	; 0x28
		base->OUTSET.reg = mask;
   19b7a:	619d      	str	r5, [r3, #24]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   19b7c:	3540      	adds	r5, #64	; 0x40
   19b7e:	605d      	str	r5, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   19b80:	5d9c      	ldrb	r4, [r3, r6]
   19b82:	4314      	orrs	r4, r2
   19b84:	b2e4      	uxtb	r4, r4
   19b86:	559c      	strb	r4, [r3, r6]
	base->WRCONFIG.reg =
   19b88:	4c42      	ldr	r4, [pc, #264]	; (19c94 <config_pins_powerup+0x178>)
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   19b8a:	3e02      	subs	r6, #2
	base->WRCONFIG.reg =
   19b8c:	629c      	str	r4, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   19b8e:	6298      	str	r0, [r3, #40]	; 0x28
		base->OUTSET.reg = mask;
   19b90:	619d      	str	r5, [r3, #24]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   19b92:	3d60      	subs	r5, #96	; 0x60
   19b94:	605d      	str	r5, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   19b96:	5d9c      	ldrb	r4, [r3, r6]
   19b98:	4314      	orrs	r4, r2
   19b9a:	b2e4      	uxtb	r4, r4
   19b9c:	559c      	strb	r4, [r3, r6]
	base->WRCONFIG.reg =
   19b9e:	4c3e      	ldr	r4, [pc, #248]	; (19c98 <config_pins_powerup+0x17c>)
   19ba0:	629c      	str	r4, [r3, #40]	; 0x28
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   19ba2:	2480      	movs	r4, #128	; 0x80
	base->WRCONFIG.reg =
   19ba4:	6298      	str	r0, [r3, #40]	; 0x28
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   19ba6:	205b      	movs	r0, #91	; 0x5b
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   19ba8:	0424      	lsls	r4, r4, #16
		base->OUTSET.reg = mask;
   19baa:	619d      	str	r5, [r3, #24]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   19bac:	3537      	adds	r5, #55	; 0x37
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   19bae:	609c      	str	r4, [r3, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   19bb0:	5d5e      	ldrb	r6, [r3, r5]
   19bb2:	4316      	orrs	r6, r2
   19bb4:	b2f6      	uxtb	r6, r6
   19bb6:	555e      	strb	r6, [r3, r5]
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   19bb8:	619c      	str	r4, [r3, #24]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   19bba:	609f      	str	r7, [r3, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   19bbc:	5c1e      	ldrb	r6, [r3, r0]
   19bbe:	4316      	orrs	r6, r2
   19bc0:	b2f6      	uxtb	r6, r6
   19bc2:	541e      	strb	r6, [r3, r0]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   19bc4:	615f      	str	r7, [r3, #20]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   19bc6:	608c      	str	r4, [r1, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   19bc8:	5d4e      	ldrb	r6, [r1, r5]
   19bca:	2742      	movs	r7, #66	; 0x42
   19bcc:	4316      	orrs	r6, r2
   19bce:	b2f6      	uxtb	r6, r6
   19bd0:	554e      	strb	r6, [r1, r5]
   19bd2:	466e      	mov	r6, sp
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   19bd4:	3857      	subs	r0, #87	; 0x57
   19bd6:	4681      	mov	r9, r0
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   19bd8:	614c      	str	r4, [r1, #20]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   19bda:	6088      	str	r0, [r1, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   19bdc:	5dc8      	ldrb	r0, [r1, r7]
   19bde:	4310      	orrs	r0, r2
   19be0:	71f0      	strb	r0, [r6, #7]
   19be2:	79f0      	ldrb	r0, [r6, #7]
   19be4:	55c8      	strb	r0, [r1, r7]
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   19be6:	4648      	mov	r0, r9
   19be8:	6188      	str	r0, [r1, #24]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   19bea:	609c      	str	r4, [r3, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   19bec:	5d59      	ldrb	r1, [r3, r5]
   19bee:	4311      	orrs	r1, r2
   19bf0:	b2c9      	uxtb	r1, r1
   19bf2:	5559      	strb	r1, [r3, r5]
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   19bf4:	619c      	str	r4, [r3, #24]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   19bf6:	2480      	movs	r4, #128	; 0x80
   19bf8:	02e4      	lsls	r4, r4, #11
   19bfa:	609c      	str	r4, [r3, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   19bfc:	3d05      	subs	r5, #5
   19bfe:	5d59      	ldrb	r1, [r3, r5]
   19c00:	4311      	orrs	r1, r2
   19c02:	b2c9      	uxtb	r1, r1
   19c04:	5559      	strb	r1, [r3, r5]
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   19c06:	619c      	str	r4, [r3, #24]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   19c08:	2480      	movs	r4, #128	; 0x80
   19c0a:	0324      	lsls	r4, r4, #12
   19c0c:	609c      	str	r4, [r3, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   19c0e:	3501      	adds	r5, #1
   19c10:	5d59      	ldrb	r1, [r3, r5]
   19c12:	4311      	orrs	r1, r2
   19c14:	b2c9      	uxtb	r1, r1
   19c16:	5559      	strb	r1, [r3, r5]
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   19c18:	619c      	str	r4, [r3, #24]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   19c1a:	2480      	movs	r4, #128	; 0x80
   19c1c:	03a4      	lsls	r4, r4, #14
   19c1e:	609c      	str	r4, [r3, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   19c20:	3502      	adds	r5, #2
   19c22:	5d59      	ldrb	r1, [r3, r5]
   19c24:	4311      	orrs	r1, r2
   19c26:	b2c9      	uxtb	r1, r1
   19c28:	5559      	strb	r1, [r3, r5]
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   19c2a:	619c      	str	r4, [r3, #24]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   19c2c:	2480      	movs	r4, #128	; 0x80
   19c2e:	0364      	lsls	r4, r4, #13
   19c30:	609c      	str	r4, [r3, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   19c32:	3d01      	subs	r5, #1
   19c34:	5d59      	ldrb	r1, [r3, r5]
   19c36:	4311      	orrs	r1, r2
   19c38:	b2c9      	uxtb	r1, r1
   19c3a:	5559      	strb	r1, [r3, r5]
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   19c3c:	619c      	str	r4, [r3, #24]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   19c3e:	2480      	movs	r4, #128	; 0x80
   19c40:	0224      	lsls	r4, r4, #8
   19c42:	609c      	str	r4, [r3, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   19c44:	3d05      	subs	r5, #5
   19c46:	5d59      	ldrb	r1, [r3, r5]
   19c48:	4311      	orrs	r1, r2
   19c4a:	b2c9      	uxtb	r1, r1
   19c4c:	5559      	strb	r1, [r3, r5]
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
   19c4e:	619c      	str	r4, [r3, #24]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
   19c50:	6098      	str	r0, [r3, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   19c52:	5dd9      	ldrb	r1, [r3, r7]
   19c54:	4311      	orrs	r1, r2
   19c56:	b2c9      	uxtb	r1, r1
   19c58:	55d9      	strb	r1, [r3, r7]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   19c5a:	6158      	str	r0, [r3, #20]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   19c5c:	605c      	str	r4, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   19c5e:	5d59      	ldrb	r1, [r3, r5]
   19c60:	430a      	orrs	r2, r1
   19c62:	b2d2      	uxtb	r2, r2
   19c64:	555a      	strb	r2, [r3, r5]
	base->WRCONFIG.reg =
   19c66:	4a0d      	ldr	r2, [pc, #52]	; (19c9c <config_pins_powerup+0x180>)
   19c68:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   19c6a:	4642      	mov	r2, r8
   19c6c:	629a      	str	r2, [r3, #40]	; 0x28
		base->OUTSET.reg = mask;
   19c6e:	619c      	str	r4, [r3, #24]
}
   19c70:	b003      	add	sp, #12
   19c72:	bc0c      	pop	{r2, r3}
   19c74:	4690      	mov	r8, r2
   19c76:	4699      	mov	r9, r3
   19c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19c7a:	46c0      	nop			; (mov r8, r8)
   19c7c:	40002880 	.word	0x40002880
   19c80:	50060200 	.word	0x50060200
   19c84:	d0060000 	.word	0xd0060000
   19c88:	40002800 	.word	0x40002800
   19c8c:	50060010 	.word	0x50060010
   19c90:	50060040 	.word	0x50060040
   19c94:	50060080 	.word	0x50060080
   19c98:	50060020 	.word	0x50060020
   19c9c:	50068000 	.word	0x50068000

00019ca0 <fn_powerup>:
	sleepmgr_sleep(SLEEPMGR_STANDBY);

	
}

void fn_powerup(void){
   19ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
   19ca2:	46ce      	mov	lr, r9
   19ca4:	4647      	mov	r7, r8
   19ca6:	b580      	push	{r7, lr}
	config_pins_powerup();
   19ca8:	4b50      	ldr	r3, [pc, #320]	; (19dec <fn_powerup+0x14c>)
void fn_powerup(void){
   19caa:	b087      	sub	sp, #28
	config_pins_powerup();
   19cac:	4798      	blx	r3
	delay_ms(100);
   19cae:	4b50      	ldr	r3, [pc, #320]	; (19df0 <fn_powerup+0x150>)
   19cb0:	2064      	movs	r0, #100	; 0x64
   19cb2:	4699      	mov	r9, r3
   19cb4:	4798      	blx	r3
	
	//  Setup GCLK 0 for 48MHZ
	mainClockPowerup();
   19cb6:	4b4f      	ldr	r3, [pc, #316]	; (19df4 <fn_powerup+0x154>)
   19cb8:	4798      	blx	r3
	//  Various setups
	enable_comms();
   19cba:	4b4f      	ldr	r3, [pc, #316]	; (19df8 <fn_powerup+0x158>)
   19cbc:	4798      	blx	r3
	
	
	load_user_settings();//  Needed for backlight setting
   19cbe:	4b4f      	ldr	r3, [pc, #316]	; (19dfc <fn_powerup+0x15c>)
	extint_chan_get_config_defaults(&config_extint_chan);
   19cc0:	ac02      	add	r4, sp, #8
	load_user_settings();//  Needed for backlight setting
   19cc2:	4798      	blx	r3
	backlightOn(&options.backlight_setting);
   19cc4:	484e      	ldr	r0, [pc, #312]	; (19e00 <fn_powerup+0x160>)
   19cc6:	4b4f      	ldr	r3, [pc, #316]	; (19e04 <fn_powerup+0x164>)
   19cc8:	4798      	blx	r3
	extint_chan_get_config_defaults(&config_extint_chan);
   19cca:	0020      	movs	r0, r4
   19ccc:	4b4e      	ldr	r3, [pc, #312]	; (19e08 <fn_powerup+0x168>)
   19cce:	4798      	blx	r3
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
   19cd0:	2301      	movs	r3, #1
   19cd2:	4698      	mov	r8, r3
   19cd4:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   19cd6:	2302      	movs	r3, #2
   19cd8:	72e3      	strb	r3, [r4, #11]
	config_extint_chan.enable_async_edge_detection = true;
   19cda:	4643      	mov	r3, r8
	config_extint_chan.gpio_pin           = PIN_PA07A_EIC_EXTINT7;
   19cdc:	2207      	movs	r2, #7
	config_extint_chan.enable_async_edge_detection = true;
   19cde:	7263      	strb	r3, [r4, #9]
	config_extint_chan.gpio_pin           = PIN_PA07A_EIC_EXTINT7;
   19ce0:	2300      	movs	r3, #0
	config_extint_chan.filter_input_signal  = false;
   19ce2:	2500      	movs	r5, #0
	config_extint_chan.gpio_pin           = PIN_PA07A_EIC_EXTINT7;
   19ce4:	9202      	str	r2, [sp, #8]
   19ce6:	9303      	str	r3, [sp, #12]
	extint_chan_set_config(7, &config_extint_chan);
   19ce8:	4e48      	ldr	r6, [pc, #288]	; (19e0c <fn_powerup+0x16c>)
   19cea:	0021      	movs	r1, r4
   19cec:	2007      	movs	r0, #7
	config_extint_chan.filter_input_signal  = false;
   19cee:	72a5      	strb	r5, [r4, #10]
	extint_chan_set_config(7, &config_extint_chan);
   19cf0:	47b0      	blx	r6
	config_extint_chan.gpio_pin           = PIN_PA06A_EIC_EXTINT6;
   19cf2:	2306      	movs	r3, #6
	extint_chan_set_config(6, &config_extint_chan);
   19cf4:	0021      	movs	r1, r4
   19cf6:	2006      	movs	r0, #6
	config_extint_chan.gpio_pin           = PIN_PA06A_EIC_EXTINT6;
   19cf8:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = MUX_PA06A_EIC_EXTINT6;
   19cfa:	6065      	str	r5, [r4, #4]
	extint_chan_set_config(6, &config_extint_chan);
   19cfc:	47b0      	blx	r6
	config_extint_chan.gpio_pin           = PIN_PA04A_EIC_EXTINT4;
   19cfe:	2304      	movs	r3, #4
	extint_chan_set_config(4, &config_extint_chan);
   19d00:	0021      	movs	r1, r4
   19d02:	2004      	movs	r0, #4
	config_extint_chan.gpio_pin           = PIN_PA04A_EIC_EXTINT4;
   19d04:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = MUX_PA04A_EIC_EXTINT4;
   19d06:	6065      	str	r5, [r4, #4]
	extint_chan_set_config(4, &config_extint_chan);
   19d08:	47b0      	blx	r6
	config_extint_chan.gpio_pin           = PIN_PB09A_EIC_EXTINT9;
   19d0a:	2329      	movs	r3, #41	; 0x29
	extint_chan_set_config(9, &config_extint_chan);
   19d0c:	0021      	movs	r1, r4
   19d0e:	2009      	movs	r0, #9
	config_extint_chan.gpio_pin           = PIN_PB09A_EIC_EXTINT9;
   19d10:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = MUX_PB09A_EIC_EXTINT9;
   19d12:	6065      	str	r5, [r4, #4]
	extint_chan_set_config(9, &config_extint_chan);
   19d14:	47b0      	blx	r6
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
   19d16:	2303      	movs	r3, #3
	extint_chan_set_config(5, &config_extint_chan);
   19d18:	0021      	movs	r1, r4
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
   19d1a:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(5, &config_extint_chan);
   19d1c:	2005      	movs	r0, #5
	config_extint_chan.gpio_pin           = PIN_PA05A_EIC_EXTINT5;
   19d1e:	3302      	adds	r3, #2
   19d20:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = MUX_PA05A_EIC_EXTINT5;
   19d22:	6065      	str	r5, [r4, #4]
	extint_chan_set_config(5, &config_extint_chan);
   19d24:	47b0      	blx	r6
	extint_register_callback(extint_routine, 7,	EXTINT_CALLBACK_TYPE_DETECT);
   19d26:	4f3a      	ldr	r7, [pc, #232]	; (19e10 <fn_powerup+0x170>)
   19d28:	4e3a      	ldr	r6, [pc, #232]	; (19e14 <fn_powerup+0x174>)
   19d2a:	2200      	movs	r2, #0
   19d2c:	2107      	movs	r1, #7
   19d2e:	0038      	movs	r0, r7
   19d30:	47b0      	blx	r6
	extint_chan_enable_callback(7,EXTINT_CALLBACK_TYPE_DETECT);
   19d32:	4c39      	ldr	r4, [pc, #228]	; (19e18 <fn_powerup+0x178>)
   19d34:	2100      	movs	r1, #0
   19d36:	2007      	movs	r0, #7
   19d38:	47a0      	blx	r4
	extint_register_callback(extint_routine, 6,	EXTINT_CALLBACK_TYPE_DETECT);
   19d3a:	2200      	movs	r2, #0
   19d3c:	2106      	movs	r1, #6
   19d3e:	0038      	movs	r0, r7
   19d40:	47b0      	blx	r6
	extint_chan_enable_callback(6,EXTINT_CALLBACK_TYPE_DETECT);
   19d42:	2100      	movs	r1, #0
   19d44:	2006      	movs	r0, #6
   19d46:	47a0      	blx	r4
	extint_register_callback(extint_routine, 4,	EXTINT_CALLBACK_TYPE_DETECT);
   19d48:	2200      	movs	r2, #0
   19d4a:	2104      	movs	r1, #4
   19d4c:	0038      	movs	r0, r7
   19d4e:	47b0      	blx	r6
	extint_chan_enable_callback(4,EXTINT_CALLBACK_TYPE_DETECT);
   19d50:	2100      	movs	r1, #0
   19d52:	2004      	movs	r0, #4
   19d54:	47a0      	blx	r4
	extint_register_callback(extint_routine, 9,	EXTINT_CALLBACK_TYPE_DETECT);
   19d56:	2200      	movs	r2, #0
   19d58:	2109      	movs	r1, #9
   19d5a:	0038      	movs	r0, r7
   19d5c:	47b0      	blx	r6
	extint_chan_enable_callback(9,EXTINT_CALLBACK_TYPE_DETECT);
   19d5e:	2100      	movs	r1, #0
   19d60:	2009      	movs	r0, #9
   19d62:	47a0      	blx	r4
	extint_register_callback(extint_routine, 5,	EXTINT_CALLBACK_TYPE_DETECT);
   19d64:	2200      	movs	r2, #0
   19d66:	2105      	movs	r1, #5
   19d68:	0038      	movs	r0, r7
   19d6a:	47b0      	blx	r6
	extint_chan_enable_callback(5,EXTINT_CALLBACK_TYPE_DETECT);
   19d6c:	2100      	movs	r1, #0
   19d6e:	2005      	movs	r0, #5
   19d70:	47a0      	blx	r4
	configure_extint_channel();
	configure_extint_callbacks();
	setup_accel(&slave_acc1);
   19d72:	4c2a      	ldr	r4, [pc, #168]	; (19e1c <fn_powerup+0x17c>)
   19d74:	482a      	ldr	r0, [pc, #168]	; (19e20 <fn_powerup+0x180>)
   19d76:	47a0      	blx	r4
	setup_accel(&slave_acc2);
   19d78:	482a      	ldr	r0, [pc, #168]	; (19e24 <fn_powerup+0x184>)
   19d7a:	47a0      	blx	r4
	setup_mag(&slave_mag1);
   19d7c:	4c2a      	ldr	r4, [pc, #168]	; (19e28 <fn_powerup+0x188>)
   19d7e:	482b      	ldr	r0, [pc, #172]	; (19e2c <fn_powerup+0x18c>)
   19d80:	47a0      	blx	r4
	setup_mag(&slave_mag2);
   19d82:	482b      	ldr	r0, [pc, #172]	; (19e30 <fn_powerup+0x190>)
   19d84:	47a0      	blx	r4
	rangefinder_on_off(false);	
   19d86:	2000      	movs	r0, #0
   19d88:	4b2a      	ldr	r3, [pc, #168]	; (19e34 <fn_powerup+0x194>)
   19d8a:	4798      	blx	r3
	
	//  Turn on external clock and take it as a source
	ext_osc_onoff(true);
   19d8c:	4b2a      	ldr	r3, [pc, #168]	; (19e38 <fn_powerup+0x198>)
   19d8e:	2001      	movs	r0, #1
   19d90:	4798      	blx	r3
	delay_ms(10);	
   19d92:	200a      	movs	r0, #10
   19d94:	47c8      	blx	r9

	//  Initialize LCD controller
	delay_ms(500);  //  Delay requested by LCD controller
   19d96:	20fa      	movs	r0, #250	; 0xfa
   19d98:	0040      	lsls	r0, r0, #1
   19d9a:	47c8      	blx	r9
	glcd_init();
   19d9c:	4b27      	ldr	r3, [pc, #156]	; (19e3c <fn_powerup+0x19c>)
   19d9e:	4798      	blx	r3
	glcd_tiny_set_font(Font5x7,5,7,32,127);//  All font in "tiny" mode
   19da0:	237f      	movs	r3, #127	; 0x7f
   19da2:	2207      	movs	r2, #7
   19da4:	2105      	movs	r1, #5
   19da6:	4826      	ldr	r0, [pc, #152]	; (19e40 <fn_powerup+0x1a0>)
   19da8:	9300      	str	r3, [sp, #0]
   19daa:	4c26      	ldr	r4, [pc, #152]	; (19e44 <fn_powerup+0x1a4>)
   19dac:	3b5f      	subs	r3, #95	; 0x5f
   19dae:	47a0      	blx	r4
	
	//  Setup background timers
	wdt_enable();
   19db0:	4b25      	ldr	r3, [pc, #148]	; (19e48 <fn_powerup+0x1a8>)
   19db2:	4798      	blx	r3
	configure_timer_1s();
   19db4:	4b25      	ldr	r3, [pc, #148]	; (19e4c <fn_powerup+0x1ac>)
   19db6:	4798      	blx	r3
	configure_timer_ExtLong();
   19db8:	4b25      	ldr	r3, [pc, #148]	; (19e50 <fn_powerup+0x1b0>)
   19dba:	4798      	blx	r3
	cpu_irq_enable();
   19dbc:	4642      	mov	r2, r8
   19dbe:	4b25      	ldr	r3, [pc, #148]	; (19e54 <fn_powerup+0x1b4>)
   19dc0:	701a      	strb	r2, [r3, #0]
   19dc2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   19dc6:	b662      	cpsie	i
	
	
	//  Startup USB mass storage
	system_interrupt_enable_global();	
	irq_initialize_vectors();
	cpu_irq_enable();
   19dc8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   19dca:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   19dce:	b662      	cpsie	i
	configure_SD();
   19dd0:	4b21      	ldr	r3, [pc, #132]	; (19e58 <fn_powerup+0x1b8>)
   19dd2:	4798      	blx	r3
	udc_start();
   19dd4:	4b21      	ldr	r3, [pc, #132]	; (19e5c <fn_powerup+0x1bc>)
   19dd6:	4798      	blx	r3
	
	
	
	//  Set initial conditions for state machine
	buttonE_triggered=false;//  In case button was pressed again during powerup
	current_input = input_state_complete;
   19dd8:	2208      	movs	r2, #8
	buttonE_triggered=false;//  In case button was pressed again during powerup
   19dda:	4b21      	ldr	r3, [pc, #132]	; (19e60 <fn_powerup+0x1c0>)
   19ddc:	701d      	strb	r5, [r3, #0]
	current_input = input_state_complete;
   19dde:	4b21      	ldr	r3, [pc, #132]	; (19e64 <fn_powerup+0x1c4>)
   19de0:	601a      	str	r2, [r3, #0]
	
	
	
}
   19de2:	b007      	add	sp, #28
   19de4:	bc0c      	pop	{r2, r3}
   19de6:	4690      	mov	r8, r2
   19de8:	4699      	mov	r9, r3
   19dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19dec:	00019b1d 	.word	0x00019b1d
   19df0:	000161e9 	.word	0x000161e9
   19df4:	00007c15 	.word	0x00007c15
   19df8:	00013185 	.word	0x00013185
   19dfc:	000086cd 	.word	0x000086cd
   19e00:	2000333c 	.word	0x2000333c
   19e04:	00007425 	.word	0x00007425
   19e08:	0000f269 	.word	0x0000f269
   19e0c:	0000f27d 	.word	0x0000f27d
   19e10:	000188a5 	.word	0x000188a5
   19e14:	0000f161 	.word	0x0000f161
   19e18:	0000f189 	.word	0x0000f189
   19e1c:	0000c771 	.word	0x0000c771
   19e20:	20000fe0 	.word	0x20000fe0
   19e24:	20000f70 	.word	0x20000f70
   19e28:	0000ca25 	.word	0x0000ca25
   19e2c:	20000fe4 	.word	0x20000fe4
   19e30:	20000f68 	.word	0x20000f68
   19e34:	0000c5dd 	.word	0x0000c5dd
   19e38:	00007d41 	.word	0x00007d41
   19e3c:	000136d1 	.word	0x000136d1
   19e40:	00025c48 	.word	0x00025c48
   19e44:	00014fe5 	.word	0x00014fe5
   19e48:	0000d855 	.word	0x0000d855
   19e4c:	0000d921 	.word	0x0000d921
   19e50:	0000dac9 	.word	0x0000dac9
   19e54:	200000ca 	.word	0x200000ca
   19e58:	0000c361 	.word	0x0000c361
   19e5c:	0000114d 	.word	0x0000114d
   19e60:	20000efc 	.word	0x20000efc
   19e64:	2000403c 	.word	0x2000403c

00019e68 <main>:
{
   19e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19e6a:	46de      	mov	lr, fp
   19e6c:	4657      	mov	r7, sl
   19e6e:	464e      	mov	r6, r9
   19e70:	4645      	mov	r5, r8
	system_init();
   19e72:	4b57      	ldr	r3, [pc, #348]	; (19fd0 <main+0x168>)
{
   19e74:	b5e0      	push	{r5, r6, r7, lr}
	system_init();
   19e76:	4798      	blx	r3
	delay_init();	
   19e78:	4b56      	ldr	r3, [pc, #344]	; (19fd4 <main+0x16c>)
   19e7a:	4798      	blx	r3
	delay_ms(500);	
   19e7c:	20fa      	movs	r0, #250	; 0xfa
   19e7e:	4b56      	ldr	r3, [pc, #344]	; (19fd8 <main+0x170>)
   19e80:	0040      	lsls	r0, r0, #1
   19e82:	4798      	blx	r3
	fn_powerup();
   19e84:	4b55      	ldr	r3, [pc, #340]	; (19fdc <main+0x174>)
   19e86:	4798      	blx	r3
	configure_timer_counter();
   19e88:	4b55      	ldr	r3, [pc, #340]	; (19fe0 <main+0x178>)
   19e8a:	4798      	blx	r3
	setChargeCurrent(options.chargeCurrent);
   19e8c:	4c55      	ldr	r4, [pc, #340]	; (19fe4 <main+0x17c>)
   19e8e:	4b56      	ldr	r3, [pc, #344]	; (19fe8 <main+0x180>)
   19e90:	68a0      	ldr	r0, [r4, #8]
   19e92:	4798      	blx	r3
	setup_batt();
   19e94:	4b55      	ldr	r3, [pc, #340]	; (19fec <main+0x184>)
   19e96:	4798      	blx	r3
		sleepmgr_locks[i] = 0;
   19e98:	2200      	movs	r2, #0
   19e9a:	4b55      	ldr	r3, [pc, #340]	; (19ff0 <main+0x188>)
   19e9c:	701a      	strb	r2, [r3, #0]
   19e9e:	705a      	strb	r2, [r3, #1]
   19ea0:	709a      	strb	r2, [r3, #2]
   19ea2:	70da      	strb	r2, [r3, #3]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   19ea4:	3201      	adds	r2, #1
   19ea6:	711a      	strb	r2, [r3, #4]
	load_user_settings();
   19ea8:	4b52      	ldr	r3, [pc, #328]	; (19ff4 <main+0x18c>)
   19eaa:	4798      	blx	r3
	load_calibration();
   19eac:	4b52      	ldr	r3, [pc, #328]	; (19ff8 <main+0x190>)
   19eae:	4798      	blx	r3
	options.SerialNumber = getSN();
   19eb0:	4b52      	ldr	r3, [pc, #328]	; (19ffc <main+0x194>)
   19eb2:	4798      	blx	r3
	BLE_init();
   19eb4:	4b52      	ldr	r3, [pc, #328]	; (1a000 <main+0x198>)
	options.SerialNumber = getSN();
   19eb6:	6020      	str	r0, [r4, #0]
	BLE_init();
   19eb8:	4798      	blx	r3
	current_state = st_main_display;
   19eba:	2302      	movs	r3, #2
   19ebc:	4c51      	ldr	r4, [pc, #324]	; (1a004 <main+0x19c>)
	current_input = input_1sec;
   19ebe:	4e52      	ldr	r6, [pc, #328]	; (1a008 <main+0x1a0>)
	current_state = st_main_display;
   19ec0:	6023      	str	r3, [r4, #0]
	current_input = input_1sec;
   19ec2:	3305      	adds	r3, #5
   19ec4:	6033      	str	r3, [r6, #0]
   19ec6:	4b51      	ldr	r3, [pc, #324]	; (1a00c <main+0x1a4>)
   19ec8:	4d51      	ldr	r5, [pc, #324]	; (1a010 <main+0x1a8>)
   19eca:	4699      	mov	r9, r3
   19ecc:	4b51      	ldr	r3, [pc, #324]	; (1a014 <main+0x1ac>)
   19ece:	4f52      	ldr	r7, [pc, #328]	; (1a018 <main+0x1b0>)
   19ed0:	469a      	mov	sl, r3
   19ed2:	4b52      	ldr	r3, [pc, #328]	; (1a01c <main+0x1b4>)
   19ed4:	469b      	mov	fp, r3
		state_change = false;
   19ed6:	2300      	movs	r3, #0
   19ed8:	4698      	mov	r8, r3
		while ((current_input==input_none)){
   19eda:	6833      	ldr	r3, [r6, #0]
   19edc:	2b00      	cmp	r3, #0
   19ede:	d128      	bne.n	19f32 <main+0xca>
			if (usb_transaction_requested){
   19ee0:	464b      	mov	r3, r9
   19ee2:	781b      	ldrb	r3, [r3, #0]
   19ee4:	2b00      	cmp	r3, #0
   19ee6:	d008      	beq.n	19efa <main+0x92>
				spi_setBaud(baudRateMax);
   19ee8:	484d      	ldr	r0, [pc, #308]	; (1a020 <main+0x1b8>)
   19eea:	47d0      	blx	sl
				while(udi_msc_process_trans());
   19eec:	47a8      	blx	r5
   19eee:	2800      	cmp	r0, #0
   19ef0:	d1fc      	bne.n	19eec <main+0x84>
				usb_transaction_requested = false;		
   19ef2:	464b      	mov	r3, r9
   19ef4:	7018      	strb	r0, [r3, #0]
				spi_setBaud(baudRateMin);		
   19ef6:	484b      	ldr	r0, [pc, #300]	; (1a024 <main+0x1bc>)
   19ef8:	47d0      	blx	sl
			BLE_handleMessage();
   19efa:	4b4b      	ldr	r3, [pc, #300]	; (1a028 <main+0x1c0>)
   19efc:	4798      	blx	r3
			if (current_state==st_powerdown){
   19efe:	6823      	ldr	r3, [r4, #0]
   19f00:	2b04      	cmp	r3, #4
   19f02:	d057      	beq.n	19fb4 <main+0x14c>
  __ASM volatile ("cpsid i" : : : "memory");
   19f04:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   19f06:	f3bf 8f5f 	dmb	sy

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
   19f0a:	4643      	mov	r3, r8
	PM->SLEEPCFG.reg = sleep_mode;
   19f0c:	2280      	movs	r2, #128	; 0x80
   19f0e:	703b      	strb	r3, [r7, #0]
   19f10:	2302      	movs	r3, #2
   19f12:	05d2      	lsls	r2, r2, #23
   19f14:	7053      	strb	r3, [r2, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
   19f16:	7853      	ldrb	r3, [r2, #1]
   19f18:	2b02      	cmp	r3, #2
   19f1a:	d1fc      	bne.n	19f16 <main+0xae>

	/* Enter the sleep mode. */
	switch (sleep_mode) {
	case SLEEPMGR_IDLE:
		system_set_sleepmode(SYSTEM_SLEEPMODE_IDLE);
		cpu_irq_enable();
   19f1c:	3b01      	subs	r3, #1
   19f1e:	703b      	strb	r3, [r7, #0]
   19f20:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   19f24:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   19f26:	f3bf 8f4f 	dsb	sy
	__WFI();
   19f2a:	bf30      	wfi
		while ((current_input==input_none)){
   19f2c:	6833      	ldr	r3, [r6, #0]
   19f2e:	2b00      	cmp	r3, #0
   19f30:	d0d6      	beq.n	19ee0 <main+0x78>
		debug2++;
   19f32:	465b      	mov	r3, fp
   19f34:	465a      	mov	r2, fp
   19f36:	681b      	ldr	r3, [r3, #0]
   19f38:	3301      	adds	r3, #1
   19f3a:	6013      	str	r3, [r2, #0]
		wdt_reset_count();
   19f3c:	4b3b      	ldr	r3, [pc, #236]	; (1a02c <main+0x1c4>)
   19f3e:	4798      	blx	r3
		idle_timeout();//Will produce input = input_powerdown if idle
   19f40:	4b3b      	ldr	r3, [pc, #236]	; (1a030 <main+0x1c8>)
   19f42:	4798      	blx	r3
		laser_timeout();
   19f44:	4b3b      	ldr	r3, [pc, #236]	; (1a034 <main+0x1cc>)
   19f46:	4798      	blx	r3
		state_change = false;
   19f48:	4642      	mov	r2, r8
   19f4a:	4b3b      	ldr	r3, [pc, #236]	; (1a038 <main+0x1d0>)
   19f4c:	701a      	strb	r2, [r3, #0]
   19f4e:	4b3b      	ldr	r3, [pc, #236]	; (1a03c <main+0x1d4>)
   19f50:	2200      	movs	r2, #0
   19f52:	e003      	b.n	19f5c <main+0xf4>
   19f54:	3201      	adds	r2, #1
   19f56:	3303      	adds	r3, #3
		for (iter=0; iter<(sizeof(state_nextstate)/sizeof(STATE_NEXTSTATE));iter++){
   19f58:	2a5d      	cmp	r2, #93	; 0x5d
   19f5a:	d014      	beq.n	19f86 <main+0x11e>
			if((current_state==state_nextstate[iter].current) && (current_input==state_nextstate[iter].input)){
   19f5c:	6821      	ldr	r1, [r4, #0]
   19f5e:	7818      	ldrb	r0, [r3, #0]
   19f60:	4288      	cmp	r0, r1
   19f62:	d1f7      	bne.n	19f54 <main+0xec>
   19f64:	6831      	ldr	r1, [r6, #0]
   19f66:	7858      	ldrb	r0, [r3, #1]
   19f68:	4288      	cmp	r0, r1
   19f6a:	d1f3      	bne.n	19f54 <main+0xec>
				if(current_state!=state_nextstate[iter].next){
   19f6c:	0053      	lsls	r3, r2, #1
   19f6e:	189a      	adds	r2, r3, r2
   19f70:	4b32      	ldr	r3, [pc, #200]	; (1a03c <main+0x1d4>)
   19f72:	469c      	mov	ip, r3
   19f74:	4462      	add	r2, ip
   19f76:	7893      	ldrb	r3, [r2, #2]
   19f78:	6822      	ldr	r2, [r4, #0]
   19f7a:	4293      	cmp	r3, r2
   19f7c:	d003      	beq.n	19f86 <main+0x11e>
					current_state = state_nextstate[iter].next;
   19f7e:	6023      	str	r3, [r4, #0]
					state_change = true;
   19f80:	2301      	movs	r3, #1
   19f82:	4a2d      	ldr	r2, [pc, #180]	; (1a038 <main+0x1d0>)
   19f84:	7013      	strb	r3, [r2, #0]
		last_input = current_input;
   19f86:	6833      	ldr	r3, [r6, #0]
   19f88:	4a2d      	ldr	r2, [pc, #180]	; (1a040 <main+0x1d8>)
   19f8a:	6013      	str	r3, [r2, #0]
		current_input = input_none;
   19f8c:	4643      	mov	r3, r8
   19f8e:	4a2d      	ldr	r2, [pc, #180]	; (1a044 <main+0x1dc>)
   19f90:	6033      	str	r3, [r6, #0]
   19f92:	2300      	movs	r3, #0
   19f94:	e003      	b.n	19f9e <main+0x136>
   19f96:	3301      	adds	r3, #1
   19f98:	3208      	adds	r2, #8
		for(iter=0;iter<(sizeof(state_functions)/sizeof(STATE_FUNCTIONS));iter++){
   19f9a:	2b18      	cmp	r3, #24
   19f9c:	d09d      	beq.n	19eda <main+0x72>
			if(current_state==state_functions[iter].current){
   19f9e:	6821      	ldr	r1, [r4, #0]
   19fa0:	7810      	ldrb	r0, [r2, #0]
   19fa2:	4288      	cmp	r0, r1
   19fa4:	d1f7      	bne.n	19f96 <main+0x12e>
				state_functions[iter].Function();				
   19fa6:	4a27      	ldr	r2, [pc, #156]	; (1a044 <main+0x1dc>)
   19fa8:	00db      	lsls	r3, r3, #3
   19faa:	4694      	mov	ip, r2
   19fac:	4463      	add	r3, ip
   19fae:	685b      	ldr	r3, [r3, #4]
   19fb0:	4798      	blx	r3
				break;
   19fb2:	e792      	b.n	19eda <main+0x72>
  __ASM volatile ("cpsid i" : : : "memory");
   19fb4:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   19fb6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   19fba:	4642      	mov	r2, r8
   19fbc:	703a      	strb	r2, [r7, #0]
	PM->SLEEPCFG.reg = sleep_mode;
   19fbe:	2280      	movs	r2, #128	; 0x80
   19fc0:	05d2      	lsls	r2, r2, #23
   19fc2:	7053      	strb	r3, [r2, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
   19fc4:	7853      	ldrb	r3, [r2, #1]
   19fc6:	2b04      	cmp	r3, #4
   19fc8:	d1fc      	bne.n	19fc4 <main+0x15c>
		system_sleep();
		break;
	case SLEEPMGR_STANDBY:
		system_set_sleepmode(SYSTEM_SLEEPMODE_STANDBY);
		cpu_irq_enable();
   19fca:	3b03      	subs	r3, #3
   19fcc:	e7a7      	b.n	19f1e <main+0xb6>
   19fce:	46c0      	nop			; (mov r8, r8)
   19fd0:	00016ac5 	.word	0x00016ac5
   19fd4:	00016179 	.word	0x00016179
   19fd8:	000161e9 	.word	0x000161e9
   19fdc:	00019ca1 	.word	0x00019ca1
   19fe0:	0000da15 	.word	0x0000da15
   19fe4:	2000332c 	.word	0x2000332c
   19fe8:	000076f1 	.word	0x000076f1
   19fec:	0000765d 	.word	0x0000765d
   19ff0:	200013f8 	.word	0x200013f8
   19ff4:	000086cd 	.word	0x000086cd
   19ff8:	000087e9 	.word	0x000087e9
   19ffc:	0000c389 	.word	0x0000c389
   1a000:	00007935 	.word	0x00007935
   1a004:	2000278c 	.word	0x2000278c
   1a008:	2000403c 	.word	0x2000403c
   1a00c:	20000f30 	.word	0x20000f30
   1a010:	00000e29 	.word	0x00000e29
   1a014:	00012ae1 	.word	0x00012ae1
   1a018:	200000ca 	.word	0x200000ca
   1a01c:	20003318 	.word	0x20003318
   1a020:	00989680 	.word	0x00989680
   1a024:	000f4240 	.word	0x000f4240
   1a028:	000077dd 	.word	0x000077dd
   1a02c:	00003c15 	.word	0x00003c15
   1a030:	0000d8a1 	.word	0x0000d8a1
   1a034:	0000d8dd 	.word	0x0000d8dd
   1a038:	200001d0 	.word	0x200001d0
   1a03c:	20000294 	.word	0x20000294
   1a040:	200044f0 	.word	0x200044f0
   1a044:	200001d4 	.word	0x200001d4

0001a048 <config_pins_powerdown>:
void config_pins_powerdown(void){
   1a048:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a04a:	46c6      	mov	lr, r8
	base->WRCONFIG.reg =
   1a04c:	495c      	ldr	r1, [pc, #368]	; (1a1c0 <config_pins_powerdown+0x178>)
   1a04e:	4b5d      	ldr	r3, [pc, #372]	; (1a1c4 <config_pins_powerdown+0x17c>)
   1a050:	b500      	push	{lr}
	base->WRCONFIG.reg =
   1a052:	485d      	ldr	r0, [pc, #372]	; (1a1c8 <config_pins_powerdown+0x180>)
	base->WRCONFIG.reg =
   1a054:	628b      	str	r3, [r1, #40]	; 0x28
   1a056:	4f5d      	ldr	r7, [pc, #372]	; (1a1cc <config_pins_powerdown+0x184>)
   1a058:	4b5d      	ldr	r3, [pc, #372]	; (1a1d0 <config_pins_powerdown+0x188>)
	base->WRCONFIG.reg =
   1a05a:	6288      	str	r0, [r1, #40]	; 0x28
	base->WRCONFIG.reg =
   1a05c:	628f      	str	r7, [r1, #40]	; 0x28
	base->WRCONFIG.reg =
   1a05e:	6288      	str	r0, [r1, #40]	; 0x28
	base->WRCONFIG.reg =
   1a060:	628b      	str	r3, [r1, #40]	; 0x28
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1a062:	2380      	movs	r3, #128	; 0x80
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   1a064:	244a      	movs	r4, #74	; 0x4a
   1a066:	2202      	movs	r2, #2
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1a068:	00db      	lsls	r3, r3, #3
	base->WRCONFIG.reg =
   1a06a:	6288      	str	r0, [r1, #40]	; 0x28
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1a06c:	604b      	str	r3, [r1, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   1a06e:	5d0b      	ldrb	r3, [r1, r4]
   1a070:	2548      	movs	r5, #72	; 0x48
   1a072:	4313      	orrs	r3, r2
   1a074:	b2db      	uxtb	r3, r3
   1a076:	550b      	strb	r3, [r1, r4]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1a078:	2380      	movs	r3, #128	; 0x80
   1a07a:	005b      	lsls	r3, r3, #1
   1a07c:	604b      	str	r3, [r1, #4]
   1a07e:	4698      	mov	r8, r3
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   1a080:	5d4b      	ldrb	r3, [r1, r5]
   1a082:	3401      	adds	r4, #1
   1a084:	4313      	orrs	r3, r2
   1a086:	b2db      	uxtb	r3, r3
   1a088:	554b      	strb	r3, [r1, r5]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1a08a:	2380      	movs	r3, #128	; 0x80
   1a08c:	011b      	lsls	r3, r3, #4
   1a08e:	604b      	str	r3, [r1, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   1a090:	5d0b      	ldrb	r3, [r1, r4]
   1a092:	4313      	orrs	r3, r2
   1a094:	b2db      	uxtb	r3, r3
   1a096:	550b      	strb	r3, [r1, r4]
	base->WRCONFIG.reg =
   1a098:	4b4e      	ldr	r3, [pc, #312]	; (1a1d4 <config_pins_powerdown+0x18c>)
   1a09a:	4c4f      	ldr	r4, [pc, #316]	; (1a1d8 <config_pins_powerdown+0x190>)
   1a09c:	629c      	str	r4, [r3, #40]	; 0x28
   1a09e:	4c4f      	ldr	r4, [pc, #316]	; (1a1dc <config_pins_powerdown+0x194>)
	base->WRCONFIG.reg =
   1a0a0:	6298      	str	r0, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   1a0a2:	629c      	str	r4, [r3, #40]	; 0x28
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1a0a4:	2480      	movs	r4, #128	; 0x80
   1a0a6:	0164      	lsls	r4, r4, #5
	base->WRCONFIG.reg =
   1a0a8:	6298      	str	r0, [r3, #40]	; 0x28
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1a0aa:	605c      	str	r4, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   1a0ac:	244c      	movs	r4, #76	; 0x4c
   1a0ae:	46a4      	mov	ip, r4
   1a0b0:	4666      	mov	r6, ip
   1a0b2:	5d1c      	ldrb	r4, [r3, r4]
   1a0b4:	4314      	orrs	r4, r2
   1a0b6:	b2e4      	uxtb	r4, r4
   1a0b8:	559c      	strb	r4, [r3, r6]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1a0ba:	2480      	movs	r4, #128	; 0x80
   1a0bc:	01a4      	lsls	r4, r4, #6
   1a0be:	605c      	str	r4, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   1a0c0:	244d      	movs	r4, #77	; 0x4d
   1a0c2:	46a4      	mov	ip, r4
   1a0c4:	4666      	mov	r6, ip
   1a0c6:	5d1c      	ldrb	r4, [r3, r4]
   1a0c8:	4314      	orrs	r4, r2
   1a0ca:	b2e4      	uxtb	r4, r4
   1a0cc:	559c      	strb	r4, [r3, r6]
	base->WRCONFIG.reg =
   1a0ce:	629f      	str	r7, [r3, #40]	; 0x28
   1a0d0:	4c43      	ldr	r4, [pc, #268]	; (1a1e0 <config_pins_powerdown+0x198>)
	base->WRCONFIG.reg =
   1a0d2:	4f44      	ldr	r7, [pc, #272]	; (1a1e4 <config_pins_powerdown+0x19c>)
   1a0d4:	6298      	str	r0, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   1a0d6:	629c      	str	r4, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   1a0d8:	629f      	str	r7, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   1a0da:	4f43      	ldr	r7, [pc, #268]	; (1a1e8 <config_pins_powerdown+0x1a0>)
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   1a0dc:	3605      	adds	r6, #5
	base->WRCONFIG.reg =
   1a0de:	629f      	str	r7, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   1a0e0:	6298      	str	r0, [r3, #40]	; 0x28
   1a0e2:	4842      	ldr	r0, [pc, #264]	; (1a1ec <config_pins_powerdown+0x1a4>)
	base->WRCONFIG.reg =
   1a0e4:	629c      	str	r4, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
   1a0e6:	6298      	str	r0, [r3, #40]	; 0x28
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1a0e8:	4640      	mov	r0, r8
   1a0ea:	6058      	str	r0, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   1a0ec:	5d58      	ldrb	r0, [r3, r5]
   1a0ee:	2450      	movs	r4, #80	; 0x50
   1a0f0:	4310      	orrs	r0, r2
   1a0f2:	b2c0      	uxtb	r0, r0
   1a0f4:	5558      	strb	r0, [r3, r5]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1a0f6:	2080      	movs	r0, #128	; 0x80
   1a0f8:	0240      	lsls	r0, r0, #9
   1a0fa:	6058      	str	r0, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   1a0fc:	5d18      	ldrb	r0, [r3, r4]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1a0fe:	2580      	movs	r5, #128	; 0x80
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   1a100:	4310      	orrs	r0, r2
   1a102:	b2c0      	uxtb	r0, r0
   1a104:	5518      	strb	r0, [r3, r4]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1a106:	2080      	movs	r0, #128	; 0x80
   1a108:	0080      	lsls	r0, r0, #2
   1a10a:	6058      	str	r0, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   1a10c:	3c07      	subs	r4, #7
   1a10e:	5d18      	ldrb	r0, [r3, r4]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1a110:	042d      	lsls	r5, r5, #16
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   1a112:	4310      	orrs	r0, r2
   1a114:	b2c0      	uxtb	r0, r0
   1a116:	5518      	strb	r0, [r3, r4]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1a118:	2080      	movs	r0, #128	; 0x80
   1a11a:	0280      	lsls	r0, r0, #10
   1a11c:	6058      	str	r0, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   1a11e:	3408      	adds	r4, #8
   1a120:	5d18      	ldrb	r0, [r3, r4]
   1a122:	4310      	orrs	r0, r2
   1a124:	b2c0      	uxtb	r0, r0
   1a126:	5518      	strb	r0, [r3, r4]
   1a128:	2057      	movs	r0, #87	; 0x57
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1a12a:	605d      	str	r5, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   1a12c:	5c1c      	ldrb	r4, [r3, r0]
   1a12e:	4314      	orrs	r4, r2
   1a130:	b2e4      	uxtb	r4, r4
   1a132:	541c      	strb	r4, [r3, r0]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1a134:	2480      	movs	r4, #128	; 0x80
   1a136:	02e4      	lsls	r4, r4, #11
   1a138:	605c      	str	r4, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   1a13a:	5d9c      	ldrb	r4, [r3, r6]
   1a13c:	4314      	orrs	r4, r2
   1a13e:	b2e4      	uxtb	r4, r4
   1a140:	559c      	strb	r4, [r3, r6]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1a142:	2480      	movs	r4, #128	; 0x80
   1a144:	0324      	lsls	r4, r4, #12
   1a146:	605c      	str	r4, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   1a148:	3601      	adds	r6, #1
   1a14a:	5d9c      	ldrb	r4, [r3, r6]
   1a14c:	4314      	orrs	r4, r2
   1a14e:	b2e4      	uxtb	r4, r4
   1a150:	559c      	strb	r4, [r3, r6]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1a152:	2480      	movs	r4, #128	; 0x80
   1a154:	03a4      	lsls	r4, r4, #14
   1a156:	605c      	str	r4, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   1a158:	3602      	adds	r6, #2
   1a15a:	5d9c      	ldrb	r4, [r3, r6]
   1a15c:	4314      	orrs	r4, r2
   1a15e:	b2e4      	uxtb	r4, r4
   1a160:	559c      	strb	r4, [r3, r6]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1a162:	2480      	movs	r4, #128	; 0x80
   1a164:	0364      	lsls	r4, r4, #13
   1a166:	605c      	str	r4, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   1a168:	3e01      	subs	r6, #1
   1a16a:	5d9c      	ldrb	r4, [r3, r6]
   1a16c:	4314      	orrs	r4, r2
   1a16e:	b2e4      	uxtb	r4, r4
   1a170:	559c      	strb	r4, [r3, r6]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1a172:	2480      	movs	r4, #128	; 0x80
   1a174:	0224      	lsls	r4, r4, #8
   1a176:	605c      	str	r4, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   1a178:	3e05      	subs	r6, #5
   1a17a:	5d9c      	ldrb	r4, [r3, r6]
   1a17c:	4314      	orrs	r4, r2
   1a17e:	b2e4      	uxtb	r4, r4
   1a180:	559c      	strb	r4, [r3, r6]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1a182:	2404      	movs	r4, #4
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   1a184:	3e0d      	subs	r6, #13
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1a186:	605c      	str	r4, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   1a188:	5d9c      	ldrb	r4, [r3, r6]
   1a18a:	4314      	orrs	r4, r2
   1a18c:	b2e4      	uxtb	r4, r4
   1a18e:	559c      	strb	r4, [r3, r6]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1a190:	605d      	str	r5, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   1a192:	5c1c      	ldrb	r4, [r3, r0]
   1a194:	3619      	adds	r6, #25
   1a196:	4314      	orrs	r4, r2
   1a198:	b2e4      	uxtb	r4, r4
   1a19a:	541c      	strb	r4, [r3, r0]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1a19c:	2480      	movs	r4, #128	; 0x80
   1a19e:	0524      	lsls	r4, r4, #20
   1a1a0:	605c      	str	r4, [r3, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   1a1a2:	5d9c      	ldrb	r4, [r3, r6]
   1a1a4:	4314      	orrs	r4, r2
   1a1a6:	b2e4      	uxtb	r4, r4
   1a1a8:	559c      	strb	r4, [r3, r6]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
   1a1aa:	604d      	str	r5, [r1, #4]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
   1a1ac:	5c0c      	ldrb	r4, [r1, r0]
   1a1ae:	4322      	orrs	r2, r4
   1a1b0:	b2d2      	uxtb	r2, r2
   1a1b2:	540a      	strb	r2, [r1, r0]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
   1a1b4:	2280      	movs	r2, #128	; 0x80
   1a1b6:	03d2      	lsls	r2, r2, #15
   1a1b8:	615a      	str	r2, [r3, #20]
}
   1a1ba:	bc04      	pop	{r2}
   1a1bc:	4690      	mov	r8, r2
   1a1be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a1c0:	40002880 	.word	0x40002880
   1a1c4:	50020400 	.word	0x50020400
   1a1c8:	d0020000 	.word	0xd0020000
   1a1cc:	50020100 	.word	0x50020100
   1a1d0:	50020800 	.word	0x50020800
   1a1d4:	40002800 	.word	0x40002800
   1a1d8:	50021000 	.word	0x50021000
   1a1dc:	50022000 	.word	0x50022000
   1a1e0:	50020000 	.word	0x50020000
   1a1e4:	d0020001 	.word	0xd0020001
   1a1e8:	50020200 	.word	0x50020200
   1a1ec:	d0020002 	.word	0xd0020002

0001a1f0 <fn_powerdown>:
void fn_powerdown(void){
   1a1f0:	b510      	push	{r4, lr}
	if (state_change){
   1a1f2:	4b17      	ldr	r3, [pc, #92]	; (1a250 <fn_powerdown+0x60>)
   1a1f4:	781b      	ldrb	r3, [r3, #0]
   1a1f6:	2b00      	cmp	r3, #0
   1a1f8:	d013      	beq.n	1a222 <fn_powerdown+0x32>
		wdt_disable();
   1a1fa:	4b16      	ldr	r3, [pc, #88]	; (1a254 <fn_powerdown+0x64>)
   1a1fc:	4798      	blx	r3
		ext_osc_onoff(false);
   1a1fe:	2000      	movs	r0, #0
   1a200:	4b15      	ldr	r3, [pc, #84]	; (1a258 <fn_powerdown+0x68>)
   1a202:	4798      	blx	r3
		disable_comms();
   1a204:	4b15      	ldr	r3, [pc, #84]	; (1a25c <fn_powerdown+0x6c>)
   1a206:	4798      	blx	r3
		config_pins_powerdown();		
   1a208:	4b15      	ldr	r3, [pc, #84]	; (1a260 <fn_powerdown+0x70>)
   1a20a:	4798      	blx	r3
   1a20c:	2204      	movs	r2, #4
   1a20e:	4b15      	ldr	r3, [pc, #84]	; (1a264 <fn_powerdown+0x74>)
   1a210:	615a      	str	r2, [r3, #20]
		udc_stop();// disable USB
   1a212:	4b15      	ldr	r3, [pc, #84]	; (1a268 <fn_powerdown+0x78>)
   1a214:	4798      	blx	r3
		powerdown_timer_1s();
   1a216:	4b15      	ldr	r3, [pc, #84]	; (1a26c <fn_powerdown+0x7c>)
   1a218:	4798      	blx	r3
		powerdown_timer_ExtLong();
   1a21a:	4b15      	ldr	r3, [pc, #84]	; (1a270 <fn_powerdown+0x80>)
   1a21c:	4798      	blx	r3
		mainClockPowerdown();
   1a21e:	4b15      	ldr	r3, [pc, #84]	; (1a274 <fn_powerdown+0x84>)
   1a220:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
   1a222:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   1a224:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   1a228:	2300      	movs	r3, #0
	PM->SLEEPCFG.reg = sleep_mode;
   1a22a:	2280      	movs	r2, #128	; 0x80
   1a22c:	4912      	ldr	r1, [pc, #72]	; (1a278 <fn_powerdown+0x88>)
   1a22e:	05d2      	lsls	r2, r2, #23
   1a230:	700b      	strb	r3, [r1, #0]
   1a232:	3304      	adds	r3, #4
   1a234:	7053      	strb	r3, [r2, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
   1a236:	7853      	ldrb	r3, [r2, #1]
   1a238:	2b04      	cmp	r3, #4
   1a23a:	d1fc      	bne.n	1a236 <fn_powerdown+0x46>
		cpu_irq_enable();
   1a23c:	3b03      	subs	r3, #3
   1a23e:	700b      	strb	r3, [r1, #0]
   1a240:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   1a244:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   1a246:	f3bf 8f4f 	dsb	sy
	__WFI();
   1a24a:	bf30      	wfi
}
   1a24c:	bd10      	pop	{r4, pc}
   1a24e:	46c0      	nop			; (mov r8, r8)
   1a250:	200001d0 	.word	0x200001d0
   1a254:	0000d87d 	.word	0x0000d87d
   1a258:	00007d41 	.word	0x00007d41
   1a25c:	00012a31 	.word	0x00012a31
   1a260:	0001a049 	.word	0x0001a049
   1a264:	40002880 	.word	0x40002880
   1a268:	00001159 	.word	0x00001159
   1a26c:	0000dc15 	.word	0x0000dc15
   1a270:	0000dc35 	.word	0x0000dc35
   1a274:	00007b15 	.word	0x00007b15
   1a278:	200000ca 	.word	0x200000ca

0001a27c <getDefaultOptions>:
void getDefaultOptions(struct OPTIONS *optionptr){
	
	optionptr->shot_delay = 0;//seconds
	optionptr->current_unit_temp = celsius;
	optionptr->current_unit_dist = meters;
	optionptr->chargeCurrent = 100;//mA
   1a27c:	2164      	movs	r1, #100	; 0x64
	optionptr->current_unit_temp = celsius;
   1a27e:	2204      	movs	r2, #4
	optionptr->shot_delay = 0;//seconds
   1a280:	2300      	movs	r3, #0
	optionptr->chargeCurrent = 100;//mA
   1a282:	6081      	str	r1, [r0, #8]
	optionptr->errorSensitivity = 1;
   1a284:	21fe      	movs	r1, #254	; 0xfe
	optionptr->current_unit_temp = celsius;
   1a286:	7142      	strb	r2, [r0, #5]
	optionptr->current_unit_dist = meters;
   1a288:	3a03      	subs	r2, #3
	optionptr->shot_delay = 0;//seconds
   1a28a:	7183      	strb	r3, [r0, #6]
	optionptr->current_unit_dist = meters;
   1a28c:	7102      	strb	r2, [r0, #4]
	optionptr->errorSensitivity = 1;
   1a28e:	0589      	lsls	r1, r1, #22
	optionptr->backlight_setting.colorRef = 1;//white
   1a290:	7442      	strb	r2, [r0, #17]
	optionptr->backlight_setting.brightness = 3;
	optionptr->SerialNumber = 0;
   1a292:	6003      	str	r3, [r0, #0]
	optionptr->backlight_setting.brightness = 3;
   1a294:	3202      	adds	r2, #2
	optionptr->Settings_Initialized_Key = 0xC3;//  Indicator that settings have been initialized
   1a296:	33c3      	adds	r3, #195	; 0xc3
	optionptr->errorSensitivity = 1;
   1a298:	60c1      	str	r1, [r0, #12]
	optionptr->backlight_setting.brightness = 3;
   1a29a:	7402      	strb	r2, [r0, #16]
	optionptr->Settings_Initialized_Key = 0xC3;//  Indicator that settings have been initialized
   1a29c:	7483      	strb	r3, [r0, #18]

	
}
   1a29e:	4770      	bx	lr

0001a2a0 <msc_notify_trans>:


void msc_notify_trans(void){
	
	//current_input=input_usb_transaction;
	usb_transaction_requested = true;
   1a2a0:	2201      	movs	r2, #1
   1a2a2:	4b01      	ldr	r3, [pc, #4]	; (1a2a8 <msc_notify_trans+0x8>)
   1a2a4:	701a      	strb	r2, [r3, #0]
}
   1a2a6:	4770      	bx	lr
   1a2a8:	20000f30 	.word	0x20000f30

0001a2ac <my_callback_msc_enable>:


bool my_callback_msc_enable(void)
{
	my_flag_autorize_msc_transfert = true;
   1a2ac:	2201      	movs	r2, #1
   1a2ae:	4b02      	ldr	r3, [pc, #8]	; (1a2b8 <my_callback_msc_enable+0xc>)
	return true;
}
   1a2b0:	2001      	movs	r0, #1
	my_flag_autorize_msc_transfert = true;
   1a2b2:	701a      	strb	r2, [r3, #0]
}
   1a2b4:	4770      	bx	lr
   1a2b6:	46c0      	nop			; (mov r8, r8)
   1a2b8:	20000f24 	.word	0x20000f24

0001a2bc <my_callback_msc_disable>:
void my_callback_msc_disable(void)
{
	my_flag_autorize_msc_transfert = false;
   1a2bc:	2200      	movs	r2, #0
   1a2be:	4b01      	ldr	r3, [pc, #4]	; (1a2c4 <my_callback_msc_disable+0x8>)
   1a2c0:	701a      	strb	r2, [r3, #0]
}
   1a2c2:	4770      	bx	lr
   1a2c4:	20000f24 	.word	0x20000f24

0001a2c8 <cos>:
   1a2c8:	b530      	push	{r4, r5, lr}
   1a2ca:	4a20      	ldr	r2, [pc, #128]	; (1a34c <cos+0x84>)
   1a2cc:	004b      	lsls	r3, r1, #1
   1a2ce:	b087      	sub	sp, #28
   1a2d0:	085b      	lsrs	r3, r3, #1
   1a2d2:	4293      	cmp	r3, r2
   1a2d4:	dd1c      	ble.n	1a310 <cos+0x48>
   1a2d6:	4a1e      	ldr	r2, [pc, #120]	; (1a350 <cos+0x88>)
   1a2d8:	4293      	cmp	r3, r2
   1a2da:	dd05      	ble.n	1a2e8 <cos+0x20>
   1a2dc:	0002      	movs	r2, r0
   1a2de:	000b      	movs	r3, r1
   1a2e0:	f005 f860 	bl	1f3a4 <__aeabi_dsub>
   1a2e4:	b007      	add	sp, #28
   1a2e6:	bd30      	pop	{r4, r5, pc}
   1a2e8:	aa02      	add	r2, sp, #8
   1a2ea:	f001 f87d 	bl	1b3e8 <__ieee754_rem_pio2>
   1a2ee:	2303      	movs	r3, #3
   1a2f0:	4018      	ands	r0, r3
   1a2f2:	9a04      	ldr	r2, [sp, #16]
   1a2f4:	9b05      	ldr	r3, [sp, #20]
   1a2f6:	2801      	cmp	r0, #1
   1a2f8:	d018      	beq.n	1a32c <cos+0x64>
   1a2fa:	2802      	cmp	r0, #2
   1a2fc:	d00d      	beq.n	1a31a <cos+0x52>
   1a2fe:	2800      	cmp	r0, #0
   1a300:	d01e      	beq.n	1a340 <cos+0x78>
   1a302:	9802      	ldr	r0, [sp, #8]
   1a304:	9903      	ldr	r1, [sp, #12]
   1a306:	2401      	movs	r4, #1
   1a308:	9400      	str	r4, [sp, #0]
   1a30a:	f002 f8fb 	bl	1c504 <__kernel_sin>
   1a30e:	e7e9      	b.n	1a2e4 <cos+0x1c>
   1a310:	2200      	movs	r2, #0
   1a312:	2300      	movs	r3, #0
   1a314:	f001 fb60 	bl	1b9d8 <__kernel_cos>
   1a318:	e7e4      	b.n	1a2e4 <cos+0x1c>
   1a31a:	9802      	ldr	r0, [sp, #8]
   1a31c:	9903      	ldr	r1, [sp, #12]
   1a31e:	f001 fb5b 	bl	1b9d8 <__kernel_cos>
   1a322:	2380      	movs	r3, #128	; 0x80
   1a324:	061b      	lsls	r3, r3, #24
   1a326:	469c      	mov	ip, r3
   1a328:	4461      	add	r1, ip
   1a32a:	e7db      	b.n	1a2e4 <cos+0x1c>
   1a32c:	9000      	str	r0, [sp, #0]
   1a32e:	9802      	ldr	r0, [sp, #8]
   1a330:	9903      	ldr	r1, [sp, #12]
   1a332:	f002 f8e7 	bl	1c504 <__kernel_sin>
   1a336:	2380      	movs	r3, #128	; 0x80
   1a338:	061b      	lsls	r3, r3, #24
   1a33a:	469c      	mov	ip, r3
   1a33c:	4461      	add	r1, ip
   1a33e:	e7d1      	b.n	1a2e4 <cos+0x1c>
   1a340:	9802      	ldr	r0, [sp, #8]
   1a342:	9903      	ldr	r1, [sp, #12]
   1a344:	f001 fb48 	bl	1b9d8 <__kernel_cos>
   1a348:	e7cc      	b.n	1a2e4 <cos+0x1c>
   1a34a:	46c0      	nop			; (mov r8, r8)
   1a34c:	3fe921fb 	.word	0x3fe921fb
   1a350:	7fefffff 	.word	0x7fefffff

0001a354 <sin>:
   1a354:	b530      	push	{r4, r5, lr}
   1a356:	4a21      	ldr	r2, [pc, #132]	; (1a3dc <sin+0x88>)
   1a358:	004b      	lsls	r3, r1, #1
   1a35a:	b087      	sub	sp, #28
   1a35c:	085b      	lsrs	r3, r3, #1
   1a35e:	4293      	cmp	r3, r2
   1a360:	dd1e      	ble.n	1a3a0 <sin+0x4c>
   1a362:	4a1f      	ldr	r2, [pc, #124]	; (1a3e0 <sin+0x8c>)
   1a364:	4293      	cmp	r3, r2
   1a366:	dd05      	ble.n	1a374 <sin+0x20>
   1a368:	0002      	movs	r2, r0
   1a36a:	000b      	movs	r3, r1
   1a36c:	f005 f81a 	bl	1f3a4 <__aeabi_dsub>
   1a370:	b007      	add	sp, #28
   1a372:	bd30      	pop	{r4, r5, pc}
   1a374:	aa02      	add	r2, sp, #8
   1a376:	f001 f837 	bl	1b3e8 <__ieee754_rem_pio2>
   1a37a:	2303      	movs	r3, #3
   1a37c:	4018      	ands	r0, r3
   1a37e:	9a04      	ldr	r2, [sp, #16]
   1a380:	9b05      	ldr	r3, [sp, #20]
   1a382:	2801      	cmp	r0, #1
   1a384:	d01e      	beq.n	1a3c4 <sin+0x70>
   1a386:	2802      	cmp	r0, #2
   1a388:	d011      	beq.n	1a3ae <sin+0x5a>
   1a38a:	2800      	cmp	r0, #0
   1a38c:	d01f      	beq.n	1a3ce <sin+0x7a>
   1a38e:	9802      	ldr	r0, [sp, #8]
   1a390:	9903      	ldr	r1, [sp, #12]
   1a392:	f001 fb21 	bl	1b9d8 <__kernel_cos>
   1a396:	2380      	movs	r3, #128	; 0x80
   1a398:	061b      	lsls	r3, r3, #24
   1a39a:	469c      	mov	ip, r3
   1a39c:	4461      	add	r1, ip
   1a39e:	e7e7      	b.n	1a370 <sin+0x1c>
   1a3a0:	2300      	movs	r3, #0
   1a3a2:	2200      	movs	r2, #0
   1a3a4:	9300      	str	r3, [sp, #0]
   1a3a6:	2300      	movs	r3, #0
   1a3a8:	f002 f8ac 	bl	1c504 <__kernel_sin>
   1a3ac:	e7e0      	b.n	1a370 <sin+0x1c>
   1a3ae:	2401      	movs	r4, #1
   1a3b0:	9802      	ldr	r0, [sp, #8]
   1a3b2:	9903      	ldr	r1, [sp, #12]
   1a3b4:	9400      	str	r4, [sp, #0]
   1a3b6:	f002 f8a5 	bl	1c504 <__kernel_sin>
   1a3ba:	2380      	movs	r3, #128	; 0x80
   1a3bc:	061b      	lsls	r3, r3, #24
   1a3be:	469c      	mov	ip, r3
   1a3c0:	4461      	add	r1, ip
   1a3c2:	e7d5      	b.n	1a370 <sin+0x1c>
   1a3c4:	9802      	ldr	r0, [sp, #8]
   1a3c6:	9903      	ldr	r1, [sp, #12]
   1a3c8:	f001 fb06 	bl	1b9d8 <__kernel_cos>
   1a3cc:	e7d0      	b.n	1a370 <sin+0x1c>
   1a3ce:	2401      	movs	r4, #1
   1a3d0:	9802      	ldr	r0, [sp, #8]
   1a3d2:	9903      	ldr	r1, [sp, #12]
   1a3d4:	9400      	str	r4, [sp, #0]
   1a3d6:	f002 f895 	bl	1c504 <__kernel_sin>
   1a3da:	e7c9      	b.n	1a370 <sin+0x1c>
   1a3dc:	3fe921fb 	.word	0x3fe921fb
   1a3e0:	7fefffff 	.word	0x7fefffff

0001a3e4 <atan2>:
   1a3e4:	b510      	push	{r4, lr}
   1a3e6:	f000 fa0d 	bl	1a804 <__ieee754_atan2>
   1a3ea:	bd10      	pop	{r4, pc}

0001a3ec <pow>:
   1a3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a3ee:	4657      	mov	r7, sl
   1a3f0:	464e      	mov	r6, r9
   1a3f2:	46de      	mov	lr, fp
   1a3f4:	4645      	mov	r5, r8
   1a3f6:	b5e0      	push	{r5, r6, r7, lr}
   1a3f8:	b08f      	sub	sp, #60	; 0x3c
   1a3fa:	001d      	movs	r5, r3
   1a3fc:	0006      	movs	r6, r0
   1a3fe:	000f      	movs	r7, r1
   1a400:	0014      	movs	r4, r2
   1a402:	f000 fabb 	bl	1a97c <__ieee754_pow>
   1a406:	4bc7      	ldr	r3, [pc, #796]	; (1a724 <pow+0x338>)
   1a408:	9000      	str	r0, [sp, #0]
   1a40a:	9101      	str	r1, [sp, #4]
   1a40c:	469a      	mov	sl, r3
   1a40e:	781b      	ldrb	r3, [r3, #0]
   1a410:	b25b      	sxtb	r3, r3
   1a412:	4699      	mov	r9, r3
   1a414:	3301      	adds	r3, #1
   1a416:	d03e      	beq.n	1a496 <pow+0xaa>
   1a418:	0022      	movs	r2, r4
   1a41a:	002b      	movs	r3, r5
   1a41c:	0020      	movs	r0, r4
   1a41e:	0029      	movs	r1, r5
   1a420:	f005 fad6 	bl	1f9d0 <__aeabi_dcmpun>
   1a424:	4683      	mov	fp, r0
   1a426:	2800      	cmp	r0, #0
   1a428:	d135      	bne.n	1a496 <pow+0xaa>
   1a42a:	0032      	movs	r2, r6
   1a42c:	003b      	movs	r3, r7
   1a42e:	0030      	movs	r0, r6
   1a430:	0039      	movs	r1, r7
   1a432:	f005 facd 	bl	1f9d0 <__aeabi_dcmpun>
   1a436:	2200      	movs	r2, #0
   1a438:	9003      	str	r0, [sp, #12]
   1a43a:	2800      	cmp	r0, #0
   1a43c:	d000      	beq.n	1a440 <pow+0x54>
   1a43e:	e0b6      	b.n	1a5ae <pow+0x1c2>
   1a440:	2300      	movs	r3, #0
   1a442:	0030      	movs	r0, r6
   1a444:	0039      	movs	r1, r7
   1a446:	f002 fdef 	bl	1d028 <__aeabi_dcmpeq>
   1a44a:	2800      	cmp	r0, #0
   1a44c:	d02c      	beq.n	1a4a8 <pow+0xbc>
   1a44e:	2200      	movs	r2, #0
   1a450:	2300      	movs	r3, #0
   1a452:	0020      	movs	r0, r4
   1a454:	0029      	movs	r1, r5
   1a456:	f002 fde7 	bl	1d028 <__aeabi_dcmpeq>
   1a45a:	4683      	mov	fp, r0
   1a45c:	2800      	cmp	r0, #0
   1a45e:	d100      	bne.n	1a462 <pow+0x76>
   1a460:	e077      	b.n	1a552 <pow+0x166>
   1a462:	ab04      	add	r3, sp, #16
   1a464:	4698      	mov	r8, r3
   1a466:	2301      	movs	r3, #1
   1a468:	4642      	mov	r2, r8
   1a46a:	9304      	str	r3, [sp, #16]
   1a46c:	4bae      	ldr	r3, [pc, #696]	; (1a728 <pow+0x33c>)
   1a46e:	6053      	str	r3, [r2, #4]
   1a470:	4643      	mov	r3, r8
   1a472:	9a03      	ldr	r2, [sp, #12]
   1a474:	611c      	str	r4, [r3, #16]
   1a476:	615d      	str	r5, [r3, #20]
   1a478:	621a      	str	r2, [r3, #32]
   1a47a:	609e      	str	r6, [r3, #8]
   1a47c:	60df      	str	r7, [r3, #12]
   1a47e:	4642      	mov	r2, r8
   1a480:	2300      	movs	r3, #0
   1a482:	2400      	movs	r4, #0
   1a484:	6193      	str	r3, [r2, #24]
   1a486:	61d4      	str	r4, [r2, #28]
   1a488:	464b      	mov	r3, r9
   1a48a:	2b00      	cmp	r3, #0
   1a48c:	d04d      	beq.n	1a52a <pow+0x13e>
   1a48e:	2300      	movs	r3, #0
   1a490:	4ca6      	ldr	r4, [pc, #664]	; (1a72c <pow+0x340>)
   1a492:	9300      	str	r3, [sp, #0]
   1a494:	9401      	str	r4, [sp, #4]
   1a496:	9800      	ldr	r0, [sp, #0]
   1a498:	9901      	ldr	r1, [sp, #4]
   1a49a:	b00f      	add	sp, #60	; 0x3c
   1a49c:	bc3c      	pop	{r2, r3, r4, r5}
   1a49e:	4690      	mov	r8, r2
   1a4a0:	4699      	mov	r9, r3
   1a4a2:	46a2      	mov	sl, r4
   1a4a4:	46ab      	mov	fp, r5
   1a4a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a4a8:	9800      	ldr	r0, [sp, #0]
   1a4aa:	9901      	ldr	r1, [sp, #4]
   1a4ac:	f002 fa7a 	bl	1c9a4 <finite>
   1a4b0:	4681      	mov	r9, r0
   1a4b2:	2800      	cmp	r0, #0
   1a4b4:	d100      	bne.n	1a4b8 <pow+0xcc>
   1a4b6:	e09b      	b.n	1a5f0 <pow+0x204>
   1a4b8:	9800      	ldr	r0, [sp, #0]
   1a4ba:	9901      	ldr	r1, [sp, #4]
   1a4bc:	2200      	movs	r2, #0
   1a4be:	2300      	movs	r3, #0
   1a4c0:	f002 fdb2 	bl	1d028 <__aeabi_dcmpeq>
   1a4c4:	2800      	cmp	r0, #0
   1a4c6:	d0e6      	beq.n	1a496 <pow+0xaa>
   1a4c8:	0030      	movs	r0, r6
   1a4ca:	0039      	movs	r1, r7
   1a4cc:	f002 fa6a 	bl	1c9a4 <finite>
   1a4d0:	2800      	cmp	r0, #0
   1a4d2:	d0e0      	beq.n	1a496 <pow+0xaa>
   1a4d4:	0020      	movs	r0, r4
   1a4d6:	0029      	movs	r1, r5
   1a4d8:	f002 fa64 	bl	1c9a4 <finite>
   1a4dc:	2800      	cmp	r0, #0
   1a4de:	d0da      	beq.n	1a496 <pow+0xaa>
   1a4e0:	ab04      	add	r3, sp, #16
   1a4e2:	4698      	mov	r8, r3
   1a4e4:	2304      	movs	r3, #4
   1a4e6:	4642      	mov	r2, r8
   1a4e8:	9304      	str	r3, [sp, #16]
   1a4ea:	4b8f      	ldr	r3, [pc, #572]	; (1a728 <pow+0x33c>)
   1a4ec:	6114      	str	r4, [r2, #16]
   1a4ee:	6155      	str	r5, [r2, #20]
   1a4f0:	6053      	str	r3, [r2, #4]
   1a4f2:	2300      	movs	r3, #0
   1a4f4:	2400      	movs	r4, #0
   1a4f6:	6213      	str	r3, [r2, #32]
   1a4f8:	2300      	movs	r3, #0
   1a4fa:	6193      	str	r3, [r2, #24]
   1a4fc:	61d4      	str	r4, [r2, #28]
   1a4fe:	4653      	mov	r3, sl
   1a500:	781b      	ldrb	r3, [r3, #0]
   1a502:	6096      	str	r6, [r2, #8]
   1a504:	60d7      	str	r7, [r2, #12]
   1a506:	b25b      	sxtb	r3, r3
   1a508:	2b02      	cmp	r3, #2
   1a50a:	d004      	beq.n	1a516 <pow+0x12a>
   1a50c:	4640      	mov	r0, r8
   1a50e:	f002 faeb 	bl	1cae8 <matherr>
   1a512:	2800      	cmp	r0, #0
   1a514:	d10e      	bne.n	1a534 <pow+0x148>
   1a516:	f005 fc05 	bl	1fd24 <__errno>
   1a51a:	2322      	movs	r3, #34	; 0x22
   1a51c:	6003      	str	r3, [r0, #0]
   1a51e:	e009      	b.n	1a534 <pow+0x148>
   1a520:	4642      	mov	r2, r8
   1a522:	2300      	movs	r3, #0
   1a524:	2400      	movs	r4, #0
   1a526:	6193      	str	r3, [r2, #24]
   1a528:	61d4      	str	r4, [r2, #28]
   1a52a:	4640      	mov	r0, r8
   1a52c:	f002 fadc 	bl	1cae8 <matherr>
   1a530:	2800      	cmp	r0, #0
   1a532:	d037      	beq.n	1a5a4 <pow+0x1b8>
   1a534:	4643      	mov	r3, r8
   1a536:	6a1b      	ldr	r3, [r3, #32]
   1a538:	2b00      	cmp	r3, #0
   1a53a:	d004      	beq.n	1a546 <pow+0x15a>
   1a53c:	f005 fbf2 	bl	1fd24 <__errno>
   1a540:	4643      	mov	r3, r8
   1a542:	6a1b      	ldr	r3, [r3, #32]
   1a544:	6003      	str	r3, [r0, #0]
   1a546:	4643      	mov	r3, r8
   1a548:	69dc      	ldr	r4, [r3, #28]
   1a54a:	699b      	ldr	r3, [r3, #24]
   1a54c:	9300      	str	r3, [sp, #0]
   1a54e:	9401      	str	r4, [sp, #4]
   1a550:	e7a1      	b.n	1a496 <pow+0xaa>
   1a552:	0020      	movs	r0, r4
   1a554:	0029      	movs	r1, r5
   1a556:	f002 fa25 	bl	1c9a4 <finite>
   1a55a:	2800      	cmp	r0, #0
   1a55c:	d09b      	beq.n	1a496 <pow+0xaa>
   1a55e:	2200      	movs	r2, #0
   1a560:	2300      	movs	r3, #0
   1a562:	0020      	movs	r0, r4
   1a564:	0029      	movs	r1, r5
   1a566:	f002 fd65 	bl	1d034 <__aeabi_dcmplt>
   1a56a:	2800      	cmp	r0, #0
   1a56c:	d100      	bne.n	1a570 <pow+0x184>
   1a56e:	e792      	b.n	1a496 <pow+0xaa>
   1a570:	ab04      	add	r3, sp, #16
   1a572:	4698      	mov	r8, r3
   1a574:	2301      	movs	r3, #1
   1a576:	4642      	mov	r2, r8
   1a578:	9304      	str	r3, [sp, #16]
   1a57a:	4b6b      	ldr	r3, [pc, #428]	; (1a728 <pow+0x33c>)
   1a57c:	6053      	str	r3, [r2, #4]
   1a57e:	4643      	mov	r3, r8
   1a580:	465a      	mov	r2, fp
   1a582:	609e      	str	r6, [r3, #8]
   1a584:	60df      	str	r7, [r3, #12]
   1a586:	621a      	str	r2, [r3, #32]
   1a588:	611c      	str	r4, [r3, #16]
   1a58a:	615d      	str	r5, [r3, #20]
   1a58c:	4653      	mov	r3, sl
   1a58e:	781b      	ldrb	r3, [r3, #0]
   1a590:	b25b      	sxtb	r3, r3
   1a592:	2b00      	cmp	r3, #0
   1a594:	d0c4      	beq.n	1a520 <pow+0x134>
   1a596:	2000      	movs	r0, #0
   1a598:	4642      	mov	r2, r8
   1a59a:	4965      	ldr	r1, [pc, #404]	; (1a730 <pow+0x344>)
   1a59c:	6190      	str	r0, [r2, #24]
   1a59e:	61d1      	str	r1, [r2, #28]
   1a5a0:	2b02      	cmp	r3, #2
   1a5a2:	d1c2      	bne.n	1a52a <pow+0x13e>
   1a5a4:	f005 fbbe 	bl	1fd24 <__errno>
   1a5a8:	2321      	movs	r3, #33	; 0x21
   1a5aa:	6003      	str	r3, [r0, #0]
   1a5ac:	e7c2      	b.n	1a534 <pow+0x148>
   1a5ae:	2300      	movs	r3, #0
   1a5b0:	0020      	movs	r0, r4
   1a5b2:	0029      	movs	r1, r5
   1a5b4:	f002 fd38 	bl	1d028 <__aeabi_dcmpeq>
   1a5b8:	2800      	cmp	r0, #0
   1a5ba:	d100      	bne.n	1a5be <pow+0x1d2>
   1a5bc:	e76b      	b.n	1a496 <pow+0xaa>
   1a5be:	ab04      	add	r3, sp, #16
   1a5c0:	4698      	mov	r8, r3
   1a5c2:	2301      	movs	r3, #1
   1a5c4:	4642      	mov	r2, r8
   1a5c6:	9304      	str	r3, [sp, #16]
   1a5c8:	4b57      	ldr	r3, [pc, #348]	; (1a728 <pow+0x33c>)
   1a5ca:	4641      	mov	r1, r8
   1a5cc:	6053      	str	r3, [r2, #4]
   1a5ce:	4643      	mov	r3, r8
   1a5d0:	465a      	mov	r2, fp
   1a5d2:	621a      	str	r2, [r3, #32]
   1a5d4:	2200      	movs	r2, #0
   1a5d6:	609e      	str	r6, [r3, #8]
   1a5d8:	60df      	str	r7, [r3, #12]
   1a5da:	611c      	str	r4, [r3, #16]
   1a5dc:	615d      	str	r5, [r3, #20]
   1a5de:	4b53      	ldr	r3, [pc, #332]	; (1a72c <pow+0x340>)
   1a5e0:	618a      	str	r2, [r1, #24]
   1a5e2:	61cb      	str	r3, [r1, #28]
   1a5e4:	9200      	str	r2, [sp, #0]
   1a5e6:	9301      	str	r3, [sp, #4]
   1a5e8:	464b      	mov	r3, r9
   1a5ea:	2b02      	cmp	r3, #2
   1a5ec:	d19d      	bne.n	1a52a <pow+0x13e>
   1a5ee:	e752      	b.n	1a496 <pow+0xaa>
   1a5f0:	0030      	movs	r0, r6
   1a5f2:	0039      	movs	r1, r7
   1a5f4:	f002 f9d6 	bl	1c9a4 <finite>
   1a5f8:	2800      	cmp	r0, #0
   1a5fa:	d100      	bne.n	1a5fe <pow+0x212>
   1a5fc:	e75c      	b.n	1a4b8 <pow+0xcc>
   1a5fe:	0020      	movs	r0, r4
   1a600:	0029      	movs	r1, r5
   1a602:	f002 f9cf 	bl	1c9a4 <finite>
   1a606:	2800      	cmp	r0, #0
   1a608:	d100      	bne.n	1a60c <pow+0x220>
   1a60a:	e755      	b.n	1a4b8 <pow+0xcc>
   1a60c:	9800      	ldr	r0, [sp, #0]
   1a60e:	9901      	ldr	r1, [sp, #4]
   1a610:	000b      	movs	r3, r1
   1a612:	0002      	movs	r2, r0
   1a614:	f005 f9dc 	bl	1f9d0 <__aeabi_dcmpun>
   1a618:	ab04      	add	r3, sp, #16
   1a61a:	4698      	mov	r8, r3
   1a61c:	2800      	cmp	r0, #0
   1a61e:	d161      	bne.n	1a6e4 <pow+0x2f8>
   1a620:	2303      	movs	r3, #3
   1a622:	4642      	mov	r2, r8
   1a624:	9304      	str	r3, [sp, #16]
   1a626:	4b40      	ldr	r3, [pc, #256]	; (1a728 <pow+0x33c>)
   1a628:	6210      	str	r0, [r2, #32]
   1a62a:	6053      	str	r3, [r2, #4]
   1a62c:	4653      	mov	r3, sl
   1a62e:	781b      	ldrb	r3, [r3, #0]
   1a630:	6096      	str	r6, [r2, #8]
   1a632:	60d7      	str	r7, [r2, #12]
   1a634:	b25b      	sxtb	r3, r3
   1a636:	6114      	str	r4, [r2, #16]
   1a638:	6155      	str	r5, [r2, #20]
   1a63a:	4699      	mov	r9, r3
   1a63c:	2b00      	cmp	r3, #0
   1a63e:	d12f      	bne.n	1a6a0 <pow+0x2b4>
   1a640:	22e0      	movs	r2, #224	; 0xe0
   1a642:	4641      	mov	r1, r8
   1a644:	4b3b      	ldr	r3, [pc, #236]	; (1a734 <pow+0x348>)
   1a646:	0612      	lsls	r2, r2, #24
   1a648:	618a      	str	r2, [r1, #24]
   1a64a:	61cb      	str	r3, [r1, #28]
   1a64c:	0030      	movs	r0, r6
   1a64e:	2200      	movs	r2, #0
   1a650:	2300      	movs	r3, #0
   1a652:	0039      	movs	r1, r7
   1a654:	f002 fcee 	bl	1d034 <__aeabi_dcmplt>
   1a658:	2800      	cmp	r0, #0
   1a65a:	d100      	bne.n	1a65e <pow+0x272>
   1a65c:	e756      	b.n	1a50c <pow+0x120>
   1a65e:	2200      	movs	r2, #0
   1a660:	4b35      	ldr	r3, [pc, #212]	; (1a738 <pow+0x34c>)
   1a662:	0020      	movs	r0, r4
   1a664:	0029      	movs	r1, r5
   1a666:	f004 fc1d 	bl	1eea4 <__aeabi_dmul>
   1a66a:	0004      	movs	r4, r0
   1a66c:	000d      	movs	r5, r1
   1a66e:	f002 fa43 	bl	1caf8 <rint>
   1a672:	0002      	movs	r2, r0
   1a674:	000b      	movs	r3, r1
   1a676:	0020      	movs	r0, r4
   1a678:	0029      	movs	r1, r5
   1a67a:	f002 fcd5 	bl	1d028 <__aeabi_dcmpeq>
   1a67e:	2800      	cmp	r0, #0
   1a680:	d105      	bne.n	1a68e <pow+0x2a2>
   1a682:	22e0      	movs	r2, #224	; 0xe0
   1a684:	4b2d      	ldr	r3, [pc, #180]	; (1a73c <pow+0x350>)
   1a686:	0612      	lsls	r2, r2, #24
   1a688:	4641      	mov	r1, r8
   1a68a:	618a      	str	r2, [r1, #24]
   1a68c:	61cb      	str	r3, [r1, #28]
   1a68e:	4653      	mov	r3, sl
   1a690:	781b      	ldrb	r3, [r3, #0]
   1a692:	b25b      	sxtb	r3, r3
   1a694:	4699      	mov	r9, r3
   1a696:	464b      	mov	r3, r9
   1a698:	2b02      	cmp	r3, #2
   1a69a:	d000      	beq.n	1a69e <pow+0x2b2>
   1a69c:	e736      	b.n	1a50c <pow+0x120>
   1a69e:	e73a      	b.n	1a516 <pow+0x12a>
   1a6a0:	2200      	movs	r2, #0
   1a6a2:	4641      	mov	r1, r8
   1a6a4:	4b26      	ldr	r3, [pc, #152]	; (1a740 <pow+0x354>)
   1a6a6:	0030      	movs	r0, r6
   1a6a8:	618a      	str	r2, [r1, #24]
   1a6aa:	61cb      	str	r3, [r1, #28]
   1a6ac:	2200      	movs	r2, #0
   1a6ae:	2300      	movs	r3, #0
   1a6b0:	0039      	movs	r1, r7
   1a6b2:	f002 fcbf 	bl	1d034 <__aeabi_dcmplt>
   1a6b6:	2800      	cmp	r0, #0
   1a6b8:	d0ed      	beq.n	1a696 <pow+0x2aa>
   1a6ba:	2200      	movs	r2, #0
   1a6bc:	4b1e      	ldr	r3, [pc, #120]	; (1a738 <pow+0x34c>)
   1a6be:	0020      	movs	r0, r4
   1a6c0:	0029      	movs	r1, r5
   1a6c2:	f004 fbef 	bl	1eea4 <__aeabi_dmul>
   1a6c6:	0004      	movs	r4, r0
   1a6c8:	000d      	movs	r5, r1
   1a6ca:	f002 fa15 	bl	1caf8 <rint>
   1a6ce:	0002      	movs	r2, r0
   1a6d0:	000b      	movs	r3, r1
   1a6d2:	0020      	movs	r0, r4
   1a6d4:	0029      	movs	r1, r5
   1a6d6:	f002 fca7 	bl	1d028 <__aeabi_dcmpeq>
   1a6da:	2800      	cmp	r0, #0
   1a6dc:	d1d7      	bne.n	1a68e <pow+0x2a2>
   1a6de:	2200      	movs	r2, #0
   1a6e0:	4b13      	ldr	r3, [pc, #76]	; (1a730 <pow+0x344>)
   1a6e2:	e7d1      	b.n	1a688 <pow+0x29c>
   1a6e4:	2301      	movs	r3, #1
   1a6e6:	4642      	mov	r2, r8
   1a6e8:	9304      	str	r3, [sp, #16]
   1a6ea:	4b0f      	ldr	r3, [pc, #60]	; (1a728 <pow+0x33c>)
   1a6ec:	6053      	str	r3, [r2, #4]
   1a6ee:	4643      	mov	r3, r8
   1a6f0:	464a      	mov	r2, r9
   1a6f2:	611c      	str	r4, [r3, #16]
   1a6f4:	615d      	str	r5, [r3, #20]
   1a6f6:	621a      	str	r2, [r3, #32]
   1a6f8:	609e      	str	r6, [r3, #8]
   1a6fa:	60df      	str	r7, [r3, #12]
   1a6fc:	2400      	movs	r4, #0
   1a6fe:	4653      	mov	r3, sl
   1a700:	571c      	ldrsb	r4, [r3, r4]
   1a702:	2c00      	cmp	r4, #0
   1a704:	d100      	bne.n	1a708 <pow+0x31c>
   1a706:	e70b      	b.n	1a520 <pow+0x134>
   1a708:	2300      	movs	r3, #0
   1a70a:	2200      	movs	r2, #0
   1a70c:	0019      	movs	r1, r3
   1a70e:	0010      	movs	r0, r2
   1a710:	f003 ff94 	bl	1e63c <__aeabi_ddiv>
   1a714:	4643      	mov	r3, r8
   1a716:	6198      	str	r0, [r3, #24]
   1a718:	61d9      	str	r1, [r3, #28]
   1a71a:	2c02      	cmp	r4, #2
   1a71c:	d100      	bne.n	1a720 <pow+0x334>
   1a71e:	e741      	b.n	1a5a4 <pow+0x1b8>
   1a720:	e703      	b.n	1a52a <pow+0x13e>
   1a722:	46c0      	nop			; (mov r8, r8)
   1a724:	200003ab 	.word	0x200003ab
   1a728:	00026868 	.word	0x00026868
   1a72c:	3ff00000 	.word	0x3ff00000
   1a730:	fff00000 	.word	0xfff00000
   1a734:	47efffff 	.word	0x47efffff
   1a738:	3fe00000 	.word	0x3fe00000
   1a73c:	c7efffff 	.word	0xc7efffff
   1a740:	7ff00000 	.word	0x7ff00000

0001a744 <sqrt>:
   1a744:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a746:	4647      	mov	r7, r8
   1a748:	46ce      	mov	lr, r9
   1a74a:	b580      	push	{r7, lr}
   1a74c:	b08d      	sub	sp, #52	; 0x34
   1a74e:	0004      	movs	r4, r0
   1a750:	000d      	movs	r5, r1
   1a752:	f001 f861 	bl	1b818 <__ieee754_sqrt>
   1a756:	4b29      	ldr	r3, [pc, #164]	; (1a7fc <sqrt+0xb8>)
   1a758:	0006      	movs	r6, r0
   1a75a:	781b      	ldrb	r3, [r3, #0]
   1a75c:	000f      	movs	r7, r1
   1a75e:	b25b      	sxtb	r3, r3
   1a760:	4698      	mov	r8, r3
   1a762:	3301      	adds	r3, #1
   1a764:	d010      	beq.n	1a788 <sqrt+0x44>
   1a766:	0022      	movs	r2, r4
   1a768:	002b      	movs	r3, r5
   1a76a:	0020      	movs	r0, r4
   1a76c:	0029      	movs	r1, r5
   1a76e:	f005 f92f 	bl	1f9d0 <__aeabi_dcmpun>
   1a772:	4681      	mov	r9, r0
   1a774:	2800      	cmp	r0, #0
   1a776:	d107      	bne.n	1a788 <sqrt+0x44>
   1a778:	2200      	movs	r2, #0
   1a77a:	2300      	movs	r3, #0
   1a77c:	0020      	movs	r0, r4
   1a77e:	0029      	movs	r1, r5
   1a780:	f002 fc58 	bl	1d034 <__aeabi_dcmplt>
   1a784:	2800      	cmp	r0, #0
   1a786:	d106      	bne.n	1a796 <sqrt+0x52>
   1a788:	0030      	movs	r0, r6
   1a78a:	0039      	movs	r1, r7
   1a78c:	b00d      	add	sp, #52	; 0x34
   1a78e:	bc0c      	pop	{r2, r3}
   1a790:	4690      	mov	r8, r2
   1a792:	4699      	mov	r9, r3
   1a794:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a796:	2301      	movs	r3, #1
   1a798:	9302      	str	r3, [sp, #8]
   1a79a:	4b19      	ldr	r3, [pc, #100]	; (1a800 <sqrt+0xbc>)
   1a79c:	9406      	str	r4, [sp, #24]
   1a79e:	9507      	str	r5, [sp, #28]
   1a7a0:	9303      	str	r3, [sp, #12]
   1a7a2:	464b      	mov	r3, r9
   1a7a4:	930a      	str	r3, [sp, #40]	; 0x28
   1a7a6:	4643      	mov	r3, r8
   1a7a8:	9404      	str	r4, [sp, #16]
   1a7aa:	9505      	str	r5, [sp, #20]
   1a7ac:	2b00      	cmp	r3, #0
   1a7ae:	d015      	beq.n	1a7dc <sqrt+0x98>
   1a7b0:	2300      	movs	r3, #0
   1a7b2:	2200      	movs	r2, #0
   1a7b4:	0019      	movs	r1, r3
   1a7b6:	0010      	movs	r0, r2
   1a7b8:	f003 ff40 	bl	1e63c <__aeabi_ddiv>
   1a7bc:	4643      	mov	r3, r8
   1a7be:	9008      	str	r0, [sp, #32]
   1a7c0:	9109      	str	r1, [sp, #36]	; 0x24
   1a7c2:	2b02      	cmp	r3, #2
   1a7c4:	d10e      	bne.n	1a7e4 <sqrt+0xa0>
   1a7c6:	f005 faad 	bl	1fd24 <__errno>
   1a7ca:	2321      	movs	r3, #33	; 0x21
   1a7cc:	6003      	str	r3, [r0, #0]
   1a7ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a7d0:	9301      	str	r3, [sp, #4]
   1a7d2:	2b00      	cmp	r3, #0
   1a7d4:	d10c      	bne.n	1a7f0 <sqrt+0xac>
   1a7d6:	9e08      	ldr	r6, [sp, #32]
   1a7d8:	9f09      	ldr	r7, [sp, #36]	; 0x24
   1a7da:	e7d5      	b.n	1a788 <sqrt+0x44>
   1a7dc:	2300      	movs	r3, #0
   1a7de:	2400      	movs	r4, #0
   1a7e0:	9308      	str	r3, [sp, #32]
   1a7e2:	9409      	str	r4, [sp, #36]	; 0x24
   1a7e4:	a802      	add	r0, sp, #8
   1a7e6:	f002 f97f 	bl	1cae8 <matherr>
   1a7ea:	2800      	cmp	r0, #0
   1a7ec:	d1ef      	bne.n	1a7ce <sqrt+0x8a>
   1a7ee:	e7ea      	b.n	1a7c6 <sqrt+0x82>
   1a7f0:	f005 fa98 	bl	1fd24 <__errno>
   1a7f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a7f6:	9301      	str	r3, [sp, #4]
   1a7f8:	6003      	str	r3, [r0, #0]
   1a7fa:	e7ec      	b.n	1a7d6 <sqrt+0x92>
   1a7fc:	200003ab 	.word	0x200003ab
   1a800:	0002686c 	.word	0x0002686c

0001a804 <__ieee754_atan2>:
   1a804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a806:	0015      	movs	r5, r2
   1a808:	4647      	mov	r7, r8
   1a80a:	46ce      	mov	lr, r9
   1a80c:	005a      	lsls	r2, r3, #1
   1a80e:	001c      	movs	r4, r3
   1a810:	426b      	negs	r3, r5
   1a812:	b580      	push	{r7, lr}
   1a814:	432b      	orrs	r3, r5
   1a816:	4f4b      	ldr	r7, [pc, #300]	; (1a944 <__ieee754_atan2+0x140>)
   1a818:	0852      	lsrs	r2, r2, #1
   1a81a:	0fdb      	lsrs	r3, r3, #31
   1a81c:	4688      	mov	r8, r1
   1a81e:	4313      	orrs	r3, r2
   1a820:	42bb      	cmp	r3, r7
   1a822:	d83a      	bhi.n	1a89a <__ieee754_atan2+0x96>
   1a824:	004b      	lsls	r3, r1, #1
   1a826:	085b      	lsrs	r3, r3, #1
   1a828:	4699      	mov	r9, r3
   1a82a:	464e      	mov	r6, r9
   1a82c:	4243      	negs	r3, r0
   1a82e:	4303      	orrs	r3, r0
   1a830:	0fdb      	lsrs	r3, r3, #31
   1a832:	4333      	orrs	r3, r6
   1a834:	42bb      	cmp	r3, r7
   1a836:	d830      	bhi.n	1a89a <__ieee754_atan2+0x96>
   1a838:	4b43      	ldr	r3, [pc, #268]	; (1a948 <__ieee754_atan2+0x144>)
   1a83a:	18e3      	adds	r3, r4, r3
   1a83c:	432b      	orrs	r3, r5
   1a83e:	d043      	beq.n	1a8c8 <__ieee754_atan2+0xc4>
   1a840:	2602      	movs	r6, #2
   1a842:	17a3      	asrs	r3, r4, #30
   1a844:	401e      	ands	r6, r3
   1a846:	0fcb      	lsrs	r3, r1, #31
   1a848:	431e      	orrs	r6, r3
   1a84a:	464b      	mov	r3, r9
   1a84c:	4303      	orrs	r3, r0
   1a84e:	d02e      	beq.n	1a8ae <__ieee754_atan2+0xaa>
   1a850:	0013      	movs	r3, r2
   1a852:	432b      	orrs	r3, r5
   1a854:	d032      	beq.n	1a8bc <__ieee754_atan2+0xb8>
   1a856:	42ba      	cmp	r2, r7
   1a858:	d041      	beq.n	1a8de <__ieee754_atan2+0xda>
   1a85a:	45b9      	cmp	r9, r7
   1a85c:	d02e      	beq.n	1a8bc <__ieee754_atan2+0xb8>
   1a85e:	464b      	mov	r3, r9
   1a860:	1a9a      	subs	r2, r3, r2
   1a862:	1512      	asrs	r2, r2, #20
   1a864:	2a3c      	cmp	r2, #60	; 0x3c
   1a866:	dc32      	bgt.n	1a8ce <__ieee754_atan2+0xca>
   1a868:	2c00      	cmp	r4, #0
   1a86a:	db55      	blt.n	1a918 <__ieee754_atan2+0x114>
   1a86c:	002a      	movs	r2, r5
   1a86e:	0023      	movs	r3, r4
   1a870:	f003 fee4 	bl	1e63c <__aeabi_ddiv>
   1a874:	f002 f892 	bl	1c99c <fabs>
   1a878:	f001 fef4 	bl	1c664 <atan>
   1a87c:	2e01      	cmp	r6, #1
   1a87e:	d046      	beq.n	1a90e <__ieee754_atan2+0x10a>
   1a880:	2e02      	cmp	r6, #2
   1a882:	d039      	beq.n	1a8f8 <__ieee754_atan2+0xf4>
   1a884:	2e00      	cmp	r6, #0
   1a886:	d00e      	beq.n	1a8a6 <__ieee754_atan2+0xa2>
   1a888:	4a30      	ldr	r2, [pc, #192]	; (1a94c <__ieee754_atan2+0x148>)
   1a88a:	4b31      	ldr	r3, [pc, #196]	; (1a950 <__ieee754_atan2+0x14c>)
   1a88c:	f004 fd8a 	bl	1f3a4 <__aeabi_dsub>
   1a890:	4a30      	ldr	r2, [pc, #192]	; (1a954 <__ieee754_atan2+0x150>)
   1a892:	4b31      	ldr	r3, [pc, #196]	; (1a958 <__ieee754_atan2+0x154>)
   1a894:	f004 fd86 	bl	1f3a4 <__aeabi_dsub>
   1a898:	e005      	b.n	1a8a6 <__ieee754_atan2+0xa2>
   1a89a:	0002      	movs	r2, r0
   1a89c:	000b      	movs	r3, r1
   1a89e:	0028      	movs	r0, r5
   1a8a0:	0021      	movs	r1, r4
   1a8a2:	f003 fbbb 	bl	1e01c <__aeabi_dadd>
   1a8a6:	bc0c      	pop	{r2, r3}
   1a8a8:	4690      	mov	r8, r2
   1a8aa:	4699      	mov	r9, r3
   1a8ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a8ae:	2e02      	cmp	r6, #2
   1a8b0:	d010      	beq.n	1a8d4 <__ieee754_atan2+0xd0>
   1a8b2:	2e03      	cmp	r6, #3
   1a8b4:	d1f7      	bne.n	1a8a6 <__ieee754_atan2+0xa2>
   1a8b6:	4827      	ldr	r0, [pc, #156]	; (1a954 <__ieee754_atan2+0x150>)
   1a8b8:	4928      	ldr	r1, [pc, #160]	; (1a95c <__ieee754_atan2+0x158>)
   1a8ba:	e7f4      	b.n	1a8a6 <__ieee754_atan2+0xa2>
   1a8bc:	4643      	mov	r3, r8
   1a8be:	4825      	ldr	r0, [pc, #148]	; (1a954 <__ieee754_atan2+0x150>)
   1a8c0:	2b00      	cmp	r3, #0
   1a8c2:	db0a      	blt.n	1a8da <__ieee754_atan2+0xd6>
   1a8c4:	4926      	ldr	r1, [pc, #152]	; (1a960 <__ieee754_atan2+0x15c>)
   1a8c6:	e7ee      	b.n	1a8a6 <__ieee754_atan2+0xa2>
   1a8c8:	f001 fecc 	bl	1c664 <atan>
   1a8cc:	e7eb      	b.n	1a8a6 <__ieee754_atan2+0xa2>
   1a8ce:	4821      	ldr	r0, [pc, #132]	; (1a954 <__ieee754_atan2+0x150>)
   1a8d0:	4923      	ldr	r1, [pc, #140]	; (1a960 <__ieee754_atan2+0x15c>)
   1a8d2:	e7d3      	b.n	1a87c <__ieee754_atan2+0x78>
   1a8d4:	481f      	ldr	r0, [pc, #124]	; (1a954 <__ieee754_atan2+0x150>)
   1a8d6:	4920      	ldr	r1, [pc, #128]	; (1a958 <__ieee754_atan2+0x154>)
   1a8d8:	e7e5      	b.n	1a8a6 <__ieee754_atan2+0xa2>
   1a8da:	4922      	ldr	r1, [pc, #136]	; (1a964 <__ieee754_atan2+0x160>)
   1a8dc:	e7e3      	b.n	1a8a6 <__ieee754_atan2+0xa2>
   1a8de:	4591      	cmp	r9, r2
   1a8e0:	d01f      	beq.n	1a922 <__ieee754_atan2+0x11e>
   1a8e2:	2e02      	cmp	r6, #2
   1a8e4:	d0f6      	beq.n	1a8d4 <__ieee754_atan2+0xd0>
   1a8e6:	2e03      	cmp	r6, #3
   1a8e8:	d0e5      	beq.n	1a8b6 <__ieee754_atan2+0xb2>
   1a8ea:	2000      	movs	r0, #0
   1a8ec:	2100      	movs	r1, #0
   1a8ee:	2e01      	cmp	r6, #1
   1a8f0:	d1d9      	bne.n	1a8a6 <__ieee754_atan2+0xa2>
   1a8f2:	2180      	movs	r1, #128	; 0x80
   1a8f4:	0609      	lsls	r1, r1, #24
   1a8f6:	e7d6      	b.n	1a8a6 <__ieee754_atan2+0xa2>
   1a8f8:	4a14      	ldr	r2, [pc, #80]	; (1a94c <__ieee754_atan2+0x148>)
   1a8fa:	4b15      	ldr	r3, [pc, #84]	; (1a950 <__ieee754_atan2+0x14c>)
   1a8fc:	f004 fd52 	bl	1f3a4 <__aeabi_dsub>
   1a900:	0002      	movs	r2, r0
   1a902:	000b      	movs	r3, r1
   1a904:	4813      	ldr	r0, [pc, #76]	; (1a954 <__ieee754_atan2+0x150>)
   1a906:	4914      	ldr	r1, [pc, #80]	; (1a958 <__ieee754_atan2+0x154>)
   1a908:	f004 fd4c 	bl	1f3a4 <__aeabi_dsub>
   1a90c:	e7cb      	b.n	1a8a6 <__ieee754_atan2+0xa2>
   1a90e:	2480      	movs	r4, #128	; 0x80
   1a910:	0624      	lsls	r4, r4, #24
   1a912:	190b      	adds	r3, r1, r4
   1a914:	0019      	movs	r1, r3
   1a916:	e7c6      	b.n	1a8a6 <__ieee754_atan2+0xa2>
   1a918:	323c      	adds	r2, #60	; 0x3c
   1a91a:	daa7      	bge.n	1a86c <__ieee754_atan2+0x68>
   1a91c:	2000      	movs	r0, #0
   1a91e:	2100      	movs	r1, #0
   1a920:	e7ac      	b.n	1a87c <__ieee754_atan2+0x78>
   1a922:	2e02      	cmp	r6, #2
   1a924:	d006      	beq.n	1a934 <__ieee754_atan2+0x130>
   1a926:	2e03      	cmp	r6, #3
   1a928:	d009      	beq.n	1a93e <__ieee754_atan2+0x13a>
   1a92a:	480a      	ldr	r0, [pc, #40]	; (1a954 <__ieee754_atan2+0x150>)
   1a92c:	2e01      	cmp	r6, #1
   1a92e:	d004      	beq.n	1a93a <__ieee754_atan2+0x136>
   1a930:	490d      	ldr	r1, [pc, #52]	; (1a968 <__ieee754_atan2+0x164>)
   1a932:	e7b8      	b.n	1a8a6 <__ieee754_atan2+0xa2>
   1a934:	480d      	ldr	r0, [pc, #52]	; (1a96c <__ieee754_atan2+0x168>)
   1a936:	490e      	ldr	r1, [pc, #56]	; (1a970 <__ieee754_atan2+0x16c>)
   1a938:	e7b5      	b.n	1a8a6 <__ieee754_atan2+0xa2>
   1a93a:	490e      	ldr	r1, [pc, #56]	; (1a974 <__ieee754_atan2+0x170>)
   1a93c:	e7b3      	b.n	1a8a6 <__ieee754_atan2+0xa2>
   1a93e:	480b      	ldr	r0, [pc, #44]	; (1a96c <__ieee754_atan2+0x168>)
   1a940:	490d      	ldr	r1, [pc, #52]	; (1a978 <__ieee754_atan2+0x174>)
   1a942:	e7b0      	b.n	1a8a6 <__ieee754_atan2+0xa2>
   1a944:	7ff00000 	.word	0x7ff00000
   1a948:	c0100000 	.word	0xc0100000
   1a94c:	33145c07 	.word	0x33145c07
   1a950:	3ca1a626 	.word	0x3ca1a626
   1a954:	54442d18 	.word	0x54442d18
   1a958:	400921fb 	.word	0x400921fb
   1a95c:	c00921fb 	.word	0xc00921fb
   1a960:	3ff921fb 	.word	0x3ff921fb
   1a964:	bff921fb 	.word	0xbff921fb
   1a968:	3fe921fb 	.word	0x3fe921fb
   1a96c:	7f3321d2 	.word	0x7f3321d2
   1a970:	4002d97c 	.word	0x4002d97c
   1a974:	bfe921fb 	.word	0xbfe921fb
   1a978:	c002d97c 	.word	0xc002d97c

0001a97c <__ieee754_pow>:
   1a97c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a97e:	4657      	mov	r7, sl
   1a980:	464e      	mov	r6, r9
   1a982:	4645      	mov	r5, r8
   1a984:	46de      	mov	lr, fp
   1a986:	001c      	movs	r4, r3
   1a988:	0013      	movs	r3, r2
   1a98a:	b5e0      	push	{r5, r6, r7, lr}
   1a98c:	0065      	lsls	r5, r4, #1
   1a98e:	b091      	sub	sp, #68	; 0x44
   1a990:	086d      	lsrs	r5, r5, #1
   1a992:	9300      	str	r3, [sp, #0]
   1a994:	9401      	str	r4, [sp, #4]
   1a996:	0007      	movs	r7, r0
   1a998:	000e      	movs	r6, r1
   1a99a:	4680      	mov	r8, r0
   1a99c:	4689      	mov	r9, r1
   1a99e:	46a2      	mov	sl, r4
   1a9a0:	432b      	orrs	r3, r5
   1a9a2:	d031      	beq.n	1aa08 <__ieee754_pow+0x8c>
   1a9a4:	4b67      	ldr	r3, [pc, #412]	; (1ab44 <__ieee754_pow+0x1c8>)
   1a9a6:	0074      	lsls	r4, r6, #1
   1a9a8:	0864      	lsrs	r4, r4, #1
   1a9aa:	429c      	cmp	r4, r3
   1a9ac:	dc27      	bgt.n	1a9fe <__ieee754_pow+0x82>
   1a9ae:	d024      	beq.n	1a9fa <__ieee754_pow+0x7e>
   1a9b0:	429d      	cmp	r5, r3
   1a9b2:	dc24      	bgt.n	1a9fe <__ieee754_pow+0x82>
   1a9b4:	4b63      	ldr	r3, [pc, #396]	; (1ab44 <__ieee754_pow+0x1c8>)
   1a9b6:	429d      	cmp	r5, r3
   1a9b8:	d100      	bne.n	1a9bc <__ieee754_pow+0x40>
   1a9ba:	e081      	b.n	1aac0 <__ieee754_pow+0x144>
   1a9bc:	2300      	movs	r3, #0
   1a9be:	469b      	mov	fp, r3
   1a9c0:	464b      	mov	r3, r9
   1a9c2:	2b00      	cmp	r3, #0
   1a9c4:	da00      	bge.n	1a9c8 <__ieee754_pow+0x4c>
   1a9c6:	e07f      	b.n	1aac8 <__ieee754_pow+0x14c>
   1a9c8:	2a00      	cmp	r2, #0
   1a9ca:	d12c      	bne.n	1aa26 <__ieee754_pow+0xaa>
   1a9cc:	4b5d      	ldr	r3, [pc, #372]	; (1ab44 <__ieee754_pow+0x1c8>)
   1a9ce:	429d      	cmp	r5, r3
   1a9d0:	d100      	bne.n	1a9d4 <__ieee754_pow+0x58>
   1a9d2:	e097      	b.n	1ab04 <__ieee754_pow+0x188>
   1a9d4:	4b5c      	ldr	r3, [pc, #368]	; (1ab48 <__ieee754_pow+0x1cc>)
   1a9d6:	429d      	cmp	r5, r3
   1a9d8:	d066      	beq.n	1aaa8 <__ieee754_pow+0x12c>
   1a9da:	2380      	movs	r3, #128	; 0x80
   1a9dc:	05db      	lsls	r3, r3, #23
   1a9de:	459a      	cmp	sl, r3
   1a9e0:	d100      	bne.n	1a9e4 <__ieee754_pow+0x68>
   1a9e2:	e3b9      	b.n	1b158 <__ieee754_pow+0x7dc>
   1a9e4:	4b59      	ldr	r3, [pc, #356]	; (1ab4c <__ieee754_pow+0x1d0>)
   1a9e6:	459a      	cmp	sl, r3
   1a9e8:	d11d      	bne.n	1aa26 <__ieee754_pow+0xaa>
   1a9ea:	464b      	mov	r3, r9
   1a9ec:	2b00      	cmp	r3, #0
   1a9ee:	db1a      	blt.n	1aa26 <__ieee754_pow+0xaa>
   1a9f0:	0038      	movs	r0, r7
   1a9f2:	0031      	movs	r1, r6
   1a9f4:	f000 ff10 	bl	1b818 <__ieee754_sqrt>
   1a9f8:	e008      	b.n	1aa0c <__ieee754_pow+0x90>
   1a9fa:	2800      	cmp	r0, #0
   1a9fc:	d00d      	beq.n	1aa1a <__ieee754_pow+0x9e>
   1a9fe:	4b54      	ldr	r3, [pc, #336]	; (1ab50 <__ieee754_pow+0x1d4>)
   1aa00:	469c      	mov	ip, r3
   1aa02:	4464      	add	r4, ip
   1aa04:	4327      	orrs	r7, r4
   1aa06:	d10a      	bne.n	1aa1e <__ieee754_pow+0xa2>
   1aa08:	2000      	movs	r0, #0
   1aa0a:	494f      	ldr	r1, [pc, #316]	; (1ab48 <__ieee754_pow+0x1cc>)
   1aa0c:	b011      	add	sp, #68	; 0x44
   1aa0e:	bc3c      	pop	{r2, r3, r4, r5}
   1aa10:	4690      	mov	r8, r2
   1aa12:	4699      	mov	r9, r3
   1aa14:	46a2      	mov	sl, r4
   1aa16:	46ab      	mov	fp, r5
   1aa18:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1aa1a:	42a5      	cmp	r5, r4
   1aa1c:	ddca      	ble.n	1a9b4 <__ieee754_pow+0x38>
   1aa1e:	484d      	ldr	r0, [pc, #308]	; (1ab54 <__ieee754_pow+0x1d8>)
   1aa20:	f002 f864 	bl	1caec <nan>
   1aa24:	e7f2      	b.n	1aa0c <__ieee754_pow+0x90>
   1aa26:	0038      	movs	r0, r7
   1aa28:	0031      	movs	r1, r6
   1aa2a:	f001 ffb7 	bl	1c99c <fabs>
   1aa2e:	4643      	mov	r3, r8
   1aa30:	2b00      	cmp	r3, #0
   1aa32:	d11d      	bne.n	1aa70 <__ieee754_pow+0xf4>
   1aa34:	2c00      	cmp	r4, #0
   1aa36:	d004      	beq.n	1aa42 <__ieee754_pow+0xc6>
   1aa38:	4a43      	ldr	r2, [pc, #268]	; (1ab48 <__ieee754_pow+0x1cc>)
   1aa3a:	00b3      	lsls	r3, r6, #2
   1aa3c:	089b      	lsrs	r3, r3, #2
   1aa3e:	4293      	cmp	r3, r2
   1aa40:	d116      	bne.n	1aa70 <__ieee754_pow+0xf4>
   1aa42:	4653      	mov	r3, sl
   1aa44:	2b00      	cmp	r3, #0
   1aa46:	da00      	bge.n	1aa4a <__ieee754_pow+0xce>
   1aa48:	e3c5      	b.n	1b1d6 <__ieee754_pow+0x85a>
   1aa4a:	464b      	mov	r3, r9
   1aa4c:	2b00      	cmp	r3, #0
   1aa4e:	dadd      	bge.n	1aa0c <__ieee754_pow+0x90>
   1aa50:	4b3f      	ldr	r3, [pc, #252]	; (1ab50 <__ieee754_pow+0x1d4>)
   1aa52:	469c      	mov	ip, r3
   1aa54:	465b      	mov	r3, fp
   1aa56:	4464      	add	r4, ip
   1aa58:	431c      	orrs	r4, r3
   1aa5a:	d101      	bne.n	1aa60 <__ieee754_pow+0xe4>
   1aa5c:	f000 fc53 	bl	1b306 <__ieee754_pow+0x98a>
   1aa60:	465b      	mov	r3, fp
   1aa62:	2b01      	cmp	r3, #1
   1aa64:	d1d2      	bne.n	1aa0c <__ieee754_pow+0x90>
   1aa66:	2480      	movs	r4, #128	; 0x80
   1aa68:	0624      	lsls	r4, r4, #24
   1aa6a:	190b      	adds	r3, r1, r4
   1aa6c:	0019      	movs	r1, r3
   1aa6e:	e7cd      	b.n	1aa0c <__ieee754_pow+0x90>
   1aa70:	0ff3      	lsrs	r3, r6, #31
   1aa72:	3b01      	subs	r3, #1
   1aa74:	4698      	mov	r8, r3
   1aa76:	465b      	mov	r3, fp
   1aa78:	4642      	mov	r2, r8
   1aa7a:	4313      	orrs	r3, r2
   1aa7c:	d057      	beq.n	1ab2e <__ieee754_pow+0x1b2>
   1aa7e:	4b36      	ldr	r3, [pc, #216]	; (1ab58 <__ieee754_pow+0x1dc>)
   1aa80:	429d      	cmp	r5, r3
   1aa82:	dd77      	ble.n	1ab74 <__ieee754_pow+0x1f8>
   1aa84:	4b35      	ldr	r3, [pc, #212]	; (1ab5c <__ieee754_pow+0x1e0>)
   1aa86:	429d      	cmp	r5, r3
   1aa88:	dc00      	bgt.n	1aa8c <__ieee754_pow+0x110>
   1aa8a:	e3b1      	b.n	1b1f0 <__ieee754_pow+0x874>
   1aa8c:	4b34      	ldr	r3, [pc, #208]	; (1ab60 <__ieee754_pow+0x1e4>)
   1aa8e:	429c      	cmp	r4, r3
   1aa90:	dc00      	bgt.n	1aa94 <__ieee754_pow+0x118>
   1aa92:	e3a8      	b.n	1b1e6 <__ieee754_pow+0x86a>
   1aa94:	4653      	mov	r3, sl
   1aa96:	2b00      	cmp	r3, #0
   1aa98:	dd43      	ble.n	1ab22 <__ieee754_pow+0x1a6>
   1aa9a:	4a32      	ldr	r2, [pc, #200]	; (1ab64 <__ieee754_pow+0x1e8>)
   1aa9c:	4b32      	ldr	r3, [pc, #200]	; (1ab68 <__ieee754_pow+0x1ec>)
   1aa9e:	0010      	movs	r0, r2
   1aaa0:	0019      	movs	r1, r3
   1aaa2:	f004 f9ff 	bl	1eea4 <__aeabi_dmul>
   1aaa6:	e7b1      	b.n	1aa0c <__ieee754_pow+0x90>
   1aaa8:	4653      	mov	r3, sl
   1aaaa:	0038      	movs	r0, r7
   1aaac:	0031      	movs	r1, r6
   1aaae:	2b00      	cmp	r3, #0
   1aab0:	daac      	bge.n	1aa0c <__ieee754_pow+0x90>
   1aab2:	003a      	movs	r2, r7
   1aab4:	0033      	movs	r3, r6
   1aab6:	2000      	movs	r0, #0
   1aab8:	4923      	ldr	r1, [pc, #140]	; (1ab48 <__ieee754_pow+0x1cc>)
   1aaba:	f003 fdbf 	bl	1e63c <__aeabi_ddiv>
   1aabe:	e7a5      	b.n	1aa0c <__ieee754_pow+0x90>
   1aac0:	2a00      	cmp	r2, #0
   1aac2:	d100      	bne.n	1aac6 <__ieee754_pow+0x14a>
   1aac4:	e77a      	b.n	1a9bc <__ieee754_pow+0x40>
   1aac6:	e79a      	b.n	1a9fe <__ieee754_pow+0x82>
   1aac8:	4b28      	ldr	r3, [pc, #160]	; (1ab6c <__ieee754_pow+0x1f0>)
   1aaca:	429d      	cmp	r5, r3
   1aacc:	dc2c      	bgt.n	1ab28 <__ieee754_pow+0x1ac>
   1aace:	4b24      	ldr	r3, [pc, #144]	; (1ab60 <__ieee754_pow+0x1e4>)
   1aad0:	429d      	cmp	r5, r3
   1aad2:	dc00      	bgt.n	1aad6 <__ieee754_pow+0x15a>
   1aad4:	e778      	b.n	1a9c8 <__ieee754_pow+0x4c>
   1aad6:	4926      	ldr	r1, [pc, #152]	; (1ab70 <__ieee754_pow+0x1f4>)
   1aad8:	152b      	asrs	r3, r5, #20
   1aada:	468c      	mov	ip, r1
   1aadc:	4463      	add	r3, ip
   1aade:	2b14      	cmp	r3, #20
   1aae0:	dc01      	bgt.n	1aae6 <__ieee754_pow+0x16a>
   1aae2:	f000 fbf3 	bl	1b2cc <__ieee754_pow+0x950>
   1aae6:	2134      	movs	r1, #52	; 0x34
   1aae8:	1acb      	subs	r3, r1, r3
   1aaea:	9900      	ldr	r1, [sp, #0]
   1aaec:	40d9      	lsrs	r1, r3
   1aaee:	0008      	movs	r0, r1
   1aaf0:	4098      	lsls	r0, r3
   1aaf2:	4282      	cmp	r2, r0
   1aaf4:	d000      	beq.n	1aaf8 <__ieee754_pow+0x17c>
   1aaf6:	e767      	b.n	1a9c8 <__ieee754_pow+0x4c>
   1aaf8:	2301      	movs	r3, #1
   1aafa:	4019      	ands	r1, r3
   1aafc:	3301      	adds	r3, #1
   1aafe:	1a5b      	subs	r3, r3, r1
   1ab00:	469b      	mov	fp, r3
   1ab02:	e761      	b.n	1a9c8 <__ieee754_pow+0x4c>
   1ab04:	4b12      	ldr	r3, [pc, #72]	; (1ab50 <__ieee754_pow+0x1d4>)
   1ab06:	18e3      	adds	r3, r4, r3
   1ab08:	431f      	orrs	r7, r3
   1ab0a:	d100      	bne.n	1ab0e <__ieee754_pow+0x192>
   1ab0c:	e77c      	b.n	1aa08 <__ieee754_pow+0x8c>
   1ab0e:	4b14      	ldr	r3, [pc, #80]	; (1ab60 <__ieee754_pow+0x1e4>)
   1ab10:	429c      	cmp	r4, r3
   1ab12:	dc00      	bgt.n	1ab16 <__ieee754_pow+0x19a>
   1ab14:	e327      	b.n	1b166 <__ieee754_pow+0x7ea>
   1ab16:	9800      	ldr	r0, [sp, #0]
   1ab18:	9901      	ldr	r1, [sp, #4]
   1ab1a:	4653      	mov	r3, sl
   1ab1c:	2b00      	cmp	r3, #0
   1ab1e:	db00      	blt.n	1ab22 <__ieee754_pow+0x1a6>
   1ab20:	e774      	b.n	1aa0c <__ieee754_pow+0x90>
   1ab22:	2000      	movs	r0, #0
   1ab24:	2100      	movs	r1, #0
   1ab26:	e771      	b.n	1aa0c <__ieee754_pow+0x90>
   1ab28:	2302      	movs	r3, #2
   1ab2a:	469b      	mov	fp, r3
   1ab2c:	e74c      	b.n	1a9c8 <__ieee754_pow+0x4c>
   1ab2e:	003a      	movs	r2, r7
   1ab30:	0033      	movs	r3, r6
   1ab32:	0038      	movs	r0, r7
   1ab34:	0031      	movs	r1, r6
   1ab36:	f004 fc35 	bl	1f3a4 <__aeabi_dsub>
   1ab3a:	0002      	movs	r2, r0
   1ab3c:	000b      	movs	r3, r1
   1ab3e:	f003 fd7d 	bl	1e63c <__aeabi_ddiv>
   1ab42:	e763      	b.n	1aa0c <__ieee754_pow+0x90>
   1ab44:	7ff00000 	.word	0x7ff00000
   1ab48:	3ff00000 	.word	0x3ff00000
   1ab4c:	3fe00000 	.word	0x3fe00000
   1ab50:	c0100000 	.word	0xc0100000
   1ab54:	000252c0 	.word	0x000252c0
   1ab58:	41e00000 	.word	0x41e00000
   1ab5c:	43f00000 	.word	0x43f00000
   1ab60:	3fefffff 	.word	0x3fefffff
   1ab64:	8800759c 	.word	0x8800759c
   1ab68:	7e37e43c 	.word	0x7e37e43c
   1ab6c:	433fffff 	.word	0x433fffff
   1ab70:	fffffc01 	.word	0xfffffc01
   1ab74:	4be9      	ldr	r3, [pc, #932]	; (1af1c <__ieee754_pow+0x5a0>)
   1ab76:	2200      	movs	r2, #0
   1ab78:	429c      	cmp	r4, r3
   1ab7a:	dc06      	bgt.n	1ab8a <__ieee754_pow+0x20e>
   1ab7c:	2200      	movs	r2, #0
   1ab7e:	4be8      	ldr	r3, [pc, #928]	; (1af20 <__ieee754_pow+0x5a4>)
   1ab80:	f004 f990 	bl	1eea4 <__aeabi_dmul>
   1ab84:	2235      	movs	r2, #53	; 0x35
   1ab86:	000c      	movs	r4, r1
   1ab88:	4252      	negs	r2, r2
   1ab8a:	4de6      	ldr	r5, [pc, #920]	; (1af24 <__ieee754_pow+0x5a8>)
   1ab8c:	1523      	asrs	r3, r4, #20
   1ab8e:	46ac      	mov	ip, r5
   1ab90:	4463      	add	r3, ip
   1ab92:	4699      	mov	r9, r3
   1ab94:	0324      	lsls	r4, r4, #12
   1ab96:	4de4      	ldr	r5, [pc, #912]	; (1af28 <__ieee754_pow+0x5ac>)
   1ab98:	4be4      	ldr	r3, [pc, #912]	; (1af2c <__ieee754_pow+0x5b0>)
   1ab9a:	0b24      	lsrs	r4, r4, #12
   1ab9c:	4491      	add	r9, r2
   1ab9e:	4325      	orrs	r5, r4
   1aba0:	429c      	cmp	r4, r3
   1aba2:	dd09      	ble.n	1abb8 <__ieee754_pow+0x23c>
   1aba4:	4be2      	ldr	r3, [pc, #904]	; (1af30 <__ieee754_pow+0x5b4>)
   1aba6:	429c      	cmp	r4, r3
   1aba8:	dc00      	bgt.n	1abac <__ieee754_pow+0x230>
   1abaa:	e3b6      	b.n	1b31a <__ieee754_pow+0x99e>
   1abac:	2301      	movs	r3, #1
   1abae:	469c      	mov	ip, r3
   1abb0:	4be0      	ldr	r3, [pc, #896]	; (1af34 <__ieee754_pow+0x5b8>)
   1abb2:	44e1      	add	r9, ip
   1abb4:	469c      	mov	ip, r3
   1abb6:	4465      	add	r5, ip
   1abb8:	2300      	movs	r3, #0
   1abba:	2400      	movs	r4, #0
   1abbc:	2200      	movs	r2, #0
   1abbe:	9308      	str	r3, [sp, #32]
   1abc0:	9409      	str	r4, [sp, #36]	; 0x24
   1abc2:	930c      	str	r3, [sp, #48]	; 0x30
   1abc4:	940d      	str	r4, [sp, #52]	; 0x34
   1abc6:	2400      	movs	r4, #0
   1abc8:	4bd7      	ldr	r3, [pc, #860]	; (1af28 <__ieee754_pow+0x5ac>)
   1abca:	9206      	str	r2, [sp, #24]
   1abcc:	9307      	str	r3, [sp, #28]
   1abce:	9a06      	ldr	r2, [sp, #24]
   1abd0:	9b07      	ldr	r3, [sp, #28]
   1abd2:	0029      	movs	r1, r5
   1abd4:	900a      	str	r0, [sp, #40]	; 0x28
   1abd6:	910b      	str	r1, [sp, #44]	; 0x2c
   1abd8:	f004 fbe4 	bl	1f3a4 <__aeabi_dsub>
   1abdc:	9a06      	ldr	r2, [sp, #24]
   1abde:	9b07      	ldr	r3, [sp, #28]
   1abe0:	0006      	movs	r6, r0
   1abe2:	000f      	movs	r7, r1
   1abe4:	980a      	ldr	r0, [sp, #40]	; 0x28
   1abe6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1abe8:	f003 fa18 	bl	1e01c <__aeabi_dadd>
   1abec:	0002      	movs	r2, r0
   1abee:	000b      	movs	r3, r1
   1abf0:	2000      	movs	r0, #0
   1abf2:	49cd      	ldr	r1, [pc, #820]	; (1af28 <__ieee754_pow+0x5ac>)
   1abf4:	f003 fd22 	bl	1e63c <__aeabi_ddiv>
   1abf8:	000a      	movs	r2, r1
   1abfa:	0001      	movs	r1, r0
   1abfc:	0013      	movs	r3, r2
   1abfe:	910e      	str	r1, [sp, #56]	; 0x38
   1ac00:	920f      	str	r2, [sp, #60]	; 0x3c
   1ac02:	0002      	movs	r2, r0
   1ac04:	0039      	movs	r1, r7
   1ac06:	0030      	movs	r0, r6
   1ac08:	f004 f94c 	bl	1eea4 <__aeabi_dmul>
   1ac0c:	000a      	movs	r2, r1
   1ac0e:	0001      	movs	r1, r0
   1ac10:	2080      	movs	r0, #128	; 0x80
   1ac12:	9104      	str	r1, [sp, #16]
   1ac14:	9205      	str	r2, [sp, #20]
   1ac16:	0013      	movs	r3, r2
   1ac18:	2200      	movs	r2, #0
   1ac1a:	1069      	asrs	r1, r5, #1
   1ac1c:	2580      	movs	r5, #128	; 0x80
   1ac1e:	0300      	lsls	r0, r0, #12
   1ac20:	4684      	mov	ip, r0
   1ac22:	9202      	str	r2, [sp, #8]
   1ac24:	9303      	str	r3, [sp, #12]
   1ac26:	2200      	movs	r2, #0
   1ac28:	05ad      	lsls	r5, r5, #22
   1ac2a:	430d      	orrs	r5, r1
   1ac2c:	4465      	add	r5, ip
   1ac2e:	192b      	adds	r3, r5, r4
   1ac30:	9802      	ldr	r0, [sp, #8]
   1ac32:	9903      	ldr	r1, [sp, #12]
   1ac34:	0014      	movs	r4, r2
   1ac36:	001d      	movs	r5, r3
   1ac38:	f004 f934 	bl	1eea4 <__aeabi_dmul>
   1ac3c:	0002      	movs	r2, r0
   1ac3e:	000b      	movs	r3, r1
   1ac40:	0030      	movs	r0, r6
   1ac42:	0039      	movs	r1, r7
   1ac44:	f004 fbae 	bl	1f3a4 <__aeabi_dsub>
   1ac48:	9a06      	ldr	r2, [sp, #24]
   1ac4a:	9b07      	ldr	r3, [sp, #28]
   1ac4c:	0006      	movs	r6, r0
   1ac4e:	000f      	movs	r7, r1
   1ac50:	0020      	movs	r0, r4
   1ac52:	0029      	movs	r1, r5
   1ac54:	f004 fba6 	bl	1f3a4 <__aeabi_dsub>
   1ac58:	0002      	movs	r2, r0
   1ac5a:	000b      	movs	r3, r1
   1ac5c:	980a      	ldr	r0, [sp, #40]	; 0x28
   1ac5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1ac60:	f004 fba0 	bl	1f3a4 <__aeabi_dsub>
   1ac64:	9a02      	ldr	r2, [sp, #8]
   1ac66:	9b03      	ldr	r3, [sp, #12]
   1ac68:	f004 f91c 	bl	1eea4 <__aeabi_dmul>
   1ac6c:	0002      	movs	r2, r0
   1ac6e:	000b      	movs	r3, r1
   1ac70:	0030      	movs	r0, r6
   1ac72:	0039      	movs	r1, r7
   1ac74:	f004 fb96 	bl	1f3a4 <__aeabi_dsub>
   1ac78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1ac7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ac7c:	f004 f912 	bl	1eea4 <__aeabi_dmul>
   1ac80:	9d04      	ldr	r5, [sp, #16]
   1ac82:	9e05      	ldr	r6, [sp, #20]
   1ac84:	9006      	str	r0, [sp, #24]
   1ac86:	9107      	str	r1, [sp, #28]
   1ac88:	002a      	movs	r2, r5
   1ac8a:	0033      	movs	r3, r6
   1ac8c:	0028      	movs	r0, r5
   1ac8e:	0031      	movs	r1, r6
   1ac90:	f004 f908 	bl	1eea4 <__aeabi_dmul>
   1ac94:	0006      	movs	r6, r0
   1ac96:	000f      	movs	r7, r1
   1ac98:	4aa7      	ldr	r2, [pc, #668]	; (1af38 <__ieee754_pow+0x5bc>)
   1ac9a:	4ba8      	ldr	r3, [pc, #672]	; (1af3c <__ieee754_pow+0x5c0>)
   1ac9c:	f004 f902 	bl	1eea4 <__aeabi_dmul>
   1aca0:	4aa7      	ldr	r2, [pc, #668]	; (1af40 <__ieee754_pow+0x5c4>)
   1aca2:	4ba8      	ldr	r3, [pc, #672]	; (1af44 <__ieee754_pow+0x5c8>)
   1aca4:	f003 f9ba 	bl	1e01c <__aeabi_dadd>
   1aca8:	0032      	movs	r2, r6
   1acaa:	003b      	movs	r3, r7
   1acac:	f004 f8fa 	bl	1eea4 <__aeabi_dmul>
   1acb0:	4aa5      	ldr	r2, [pc, #660]	; (1af48 <__ieee754_pow+0x5cc>)
   1acb2:	4ba6      	ldr	r3, [pc, #664]	; (1af4c <__ieee754_pow+0x5d0>)
   1acb4:	f003 f9b2 	bl	1e01c <__aeabi_dadd>
   1acb8:	0032      	movs	r2, r6
   1acba:	003b      	movs	r3, r7
   1acbc:	f004 f8f2 	bl	1eea4 <__aeabi_dmul>
   1acc0:	4aa3      	ldr	r2, [pc, #652]	; (1af50 <__ieee754_pow+0x5d4>)
   1acc2:	4ba4      	ldr	r3, [pc, #656]	; (1af54 <__ieee754_pow+0x5d8>)
   1acc4:	f003 f9aa 	bl	1e01c <__aeabi_dadd>
   1acc8:	0032      	movs	r2, r6
   1acca:	003b      	movs	r3, r7
   1accc:	f004 f8ea 	bl	1eea4 <__aeabi_dmul>
   1acd0:	4aa1      	ldr	r2, [pc, #644]	; (1af58 <__ieee754_pow+0x5dc>)
   1acd2:	4ba2      	ldr	r3, [pc, #648]	; (1af5c <__ieee754_pow+0x5e0>)
   1acd4:	f003 f9a2 	bl	1e01c <__aeabi_dadd>
   1acd8:	0032      	movs	r2, r6
   1acda:	003b      	movs	r3, r7
   1acdc:	f004 f8e2 	bl	1eea4 <__aeabi_dmul>
   1ace0:	4a9f      	ldr	r2, [pc, #636]	; (1af60 <__ieee754_pow+0x5e4>)
   1ace2:	4ba0      	ldr	r3, [pc, #640]	; (1af64 <__ieee754_pow+0x5e8>)
   1ace4:	f003 f99a 	bl	1e01c <__aeabi_dadd>
   1ace8:	0032      	movs	r2, r6
   1acea:	0004      	movs	r4, r0
   1acec:	000d      	movs	r5, r1
   1acee:	003b      	movs	r3, r7
   1acf0:	0030      	movs	r0, r6
   1acf2:	0039      	movs	r1, r7
   1acf4:	f004 f8d6 	bl	1eea4 <__aeabi_dmul>
   1acf8:	0002      	movs	r2, r0
   1acfa:	000b      	movs	r3, r1
   1acfc:	0020      	movs	r0, r4
   1acfe:	0029      	movs	r1, r5
   1ad00:	f004 f8d0 	bl	1eea4 <__aeabi_dmul>
   1ad04:	9e02      	ldr	r6, [sp, #8]
   1ad06:	9f03      	ldr	r7, [sp, #12]
   1ad08:	0004      	movs	r4, r0
   1ad0a:	000d      	movs	r5, r1
   1ad0c:	9804      	ldr	r0, [sp, #16]
   1ad0e:	9905      	ldr	r1, [sp, #20]
   1ad10:	0032      	movs	r2, r6
   1ad12:	003b      	movs	r3, r7
   1ad14:	f003 f982 	bl	1e01c <__aeabi_dadd>
   1ad18:	9a06      	ldr	r2, [sp, #24]
   1ad1a:	9b07      	ldr	r3, [sp, #28]
   1ad1c:	f004 f8c2 	bl	1eea4 <__aeabi_dmul>
   1ad20:	0022      	movs	r2, r4
   1ad22:	002b      	movs	r3, r5
   1ad24:	f003 f97a 	bl	1e01c <__aeabi_dadd>
   1ad28:	0032      	movs	r2, r6
   1ad2a:	900a      	str	r0, [sp, #40]	; 0x28
   1ad2c:	910b      	str	r1, [sp, #44]	; 0x2c
   1ad2e:	003b      	movs	r3, r7
   1ad30:	0030      	movs	r0, r6
   1ad32:	0039      	movs	r1, r7
   1ad34:	9602      	str	r6, [sp, #8]
   1ad36:	9703      	str	r7, [sp, #12]
   1ad38:	f004 f8b4 	bl	1eea4 <__aeabi_dmul>
   1ad3c:	2200      	movs	r2, #0
   1ad3e:	4b8a      	ldr	r3, [pc, #552]	; (1af68 <__ieee754_pow+0x5ec>)
   1ad40:	0004      	movs	r4, r0
   1ad42:	000d      	movs	r5, r1
   1ad44:	f003 f96a 	bl	1e01c <__aeabi_dadd>
   1ad48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1ad4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ad4c:	f003 f966 	bl	1e01c <__aeabi_dadd>
   1ad50:	2600      	movs	r6, #0
   1ad52:	000f      	movs	r7, r1
   1ad54:	0032      	movs	r2, r6
   1ad56:	000b      	movs	r3, r1
   1ad58:	9802      	ldr	r0, [sp, #8]
   1ad5a:	9903      	ldr	r1, [sp, #12]
   1ad5c:	f004 f8a2 	bl	1eea4 <__aeabi_dmul>
   1ad60:	2200      	movs	r2, #0
   1ad62:	9002      	str	r0, [sp, #8]
   1ad64:	9103      	str	r1, [sp, #12]
   1ad66:	4b80      	ldr	r3, [pc, #512]	; (1af68 <__ieee754_pow+0x5ec>)
   1ad68:	0030      	movs	r0, r6
   1ad6a:	0039      	movs	r1, r7
   1ad6c:	f004 fb1a 	bl	1f3a4 <__aeabi_dsub>
   1ad70:	0022      	movs	r2, r4
   1ad72:	002b      	movs	r3, r5
   1ad74:	f004 fb16 	bl	1f3a4 <__aeabi_dsub>
   1ad78:	0002      	movs	r2, r0
   1ad7a:	000b      	movs	r3, r1
   1ad7c:	980a      	ldr	r0, [sp, #40]	; 0x28
   1ad7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1ad80:	f004 fb10 	bl	1f3a4 <__aeabi_dsub>
   1ad84:	9a04      	ldr	r2, [sp, #16]
   1ad86:	9b05      	ldr	r3, [sp, #20]
   1ad88:	f004 f88c 	bl	1eea4 <__aeabi_dmul>
   1ad8c:	0032      	movs	r2, r6
   1ad8e:	0004      	movs	r4, r0
   1ad90:	000d      	movs	r5, r1
   1ad92:	9806      	ldr	r0, [sp, #24]
   1ad94:	9907      	ldr	r1, [sp, #28]
   1ad96:	003b      	movs	r3, r7
   1ad98:	f004 f884 	bl	1eea4 <__aeabi_dmul>
   1ad9c:	0002      	movs	r2, r0
   1ad9e:	000b      	movs	r3, r1
   1ada0:	0020      	movs	r0, r4
   1ada2:	0029      	movs	r1, r5
   1ada4:	f003 f93a 	bl	1e01c <__aeabi_dadd>
   1ada8:	0004      	movs	r4, r0
   1adaa:	000d      	movs	r5, r1
   1adac:	0002      	movs	r2, r0
   1adae:	000b      	movs	r3, r1
   1adb0:	9802      	ldr	r0, [sp, #8]
   1adb2:	9903      	ldr	r1, [sp, #12]
   1adb4:	f003 f932 	bl	1e01c <__aeabi_dadd>
   1adb8:	2600      	movs	r6, #0
   1adba:	22e0      	movs	r2, #224	; 0xe0
   1adbc:	4b6b      	ldr	r3, [pc, #428]	; (1af6c <__ieee754_pow+0x5f0>)
   1adbe:	0612      	lsls	r2, r2, #24
   1adc0:	0030      	movs	r0, r6
   1adc2:	000f      	movs	r7, r1
   1adc4:	f004 f86e 	bl	1eea4 <__aeabi_dmul>
   1adc8:	9a02      	ldr	r2, [sp, #8]
   1adca:	9b03      	ldr	r3, [sp, #12]
   1adcc:	9004      	str	r0, [sp, #16]
   1adce:	9105      	str	r1, [sp, #20]
   1add0:	0030      	movs	r0, r6
   1add2:	0039      	movs	r1, r7
   1add4:	f004 fae6 	bl	1f3a4 <__aeabi_dsub>
   1add8:	0002      	movs	r2, r0
   1adda:	000b      	movs	r3, r1
   1addc:	0020      	movs	r0, r4
   1adde:	0029      	movs	r1, r5
   1ade0:	f004 fae0 	bl	1f3a4 <__aeabi_dsub>
   1ade4:	4a62      	ldr	r2, [pc, #392]	; (1af70 <__ieee754_pow+0x5f4>)
   1ade6:	4b61      	ldr	r3, [pc, #388]	; (1af6c <__ieee754_pow+0x5f0>)
   1ade8:	f004 f85c 	bl	1eea4 <__aeabi_dmul>
   1adec:	4a61      	ldr	r2, [pc, #388]	; (1af74 <__ieee754_pow+0x5f8>)
   1adee:	0004      	movs	r4, r0
   1adf0:	000d      	movs	r5, r1
   1adf2:	4b61      	ldr	r3, [pc, #388]	; (1af78 <__ieee754_pow+0x5fc>)
   1adf4:	0030      	movs	r0, r6
   1adf6:	0039      	movs	r1, r7
   1adf8:	f004 f854 	bl	1eea4 <__aeabi_dmul>
   1adfc:	0002      	movs	r2, r0
   1adfe:	000b      	movs	r3, r1
   1ae00:	0020      	movs	r0, r4
   1ae02:	0029      	movs	r1, r5
   1ae04:	f003 f90a 	bl	1e01c <__aeabi_dadd>
   1ae08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1ae0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1ae0c:	f003 f906 	bl	1e01c <__aeabi_dadd>
   1ae10:	0006      	movs	r6, r0
   1ae12:	4648      	mov	r0, r9
   1ae14:	000f      	movs	r7, r1
   1ae16:	f004 fe2f 	bl	1fa78 <__aeabi_i2d>
   1ae1a:	0004      	movs	r4, r0
   1ae1c:	000d      	movs	r5, r1
   1ae1e:	9804      	ldr	r0, [sp, #16]
   1ae20:	9905      	ldr	r1, [sp, #20]
   1ae22:	0032      	movs	r2, r6
   1ae24:	003b      	movs	r3, r7
   1ae26:	f003 f8f9 	bl	1e01c <__aeabi_dadd>
   1ae2a:	9a08      	ldr	r2, [sp, #32]
   1ae2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ae2e:	f003 f8f5 	bl	1e01c <__aeabi_dadd>
   1ae32:	0022      	movs	r2, r4
   1ae34:	002b      	movs	r3, r5
   1ae36:	f003 f8f1 	bl	1e01c <__aeabi_dadd>
   1ae3a:	2000      	movs	r0, #0
   1ae3c:	0022      	movs	r2, r4
   1ae3e:	002b      	movs	r3, r5
   1ae40:	9002      	str	r0, [sp, #8]
   1ae42:	9103      	str	r1, [sp, #12]
   1ae44:	f004 faae 	bl	1f3a4 <__aeabi_dsub>
   1ae48:	9a08      	ldr	r2, [sp, #32]
   1ae4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ae4c:	f004 faaa 	bl	1f3a4 <__aeabi_dsub>
   1ae50:	9a04      	ldr	r2, [sp, #16]
   1ae52:	9b05      	ldr	r3, [sp, #20]
   1ae54:	f004 faa6 	bl	1f3a4 <__aeabi_dsub>
   1ae58:	0002      	movs	r2, r0
   1ae5a:	000b      	movs	r3, r1
   1ae5c:	0030      	movs	r0, r6
   1ae5e:	0039      	movs	r1, r7
   1ae60:	f004 faa0 	bl	1f3a4 <__aeabi_dsub>
   1ae64:	9004      	str	r0, [sp, #16]
   1ae66:	9105      	str	r1, [sp, #20]
   1ae68:	465b      	mov	r3, fp
   1ae6a:	4642      	mov	r2, r8
   1ae6c:	3b01      	subs	r3, #1
   1ae6e:	4313      	orrs	r3, r2
   1ae70:	d100      	bne.n	1ae74 <__ieee754_pow+0x4f8>
   1ae72:	e1ab      	b.n	1b1cc <__ieee754_pow+0x850>
   1ae74:	2300      	movs	r3, #0
   1ae76:	4c2c      	ldr	r4, [pc, #176]	; (1af28 <__ieee754_pow+0x5ac>)
   1ae78:	9306      	str	r3, [sp, #24]
   1ae7a:	9407      	str	r4, [sp, #28]
   1ae7c:	9800      	ldr	r0, [sp, #0]
   1ae7e:	9901      	ldr	r1, [sp, #4]
   1ae80:	2600      	movs	r6, #0
   1ae82:	000b      	movs	r3, r1
   1ae84:	0032      	movs	r2, r6
   1ae86:	000f      	movs	r7, r1
   1ae88:	f004 fa8c 	bl	1f3a4 <__aeabi_dsub>
   1ae8c:	9a02      	ldr	r2, [sp, #8]
   1ae8e:	9b03      	ldr	r3, [sp, #12]
   1ae90:	f004 f808 	bl	1eea4 <__aeabi_dmul>
   1ae94:	9a00      	ldr	r2, [sp, #0]
   1ae96:	9b01      	ldr	r3, [sp, #4]
   1ae98:	0004      	movs	r4, r0
   1ae9a:	000d      	movs	r5, r1
   1ae9c:	9804      	ldr	r0, [sp, #16]
   1ae9e:	9905      	ldr	r1, [sp, #20]
   1aea0:	f004 f800 	bl	1eea4 <__aeabi_dmul>
   1aea4:	0002      	movs	r2, r0
   1aea6:	000b      	movs	r3, r1
   1aea8:	0020      	movs	r0, r4
   1aeaa:	0029      	movs	r1, r5
   1aeac:	f003 f8b6 	bl	1e01c <__aeabi_dadd>
   1aeb0:	0004      	movs	r4, r0
   1aeb2:	000d      	movs	r5, r1
   1aeb4:	9802      	ldr	r0, [sp, #8]
   1aeb6:	9903      	ldr	r1, [sp, #12]
   1aeb8:	0032      	movs	r2, r6
   1aeba:	003b      	movs	r3, r7
   1aebc:	9400      	str	r4, [sp, #0]
   1aebe:	9501      	str	r5, [sp, #4]
   1aec0:	f003 fff0 	bl	1eea4 <__aeabi_dmul>
   1aec4:	0002      	movs	r2, r0
   1aec6:	000b      	movs	r3, r1
   1aec8:	0006      	movs	r6, r0
   1aeca:	000f      	movs	r7, r1
   1aecc:	0020      	movs	r0, r4
   1aece:	0029      	movs	r1, r5
   1aed0:	f003 f8a4 	bl	1e01c <__aeabi_dadd>
   1aed4:	4b29      	ldr	r3, [pc, #164]	; (1af7c <__ieee754_pow+0x600>)
   1aed6:	0004      	movs	r4, r0
   1aed8:	000d      	movs	r5, r1
   1aeda:	0002      	movs	r2, r0
   1aedc:	468b      	mov	fp, r1
   1aede:	4299      	cmp	r1, r3
   1aee0:	dc00      	bgt.n	1aee4 <__ieee754_pow+0x568>
   1aee2:	e14f      	b.n	1b184 <__ieee754_pow+0x808>
   1aee4:	4b26      	ldr	r3, [pc, #152]	; (1af80 <__ieee754_pow+0x604>)
   1aee6:	18cb      	adds	r3, r1, r3
   1aee8:	4303      	orrs	r3, r0
   1aeea:	d000      	beq.n	1aeee <__ieee754_pow+0x572>
   1aeec:	e1e2      	b.n	1b2b4 <__ieee754_pow+0x938>
   1aeee:	9800      	ldr	r0, [sp, #0]
   1aef0:	9901      	ldr	r1, [sp, #4]
   1aef2:	4a24      	ldr	r2, [pc, #144]	; (1af84 <__ieee754_pow+0x608>)
   1aef4:	4b24      	ldr	r3, [pc, #144]	; (1af88 <__ieee754_pow+0x60c>)
   1aef6:	f003 f891 	bl	1e01c <__aeabi_dadd>
   1aefa:	0032      	movs	r2, r6
   1aefc:	9002      	str	r0, [sp, #8]
   1aefe:	9103      	str	r1, [sp, #12]
   1af00:	003b      	movs	r3, r7
   1af02:	0020      	movs	r0, r4
   1af04:	0029      	movs	r1, r5
   1af06:	f004 fa4d 	bl	1f3a4 <__aeabi_dsub>
   1af0a:	0002      	movs	r2, r0
   1af0c:	000b      	movs	r3, r1
   1af0e:	9802      	ldr	r0, [sp, #8]
   1af10:	9903      	ldr	r1, [sp, #12]
   1af12:	f002 f8a3 	bl	1d05c <__aeabi_dcmpgt>
   1af16:	46aa      	mov	sl, r5
   1af18:	e038      	b.n	1af8c <__ieee754_pow+0x610>
   1af1a:	46c0      	nop			; (mov r8, r8)
   1af1c:	000fffff 	.word	0x000fffff
   1af20:	43400000 	.word	0x43400000
   1af24:	fffffc01 	.word	0xfffffc01
   1af28:	3ff00000 	.word	0x3ff00000
   1af2c:	0003988e 	.word	0x0003988e
   1af30:	000bb679 	.word	0x000bb679
   1af34:	fff00000 	.word	0xfff00000
   1af38:	4a454eef 	.word	0x4a454eef
   1af3c:	3fca7e28 	.word	0x3fca7e28
   1af40:	93c9db65 	.word	0x93c9db65
   1af44:	3fcd864a 	.word	0x3fcd864a
   1af48:	a91d4101 	.word	0xa91d4101
   1af4c:	3fd17460 	.word	0x3fd17460
   1af50:	518f264d 	.word	0x518f264d
   1af54:	3fd55555 	.word	0x3fd55555
   1af58:	db6fabff 	.word	0xdb6fabff
   1af5c:	3fdb6db6 	.word	0x3fdb6db6
   1af60:	33333303 	.word	0x33333303
   1af64:	3fe33333 	.word	0x3fe33333
   1af68:	40080000 	.word	0x40080000
   1af6c:	3feec709 	.word	0x3feec709
   1af70:	dc3a03fd 	.word	0xdc3a03fd
   1af74:	145b01f5 	.word	0x145b01f5
   1af78:	be3e2fe0 	.word	0xbe3e2fe0
   1af7c:	408fffff 	.word	0x408fffff
   1af80:	bf700000 	.word	0xbf700000
   1af84:	652b82fe 	.word	0x652b82fe
   1af88:	3c971547 	.word	0x3c971547
   1af8c:	2800      	cmp	r0, #0
   1af8e:	d000      	beq.n	1af92 <__ieee754_pow+0x616>
   1af90:	e190      	b.n	1b2b4 <__ieee754_pow+0x938>
   1af92:	4aec      	ldr	r2, [pc, #944]	; (1b344 <__ieee754_pow+0x9c8>)
   1af94:	4653      	mov	r3, sl
   1af96:	4694      	mov	ip, r2
   1af98:	2280      	movs	r2, #128	; 0x80
   1af9a:	0352      	lsls	r2, r2, #13
   1af9c:	0011      	movs	r1, r2
   1af9e:	151b      	asrs	r3, r3, #20
   1afa0:	4463      	add	r3, ip
   1afa2:	4119      	asrs	r1, r3
   1afa4:	000b      	movs	r3, r1
   1afa6:	4690      	mov	r8, r2
   1afa8:	4ae7      	ldr	r2, [pc, #924]	; (1b348 <__ieee754_pow+0x9cc>)
   1afaa:	445b      	add	r3, fp
   1afac:	4694      	mov	ip, r2
   1afae:	005c      	lsls	r4, r3, #1
   1afb0:	0d64      	lsrs	r4, r4, #21
   1afb2:	4de6      	ldr	r5, [pc, #920]	; (1b34c <__ieee754_pow+0x9d0>)
   1afb4:	4464      	add	r4, ip
   1afb6:	4125      	asrs	r5, r4
   1afb8:	001a      	movs	r2, r3
   1afba:	43aa      	bics	r2, r5
   1afbc:	0011      	movs	r1, r2
   1afbe:	4642      	mov	r2, r8
   1afc0:	031b      	lsls	r3, r3, #12
   1afc2:	0b1b      	lsrs	r3, r3, #12
   1afc4:	4313      	orrs	r3, r2
   1afc6:	2214      	movs	r2, #20
   1afc8:	1b14      	subs	r4, r2, r4
   1afca:	4123      	asrs	r3, r4
   1afcc:	4699      	mov	r9, r3
   1afce:	465b      	mov	r3, fp
   1afd0:	2000      	movs	r0, #0
   1afd2:	2b00      	cmp	r3, #0
   1afd4:	da00      	bge.n	1afd8 <__ieee754_pow+0x65c>
   1afd6:	e1b0      	b.n	1b33a <__ieee754_pow+0x9be>
   1afd8:	0002      	movs	r2, r0
   1afda:	000b      	movs	r3, r1
   1afdc:	0030      	movs	r0, r6
   1afde:	0039      	movs	r1, r7
   1afe0:	f004 f9e0 	bl	1f3a4 <__aeabi_dsub>
   1afe4:	000b      	movs	r3, r1
   1afe6:	0002      	movs	r2, r0
   1afe8:	0006      	movs	r6, r0
   1afea:	000f      	movs	r7, r1
   1afec:	9800      	ldr	r0, [sp, #0]
   1afee:	9901      	ldr	r1, [sp, #4]
   1aff0:	f003 f814 	bl	1e01c <__aeabi_dadd>
   1aff4:	464b      	mov	r3, r9
   1aff6:	051b      	lsls	r3, r3, #20
   1aff8:	000d      	movs	r5, r1
   1affa:	4698      	mov	r8, r3
   1affc:	2400      	movs	r4, #0
   1affe:	2200      	movs	r2, #0
   1b000:	4bd3      	ldr	r3, [pc, #844]	; (1b350 <__ieee754_pow+0x9d4>)
   1b002:	0020      	movs	r0, r4
   1b004:	0029      	movs	r1, r5
   1b006:	f003 ff4d 	bl	1eea4 <__aeabi_dmul>
   1b00a:	0032      	movs	r2, r6
   1b00c:	9002      	str	r0, [sp, #8]
   1b00e:	9103      	str	r1, [sp, #12]
   1b010:	003b      	movs	r3, r7
   1b012:	0020      	movs	r0, r4
   1b014:	0029      	movs	r1, r5
   1b016:	f004 f9c5 	bl	1f3a4 <__aeabi_dsub>
   1b01a:	0002      	movs	r2, r0
   1b01c:	000b      	movs	r3, r1
   1b01e:	9800      	ldr	r0, [sp, #0]
   1b020:	9901      	ldr	r1, [sp, #4]
   1b022:	f004 f9bf 	bl	1f3a4 <__aeabi_dsub>
   1b026:	4acb      	ldr	r2, [pc, #812]	; (1b354 <__ieee754_pow+0x9d8>)
   1b028:	4bcb      	ldr	r3, [pc, #812]	; (1b358 <__ieee754_pow+0x9dc>)
   1b02a:	f003 ff3b 	bl	1eea4 <__aeabi_dmul>
   1b02e:	4acb      	ldr	r2, [pc, #812]	; (1b35c <__ieee754_pow+0x9e0>)
   1b030:	0006      	movs	r6, r0
   1b032:	000f      	movs	r7, r1
   1b034:	4bca      	ldr	r3, [pc, #808]	; (1b360 <__ieee754_pow+0x9e4>)
   1b036:	0020      	movs	r0, r4
   1b038:	0029      	movs	r1, r5
   1b03a:	f003 ff33 	bl	1eea4 <__aeabi_dmul>
   1b03e:	0002      	movs	r2, r0
   1b040:	000b      	movs	r3, r1
   1b042:	0030      	movs	r0, r6
   1b044:	0039      	movs	r1, r7
   1b046:	f002 ffe9 	bl	1e01c <__aeabi_dadd>
   1b04a:	0004      	movs	r4, r0
   1b04c:	000d      	movs	r5, r1
   1b04e:	0002      	movs	r2, r0
   1b050:	000b      	movs	r3, r1
   1b052:	9802      	ldr	r0, [sp, #8]
   1b054:	9903      	ldr	r1, [sp, #12]
   1b056:	f002 ffe1 	bl	1e01c <__aeabi_dadd>
   1b05a:	9a02      	ldr	r2, [sp, #8]
   1b05c:	9b03      	ldr	r3, [sp, #12]
   1b05e:	0006      	movs	r6, r0
   1b060:	000f      	movs	r7, r1
   1b062:	f004 f99f 	bl	1f3a4 <__aeabi_dsub>
   1b066:	0002      	movs	r2, r0
   1b068:	000b      	movs	r3, r1
   1b06a:	0020      	movs	r0, r4
   1b06c:	0029      	movs	r1, r5
   1b06e:	f004 f999 	bl	1f3a4 <__aeabi_dsub>
   1b072:	0032      	movs	r2, r6
   1b074:	9000      	str	r0, [sp, #0]
   1b076:	9101      	str	r1, [sp, #4]
   1b078:	003b      	movs	r3, r7
   1b07a:	0030      	movs	r0, r6
   1b07c:	0039      	movs	r1, r7
   1b07e:	f003 ff11 	bl	1eea4 <__aeabi_dmul>
   1b082:	0004      	movs	r4, r0
   1b084:	000d      	movs	r5, r1
   1b086:	4ab7      	ldr	r2, [pc, #732]	; (1b364 <__ieee754_pow+0x9e8>)
   1b088:	4bb7      	ldr	r3, [pc, #732]	; (1b368 <__ieee754_pow+0x9ec>)
   1b08a:	f003 ff0b 	bl	1eea4 <__aeabi_dmul>
   1b08e:	4ab7      	ldr	r2, [pc, #732]	; (1b36c <__ieee754_pow+0x9f0>)
   1b090:	4bb7      	ldr	r3, [pc, #732]	; (1b370 <__ieee754_pow+0x9f4>)
   1b092:	f004 f987 	bl	1f3a4 <__aeabi_dsub>
   1b096:	0022      	movs	r2, r4
   1b098:	002b      	movs	r3, r5
   1b09a:	f003 ff03 	bl	1eea4 <__aeabi_dmul>
   1b09e:	4ab5      	ldr	r2, [pc, #724]	; (1b374 <__ieee754_pow+0x9f8>)
   1b0a0:	4bb5      	ldr	r3, [pc, #724]	; (1b378 <__ieee754_pow+0x9fc>)
   1b0a2:	f002 ffbb 	bl	1e01c <__aeabi_dadd>
   1b0a6:	0022      	movs	r2, r4
   1b0a8:	002b      	movs	r3, r5
   1b0aa:	f003 fefb 	bl	1eea4 <__aeabi_dmul>
   1b0ae:	4ab3      	ldr	r2, [pc, #716]	; (1b37c <__ieee754_pow+0xa00>)
   1b0b0:	4bb3      	ldr	r3, [pc, #716]	; (1b380 <__ieee754_pow+0xa04>)
   1b0b2:	f004 f977 	bl	1f3a4 <__aeabi_dsub>
   1b0b6:	0022      	movs	r2, r4
   1b0b8:	002b      	movs	r3, r5
   1b0ba:	f003 fef3 	bl	1eea4 <__aeabi_dmul>
   1b0be:	4ab1      	ldr	r2, [pc, #708]	; (1b384 <__ieee754_pow+0xa08>)
   1b0c0:	4bb1      	ldr	r3, [pc, #708]	; (1b388 <__ieee754_pow+0xa0c>)
   1b0c2:	f002 ffab 	bl	1e01c <__aeabi_dadd>
   1b0c6:	0022      	movs	r2, r4
   1b0c8:	002b      	movs	r3, r5
   1b0ca:	f003 feeb 	bl	1eea4 <__aeabi_dmul>
   1b0ce:	0002      	movs	r2, r0
   1b0d0:	000b      	movs	r3, r1
   1b0d2:	0030      	movs	r0, r6
   1b0d4:	0039      	movs	r1, r7
   1b0d6:	f004 f965 	bl	1f3a4 <__aeabi_dsub>
   1b0da:	0004      	movs	r4, r0
   1b0dc:	000d      	movs	r5, r1
   1b0de:	0002      	movs	r2, r0
   1b0e0:	000b      	movs	r3, r1
   1b0e2:	0030      	movs	r0, r6
   1b0e4:	0039      	movs	r1, r7
   1b0e6:	f003 fedd 	bl	1eea4 <__aeabi_dmul>
   1b0ea:	2380      	movs	r3, #128	; 0x80
   1b0ec:	9002      	str	r0, [sp, #8]
   1b0ee:	9103      	str	r1, [sp, #12]
   1b0f0:	2200      	movs	r2, #0
   1b0f2:	05db      	lsls	r3, r3, #23
   1b0f4:	0020      	movs	r0, r4
   1b0f6:	0029      	movs	r1, r5
   1b0f8:	f004 f954 	bl	1f3a4 <__aeabi_dsub>
   1b0fc:	0002      	movs	r2, r0
   1b0fe:	000b      	movs	r3, r1
   1b100:	9802      	ldr	r0, [sp, #8]
   1b102:	9903      	ldr	r1, [sp, #12]
   1b104:	f003 fa9a 	bl	1e63c <__aeabi_ddiv>
   1b108:	9a00      	ldr	r2, [sp, #0]
   1b10a:	9b01      	ldr	r3, [sp, #4]
   1b10c:	0004      	movs	r4, r0
   1b10e:	000d      	movs	r5, r1
   1b110:	0030      	movs	r0, r6
   1b112:	0039      	movs	r1, r7
   1b114:	f003 fec6 	bl	1eea4 <__aeabi_dmul>
   1b118:	9a00      	ldr	r2, [sp, #0]
   1b11a:	9b01      	ldr	r3, [sp, #4]
   1b11c:	f002 ff7e 	bl	1e01c <__aeabi_dadd>
   1b120:	0002      	movs	r2, r0
   1b122:	000b      	movs	r3, r1
   1b124:	0020      	movs	r0, r4
   1b126:	0029      	movs	r1, r5
   1b128:	f004 f93c 	bl	1f3a4 <__aeabi_dsub>
   1b12c:	0032      	movs	r2, r6
   1b12e:	003b      	movs	r3, r7
   1b130:	f004 f938 	bl	1f3a4 <__aeabi_dsub>
   1b134:	0002      	movs	r2, r0
   1b136:	000b      	movs	r3, r1
   1b138:	2000      	movs	r0, #0
   1b13a:	4994      	ldr	r1, [pc, #592]	; (1b38c <__ieee754_pow+0xa10>)
   1b13c:	f004 f932 	bl	1f3a4 <__aeabi_dsub>
   1b140:	4643      	mov	r3, r8
   1b142:	185b      	adds	r3, r3, r1
   1b144:	151a      	asrs	r2, r3, #20
   1b146:	2a00      	cmp	r2, #0
   1b148:	dc00      	bgt.n	1b14c <__ieee754_pow+0x7d0>
   1b14a:	e149      	b.n	1b3e0 <__ieee754_pow+0xa64>
   1b14c:	0019      	movs	r1, r3
   1b14e:	9a06      	ldr	r2, [sp, #24]
   1b150:	9b07      	ldr	r3, [sp, #28]
   1b152:	f003 fea7 	bl	1eea4 <__aeabi_dmul>
   1b156:	e459      	b.n	1aa0c <__ieee754_pow+0x90>
   1b158:	003a      	movs	r2, r7
   1b15a:	0033      	movs	r3, r6
   1b15c:	0038      	movs	r0, r7
   1b15e:	0031      	movs	r1, r6
   1b160:	f003 fea0 	bl	1eea4 <__aeabi_dmul>
   1b164:	e452      	b.n	1aa0c <__ieee754_pow+0x90>
   1b166:	4653      	mov	r3, sl
   1b168:	2b00      	cmp	r3, #0
   1b16a:	db00      	blt.n	1b16e <__ieee754_pow+0x7f2>
   1b16c:	e4d9      	b.n	1ab22 <__ieee754_pow+0x1a6>
   1b16e:	9c00      	ldr	r4, [sp, #0]
   1b170:	9d01      	ldr	r5, [sp, #4]
   1b172:	2280      	movs	r2, #128	; 0x80
   1b174:	0612      	lsls	r2, r2, #24
   1b176:	002b      	movs	r3, r5
   1b178:	4694      	mov	ip, r2
   1b17a:	4463      	add	r3, ip
   1b17c:	0020      	movs	r0, r4
   1b17e:	0019      	movs	r1, r3
   1b180:	f7ff fc44 	bl	1aa0c <__ieee754_pow+0x90>
   1b184:	004b      	lsls	r3, r1, #1
   1b186:	085b      	lsrs	r3, r3, #1
   1b188:	469a      	mov	sl, r3
   1b18a:	4b81      	ldr	r3, [pc, #516]	; (1b390 <__ieee754_pow+0xa14>)
   1b18c:	459a      	cmp	sl, r3
   1b18e:	dc00      	bgt.n	1b192 <__ieee754_pow+0x816>
   1b190:	e0b1      	b.n	1b2f6 <__ieee754_pow+0x97a>
   1b192:	4b80      	ldr	r3, [pc, #512]	; (1b394 <__ieee754_pow+0xa18>)
   1b194:	445b      	add	r3, fp
   1b196:	431a      	orrs	r2, r3
   1b198:	d10c      	bne.n	1b1b4 <__ieee754_pow+0x838>
   1b19a:	0032      	movs	r2, r6
   1b19c:	003b      	movs	r3, r7
   1b19e:	f004 f901 	bl	1f3a4 <__aeabi_dsub>
   1b1a2:	0002      	movs	r2, r0
   1b1a4:	000b      	movs	r3, r1
   1b1a6:	9800      	ldr	r0, [sp, #0]
   1b1a8:	9901      	ldr	r1, [sp, #4]
   1b1aa:	f001 ff4d 	bl	1d048 <__aeabi_dcmple>
   1b1ae:	2800      	cmp	r0, #0
   1b1b0:	d100      	bne.n	1b1b4 <__ieee754_pow+0x838>
   1b1b2:	e6ee      	b.n	1af92 <__ieee754_pow+0x616>
   1b1b4:	9806      	ldr	r0, [sp, #24]
   1b1b6:	9907      	ldr	r1, [sp, #28]
   1b1b8:	4a77      	ldr	r2, [pc, #476]	; (1b398 <__ieee754_pow+0xa1c>)
   1b1ba:	4b78      	ldr	r3, [pc, #480]	; (1b39c <__ieee754_pow+0xa20>)
   1b1bc:	f003 fe72 	bl	1eea4 <__aeabi_dmul>
   1b1c0:	4a75      	ldr	r2, [pc, #468]	; (1b398 <__ieee754_pow+0xa1c>)
   1b1c2:	4b76      	ldr	r3, [pc, #472]	; (1b39c <__ieee754_pow+0xa20>)
   1b1c4:	f003 fe6e 	bl	1eea4 <__aeabi_dmul>
   1b1c8:	f7ff fc20 	bl	1aa0c <__ieee754_pow+0x90>
   1b1cc:	2300      	movs	r3, #0
   1b1ce:	4c74      	ldr	r4, [pc, #464]	; (1b3a0 <__ieee754_pow+0xa24>)
   1b1d0:	9306      	str	r3, [sp, #24]
   1b1d2:	9407      	str	r4, [sp, #28]
   1b1d4:	e652      	b.n	1ae7c <__ieee754_pow+0x500>
   1b1d6:	0002      	movs	r2, r0
   1b1d8:	000b      	movs	r3, r1
   1b1da:	2000      	movs	r0, #0
   1b1dc:	496b      	ldr	r1, [pc, #428]	; (1b38c <__ieee754_pow+0xa10>)
   1b1de:	f003 fa2d 	bl	1e63c <__aeabi_ddiv>
   1b1e2:	f7ff fc32 	bl	1aa4a <__ieee754_pow+0xce>
   1b1e6:	4653      	mov	r3, sl
   1b1e8:	2b00      	cmp	r3, #0
   1b1ea:	db00      	blt.n	1b1ee <__ieee754_pow+0x872>
   1b1ec:	e499      	b.n	1ab22 <__ieee754_pow+0x1a6>
   1b1ee:	e454      	b.n	1aa9a <__ieee754_pow+0x11e>
   1b1f0:	4b6c      	ldr	r3, [pc, #432]	; (1b3a4 <__ieee754_pow+0xa28>)
   1b1f2:	429c      	cmp	r4, r3
   1b1f4:	ddf7      	ble.n	1b1e6 <__ieee754_pow+0x86a>
   1b1f6:	4b65      	ldr	r3, [pc, #404]	; (1b38c <__ieee754_pow+0xa10>)
   1b1f8:	429c      	cmp	r4, r3
   1b1fa:	dd00      	ble.n	1b1fe <__ieee754_pow+0x882>
   1b1fc:	e44a      	b.n	1aa94 <__ieee754_pow+0x118>
   1b1fe:	2200      	movs	r2, #0
   1b200:	4b62      	ldr	r3, [pc, #392]	; (1b38c <__ieee754_pow+0xa10>)
   1b202:	f004 f8cf 	bl	1f3a4 <__aeabi_dsub>
   1b206:	22c0      	movs	r2, #192	; 0xc0
   1b208:	4b67      	ldr	r3, [pc, #412]	; (1b3a8 <__ieee754_pow+0xa2c>)
   1b20a:	05d2      	lsls	r2, r2, #23
   1b20c:	0004      	movs	r4, r0
   1b20e:	000d      	movs	r5, r1
   1b210:	f003 fe48 	bl	1eea4 <__aeabi_dmul>
   1b214:	4a65      	ldr	r2, [pc, #404]	; (1b3ac <__ieee754_pow+0xa30>)
   1b216:	0006      	movs	r6, r0
   1b218:	000f      	movs	r7, r1
   1b21a:	4b65      	ldr	r3, [pc, #404]	; (1b3b0 <__ieee754_pow+0xa34>)
   1b21c:	0020      	movs	r0, r4
   1b21e:	0029      	movs	r1, r5
   1b220:	f003 fe40 	bl	1eea4 <__aeabi_dmul>
   1b224:	2200      	movs	r2, #0
   1b226:	9002      	str	r0, [sp, #8]
   1b228:	9103      	str	r1, [sp, #12]
   1b22a:	4b62      	ldr	r3, [pc, #392]	; (1b3b4 <__ieee754_pow+0xa38>)
   1b22c:	0020      	movs	r0, r4
   1b22e:	0029      	movs	r1, r5
   1b230:	f003 fe38 	bl	1eea4 <__aeabi_dmul>
   1b234:	0002      	movs	r2, r0
   1b236:	000b      	movs	r3, r1
   1b238:	485f      	ldr	r0, [pc, #380]	; (1b3b8 <__ieee754_pow+0xa3c>)
   1b23a:	4960      	ldr	r1, [pc, #384]	; (1b3bc <__ieee754_pow+0xa40>)
   1b23c:	f004 f8b2 	bl	1f3a4 <__aeabi_dsub>
   1b240:	0022      	movs	r2, r4
   1b242:	002b      	movs	r3, r5
   1b244:	f003 fe2e 	bl	1eea4 <__aeabi_dmul>
   1b248:	0002      	movs	r2, r0
   1b24a:	000b      	movs	r3, r1
   1b24c:	2000      	movs	r0, #0
   1b24e:	495c      	ldr	r1, [pc, #368]	; (1b3c0 <__ieee754_pow+0xa44>)
   1b250:	f004 f8a8 	bl	1f3a4 <__aeabi_dsub>
   1b254:	0022      	movs	r2, r4
   1b256:	9004      	str	r0, [sp, #16]
   1b258:	9105      	str	r1, [sp, #20]
   1b25a:	002b      	movs	r3, r5
   1b25c:	0020      	movs	r0, r4
   1b25e:	0029      	movs	r1, r5
   1b260:	f003 fe20 	bl	1eea4 <__aeabi_dmul>
   1b264:	0002      	movs	r2, r0
   1b266:	000b      	movs	r3, r1
   1b268:	9804      	ldr	r0, [sp, #16]
   1b26a:	9905      	ldr	r1, [sp, #20]
   1b26c:	f003 fe1a 	bl	1eea4 <__aeabi_dmul>
   1b270:	4a54      	ldr	r2, [pc, #336]	; (1b3c4 <__ieee754_pow+0xa48>)
   1b272:	4b4d      	ldr	r3, [pc, #308]	; (1b3a8 <__ieee754_pow+0xa2c>)
   1b274:	f003 fe16 	bl	1eea4 <__aeabi_dmul>
   1b278:	0002      	movs	r2, r0
   1b27a:	000b      	movs	r3, r1
   1b27c:	9802      	ldr	r0, [sp, #8]
   1b27e:	9903      	ldr	r1, [sp, #12]
   1b280:	f004 f890 	bl	1f3a4 <__aeabi_dsub>
   1b284:	0002      	movs	r2, r0
   1b286:	000b      	movs	r3, r1
   1b288:	0004      	movs	r4, r0
   1b28a:	000d      	movs	r5, r1
   1b28c:	0030      	movs	r0, r6
   1b28e:	0039      	movs	r1, r7
   1b290:	f002 fec4 	bl	1e01c <__aeabi_dadd>
   1b294:	2000      	movs	r0, #0
   1b296:	0032      	movs	r2, r6
   1b298:	003b      	movs	r3, r7
   1b29a:	9002      	str	r0, [sp, #8]
   1b29c:	9103      	str	r1, [sp, #12]
   1b29e:	f004 f881 	bl	1f3a4 <__aeabi_dsub>
   1b2a2:	0002      	movs	r2, r0
   1b2a4:	000b      	movs	r3, r1
   1b2a6:	0020      	movs	r0, r4
   1b2a8:	0029      	movs	r1, r5
   1b2aa:	f004 f87b 	bl	1f3a4 <__aeabi_dsub>
   1b2ae:	9004      	str	r0, [sp, #16]
   1b2b0:	9105      	str	r1, [sp, #20]
   1b2b2:	e5d9      	b.n	1ae68 <__ieee754_pow+0x4ec>
   1b2b4:	4a44      	ldr	r2, [pc, #272]	; (1b3c8 <__ieee754_pow+0xa4c>)
   1b2b6:	4b45      	ldr	r3, [pc, #276]	; (1b3cc <__ieee754_pow+0xa50>)
   1b2b8:	9806      	ldr	r0, [sp, #24]
   1b2ba:	9907      	ldr	r1, [sp, #28]
   1b2bc:	f003 fdf2 	bl	1eea4 <__aeabi_dmul>
   1b2c0:	4a41      	ldr	r2, [pc, #260]	; (1b3c8 <__ieee754_pow+0xa4c>)
   1b2c2:	4b42      	ldr	r3, [pc, #264]	; (1b3cc <__ieee754_pow+0xa50>)
   1b2c4:	f003 fdee 	bl	1eea4 <__aeabi_dmul>
   1b2c8:	f7ff fba0 	bl	1aa0c <__ieee754_pow+0x90>
   1b2cc:	2a00      	cmp	r2, #0
   1b2ce:	d001      	beq.n	1b2d4 <__ieee754_pow+0x958>
   1b2d0:	f7ff fba9 	bl	1aa26 <__ieee754_pow+0xaa>
   1b2d4:	3214      	adds	r2, #20
   1b2d6:	1ad3      	subs	r3, r2, r3
   1b2d8:	002a      	movs	r2, r5
   1b2da:	411a      	asrs	r2, r3
   1b2dc:	0011      	movs	r1, r2
   1b2de:	4099      	lsls	r1, r3
   1b2e0:	428d      	cmp	r5, r1
   1b2e2:	d001      	beq.n	1b2e8 <__ieee754_pow+0x96c>
   1b2e4:	f7ff fb76 	bl	1a9d4 <__ieee754_pow+0x58>
   1b2e8:	2301      	movs	r3, #1
   1b2ea:	401a      	ands	r2, r3
   1b2ec:	18db      	adds	r3, r3, r3
   1b2ee:	1a9b      	subs	r3, r3, r2
   1b2f0:	469b      	mov	fp, r3
   1b2f2:	f7ff fb6f 	bl	1a9d4 <__ieee754_pow+0x58>
   1b2f6:	2200      	movs	r2, #0
   1b2f8:	4b31      	ldr	r3, [pc, #196]	; (1b3c0 <__ieee754_pow+0xa44>)
   1b2fa:	4690      	mov	r8, r2
   1b2fc:	4691      	mov	r9, r2
   1b2fe:	459a      	cmp	sl, r3
   1b300:	dc00      	bgt.n	1b304 <__ieee754_pow+0x988>
   1b302:	e67b      	b.n	1affc <__ieee754_pow+0x680>
   1b304:	e645      	b.n	1af92 <__ieee754_pow+0x616>
   1b306:	0002      	movs	r2, r0
   1b308:	000b      	movs	r3, r1
   1b30a:	f004 f84b 	bl	1f3a4 <__aeabi_dsub>
   1b30e:	0002      	movs	r2, r0
   1b310:	000b      	movs	r3, r1
   1b312:	f003 f993 	bl	1e63c <__aeabi_ddiv>
   1b316:	f7ff fb79 	bl	1aa0c <__ieee754_pow+0x90>
   1b31a:	2380      	movs	r3, #128	; 0x80
   1b31c:	4c2c      	ldr	r4, [pc, #176]	; (1b3d0 <__ieee754_pow+0xa54>)
   1b31e:	05db      	lsls	r3, r3, #23
   1b320:	9308      	str	r3, [sp, #32]
   1b322:	9409      	str	r4, [sp, #36]	; 0x24
   1b324:	4b2b      	ldr	r3, [pc, #172]	; (1b3d4 <__ieee754_pow+0xa58>)
   1b326:	4c2c      	ldr	r4, [pc, #176]	; (1b3d8 <__ieee754_pow+0xa5c>)
   1b328:	2200      	movs	r2, #0
   1b32a:	930c      	str	r3, [sp, #48]	; 0x30
   1b32c:	940d      	str	r4, [sp, #52]	; 0x34
   1b32e:	2480      	movs	r4, #128	; 0x80
   1b330:	4b2a      	ldr	r3, [pc, #168]	; (1b3dc <__ieee754_pow+0xa60>)
   1b332:	02e4      	lsls	r4, r4, #11
   1b334:	9206      	str	r2, [sp, #24]
   1b336:	9307      	str	r3, [sp, #28]
   1b338:	e449      	b.n	1abce <__ieee754_pow+0x252>
   1b33a:	464b      	mov	r3, r9
   1b33c:	425b      	negs	r3, r3
   1b33e:	4699      	mov	r9, r3
   1b340:	e64a      	b.n	1afd8 <__ieee754_pow+0x65c>
   1b342:	46c0      	nop			; (mov r8, r8)
   1b344:	fffffc02 	.word	0xfffffc02
   1b348:	fffffc01 	.word	0xfffffc01
   1b34c:	000fffff 	.word	0x000fffff
   1b350:	3fe62e43 	.word	0x3fe62e43
   1b354:	fefa39ef 	.word	0xfefa39ef
   1b358:	3fe62e42 	.word	0x3fe62e42
   1b35c:	0ca86c39 	.word	0x0ca86c39
   1b360:	be205c61 	.word	0xbe205c61
   1b364:	72bea4d0 	.word	0x72bea4d0
   1b368:	3e663769 	.word	0x3e663769
   1b36c:	c5d26bf1 	.word	0xc5d26bf1
   1b370:	3ebbbd41 	.word	0x3ebbbd41
   1b374:	af25de2c 	.word	0xaf25de2c
   1b378:	3f11566a 	.word	0x3f11566a
   1b37c:	16bebd93 	.word	0x16bebd93
   1b380:	3f66c16c 	.word	0x3f66c16c
   1b384:	5555553e 	.word	0x5555553e
   1b388:	3fc55555 	.word	0x3fc55555
   1b38c:	3ff00000 	.word	0x3ff00000
   1b390:	4090cbff 	.word	0x4090cbff
   1b394:	3f6f3400 	.word	0x3f6f3400
   1b398:	c2f8f359 	.word	0xc2f8f359
   1b39c:	01a56e1f 	.word	0x01a56e1f
   1b3a0:	bff00000 	.word	0xbff00000
   1b3a4:	3feffffe 	.word	0x3feffffe
   1b3a8:	3ff71547 	.word	0x3ff71547
   1b3ac:	f85ddf44 	.word	0xf85ddf44
   1b3b0:	3e54ae0b 	.word	0x3e54ae0b
   1b3b4:	3fd00000 	.word	0x3fd00000
   1b3b8:	55555555 	.word	0x55555555
   1b3bc:	3fd55555 	.word	0x3fd55555
   1b3c0:	3fe00000 	.word	0x3fe00000
   1b3c4:	652b82fe 	.word	0x652b82fe
   1b3c8:	8800759c 	.word	0x8800759c
   1b3cc:	7e37e43c 	.word	0x7e37e43c
   1b3d0:	3fe2b803 	.word	0x3fe2b803
   1b3d4:	43cfd006 	.word	0x43cfd006
   1b3d8:	3e4cfdeb 	.word	0x3e4cfdeb
   1b3dc:	3ff80000 	.word	0x3ff80000
   1b3e0:	464a      	mov	r2, r9
   1b3e2:	f001 fc2b 	bl	1cc3c <scalbn>
   1b3e6:	e6b2      	b.n	1b14e <__ieee754_pow+0x7d2>

0001b3e8 <__ieee754_rem_pio2>:
   1b3e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b3ea:	464e      	mov	r6, r9
   1b3ec:	4645      	mov	r5, r8
   1b3ee:	46de      	mov	lr, fp
   1b3f0:	4657      	mov	r7, sl
   1b3f2:	b5e0      	push	{r5, r6, r7, lr}
   1b3f4:	4bd4      	ldr	r3, [pc, #848]	; (1b748 <__ieee754_rem_pio2+0x360>)
   1b3f6:	004c      	lsls	r4, r1, #1
   1b3f8:	b08f      	sub	sp, #60	; 0x3c
   1b3fa:	4690      	mov	r8, r2
   1b3fc:	4689      	mov	r9, r1
   1b3fe:	0864      	lsrs	r4, r4, #1
   1b400:	429c      	cmp	r4, r3
   1b402:	dc00      	bgt.n	1b406 <__ieee754_rem_pio2+0x1e>
   1b404:	e087      	b.n	1b516 <__ieee754_rem_pio2+0x12e>
   1b406:	4bd1      	ldr	r3, [pc, #836]	; (1b74c <__ieee754_rem_pio2+0x364>)
   1b408:	429c      	cmp	r4, r3
   1b40a:	dc22      	bgt.n	1b452 <__ieee754_rem_pio2+0x6a>
   1b40c:	4ad0      	ldr	r2, [pc, #832]	; (1b750 <__ieee754_rem_pio2+0x368>)
   1b40e:	2900      	cmp	r1, #0
   1b410:	dc00      	bgt.n	1b414 <__ieee754_rem_pio2+0x2c>
   1b412:	e1bf      	b.n	1b794 <__ieee754_rem_pio2+0x3ac>
   1b414:	4bcf      	ldr	r3, [pc, #828]	; (1b754 <__ieee754_rem_pio2+0x36c>)
   1b416:	f003 ffc5 	bl	1f3a4 <__aeabi_dsub>
   1b41a:	4bce      	ldr	r3, [pc, #824]	; (1b754 <__ieee754_rem_pio2+0x36c>)
   1b41c:	0006      	movs	r6, r0
   1b41e:	000f      	movs	r7, r1
   1b420:	429c      	cmp	r4, r3
   1b422:	d100      	bne.n	1b426 <__ieee754_rem_pio2+0x3e>
   1b424:	e094      	b.n	1b550 <__ieee754_rem_pio2+0x168>
   1b426:	4acc      	ldr	r2, [pc, #816]	; (1b758 <__ieee754_rem_pio2+0x370>)
   1b428:	4bcc      	ldr	r3, [pc, #816]	; (1b75c <__ieee754_rem_pio2+0x374>)
   1b42a:	f003 ffbb 	bl	1f3a4 <__aeabi_dsub>
   1b42e:	0002      	movs	r2, r0
   1b430:	000b      	movs	r3, r1
   1b432:	4641      	mov	r1, r8
   1b434:	0030      	movs	r0, r6
   1b436:	600a      	str	r2, [r1, #0]
   1b438:	604b      	str	r3, [r1, #4]
   1b43a:	0039      	movs	r1, r7
   1b43c:	f003 ffb2 	bl	1f3a4 <__aeabi_dsub>
   1b440:	4bc6      	ldr	r3, [pc, #792]	; (1b75c <__ieee754_rem_pio2+0x374>)
   1b442:	4ac5      	ldr	r2, [pc, #788]	; (1b758 <__ieee754_rem_pio2+0x370>)
   1b444:	f003 ffae 	bl	1f3a4 <__aeabi_dsub>
   1b448:	4643      	mov	r3, r8
   1b44a:	2501      	movs	r5, #1
   1b44c:	6098      	str	r0, [r3, #8]
   1b44e:	60d9      	str	r1, [r3, #12]
   1b450:	e06b      	b.n	1b52a <__ieee754_rem_pio2+0x142>
   1b452:	4bc3      	ldr	r3, [pc, #780]	; (1b760 <__ieee754_rem_pio2+0x378>)
   1b454:	429c      	cmp	r4, r3
   1b456:	dc00      	bgt.n	1b45a <__ieee754_rem_pio2+0x72>
   1b458:	e097      	b.n	1b58a <__ieee754_rem_pio2+0x1a2>
   1b45a:	4bc2      	ldr	r3, [pc, #776]	; (1b764 <__ieee754_rem_pio2+0x37c>)
   1b45c:	429c      	cmp	r4, r3
   1b45e:	dc6c      	bgt.n	1b53a <__ieee754_rem_pio2+0x152>
   1b460:	4ac1      	ldr	r2, [pc, #772]	; (1b768 <__ieee754_rem_pio2+0x380>)
   1b462:	1523      	asrs	r3, r4, #20
   1b464:	4692      	mov	sl, r2
   1b466:	449a      	add	sl, r3
   1b468:	4651      	mov	r1, sl
   1b46a:	0509      	lsls	r1, r1, #20
   1b46c:	1a63      	subs	r3, r4, r1
   1b46e:	0019      	movs	r1, r3
   1b470:	001d      	movs	r5, r3
   1b472:	0004      	movs	r4, r0
   1b474:	f004 facc 	bl	1fa10 <__aeabi_d2iz>
   1b478:	f004 fafe 	bl	1fa78 <__aeabi_i2d>
   1b47c:	0002      	movs	r2, r0
   1b47e:	000b      	movs	r3, r1
   1b480:	0020      	movs	r0, r4
   1b482:	0029      	movs	r1, r5
   1b484:	9208      	str	r2, [sp, #32]
   1b486:	9309      	str	r3, [sp, #36]	; 0x24
   1b488:	f003 ff8c 	bl	1f3a4 <__aeabi_dsub>
   1b48c:	2200      	movs	r2, #0
   1b48e:	4bb7      	ldr	r3, [pc, #732]	; (1b76c <__ieee754_rem_pio2+0x384>)
   1b490:	f003 fd08 	bl	1eea4 <__aeabi_dmul>
   1b494:	000f      	movs	r7, r1
   1b496:	0006      	movs	r6, r0
   1b498:	f004 faba 	bl	1fa10 <__aeabi_d2iz>
   1b49c:	f004 faec 	bl	1fa78 <__aeabi_i2d>
   1b4a0:	0004      	movs	r4, r0
   1b4a2:	000d      	movs	r5, r1
   1b4a4:	0002      	movs	r2, r0
   1b4a6:	000b      	movs	r3, r1
   1b4a8:	0030      	movs	r0, r6
   1b4aa:	0039      	movs	r1, r7
   1b4ac:	940a      	str	r4, [sp, #40]	; 0x28
   1b4ae:	950b      	str	r5, [sp, #44]	; 0x2c
   1b4b0:	f003 ff78 	bl	1f3a4 <__aeabi_dsub>
   1b4b4:	2200      	movs	r2, #0
   1b4b6:	4bad      	ldr	r3, [pc, #692]	; (1b76c <__ieee754_rem_pio2+0x384>)
   1b4b8:	f003 fcf4 	bl	1eea4 <__aeabi_dmul>
   1b4bc:	2200      	movs	r2, #0
   1b4be:	2300      	movs	r3, #0
   1b4c0:	900c      	str	r0, [sp, #48]	; 0x30
   1b4c2:	910d      	str	r1, [sp, #52]	; 0x34
   1b4c4:	f001 fdb0 	bl	1d028 <__aeabi_dcmpeq>
   1b4c8:	2800      	cmp	r0, #0
   1b4ca:	d100      	bne.n	1b4ce <__ieee754_rem_pio2+0xe6>
   1b4cc:	e181      	b.n	1b7d2 <__ieee754_rem_pio2+0x3ea>
   1b4ce:	2300      	movs	r3, #0
   1b4d0:	2200      	movs	r2, #0
   1b4d2:	0020      	movs	r0, r4
   1b4d4:	0029      	movs	r1, r5
   1b4d6:	f001 fda7 	bl	1d028 <__aeabi_dcmpeq>
   1b4da:	4243      	negs	r3, r0
   1b4dc:	4143      	adcs	r3, r0
   1b4de:	3301      	adds	r3, #1
   1b4e0:	4aa3      	ldr	r2, [pc, #652]	; (1b770 <__ieee754_rem_pio2+0x388>)
   1b4e2:	4641      	mov	r1, r8
   1b4e4:	9201      	str	r2, [sp, #4]
   1b4e6:	2202      	movs	r2, #2
   1b4e8:	a808      	add	r0, sp, #32
   1b4ea:	9200      	str	r2, [sp, #0]
   1b4ec:	4652      	mov	r2, sl
   1b4ee:	f000 fb8d 	bl	1bc0c <__kernel_rem_pio2>
   1b4f2:	464b      	mov	r3, r9
   1b4f4:	0005      	movs	r5, r0
   1b4f6:	2b00      	cmp	r3, #0
   1b4f8:	da17      	bge.n	1b52a <__ieee754_rem_pio2+0x142>
   1b4fa:	2280      	movs	r2, #128	; 0x80
   1b4fc:	4643      	mov	r3, r8
   1b4fe:	0612      	lsls	r2, r2, #24
   1b500:	4694      	mov	ip, r2
   1b502:	4642      	mov	r2, r8
   1b504:	685b      	ldr	r3, [r3, #4]
   1b506:	4245      	negs	r5, r0
   1b508:	4463      	add	r3, ip
   1b50a:	6053      	str	r3, [r2, #4]
   1b50c:	68d3      	ldr	r3, [r2, #12]
   1b50e:	4642      	mov	r2, r8
   1b510:	4463      	add	r3, ip
   1b512:	60d3      	str	r3, [r2, #12]
   1b514:	e009      	b.n	1b52a <__ieee754_rem_pio2+0x142>
   1b516:	000b      	movs	r3, r1
   1b518:	0002      	movs	r2, r0
   1b51a:	4641      	mov	r1, r8
   1b51c:	600a      	str	r2, [r1, #0]
   1b51e:	604b      	str	r3, [r1, #4]
   1b520:	2200      	movs	r2, #0
   1b522:	2300      	movs	r3, #0
   1b524:	2500      	movs	r5, #0
   1b526:	608a      	str	r2, [r1, #8]
   1b528:	60cb      	str	r3, [r1, #12]
   1b52a:	0028      	movs	r0, r5
   1b52c:	b00f      	add	sp, #60	; 0x3c
   1b52e:	bc3c      	pop	{r2, r3, r4, r5}
   1b530:	4690      	mov	r8, r2
   1b532:	4699      	mov	r9, r3
   1b534:	46a2      	mov	sl, r4
   1b536:	46ab      	mov	fp, r5
   1b538:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b53a:	000b      	movs	r3, r1
   1b53c:	0002      	movs	r2, r0
   1b53e:	f003 ff31 	bl	1f3a4 <__aeabi_dsub>
   1b542:	4643      	mov	r3, r8
   1b544:	2500      	movs	r5, #0
   1b546:	6098      	str	r0, [r3, #8]
   1b548:	60d9      	str	r1, [r3, #12]
   1b54a:	6018      	str	r0, [r3, #0]
   1b54c:	6059      	str	r1, [r3, #4]
   1b54e:	e7ec      	b.n	1b52a <__ieee754_rem_pio2+0x142>
   1b550:	22d3      	movs	r2, #211	; 0xd3
   1b552:	4b82      	ldr	r3, [pc, #520]	; (1b75c <__ieee754_rem_pio2+0x374>)
   1b554:	0552      	lsls	r2, r2, #21
   1b556:	f003 ff25 	bl	1f3a4 <__aeabi_dsub>
   1b55a:	4a86      	ldr	r2, [pc, #536]	; (1b774 <__ieee754_rem_pio2+0x38c>)
   1b55c:	4b86      	ldr	r3, [pc, #536]	; (1b778 <__ieee754_rem_pio2+0x390>)
   1b55e:	000d      	movs	r5, r1
   1b560:	0004      	movs	r4, r0
   1b562:	f003 ff1f 	bl	1f3a4 <__aeabi_dsub>
   1b566:	0002      	movs	r2, r0
   1b568:	000b      	movs	r3, r1
   1b56a:	4641      	mov	r1, r8
   1b56c:	0020      	movs	r0, r4
   1b56e:	600a      	str	r2, [r1, #0]
   1b570:	604b      	str	r3, [r1, #4]
   1b572:	0029      	movs	r1, r5
   1b574:	f003 ff16 	bl	1f3a4 <__aeabi_dsub>
   1b578:	4b7f      	ldr	r3, [pc, #508]	; (1b778 <__ieee754_rem_pio2+0x390>)
   1b57a:	4a7e      	ldr	r2, [pc, #504]	; (1b774 <__ieee754_rem_pio2+0x38c>)
   1b57c:	f003 ff12 	bl	1f3a4 <__aeabi_dsub>
   1b580:	4643      	mov	r3, r8
   1b582:	2501      	movs	r5, #1
   1b584:	6098      	str	r0, [r3, #8]
   1b586:	60d9      	str	r1, [r3, #12]
   1b588:	e7cf      	b.n	1b52a <__ieee754_rem_pio2+0x142>
   1b58a:	f001 fa07 	bl	1c99c <fabs>
   1b58e:	4a7b      	ldr	r2, [pc, #492]	; (1b77c <__ieee754_rem_pio2+0x394>)
   1b590:	4b7b      	ldr	r3, [pc, #492]	; (1b780 <__ieee754_rem_pio2+0x398>)
   1b592:	0006      	movs	r6, r0
   1b594:	000f      	movs	r7, r1
   1b596:	f003 fc85 	bl	1eea4 <__aeabi_dmul>
   1b59a:	2200      	movs	r2, #0
   1b59c:	4b79      	ldr	r3, [pc, #484]	; (1b784 <__ieee754_rem_pio2+0x39c>)
   1b59e:	f002 fd3d 	bl	1e01c <__aeabi_dadd>
   1b5a2:	f004 fa35 	bl	1fa10 <__aeabi_d2iz>
   1b5a6:	0005      	movs	r5, r0
   1b5a8:	f004 fa66 	bl	1fa78 <__aeabi_i2d>
   1b5ac:	4a68      	ldr	r2, [pc, #416]	; (1b750 <__ieee754_rem_pio2+0x368>)
   1b5ae:	4b69      	ldr	r3, [pc, #420]	; (1b754 <__ieee754_rem_pio2+0x36c>)
   1b5b0:	9004      	str	r0, [sp, #16]
   1b5b2:	9105      	str	r1, [sp, #20]
   1b5b4:	f003 fc76 	bl	1eea4 <__aeabi_dmul>
   1b5b8:	0002      	movs	r2, r0
   1b5ba:	000b      	movs	r3, r1
   1b5bc:	0030      	movs	r0, r6
   1b5be:	0039      	movs	r1, r7
   1b5c0:	f003 fef0 	bl	1f3a4 <__aeabi_dsub>
   1b5c4:	4a64      	ldr	r2, [pc, #400]	; (1b758 <__ieee754_rem_pio2+0x370>)
   1b5c6:	0006      	movs	r6, r0
   1b5c8:	000f      	movs	r7, r1
   1b5ca:	9804      	ldr	r0, [sp, #16]
   1b5cc:	9905      	ldr	r1, [sp, #20]
   1b5ce:	4b63      	ldr	r3, [pc, #396]	; (1b75c <__ieee754_rem_pio2+0x374>)
   1b5d0:	f003 fc68 	bl	1eea4 <__aeabi_dmul>
   1b5d4:	9002      	str	r0, [sp, #8]
   1b5d6:	9103      	str	r1, [sp, #12]
   1b5d8:	2d1f      	cmp	r5, #31
   1b5da:	dc33      	bgt.n	1b644 <__ieee754_rem_pio2+0x25c>
   1b5dc:	1e6b      	subs	r3, r5, #1
   1b5de:	4a6a      	ldr	r2, [pc, #424]	; (1b788 <__ieee754_rem_pio2+0x3a0>)
   1b5e0:	009b      	lsls	r3, r3, #2
   1b5e2:	589b      	ldr	r3, [r3, r2]
   1b5e4:	429c      	cmp	r4, r3
   1b5e6:	d02d      	beq.n	1b644 <__ieee754_rem_pio2+0x25c>
   1b5e8:	0002      	movs	r2, r0
   1b5ea:	000b      	movs	r3, r1
   1b5ec:	0030      	movs	r0, r6
   1b5ee:	0039      	movs	r1, r7
   1b5f0:	f003 fed8 	bl	1f3a4 <__aeabi_dsub>
   1b5f4:	000b      	movs	r3, r1
   1b5f6:	468a      	mov	sl, r1
   1b5f8:	0002      	movs	r2, r0
   1b5fa:	4641      	mov	r1, r8
   1b5fc:	4683      	mov	fp, r0
   1b5fe:	600a      	str	r2, [r1, #0]
   1b600:	604b      	str	r3, [r1, #4]
   1b602:	465a      	mov	r2, fp
   1b604:	4653      	mov	r3, sl
   1b606:	0030      	movs	r0, r6
   1b608:	0039      	movs	r1, r7
   1b60a:	f003 fecb 	bl	1f3a4 <__aeabi_dsub>
   1b60e:	9a02      	ldr	r2, [sp, #8]
   1b610:	9b03      	ldr	r3, [sp, #12]
   1b612:	f003 fec7 	bl	1f3a4 <__aeabi_dsub>
   1b616:	4644      	mov	r4, r8
   1b618:	000b      	movs	r3, r1
   1b61a:	0002      	movs	r2, r0
   1b61c:	60a2      	str	r2, [r4, #8]
   1b61e:	60e3      	str	r3, [r4, #12]
   1b620:	464b      	mov	r3, r9
   1b622:	2b00      	cmp	r3, #0
   1b624:	db00      	blt.n	1b628 <__ieee754_rem_pio2+0x240>
   1b626:	e780      	b.n	1b52a <__ieee754_rem_pio2+0x142>
   1b628:	465b      	mov	r3, fp
   1b62a:	6023      	str	r3, [r4, #0]
   1b62c:	2380      	movs	r3, #128	; 0x80
   1b62e:	061b      	lsls	r3, r3, #24
   1b630:	4453      	add	r3, sl
   1b632:	6063      	str	r3, [r4, #4]
   1b634:	2380      	movs	r3, #128	; 0x80
   1b636:	061b      	lsls	r3, r3, #24
   1b638:	469c      	mov	ip, r3
   1b63a:	4461      	add	r1, ip
   1b63c:	60a0      	str	r0, [r4, #8]
   1b63e:	60e1      	str	r1, [r4, #12]
   1b640:	426d      	negs	r5, r5
   1b642:	e772      	b.n	1b52a <__ieee754_rem_pio2+0x142>
   1b644:	9a02      	ldr	r2, [sp, #8]
   1b646:	9b03      	ldr	r3, [sp, #12]
   1b648:	0030      	movs	r0, r6
   1b64a:	0039      	movs	r1, r7
   1b64c:	f003 feaa 	bl	1f3a4 <__aeabi_dsub>
   1b650:	000b      	movs	r3, r1
   1b652:	468a      	mov	sl, r1
   1b654:	0002      	movs	r2, r0
   1b656:	4641      	mov	r1, r8
   1b658:	600a      	str	r2, [r1, #0]
   1b65a:	604b      	str	r3, [r1, #4]
   1b65c:	4653      	mov	r3, sl
   1b65e:	005b      	lsls	r3, r3, #1
   1b660:	1524      	asrs	r4, r4, #20
   1b662:	0d5b      	lsrs	r3, r3, #21
   1b664:	4683      	mov	fp, r0
   1b666:	1ae3      	subs	r3, r4, r3
   1b668:	2b10      	cmp	r3, #16
   1b66a:	ddca      	ble.n	1b602 <__ieee754_rem_pio2+0x21a>
   1b66c:	9804      	ldr	r0, [sp, #16]
   1b66e:	9905      	ldr	r1, [sp, #20]
   1b670:	22d3      	movs	r2, #211	; 0xd3
   1b672:	4b3a      	ldr	r3, [pc, #232]	; (1b75c <__ieee754_rem_pio2+0x374>)
   1b674:	0552      	lsls	r2, r2, #21
   1b676:	f003 fc15 	bl	1eea4 <__aeabi_dmul>
   1b67a:	9002      	str	r0, [sp, #8]
   1b67c:	9103      	str	r1, [sp, #12]
   1b67e:	0002      	movs	r2, r0
   1b680:	000b      	movs	r3, r1
   1b682:	0030      	movs	r0, r6
   1b684:	0039      	movs	r1, r7
   1b686:	f003 fe8d 	bl	1f3a4 <__aeabi_dsub>
   1b68a:	9006      	str	r0, [sp, #24]
   1b68c:	9107      	str	r1, [sp, #28]
   1b68e:	0002      	movs	r2, r0
   1b690:	000b      	movs	r3, r1
   1b692:	0030      	movs	r0, r6
   1b694:	0039      	movs	r1, r7
   1b696:	f003 fe85 	bl	1f3a4 <__aeabi_dsub>
   1b69a:	9a02      	ldr	r2, [sp, #8]
   1b69c:	9b03      	ldr	r3, [sp, #12]
   1b69e:	f003 fe81 	bl	1f3a4 <__aeabi_dsub>
   1b6a2:	0006      	movs	r6, r0
   1b6a4:	000f      	movs	r7, r1
   1b6a6:	9804      	ldr	r0, [sp, #16]
   1b6a8:	9905      	ldr	r1, [sp, #20]
   1b6aa:	4a32      	ldr	r2, [pc, #200]	; (1b774 <__ieee754_rem_pio2+0x38c>)
   1b6ac:	4b32      	ldr	r3, [pc, #200]	; (1b778 <__ieee754_rem_pio2+0x390>)
   1b6ae:	f003 fbf9 	bl	1eea4 <__aeabi_dmul>
   1b6b2:	0032      	movs	r2, r6
   1b6b4:	003b      	movs	r3, r7
   1b6b6:	f003 fe75 	bl	1f3a4 <__aeabi_dsub>
   1b6ba:	9e06      	ldr	r6, [sp, #24]
   1b6bc:	9f07      	ldr	r7, [sp, #28]
   1b6be:	0002      	movs	r2, r0
   1b6c0:	000b      	movs	r3, r1
   1b6c2:	0030      	movs	r0, r6
   1b6c4:	0039      	movs	r1, r7
   1b6c6:	9202      	str	r2, [sp, #8]
   1b6c8:	9303      	str	r3, [sp, #12]
   1b6ca:	f003 fe6b 	bl	1f3a4 <__aeabi_dsub>
   1b6ce:	000b      	movs	r3, r1
   1b6d0:	468a      	mov	sl, r1
   1b6d2:	0002      	movs	r2, r0
   1b6d4:	4641      	mov	r1, r8
   1b6d6:	600a      	str	r2, [r1, #0]
   1b6d8:	604b      	str	r3, [r1, #4]
   1b6da:	4653      	mov	r3, sl
   1b6dc:	005b      	lsls	r3, r3, #1
   1b6de:	0d5b      	lsrs	r3, r3, #21
   1b6e0:	4683      	mov	fp, r0
   1b6e2:	1ae4      	subs	r4, r4, r3
   1b6e4:	9606      	str	r6, [sp, #24]
   1b6e6:	9707      	str	r7, [sp, #28]
   1b6e8:	2c31      	cmp	r4, #49	; 0x31
   1b6ea:	dd8a      	ble.n	1b602 <__ieee754_rem_pio2+0x21a>
   1b6ec:	9804      	ldr	r0, [sp, #16]
   1b6ee:	9905      	ldr	r1, [sp, #20]
   1b6f0:	22b8      	movs	r2, #184	; 0xb8
   1b6f2:	4b21      	ldr	r3, [pc, #132]	; (1b778 <__ieee754_rem_pio2+0x390>)
   1b6f4:	0592      	lsls	r2, r2, #22
   1b6f6:	f003 fbd5 	bl	1eea4 <__aeabi_dmul>
   1b6fa:	0003      	movs	r3, r0
   1b6fc:	000c      	movs	r4, r1
   1b6fe:	0002      	movs	r2, r0
   1b700:	9302      	str	r3, [sp, #8]
   1b702:	9403      	str	r4, [sp, #12]
   1b704:	0030      	movs	r0, r6
   1b706:	000b      	movs	r3, r1
   1b708:	0039      	movs	r1, r7
   1b70a:	f003 fe4b 	bl	1f3a4 <__aeabi_dsub>
   1b70e:	0002      	movs	r2, r0
   1b710:	000b      	movs	r3, r1
   1b712:	0006      	movs	r6, r0
   1b714:	000f      	movs	r7, r1
   1b716:	9806      	ldr	r0, [sp, #24]
   1b718:	9907      	ldr	r1, [sp, #28]
   1b71a:	f003 fe43 	bl	1f3a4 <__aeabi_dsub>
   1b71e:	9a02      	ldr	r2, [sp, #8]
   1b720:	9b03      	ldr	r3, [sp, #12]
   1b722:	f003 fe3f 	bl	1f3a4 <__aeabi_dsub>
   1b726:	4a19      	ldr	r2, [pc, #100]	; (1b78c <__ieee754_rem_pio2+0x3a4>)
   1b728:	9002      	str	r0, [sp, #8]
   1b72a:	9103      	str	r1, [sp, #12]
   1b72c:	9804      	ldr	r0, [sp, #16]
   1b72e:	9905      	ldr	r1, [sp, #20]
   1b730:	4b17      	ldr	r3, [pc, #92]	; (1b790 <__ieee754_rem_pio2+0x3a8>)
   1b732:	f003 fbb7 	bl	1eea4 <__aeabi_dmul>
   1b736:	9a02      	ldr	r2, [sp, #8]
   1b738:	9b03      	ldr	r3, [sp, #12]
   1b73a:	f003 fe33 	bl	1f3a4 <__aeabi_dsub>
   1b73e:	0002      	movs	r2, r0
   1b740:	000b      	movs	r3, r1
   1b742:	9202      	str	r2, [sp, #8]
   1b744:	9303      	str	r3, [sp, #12]
   1b746:	e751      	b.n	1b5ec <__ieee754_rem_pio2+0x204>
   1b748:	3fe921fb 	.word	0x3fe921fb
   1b74c:	4002d97b 	.word	0x4002d97b
   1b750:	54400000 	.word	0x54400000
   1b754:	3ff921fb 	.word	0x3ff921fb
   1b758:	1a626331 	.word	0x1a626331
   1b75c:	3dd0b461 	.word	0x3dd0b461
   1b760:	413921fb 	.word	0x413921fb
   1b764:	7fefffff 	.word	0x7fefffff
   1b768:	fffffbea 	.word	0xfffffbea
   1b76c:	41700000 	.word	0x41700000
   1b770:	000268f4 	.word	0x000268f4
   1b774:	2e037073 	.word	0x2e037073
   1b778:	3ba3198a 	.word	0x3ba3198a
   1b77c:	6dc9c883 	.word	0x6dc9c883
   1b780:	3fe45f30 	.word	0x3fe45f30
   1b784:	3fe00000 	.word	0x3fe00000
   1b788:	00026874 	.word	0x00026874
   1b78c:	252049c1 	.word	0x252049c1
   1b790:	397b839a 	.word	0x397b839a
   1b794:	4b1b      	ldr	r3, [pc, #108]	; (1b804 <__ieee754_rem_pio2+0x41c>)
   1b796:	f002 fc41 	bl	1e01c <__aeabi_dadd>
   1b79a:	4b1a      	ldr	r3, [pc, #104]	; (1b804 <__ieee754_rem_pio2+0x41c>)
   1b79c:	0006      	movs	r6, r0
   1b79e:	000f      	movs	r7, r1
   1b7a0:	429c      	cmp	r4, r3
   1b7a2:	d018      	beq.n	1b7d6 <__ieee754_rem_pio2+0x3ee>
   1b7a4:	4a18      	ldr	r2, [pc, #96]	; (1b808 <__ieee754_rem_pio2+0x420>)
   1b7a6:	4b19      	ldr	r3, [pc, #100]	; (1b80c <__ieee754_rem_pio2+0x424>)
   1b7a8:	f002 fc38 	bl	1e01c <__aeabi_dadd>
   1b7ac:	0002      	movs	r2, r0
   1b7ae:	000b      	movs	r3, r1
   1b7b0:	4641      	mov	r1, r8
   1b7b2:	0030      	movs	r0, r6
   1b7b4:	600a      	str	r2, [r1, #0]
   1b7b6:	604b      	str	r3, [r1, #4]
   1b7b8:	0039      	movs	r1, r7
   1b7ba:	f003 fdf3 	bl	1f3a4 <__aeabi_dsub>
   1b7be:	4a12      	ldr	r2, [pc, #72]	; (1b808 <__ieee754_rem_pio2+0x420>)
   1b7c0:	4b12      	ldr	r3, [pc, #72]	; (1b80c <__ieee754_rem_pio2+0x424>)
   1b7c2:	f002 fc2b 	bl	1e01c <__aeabi_dadd>
   1b7c6:	2501      	movs	r5, #1
   1b7c8:	4643      	mov	r3, r8
   1b7ca:	426d      	negs	r5, r5
   1b7cc:	6098      	str	r0, [r3, #8]
   1b7ce:	60d9      	str	r1, [r3, #12]
   1b7d0:	e6ab      	b.n	1b52a <__ieee754_rem_pio2+0x142>
   1b7d2:	2303      	movs	r3, #3
   1b7d4:	e684      	b.n	1b4e0 <__ieee754_rem_pio2+0xf8>
   1b7d6:	22d3      	movs	r2, #211	; 0xd3
   1b7d8:	4b0c      	ldr	r3, [pc, #48]	; (1b80c <__ieee754_rem_pio2+0x424>)
   1b7da:	0552      	lsls	r2, r2, #21
   1b7dc:	f002 fc1e 	bl	1e01c <__aeabi_dadd>
   1b7e0:	4a0b      	ldr	r2, [pc, #44]	; (1b810 <__ieee754_rem_pio2+0x428>)
   1b7e2:	4b0c      	ldr	r3, [pc, #48]	; (1b814 <__ieee754_rem_pio2+0x42c>)
   1b7e4:	0004      	movs	r4, r0
   1b7e6:	000d      	movs	r5, r1
   1b7e8:	f002 fc18 	bl	1e01c <__aeabi_dadd>
   1b7ec:	0002      	movs	r2, r0
   1b7ee:	000b      	movs	r3, r1
   1b7f0:	4641      	mov	r1, r8
   1b7f2:	0020      	movs	r0, r4
   1b7f4:	600a      	str	r2, [r1, #0]
   1b7f6:	604b      	str	r3, [r1, #4]
   1b7f8:	0029      	movs	r1, r5
   1b7fa:	f003 fdd3 	bl	1f3a4 <__aeabi_dsub>
   1b7fe:	4a04      	ldr	r2, [pc, #16]	; (1b810 <__ieee754_rem_pio2+0x428>)
   1b800:	4b04      	ldr	r3, [pc, #16]	; (1b814 <__ieee754_rem_pio2+0x42c>)
   1b802:	e7de      	b.n	1b7c2 <__ieee754_rem_pio2+0x3da>
   1b804:	3ff921fb 	.word	0x3ff921fb
   1b808:	1a626331 	.word	0x1a626331
   1b80c:	3dd0b461 	.word	0x3dd0b461
   1b810:	2e037073 	.word	0x2e037073
   1b814:	3ba3198a 	.word	0x3ba3198a

0001b818 <__ieee754_sqrt>:
   1b818:	4b6c      	ldr	r3, [pc, #432]	; (1b9cc <__ieee754_sqrt+0x1b4>)
   1b81a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b81c:	000a      	movs	r2, r1
   1b81e:	4646      	mov	r6, r8
   1b820:	000d      	movs	r5, r1
   1b822:	46d6      	mov	lr, sl
   1b824:	464f      	mov	r7, r9
   1b826:	0019      	movs	r1, r3
   1b828:	b5c0      	push	{r6, r7, lr}
   1b82a:	0004      	movs	r4, r0
   1b82c:	0006      	movs	r6, r0
   1b82e:	4029      	ands	r1, r5
   1b830:	4299      	cmp	r1, r3
   1b832:	d100      	bne.n	1b836 <__ieee754_sqrt+0x1e>
   1b834:	e0a7      	b.n	1b986 <__ieee754_sqrt+0x16e>
   1b836:	2d00      	cmp	r5, #0
   1b838:	dc00      	bgt.n	1b83c <__ieee754_sqrt+0x24>
   1b83a:	e081      	b.n	1b940 <__ieee754_sqrt+0x128>
   1b83c:	152f      	asrs	r7, r5, #20
   1b83e:	d100      	bne.n	1b842 <__ieee754_sqrt+0x2a>
   1b840:	e08e      	b.n	1b960 <__ieee754_sqrt+0x148>
   1b842:	4b63      	ldr	r3, [pc, #396]	; (1b9d0 <__ieee754_sqrt+0x1b8>)
   1b844:	0312      	lsls	r2, r2, #12
   1b846:	469c      	mov	ip, r3
   1b848:	2380      	movs	r3, #128	; 0x80
   1b84a:	0b12      	lsrs	r2, r2, #12
   1b84c:	035b      	lsls	r3, r3, #13
   1b84e:	4467      	add	r7, ip
   1b850:	431a      	orrs	r2, r3
   1b852:	07fb      	lsls	r3, r7, #31
   1b854:	d468      	bmi.n	1b928 <__ieee754_sqrt+0x110>
   1b856:	107b      	asrs	r3, r7, #1
   1b858:	469c      	mov	ip, r3
   1b85a:	0fe3      	lsrs	r3, r4, #31
   1b85c:	189b      	adds	r3, r3, r2
   1b85e:	189b      	adds	r3, r3, r2
   1b860:	2280      	movs	r2, #128	; 0x80
   1b862:	2116      	movs	r1, #22
   1b864:	2600      	movs	r6, #0
   1b866:	2500      	movs	r5, #0
   1b868:	0064      	lsls	r4, r4, #1
   1b86a:	0392      	lsls	r2, r2, #14
   1b86c:	18a8      	adds	r0, r5, r2
   1b86e:	4298      	cmp	r0, r3
   1b870:	dc02      	bgt.n	1b878 <__ieee754_sqrt+0x60>
   1b872:	1885      	adds	r5, r0, r2
   1b874:	1a1b      	subs	r3, r3, r0
   1b876:	18b6      	adds	r6, r6, r2
   1b878:	0fe0      	lsrs	r0, r4, #31
   1b87a:	005b      	lsls	r3, r3, #1
   1b87c:	3901      	subs	r1, #1
   1b87e:	181b      	adds	r3, r3, r0
   1b880:	0064      	lsls	r4, r4, #1
   1b882:	0852      	lsrs	r2, r2, #1
   1b884:	2900      	cmp	r1, #0
   1b886:	d1f1      	bne.n	1b86c <__ieee754_sqrt+0x54>
   1b888:	2200      	movs	r2, #0
   1b88a:	4692      	mov	sl, r2
   1b88c:	4690      	mov	r8, r2
   1b88e:	2280      	movs	r2, #128	; 0x80
   1b890:	2020      	movs	r0, #32
   1b892:	0612      	lsls	r2, r2, #24
   1b894:	e009      	b.n	1b8aa <__ieee754_sqrt+0x92>
   1b896:	42ab      	cmp	r3, r5
   1b898:	d038      	beq.n	1b90c <__ieee754_sqrt+0xf4>
   1b89a:	0fe1      	lsrs	r1, r4, #31
   1b89c:	18c9      	adds	r1, r1, r3
   1b89e:	3801      	subs	r0, #1
   1b8a0:	18cb      	adds	r3, r1, r3
   1b8a2:	0064      	lsls	r4, r4, #1
   1b8a4:	0852      	lsrs	r2, r2, #1
   1b8a6:	2800      	cmp	r0, #0
   1b8a8:	d018      	beq.n	1b8dc <__ieee754_sqrt+0xc4>
   1b8aa:	4641      	mov	r1, r8
   1b8ac:	1851      	adds	r1, r2, r1
   1b8ae:	42ab      	cmp	r3, r5
   1b8b0:	ddf1      	ble.n	1b896 <__ieee754_sqrt+0x7e>
   1b8b2:	188f      	adds	r7, r1, r2
   1b8b4:	46b8      	mov	r8, r7
   1b8b6:	46a9      	mov	r9, r5
   1b8b8:	2900      	cmp	r1, #0
   1b8ba:	db30      	blt.n	1b91e <__ieee754_sqrt+0x106>
   1b8bc:	1b5b      	subs	r3, r3, r5
   1b8be:	428c      	cmp	r4, r1
   1b8c0:	41ad      	sbcs	r5, r5
   1b8c2:	426d      	negs	r5, r5
   1b8c4:	1b5b      	subs	r3, r3, r5
   1b8c6:	1a64      	subs	r4, r4, r1
   1b8c8:	0fe1      	lsrs	r1, r4, #31
   1b8ca:	18c9      	adds	r1, r1, r3
   1b8cc:	3801      	subs	r0, #1
   1b8ce:	4492      	add	sl, r2
   1b8d0:	464d      	mov	r5, r9
   1b8d2:	18cb      	adds	r3, r1, r3
   1b8d4:	0064      	lsls	r4, r4, #1
   1b8d6:	0852      	lsrs	r2, r2, #1
   1b8d8:	2800      	cmp	r0, #0
   1b8da:	d1e6      	bne.n	1b8aa <__ieee754_sqrt+0x92>
   1b8dc:	4323      	orrs	r3, r4
   1b8de:	d128      	bne.n	1b932 <__ieee754_sqrt+0x11a>
   1b8e0:	4653      	mov	r3, sl
   1b8e2:	085b      	lsrs	r3, r3, #1
   1b8e4:	493b      	ldr	r1, [pc, #236]	; (1b9d4 <__ieee754_sqrt+0x1bc>)
   1b8e6:	1072      	asrs	r2, r6, #1
   1b8e8:	4688      	mov	r8, r1
   1b8ea:	4442      	add	r2, r8
   1b8ec:	07f1      	lsls	r1, r6, #31
   1b8ee:	d502      	bpl.n	1b8f6 <__ieee754_sqrt+0xde>
   1b8f0:	2180      	movs	r1, #128	; 0x80
   1b8f2:	0609      	lsls	r1, r1, #24
   1b8f4:	430b      	orrs	r3, r1
   1b8f6:	4661      	mov	r1, ip
   1b8f8:	001e      	movs	r6, r3
   1b8fa:	050f      	lsls	r7, r1, #20
   1b8fc:	18bd      	adds	r5, r7, r2
   1b8fe:	0030      	movs	r0, r6
   1b900:	0029      	movs	r1, r5
   1b902:	bc1c      	pop	{r2, r3, r4}
   1b904:	4690      	mov	r8, r2
   1b906:	4699      	mov	r9, r3
   1b908:	46a2      	mov	sl, r4
   1b90a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b90c:	42a1      	cmp	r1, r4
   1b90e:	d8c4      	bhi.n	1b89a <__ieee754_sqrt+0x82>
   1b910:	188f      	adds	r7, r1, r2
   1b912:	46b8      	mov	r8, r7
   1b914:	2900      	cmp	r1, #0
   1b916:	db42      	blt.n	1b99e <__ieee754_sqrt+0x186>
   1b918:	4699      	mov	r9, r3
   1b91a:	2300      	movs	r3, #0
   1b91c:	e7d3      	b.n	1b8c6 <__ieee754_sqrt+0xae>
   1b91e:	2f00      	cmp	r7, #0
   1b920:	db2f      	blt.n	1b982 <__ieee754_sqrt+0x16a>
   1b922:	1c6f      	adds	r7, r5, #1
   1b924:	46b9      	mov	r9, r7
   1b926:	e7c9      	b.n	1b8bc <__ieee754_sqrt+0xa4>
   1b928:	0fe1      	lsrs	r1, r4, #31
   1b92a:	0052      	lsls	r2, r2, #1
   1b92c:	188a      	adds	r2, r1, r2
   1b92e:	0064      	lsls	r4, r4, #1
   1b930:	e791      	b.n	1b856 <__ieee754_sqrt+0x3e>
   1b932:	4653      	mov	r3, sl
   1b934:	3301      	adds	r3, #1
   1b936:	d035      	beq.n	1b9a4 <__ieee754_sqrt+0x18c>
   1b938:	4653      	mov	r3, sl
   1b93a:	3301      	adds	r3, #1
   1b93c:	085b      	lsrs	r3, r3, #1
   1b93e:	e7d1      	b.n	1b8e4 <__ieee754_sqrt+0xcc>
   1b940:	006b      	lsls	r3, r5, #1
   1b942:	085b      	lsrs	r3, r3, #1
   1b944:	4303      	orrs	r3, r0
   1b946:	d0da      	beq.n	1b8fe <__ieee754_sqrt+0xe6>
   1b948:	2700      	movs	r7, #0
   1b94a:	2d00      	cmp	r5, #0
   1b94c:	d132      	bne.n	1b9b4 <__ieee754_sqrt+0x19c>
   1b94e:	0ae2      	lsrs	r2, r4, #11
   1b950:	3f15      	subs	r7, #21
   1b952:	0564      	lsls	r4, r4, #21
   1b954:	2a00      	cmp	r2, #0
   1b956:	d0fa      	beq.n	1b94e <__ieee754_sqrt+0x136>
   1b958:	2380      	movs	r3, #128	; 0x80
   1b95a:	035b      	lsls	r3, r3, #13
   1b95c:	421a      	tst	r2, r3
   1b95e:	d124      	bne.n	1b9aa <__ieee754_sqrt+0x192>
   1b960:	2080      	movs	r0, #128	; 0x80
   1b962:	2300      	movs	r3, #0
   1b964:	0340      	lsls	r0, r0, #13
   1b966:	e000      	b.n	1b96a <__ieee754_sqrt+0x152>
   1b968:	000b      	movs	r3, r1
   1b96a:	0052      	lsls	r2, r2, #1
   1b96c:	1c59      	adds	r1, r3, #1
   1b96e:	4202      	tst	r2, r0
   1b970:	d0fa      	beq.n	1b968 <__ieee754_sqrt+0x150>
   1b972:	2020      	movs	r0, #32
   1b974:	1a40      	subs	r0, r0, r1
   1b976:	1aff      	subs	r7, r7, r3
   1b978:	0023      	movs	r3, r4
   1b97a:	40c3      	lsrs	r3, r0
   1b97c:	408c      	lsls	r4, r1
   1b97e:	431a      	orrs	r2, r3
   1b980:	e75f      	b.n	1b842 <__ieee754_sqrt+0x2a>
   1b982:	46a9      	mov	r9, r5
   1b984:	e79a      	b.n	1b8bc <__ieee754_sqrt+0xa4>
   1b986:	002b      	movs	r3, r5
   1b988:	0002      	movs	r2, r0
   1b98a:	0029      	movs	r1, r5
   1b98c:	f003 fa8a 	bl	1eea4 <__aeabi_dmul>
   1b990:	0032      	movs	r2, r6
   1b992:	002b      	movs	r3, r5
   1b994:	f002 fb42 	bl	1e01c <__aeabi_dadd>
   1b998:	0006      	movs	r6, r0
   1b99a:	000d      	movs	r5, r1
   1b99c:	e7af      	b.n	1b8fe <__ieee754_sqrt+0xe6>
   1b99e:	2f00      	cmp	r7, #0
   1b9a0:	dabf      	bge.n	1b922 <__ieee754_sqrt+0x10a>
   1b9a2:	e7b9      	b.n	1b918 <__ieee754_sqrt+0x100>
   1b9a4:	3601      	adds	r6, #1
   1b9a6:	2300      	movs	r3, #0
   1b9a8:	e79c      	b.n	1b8e4 <__ieee754_sqrt+0xcc>
   1b9aa:	2301      	movs	r3, #1
   1b9ac:	2100      	movs	r1, #0
   1b9ae:	2020      	movs	r0, #32
   1b9b0:	425b      	negs	r3, r3
   1b9b2:	e7e0      	b.n	1b976 <__ieee754_sqrt+0x15e>
   1b9b4:	002b      	movs	r3, r5
   1b9b6:	0002      	movs	r2, r0
   1b9b8:	0029      	movs	r1, r5
   1b9ba:	f003 fcf3 	bl	1f3a4 <__aeabi_dsub>
   1b9be:	0002      	movs	r2, r0
   1b9c0:	000b      	movs	r3, r1
   1b9c2:	f002 fe3b 	bl	1e63c <__aeabi_ddiv>
   1b9c6:	0006      	movs	r6, r0
   1b9c8:	000d      	movs	r5, r1
   1b9ca:	e798      	b.n	1b8fe <__ieee754_sqrt+0xe6>
   1b9cc:	7ff00000 	.word	0x7ff00000
   1b9d0:	fffffc01 	.word	0xfffffc01
   1b9d4:	3fe00000 	.word	0x3fe00000

0001b9d8 <__kernel_cos>:
   1b9d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b9da:	4647      	mov	r7, r8
   1b9dc:	46ce      	mov	lr, r9
   1b9de:	b580      	push	{r7, lr}
   1b9e0:	b087      	sub	sp, #28
   1b9e2:	9200      	str	r2, [sp, #0]
   1b9e4:	9301      	str	r3, [sp, #4]
   1b9e6:	4b75      	ldr	r3, [pc, #468]	; (1bbbc <__kernel_cos+0x1e4>)
   1b9e8:	004f      	lsls	r7, r1, #1
   1b9ea:	4681      	mov	r9, r0
   1b9ec:	4688      	mov	r8, r1
   1b9ee:	087f      	lsrs	r7, r7, #1
   1b9f0:	429f      	cmp	r7, r3
   1b9f2:	dc63      	bgt.n	1babc <__kernel_cos+0xe4>
   1b9f4:	f004 f80c 	bl	1fa10 <__aeabi_d2iz>
   1b9f8:	2800      	cmp	r0, #0
   1b9fa:	d100      	bne.n	1b9fe <__kernel_cos+0x26>
   1b9fc:	e0da      	b.n	1bbb4 <__kernel_cos+0x1dc>
   1b9fe:	464a      	mov	r2, r9
   1ba00:	4643      	mov	r3, r8
   1ba02:	4648      	mov	r0, r9
   1ba04:	4641      	mov	r1, r8
   1ba06:	f003 fa4d 	bl	1eea4 <__aeabi_dmul>
   1ba0a:	0004      	movs	r4, r0
   1ba0c:	000d      	movs	r5, r1
   1ba0e:	4a6c      	ldr	r2, [pc, #432]	; (1bbc0 <__kernel_cos+0x1e8>)
   1ba10:	4b6c      	ldr	r3, [pc, #432]	; (1bbc4 <__kernel_cos+0x1ec>)
   1ba12:	f003 fa47 	bl	1eea4 <__aeabi_dmul>
   1ba16:	4a6c      	ldr	r2, [pc, #432]	; (1bbc8 <__kernel_cos+0x1f0>)
   1ba18:	4b6c      	ldr	r3, [pc, #432]	; (1bbcc <__kernel_cos+0x1f4>)
   1ba1a:	f002 faff 	bl	1e01c <__aeabi_dadd>
   1ba1e:	0022      	movs	r2, r4
   1ba20:	002b      	movs	r3, r5
   1ba22:	f003 fa3f 	bl	1eea4 <__aeabi_dmul>
   1ba26:	4a6a      	ldr	r2, [pc, #424]	; (1bbd0 <__kernel_cos+0x1f8>)
   1ba28:	4b6a      	ldr	r3, [pc, #424]	; (1bbd4 <__kernel_cos+0x1fc>)
   1ba2a:	f003 fcbb 	bl	1f3a4 <__aeabi_dsub>
   1ba2e:	0022      	movs	r2, r4
   1ba30:	002b      	movs	r3, r5
   1ba32:	f003 fa37 	bl	1eea4 <__aeabi_dmul>
   1ba36:	4a68      	ldr	r2, [pc, #416]	; (1bbd8 <__kernel_cos+0x200>)
   1ba38:	4b68      	ldr	r3, [pc, #416]	; (1bbdc <__kernel_cos+0x204>)
   1ba3a:	f002 faef 	bl	1e01c <__aeabi_dadd>
   1ba3e:	0022      	movs	r2, r4
   1ba40:	002b      	movs	r3, r5
   1ba42:	f003 fa2f 	bl	1eea4 <__aeabi_dmul>
   1ba46:	4a66      	ldr	r2, [pc, #408]	; (1bbe0 <__kernel_cos+0x208>)
   1ba48:	4b66      	ldr	r3, [pc, #408]	; (1bbe4 <__kernel_cos+0x20c>)
   1ba4a:	f003 fcab 	bl	1f3a4 <__aeabi_dsub>
   1ba4e:	0022      	movs	r2, r4
   1ba50:	002b      	movs	r3, r5
   1ba52:	f003 fa27 	bl	1eea4 <__aeabi_dmul>
   1ba56:	4a64      	ldr	r2, [pc, #400]	; (1bbe8 <__kernel_cos+0x210>)
   1ba58:	4b64      	ldr	r3, [pc, #400]	; (1bbec <__kernel_cos+0x214>)
   1ba5a:	f002 fadf 	bl	1e01c <__aeabi_dadd>
   1ba5e:	0022      	movs	r2, r4
   1ba60:	002b      	movs	r3, r5
   1ba62:	f003 fa1f 	bl	1eea4 <__aeabi_dmul>
   1ba66:	9002      	str	r0, [sp, #8]
   1ba68:	9103      	str	r1, [sp, #12]
   1ba6a:	2200      	movs	r2, #0
   1ba6c:	4b60      	ldr	r3, [pc, #384]	; (1bbf0 <__kernel_cos+0x218>)
   1ba6e:	0020      	movs	r0, r4
   1ba70:	0029      	movs	r1, r5
   1ba72:	f003 fa17 	bl	1eea4 <__aeabi_dmul>
   1ba76:	9a02      	ldr	r2, [sp, #8]
   1ba78:	9b03      	ldr	r3, [sp, #12]
   1ba7a:	0006      	movs	r6, r0
   1ba7c:	000f      	movs	r7, r1
   1ba7e:	0020      	movs	r0, r4
   1ba80:	0029      	movs	r1, r5
   1ba82:	f003 fa0f 	bl	1eea4 <__aeabi_dmul>
   1ba86:	9a00      	ldr	r2, [sp, #0]
   1ba88:	9b01      	ldr	r3, [sp, #4]
   1ba8a:	0004      	movs	r4, r0
   1ba8c:	000d      	movs	r5, r1
   1ba8e:	4648      	mov	r0, r9
   1ba90:	4641      	mov	r1, r8
   1ba92:	f003 fa07 	bl	1eea4 <__aeabi_dmul>
   1ba96:	0002      	movs	r2, r0
   1ba98:	000b      	movs	r3, r1
   1ba9a:	0020      	movs	r0, r4
   1ba9c:	0029      	movs	r1, r5
   1ba9e:	f003 fc81 	bl	1f3a4 <__aeabi_dsub>
   1baa2:	0002      	movs	r2, r0
   1baa4:	000b      	movs	r3, r1
   1baa6:	0030      	movs	r0, r6
   1baa8:	0039      	movs	r1, r7
   1baaa:	f003 fc7b 	bl	1f3a4 <__aeabi_dsub>
   1baae:	0002      	movs	r2, r0
   1bab0:	000b      	movs	r3, r1
   1bab2:	2000      	movs	r0, #0
   1bab4:	494f      	ldr	r1, [pc, #316]	; (1bbf4 <__kernel_cos+0x21c>)
   1bab6:	f003 fc75 	bl	1f3a4 <__aeabi_dsub>
   1baba:	e070      	b.n	1bb9e <__kernel_cos+0x1c6>
   1babc:	0002      	movs	r2, r0
   1babe:	000b      	movs	r3, r1
   1bac0:	f003 f9f0 	bl	1eea4 <__aeabi_dmul>
   1bac4:	0004      	movs	r4, r0
   1bac6:	000d      	movs	r5, r1
   1bac8:	4a3d      	ldr	r2, [pc, #244]	; (1bbc0 <__kernel_cos+0x1e8>)
   1baca:	4b3e      	ldr	r3, [pc, #248]	; (1bbc4 <__kernel_cos+0x1ec>)
   1bacc:	f003 f9ea 	bl	1eea4 <__aeabi_dmul>
   1bad0:	4a3d      	ldr	r2, [pc, #244]	; (1bbc8 <__kernel_cos+0x1f0>)
   1bad2:	4b3e      	ldr	r3, [pc, #248]	; (1bbcc <__kernel_cos+0x1f4>)
   1bad4:	f002 faa2 	bl	1e01c <__aeabi_dadd>
   1bad8:	0022      	movs	r2, r4
   1bada:	002b      	movs	r3, r5
   1badc:	f003 f9e2 	bl	1eea4 <__aeabi_dmul>
   1bae0:	4a3b      	ldr	r2, [pc, #236]	; (1bbd0 <__kernel_cos+0x1f8>)
   1bae2:	4b3c      	ldr	r3, [pc, #240]	; (1bbd4 <__kernel_cos+0x1fc>)
   1bae4:	f003 fc5e 	bl	1f3a4 <__aeabi_dsub>
   1bae8:	0022      	movs	r2, r4
   1baea:	002b      	movs	r3, r5
   1baec:	f003 f9da 	bl	1eea4 <__aeabi_dmul>
   1baf0:	4a39      	ldr	r2, [pc, #228]	; (1bbd8 <__kernel_cos+0x200>)
   1baf2:	4b3a      	ldr	r3, [pc, #232]	; (1bbdc <__kernel_cos+0x204>)
   1baf4:	f002 fa92 	bl	1e01c <__aeabi_dadd>
   1baf8:	0022      	movs	r2, r4
   1bafa:	002b      	movs	r3, r5
   1bafc:	f003 f9d2 	bl	1eea4 <__aeabi_dmul>
   1bb00:	4a37      	ldr	r2, [pc, #220]	; (1bbe0 <__kernel_cos+0x208>)
   1bb02:	4b38      	ldr	r3, [pc, #224]	; (1bbe4 <__kernel_cos+0x20c>)
   1bb04:	f003 fc4e 	bl	1f3a4 <__aeabi_dsub>
   1bb08:	0022      	movs	r2, r4
   1bb0a:	002b      	movs	r3, r5
   1bb0c:	f003 f9ca 	bl	1eea4 <__aeabi_dmul>
   1bb10:	4a35      	ldr	r2, [pc, #212]	; (1bbe8 <__kernel_cos+0x210>)
   1bb12:	4b36      	ldr	r3, [pc, #216]	; (1bbec <__kernel_cos+0x214>)
   1bb14:	f002 fa82 	bl	1e01c <__aeabi_dadd>
   1bb18:	002b      	movs	r3, r5
   1bb1a:	0022      	movs	r2, r4
   1bb1c:	f003 f9c2 	bl	1eea4 <__aeabi_dmul>
   1bb20:	4b35      	ldr	r3, [pc, #212]	; (1bbf8 <__kernel_cos+0x220>)
   1bb22:	9002      	str	r0, [sp, #8]
   1bb24:	9103      	str	r1, [sp, #12]
   1bb26:	429f      	cmp	r7, r3
   1bb28:	dd9f      	ble.n	1ba6a <__kernel_cos+0x92>
   1bb2a:	4b34      	ldr	r3, [pc, #208]	; (1bbfc <__kernel_cos+0x224>)
   1bb2c:	2200      	movs	r2, #0
   1bb2e:	429f      	cmp	r7, r3
   1bb30:	dc3a      	bgt.n	1bba8 <__kernel_cos+0x1d0>
   1bb32:	4933      	ldr	r1, [pc, #204]	; (1bc00 <__kernel_cos+0x228>)
   1bb34:	2000      	movs	r0, #0
   1bb36:	187b      	adds	r3, r7, r1
   1bb38:	492e      	ldr	r1, [pc, #184]	; (1bbf4 <__kernel_cos+0x21c>)
   1bb3a:	0016      	movs	r6, r2
   1bb3c:	001f      	movs	r7, r3
   1bb3e:	f003 fc31 	bl	1f3a4 <__aeabi_dsub>
   1bb42:	9004      	str	r0, [sp, #16]
   1bb44:	9105      	str	r1, [sp, #20]
   1bb46:	2200      	movs	r2, #0
   1bb48:	4b29      	ldr	r3, [pc, #164]	; (1bbf0 <__kernel_cos+0x218>)
   1bb4a:	0020      	movs	r0, r4
   1bb4c:	0029      	movs	r1, r5
   1bb4e:	f003 f9a9 	bl	1eea4 <__aeabi_dmul>
   1bb52:	0032      	movs	r2, r6
   1bb54:	003b      	movs	r3, r7
   1bb56:	f003 fc25 	bl	1f3a4 <__aeabi_dsub>
   1bb5a:	9a02      	ldr	r2, [sp, #8]
   1bb5c:	9b03      	ldr	r3, [sp, #12]
   1bb5e:	0006      	movs	r6, r0
   1bb60:	000f      	movs	r7, r1
   1bb62:	0020      	movs	r0, r4
   1bb64:	0029      	movs	r1, r5
   1bb66:	f003 f99d 	bl	1eea4 <__aeabi_dmul>
   1bb6a:	9a00      	ldr	r2, [sp, #0]
   1bb6c:	9b01      	ldr	r3, [sp, #4]
   1bb6e:	0004      	movs	r4, r0
   1bb70:	000d      	movs	r5, r1
   1bb72:	4648      	mov	r0, r9
   1bb74:	4641      	mov	r1, r8
   1bb76:	f003 f995 	bl	1eea4 <__aeabi_dmul>
   1bb7a:	0002      	movs	r2, r0
   1bb7c:	000b      	movs	r3, r1
   1bb7e:	0020      	movs	r0, r4
   1bb80:	0029      	movs	r1, r5
   1bb82:	f003 fc0f 	bl	1f3a4 <__aeabi_dsub>
   1bb86:	0002      	movs	r2, r0
   1bb88:	000b      	movs	r3, r1
   1bb8a:	0030      	movs	r0, r6
   1bb8c:	0039      	movs	r1, r7
   1bb8e:	f003 fc09 	bl	1f3a4 <__aeabi_dsub>
   1bb92:	0002      	movs	r2, r0
   1bb94:	000b      	movs	r3, r1
   1bb96:	9804      	ldr	r0, [sp, #16]
   1bb98:	9905      	ldr	r1, [sp, #20]
   1bb9a:	f003 fc03 	bl	1f3a4 <__aeabi_dsub>
   1bb9e:	b007      	add	sp, #28
   1bba0:	bc0c      	pop	{r2, r3}
   1bba2:	4690      	mov	r8, r2
   1bba4:	4699      	mov	r9, r3
   1bba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bba8:	4b16      	ldr	r3, [pc, #88]	; (1bc04 <__kernel_cos+0x22c>)
   1bbaa:	2600      	movs	r6, #0
   1bbac:	9204      	str	r2, [sp, #16]
   1bbae:	9305      	str	r3, [sp, #20]
   1bbb0:	4f15      	ldr	r7, [pc, #84]	; (1bc08 <__kernel_cos+0x230>)
   1bbb2:	e7c8      	b.n	1bb46 <__kernel_cos+0x16e>
   1bbb4:	2000      	movs	r0, #0
   1bbb6:	490f      	ldr	r1, [pc, #60]	; (1bbf4 <__kernel_cos+0x21c>)
   1bbb8:	e7f1      	b.n	1bb9e <__kernel_cos+0x1c6>
   1bbba:	46c0      	nop			; (mov r8, r8)
   1bbbc:	3e3fffff 	.word	0x3e3fffff
   1bbc0:	be8838d4 	.word	0xbe8838d4
   1bbc4:	bda8fae9 	.word	0xbda8fae9
   1bbc8:	bdb4b1c4 	.word	0xbdb4b1c4
   1bbcc:	3e21ee9e 	.word	0x3e21ee9e
   1bbd0:	809c52ad 	.word	0x809c52ad
   1bbd4:	3e927e4f 	.word	0x3e927e4f
   1bbd8:	19cb1590 	.word	0x19cb1590
   1bbdc:	3efa01a0 	.word	0x3efa01a0
   1bbe0:	16c15177 	.word	0x16c15177
   1bbe4:	3f56c16c 	.word	0x3f56c16c
   1bbe8:	5555554c 	.word	0x5555554c
   1bbec:	3fa55555 	.word	0x3fa55555
   1bbf0:	3fe00000 	.word	0x3fe00000
   1bbf4:	3ff00000 	.word	0x3ff00000
   1bbf8:	3fd33332 	.word	0x3fd33332
   1bbfc:	3fe90000 	.word	0x3fe90000
   1bc00:	ffe00000 	.word	0xffe00000
   1bc04:	3fe70000 	.word	0x3fe70000
   1bc08:	3fd20000 	.word	0x3fd20000

0001bc0c <__kernel_rem_pio2>:
   1bc0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bc0e:	46de      	mov	lr, fp
   1bc10:	464e      	mov	r6, r9
   1bc12:	4645      	mov	r5, r8
   1bc14:	4657      	mov	r7, sl
   1bc16:	b5e0      	push	{r5, r6, r7, lr}
   1bc18:	4ca3      	ldr	r4, [pc, #652]	; (1bea8 <__kernel_rem_pio2+0x29c>)
   1bc1a:	44a5      	add	sp, r4
   1bc1c:	9107      	str	r1, [sp, #28]
   1bc1e:	0019      	movs	r1, r3
   1bc20:	0014      	movs	r4, r2
   1bc22:	9aa4      	ldr	r2, [sp, #656]	; 0x290
   1bc24:	9309      	str	r3, [sp, #36]	; 0x24
   1bc26:	4ba1      	ldr	r3, [pc, #644]	; (1beac <__kernel_rem_pio2+0x2a0>)
   1bc28:	0092      	lsls	r2, r2, #2
   1bc2a:	58d2      	ldr	r2, [r2, r3]
   1bc2c:	000b      	movs	r3, r1
   1bc2e:	9003      	str	r0, [sp, #12]
   1bc30:	3b01      	subs	r3, #1
   1bc32:	1ee0      	subs	r0, r4, #3
   1bc34:	2118      	movs	r1, #24
   1bc36:	001d      	movs	r5, r3
   1bc38:	0016      	movs	r6, r2
   1bc3a:	9206      	str	r2, [sp, #24]
   1bc3c:	9302      	str	r3, [sp, #8]
   1bc3e:	f001 f8f7 	bl	1ce30 <__divsi3>
   1bc42:	43c3      	mvns	r3, r0
   1bc44:	0002      	movs	r2, r0
   1bc46:	17db      	asrs	r3, r3, #31
   1bc48:	401a      	ands	r2, r3
   1bc4a:	0013      	movs	r3, r2
   1bc4c:	0011      	movs	r1, r2
   1bc4e:	3301      	adds	r3, #1
   1bc50:	920b      	str	r2, [sp, #44]	; 0x2c
   1bc52:	009a      	lsls	r2, r3, #2
   1bc54:	1a9b      	subs	r3, r3, r2
   1bc56:	00db      	lsls	r3, r3, #3
   1bc58:	191b      	adds	r3, r3, r4
   1bc5a:	9304      	str	r3, [sp, #16]
   1bc5c:	1b4c      	subs	r4, r1, r5
   1bc5e:	1976      	adds	r6, r6, r5
   1bc60:	d418      	bmi.n	1bc94 <__kernel_rem_pio2+0x88>
   1bc62:	9ba5      	ldr	r3, [sp, #660]	; 0x294
   1bc64:	00a5      	lsls	r5, r4, #2
   1bc66:	469c      	mov	ip, r3
   1bc68:	1936      	adds	r6, r6, r4
   1bc6a:	af22      	add	r7, sp, #136	; 0x88
   1bc6c:	4465      	add	r5, ip
   1bc6e:	3601      	adds	r6, #1
   1bc70:	e007      	b.n	1bc82 <__kernel_rem_pio2+0x76>
   1bc72:	6828      	ldr	r0, [r5, #0]
   1bc74:	f003 ff00 	bl	1fa78 <__aeabi_i2d>
   1bc78:	3401      	adds	r4, #1
   1bc7a:	c703      	stmia	r7!, {r0, r1}
   1bc7c:	3504      	adds	r5, #4
   1bc7e:	42b4      	cmp	r4, r6
   1bc80:	d008      	beq.n	1bc94 <__kernel_rem_pio2+0x88>
   1bc82:	2c00      	cmp	r4, #0
   1bc84:	daf5      	bge.n	1bc72 <__kernel_rem_pio2+0x66>
   1bc86:	2000      	movs	r0, #0
   1bc88:	2100      	movs	r1, #0
   1bc8a:	3401      	adds	r4, #1
   1bc8c:	c703      	stmia	r7!, {r0, r1}
   1bc8e:	3504      	adds	r5, #4
   1bc90:	42b4      	cmp	r4, r6
   1bc92:	d1f6      	bne.n	1bc82 <__kernel_rem_pio2+0x76>
   1bc94:	9b06      	ldr	r3, [sp, #24]
   1bc96:	2b00      	cmp	r3, #0
   1bc98:	da01      	bge.n	1bc9e <__kernel_rem_pio2+0x92>
   1bc9a:	f000 fc01 	bl	1c4a0 <__kernel_rem_pio2+0x894>
   1bc9e:	ab72      	add	r3, sp, #456	; 0x1c8
   1bca0:	0019      	movs	r1, r3
   1bca2:	468b      	mov	fp, r1
   1bca4:	aa22      	add	r2, sp, #136	; 0x88
   1bca6:	4691      	mov	r9, r2
   1bca8:	9a06      	ldr	r2, [sp, #24]
   1bcaa:	9308      	str	r3, [sp, #32]
   1bcac:	3201      	adds	r2, #1
   1bcae:	00d2      	lsls	r2, r2, #3
   1bcb0:	4493      	add	fp, r2
   1bcb2:	9a03      	ldr	r2, [sp, #12]
   1bcb4:	469a      	mov	sl, r3
   1bcb6:	4690      	mov	r8, r2
   1bcb8:	9b02      	ldr	r3, [sp, #8]
   1bcba:	00db      	lsls	r3, r3, #3
   1bcbc:	4499      	add	r9, r3
   1bcbe:	3308      	adds	r3, #8
   1bcc0:	4498      	add	r8, r3
   1bcc2:	9b02      	ldr	r3, [sp, #8]
   1bcc4:	2b00      	cmp	r3, #0
   1bcc6:	da00      	bge.n	1bcca <__kernel_rem_pio2+0xbe>
   1bcc8:	e28d      	b.n	1c1e6 <__kernel_rem_pio2+0x5da>
   1bcca:	464c      	mov	r4, r9
   1bccc:	2600      	movs	r6, #0
   1bcce:	2700      	movs	r7, #0
   1bcd0:	9d03      	ldr	r5, [sp, #12]
   1bcd2:	6822      	ldr	r2, [r4, #0]
   1bcd4:	6863      	ldr	r3, [r4, #4]
   1bcd6:	cd03      	ldmia	r5!, {r0, r1}
   1bcd8:	f003 f8e4 	bl	1eea4 <__aeabi_dmul>
   1bcdc:	0002      	movs	r2, r0
   1bcde:	000b      	movs	r3, r1
   1bce0:	0030      	movs	r0, r6
   1bce2:	0039      	movs	r1, r7
   1bce4:	f002 f99a 	bl	1e01c <__aeabi_dadd>
   1bce8:	3c08      	subs	r4, #8
   1bcea:	0006      	movs	r6, r0
   1bcec:	000f      	movs	r7, r1
   1bcee:	4545      	cmp	r5, r8
   1bcf0:	d1ef      	bne.n	1bcd2 <__kernel_rem_pio2+0xc6>
   1bcf2:	4653      	mov	r3, sl
   1bcf4:	c3c0      	stmia	r3!, {r6, r7}
   1bcf6:	469a      	mov	sl, r3
   1bcf8:	2308      	movs	r3, #8
   1bcfa:	469c      	mov	ip, r3
   1bcfc:	44e1      	add	r9, ip
   1bcfe:	45da      	cmp	sl, fp
   1bd00:	d1df      	bne.n	1bcc2 <__kernel_rem_pio2+0xb6>
   1bd02:	9a06      	ldr	r2, [sp, #24]
   1bd04:	496a      	ldr	r1, [pc, #424]	; (1beb0 <__kernel_rem_pio2+0x2a4>)
   1bd06:	0013      	movs	r3, r2
   1bd08:	468c      	mov	ip, r1
   1bd0a:	4463      	add	r3, ip
   1bd0c:	009b      	lsls	r3, r3, #2
   1bd0e:	a80e      	add	r0, sp, #56	; 0x38
   1bd10:	0019      	movs	r1, r3
   1bd12:	4684      	mov	ip, r0
   1bd14:	4461      	add	r1, ip
   1bd16:	910d      	str	r1, [sp, #52]	; 0x34
   1bd18:	9903      	ldr	r1, [sp, #12]
   1bd1a:	3b04      	subs	r3, #4
   1bd1c:	468b      	mov	fp, r1
   1bd1e:	4463      	add	r3, ip
   1bd20:	930c      	str	r3, [sp, #48]	; 0x30
   1bd22:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1bd24:	9200      	str	r2, [sp, #0]
   1bd26:	00db      	lsls	r3, r3, #3
   1bd28:	449b      	add	fp, r3
   1bd2a:	9a00      	ldr	r2, [sp, #0]
   1bd2c:	9808      	ldr	r0, [sp, #32]
   1bd2e:	00d3      	lsls	r3, r2, #3
   1bd30:	0019      	movs	r1, r3
   1bd32:	930a      	str	r3, [sp, #40]	; 0x28
   1bd34:	468c      	mov	ip, r1
   1bd36:	0003      	movs	r3, r0
   1bd38:	4463      	add	r3, ip
   1bd3a:	681e      	ldr	r6, [r3, #0]
   1bd3c:	685f      	ldr	r7, [r3, #4]
   1bd3e:	2a00      	cmp	r2, #0
   1bd40:	dd34      	ble.n	1bdac <__kernel_rem_pio2+0x1a0>
   1bd42:	ab0e      	add	r3, sp, #56	; 0x38
   1bd44:	4699      	mov	r9, r3
   1bd46:	0013      	movs	r3, r2
   1bd48:	4a5a      	ldr	r2, [pc, #360]	; (1beb4 <__kernel_rem_pio2+0x2a8>)
   1bd4a:	4680      	mov	r8, r0
   1bd4c:	4694      	mov	ip, r2
   1bd4e:	4463      	add	r3, ip
   1bd50:	00db      	lsls	r3, r3, #3
   1bd52:	4498      	add	r8, r3
   1bd54:	ab70      	add	r3, sp, #448	; 0x1c0
   1bd56:	469a      	mov	sl, r3
   1bd58:	2200      	movs	r2, #0
   1bd5a:	4b57      	ldr	r3, [pc, #348]	; (1beb8 <__kernel_rem_pio2+0x2ac>)
   1bd5c:	0030      	movs	r0, r6
   1bd5e:	0039      	movs	r1, r7
   1bd60:	f003 f8a0 	bl	1eea4 <__aeabi_dmul>
   1bd64:	f003 fe54 	bl	1fa10 <__aeabi_d2iz>
   1bd68:	f003 fe86 	bl	1fa78 <__aeabi_i2d>
   1bd6c:	2200      	movs	r2, #0
   1bd6e:	4b53      	ldr	r3, [pc, #332]	; (1bebc <__kernel_rem_pio2+0x2b0>)
   1bd70:	0004      	movs	r4, r0
   1bd72:	000d      	movs	r5, r1
   1bd74:	f003 f896 	bl	1eea4 <__aeabi_dmul>
   1bd78:	0002      	movs	r2, r0
   1bd7a:	000b      	movs	r3, r1
   1bd7c:	0030      	movs	r0, r6
   1bd7e:	0039      	movs	r1, r7
   1bd80:	f003 fb10 	bl	1f3a4 <__aeabi_dsub>
   1bd84:	f003 fe44 	bl	1fa10 <__aeabi_d2iz>
   1bd88:	464b      	mov	r3, r9
   1bd8a:	c301      	stmia	r3!, {r0}
   1bd8c:	4699      	mov	r9, r3
   1bd8e:	4643      	mov	r3, r8
   1bd90:	0020      	movs	r0, r4
   1bd92:	681a      	ldr	r2, [r3, #0]
   1bd94:	685b      	ldr	r3, [r3, #4]
   1bd96:	0029      	movs	r1, r5
   1bd98:	f002 f940 	bl	1e01c <__aeabi_dadd>
   1bd9c:	2308      	movs	r3, #8
   1bd9e:	425b      	negs	r3, r3
   1bda0:	469c      	mov	ip, r3
   1bda2:	44e0      	add	r8, ip
   1bda4:	0006      	movs	r6, r0
   1bda6:	000f      	movs	r7, r1
   1bda8:	45d0      	cmp	r8, sl
   1bdaa:	d1d5      	bne.n	1bd58 <__kernel_rem_pio2+0x14c>
   1bdac:	9b04      	ldr	r3, [sp, #16]
   1bdae:	0030      	movs	r0, r6
   1bdb0:	001a      	movs	r2, r3
   1bdb2:	0039      	movs	r1, r7
   1bdb4:	4699      	mov	r9, r3
   1bdb6:	f000 ff41 	bl	1cc3c <scalbn>
   1bdba:	23ff      	movs	r3, #255	; 0xff
   1bdbc:	2200      	movs	r2, #0
   1bdbe:	059b      	lsls	r3, r3, #22
   1bdc0:	0004      	movs	r4, r0
   1bdc2:	000d      	movs	r5, r1
   1bdc4:	f003 f86e 	bl	1eea4 <__aeabi_dmul>
   1bdc8:	f000 fdf6 	bl	1c9b8 <floor>
   1bdcc:	2200      	movs	r2, #0
   1bdce:	4b3c      	ldr	r3, [pc, #240]	; (1bec0 <__kernel_rem_pio2+0x2b4>)
   1bdd0:	f003 f868 	bl	1eea4 <__aeabi_dmul>
   1bdd4:	0002      	movs	r2, r0
   1bdd6:	000b      	movs	r3, r1
   1bdd8:	0020      	movs	r0, r4
   1bdda:	0029      	movs	r1, r5
   1bddc:	f003 fae2 	bl	1f3a4 <__aeabi_dsub>
   1bde0:	000d      	movs	r5, r1
   1bde2:	0004      	movs	r4, r0
   1bde4:	f003 fe14 	bl	1fa10 <__aeabi_d2iz>
   1bde8:	4680      	mov	r8, r0
   1bdea:	f003 fe45 	bl	1fa78 <__aeabi_i2d>
   1bdee:	0002      	movs	r2, r0
   1bdf0:	000b      	movs	r3, r1
   1bdf2:	0020      	movs	r0, r4
   1bdf4:	0029      	movs	r1, r5
   1bdf6:	f003 fad5 	bl	1f3a4 <__aeabi_dsub>
   1bdfa:	000f      	movs	r7, r1
   1bdfc:	4649      	mov	r1, r9
   1bdfe:	0006      	movs	r6, r0
   1be00:	2900      	cmp	r1, #0
   1be02:	dc00      	bgt.n	1be06 <__kernel_rem_pio2+0x1fa>
   1be04:	e110      	b.n	1c028 <__kernel_rem_pio2+0x41c>
   1be06:	9b00      	ldr	r3, [sp, #0]
   1be08:	2018      	movs	r0, #24
   1be0a:	1e5a      	subs	r2, r3, #1
   1be0c:	0092      	lsls	r2, r2, #2
   1be0e:	ab0e      	add	r3, sp, #56	; 0x38
   1be10:	589b      	ldr	r3, [r3, r2]
   1be12:	1a40      	subs	r0, r0, r1
   1be14:	001d      	movs	r5, r3
   1be16:	4105      	asrs	r5, r0
   1be18:	44a8      	add	r8, r5
   1be1a:	4085      	lsls	r5, r0
   1be1c:	1b5d      	subs	r5, r3, r5
   1be1e:	ab0e      	add	r3, sp, #56	; 0x38
   1be20:	509d      	str	r5, [r3, r2]
   1be22:	2217      	movs	r2, #23
   1be24:	1a52      	subs	r2, r2, r1
   1be26:	4115      	asrs	r5, r2
   1be28:	2d00      	cmp	r5, #0
   1be2a:	dc00      	bgt.n	1be2e <__kernel_rem_pio2+0x222>
   1be2c:	e07d      	b.n	1bf2a <__kernel_rem_pio2+0x31e>
   1be2e:	2301      	movs	r3, #1
   1be30:	469c      	mov	ip, r3
   1be32:	9b00      	ldr	r3, [sp, #0]
   1be34:	44e0      	add	r8, ip
   1be36:	2b00      	cmp	r3, #0
   1be38:	dd48      	ble.n	1becc <__kernel_rem_pio2+0x2c0>
   1be3a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1be3c:	2c00      	cmp	r4, #0
   1be3e:	d100      	bne.n	1be42 <__kernel_rem_pio2+0x236>
   1be40:	e34b      	b.n	1c4da <__kernel_rem_pio2+0x8ce>
   1be42:	2201      	movs	r2, #1
   1be44:	2300      	movs	r3, #0
   1be46:	2100      	movs	r1, #0
   1be48:	2080      	movs	r0, #128	; 0x80
   1be4a:	0440      	lsls	r0, r0, #17
   1be4c:	1b04      	subs	r4, r0, r4
   1be4e:	a80e      	add	r0, sp, #56	; 0x38
   1be50:	5044      	str	r4, [r0, r1]
   1be52:	9900      	ldr	r1, [sp, #0]
   1be54:	4291      	cmp	r1, r2
   1be56:	dd18      	ble.n	1be8a <__kernel_rem_pio2+0x27e>
   1be58:	0092      	lsls	r2, r2, #2
   1be5a:	a90e      	add	r1, sp, #56	; 0x38
   1be5c:	5889      	ldr	r1, [r1, r2]
   1be5e:	ac0e      	add	r4, sp, #56	; 0x38
   1be60:	9105      	str	r1, [sp, #20]
   1be62:	9805      	ldr	r0, [sp, #20]
   1be64:	4917      	ldr	r1, [pc, #92]	; (1bec4 <__kernel_rem_pio2+0x2b8>)
   1be66:	3302      	adds	r3, #2
   1be68:	1a08      	subs	r0, r1, r0
   1be6a:	50a0      	str	r0, [r4, r2]
   1be6c:	9a00      	ldr	r2, [sp, #0]
   1be6e:	429a      	cmp	r2, r3
   1be70:	dd0b      	ble.n	1be8a <__kernel_rem_pio2+0x27e>
   1be72:	aa0e      	add	r2, sp, #56	; 0x38
   1be74:	4694      	mov	ip, r2
   1be76:	9a00      	ldr	r2, [sp, #0]
   1be78:	009b      	lsls	r3, r3, #2
   1be7a:	0090      	lsls	r0, r2, #2
   1be7c:	4463      	add	r3, ip
   1be7e:	4460      	add	r0, ip
   1be80:	681a      	ldr	r2, [r3, #0]
   1be82:	1a8a      	subs	r2, r1, r2
   1be84:	c304      	stmia	r3!, {r2}
   1be86:	4283      	cmp	r3, r0
   1be88:	d1fa      	bne.n	1be80 <__kernel_rem_pio2+0x274>
   1be8a:	9b04      	ldr	r3, [sp, #16]
   1be8c:	2401      	movs	r4, #1
   1be8e:	2b00      	cmp	r3, #0
   1be90:	dc21      	bgt.n	1bed6 <__kernel_rem_pio2+0x2ca>
   1be92:	2d02      	cmp	r5, #2
   1be94:	d149      	bne.n	1bf2a <__kernel_rem_pio2+0x31e>
   1be96:	0032      	movs	r2, r6
   1be98:	003b      	movs	r3, r7
   1be9a:	2000      	movs	r0, #0
   1be9c:	490a      	ldr	r1, [pc, #40]	; (1bec8 <__kernel_rem_pio2+0x2bc>)
   1be9e:	f003 fa81 	bl	1f3a4 <__aeabi_dsub>
   1bea2:	0006      	movs	r6, r0
   1bea4:	000f      	movs	r7, r1
   1bea6:	e032      	b.n	1bf0e <__kernel_rem_pio2+0x302>
   1bea8:	fffffd94 	.word	0xfffffd94
   1beac:	00026a40 	.word	0x00026a40
   1beb0:	3fffffff 	.word	0x3fffffff
   1beb4:	1fffffff 	.word	0x1fffffff
   1beb8:	3e700000 	.word	0x3e700000
   1bebc:	41700000 	.word	0x41700000
   1bec0:	40200000 	.word	0x40200000
   1bec4:	00ffffff 	.word	0x00ffffff
   1bec8:	3ff00000 	.word	0x3ff00000
   1becc:	9b04      	ldr	r3, [sp, #16]
   1bece:	2400      	movs	r4, #0
   1bed0:	2b00      	cmp	r3, #0
   1bed2:	dc00      	bgt.n	1bed6 <__kernel_rem_pio2+0x2ca>
   1bed4:	e292      	b.n	1c3fc <__kernel_rem_pio2+0x7f0>
   1bed6:	9b04      	ldr	r3, [sp, #16]
   1bed8:	2b01      	cmp	r3, #1
   1beda:	d100      	bne.n	1bede <__kernel_rem_pio2+0x2d2>
   1bedc:	e27b      	b.n	1c3d6 <__kernel_rem_pio2+0x7ca>
   1bede:	2b02      	cmp	r3, #2
   1bee0:	d109      	bne.n	1bef6 <__kernel_rem_pio2+0x2ea>
   1bee2:	9b00      	ldr	r3, [sp, #0]
   1bee4:	a90e      	add	r1, sp, #56	; 0x38
   1bee6:	1e5a      	subs	r2, r3, #1
   1bee8:	0092      	lsls	r2, r2, #2
   1beea:	ab0e      	add	r3, sp, #56	; 0x38
   1beec:	589b      	ldr	r3, [r3, r2]
   1beee:	9305      	str	r3, [sp, #20]
   1bef0:	029b      	lsls	r3, r3, #10
   1bef2:	0a9b      	lsrs	r3, r3, #10
   1bef4:	508b      	str	r3, [r1, r2]
   1bef6:	2d02      	cmp	r5, #2
   1bef8:	d117      	bne.n	1bf2a <__kernel_rem_pio2+0x31e>
   1befa:	0032      	movs	r2, r6
   1befc:	003b      	movs	r3, r7
   1befe:	2000      	movs	r0, #0
   1bf00:	49bf      	ldr	r1, [pc, #764]	; (1c200 <__kernel_rem_pio2+0x5f4>)
   1bf02:	f003 fa4f 	bl	1f3a4 <__aeabi_dsub>
   1bf06:	0006      	movs	r6, r0
   1bf08:	000f      	movs	r7, r1
   1bf0a:	2c00      	cmp	r4, #0
   1bf0c:	d00d      	beq.n	1bf2a <__kernel_rem_pio2+0x31e>
   1bf0e:	9a04      	ldr	r2, [sp, #16]
   1bf10:	2000      	movs	r0, #0
   1bf12:	49bb      	ldr	r1, [pc, #748]	; (1c200 <__kernel_rem_pio2+0x5f4>)
   1bf14:	f000 fe92 	bl	1cc3c <scalbn>
   1bf18:	0002      	movs	r2, r0
   1bf1a:	000b      	movs	r3, r1
   1bf1c:	0030      	movs	r0, r6
   1bf1e:	0039      	movs	r1, r7
   1bf20:	f003 fa40 	bl	1f3a4 <__aeabi_dsub>
   1bf24:	2502      	movs	r5, #2
   1bf26:	0006      	movs	r6, r0
   1bf28:	000f      	movs	r7, r1
   1bf2a:	2300      	movs	r3, #0
   1bf2c:	2200      	movs	r2, #0
   1bf2e:	0030      	movs	r0, r6
   1bf30:	0039      	movs	r1, r7
   1bf32:	f001 f879 	bl	1d028 <__aeabi_dcmpeq>
   1bf36:	9b00      	ldr	r3, [sp, #0]
   1bf38:	2800      	cmp	r0, #0
   1bf3a:	d100      	bne.n	1bf3e <__kernel_rem_pio2+0x332>
   1bf3c:	e262      	b.n	1c404 <__kernel_rem_pio2+0x7f8>
   1bf3e:	9906      	ldr	r1, [sp, #24]
   1bf40:	1e5a      	subs	r2, r3, #1
   1bf42:	4291      	cmp	r1, r2
   1bf44:	dc10      	bgt.n	1bf68 <__kernel_rem_pio2+0x35c>
   1bf46:	49af      	ldr	r1, [pc, #700]	; (1c204 <__kernel_rem_pio2+0x5f8>)
   1bf48:	980d      	ldr	r0, [sp, #52]	; 0x34
   1bf4a:	468c      	mov	ip, r1
   1bf4c:	a90e      	add	r1, sp, #56	; 0x38
   1bf4e:	4463      	add	r3, ip
   1bf50:	468c      	mov	ip, r1
   1bf52:	2100      	movs	r1, #0
   1bf54:	009b      	lsls	r3, r3, #2
   1bf56:	4463      	add	r3, ip
   1bf58:	681c      	ldr	r4, [r3, #0]
   1bf5a:	3b04      	subs	r3, #4
   1bf5c:	4321      	orrs	r1, r4
   1bf5e:	4283      	cmp	r3, r0
   1bf60:	d1fa      	bne.n	1bf58 <__kernel_rem_pio2+0x34c>
   1bf62:	2900      	cmp	r1, #0
   1bf64:	d000      	beq.n	1bf68 <__kernel_rem_pio2+0x35c>
   1bf66:	e084      	b.n	1c072 <__kernel_rem_pio2+0x466>
   1bf68:	9b06      	ldr	r3, [sp, #24]
   1bf6a:	aa0e      	add	r2, sp, #56	; 0x38
   1bf6c:	3b01      	subs	r3, #1
   1bf6e:	009b      	lsls	r3, r3, #2
   1bf70:	58d3      	ldr	r3, [r2, r3]
   1bf72:	2b00      	cmp	r3, #0
   1bf74:	d000      	beq.n	1bf78 <__kernel_rem_pio2+0x36c>
   1bf76:	e27c      	b.n	1c472 <__kernel_rem_pio2+0x866>
   1bf78:	2201      	movs	r2, #1
   1bf7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1bf7c:	3b04      	subs	r3, #4
   1bf7e:	6859      	ldr	r1, [r3, #4]
   1bf80:	3201      	adds	r2, #1
   1bf82:	2900      	cmp	r1, #0
   1bf84:	d0fa      	beq.n	1bf7c <__kernel_rem_pio2+0x370>
   1bf86:	9900      	ldr	r1, [sp, #0]
   1bf88:	000b      	movs	r3, r1
   1bf8a:	468c      	mov	ip, r1
   1bf8c:	3301      	adds	r3, #1
   1bf8e:	4462      	add	r2, ip
   1bf90:	9205      	str	r2, [sp, #20]
   1bf92:	4293      	cmp	r3, r2
   1bf94:	dc42      	bgt.n	1c01c <__kernel_rem_pio2+0x410>
   1bf96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1bf98:	4694      	mov	ip, r2
   1bf9a:	9aa5      	ldr	r2, [sp, #660]	; 0x294
   1bf9c:	4463      	add	r3, ip
   1bf9e:	4692      	mov	sl, r2
   1bfa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1bfa2:	009b      	lsls	r3, r3, #2
   1bfa4:	4694      	mov	ip, r2
   1bfa6:	aa22      	add	r2, sp, #136	; 0x88
   1bfa8:	4690      	mov	r8, r2
   1bfaa:	449a      	add	sl, r3
   1bfac:	9b00      	ldr	r3, [sp, #0]
   1bfae:	9a08      	ldr	r2, [sp, #32]
   1bfb0:	4463      	add	r3, ip
   1bfb2:	00db      	lsls	r3, r3, #3
   1bfb4:	4498      	add	r8, r3
   1bfb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1bfb8:	4694      	mov	ip, r2
   1bfba:	4699      	mov	r9, r3
   1bfbc:	9b05      	ldr	r3, [sp, #20]
   1bfbe:	44e1      	add	r9, ip
   1bfc0:	00db      	lsls	r3, r3, #3
   1bfc2:	4463      	add	r3, ip
   1bfc4:	9300      	str	r3, [sp, #0]
   1bfc6:	4653      	mov	r3, sl
   1bfc8:	6818      	ldr	r0, [r3, #0]
   1bfca:	f003 fd55 	bl	1fa78 <__aeabi_i2d>
   1bfce:	4643      	mov	r3, r8
   1bfd0:	6018      	str	r0, [r3, #0]
   1bfd2:	6059      	str	r1, [r3, #4]
   1bfd4:	9b02      	ldr	r3, [sp, #8]
   1bfd6:	2b00      	cmp	r3, #0
   1bfd8:	db23      	blt.n	1c022 <__kernel_rem_pio2+0x416>
   1bfda:	4644      	mov	r4, r8
   1bfdc:	2600      	movs	r6, #0
   1bfde:	2700      	movs	r7, #0
   1bfe0:	9d03      	ldr	r5, [sp, #12]
   1bfe2:	6822      	ldr	r2, [r4, #0]
   1bfe4:	6863      	ldr	r3, [r4, #4]
   1bfe6:	cd03      	ldmia	r5!, {r0, r1}
   1bfe8:	f002 ff5c 	bl	1eea4 <__aeabi_dmul>
   1bfec:	0002      	movs	r2, r0
   1bfee:	000b      	movs	r3, r1
   1bff0:	0030      	movs	r0, r6
   1bff2:	0039      	movs	r1, r7
   1bff4:	f002 f812 	bl	1e01c <__aeabi_dadd>
   1bff8:	3c08      	subs	r4, #8
   1bffa:	0006      	movs	r6, r0
   1bffc:	000f      	movs	r7, r1
   1bffe:	455d      	cmp	r5, fp
   1c000:	d1ef      	bne.n	1bfe2 <__kernel_rem_pio2+0x3d6>
   1c002:	464b      	mov	r3, r9
   1c004:	609e      	str	r6, [r3, #8]
   1c006:	60df      	str	r7, [r3, #12]
   1c008:	2304      	movs	r3, #4
   1c00a:	469c      	mov	ip, r3
   1c00c:	3304      	adds	r3, #4
   1c00e:	44e2      	add	sl, ip
   1c010:	469c      	mov	ip, r3
   1c012:	9b00      	ldr	r3, [sp, #0]
   1c014:	44e1      	add	r9, ip
   1c016:	44e0      	add	r8, ip
   1c018:	4599      	cmp	r9, r3
   1c01a:	d1d4      	bne.n	1bfc6 <__kernel_rem_pio2+0x3ba>
   1c01c:	9b05      	ldr	r3, [sp, #20]
   1c01e:	9300      	str	r3, [sp, #0]
   1c020:	e683      	b.n	1bd2a <__kernel_rem_pio2+0x11e>
   1c022:	2600      	movs	r6, #0
   1c024:	2700      	movs	r7, #0
   1c026:	e7ec      	b.n	1c002 <__kernel_rem_pio2+0x3f6>
   1c028:	9b04      	ldr	r3, [sp, #16]
   1c02a:	2b00      	cmp	r3, #0
   1c02c:	d106      	bne.n	1c03c <__kernel_rem_pio2+0x430>
   1c02e:	9b00      	ldr	r3, [sp, #0]
   1c030:	aa0e      	add	r2, sp, #56	; 0x38
   1c032:	3b01      	subs	r3, #1
   1c034:	009b      	lsls	r3, r3, #2
   1c036:	58d5      	ldr	r5, [r2, r3]
   1c038:	15ed      	asrs	r5, r5, #23
   1c03a:	e6f5      	b.n	1be28 <__kernel_rem_pio2+0x21c>
   1c03c:	2200      	movs	r2, #0
   1c03e:	4b72      	ldr	r3, [pc, #456]	; (1c208 <__kernel_rem_pio2+0x5fc>)
   1c040:	0030      	movs	r0, r6
   1c042:	0039      	movs	r1, r7
   1c044:	f001 f814 	bl	1d070 <__aeabi_dcmpge>
   1c048:	2500      	movs	r5, #0
   1c04a:	2800      	cmp	r0, #0
   1c04c:	d100      	bne.n	1c050 <__kernel_rem_pio2+0x444>
   1c04e:	e76c      	b.n	1bf2a <__kernel_rem_pio2+0x31e>
   1c050:	2301      	movs	r3, #1
   1c052:	469c      	mov	ip, r3
   1c054:	9b00      	ldr	r3, [sp, #0]
   1c056:	44e0      	add	r8, ip
   1c058:	2502      	movs	r5, #2
   1c05a:	2b00      	cmp	r3, #0
   1c05c:	dd00      	ble.n	1c060 <__kernel_rem_pio2+0x454>
   1c05e:	e6ec      	b.n	1be3a <__kernel_rem_pio2+0x22e>
   1c060:	0032      	movs	r2, r6
   1c062:	003b      	movs	r3, r7
   1c064:	2000      	movs	r0, #0
   1c066:	4966      	ldr	r1, [pc, #408]	; (1c200 <__kernel_rem_pio2+0x5f4>)
   1c068:	f003 f99c 	bl	1f3a4 <__aeabi_dsub>
   1c06c:	0006      	movs	r6, r0
   1c06e:	000f      	movs	r7, r1
   1c070:	e75b      	b.n	1bf2a <__kernel_rem_pio2+0x31e>
   1c072:	4643      	mov	r3, r8
   1c074:	9309      	str	r3, [sp, #36]	; 0x24
   1c076:	9b04      	ldr	r3, [sp, #16]
   1c078:	a80e      	add	r0, sp, #56	; 0x38
   1c07a:	3b18      	subs	r3, #24
   1c07c:	0019      	movs	r1, r3
   1c07e:	9304      	str	r3, [sp, #16]
   1c080:	0093      	lsls	r3, r2, #2
   1c082:	58c3      	ldr	r3, [r0, r3]
   1c084:	9503      	str	r5, [sp, #12]
   1c086:	9202      	str	r2, [sp, #8]
   1c088:	2b00      	cmp	r3, #0
   1c08a:	d10f      	bne.n	1c0ac <__kernel_rem_pio2+0x4a0>
   1c08c:	485d      	ldr	r0, [pc, #372]	; (1c204 <__kernel_rem_pio2+0x5f8>)
   1c08e:	0013      	movs	r3, r2
   1c090:	4684      	mov	ip, r0
   1c092:	a80e      	add	r0, sp, #56	; 0x38
   1c094:	4463      	add	r3, ip
   1c096:	4684      	mov	ip, r0
   1c098:	009b      	lsls	r3, r3, #2
   1c09a:	4463      	add	r3, ip
   1c09c:	3b04      	subs	r3, #4
   1c09e:	6858      	ldr	r0, [r3, #4]
   1c0a0:	3a01      	subs	r2, #1
   1c0a2:	3918      	subs	r1, #24
   1c0a4:	2800      	cmp	r0, #0
   1c0a6:	d0f9      	beq.n	1c09c <__kernel_rem_pio2+0x490>
   1c0a8:	9202      	str	r2, [sp, #8]
   1c0aa:	9104      	str	r1, [sp, #16]
   1c0ac:	9a04      	ldr	r2, [sp, #16]
   1c0ae:	2000      	movs	r0, #0
   1c0b0:	4953      	ldr	r1, [pc, #332]	; (1c200 <__kernel_rem_pio2+0x5f4>)
   1c0b2:	f000 fdc3 	bl	1cc3c <scalbn>
   1c0b6:	9b02      	ldr	r3, [sp, #8]
   1c0b8:	0004      	movs	r4, r0
   1c0ba:	000d      	movs	r5, r1
   1c0bc:	2b00      	cmp	r3, #0
   1c0be:	da00      	bge.n	1c0c2 <__kernel_rem_pio2+0x4b6>
   1c0c0:	e1d9      	b.n	1c476 <__kernel_rem_pio2+0x86a>
   1c0c2:	aa0e      	add	r2, sp, #56	; 0x38
   1c0c4:	4694      	mov	ip, r2
   1c0c6:	009e      	lsls	r6, r3, #2
   1c0c8:	00db      	lsls	r3, r3, #3
   1c0ca:	4466      	add	r6, ip
   1c0cc:	469c      	mov	ip, r3
   1c0ce:	9a08      	ldr	r2, [sp, #32]
   1c0d0:	46b0      	mov	r8, r6
   1c0d2:	4462      	add	r2, ip
   1c0d4:	0016      	movs	r6, r2
   1c0d6:	9304      	str	r3, [sp, #16]
   1c0d8:	9200      	str	r2, [sp, #0]
   1c0da:	af70      	add	r7, sp, #448	; 0x1c0
   1c0dc:	4643      	mov	r3, r8
   1c0de:	6818      	ldr	r0, [r3, #0]
   1c0e0:	f003 fcca 	bl	1fa78 <__aeabi_i2d>
   1c0e4:	0022      	movs	r2, r4
   1c0e6:	002b      	movs	r3, r5
   1c0e8:	f002 fedc 	bl	1eea4 <__aeabi_dmul>
   1c0ec:	4b47      	ldr	r3, [pc, #284]	; (1c20c <__kernel_rem_pio2+0x600>)
   1c0ee:	6030      	str	r0, [r6, #0]
   1c0f0:	6071      	str	r1, [r6, #4]
   1c0f2:	2200      	movs	r2, #0
   1c0f4:	0020      	movs	r0, r4
   1c0f6:	0029      	movs	r1, r5
   1c0f8:	f002 fed4 	bl	1eea4 <__aeabi_dmul>
   1c0fc:	2304      	movs	r3, #4
   1c0fe:	425b      	negs	r3, r3
   1c100:	469c      	mov	ip, r3
   1c102:	3e08      	subs	r6, #8
   1c104:	0004      	movs	r4, r0
   1c106:	000d      	movs	r5, r1
   1c108:	44e0      	add	r8, ip
   1c10a:	42be      	cmp	r6, r7
   1c10c:	d1e6      	bne.n	1c0dc <__kernel_rem_pio2+0x4d0>
   1c10e:	2300      	movs	r3, #0
   1c110:	469a      	mov	sl, r3
   1c112:	ab4a      	add	r3, sp, #296	; 0x128
   1c114:	4699      	mov	r9, r3
   1c116:	9b06      	ldr	r3, [sp, #24]
   1c118:	9605      	str	r6, [sp, #20]
   1c11a:	469b      	mov	fp, r3
   1c11c:	465b      	mov	r3, fp
   1c11e:	2600      	movs	r6, #0
   1c120:	2700      	movs	r7, #0
   1c122:	2b00      	cmp	r3, #0
   1c124:	db21      	blt.n	1c16a <__kernel_rem_pio2+0x55e>
   1c126:	2080      	movs	r0, #128	; 0x80
   1c128:	4b39      	ldr	r3, [pc, #228]	; (1c210 <__kernel_rem_pio2+0x604>)
   1c12a:	9d00      	ldr	r5, [sp, #0]
   1c12c:	4698      	mov	r8, r3
   1c12e:	05c0      	lsls	r0, r0, #23
   1c130:	4938      	ldr	r1, [pc, #224]	; (1c214 <__kernel_rem_pio2+0x608>)
   1c132:	2600      	movs	r6, #0
   1c134:	2700      	movs	r7, #0
   1c136:	2400      	movs	r4, #0
   1c138:	e008      	b.n	1c14c <__kernel_rem_pio2+0x540>
   1c13a:	2308      	movs	r3, #8
   1c13c:	469c      	mov	ip, r3
   1c13e:	3508      	adds	r5, #8
   1c140:	44e0      	add	r8, ip
   1c142:	4554      	cmp	r4, sl
   1c144:	dc11      	bgt.n	1c16a <__kernel_rem_pio2+0x55e>
   1c146:	4643      	mov	r3, r8
   1c148:	6818      	ldr	r0, [r3, #0]
   1c14a:	6859      	ldr	r1, [r3, #4]
   1c14c:	682a      	ldr	r2, [r5, #0]
   1c14e:	686b      	ldr	r3, [r5, #4]
   1c150:	f002 fea8 	bl	1eea4 <__aeabi_dmul>
   1c154:	0002      	movs	r2, r0
   1c156:	000b      	movs	r3, r1
   1c158:	0030      	movs	r0, r6
   1c15a:	0039      	movs	r1, r7
   1c15c:	f001 ff5e 	bl	1e01c <__aeabi_dadd>
   1c160:	3401      	adds	r4, #1
   1c162:	0006      	movs	r6, r0
   1c164:	000f      	movs	r7, r1
   1c166:	45a3      	cmp	fp, r4
   1c168:	dae7      	bge.n	1c13a <__kernel_rem_pio2+0x52e>
   1c16a:	4653      	mov	r3, sl
   1c16c:	00db      	lsls	r3, r3, #3
   1c16e:	444b      	add	r3, r9
   1c170:	601e      	str	r6, [r3, #0]
   1c172:	605f      	str	r7, [r3, #4]
   1c174:	2301      	movs	r3, #1
   1c176:	469c      	mov	ip, r3
   1c178:	9b00      	ldr	r3, [sp, #0]
   1c17a:	9a05      	ldr	r2, [sp, #20]
   1c17c:	3b08      	subs	r3, #8
   1c17e:	44e2      	add	sl, ip
   1c180:	9300      	str	r3, [sp, #0]
   1c182:	429a      	cmp	r2, r3
   1c184:	d1ca      	bne.n	1c11c <__kernel_rem_pio2+0x510>
   1c186:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   1c188:	2b02      	cmp	r3, #2
   1c18a:	dd00      	ble.n	1c18e <__kernel_rem_pio2+0x582>
   1c18c:	e07a      	b.n	1c284 <__kernel_rem_pio2+0x678>
   1c18e:	2b00      	cmp	r3, #0
   1c190:	dc42      	bgt.n	1c218 <__kernel_rem_pio2+0x60c>
   1c192:	d11c      	bne.n	1c1ce <__kernel_rem_pio2+0x5c2>
   1c194:	9b04      	ldr	r3, [sp, #16]
   1c196:	2700      	movs	r7, #0
   1c198:	444b      	add	r3, r9
   1c19a:	001e      	movs	r6, r3
   1c19c:	2400      	movs	r4, #0
   1c19e:	ad48      	add	r5, sp, #288	; 0x120
   1c1a0:	6832      	ldr	r2, [r6, #0]
   1c1a2:	6873      	ldr	r3, [r6, #4]
   1c1a4:	0038      	movs	r0, r7
   1c1a6:	0021      	movs	r1, r4
   1c1a8:	f001 ff38 	bl	1e01c <__aeabi_dadd>
   1c1ac:	3e08      	subs	r6, #8
   1c1ae:	0007      	movs	r7, r0
   1c1b0:	000c      	movs	r4, r1
   1c1b2:	42b5      	cmp	r5, r6
   1c1b4:	d1f4      	bne.n	1c1a0 <__kernel_rem_pio2+0x594>
   1c1b6:	9b03      	ldr	r3, [sp, #12]
   1c1b8:	2b00      	cmp	r3, #0
   1c1ba:	d003      	beq.n	1c1c4 <__kernel_rem_pio2+0x5b8>
   1c1bc:	2380      	movs	r3, #128	; 0x80
   1c1be:	061b      	lsls	r3, r3, #24
   1c1c0:	469c      	mov	ip, r3
   1c1c2:	4464      	add	r4, ip
   1c1c4:	003a      	movs	r2, r7
   1c1c6:	0023      	movs	r3, r4
   1c1c8:	9907      	ldr	r1, [sp, #28]
   1c1ca:	600a      	str	r2, [r1, #0]
   1c1cc:	604b      	str	r3, [r1, #4]
   1c1ce:	2007      	movs	r0, #7
   1c1d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c1d2:	4018      	ands	r0, r3
   1c1d4:	239b      	movs	r3, #155	; 0x9b
   1c1d6:	009b      	lsls	r3, r3, #2
   1c1d8:	449d      	add	sp, r3
   1c1da:	bc3c      	pop	{r2, r3, r4, r5}
   1c1dc:	4690      	mov	r8, r2
   1c1de:	4699      	mov	r9, r3
   1c1e0:	46a2      	mov	sl, r4
   1c1e2:	46ab      	mov	fp, r5
   1c1e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c1e6:	4653      	mov	r3, sl
   1c1e8:	2600      	movs	r6, #0
   1c1ea:	2700      	movs	r7, #0
   1c1ec:	c3c0      	stmia	r3!, {r6, r7}
   1c1ee:	469a      	mov	sl, r3
   1c1f0:	2308      	movs	r3, #8
   1c1f2:	469c      	mov	ip, r3
   1c1f4:	44e1      	add	r9, ip
   1c1f6:	45da      	cmp	sl, fp
   1c1f8:	d000      	beq.n	1c1fc <__kernel_rem_pio2+0x5f0>
   1c1fa:	e562      	b.n	1bcc2 <__kernel_rem_pio2+0xb6>
   1c1fc:	e581      	b.n	1bd02 <__kernel_rem_pio2+0xf6>
   1c1fe:	46c0      	nop			; (mov r8, r8)
   1c200:	3ff00000 	.word	0x3ff00000
   1c204:	3fffffff 	.word	0x3fffffff
   1c208:	3fe00000 	.word	0x3fe00000
   1c20c:	3e700000 	.word	0x3e700000
   1c210:	00026a00 	.word	0x00026a00
   1c214:	3ff921fb 	.word	0x3ff921fb
   1c218:	9b04      	ldr	r3, [sp, #16]
   1c21a:	2000      	movs	r0, #0
   1c21c:	444b      	add	r3, r9
   1c21e:	001e      	movs	r6, r3
   1c220:	2100      	movs	r1, #0
   1c222:	af48      	add	r7, sp, #288	; 0x120
   1c224:	6832      	ldr	r2, [r6, #0]
   1c226:	6873      	ldr	r3, [r6, #4]
   1c228:	3e08      	subs	r6, #8
   1c22a:	f001 fef7 	bl	1e01c <__aeabi_dadd>
   1c22e:	42be      	cmp	r6, r7
   1c230:	d1f8      	bne.n	1c224 <__kernel_rem_pio2+0x618>
   1c232:	9b03      	ldr	r3, [sp, #12]
   1c234:	2b00      	cmp	r3, #0
   1c236:	d100      	bne.n	1c23a <__kernel_rem_pio2+0x62e>
   1c238:	e0b8      	b.n	1c3ac <__kernel_rem_pio2+0x7a0>
   1c23a:	2380      	movs	r3, #128	; 0x80
   1c23c:	9a07      	ldr	r2, [sp, #28]
   1c23e:	061b      	lsls	r3, r3, #24
   1c240:	18cb      	adds	r3, r1, r3
   1c242:	6010      	str	r0, [r2, #0]
   1c244:	6053      	str	r3, [r2, #4]
   1c246:	000b      	movs	r3, r1
   1c248:	0002      	movs	r2, r0
   1c24a:	984a      	ldr	r0, [sp, #296]	; 0x128
   1c24c:	994b      	ldr	r1, [sp, #300]	; 0x12c
   1c24e:	f003 f8a9 	bl	1f3a4 <__aeabi_dsub>
   1c252:	9b02      	ldr	r3, [sp, #8]
   1c254:	2b00      	cmp	r3, #0
   1c256:	dd0b      	ble.n	1c270 <__kernel_rem_pio2+0x664>
   1c258:	2601      	movs	r6, #1
   1c25a:	af4c      	add	r7, sp, #304	; 0x130
   1c25c:	cf0c      	ldmia	r7!, {r2, r3}
   1c25e:	f001 fedd 	bl	1e01c <__aeabi_dadd>
   1c262:	9b02      	ldr	r3, [sp, #8]
   1c264:	3601      	adds	r6, #1
   1c266:	42b3      	cmp	r3, r6
   1c268:	daf8      	bge.n	1c25c <__kernel_rem_pio2+0x650>
   1c26a:	9b03      	ldr	r3, [sp, #12]
   1c26c:	2b00      	cmp	r3, #0
   1c26e:	d003      	beq.n	1c278 <__kernel_rem_pio2+0x66c>
   1c270:	2380      	movs	r3, #128	; 0x80
   1c272:	061b      	lsls	r3, r3, #24
   1c274:	469c      	mov	ip, r3
   1c276:	4461      	add	r1, ip
   1c278:	000b      	movs	r3, r1
   1c27a:	0002      	movs	r2, r0
   1c27c:	9907      	ldr	r1, [sp, #28]
   1c27e:	608a      	str	r2, [r1, #8]
   1c280:	60cb      	str	r3, [r1, #12]
   1c282:	e7a4      	b.n	1c1ce <__kernel_rem_pio2+0x5c2>
   1c284:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   1c286:	2b03      	cmp	r3, #3
   1c288:	d1a1      	bne.n	1c1ce <__kernel_rem_pio2+0x5c2>
   1c28a:	9b02      	ldr	r3, [sp, #8]
   1c28c:	2b00      	cmp	r3, #0
   1c28e:	dc00      	bgt.n	1c292 <__kernel_rem_pio2+0x686>
   1c290:	e120      	b.n	1c4d4 <__kernel_rem_pio2+0x8c8>
   1c292:	4a99      	ldr	r2, [pc, #612]	; (1c4f8 <__kernel_rem_pio2+0x8ec>)
   1c294:	9b04      	ldr	r3, [sp, #16]
   1c296:	4694      	mov	ip, r2
   1c298:	444b      	add	r3, r9
   1c29a:	681e      	ldr	r6, [r3, #0]
   1c29c:	685f      	ldr	r7, [r3, #4]
   1c29e:	9b02      	ldr	r3, [sp, #8]
   1c2a0:	4463      	add	r3, ip
   1c2a2:	469b      	mov	fp, r3
   1c2a4:	00db      	lsls	r3, r3, #3
   1c2a6:	444b      	add	r3, r9
   1c2a8:	4698      	mov	r8, r3
   1c2aa:	ab48      	add	r3, sp, #288	; 0x120
   1c2ac:	469a      	mov	sl, r3
   1c2ae:	4643      	mov	r3, r8
   1c2b0:	685c      	ldr	r4, [r3, #4]
   1c2b2:	681b      	ldr	r3, [r3, #0]
   1c2b4:	0018      	movs	r0, r3
   1c2b6:	0021      	movs	r1, r4
   1c2b8:	0032      	movs	r2, r6
   1c2ba:	003b      	movs	r3, r7
   1c2bc:	9000      	str	r0, [sp, #0]
   1c2be:	9101      	str	r1, [sp, #4]
   1c2c0:	f001 feac 	bl	1e01c <__aeabi_dadd>
   1c2c4:	0004      	movs	r4, r0
   1c2c6:	000d      	movs	r5, r1
   1c2c8:	0002      	movs	r2, r0
   1c2ca:	000b      	movs	r3, r1
   1c2cc:	9800      	ldr	r0, [sp, #0]
   1c2ce:	9901      	ldr	r1, [sp, #4]
   1c2d0:	f003 f868 	bl	1f3a4 <__aeabi_dsub>
   1c2d4:	003b      	movs	r3, r7
   1c2d6:	0032      	movs	r2, r6
   1c2d8:	f001 fea0 	bl	1e01c <__aeabi_dadd>
   1c2dc:	4643      	mov	r3, r8
   1c2de:	6098      	str	r0, [r3, #8]
   1c2e0:	60d9      	str	r1, [r3, #12]
   1c2e2:	601c      	str	r4, [r3, #0]
   1c2e4:	605d      	str	r5, [r3, #4]
   1c2e6:	2308      	movs	r3, #8
   1c2e8:	425b      	negs	r3, r3
   1c2ea:	469c      	mov	ip, r3
   1c2ec:	44e0      	add	r8, ip
   1c2ee:	0026      	movs	r6, r4
   1c2f0:	002f      	movs	r7, r5
   1c2f2:	45c2      	cmp	sl, r8
   1c2f4:	d1db      	bne.n	1c2ae <__kernel_rem_pio2+0x6a2>
   1c2f6:	9b02      	ldr	r3, [sp, #8]
   1c2f8:	2b01      	cmp	r3, #1
   1c2fa:	dc00      	bgt.n	1c2fe <__kernel_rem_pio2+0x6f2>
   1c2fc:	e0ea      	b.n	1c4d4 <__kernel_rem_pio2+0x8c8>
   1c2fe:	9b04      	ldr	r3, [sp, #16]
   1c300:	46c8      	mov	r8, r9
   1c302:	444b      	add	r3, r9
   1c304:	681e      	ldr	r6, [r3, #0]
   1c306:	685f      	ldr	r7, [r3, #4]
   1c308:	465b      	mov	r3, fp
   1c30a:	00db      	lsls	r3, r3, #3
   1c30c:	469b      	mov	fp, r3
   1c30e:	44d8      	add	r8, fp
   1c310:	4643      	mov	r3, r8
   1c312:	685c      	ldr	r4, [r3, #4]
   1c314:	681b      	ldr	r3, [r3, #0]
   1c316:	0018      	movs	r0, r3
   1c318:	0021      	movs	r1, r4
   1c31a:	0032      	movs	r2, r6
   1c31c:	003b      	movs	r3, r7
   1c31e:	9000      	str	r0, [sp, #0]
   1c320:	9101      	str	r1, [sp, #4]
   1c322:	f001 fe7b 	bl	1e01c <__aeabi_dadd>
   1c326:	0004      	movs	r4, r0
   1c328:	000d      	movs	r5, r1
   1c32a:	0002      	movs	r2, r0
   1c32c:	000b      	movs	r3, r1
   1c32e:	9800      	ldr	r0, [sp, #0]
   1c330:	9901      	ldr	r1, [sp, #4]
   1c332:	f003 f837 	bl	1f3a4 <__aeabi_dsub>
   1c336:	003b      	movs	r3, r7
   1c338:	0032      	movs	r2, r6
   1c33a:	f001 fe6f 	bl	1e01c <__aeabi_dadd>
   1c33e:	4643      	mov	r3, r8
   1c340:	6098      	str	r0, [r3, #8]
   1c342:	60d9      	str	r1, [r3, #12]
   1c344:	601c      	str	r4, [r3, #0]
   1c346:	605d      	str	r5, [r3, #4]
   1c348:	2308      	movs	r3, #8
   1c34a:	425b      	negs	r3, r3
   1c34c:	469c      	mov	ip, r3
   1c34e:	44e0      	add	r8, ip
   1c350:	0026      	movs	r6, r4
   1c352:	002f      	movs	r7, r5
   1c354:	45c1      	cmp	r9, r8
   1c356:	d1db      	bne.n	1c310 <__kernel_rem_pio2+0x704>
   1c358:	465d      	mov	r5, fp
   1c35a:	2700      	movs	r7, #0
   1c35c:	2400      	movs	r4, #0
   1c35e:	3508      	adds	r5, #8
   1c360:	444d      	add	r5, r9
   1c362:	ae4c      	add	r6, sp, #304	; 0x130
   1c364:	682a      	ldr	r2, [r5, #0]
   1c366:	686b      	ldr	r3, [r5, #4]
   1c368:	0038      	movs	r0, r7
   1c36a:	0021      	movs	r1, r4
   1c36c:	f001 fe56 	bl	1e01c <__aeabi_dadd>
   1c370:	3d08      	subs	r5, #8
   1c372:	0007      	movs	r7, r0
   1c374:	000c      	movs	r4, r1
   1c376:	42ae      	cmp	r6, r5
   1c378:	d1f4      	bne.n	1c364 <__kernel_rem_pio2+0x758>
   1c37a:	9b03      	ldr	r3, [sp, #12]
   1c37c:	2b00      	cmp	r3, #0
   1c37e:	d100      	bne.n	1c382 <__kernel_rem_pio2+0x776>
   1c380:	e091      	b.n	1c4a6 <__kernel_rem_pio2+0x89a>
   1c382:	2180      	movs	r1, #128	; 0x80
   1c384:	9a07      	ldr	r2, [sp, #28]
   1c386:	9b4a      	ldr	r3, [sp, #296]	; 0x128
   1c388:	0609      	lsls	r1, r1, #24
   1c38a:	6013      	str	r3, [r2, #0]
   1c38c:	464b      	mov	r3, r9
   1c38e:	468c      	mov	ip, r1
   1c390:	685b      	ldr	r3, [r3, #4]
   1c392:	4464      	add	r4, ip
   1c394:	4463      	add	r3, ip
   1c396:	6053      	str	r3, [r2, #4]
   1c398:	464b      	mov	r3, r9
   1c39a:	689b      	ldr	r3, [r3, #8]
   1c39c:	6117      	str	r7, [r2, #16]
   1c39e:	6093      	str	r3, [r2, #8]
   1c3a0:	464b      	mov	r3, r9
   1c3a2:	68db      	ldr	r3, [r3, #12]
   1c3a4:	6154      	str	r4, [r2, #20]
   1c3a6:	4463      	add	r3, ip
   1c3a8:	60d3      	str	r3, [r2, #12]
   1c3aa:	e710      	b.n	1c1ce <__kernel_rem_pio2+0x5c2>
   1c3ac:	0002      	movs	r2, r0
   1c3ae:	000b      	movs	r3, r1
   1c3b0:	9c07      	ldr	r4, [sp, #28]
   1c3b2:	6022      	str	r2, [r4, #0]
   1c3b4:	6063      	str	r3, [r4, #4]
   1c3b6:	000b      	movs	r3, r1
   1c3b8:	0002      	movs	r2, r0
   1c3ba:	984a      	ldr	r0, [sp, #296]	; 0x128
   1c3bc:	994b      	ldr	r1, [sp, #300]	; 0x12c
   1c3be:	f002 fff1 	bl	1f3a4 <__aeabi_dsub>
   1c3c2:	9b02      	ldr	r3, [sp, #8]
   1c3c4:	2b00      	cmp	r3, #0
   1c3c6:	dd00      	ble.n	1c3ca <__kernel_rem_pio2+0x7be>
   1c3c8:	e746      	b.n	1c258 <__kernel_rem_pio2+0x64c>
   1c3ca:	000b      	movs	r3, r1
   1c3cc:	0002      	movs	r2, r0
   1c3ce:	9907      	ldr	r1, [sp, #28]
   1c3d0:	608a      	str	r2, [r1, #8]
   1c3d2:	60cb      	str	r3, [r1, #12]
   1c3d4:	e6fb      	b.n	1c1ce <__kernel_rem_pio2+0x5c2>
   1c3d6:	9b00      	ldr	r3, [sp, #0]
   1c3d8:	a90e      	add	r1, sp, #56	; 0x38
   1c3da:	1e5a      	subs	r2, r3, #1
   1c3dc:	0092      	lsls	r2, r2, #2
   1c3de:	ab0e      	add	r3, sp, #56	; 0x38
   1c3e0:	589b      	ldr	r3, [r3, r2]
   1c3e2:	9305      	str	r3, [sp, #20]
   1c3e4:	025b      	lsls	r3, r3, #9
   1c3e6:	0a5b      	lsrs	r3, r3, #9
   1c3e8:	508b      	str	r3, [r1, r2]
   1c3ea:	e584      	b.n	1bef6 <__kernel_rem_pio2+0x2ea>
   1c3ec:	9a00      	ldr	r2, [sp, #0]
   1c3ee:	3301      	adds	r3, #1
   1c3f0:	429a      	cmp	r2, r3
   1c3f2:	d176      	bne.n	1c4e2 <__kernel_rem_pio2+0x8d6>
   1c3f4:	9b04      	ldr	r3, [sp, #16]
   1c3f6:	2b00      	cmp	r3, #0
   1c3f8:	dd00      	ble.n	1c3fc <__kernel_rem_pio2+0x7f0>
   1c3fa:	e56c      	b.n	1bed6 <__kernel_rem_pio2+0x2ca>
   1c3fc:	2d02      	cmp	r5, #2
   1c3fe:	d000      	beq.n	1c402 <__kernel_rem_pio2+0x7f6>
   1c400:	e593      	b.n	1bf2a <__kernel_rem_pio2+0x31e>
   1c402:	e62d      	b.n	1c060 <__kernel_rem_pio2+0x454>
   1c404:	4699      	mov	r9, r3
   1c406:	4643      	mov	r3, r8
   1c408:	9309      	str	r3, [sp, #36]	; 0x24
   1c40a:	9b04      	ldr	r3, [sp, #16]
   1c40c:	0030      	movs	r0, r6
   1c40e:	425a      	negs	r2, r3
   1c410:	0039      	movs	r1, r7
   1c412:	9503      	str	r5, [sp, #12]
   1c414:	f000 fc12 	bl	1cc3c <scalbn>
   1c418:	2200      	movs	r2, #0
   1c41a:	4b38      	ldr	r3, [pc, #224]	; (1c4fc <__kernel_rem_pio2+0x8f0>)
   1c41c:	0004      	movs	r4, r0
   1c41e:	000d      	movs	r5, r1
   1c420:	f000 fe26 	bl	1d070 <__aeabi_dcmpge>
   1c424:	2800      	cmp	r0, #0
   1c426:	d030      	beq.n	1c48a <__kernel_rem_pio2+0x87e>
   1c428:	4b35      	ldr	r3, [pc, #212]	; (1c500 <__kernel_rem_pio2+0x8f4>)
   1c42a:	2200      	movs	r2, #0
   1c42c:	0020      	movs	r0, r4
   1c42e:	0029      	movs	r1, r5
   1c430:	f002 fd38 	bl	1eea4 <__aeabi_dmul>
   1c434:	f003 faec 	bl	1fa10 <__aeabi_d2iz>
   1c438:	464a      	mov	r2, r9
   1c43a:	0006      	movs	r6, r0
   1c43c:	0097      	lsls	r7, r2, #2
   1c43e:	f003 fb1b 	bl	1fa78 <__aeabi_i2d>
   1c442:	2200      	movs	r2, #0
   1c444:	4b2d      	ldr	r3, [pc, #180]	; (1c4fc <__kernel_rem_pio2+0x8f0>)
   1c446:	f002 fd2d 	bl	1eea4 <__aeabi_dmul>
   1c44a:	0002      	movs	r2, r0
   1c44c:	000b      	movs	r3, r1
   1c44e:	0020      	movs	r0, r4
   1c450:	0029      	movs	r1, r5
   1c452:	f002 ffa7 	bl	1f3a4 <__aeabi_dsub>
   1c456:	f003 fadb 	bl	1fa10 <__aeabi_d2iz>
   1c45a:	aa0e      	add	r2, sp, #56	; 0x38
   1c45c:	51d0      	str	r0, [r2, r7]
   1c45e:	464a      	mov	r2, r9
   1c460:	9b04      	ldr	r3, [sp, #16]
   1c462:	3201      	adds	r2, #1
   1c464:	3318      	adds	r3, #24
   1c466:	9202      	str	r2, [sp, #8]
   1c468:	9304      	str	r3, [sp, #16]
   1c46a:	0093      	lsls	r3, r2, #2
   1c46c:	aa0e      	add	r2, sp, #56	; 0x38
   1c46e:	50d6      	str	r6, [r2, r3]
   1c470:	e61c      	b.n	1c0ac <__kernel_rem_pio2+0x4a0>
   1c472:	2201      	movs	r2, #1
   1c474:	e587      	b.n	1bf86 <__kernel_rem_pio2+0x37a>
   1c476:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   1c478:	2b02      	cmp	r3, #2
   1c47a:	dc25      	bgt.n	1c4c8 <__kernel_rem_pio2+0x8bc>
   1c47c:	2b00      	cmp	r3, #0
   1c47e:	dc38      	bgt.n	1c4f2 <__kernel_rem_pio2+0x8e6>
   1c480:	d000      	beq.n	1c484 <__kernel_rem_pio2+0x878>
   1c482:	e6a4      	b.n	1c1ce <__kernel_rem_pio2+0x5c2>
   1c484:	2700      	movs	r7, #0
   1c486:	2400      	movs	r4, #0
   1c488:	e695      	b.n	1c1b6 <__kernel_rem_pio2+0x5aa>
   1c48a:	464b      	mov	r3, r9
   1c48c:	0020      	movs	r0, r4
   1c48e:	0029      	movs	r1, r5
   1c490:	009e      	lsls	r6, r3, #2
   1c492:	f003 fabd 	bl	1fa10 <__aeabi_d2iz>
   1c496:	ab0e      	add	r3, sp, #56	; 0x38
   1c498:	5198      	str	r0, [r3, r6]
   1c49a:	464b      	mov	r3, r9
   1c49c:	9302      	str	r3, [sp, #8]
   1c49e:	e605      	b.n	1c0ac <__kernel_rem_pio2+0x4a0>
   1c4a0:	ab72      	add	r3, sp, #456	; 0x1c8
   1c4a2:	9308      	str	r3, [sp, #32]
   1c4a4:	e42d      	b.n	1bd02 <__kernel_rem_pio2+0xf6>
   1c4a6:	9907      	ldr	r1, [sp, #28]
   1c4a8:	9a4a      	ldr	r2, [sp, #296]	; 0x128
   1c4aa:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
   1c4ac:	600a      	str	r2, [r1, #0]
   1c4ae:	604b      	str	r3, [r1, #4]
   1c4b0:	464b      	mov	r3, r9
   1c4b2:	689a      	ldr	r2, [r3, #8]
   1c4b4:	68db      	ldr	r3, [r3, #12]
   1c4b6:	9200      	str	r2, [sp, #0]
   1c4b8:	9301      	str	r3, [sp, #4]
   1c4ba:	608a      	str	r2, [r1, #8]
   1c4bc:	60cb      	str	r3, [r1, #12]
   1c4be:	003a      	movs	r2, r7
   1c4c0:	0023      	movs	r3, r4
   1c4c2:	610a      	str	r2, [r1, #16]
   1c4c4:	614b      	str	r3, [r1, #20]
   1c4c6:	e682      	b.n	1c1ce <__kernel_rem_pio2+0x5c2>
   1c4c8:	ab4a      	add	r3, sp, #296	; 0x128
   1c4ca:	4699      	mov	r9, r3
   1c4cc:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   1c4ce:	2b03      	cmp	r3, #3
   1c4d0:	d000      	beq.n	1c4d4 <__kernel_rem_pio2+0x8c8>
   1c4d2:	e67c      	b.n	1c1ce <__kernel_rem_pio2+0x5c2>
   1c4d4:	2700      	movs	r7, #0
   1c4d6:	2400      	movs	r4, #0
   1c4d8:	e74f      	b.n	1c37a <__kernel_rem_pio2+0x76e>
   1c4da:	9a00      	ldr	r2, [sp, #0]
   1c4dc:	2301      	movs	r3, #1
   1c4de:	2a01      	cmp	r2, #1
   1c4e0:	dd88      	ble.n	1c3f4 <__kernel_rem_pio2+0x7e8>
   1c4e2:	0099      	lsls	r1, r3, #2
   1c4e4:	aa0e      	add	r2, sp, #56	; 0x38
   1c4e6:	5854      	ldr	r4, [r2, r1]
   1c4e8:	2c00      	cmp	r4, #0
   1c4ea:	d100      	bne.n	1c4ee <__kernel_rem_pio2+0x8e2>
   1c4ec:	e77e      	b.n	1c3ec <__kernel_rem_pio2+0x7e0>
   1c4ee:	1c5a      	adds	r2, r3, #1
   1c4f0:	e4aa      	b.n	1be48 <__kernel_rem_pio2+0x23c>
   1c4f2:	2000      	movs	r0, #0
   1c4f4:	2100      	movs	r1, #0
   1c4f6:	e69c      	b.n	1c232 <__kernel_rem_pio2+0x626>
   1c4f8:	1fffffff 	.word	0x1fffffff
   1c4fc:	41700000 	.word	0x41700000
   1c500:	3e700000 	.word	0x3e700000

0001c504 <__kernel_sin>:
   1c504:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c506:	46ce      	mov	lr, r9
   1c508:	4647      	mov	r7, r8
   1c50a:	b580      	push	{r7, lr}
   1c50c:	b087      	sub	sp, #28
   1c50e:	9200      	str	r2, [sp, #0]
   1c510:	9301      	str	r3, [sp, #4]
   1c512:	4a46      	ldr	r2, [pc, #280]	; (1c62c <__kernel_sin+0x128>)
   1c514:	004b      	lsls	r3, r1, #1
   1c516:	4681      	mov	r9, r0
   1c518:	4688      	mov	r8, r1
   1c51a:	085b      	lsrs	r3, r3, #1
   1c51c:	4293      	cmp	r3, r2
   1c51e:	dc05      	bgt.n	1c52c <__kernel_sin+0x28>
   1c520:	f003 fa76 	bl	1fa10 <__aeabi_d2iz>
   1c524:	4641      	mov	r1, r8
   1c526:	1e03      	subs	r3, r0, #0
   1c528:	4648      	mov	r0, r9
   1c52a:	d066      	beq.n	1c5fa <__kernel_sin+0xf6>
   1c52c:	464a      	mov	r2, r9
   1c52e:	4643      	mov	r3, r8
   1c530:	4648      	mov	r0, r9
   1c532:	4641      	mov	r1, r8
   1c534:	f002 fcb6 	bl	1eea4 <__aeabi_dmul>
   1c538:	0004      	movs	r4, r0
   1c53a:	000d      	movs	r5, r1
   1c53c:	0002      	movs	r2, r0
   1c53e:	000b      	movs	r3, r1
   1c540:	4648      	mov	r0, r9
   1c542:	4641      	mov	r1, r8
   1c544:	f002 fcae 	bl	1eea4 <__aeabi_dmul>
   1c548:	4a39      	ldr	r2, [pc, #228]	; (1c630 <__kernel_sin+0x12c>)
   1c54a:	4b3a      	ldr	r3, [pc, #232]	; (1c634 <__kernel_sin+0x130>)
   1c54c:	0006      	movs	r6, r0
   1c54e:	000f      	movs	r7, r1
   1c550:	0020      	movs	r0, r4
   1c552:	0029      	movs	r1, r5
   1c554:	f002 fca6 	bl	1eea4 <__aeabi_dmul>
   1c558:	4a37      	ldr	r2, [pc, #220]	; (1c638 <__kernel_sin+0x134>)
   1c55a:	4b38      	ldr	r3, [pc, #224]	; (1c63c <__kernel_sin+0x138>)
   1c55c:	f002 ff22 	bl	1f3a4 <__aeabi_dsub>
   1c560:	0022      	movs	r2, r4
   1c562:	002b      	movs	r3, r5
   1c564:	f002 fc9e 	bl	1eea4 <__aeabi_dmul>
   1c568:	4a35      	ldr	r2, [pc, #212]	; (1c640 <__kernel_sin+0x13c>)
   1c56a:	4b36      	ldr	r3, [pc, #216]	; (1c644 <__kernel_sin+0x140>)
   1c56c:	f001 fd56 	bl	1e01c <__aeabi_dadd>
   1c570:	0022      	movs	r2, r4
   1c572:	002b      	movs	r3, r5
   1c574:	f002 fc96 	bl	1eea4 <__aeabi_dmul>
   1c578:	4a33      	ldr	r2, [pc, #204]	; (1c648 <__kernel_sin+0x144>)
   1c57a:	4b34      	ldr	r3, [pc, #208]	; (1c64c <__kernel_sin+0x148>)
   1c57c:	f002 ff12 	bl	1f3a4 <__aeabi_dsub>
   1c580:	0022      	movs	r2, r4
   1c582:	002b      	movs	r3, r5
   1c584:	f002 fc8e 	bl	1eea4 <__aeabi_dmul>
   1c588:	4b31      	ldr	r3, [pc, #196]	; (1c650 <__kernel_sin+0x14c>)
   1c58a:	4a32      	ldr	r2, [pc, #200]	; (1c654 <__kernel_sin+0x150>)
   1c58c:	f001 fd46 	bl	1e01c <__aeabi_dadd>
   1c590:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c592:	9002      	str	r0, [sp, #8]
   1c594:	9103      	str	r1, [sp, #12]
   1c596:	2b00      	cmp	r3, #0
   1c598:	d034      	beq.n	1c604 <__kernel_sin+0x100>
   1c59a:	9800      	ldr	r0, [sp, #0]
   1c59c:	9901      	ldr	r1, [sp, #4]
   1c59e:	2200      	movs	r2, #0
   1c5a0:	4b2d      	ldr	r3, [pc, #180]	; (1c658 <__kernel_sin+0x154>)
   1c5a2:	f002 fc7f 	bl	1eea4 <__aeabi_dmul>
   1c5a6:	9a02      	ldr	r2, [sp, #8]
   1c5a8:	9b03      	ldr	r3, [sp, #12]
   1c5aa:	9004      	str	r0, [sp, #16]
   1c5ac:	9105      	str	r1, [sp, #20]
   1c5ae:	0030      	movs	r0, r6
   1c5b0:	0039      	movs	r1, r7
   1c5b2:	f002 fc77 	bl	1eea4 <__aeabi_dmul>
   1c5b6:	0002      	movs	r2, r0
   1c5b8:	000b      	movs	r3, r1
   1c5ba:	9804      	ldr	r0, [sp, #16]
   1c5bc:	9905      	ldr	r1, [sp, #20]
   1c5be:	f002 fef1 	bl	1f3a4 <__aeabi_dsub>
   1c5c2:	0022      	movs	r2, r4
   1c5c4:	002b      	movs	r3, r5
   1c5c6:	f002 fc6d 	bl	1eea4 <__aeabi_dmul>
   1c5ca:	9a00      	ldr	r2, [sp, #0]
   1c5cc:	9b01      	ldr	r3, [sp, #4]
   1c5ce:	f002 fee9 	bl	1f3a4 <__aeabi_dsub>
   1c5d2:	4a22      	ldr	r2, [pc, #136]	; (1c65c <__kernel_sin+0x158>)
   1c5d4:	0004      	movs	r4, r0
   1c5d6:	000d      	movs	r5, r1
   1c5d8:	4b21      	ldr	r3, [pc, #132]	; (1c660 <__kernel_sin+0x15c>)
   1c5da:	0030      	movs	r0, r6
   1c5dc:	0039      	movs	r1, r7
   1c5de:	f002 fc61 	bl	1eea4 <__aeabi_dmul>
   1c5e2:	0002      	movs	r2, r0
   1c5e4:	000b      	movs	r3, r1
   1c5e6:	0020      	movs	r0, r4
   1c5e8:	0029      	movs	r1, r5
   1c5ea:	f001 fd17 	bl	1e01c <__aeabi_dadd>
   1c5ee:	0002      	movs	r2, r0
   1c5f0:	000b      	movs	r3, r1
   1c5f2:	4648      	mov	r0, r9
   1c5f4:	4641      	mov	r1, r8
   1c5f6:	f002 fed5 	bl	1f3a4 <__aeabi_dsub>
   1c5fa:	b007      	add	sp, #28
   1c5fc:	bc0c      	pop	{r2, r3}
   1c5fe:	4690      	mov	r8, r2
   1c600:	4699      	mov	r9, r3
   1c602:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c604:	0002      	movs	r2, r0
   1c606:	000b      	movs	r3, r1
   1c608:	0020      	movs	r0, r4
   1c60a:	0029      	movs	r1, r5
   1c60c:	f002 fc4a 	bl	1eea4 <__aeabi_dmul>
   1c610:	4a12      	ldr	r2, [pc, #72]	; (1c65c <__kernel_sin+0x158>)
   1c612:	4b13      	ldr	r3, [pc, #76]	; (1c660 <__kernel_sin+0x15c>)
   1c614:	f002 fec6 	bl	1f3a4 <__aeabi_dsub>
   1c618:	0032      	movs	r2, r6
   1c61a:	003b      	movs	r3, r7
   1c61c:	f002 fc42 	bl	1eea4 <__aeabi_dmul>
   1c620:	464a      	mov	r2, r9
   1c622:	4643      	mov	r3, r8
   1c624:	f001 fcfa 	bl	1e01c <__aeabi_dadd>
   1c628:	e7e7      	b.n	1c5fa <__kernel_sin+0xf6>
   1c62a:	46c0      	nop			; (mov r8, r8)
   1c62c:	3e3fffff 	.word	0x3e3fffff
   1c630:	5acfd57c 	.word	0x5acfd57c
   1c634:	3de5d93a 	.word	0x3de5d93a
   1c638:	8a2b9ceb 	.word	0x8a2b9ceb
   1c63c:	3e5ae5e6 	.word	0x3e5ae5e6
   1c640:	57b1fe7d 	.word	0x57b1fe7d
   1c644:	3ec71de3 	.word	0x3ec71de3
   1c648:	19c161d5 	.word	0x19c161d5
   1c64c:	3f2a01a0 	.word	0x3f2a01a0
   1c650:	3f811111 	.word	0x3f811111
   1c654:	1110f8a6 	.word	0x1110f8a6
   1c658:	3fe00000 	.word	0x3fe00000
   1c65c:	55555549 	.word	0x55555549
   1c660:	3fc55555 	.word	0x3fc55555

0001c664 <atan>:
   1c664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c666:	464e      	mov	r6, r9
   1c668:	4657      	mov	r7, sl
   1c66a:	4645      	mov	r5, r8
   1c66c:	46de      	mov	lr, fp
   1c66e:	4ba4      	ldr	r3, [pc, #656]	; (1c900 <atan+0x29c>)
   1c670:	b5e0      	push	{r5, r6, r7, lr}
   1c672:	004e      	lsls	r6, r1, #1
   1c674:	4680      	mov	r8, r0
   1c676:	4689      	mov	r9, r1
   1c678:	468a      	mov	sl, r1
   1c67a:	0876      	lsrs	r6, r6, #1
   1c67c:	429e      	cmp	r6, r3
   1c67e:	dd0c      	ble.n	1c69a <atan+0x36>
   1c680:	4ba0      	ldr	r3, [pc, #640]	; (1c904 <atan+0x2a0>)
   1c682:	429e      	cmp	r6, r3
   1c684:	dd00      	ble.n	1c688 <atan+0x24>
   1c686:	e0a3      	b.n	1c7d0 <atan+0x16c>
   1c688:	d100      	bne.n	1c68c <atan+0x28>
   1c68a:	e09e      	b.n	1c7ca <atan+0x166>
   1c68c:	4653      	mov	r3, sl
   1c68e:	2b00      	cmp	r3, #0
   1c690:	dc00      	bgt.n	1c694 <atan+0x30>
   1c692:	e0e1      	b.n	1c858 <atan+0x1f4>
   1c694:	4b9c      	ldr	r3, [pc, #624]	; (1c908 <atan+0x2a4>)
   1c696:	4a9d      	ldr	r2, [pc, #628]	; (1c90c <atan+0x2a8>)
   1c698:	e0a2      	b.n	1c7e0 <atan+0x17c>
   1c69a:	4b9d      	ldr	r3, [pc, #628]	; (1c910 <atan+0x2ac>)
   1c69c:	429e      	cmp	r6, r3
   1c69e:	dd00      	ble.n	1c6a2 <atan+0x3e>
   1c6a0:	e0b4      	b.n	1c80c <atan+0x1a8>
   1c6a2:	4b9c      	ldr	r3, [pc, #624]	; (1c914 <atan+0x2b0>)
   1c6a4:	429e      	cmp	r6, r3
   1c6a6:	dc00      	bgt.n	1c6aa <atan+0x46>
   1c6a8:	e0a2      	b.n	1c7f0 <atan+0x18c>
   1c6aa:	2301      	movs	r3, #1
   1c6ac:	425b      	negs	r3, r3
   1c6ae:	469b      	mov	fp, r3
   1c6b0:	4642      	mov	r2, r8
   1c6b2:	464b      	mov	r3, r9
   1c6b4:	4640      	mov	r0, r8
   1c6b6:	4649      	mov	r1, r9
   1c6b8:	f002 fbf4 	bl	1eea4 <__aeabi_dmul>
   1c6bc:	0002      	movs	r2, r0
   1c6be:	000b      	movs	r3, r1
   1c6c0:	0006      	movs	r6, r0
   1c6c2:	000f      	movs	r7, r1
   1c6c4:	f002 fbee 	bl	1eea4 <__aeabi_dmul>
   1c6c8:	0004      	movs	r4, r0
   1c6ca:	000d      	movs	r5, r1
   1c6cc:	4a92      	ldr	r2, [pc, #584]	; (1c918 <atan+0x2b4>)
   1c6ce:	4b93      	ldr	r3, [pc, #588]	; (1c91c <atan+0x2b8>)
   1c6d0:	f002 fbe8 	bl	1eea4 <__aeabi_dmul>
   1c6d4:	4a92      	ldr	r2, [pc, #584]	; (1c920 <atan+0x2bc>)
   1c6d6:	4b93      	ldr	r3, [pc, #588]	; (1c924 <atan+0x2c0>)
   1c6d8:	f001 fca0 	bl	1e01c <__aeabi_dadd>
   1c6dc:	0022      	movs	r2, r4
   1c6de:	002b      	movs	r3, r5
   1c6e0:	f002 fbe0 	bl	1eea4 <__aeabi_dmul>
   1c6e4:	4a90      	ldr	r2, [pc, #576]	; (1c928 <atan+0x2c4>)
   1c6e6:	4b91      	ldr	r3, [pc, #580]	; (1c92c <atan+0x2c8>)
   1c6e8:	f001 fc98 	bl	1e01c <__aeabi_dadd>
   1c6ec:	0022      	movs	r2, r4
   1c6ee:	002b      	movs	r3, r5
   1c6f0:	f002 fbd8 	bl	1eea4 <__aeabi_dmul>
   1c6f4:	4a8e      	ldr	r2, [pc, #568]	; (1c930 <atan+0x2cc>)
   1c6f6:	4b8f      	ldr	r3, [pc, #572]	; (1c934 <atan+0x2d0>)
   1c6f8:	f001 fc90 	bl	1e01c <__aeabi_dadd>
   1c6fc:	0022      	movs	r2, r4
   1c6fe:	002b      	movs	r3, r5
   1c700:	f002 fbd0 	bl	1eea4 <__aeabi_dmul>
   1c704:	4a8c      	ldr	r2, [pc, #560]	; (1c938 <atan+0x2d4>)
   1c706:	4b8d      	ldr	r3, [pc, #564]	; (1c93c <atan+0x2d8>)
   1c708:	f001 fc88 	bl	1e01c <__aeabi_dadd>
   1c70c:	0022      	movs	r2, r4
   1c70e:	002b      	movs	r3, r5
   1c710:	f002 fbc8 	bl	1eea4 <__aeabi_dmul>
   1c714:	4a8a      	ldr	r2, [pc, #552]	; (1c940 <atan+0x2dc>)
   1c716:	4b8b      	ldr	r3, [pc, #556]	; (1c944 <atan+0x2e0>)
   1c718:	f001 fc80 	bl	1e01c <__aeabi_dadd>
   1c71c:	0032      	movs	r2, r6
   1c71e:	003b      	movs	r3, r7
   1c720:	f002 fbc0 	bl	1eea4 <__aeabi_dmul>
   1c724:	4a88      	ldr	r2, [pc, #544]	; (1c948 <atan+0x2e4>)
   1c726:	4b89      	ldr	r3, [pc, #548]	; (1c94c <atan+0x2e8>)
   1c728:	0006      	movs	r6, r0
   1c72a:	000f      	movs	r7, r1
   1c72c:	0020      	movs	r0, r4
   1c72e:	0029      	movs	r1, r5
   1c730:	f002 fbb8 	bl	1eea4 <__aeabi_dmul>
   1c734:	4a86      	ldr	r2, [pc, #536]	; (1c950 <atan+0x2ec>)
   1c736:	4b87      	ldr	r3, [pc, #540]	; (1c954 <atan+0x2f0>)
   1c738:	f002 fe34 	bl	1f3a4 <__aeabi_dsub>
   1c73c:	0022      	movs	r2, r4
   1c73e:	002b      	movs	r3, r5
   1c740:	f002 fbb0 	bl	1eea4 <__aeabi_dmul>
   1c744:	4a84      	ldr	r2, [pc, #528]	; (1c958 <atan+0x2f4>)
   1c746:	4b85      	ldr	r3, [pc, #532]	; (1c95c <atan+0x2f8>)
   1c748:	f002 fe2c 	bl	1f3a4 <__aeabi_dsub>
   1c74c:	0022      	movs	r2, r4
   1c74e:	002b      	movs	r3, r5
   1c750:	f002 fba8 	bl	1eea4 <__aeabi_dmul>
   1c754:	4a82      	ldr	r2, [pc, #520]	; (1c960 <atan+0x2fc>)
   1c756:	4b83      	ldr	r3, [pc, #524]	; (1c964 <atan+0x300>)
   1c758:	f002 fe24 	bl	1f3a4 <__aeabi_dsub>
   1c75c:	0022      	movs	r2, r4
   1c75e:	002b      	movs	r3, r5
   1c760:	f002 fba0 	bl	1eea4 <__aeabi_dmul>
   1c764:	4a80      	ldr	r2, [pc, #512]	; (1c968 <atan+0x304>)
   1c766:	4b81      	ldr	r3, [pc, #516]	; (1c96c <atan+0x308>)
   1c768:	f002 fe1c 	bl	1f3a4 <__aeabi_dsub>
   1c76c:	0022      	movs	r2, r4
   1c76e:	002b      	movs	r3, r5
   1c770:	f002 fb98 	bl	1eea4 <__aeabi_dmul>
   1c774:	000b      	movs	r3, r1
   1c776:	4659      	mov	r1, fp
   1c778:	0002      	movs	r2, r0
   1c77a:	3101      	adds	r1, #1
   1c77c:	d100      	bne.n	1c780 <atan+0x11c>
   1c77e:	e06e      	b.n	1c85e <atan+0x1fa>
   1c780:	4659      	mov	r1, fp
   1c782:	0030      	movs	r0, r6
   1c784:	00cc      	lsls	r4, r1, #3
   1c786:	0039      	movs	r1, r7
   1c788:	f001 fc48 	bl	1e01c <__aeabi_dadd>
   1c78c:	4642      	mov	r2, r8
   1c78e:	464b      	mov	r3, r9
   1c790:	f002 fb88 	bl	1eea4 <__aeabi_dmul>
   1c794:	4d76      	ldr	r5, [pc, #472]	; (1c970 <atan+0x30c>)
   1c796:	4b77      	ldr	r3, [pc, #476]	; (1c974 <atan+0x310>)
   1c798:	192d      	adds	r5, r5, r4
   1c79a:	191c      	adds	r4, r3, r4
   1c79c:	6822      	ldr	r2, [r4, #0]
   1c79e:	6863      	ldr	r3, [r4, #4]
   1c7a0:	f002 fe00 	bl	1f3a4 <__aeabi_dsub>
   1c7a4:	4642      	mov	r2, r8
   1c7a6:	464b      	mov	r3, r9
   1c7a8:	f002 fdfc 	bl	1f3a4 <__aeabi_dsub>
   1c7ac:	0002      	movs	r2, r0
   1c7ae:	000b      	movs	r3, r1
   1c7b0:	6828      	ldr	r0, [r5, #0]
   1c7b2:	6869      	ldr	r1, [r5, #4]
   1c7b4:	f002 fdf6 	bl	1f3a4 <__aeabi_dsub>
   1c7b8:	0003      	movs	r3, r0
   1c7ba:	4650      	mov	r0, sl
   1c7bc:	000a      	movs	r2, r1
   1c7be:	2800      	cmp	r0, #0
   1c7c0:	da0e      	bge.n	1c7e0 <atan+0x17c>
   1c7c2:	2280      	movs	r2, #128	; 0x80
   1c7c4:	0612      	lsls	r2, r2, #24
   1c7c6:	188a      	adds	r2, r1, r2
   1c7c8:	e00a      	b.n	1c7e0 <atan+0x17c>
   1c7ca:	2800      	cmp	r0, #0
   1c7cc:	d100      	bne.n	1c7d0 <atan+0x16c>
   1c7ce:	e75d      	b.n	1c68c <atan+0x28>
   1c7d0:	4642      	mov	r2, r8
   1c7d2:	464b      	mov	r3, r9
   1c7d4:	4640      	mov	r0, r8
   1c7d6:	4649      	mov	r1, r9
   1c7d8:	f001 fc20 	bl	1e01c <__aeabi_dadd>
   1c7dc:	0003      	movs	r3, r0
   1c7de:	000a      	movs	r2, r1
   1c7e0:	0018      	movs	r0, r3
   1c7e2:	0011      	movs	r1, r2
   1c7e4:	bc3c      	pop	{r2, r3, r4, r5}
   1c7e6:	4690      	mov	r8, r2
   1c7e8:	4699      	mov	r9, r3
   1c7ea:	46a2      	mov	sl, r4
   1c7ec:	46ab      	mov	fp, r5
   1c7ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c7f0:	4a61      	ldr	r2, [pc, #388]	; (1c978 <atan+0x314>)
   1c7f2:	4b62      	ldr	r3, [pc, #392]	; (1c97c <atan+0x318>)
   1c7f4:	f001 fc12 	bl	1e01c <__aeabi_dadd>
   1c7f8:	2200      	movs	r2, #0
   1c7fa:	4b61      	ldr	r3, [pc, #388]	; (1c980 <atan+0x31c>)
   1c7fc:	f000 fc2e 	bl	1d05c <__aeabi_dcmpgt>
   1c800:	2800      	cmp	r0, #0
   1c802:	d100      	bne.n	1c806 <atan+0x1a2>
   1c804:	e751      	b.n	1c6aa <atan+0x46>
   1c806:	4643      	mov	r3, r8
   1c808:	464a      	mov	r2, r9
   1c80a:	e7e9      	b.n	1c7e0 <atan+0x17c>
   1c80c:	f000 f8c6 	bl	1c99c <fabs>
   1c810:	4b5c      	ldr	r3, [pc, #368]	; (1c984 <atan+0x320>)
   1c812:	0004      	movs	r4, r0
   1c814:	000d      	movs	r5, r1
   1c816:	429e      	cmp	r6, r3
   1c818:	dc32      	bgt.n	1c880 <atan+0x21c>
   1c81a:	4b5b      	ldr	r3, [pc, #364]	; (1c988 <atan+0x324>)
   1c81c:	429e      	cmp	r6, r3
   1c81e:	dc58      	bgt.n	1c8d2 <atan+0x26e>
   1c820:	0002      	movs	r2, r0
   1c822:	000b      	movs	r3, r1
   1c824:	f001 fbfa 	bl	1e01c <__aeabi_dadd>
   1c828:	2200      	movs	r2, #0
   1c82a:	4b55      	ldr	r3, [pc, #340]	; (1c980 <atan+0x31c>)
   1c82c:	f002 fdba 	bl	1f3a4 <__aeabi_dsub>
   1c830:	2380      	movs	r3, #128	; 0x80
   1c832:	0006      	movs	r6, r0
   1c834:	000f      	movs	r7, r1
   1c836:	2200      	movs	r2, #0
   1c838:	05db      	lsls	r3, r3, #23
   1c83a:	0020      	movs	r0, r4
   1c83c:	0029      	movs	r1, r5
   1c83e:	f001 fbed 	bl	1e01c <__aeabi_dadd>
   1c842:	000b      	movs	r3, r1
   1c844:	0002      	movs	r2, r0
   1c846:	0039      	movs	r1, r7
   1c848:	0030      	movs	r0, r6
   1c84a:	f001 fef7 	bl	1e63c <__aeabi_ddiv>
   1c84e:	2300      	movs	r3, #0
   1c850:	4680      	mov	r8, r0
   1c852:	4689      	mov	r9, r1
   1c854:	469b      	mov	fp, r3
   1c856:	e72b      	b.n	1c6b0 <atan+0x4c>
   1c858:	4b2b      	ldr	r3, [pc, #172]	; (1c908 <atan+0x2a4>)
   1c85a:	4a4c      	ldr	r2, [pc, #304]	; (1c98c <atan+0x328>)
   1c85c:	e7c0      	b.n	1c7e0 <atan+0x17c>
   1c85e:	0030      	movs	r0, r6
   1c860:	0039      	movs	r1, r7
   1c862:	f001 fbdb 	bl	1e01c <__aeabi_dadd>
   1c866:	4642      	mov	r2, r8
   1c868:	464b      	mov	r3, r9
   1c86a:	f002 fb1b 	bl	1eea4 <__aeabi_dmul>
   1c86e:	0002      	movs	r2, r0
   1c870:	000b      	movs	r3, r1
   1c872:	4640      	mov	r0, r8
   1c874:	4649      	mov	r1, r9
   1c876:	f002 fd95 	bl	1f3a4 <__aeabi_dsub>
   1c87a:	0003      	movs	r3, r0
   1c87c:	000a      	movs	r2, r1
   1c87e:	e7af      	b.n	1c7e0 <atan+0x17c>
   1c880:	4b43      	ldr	r3, [pc, #268]	; (1c990 <atan+0x32c>)
   1c882:	429e      	cmp	r6, r3
   1c884:	dc1a      	bgt.n	1c8bc <atan+0x258>
   1c886:	2200      	movs	r2, #0
   1c888:	4b42      	ldr	r3, [pc, #264]	; (1c994 <atan+0x330>)
   1c88a:	f002 fd8b 	bl	1f3a4 <__aeabi_dsub>
   1c88e:	2200      	movs	r2, #0
   1c890:	0006      	movs	r6, r0
   1c892:	000f      	movs	r7, r1
   1c894:	4b3f      	ldr	r3, [pc, #252]	; (1c994 <atan+0x330>)
   1c896:	0020      	movs	r0, r4
   1c898:	0029      	movs	r1, r5
   1c89a:	f002 fb03 	bl	1eea4 <__aeabi_dmul>
   1c89e:	2200      	movs	r2, #0
   1c8a0:	4b37      	ldr	r3, [pc, #220]	; (1c980 <atan+0x31c>)
   1c8a2:	f001 fbbb 	bl	1e01c <__aeabi_dadd>
   1c8a6:	000b      	movs	r3, r1
   1c8a8:	0002      	movs	r2, r0
   1c8aa:	0039      	movs	r1, r7
   1c8ac:	0030      	movs	r0, r6
   1c8ae:	f001 fec5 	bl	1e63c <__aeabi_ddiv>
   1c8b2:	2302      	movs	r3, #2
   1c8b4:	4680      	mov	r8, r0
   1c8b6:	4689      	mov	r9, r1
   1c8b8:	469b      	mov	fp, r3
   1c8ba:	e6f9      	b.n	1c6b0 <atan+0x4c>
   1c8bc:	000b      	movs	r3, r1
   1c8be:	0002      	movs	r2, r0
   1c8c0:	4935      	ldr	r1, [pc, #212]	; (1c998 <atan+0x334>)
   1c8c2:	2000      	movs	r0, #0
   1c8c4:	f001 feba 	bl	1e63c <__aeabi_ddiv>
   1c8c8:	2303      	movs	r3, #3
   1c8ca:	4680      	mov	r8, r0
   1c8cc:	4689      	mov	r9, r1
   1c8ce:	469b      	mov	fp, r3
   1c8d0:	e6ee      	b.n	1c6b0 <atan+0x4c>
   1c8d2:	2200      	movs	r2, #0
   1c8d4:	4b2a      	ldr	r3, [pc, #168]	; (1c980 <atan+0x31c>)
   1c8d6:	f002 fd65 	bl	1f3a4 <__aeabi_dsub>
   1c8da:	2200      	movs	r2, #0
   1c8dc:	0006      	movs	r6, r0
   1c8de:	000f      	movs	r7, r1
   1c8e0:	4b27      	ldr	r3, [pc, #156]	; (1c980 <atan+0x31c>)
   1c8e2:	0020      	movs	r0, r4
   1c8e4:	0029      	movs	r1, r5
   1c8e6:	f001 fb99 	bl	1e01c <__aeabi_dadd>
   1c8ea:	000b      	movs	r3, r1
   1c8ec:	0002      	movs	r2, r0
   1c8ee:	0039      	movs	r1, r7
   1c8f0:	0030      	movs	r0, r6
   1c8f2:	f001 fea3 	bl	1e63c <__aeabi_ddiv>
   1c8f6:	2301      	movs	r3, #1
   1c8f8:	4680      	mov	r8, r0
   1c8fa:	4689      	mov	r9, r1
   1c8fc:	469b      	mov	fp, r3
   1c8fe:	e6d7      	b.n	1c6b0 <atan+0x4c>
   1c900:	440fffff 	.word	0x440fffff
   1c904:	7ff00000 	.word	0x7ff00000
   1c908:	54442d18 	.word	0x54442d18
   1c90c:	3ff921fb 	.word	0x3ff921fb
   1c910:	3fdbffff 	.word	0x3fdbffff
   1c914:	3e1fffff 	.word	0x3e1fffff
   1c918:	e322da11 	.word	0xe322da11
   1c91c:	3f90ad3a 	.word	0x3f90ad3a
   1c920:	24760deb 	.word	0x24760deb
   1c924:	3fa97b4b 	.word	0x3fa97b4b
   1c928:	a0d03d51 	.word	0xa0d03d51
   1c92c:	3fb10d66 	.word	0x3fb10d66
   1c930:	c54c206e 	.word	0xc54c206e
   1c934:	3fb745cd 	.word	0x3fb745cd
   1c938:	920083ff 	.word	0x920083ff
   1c93c:	3fc24924 	.word	0x3fc24924
   1c940:	5555550d 	.word	0x5555550d
   1c944:	3fd55555 	.word	0x3fd55555
   1c948:	2c6a6c2f 	.word	0x2c6a6c2f
   1c94c:	bfa2b444 	.word	0xbfa2b444
   1c950:	52defd9a 	.word	0x52defd9a
   1c954:	3fadde2d 	.word	0x3fadde2d
   1c958:	af749a6d 	.word	0xaf749a6d
   1c95c:	3fb3b0f2 	.word	0x3fb3b0f2
   1c960:	fe231671 	.word	0xfe231671
   1c964:	3fbc71c6 	.word	0x3fbc71c6
   1c968:	9998ebc4 	.word	0x9998ebc4
   1c96c:	3fc99999 	.word	0x3fc99999
   1c970:	00026a50 	.word	0x00026a50
   1c974:	00026a70 	.word	0x00026a70
   1c978:	8800759c 	.word	0x8800759c
   1c97c:	7e37e43c 	.word	0x7e37e43c
   1c980:	3ff00000 	.word	0x3ff00000
   1c984:	3ff2ffff 	.word	0x3ff2ffff
   1c988:	3fe5ffff 	.word	0x3fe5ffff
   1c98c:	bff921fb 	.word	0xbff921fb
   1c990:	40037fff 	.word	0x40037fff
   1c994:	3ff80000 	.word	0x3ff80000
   1c998:	bff00000 	.word	0xbff00000

0001c99c <fabs>:
   1c99c:	0049      	lsls	r1, r1, #1
   1c99e:	084b      	lsrs	r3, r1, #1
   1c9a0:	0019      	movs	r1, r3
   1c9a2:	4770      	bx	lr

0001c9a4 <finite>:
   1c9a4:	4b03      	ldr	r3, [pc, #12]	; (1c9b4 <finite+0x10>)
   1c9a6:	0048      	lsls	r0, r1, #1
   1c9a8:	469c      	mov	ip, r3
   1c9aa:	0840      	lsrs	r0, r0, #1
   1c9ac:	4460      	add	r0, ip
   1c9ae:	0fc0      	lsrs	r0, r0, #31
   1c9b0:	4770      	bx	lr
   1c9b2:	46c0      	nop			; (mov r8, r8)
   1c9b4:	80100000 	.word	0x80100000

0001c9b8 <floor>:
   1c9b8:	4a45      	ldr	r2, [pc, #276]	; (1cad0 <floor+0x118>)
   1c9ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c9bc:	4657      	mov	r7, sl
   1c9be:	4692      	mov	sl, r2
   1c9c0:	004b      	lsls	r3, r1, #1
   1c9c2:	0d5b      	lsrs	r3, r3, #21
   1c9c4:	449a      	add	sl, r3
   1c9c6:	464e      	mov	r6, r9
   1c9c8:	4645      	mov	r5, r8
   1c9ca:	46de      	mov	lr, fp
   1c9cc:	4652      	mov	r2, sl
   1c9ce:	b5e0      	push	{r5, r6, r7, lr}
   1c9d0:	000c      	movs	r4, r1
   1c9d2:	0005      	movs	r5, r0
   1c9d4:	000e      	movs	r6, r1
   1c9d6:	4689      	mov	r9, r1
   1c9d8:	0007      	movs	r7, r0
   1c9da:	2a13      	cmp	r2, #19
   1c9dc:	dc22      	bgt.n	1ca24 <floor+0x6c>
   1c9de:	2a00      	cmp	r2, #0
   1c9e0:	db47      	blt.n	1ca72 <floor+0xba>
   1c9e2:	4652      	mov	r2, sl
   1c9e4:	4b3b      	ldr	r3, [pc, #236]	; (1cad4 <floor+0x11c>)
   1c9e6:	4113      	asrs	r3, r2
   1c9e8:	4698      	mov	r8, r3
   1c9ea:	000b      	movs	r3, r1
   1c9ec:	4642      	mov	r2, r8
   1c9ee:	4013      	ands	r3, r2
   1c9f0:	4303      	orrs	r3, r0
   1c9f2:	d011      	beq.n	1ca18 <floor+0x60>
   1c9f4:	4a38      	ldr	r2, [pc, #224]	; (1cad8 <floor+0x120>)
   1c9f6:	4b39      	ldr	r3, [pc, #228]	; (1cadc <floor+0x124>)
   1c9f8:	f001 fb10 	bl	1e01c <__aeabi_dadd>
   1c9fc:	2200      	movs	r2, #0
   1c9fe:	2300      	movs	r3, #0
   1ca00:	f000 fb2c 	bl	1d05c <__aeabi_dcmpgt>
   1ca04:	2800      	cmp	r0, #0
   1ca06:	d005      	beq.n	1ca14 <floor+0x5c>
   1ca08:	2c00      	cmp	r4, #0
   1ca0a:	db41      	blt.n	1ca90 <floor+0xd8>
   1ca0c:	464e      	mov	r6, r9
   1ca0e:	4643      	mov	r3, r8
   1ca10:	2700      	movs	r7, #0
   1ca12:	439e      	bics	r6, r3
   1ca14:	0038      	movs	r0, r7
   1ca16:	0031      	movs	r1, r6
   1ca18:	bc3c      	pop	{r2, r3, r4, r5}
   1ca1a:	4690      	mov	r8, r2
   1ca1c:	4699      	mov	r9, r3
   1ca1e:	46a2      	mov	sl, r4
   1ca20:	46ab      	mov	fp, r5
   1ca22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ca24:	4652      	mov	r2, sl
   1ca26:	2a33      	cmp	r2, #51	; 0x33
   1ca28:	dd08      	ble.n	1ca3c <floor+0x84>
   1ca2a:	2380      	movs	r3, #128	; 0x80
   1ca2c:	00db      	lsls	r3, r3, #3
   1ca2e:	459a      	cmp	sl, r3
   1ca30:	d1f2      	bne.n	1ca18 <floor+0x60>
   1ca32:	0002      	movs	r2, r0
   1ca34:	000b      	movs	r3, r1
   1ca36:	f001 faf1 	bl	1e01c <__aeabi_dadd>
   1ca3a:	e7ed      	b.n	1ca18 <floor+0x60>
   1ca3c:	4a28      	ldr	r2, [pc, #160]	; (1cae0 <floor+0x128>)
   1ca3e:	4694      	mov	ip, r2
   1ca40:	2201      	movs	r2, #1
   1ca42:	4463      	add	r3, ip
   1ca44:	4252      	negs	r2, r2
   1ca46:	40da      	lsrs	r2, r3
   1ca48:	4693      	mov	fp, r2
   1ca4a:	4202      	tst	r2, r0
   1ca4c:	d0e4      	beq.n	1ca18 <floor+0x60>
   1ca4e:	4a22      	ldr	r2, [pc, #136]	; (1cad8 <floor+0x120>)
   1ca50:	4b22      	ldr	r3, [pc, #136]	; (1cadc <floor+0x124>)
   1ca52:	f001 fae3 	bl	1e01c <__aeabi_dadd>
   1ca56:	2200      	movs	r2, #0
   1ca58:	2300      	movs	r3, #0
   1ca5a:	f000 faff 	bl	1d05c <__aeabi_dcmpgt>
   1ca5e:	2800      	cmp	r0, #0
   1ca60:	d0d8      	beq.n	1ca14 <floor+0x5c>
   1ca62:	2c00      	cmp	r4, #0
   1ca64:	db1a      	blt.n	1ca9c <floor+0xe4>
   1ca66:	465b      	mov	r3, fp
   1ca68:	464e      	mov	r6, r9
   1ca6a:	439f      	bics	r7, r3
   1ca6c:	0038      	movs	r0, r7
   1ca6e:	0031      	movs	r1, r6
   1ca70:	e7d2      	b.n	1ca18 <floor+0x60>
   1ca72:	4a19      	ldr	r2, [pc, #100]	; (1cad8 <floor+0x120>)
   1ca74:	4b19      	ldr	r3, [pc, #100]	; (1cadc <floor+0x124>)
   1ca76:	f001 fad1 	bl	1e01c <__aeabi_dadd>
   1ca7a:	2200      	movs	r2, #0
   1ca7c:	2300      	movs	r3, #0
   1ca7e:	f000 faed 	bl	1d05c <__aeabi_dcmpgt>
   1ca82:	2800      	cmp	r0, #0
   1ca84:	d0c6      	beq.n	1ca14 <floor+0x5c>
   1ca86:	2c00      	cmp	r4, #0
   1ca88:	db16      	blt.n	1cab8 <floor+0x100>
   1ca8a:	2700      	movs	r7, #0
   1ca8c:	2600      	movs	r6, #0
   1ca8e:	e7c1      	b.n	1ca14 <floor+0x5c>
   1ca90:	2380      	movs	r3, #128	; 0x80
   1ca92:	4652      	mov	r2, sl
   1ca94:	035b      	lsls	r3, r3, #13
   1ca96:	4113      	asrs	r3, r2
   1ca98:	4499      	add	r9, r3
   1ca9a:	e7b7      	b.n	1ca0c <floor+0x54>
   1ca9c:	4653      	mov	r3, sl
   1ca9e:	2b14      	cmp	r3, #20
   1caa0:	d012      	beq.n	1cac8 <floor+0x110>
   1caa2:	2334      	movs	r3, #52	; 0x34
   1caa4:	4652      	mov	r2, sl
   1caa6:	2701      	movs	r7, #1
   1caa8:	1a9b      	subs	r3, r3, r2
   1caaa:	409f      	lsls	r7, r3
   1caac:	197f      	adds	r7, r7, r5
   1caae:	42af      	cmp	r7, r5
   1cab0:	419b      	sbcs	r3, r3
   1cab2:	425b      	negs	r3, r3
   1cab4:	4499      	add	r9, r3
   1cab6:	e7d6      	b.n	1ca66 <floor+0xae>
   1cab8:	0064      	lsls	r4, r4, #1
   1caba:	0864      	lsrs	r4, r4, #1
   1cabc:	4325      	orrs	r5, r4
   1cabe:	2700      	movs	r7, #0
   1cac0:	2d00      	cmp	r5, #0
   1cac2:	d0a7      	beq.n	1ca14 <floor+0x5c>
   1cac4:	4e07      	ldr	r6, [pc, #28]	; (1cae4 <floor+0x12c>)
   1cac6:	e7a5      	b.n	1ca14 <floor+0x5c>
   1cac8:	3b13      	subs	r3, #19
   1caca:	469c      	mov	ip, r3
   1cacc:	44e1      	add	r9, ip
   1cace:	e7ca      	b.n	1ca66 <floor+0xae>
   1cad0:	fffffc01 	.word	0xfffffc01
   1cad4:	000fffff 	.word	0x000fffff
   1cad8:	8800759c 	.word	0x8800759c
   1cadc:	7e37e43c 	.word	0x7e37e43c
   1cae0:	fffffbed 	.word	0xfffffbed
   1cae4:	bff00000 	.word	0xbff00000

0001cae8 <matherr>:
   1cae8:	2000      	movs	r0, #0
   1caea:	4770      	bx	lr

0001caec <nan>:
   1caec:	2000      	movs	r0, #0
   1caee:	4901      	ldr	r1, [pc, #4]	; (1caf4 <nan+0x8>)
   1caf0:	4770      	bx	lr
   1caf2:	46c0      	nop			; (mov r8, r8)
   1caf4:	7ff80000 	.word	0x7ff80000

0001caf8 <rint>:
   1caf8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cafa:	46c6      	mov	lr, r8
   1cafc:	b500      	push	{lr}
   1cafe:	0fcb      	lsrs	r3, r1, #31
   1cb00:	4698      	mov	r8, r3
   1cb02:	4c4a      	ldr	r4, [pc, #296]	; (1cc2c <rint+0x134>)
   1cb04:	004b      	lsls	r3, r1, #1
   1cb06:	0d5b      	lsrs	r3, r3, #21
   1cb08:	191e      	adds	r6, r3, r4
   1cb0a:	b082      	sub	sp, #8
   1cb0c:	0007      	movs	r7, r0
   1cb0e:	000a      	movs	r2, r1
   1cb10:	2e13      	cmp	r6, #19
   1cb12:	dc35      	bgt.n	1cb80 <rint+0x88>
   1cb14:	2e00      	cmp	r6, #0
   1cb16:	db57      	blt.n	1cbc8 <rint+0xd0>
   1cb18:	4b45      	ldr	r3, [pc, #276]	; (1cc30 <rint+0x138>)
   1cb1a:	0004      	movs	r4, r0
   1cb1c:	4133      	asrs	r3, r6
   1cb1e:	001f      	movs	r7, r3
   1cb20:	400f      	ands	r7, r1
   1cb22:	4307      	orrs	r7, r0
   1cb24:	000d      	movs	r5, r1
   1cb26:	2f00      	cmp	r7, #0
   1cb28:	d024      	beq.n	1cb74 <rint+0x7c>
   1cb2a:	085b      	lsrs	r3, r3, #1
   1cb2c:	001c      	movs	r4, r3
   1cb2e:	400c      	ands	r4, r1
   1cb30:	4320      	orrs	r0, r4
   1cb32:	2700      	movs	r7, #0
   1cb34:	2800      	cmp	r0, #0
   1cb36:	d007      	beq.n	1cb48 <rint+0x50>
   1cb38:	2e13      	cmp	r6, #19
   1cb3a:	d100      	bne.n	1cb3e <rint+0x46>
   1cb3c:	e073      	b.n	1cc26 <rint+0x12e>
   1cb3e:	2280      	movs	r2, #128	; 0x80
   1cb40:	02d2      	lsls	r2, r2, #11
   1cb42:	4132      	asrs	r2, r6
   1cb44:	4399      	bics	r1, r3
   1cb46:	430a      	orrs	r2, r1
   1cb48:	4643      	mov	r3, r8
   1cb4a:	00de      	lsls	r6, r3, #3
   1cb4c:	4b39      	ldr	r3, [pc, #228]	; (1cc34 <rint+0x13c>)
   1cb4e:	0011      	movs	r1, r2
   1cb50:	199e      	adds	r6, r3, r6
   1cb52:	6834      	ldr	r4, [r6, #0]
   1cb54:	6875      	ldr	r5, [r6, #4]
   1cb56:	0038      	movs	r0, r7
   1cb58:	0022      	movs	r2, r4
   1cb5a:	002b      	movs	r3, r5
   1cb5c:	f001 fa5e 	bl	1e01c <__aeabi_dadd>
   1cb60:	9000      	str	r0, [sp, #0]
   1cb62:	9101      	str	r1, [sp, #4]
   1cb64:	9800      	ldr	r0, [sp, #0]
   1cb66:	9901      	ldr	r1, [sp, #4]
   1cb68:	0022      	movs	r2, r4
   1cb6a:	002b      	movs	r3, r5
   1cb6c:	f002 fc1a 	bl	1f3a4 <__aeabi_dsub>
   1cb70:	0004      	movs	r4, r0
   1cb72:	000d      	movs	r5, r1
   1cb74:	0020      	movs	r0, r4
   1cb76:	0029      	movs	r1, r5
   1cb78:	b002      	add	sp, #8
   1cb7a:	bc04      	pop	{r2}
   1cb7c:	4690      	mov	r8, r2
   1cb7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cb80:	2e33      	cmp	r6, #51	; 0x33
   1cb82:	dd0c      	ble.n	1cb9e <rint+0xa6>
   1cb84:	2380      	movs	r3, #128	; 0x80
   1cb86:	0004      	movs	r4, r0
   1cb88:	00db      	lsls	r3, r3, #3
   1cb8a:	000d      	movs	r5, r1
   1cb8c:	429e      	cmp	r6, r3
   1cb8e:	d1f1      	bne.n	1cb74 <rint+0x7c>
   1cb90:	0002      	movs	r2, r0
   1cb92:	000b      	movs	r3, r1
   1cb94:	f001 fa42 	bl	1e01c <__aeabi_dadd>
   1cb98:	0004      	movs	r4, r0
   1cb9a:	000d      	movs	r5, r1
   1cb9c:	e7ea      	b.n	1cb74 <rint+0x7c>
   1cb9e:	4c26      	ldr	r4, [pc, #152]	; (1cc38 <rint+0x140>)
   1cba0:	000d      	movs	r5, r1
   1cba2:	46a4      	mov	ip, r4
   1cba4:	2401      	movs	r4, #1
   1cba6:	4463      	add	r3, ip
   1cba8:	4264      	negs	r4, r4
   1cbaa:	40dc      	lsrs	r4, r3
   1cbac:	46a4      	mov	ip, r4
   1cbae:	4661      	mov	r1, ip
   1cbb0:	0004      	movs	r4, r0
   1cbb2:	4201      	tst	r1, r0
   1cbb4:	d0de      	beq.n	1cb74 <rint+0x7c>
   1cbb6:	0849      	lsrs	r1, r1, #1
   1cbb8:	4201      	tst	r1, r0
   1cbba:	d0c5      	beq.n	1cb48 <rint+0x50>
   1cbbc:	2780      	movs	r7, #128	; 0x80
   1cbbe:	05ff      	lsls	r7, r7, #23
   1cbc0:	411f      	asrs	r7, r3
   1cbc2:	4388      	bics	r0, r1
   1cbc4:	4307      	orrs	r7, r0
   1cbc6:	e7bf      	b.n	1cb48 <rint+0x50>
   1cbc8:	004b      	lsls	r3, r1, #1
   1cbca:	085b      	lsrs	r3, r3, #1
   1cbcc:	4303      	orrs	r3, r0
   1cbce:	0004      	movs	r4, r0
   1cbd0:	000d      	movs	r5, r1
   1cbd2:	2b00      	cmp	r3, #0
   1cbd4:	d0ce      	beq.n	1cb74 <rint+0x7c>
   1cbd6:	030b      	lsls	r3, r1, #12
   1cbd8:	0b1b      	lsrs	r3, r3, #12
   1cbda:	4303      	orrs	r3, r0
   1cbdc:	001a      	movs	r2, r3
   1cbde:	425b      	negs	r3, r3
   1cbe0:	4313      	orrs	r3, r2
   1cbe2:	2280      	movs	r2, #128	; 0x80
   1cbe4:	0b1b      	lsrs	r3, r3, #12
   1cbe6:	0312      	lsls	r2, r2, #12
   1cbe8:	4013      	ands	r3, r2
   1cbea:	0c4a      	lsrs	r2, r1, #17
   1cbec:	0452      	lsls	r2, r2, #17
   1cbee:	4313      	orrs	r3, r2
   1cbf0:	0019      	movs	r1, r3
   1cbf2:	4643      	mov	r3, r8
   1cbf4:	00da      	lsls	r2, r3, #3
   1cbf6:	4b0f      	ldr	r3, [pc, #60]	; (1cc34 <rint+0x13c>)
   1cbf8:	189b      	adds	r3, r3, r2
   1cbfa:	681c      	ldr	r4, [r3, #0]
   1cbfc:	685d      	ldr	r5, [r3, #4]
   1cbfe:	0022      	movs	r2, r4
   1cc00:	002b      	movs	r3, r5
   1cc02:	f001 fa0b 	bl	1e01c <__aeabi_dadd>
   1cc06:	9000      	str	r0, [sp, #0]
   1cc08:	9101      	str	r1, [sp, #4]
   1cc0a:	9800      	ldr	r0, [sp, #0]
   1cc0c:	9901      	ldr	r1, [sp, #4]
   1cc0e:	0022      	movs	r2, r4
   1cc10:	002b      	movs	r3, r5
   1cc12:	f002 fbc7 	bl	1f3a4 <__aeabi_dsub>
   1cc16:	4642      	mov	r2, r8
   1cc18:	004b      	lsls	r3, r1, #1
   1cc1a:	085b      	lsrs	r3, r3, #1
   1cc1c:	07d6      	lsls	r6, r2, #31
   1cc1e:	4333      	orrs	r3, r6
   1cc20:	0004      	movs	r4, r0
   1cc22:	001d      	movs	r5, r3
   1cc24:	e7a6      	b.n	1cb74 <rint+0x7c>
   1cc26:	2780      	movs	r7, #128	; 0x80
   1cc28:	063f      	lsls	r7, r7, #24
   1cc2a:	e788      	b.n	1cb3e <rint+0x46>
   1cc2c:	fffffc01 	.word	0xfffffc01
   1cc30:	000fffff 	.word	0x000fffff
   1cc34:	00026a90 	.word	0x00026a90
   1cc38:	fffffbed 	.word	0xfffffbed

0001cc3c <scalbn>:
   1cc3c:	004b      	lsls	r3, r1, #1
   1cc3e:	b570      	push	{r4, r5, r6, lr}
   1cc40:	0d5b      	lsrs	r3, r3, #21
   1cc42:	0014      	movs	r4, r2
   1cc44:	000a      	movs	r2, r1
   1cc46:	2b00      	cmp	r3, #0
   1cc48:	d11a      	bne.n	1cc80 <scalbn+0x44>
   1cc4a:	004b      	lsls	r3, r1, #1
   1cc4c:	085b      	lsrs	r3, r3, #1
   1cc4e:	4303      	orrs	r3, r0
   1cc50:	d015      	beq.n	1cc7e <scalbn+0x42>
   1cc52:	2200      	movs	r2, #0
   1cc54:	4b22      	ldr	r3, [pc, #136]	; (1cce0 <scalbn+0xa4>)
   1cc56:	f002 f925 	bl	1eea4 <__aeabi_dmul>
   1cc5a:	4b22      	ldr	r3, [pc, #136]	; (1cce4 <scalbn+0xa8>)
   1cc5c:	000a      	movs	r2, r1
   1cc5e:	429c      	cmp	r4, r3
   1cc60:	db22      	blt.n	1cca8 <scalbn+0x6c>
   1cc62:	004b      	lsls	r3, r1, #1
   1cc64:	0d5b      	lsrs	r3, r3, #21
   1cc66:	3b36      	subs	r3, #54	; 0x36
   1cc68:	4d1f      	ldr	r5, [pc, #124]	; (1cce8 <scalbn+0xac>)
   1cc6a:	18e3      	adds	r3, r4, r3
   1cc6c:	42ab      	cmp	r3, r5
   1cc6e:	dc20      	bgt.n	1ccb2 <scalbn+0x76>
   1cc70:	2b00      	cmp	r3, #0
   1cc72:	dd0d      	ble.n	1cc90 <scalbn+0x54>
   1cc74:	4c1d      	ldr	r4, [pc, #116]	; (1ccec <scalbn+0xb0>)
   1cc76:	051b      	lsls	r3, r3, #20
   1cc78:	4022      	ands	r2, r4
   1cc7a:	431a      	orrs	r2, r3
   1cc7c:	0011      	movs	r1, r2
   1cc7e:	bd70      	pop	{r4, r5, r6, pc}
   1cc80:	4d1b      	ldr	r5, [pc, #108]	; (1ccf0 <scalbn+0xb4>)
   1cc82:	42ab      	cmp	r3, r5
   1cc84:	d1f0      	bne.n	1cc68 <scalbn+0x2c>
   1cc86:	0002      	movs	r2, r0
   1cc88:	000b      	movs	r3, r1
   1cc8a:	f001 f9c7 	bl	1e01c <__aeabi_dadd>
   1cc8e:	e7f6      	b.n	1cc7e <scalbn+0x42>
   1cc90:	001d      	movs	r5, r3
   1cc92:	3535      	adds	r5, #53	; 0x35
   1cc94:	da18      	bge.n	1ccc8 <scalbn+0x8c>
   1cc96:	4b17      	ldr	r3, [pc, #92]	; (1ccf4 <scalbn+0xb8>)
   1cc98:	0002      	movs	r2, r0
   1cc9a:	429c      	cmp	r4, r3
   1cc9c:	dc0a      	bgt.n	1ccb4 <scalbn+0x78>
   1cc9e:	000b      	movs	r3, r1
   1cca0:	4815      	ldr	r0, [pc, #84]	; (1ccf8 <scalbn+0xbc>)
   1cca2:	4916      	ldr	r1, [pc, #88]	; (1ccfc <scalbn+0xc0>)
   1cca4:	f000 f832 	bl	1cd0c <copysign>
   1cca8:	4a13      	ldr	r2, [pc, #76]	; (1ccf8 <scalbn+0xbc>)
   1ccaa:	4b14      	ldr	r3, [pc, #80]	; (1ccfc <scalbn+0xc0>)
   1ccac:	f002 f8fa 	bl	1eea4 <__aeabi_dmul>
   1ccb0:	e7e5      	b.n	1cc7e <scalbn+0x42>
   1ccb2:	0002      	movs	r2, r0
   1ccb4:	000b      	movs	r3, r1
   1ccb6:	4812      	ldr	r0, [pc, #72]	; (1cd00 <scalbn+0xc4>)
   1ccb8:	4912      	ldr	r1, [pc, #72]	; (1cd04 <scalbn+0xc8>)
   1ccba:	f000 f827 	bl	1cd0c <copysign>
   1ccbe:	4a10      	ldr	r2, [pc, #64]	; (1cd00 <scalbn+0xc4>)
   1ccc0:	4b10      	ldr	r3, [pc, #64]	; (1cd04 <scalbn+0xc8>)
   1ccc2:	f002 f8ef 	bl	1eea4 <__aeabi_dmul>
   1ccc6:	e7da      	b.n	1cc7e <scalbn+0x42>
   1ccc8:	4c08      	ldr	r4, [pc, #32]	; (1ccec <scalbn+0xb0>)
   1ccca:	3336      	adds	r3, #54	; 0x36
   1cccc:	4022      	ands	r2, r4
   1ccce:	051b      	lsls	r3, r3, #20
   1ccd0:	4313      	orrs	r3, r2
   1ccd2:	0019      	movs	r1, r3
   1ccd4:	2200      	movs	r2, #0
   1ccd6:	4b0c      	ldr	r3, [pc, #48]	; (1cd08 <scalbn+0xcc>)
   1ccd8:	f002 f8e4 	bl	1eea4 <__aeabi_dmul>
   1ccdc:	e7cf      	b.n	1cc7e <scalbn+0x42>
   1ccde:	46c0      	nop			; (mov r8, r8)
   1cce0:	43500000 	.word	0x43500000
   1cce4:	ffff3cb0 	.word	0xffff3cb0
   1cce8:	000007fe 	.word	0x000007fe
   1ccec:	800fffff 	.word	0x800fffff
   1ccf0:	000007ff 	.word	0x000007ff
   1ccf4:	0000c350 	.word	0x0000c350
   1ccf8:	c2f8f359 	.word	0xc2f8f359
   1ccfc:	01a56e1f 	.word	0x01a56e1f
   1cd00:	8800759c 	.word	0x8800759c
   1cd04:	7e37e43c 	.word	0x7e37e43c
   1cd08:	3c900000 	.word	0x3c900000

0001cd0c <copysign>:
   1cd0c:	b530      	push	{r4, r5, lr}
   1cd0e:	004a      	lsls	r2, r1, #1
   1cd10:	0fdb      	lsrs	r3, r3, #31
   1cd12:	07db      	lsls	r3, r3, #31
   1cd14:	0852      	lsrs	r2, r2, #1
   1cd16:	431a      	orrs	r2, r3
   1cd18:	0011      	movs	r1, r2
   1cd1a:	bd30      	pop	{r4, r5, pc}

0001cd1c <__udivsi3>:
   1cd1c:	2200      	movs	r2, #0
   1cd1e:	0843      	lsrs	r3, r0, #1
   1cd20:	428b      	cmp	r3, r1
   1cd22:	d374      	bcc.n	1ce0e <__udivsi3+0xf2>
   1cd24:	0903      	lsrs	r3, r0, #4
   1cd26:	428b      	cmp	r3, r1
   1cd28:	d35f      	bcc.n	1cdea <__udivsi3+0xce>
   1cd2a:	0a03      	lsrs	r3, r0, #8
   1cd2c:	428b      	cmp	r3, r1
   1cd2e:	d344      	bcc.n	1cdba <__udivsi3+0x9e>
   1cd30:	0b03      	lsrs	r3, r0, #12
   1cd32:	428b      	cmp	r3, r1
   1cd34:	d328      	bcc.n	1cd88 <__udivsi3+0x6c>
   1cd36:	0c03      	lsrs	r3, r0, #16
   1cd38:	428b      	cmp	r3, r1
   1cd3a:	d30d      	bcc.n	1cd58 <__udivsi3+0x3c>
   1cd3c:	22ff      	movs	r2, #255	; 0xff
   1cd3e:	0209      	lsls	r1, r1, #8
   1cd40:	ba12      	rev	r2, r2
   1cd42:	0c03      	lsrs	r3, r0, #16
   1cd44:	428b      	cmp	r3, r1
   1cd46:	d302      	bcc.n	1cd4e <__udivsi3+0x32>
   1cd48:	1212      	asrs	r2, r2, #8
   1cd4a:	0209      	lsls	r1, r1, #8
   1cd4c:	d065      	beq.n	1ce1a <__udivsi3+0xfe>
   1cd4e:	0b03      	lsrs	r3, r0, #12
   1cd50:	428b      	cmp	r3, r1
   1cd52:	d319      	bcc.n	1cd88 <__udivsi3+0x6c>
   1cd54:	e000      	b.n	1cd58 <__udivsi3+0x3c>
   1cd56:	0a09      	lsrs	r1, r1, #8
   1cd58:	0bc3      	lsrs	r3, r0, #15
   1cd5a:	428b      	cmp	r3, r1
   1cd5c:	d301      	bcc.n	1cd62 <__udivsi3+0x46>
   1cd5e:	03cb      	lsls	r3, r1, #15
   1cd60:	1ac0      	subs	r0, r0, r3
   1cd62:	4152      	adcs	r2, r2
   1cd64:	0b83      	lsrs	r3, r0, #14
   1cd66:	428b      	cmp	r3, r1
   1cd68:	d301      	bcc.n	1cd6e <__udivsi3+0x52>
   1cd6a:	038b      	lsls	r3, r1, #14
   1cd6c:	1ac0      	subs	r0, r0, r3
   1cd6e:	4152      	adcs	r2, r2
   1cd70:	0b43      	lsrs	r3, r0, #13
   1cd72:	428b      	cmp	r3, r1
   1cd74:	d301      	bcc.n	1cd7a <__udivsi3+0x5e>
   1cd76:	034b      	lsls	r3, r1, #13
   1cd78:	1ac0      	subs	r0, r0, r3
   1cd7a:	4152      	adcs	r2, r2
   1cd7c:	0b03      	lsrs	r3, r0, #12
   1cd7e:	428b      	cmp	r3, r1
   1cd80:	d301      	bcc.n	1cd86 <__udivsi3+0x6a>
   1cd82:	030b      	lsls	r3, r1, #12
   1cd84:	1ac0      	subs	r0, r0, r3
   1cd86:	4152      	adcs	r2, r2
   1cd88:	0ac3      	lsrs	r3, r0, #11
   1cd8a:	428b      	cmp	r3, r1
   1cd8c:	d301      	bcc.n	1cd92 <__udivsi3+0x76>
   1cd8e:	02cb      	lsls	r3, r1, #11
   1cd90:	1ac0      	subs	r0, r0, r3
   1cd92:	4152      	adcs	r2, r2
   1cd94:	0a83      	lsrs	r3, r0, #10
   1cd96:	428b      	cmp	r3, r1
   1cd98:	d301      	bcc.n	1cd9e <__udivsi3+0x82>
   1cd9a:	028b      	lsls	r3, r1, #10
   1cd9c:	1ac0      	subs	r0, r0, r3
   1cd9e:	4152      	adcs	r2, r2
   1cda0:	0a43      	lsrs	r3, r0, #9
   1cda2:	428b      	cmp	r3, r1
   1cda4:	d301      	bcc.n	1cdaa <__udivsi3+0x8e>
   1cda6:	024b      	lsls	r3, r1, #9
   1cda8:	1ac0      	subs	r0, r0, r3
   1cdaa:	4152      	adcs	r2, r2
   1cdac:	0a03      	lsrs	r3, r0, #8
   1cdae:	428b      	cmp	r3, r1
   1cdb0:	d301      	bcc.n	1cdb6 <__udivsi3+0x9a>
   1cdb2:	020b      	lsls	r3, r1, #8
   1cdb4:	1ac0      	subs	r0, r0, r3
   1cdb6:	4152      	adcs	r2, r2
   1cdb8:	d2cd      	bcs.n	1cd56 <__udivsi3+0x3a>
   1cdba:	09c3      	lsrs	r3, r0, #7
   1cdbc:	428b      	cmp	r3, r1
   1cdbe:	d301      	bcc.n	1cdc4 <__udivsi3+0xa8>
   1cdc0:	01cb      	lsls	r3, r1, #7
   1cdc2:	1ac0      	subs	r0, r0, r3
   1cdc4:	4152      	adcs	r2, r2
   1cdc6:	0983      	lsrs	r3, r0, #6
   1cdc8:	428b      	cmp	r3, r1
   1cdca:	d301      	bcc.n	1cdd0 <__udivsi3+0xb4>
   1cdcc:	018b      	lsls	r3, r1, #6
   1cdce:	1ac0      	subs	r0, r0, r3
   1cdd0:	4152      	adcs	r2, r2
   1cdd2:	0943      	lsrs	r3, r0, #5
   1cdd4:	428b      	cmp	r3, r1
   1cdd6:	d301      	bcc.n	1cddc <__udivsi3+0xc0>
   1cdd8:	014b      	lsls	r3, r1, #5
   1cdda:	1ac0      	subs	r0, r0, r3
   1cddc:	4152      	adcs	r2, r2
   1cdde:	0903      	lsrs	r3, r0, #4
   1cde0:	428b      	cmp	r3, r1
   1cde2:	d301      	bcc.n	1cde8 <__udivsi3+0xcc>
   1cde4:	010b      	lsls	r3, r1, #4
   1cde6:	1ac0      	subs	r0, r0, r3
   1cde8:	4152      	adcs	r2, r2
   1cdea:	08c3      	lsrs	r3, r0, #3
   1cdec:	428b      	cmp	r3, r1
   1cdee:	d301      	bcc.n	1cdf4 <__udivsi3+0xd8>
   1cdf0:	00cb      	lsls	r3, r1, #3
   1cdf2:	1ac0      	subs	r0, r0, r3
   1cdf4:	4152      	adcs	r2, r2
   1cdf6:	0883      	lsrs	r3, r0, #2
   1cdf8:	428b      	cmp	r3, r1
   1cdfa:	d301      	bcc.n	1ce00 <__udivsi3+0xe4>
   1cdfc:	008b      	lsls	r3, r1, #2
   1cdfe:	1ac0      	subs	r0, r0, r3
   1ce00:	4152      	adcs	r2, r2
   1ce02:	0843      	lsrs	r3, r0, #1
   1ce04:	428b      	cmp	r3, r1
   1ce06:	d301      	bcc.n	1ce0c <__udivsi3+0xf0>
   1ce08:	004b      	lsls	r3, r1, #1
   1ce0a:	1ac0      	subs	r0, r0, r3
   1ce0c:	4152      	adcs	r2, r2
   1ce0e:	1a41      	subs	r1, r0, r1
   1ce10:	d200      	bcs.n	1ce14 <__udivsi3+0xf8>
   1ce12:	4601      	mov	r1, r0
   1ce14:	4152      	adcs	r2, r2
   1ce16:	4610      	mov	r0, r2
   1ce18:	4770      	bx	lr
   1ce1a:	e7ff      	b.n	1ce1c <__udivsi3+0x100>
   1ce1c:	b501      	push	{r0, lr}
   1ce1e:	2000      	movs	r0, #0
   1ce20:	f000 f8f0 	bl	1d004 <__aeabi_idiv0>
   1ce24:	bd02      	pop	{r1, pc}
   1ce26:	46c0      	nop			; (mov r8, r8)

0001ce28 <__aeabi_uidivmod>:
   1ce28:	2900      	cmp	r1, #0
   1ce2a:	d0f7      	beq.n	1ce1c <__udivsi3+0x100>
   1ce2c:	e776      	b.n	1cd1c <__udivsi3>
   1ce2e:	4770      	bx	lr

0001ce30 <__divsi3>:
   1ce30:	4603      	mov	r3, r0
   1ce32:	430b      	orrs	r3, r1
   1ce34:	d47f      	bmi.n	1cf36 <__divsi3+0x106>
   1ce36:	2200      	movs	r2, #0
   1ce38:	0843      	lsrs	r3, r0, #1
   1ce3a:	428b      	cmp	r3, r1
   1ce3c:	d374      	bcc.n	1cf28 <__divsi3+0xf8>
   1ce3e:	0903      	lsrs	r3, r0, #4
   1ce40:	428b      	cmp	r3, r1
   1ce42:	d35f      	bcc.n	1cf04 <__divsi3+0xd4>
   1ce44:	0a03      	lsrs	r3, r0, #8
   1ce46:	428b      	cmp	r3, r1
   1ce48:	d344      	bcc.n	1ced4 <__divsi3+0xa4>
   1ce4a:	0b03      	lsrs	r3, r0, #12
   1ce4c:	428b      	cmp	r3, r1
   1ce4e:	d328      	bcc.n	1cea2 <__divsi3+0x72>
   1ce50:	0c03      	lsrs	r3, r0, #16
   1ce52:	428b      	cmp	r3, r1
   1ce54:	d30d      	bcc.n	1ce72 <__divsi3+0x42>
   1ce56:	22ff      	movs	r2, #255	; 0xff
   1ce58:	0209      	lsls	r1, r1, #8
   1ce5a:	ba12      	rev	r2, r2
   1ce5c:	0c03      	lsrs	r3, r0, #16
   1ce5e:	428b      	cmp	r3, r1
   1ce60:	d302      	bcc.n	1ce68 <__divsi3+0x38>
   1ce62:	1212      	asrs	r2, r2, #8
   1ce64:	0209      	lsls	r1, r1, #8
   1ce66:	d065      	beq.n	1cf34 <__divsi3+0x104>
   1ce68:	0b03      	lsrs	r3, r0, #12
   1ce6a:	428b      	cmp	r3, r1
   1ce6c:	d319      	bcc.n	1cea2 <__divsi3+0x72>
   1ce6e:	e000      	b.n	1ce72 <__divsi3+0x42>
   1ce70:	0a09      	lsrs	r1, r1, #8
   1ce72:	0bc3      	lsrs	r3, r0, #15
   1ce74:	428b      	cmp	r3, r1
   1ce76:	d301      	bcc.n	1ce7c <__divsi3+0x4c>
   1ce78:	03cb      	lsls	r3, r1, #15
   1ce7a:	1ac0      	subs	r0, r0, r3
   1ce7c:	4152      	adcs	r2, r2
   1ce7e:	0b83      	lsrs	r3, r0, #14
   1ce80:	428b      	cmp	r3, r1
   1ce82:	d301      	bcc.n	1ce88 <__divsi3+0x58>
   1ce84:	038b      	lsls	r3, r1, #14
   1ce86:	1ac0      	subs	r0, r0, r3
   1ce88:	4152      	adcs	r2, r2
   1ce8a:	0b43      	lsrs	r3, r0, #13
   1ce8c:	428b      	cmp	r3, r1
   1ce8e:	d301      	bcc.n	1ce94 <__divsi3+0x64>
   1ce90:	034b      	lsls	r3, r1, #13
   1ce92:	1ac0      	subs	r0, r0, r3
   1ce94:	4152      	adcs	r2, r2
   1ce96:	0b03      	lsrs	r3, r0, #12
   1ce98:	428b      	cmp	r3, r1
   1ce9a:	d301      	bcc.n	1cea0 <__divsi3+0x70>
   1ce9c:	030b      	lsls	r3, r1, #12
   1ce9e:	1ac0      	subs	r0, r0, r3
   1cea0:	4152      	adcs	r2, r2
   1cea2:	0ac3      	lsrs	r3, r0, #11
   1cea4:	428b      	cmp	r3, r1
   1cea6:	d301      	bcc.n	1ceac <__divsi3+0x7c>
   1cea8:	02cb      	lsls	r3, r1, #11
   1ceaa:	1ac0      	subs	r0, r0, r3
   1ceac:	4152      	adcs	r2, r2
   1ceae:	0a83      	lsrs	r3, r0, #10
   1ceb0:	428b      	cmp	r3, r1
   1ceb2:	d301      	bcc.n	1ceb8 <__divsi3+0x88>
   1ceb4:	028b      	lsls	r3, r1, #10
   1ceb6:	1ac0      	subs	r0, r0, r3
   1ceb8:	4152      	adcs	r2, r2
   1ceba:	0a43      	lsrs	r3, r0, #9
   1cebc:	428b      	cmp	r3, r1
   1cebe:	d301      	bcc.n	1cec4 <__divsi3+0x94>
   1cec0:	024b      	lsls	r3, r1, #9
   1cec2:	1ac0      	subs	r0, r0, r3
   1cec4:	4152      	adcs	r2, r2
   1cec6:	0a03      	lsrs	r3, r0, #8
   1cec8:	428b      	cmp	r3, r1
   1ceca:	d301      	bcc.n	1ced0 <__divsi3+0xa0>
   1cecc:	020b      	lsls	r3, r1, #8
   1cece:	1ac0      	subs	r0, r0, r3
   1ced0:	4152      	adcs	r2, r2
   1ced2:	d2cd      	bcs.n	1ce70 <__divsi3+0x40>
   1ced4:	09c3      	lsrs	r3, r0, #7
   1ced6:	428b      	cmp	r3, r1
   1ced8:	d301      	bcc.n	1cede <__divsi3+0xae>
   1ceda:	01cb      	lsls	r3, r1, #7
   1cedc:	1ac0      	subs	r0, r0, r3
   1cede:	4152      	adcs	r2, r2
   1cee0:	0983      	lsrs	r3, r0, #6
   1cee2:	428b      	cmp	r3, r1
   1cee4:	d301      	bcc.n	1ceea <__divsi3+0xba>
   1cee6:	018b      	lsls	r3, r1, #6
   1cee8:	1ac0      	subs	r0, r0, r3
   1ceea:	4152      	adcs	r2, r2
   1ceec:	0943      	lsrs	r3, r0, #5
   1ceee:	428b      	cmp	r3, r1
   1cef0:	d301      	bcc.n	1cef6 <__divsi3+0xc6>
   1cef2:	014b      	lsls	r3, r1, #5
   1cef4:	1ac0      	subs	r0, r0, r3
   1cef6:	4152      	adcs	r2, r2
   1cef8:	0903      	lsrs	r3, r0, #4
   1cefa:	428b      	cmp	r3, r1
   1cefc:	d301      	bcc.n	1cf02 <__divsi3+0xd2>
   1cefe:	010b      	lsls	r3, r1, #4
   1cf00:	1ac0      	subs	r0, r0, r3
   1cf02:	4152      	adcs	r2, r2
   1cf04:	08c3      	lsrs	r3, r0, #3
   1cf06:	428b      	cmp	r3, r1
   1cf08:	d301      	bcc.n	1cf0e <__divsi3+0xde>
   1cf0a:	00cb      	lsls	r3, r1, #3
   1cf0c:	1ac0      	subs	r0, r0, r3
   1cf0e:	4152      	adcs	r2, r2
   1cf10:	0883      	lsrs	r3, r0, #2
   1cf12:	428b      	cmp	r3, r1
   1cf14:	d301      	bcc.n	1cf1a <__divsi3+0xea>
   1cf16:	008b      	lsls	r3, r1, #2
   1cf18:	1ac0      	subs	r0, r0, r3
   1cf1a:	4152      	adcs	r2, r2
   1cf1c:	0843      	lsrs	r3, r0, #1
   1cf1e:	428b      	cmp	r3, r1
   1cf20:	d301      	bcc.n	1cf26 <__divsi3+0xf6>
   1cf22:	004b      	lsls	r3, r1, #1
   1cf24:	1ac0      	subs	r0, r0, r3
   1cf26:	4152      	adcs	r2, r2
   1cf28:	1a41      	subs	r1, r0, r1
   1cf2a:	d200      	bcs.n	1cf2e <__divsi3+0xfe>
   1cf2c:	4601      	mov	r1, r0
   1cf2e:	4152      	adcs	r2, r2
   1cf30:	4610      	mov	r0, r2
   1cf32:	4770      	bx	lr
   1cf34:	e05d      	b.n	1cff2 <__divsi3+0x1c2>
   1cf36:	0fca      	lsrs	r2, r1, #31
   1cf38:	d000      	beq.n	1cf3c <__divsi3+0x10c>
   1cf3a:	4249      	negs	r1, r1
   1cf3c:	1003      	asrs	r3, r0, #32
   1cf3e:	d300      	bcc.n	1cf42 <__divsi3+0x112>
   1cf40:	4240      	negs	r0, r0
   1cf42:	4053      	eors	r3, r2
   1cf44:	2200      	movs	r2, #0
   1cf46:	469c      	mov	ip, r3
   1cf48:	0903      	lsrs	r3, r0, #4
   1cf4a:	428b      	cmp	r3, r1
   1cf4c:	d32d      	bcc.n	1cfaa <__divsi3+0x17a>
   1cf4e:	0a03      	lsrs	r3, r0, #8
   1cf50:	428b      	cmp	r3, r1
   1cf52:	d312      	bcc.n	1cf7a <__divsi3+0x14a>
   1cf54:	22fc      	movs	r2, #252	; 0xfc
   1cf56:	0189      	lsls	r1, r1, #6
   1cf58:	ba12      	rev	r2, r2
   1cf5a:	0a03      	lsrs	r3, r0, #8
   1cf5c:	428b      	cmp	r3, r1
   1cf5e:	d30c      	bcc.n	1cf7a <__divsi3+0x14a>
   1cf60:	0189      	lsls	r1, r1, #6
   1cf62:	1192      	asrs	r2, r2, #6
   1cf64:	428b      	cmp	r3, r1
   1cf66:	d308      	bcc.n	1cf7a <__divsi3+0x14a>
   1cf68:	0189      	lsls	r1, r1, #6
   1cf6a:	1192      	asrs	r2, r2, #6
   1cf6c:	428b      	cmp	r3, r1
   1cf6e:	d304      	bcc.n	1cf7a <__divsi3+0x14a>
   1cf70:	0189      	lsls	r1, r1, #6
   1cf72:	d03a      	beq.n	1cfea <__divsi3+0x1ba>
   1cf74:	1192      	asrs	r2, r2, #6
   1cf76:	e000      	b.n	1cf7a <__divsi3+0x14a>
   1cf78:	0989      	lsrs	r1, r1, #6
   1cf7a:	09c3      	lsrs	r3, r0, #7
   1cf7c:	428b      	cmp	r3, r1
   1cf7e:	d301      	bcc.n	1cf84 <__divsi3+0x154>
   1cf80:	01cb      	lsls	r3, r1, #7
   1cf82:	1ac0      	subs	r0, r0, r3
   1cf84:	4152      	adcs	r2, r2
   1cf86:	0983      	lsrs	r3, r0, #6
   1cf88:	428b      	cmp	r3, r1
   1cf8a:	d301      	bcc.n	1cf90 <__divsi3+0x160>
   1cf8c:	018b      	lsls	r3, r1, #6
   1cf8e:	1ac0      	subs	r0, r0, r3
   1cf90:	4152      	adcs	r2, r2
   1cf92:	0943      	lsrs	r3, r0, #5
   1cf94:	428b      	cmp	r3, r1
   1cf96:	d301      	bcc.n	1cf9c <__divsi3+0x16c>
   1cf98:	014b      	lsls	r3, r1, #5
   1cf9a:	1ac0      	subs	r0, r0, r3
   1cf9c:	4152      	adcs	r2, r2
   1cf9e:	0903      	lsrs	r3, r0, #4
   1cfa0:	428b      	cmp	r3, r1
   1cfa2:	d301      	bcc.n	1cfa8 <__divsi3+0x178>
   1cfa4:	010b      	lsls	r3, r1, #4
   1cfa6:	1ac0      	subs	r0, r0, r3
   1cfa8:	4152      	adcs	r2, r2
   1cfaa:	08c3      	lsrs	r3, r0, #3
   1cfac:	428b      	cmp	r3, r1
   1cfae:	d301      	bcc.n	1cfb4 <__divsi3+0x184>
   1cfb0:	00cb      	lsls	r3, r1, #3
   1cfb2:	1ac0      	subs	r0, r0, r3
   1cfb4:	4152      	adcs	r2, r2
   1cfb6:	0883      	lsrs	r3, r0, #2
   1cfb8:	428b      	cmp	r3, r1
   1cfba:	d301      	bcc.n	1cfc0 <__divsi3+0x190>
   1cfbc:	008b      	lsls	r3, r1, #2
   1cfbe:	1ac0      	subs	r0, r0, r3
   1cfc0:	4152      	adcs	r2, r2
   1cfc2:	d2d9      	bcs.n	1cf78 <__divsi3+0x148>
   1cfc4:	0843      	lsrs	r3, r0, #1
   1cfc6:	428b      	cmp	r3, r1
   1cfc8:	d301      	bcc.n	1cfce <__divsi3+0x19e>
   1cfca:	004b      	lsls	r3, r1, #1
   1cfcc:	1ac0      	subs	r0, r0, r3
   1cfce:	4152      	adcs	r2, r2
   1cfd0:	1a41      	subs	r1, r0, r1
   1cfd2:	d200      	bcs.n	1cfd6 <__divsi3+0x1a6>
   1cfd4:	4601      	mov	r1, r0
   1cfd6:	4663      	mov	r3, ip
   1cfd8:	4152      	adcs	r2, r2
   1cfda:	105b      	asrs	r3, r3, #1
   1cfdc:	4610      	mov	r0, r2
   1cfde:	d301      	bcc.n	1cfe4 <__divsi3+0x1b4>
   1cfe0:	4240      	negs	r0, r0
   1cfe2:	2b00      	cmp	r3, #0
   1cfe4:	d500      	bpl.n	1cfe8 <__divsi3+0x1b8>
   1cfe6:	4249      	negs	r1, r1
   1cfe8:	4770      	bx	lr
   1cfea:	4663      	mov	r3, ip
   1cfec:	105b      	asrs	r3, r3, #1
   1cfee:	d300      	bcc.n	1cff2 <__divsi3+0x1c2>
   1cff0:	4240      	negs	r0, r0
   1cff2:	b501      	push	{r0, lr}
   1cff4:	2000      	movs	r0, #0
   1cff6:	f000 f805 	bl	1d004 <__aeabi_idiv0>
   1cffa:	bd02      	pop	{r1, pc}

0001cffc <__aeabi_idivmod>:
   1cffc:	2900      	cmp	r1, #0
   1cffe:	d0f8      	beq.n	1cff2 <__divsi3+0x1c2>
   1d000:	e716      	b.n	1ce30 <__divsi3>
   1d002:	4770      	bx	lr

0001d004 <__aeabi_idiv0>:
   1d004:	4770      	bx	lr
   1d006:	46c0      	nop			; (mov r8, r8)

0001d008 <__aeabi_cdrcmple>:
   1d008:	4684      	mov	ip, r0
   1d00a:	1c10      	adds	r0, r2, #0
   1d00c:	4662      	mov	r2, ip
   1d00e:	468c      	mov	ip, r1
   1d010:	1c19      	adds	r1, r3, #0
   1d012:	4663      	mov	r3, ip
   1d014:	e000      	b.n	1d018 <__aeabi_cdcmpeq>
   1d016:	46c0      	nop			; (mov r8, r8)

0001d018 <__aeabi_cdcmpeq>:
   1d018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1d01a:	f001 fee1 	bl	1ede0 <__ledf2>
   1d01e:	2800      	cmp	r0, #0
   1d020:	d401      	bmi.n	1d026 <__aeabi_cdcmpeq+0xe>
   1d022:	2100      	movs	r1, #0
   1d024:	42c8      	cmn	r0, r1
   1d026:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0001d028 <__aeabi_dcmpeq>:
   1d028:	b510      	push	{r4, lr}
   1d02a:	f001 fe3b 	bl	1eca4 <__eqdf2>
   1d02e:	4240      	negs	r0, r0
   1d030:	3001      	adds	r0, #1
   1d032:	bd10      	pop	{r4, pc}

0001d034 <__aeabi_dcmplt>:
   1d034:	b510      	push	{r4, lr}
   1d036:	f001 fed3 	bl	1ede0 <__ledf2>
   1d03a:	2800      	cmp	r0, #0
   1d03c:	db01      	blt.n	1d042 <__aeabi_dcmplt+0xe>
   1d03e:	2000      	movs	r0, #0
   1d040:	bd10      	pop	{r4, pc}
   1d042:	2001      	movs	r0, #1
   1d044:	bd10      	pop	{r4, pc}
   1d046:	46c0      	nop			; (mov r8, r8)

0001d048 <__aeabi_dcmple>:
   1d048:	b510      	push	{r4, lr}
   1d04a:	f001 fec9 	bl	1ede0 <__ledf2>
   1d04e:	2800      	cmp	r0, #0
   1d050:	dd01      	ble.n	1d056 <__aeabi_dcmple+0xe>
   1d052:	2000      	movs	r0, #0
   1d054:	bd10      	pop	{r4, pc}
   1d056:	2001      	movs	r0, #1
   1d058:	bd10      	pop	{r4, pc}
   1d05a:	46c0      	nop			; (mov r8, r8)

0001d05c <__aeabi_dcmpgt>:
   1d05c:	b510      	push	{r4, lr}
   1d05e:	f001 fe5b 	bl	1ed18 <__gedf2>
   1d062:	2800      	cmp	r0, #0
   1d064:	dc01      	bgt.n	1d06a <__aeabi_dcmpgt+0xe>
   1d066:	2000      	movs	r0, #0
   1d068:	bd10      	pop	{r4, pc}
   1d06a:	2001      	movs	r0, #1
   1d06c:	bd10      	pop	{r4, pc}
   1d06e:	46c0      	nop			; (mov r8, r8)

0001d070 <__aeabi_dcmpge>:
   1d070:	b510      	push	{r4, lr}
   1d072:	f001 fe51 	bl	1ed18 <__gedf2>
   1d076:	2800      	cmp	r0, #0
   1d078:	da01      	bge.n	1d07e <__aeabi_dcmpge+0xe>
   1d07a:	2000      	movs	r0, #0
   1d07c:	bd10      	pop	{r4, pc}
   1d07e:	2001      	movs	r0, #1
   1d080:	bd10      	pop	{r4, pc}
   1d082:	46c0      	nop			; (mov r8, r8)

0001d084 <__aeabi_cfrcmple>:
   1d084:	4684      	mov	ip, r0
   1d086:	1c08      	adds	r0, r1, #0
   1d088:	4661      	mov	r1, ip
   1d08a:	e7ff      	b.n	1d08c <__aeabi_cfcmpeq>

0001d08c <__aeabi_cfcmpeq>:
   1d08c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1d08e:	f000 fc11 	bl	1d8b4 <__lesf2>
   1d092:	2800      	cmp	r0, #0
   1d094:	d401      	bmi.n	1d09a <__aeabi_cfcmpeq+0xe>
   1d096:	2100      	movs	r1, #0
   1d098:	42c8      	cmn	r0, r1
   1d09a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0001d09c <__aeabi_fcmpeq>:
   1d09c:	b510      	push	{r4, lr}
   1d09e:	f000 fba3 	bl	1d7e8 <__eqsf2>
   1d0a2:	4240      	negs	r0, r0
   1d0a4:	3001      	adds	r0, #1
   1d0a6:	bd10      	pop	{r4, pc}

0001d0a8 <__aeabi_fcmplt>:
   1d0a8:	b510      	push	{r4, lr}
   1d0aa:	f000 fc03 	bl	1d8b4 <__lesf2>
   1d0ae:	2800      	cmp	r0, #0
   1d0b0:	db01      	blt.n	1d0b6 <__aeabi_fcmplt+0xe>
   1d0b2:	2000      	movs	r0, #0
   1d0b4:	bd10      	pop	{r4, pc}
   1d0b6:	2001      	movs	r0, #1
   1d0b8:	bd10      	pop	{r4, pc}
   1d0ba:	46c0      	nop			; (mov r8, r8)

0001d0bc <__aeabi_fcmple>:
   1d0bc:	b510      	push	{r4, lr}
   1d0be:	f000 fbf9 	bl	1d8b4 <__lesf2>
   1d0c2:	2800      	cmp	r0, #0
   1d0c4:	dd01      	ble.n	1d0ca <__aeabi_fcmple+0xe>
   1d0c6:	2000      	movs	r0, #0
   1d0c8:	bd10      	pop	{r4, pc}
   1d0ca:	2001      	movs	r0, #1
   1d0cc:	bd10      	pop	{r4, pc}
   1d0ce:	46c0      	nop			; (mov r8, r8)

0001d0d0 <__aeabi_fcmpgt>:
   1d0d0:	b510      	push	{r4, lr}
   1d0d2:	f000 fbaf 	bl	1d834 <__gesf2>
   1d0d6:	2800      	cmp	r0, #0
   1d0d8:	dc01      	bgt.n	1d0de <__aeabi_fcmpgt+0xe>
   1d0da:	2000      	movs	r0, #0
   1d0dc:	bd10      	pop	{r4, pc}
   1d0de:	2001      	movs	r0, #1
   1d0e0:	bd10      	pop	{r4, pc}
   1d0e2:	46c0      	nop			; (mov r8, r8)

0001d0e4 <__aeabi_fcmpge>:
   1d0e4:	b510      	push	{r4, lr}
   1d0e6:	f000 fba5 	bl	1d834 <__gesf2>
   1d0ea:	2800      	cmp	r0, #0
   1d0ec:	da01      	bge.n	1d0f2 <__aeabi_fcmpge+0xe>
   1d0ee:	2000      	movs	r0, #0
   1d0f0:	bd10      	pop	{r4, pc}
   1d0f2:	2001      	movs	r0, #1
   1d0f4:	bd10      	pop	{r4, pc}
   1d0f6:	46c0      	nop			; (mov r8, r8)

0001d0f8 <__clzsi2>:
   1d0f8:	211c      	movs	r1, #28
   1d0fa:	2301      	movs	r3, #1
   1d0fc:	041b      	lsls	r3, r3, #16
   1d0fe:	4298      	cmp	r0, r3
   1d100:	d301      	bcc.n	1d106 <__clzsi2+0xe>
   1d102:	0c00      	lsrs	r0, r0, #16
   1d104:	3910      	subs	r1, #16
   1d106:	0a1b      	lsrs	r3, r3, #8
   1d108:	4298      	cmp	r0, r3
   1d10a:	d301      	bcc.n	1d110 <__clzsi2+0x18>
   1d10c:	0a00      	lsrs	r0, r0, #8
   1d10e:	3908      	subs	r1, #8
   1d110:	091b      	lsrs	r3, r3, #4
   1d112:	4298      	cmp	r0, r3
   1d114:	d301      	bcc.n	1d11a <__clzsi2+0x22>
   1d116:	0900      	lsrs	r0, r0, #4
   1d118:	3904      	subs	r1, #4
   1d11a:	a202      	add	r2, pc, #8	; (adr r2, 1d124 <__clzsi2+0x2c>)
   1d11c:	5c10      	ldrb	r0, [r2, r0]
   1d11e:	1840      	adds	r0, r0, r1
   1d120:	4770      	bx	lr
   1d122:	46c0      	nop			; (mov r8, r8)
   1d124:	02020304 	.word	0x02020304
   1d128:	01010101 	.word	0x01010101
	...

0001d134 <__ctzsi2>:
   1d134:	4241      	negs	r1, r0
   1d136:	4008      	ands	r0, r1
   1d138:	211c      	movs	r1, #28
   1d13a:	2301      	movs	r3, #1
   1d13c:	041b      	lsls	r3, r3, #16
   1d13e:	4298      	cmp	r0, r3
   1d140:	d301      	bcc.n	1d146 <__ctzsi2+0x12>
   1d142:	0c00      	lsrs	r0, r0, #16
   1d144:	3910      	subs	r1, #16
   1d146:	0a1b      	lsrs	r3, r3, #8
   1d148:	4298      	cmp	r0, r3
   1d14a:	d301      	bcc.n	1d150 <__ctzsi2+0x1c>
   1d14c:	0a00      	lsrs	r0, r0, #8
   1d14e:	3908      	subs	r1, #8
   1d150:	091b      	lsrs	r3, r3, #4
   1d152:	4298      	cmp	r0, r3
   1d154:	d301      	bcc.n	1d15a <__ctzsi2+0x26>
   1d156:	0900      	lsrs	r0, r0, #4
   1d158:	3904      	subs	r1, #4
   1d15a:	a202      	add	r2, pc, #8	; (adr r2, 1d164 <__ctzsi2+0x30>)
   1d15c:	5c10      	ldrb	r0, [r2, r0]
   1d15e:	1a40      	subs	r0, r0, r1
   1d160:	4770      	bx	lr
   1d162:	46c0      	nop			; (mov r8, r8)
   1d164:	1d1d1c1b 	.word	0x1d1d1c1b
   1d168:	1e1e1e1e 	.word	0x1e1e1e1e
   1d16c:	1f1f1f1f 	.word	0x1f1f1f1f
   1d170:	1f1f1f1f 	.word	0x1f1f1f1f

0001d174 <__aeabi_lmul>:
   1d174:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d176:	46ce      	mov	lr, r9
   1d178:	4647      	mov	r7, r8
   1d17a:	0415      	lsls	r5, r2, #16
   1d17c:	0c2d      	lsrs	r5, r5, #16
   1d17e:	002e      	movs	r6, r5
   1d180:	b580      	push	{r7, lr}
   1d182:	0407      	lsls	r7, r0, #16
   1d184:	0c14      	lsrs	r4, r2, #16
   1d186:	0c3f      	lsrs	r7, r7, #16
   1d188:	4699      	mov	r9, r3
   1d18a:	0c03      	lsrs	r3, r0, #16
   1d18c:	437e      	muls	r6, r7
   1d18e:	435d      	muls	r5, r3
   1d190:	4367      	muls	r7, r4
   1d192:	4363      	muls	r3, r4
   1d194:	197f      	adds	r7, r7, r5
   1d196:	0c34      	lsrs	r4, r6, #16
   1d198:	19e4      	adds	r4, r4, r7
   1d19a:	469c      	mov	ip, r3
   1d19c:	42a5      	cmp	r5, r4
   1d19e:	d903      	bls.n	1d1a8 <__aeabi_lmul+0x34>
   1d1a0:	2380      	movs	r3, #128	; 0x80
   1d1a2:	025b      	lsls	r3, r3, #9
   1d1a4:	4698      	mov	r8, r3
   1d1a6:	44c4      	add	ip, r8
   1d1a8:	464b      	mov	r3, r9
   1d1aa:	4351      	muls	r1, r2
   1d1ac:	4343      	muls	r3, r0
   1d1ae:	0436      	lsls	r6, r6, #16
   1d1b0:	0c36      	lsrs	r6, r6, #16
   1d1b2:	0c25      	lsrs	r5, r4, #16
   1d1b4:	0424      	lsls	r4, r4, #16
   1d1b6:	4465      	add	r5, ip
   1d1b8:	19a4      	adds	r4, r4, r6
   1d1ba:	1859      	adds	r1, r3, r1
   1d1bc:	1949      	adds	r1, r1, r5
   1d1be:	0020      	movs	r0, r4
   1d1c0:	bc0c      	pop	{r2, r3}
   1d1c2:	4690      	mov	r8, r2
   1d1c4:	4699      	mov	r9, r3
   1d1c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d1c8 <__aeabi_f2uiz>:
   1d1c8:	219e      	movs	r1, #158	; 0x9e
   1d1ca:	b510      	push	{r4, lr}
   1d1cc:	05c9      	lsls	r1, r1, #23
   1d1ce:	1c04      	adds	r4, r0, #0
   1d1d0:	f7ff ff88 	bl	1d0e4 <__aeabi_fcmpge>
   1d1d4:	2800      	cmp	r0, #0
   1d1d6:	d103      	bne.n	1d1e0 <__aeabi_f2uiz+0x18>
   1d1d8:	1c20      	adds	r0, r4, #0
   1d1da:	f000 fe69 	bl	1deb0 <__aeabi_f2iz>
   1d1de:	bd10      	pop	{r4, pc}
   1d1e0:	219e      	movs	r1, #158	; 0x9e
   1d1e2:	1c20      	adds	r0, r4, #0
   1d1e4:	05c9      	lsls	r1, r1, #23
   1d1e6:	f000 fcc7 	bl	1db78 <__aeabi_fsub>
   1d1ea:	f000 fe61 	bl	1deb0 <__aeabi_f2iz>
   1d1ee:	2380      	movs	r3, #128	; 0x80
   1d1f0:	061b      	lsls	r3, r3, #24
   1d1f2:	469c      	mov	ip, r3
   1d1f4:	4460      	add	r0, ip
   1d1f6:	e7f2      	b.n	1d1de <__aeabi_f2uiz+0x16>

0001d1f8 <__aeabi_d2uiz>:
   1d1f8:	b570      	push	{r4, r5, r6, lr}
   1d1fa:	2200      	movs	r2, #0
   1d1fc:	4b0c      	ldr	r3, [pc, #48]	; (1d230 <__aeabi_d2uiz+0x38>)
   1d1fe:	0004      	movs	r4, r0
   1d200:	000d      	movs	r5, r1
   1d202:	f7ff ff35 	bl	1d070 <__aeabi_dcmpge>
   1d206:	2800      	cmp	r0, #0
   1d208:	d104      	bne.n	1d214 <__aeabi_d2uiz+0x1c>
   1d20a:	0020      	movs	r0, r4
   1d20c:	0029      	movs	r1, r5
   1d20e:	f002 fbff 	bl	1fa10 <__aeabi_d2iz>
   1d212:	bd70      	pop	{r4, r5, r6, pc}
   1d214:	4b06      	ldr	r3, [pc, #24]	; (1d230 <__aeabi_d2uiz+0x38>)
   1d216:	2200      	movs	r2, #0
   1d218:	0020      	movs	r0, r4
   1d21a:	0029      	movs	r1, r5
   1d21c:	f002 f8c2 	bl	1f3a4 <__aeabi_dsub>
   1d220:	f002 fbf6 	bl	1fa10 <__aeabi_d2iz>
   1d224:	2380      	movs	r3, #128	; 0x80
   1d226:	061b      	lsls	r3, r3, #24
   1d228:	469c      	mov	ip, r3
   1d22a:	4460      	add	r0, ip
   1d22c:	e7f1      	b.n	1d212 <__aeabi_d2uiz+0x1a>
   1d22e:	46c0      	nop			; (mov r8, r8)
   1d230:	41e00000 	.word	0x41e00000

0001d234 <__aeabi_fadd>:
   1d234:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d236:	46c6      	mov	lr, r8
   1d238:	024e      	lsls	r6, r1, #9
   1d23a:	0247      	lsls	r7, r0, #9
   1d23c:	0a76      	lsrs	r6, r6, #9
   1d23e:	0a7b      	lsrs	r3, r7, #9
   1d240:	0044      	lsls	r4, r0, #1
   1d242:	0fc5      	lsrs	r5, r0, #31
   1d244:	00f7      	lsls	r7, r6, #3
   1d246:	0048      	lsls	r0, r1, #1
   1d248:	4698      	mov	r8, r3
   1d24a:	b500      	push	{lr}
   1d24c:	0e24      	lsrs	r4, r4, #24
   1d24e:	002a      	movs	r2, r5
   1d250:	00db      	lsls	r3, r3, #3
   1d252:	0e00      	lsrs	r0, r0, #24
   1d254:	0fc9      	lsrs	r1, r1, #31
   1d256:	46bc      	mov	ip, r7
   1d258:	428d      	cmp	r5, r1
   1d25a:	d067      	beq.n	1d32c <__aeabi_fadd+0xf8>
   1d25c:	1a22      	subs	r2, r4, r0
   1d25e:	2a00      	cmp	r2, #0
   1d260:	dc00      	bgt.n	1d264 <__aeabi_fadd+0x30>
   1d262:	e0a5      	b.n	1d3b0 <__aeabi_fadd+0x17c>
   1d264:	2800      	cmp	r0, #0
   1d266:	d13a      	bne.n	1d2de <__aeabi_fadd+0xaa>
   1d268:	2f00      	cmp	r7, #0
   1d26a:	d100      	bne.n	1d26e <__aeabi_fadd+0x3a>
   1d26c:	e093      	b.n	1d396 <__aeabi_fadd+0x162>
   1d26e:	1e51      	subs	r1, r2, #1
   1d270:	2900      	cmp	r1, #0
   1d272:	d000      	beq.n	1d276 <__aeabi_fadd+0x42>
   1d274:	e0bc      	b.n	1d3f0 <__aeabi_fadd+0x1bc>
   1d276:	2401      	movs	r4, #1
   1d278:	1bdb      	subs	r3, r3, r7
   1d27a:	015a      	lsls	r2, r3, #5
   1d27c:	d546      	bpl.n	1d30c <__aeabi_fadd+0xd8>
   1d27e:	019b      	lsls	r3, r3, #6
   1d280:	099e      	lsrs	r6, r3, #6
   1d282:	0030      	movs	r0, r6
   1d284:	f7ff ff38 	bl	1d0f8 <__clzsi2>
   1d288:	3805      	subs	r0, #5
   1d28a:	4086      	lsls	r6, r0
   1d28c:	4284      	cmp	r4, r0
   1d28e:	dd00      	ble.n	1d292 <__aeabi_fadd+0x5e>
   1d290:	e09d      	b.n	1d3ce <__aeabi_fadd+0x19a>
   1d292:	1b04      	subs	r4, r0, r4
   1d294:	0032      	movs	r2, r6
   1d296:	2020      	movs	r0, #32
   1d298:	3401      	adds	r4, #1
   1d29a:	40e2      	lsrs	r2, r4
   1d29c:	1b04      	subs	r4, r0, r4
   1d29e:	40a6      	lsls	r6, r4
   1d2a0:	0033      	movs	r3, r6
   1d2a2:	1e5e      	subs	r6, r3, #1
   1d2a4:	41b3      	sbcs	r3, r6
   1d2a6:	2400      	movs	r4, #0
   1d2a8:	4313      	orrs	r3, r2
   1d2aa:	075a      	lsls	r2, r3, #29
   1d2ac:	d004      	beq.n	1d2b8 <__aeabi_fadd+0x84>
   1d2ae:	220f      	movs	r2, #15
   1d2b0:	401a      	ands	r2, r3
   1d2b2:	2a04      	cmp	r2, #4
   1d2b4:	d000      	beq.n	1d2b8 <__aeabi_fadd+0x84>
   1d2b6:	3304      	adds	r3, #4
   1d2b8:	015a      	lsls	r2, r3, #5
   1d2ba:	d529      	bpl.n	1d310 <__aeabi_fadd+0xdc>
   1d2bc:	3401      	adds	r4, #1
   1d2be:	2cff      	cmp	r4, #255	; 0xff
   1d2c0:	d100      	bne.n	1d2c4 <__aeabi_fadd+0x90>
   1d2c2:	e081      	b.n	1d3c8 <__aeabi_fadd+0x194>
   1d2c4:	002a      	movs	r2, r5
   1d2c6:	019b      	lsls	r3, r3, #6
   1d2c8:	0a5b      	lsrs	r3, r3, #9
   1d2ca:	b2e4      	uxtb	r4, r4
   1d2cc:	025b      	lsls	r3, r3, #9
   1d2ce:	05e4      	lsls	r4, r4, #23
   1d2d0:	0a58      	lsrs	r0, r3, #9
   1d2d2:	07d2      	lsls	r2, r2, #31
   1d2d4:	4320      	orrs	r0, r4
   1d2d6:	4310      	orrs	r0, r2
   1d2d8:	bc04      	pop	{r2}
   1d2da:	4690      	mov	r8, r2
   1d2dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d2de:	2cff      	cmp	r4, #255	; 0xff
   1d2e0:	d0e3      	beq.n	1d2aa <__aeabi_fadd+0x76>
   1d2e2:	2180      	movs	r1, #128	; 0x80
   1d2e4:	0038      	movs	r0, r7
   1d2e6:	04c9      	lsls	r1, r1, #19
   1d2e8:	4308      	orrs	r0, r1
   1d2ea:	4684      	mov	ip, r0
   1d2ec:	2a1b      	cmp	r2, #27
   1d2ee:	dd00      	ble.n	1d2f2 <__aeabi_fadd+0xbe>
   1d2f0:	e082      	b.n	1d3f8 <__aeabi_fadd+0x1c4>
   1d2f2:	2020      	movs	r0, #32
   1d2f4:	4661      	mov	r1, ip
   1d2f6:	40d1      	lsrs	r1, r2
   1d2f8:	1a82      	subs	r2, r0, r2
   1d2fa:	4660      	mov	r0, ip
   1d2fc:	4090      	lsls	r0, r2
   1d2fe:	0002      	movs	r2, r0
   1d300:	1e50      	subs	r0, r2, #1
   1d302:	4182      	sbcs	r2, r0
   1d304:	430a      	orrs	r2, r1
   1d306:	1a9b      	subs	r3, r3, r2
   1d308:	015a      	lsls	r2, r3, #5
   1d30a:	d4b8      	bmi.n	1d27e <__aeabi_fadd+0x4a>
   1d30c:	075a      	lsls	r2, r3, #29
   1d30e:	d1ce      	bne.n	1d2ae <__aeabi_fadd+0x7a>
   1d310:	08de      	lsrs	r6, r3, #3
   1d312:	002a      	movs	r2, r5
   1d314:	2cff      	cmp	r4, #255	; 0xff
   1d316:	d13a      	bne.n	1d38e <__aeabi_fadd+0x15a>
   1d318:	2e00      	cmp	r6, #0
   1d31a:	d100      	bne.n	1d31e <__aeabi_fadd+0xea>
   1d31c:	e0ae      	b.n	1d47c <__aeabi_fadd+0x248>
   1d31e:	2380      	movs	r3, #128	; 0x80
   1d320:	03db      	lsls	r3, r3, #15
   1d322:	4333      	orrs	r3, r6
   1d324:	025b      	lsls	r3, r3, #9
   1d326:	0a5b      	lsrs	r3, r3, #9
   1d328:	24ff      	movs	r4, #255	; 0xff
   1d32a:	e7cf      	b.n	1d2cc <__aeabi_fadd+0x98>
   1d32c:	1a21      	subs	r1, r4, r0
   1d32e:	2900      	cmp	r1, #0
   1d330:	dd52      	ble.n	1d3d8 <__aeabi_fadd+0x1a4>
   1d332:	2800      	cmp	r0, #0
   1d334:	d031      	beq.n	1d39a <__aeabi_fadd+0x166>
   1d336:	2cff      	cmp	r4, #255	; 0xff
   1d338:	d0b7      	beq.n	1d2aa <__aeabi_fadd+0x76>
   1d33a:	2080      	movs	r0, #128	; 0x80
   1d33c:	003e      	movs	r6, r7
   1d33e:	04c0      	lsls	r0, r0, #19
   1d340:	4306      	orrs	r6, r0
   1d342:	46b4      	mov	ip, r6
   1d344:	291b      	cmp	r1, #27
   1d346:	dd00      	ble.n	1d34a <__aeabi_fadd+0x116>
   1d348:	e0aa      	b.n	1d4a0 <__aeabi_fadd+0x26c>
   1d34a:	2620      	movs	r6, #32
   1d34c:	4660      	mov	r0, ip
   1d34e:	40c8      	lsrs	r0, r1
   1d350:	1a71      	subs	r1, r6, r1
   1d352:	4666      	mov	r6, ip
   1d354:	408e      	lsls	r6, r1
   1d356:	0031      	movs	r1, r6
   1d358:	1e4e      	subs	r6, r1, #1
   1d35a:	41b1      	sbcs	r1, r6
   1d35c:	4301      	orrs	r1, r0
   1d35e:	185b      	adds	r3, r3, r1
   1d360:	0159      	lsls	r1, r3, #5
   1d362:	d5d3      	bpl.n	1d30c <__aeabi_fadd+0xd8>
   1d364:	3401      	adds	r4, #1
   1d366:	2cff      	cmp	r4, #255	; 0xff
   1d368:	d100      	bne.n	1d36c <__aeabi_fadd+0x138>
   1d36a:	e087      	b.n	1d47c <__aeabi_fadd+0x248>
   1d36c:	2201      	movs	r2, #1
   1d36e:	4978      	ldr	r1, [pc, #480]	; (1d550 <__aeabi_fadd+0x31c>)
   1d370:	401a      	ands	r2, r3
   1d372:	085b      	lsrs	r3, r3, #1
   1d374:	400b      	ands	r3, r1
   1d376:	4313      	orrs	r3, r2
   1d378:	e797      	b.n	1d2aa <__aeabi_fadd+0x76>
   1d37a:	2c00      	cmp	r4, #0
   1d37c:	d000      	beq.n	1d380 <__aeabi_fadd+0x14c>
   1d37e:	e0a7      	b.n	1d4d0 <__aeabi_fadd+0x29c>
   1d380:	2b00      	cmp	r3, #0
   1d382:	d000      	beq.n	1d386 <__aeabi_fadd+0x152>
   1d384:	e0b6      	b.n	1d4f4 <__aeabi_fadd+0x2c0>
   1d386:	1e3b      	subs	r3, r7, #0
   1d388:	d162      	bne.n	1d450 <__aeabi_fadd+0x21c>
   1d38a:	2600      	movs	r6, #0
   1d38c:	2200      	movs	r2, #0
   1d38e:	0273      	lsls	r3, r6, #9
   1d390:	0a5b      	lsrs	r3, r3, #9
   1d392:	b2e4      	uxtb	r4, r4
   1d394:	e79a      	b.n	1d2cc <__aeabi_fadd+0x98>
   1d396:	0014      	movs	r4, r2
   1d398:	e787      	b.n	1d2aa <__aeabi_fadd+0x76>
   1d39a:	2f00      	cmp	r7, #0
   1d39c:	d04d      	beq.n	1d43a <__aeabi_fadd+0x206>
   1d39e:	1e48      	subs	r0, r1, #1
   1d3a0:	2800      	cmp	r0, #0
   1d3a2:	d157      	bne.n	1d454 <__aeabi_fadd+0x220>
   1d3a4:	4463      	add	r3, ip
   1d3a6:	2401      	movs	r4, #1
   1d3a8:	015a      	lsls	r2, r3, #5
   1d3aa:	d5af      	bpl.n	1d30c <__aeabi_fadd+0xd8>
   1d3ac:	2402      	movs	r4, #2
   1d3ae:	e7dd      	b.n	1d36c <__aeabi_fadd+0x138>
   1d3b0:	2a00      	cmp	r2, #0
   1d3b2:	d124      	bne.n	1d3fe <__aeabi_fadd+0x1ca>
   1d3b4:	1c62      	adds	r2, r4, #1
   1d3b6:	b2d2      	uxtb	r2, r2
   1d3b8:	2a01      	cmp	r2, #1
   1d3ba:	ddde      	ble.n	1d37a <__aeabi_fadd+0x146>
   1d3bc:	1bde      	subs	r6, r3, r7
   1d3be:	0172      	lsls	r2, r6, #5
   1d3c0:	d535      	bpl.n	1d42e <__aeabi_fadd+0x1fa>
   1d3c2:	1afe      	subs	r6, r7, r3
   1d3c4:	000d      	movs	r5, r1
   1d3c6:	e75c      	b.n	1d282 <__aeabi_fadd+0x4e>
   1d3c8:	002a      	movs	r2, r5
   1d3ca:	2300      	movs	r3, #0
   1d3cc:	e77e      	b.n	1d2cc <__aeabi_fadd+0x98>
   1d3ce:	0033      	movs	r3, r6
   1d3d0:	4a60      	ldr	r2, [pc, #384]	; (1d554 <__aeabi_fadd+0x320>)
   1d3d2:	1a24      	subs	r4, r4, r0
   1d3d4:	4013      	ands	r3, r2
   1d3d6:	e768      	b.n	1d2aa <__aeabi_fadd+0x76>
   1d3d8:	2900      	cmp	r1, #0
   1d3da:	d163      	bne.n	1d4a4 <__aeabi_fadd+0x270>
   1d3dc:	1c61      	adds	r1, r4, #1
   1d3de:	b2c8      	uxtb	r0, r1
   1d3e0:	2801      	cmp	r0, #1
   1d3e2:	dd4e      	ble.n	1d482 <__aeabi_fadd+0x24e>
   1d3e4:	29ff      	cmp	r1, #255	; 0xff
   1d3e6:	d049      	beq.n	1d47c <__aeabi_fadd+0x248>
   1d3e8:	4463      	add	r3, ip
   1d3ea:	085b      	lsrs	r3, r3, #1
   1d3ec:	000c      	movs	r4, r1
   1d3ee:	e75c      	b.n	1d2aa <__aeabi_fadd+0x76>
   1d3f0:	2aff      	cmp	r2, #255	; 0xff
   1d3f2:	d041      	beq.n	1d478 <__aeabi_fadd+0x244>
   1d3f4:	000a      	movs	r2, r1
   1d3f6:	e779      	b.n	1d2ec <__aeabi_fadd+0xb8>
   1d3f8:	2201      	movs	r2, #1
   1d3fa:	1a9b      	subs	r3, r3, r2
   1d3fc:	e784      	b.n	1d308 <__aeabi_fadd+0xd4>
   1d3fe:	2c00      	cmp	r4, #0
   1d400:	d01d      	beq.n	1d43e <__aeabi_fadd+0x20a>
   1d402:	28ff      	cmp	r0, #255	; 0xff
   1d404:	d022      	beq.n	1d44c <__aeabi_fadd+0x218>
   1d406:	2480      	movs	r4, #128	; 0x80
   1d408:	04e4      	lsls	r4, r4, #19
   1d40a:	4252      	negs	r2, r2
   1d40c:	4323      	orrs	r3, r4
   1d40e:	2a1b      	cmp	r2, #27
   1d410:	dd00      	ble.n	1d414 <__aeabi_fadd+0x1e0>
   1d412:	e08a      	b.n	1d52a <__aeabi_fadd+0x2f6>
   1d414:	001c      	movs	r4, r3
   1d416:	2520      	movs	r5, #32
   1d418:	40d4      	lsrs	r4, r2
   1d41a:	1aaa      	subs	r2, r5, r2
   1d41c:	4093      	lsls	r3, r2
   1d41e:	1e5a      	subs	r2, r3, #1
   1d420:	4193      	sbcs	r3, r2
   1d422:	4323      	orrs	r3, r4
   1d424:	4662      	mov	r2, ip
   1d426:	0004      	movs	r4, r0
   1d428:	1ad3      	subs	r3, r2, r3
   1d42a:	000d      	movs	r5, r1
   1d42c:	e725      	b.n	1d27a <__aeabi_fadd+0x46>
   1d42e:	2e00      	cmp	r6, #0
   1d430:	d000      	beq.n	1d434 <__aeabi_fadd+0x200>
   1d432:	e726      	b.n	1d282 <__aeabi_fadd+0x4e>
   1d434:	2200      	movs	r2, #0
   1d436:	2400      	movs	r4, #0
   1d438:	e7a9      	b.n	1d38e <__aeabi_fadd+0x15a>
   1d43a:	000c      	movs	r4, r1
   1d43c:	e735      	b.n	1d2aa <__aeabi_fadd+0x76>
   1d43e:	2b00      	cmp	r3, #0
   1d440:	d04d      	beq.n	1d4de <__aeabi_fadd+0x2aa>
   1d442:	43d2      	mvns	r2, r2
   1d444:	2a00      	cmp	r2, #0
   1d446:	d0ed      	beq.n	1d424 <__aeabi_fadd+0x1f0>
   1d448:	28ff      	cmp	r0, #255	; 0xff
   1d44a:	d1e0      	bne.n	1d40e <__aeabi_fadd+0x1da>
   1d44c:	4663      	mov	r3, ip
   1d44e:	24ff      	movs	r4, #255	; 0xff
   1d450:	000d      	movs	r5, r1
   1d452:	e72a      	b.n	1d2aa <__aeabi_fadd+0x76>
   1d454:	29ff      	cmp	r1, #255	; 0xff
   1d456:	d00f      	beq.n	1d478 <__aeabi_fadd+0x244>
   1d458:	0001      	movs	r1, r0
   1d45a:	e773      	b.n	1d344 <__aeabi_fadd+0x110>
   1d45c:	2b00      	cmp	r3, #0
   1d45e:	d061      	beq.n	1d524 <__aeabi_fadd+0x2f0>
   1d460:	24ff      	movs	r4, #255	; 0xff
   1d462:	2f00      	cmp	r7, #0
   1d464:	d100      	bne.n	1d468 <__aeabi_fadd+0x234>
   1d466:	e720      	b.n	1d2aa <__aeabi_fadd+0x76>
   1d468:	2280      	movs	r2, #128	; 0x80
   1d46a:	4641      	mov	r1, r8
   1d46c:	03d2      	lsls	r2, r2, #15
   1d46e:	4211      	tst	r1, r2
   1d470:	d002      	beq.n	1d478 <__aeabi_fadd+0x244>
   1d472:	4216      	tst	r6, r2
   1d474:	d100      	bne.n	1d478 <__aeabi_fadd+0x244>
   1d476:	003b      	movs	r3, r7
   1d478:	24ff      	movs	r4, #255	; 0xff
   1d47a:	e716      	b.n	1d2aa <__aeabi_fadd+0x76>
   1d47c:	24ff      	movs	r4, #255	; 0xff
   1d47e:	2300      	movs	r3, #0
   1d480:	e724      	b.n	1d2cc <__aeabi_fadd+0x98>
   1d482:	2c00      	cmp	r4, #0
   1d484:	d1ea      	bne.n	1d45c <__aeabi_fadd+0x228>
   1d486:	2b00      	cmp	r3, #0
   1d488:	d058      	beq.n	1d53c <__aeabi_fadd+0x308>
   1d48a:	2f00      	cmp	r7, #0
   1d48c:	d100      	bne.n	1d490 <__aeabi_fadd+0x25c>
   1d48e:	e70c      	b.n	1d2aa <__aeabi_fadd+0x76>
   1d490:	4463      	add	r3, ip
   1d492:	015a      	lsls	r2, r3, #5
   1d494:	d400      	bmi.n	1d498 <__aeabi_fadd+0x264>
   1d496:	e739      	b.n	1d30c <__aeabi_fadd+0xd8>
   1d498:	4a2e      	ldr	r2, [pc, #184]	; (1d554 <__aeabi_fadd+0x320>)
   1d49a:	000c      	movs	r4, r1
   1d49c:	4013      	ands	r3, r2
   1d49e:	e704      	b.n	1d2aa <__aeabi_fadd+0x76>
   1d4a0:	2101      	movs	r1, #1
   1d4a2:	e75c      	b.n	1d35e <__aeabi_fadd+0x12a>
   1d4a4:	2c00      	cmp	r4, #0
   1d4a6:	d11e      	bne.n	1d4e6 <__aeabi_fadd+0x2b2>
   1d4a8:	2b00      	cmp	r3, #0
   1d4aa:	d040      	beq.n	1d52e <__aeabi_fadd+0x2fa>
   1d4ac:	43c9      	mvns	r1, r1
   1d4ae:	2900      	cmp	r1, #0
   1d4b0:	d00b      	beq.n	1d4ca <__aeabi_fadd+0x296>
   1d4b2:	28ff      	cmp	r0, #255	; 0xff
   1d4b4:	d036      	beq.n	1d524 <__aeabi_fadd+0x2f0>
   1d4b6:	291b      	cmp	r1, #27
   1d4b8:	dc47      	bgt.n	1d54a <__aeabi_fadd+0x316>
   1d4ba:	001c      	movs	r4, r3
   1d4bc:	2620      	movs	r6, #32
   1d4be:	40cc      	lsrs	r4, r1
   1d4c0:	1a71      	subs	r1, r6, r1
   1d4c2:	408b      	lsls	r3, r1
   1d4c4:	1e59      	subs	r1, r3, #1
   1d4c6:	418b      	sbcs	r3, r1
   1d4c8:	4323      	orrs	r3, r4
   1d4ca:	4463      	add	r3, ip
   1d4cc:	0004      	movs	r4, r0
   1d4ce:	e747      	b.n	1d360 <__aeabi_fadd+0x12c>
   1d4d0:	2b00      	cmp	r3, #0
   1d4d2:	d118      	bne.n	1d506 <__aeabi_fadd+0x2d2>
   1d4d4:	1e3b      	subs	r3, r7, #0
   1d4d6:	d02d      	beq.n	1d534 <__aeabi_fadd+0x300>
   1d4d8:	000d      	movs	r5, r1
   1d4da:	24ff      	movs	r4, #255	; 0xff
   1d4dc:	e6e5      	b.n	1d2aa <__aeabi_fadd+0x76>
   1d4de:	003b      	movs	r3, r7
   1d4e0:	0004      	movs	r4, r0
   1d4e2:	000d      	movs	r5, r1
   1d4e4:	e6e1      	b.n	1d2aa <__aeabi_fadd+0x76>
   1d4e6:	28ff      	cmp	r0, #255	; 0xff
   1d4e8:	d01c      	beq.n	1d524 <__aeabi_fadd+0x2f0>
   1d4ea:	2480      	movs	r4, #128	; 0x80
   1d4ec:	04e4      	lsls	r4, r4, #19
   1d4ee:	4249      	negs	r1, r1
   1d4f0:	4323      	orrs	r3, r4
   1d4f2:	e7e0      	b.n	1d4b6 <__aeabi_fadd+0x282>
   1d4f4:	2f00      	cmp	r7, #0
   1d4f6:	d100      	bne.n	1d4fa <__aeabi_fadd+0x2c6>
   1d4f8:	e6d7      	b.n	1d2aa <__aeabi_fadd+0x76>
   1d4fa:	1bde      	subs	r6, r3, r7
   1d4fc:	0172      	lsls	r2, r6, #5
   1d4fe:	d51f      	bpl.n	1d540 <__aeabi_fadd+0x30c>
   1d500:	1afb      	subs	r3, r7, r3
   1d502:	000d      	movs	r5, r1
   1d504:	e6d1      	b.n	1d2aa <__aeabi_fadd+0x76>
   1d506:	24ff      	movs	r4, #255	; 0xff
   1d508:	2f00      	cmp	r7, #0
   1d50a:	d100      	bne.n	1d50e <__aeabi_fadd+0x2da>
   1d50c:	e6cd      	b.n	1d2aa <__aeabi_fadd+0x76>
   1d50e:	2280      	movs	r2, #128	; 0x80
   1d510:	4640      	mov	r0, r8
   1d512:	03d2      	lsls	r2, r2, #15
   1d514:	4210      	tst	r0, r2
   1d516:	d0af      	beq.n	1d478 <__aeabi_fadd+0x244>
   1d518:	4216      	tst	r6, r2
   1d51a:	d1ad      	bne.n	1d478 <__aeabi_fadd+0x244>
   1d51c:	003b      	movs	r3, r7
   1d51e:	000d      	movs	r5, r1
   1d520:	24ff      	movs	r4, #255	; 0xff
   1d522:	e6c2      	b.n	1d2aa <__aeabi_fadd+0x76>
   1d524:	4663      	mov	r3, ip
   1d526:	24ff      	movs	r4, #255	; 0xff
   1d528:	e6bf      	b.n	1d2aa <__aeabi_fadd+0x76>
   1d52a:	2301      	movs	r3, #1
   1d52c:	e77a      	b.n	1d424 <__aeabi_fadd+0x1f0>
   1d52e:	003b      	movs	r3, r7
   1d530:	0004      	movs	r4, r0
   1d532:	e6ba      	b.n	1d2aa <__aeabi_fadd+0x76>
   1d534:	2680      	movs	r6, #128	; 0x80
   1d536:	2200      	movs	r2, #0
   1d538:	03f6      	lsls	r6, r6, #15
   1d53a:	e6f0      	b.n	1d31e <__aeabi_fadd+0xea>
   1d53c:	003b      	movs	r3, r7
   1d53e:	e6b4      	b.n	1d2aa <__aeabi_fadd+0x76>
   1d540:	1e33      	subs	r3, r6, #0
   1d542:	d000      	beq.n	1d546 <__aeabi_fadd+0x312>
   1d544:	e6e2      	b.n	1d30c <__aeabi_fadd+0xd8>
   1d546:	2200      	movs	r2, #0
   1d548:	e721      	b.n	1d38e <__aeabi_fadd+0x15a>
   1d54a:	2301      	movs	r3, #1
   1d54c:	e7bd      	b.n	1d4ca <__aeabi_fadd+0x296>
   1d54e:	46c0      	nop			; (mov r8, r8)
   1d550:	7dffffff 	.word	0x7dffffff
   1d554:	fbffffff 	.word	0xfbffffff

0001d558 <__aeabi_fdiv>:
   1d558:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d55a:	4657      	mov	r7, sl
   1d55c:	464e      	mov	r6, r9
   1d55e:	46de      	mov	lr, fp
   1d560:	4645      	mov	r5, r8
   1d562:	b5e0      	push	{r5, r6, r7, lr}
   1d564:	0244      	lsls	r4, r0, #9
   1d566:	0043      	lsls	r3, r0, #1
   1d568:	0fc6      	lsrs	r6, r0, #31
   1d56a:	b083      	sub	sp, #12
   1d56c:	1c0f      	adds	r7, r1, #0
   1d56e:	0a64      	lsrs	r4, r4, #9
   1d570:	0e1b      	lsrs	r3, r3, #24
   1d572:	46b2      	mov	sl, r6
   1d574:	d053      	beq.n	1d61e <__aeabi_fdiv+0xc6>
   1d576:	2bff      	cmp	r3, #255	; 0xff
   1d578:	d027      	beq.n	1d5ca <__aeabi_fdiv+0x72>
   1d57a:	2280      	movs	r2, #128	; 0x80
   1d57c:	00e4      	lsls	r4, r4, #3
   1d57e:	04d2      	lsls	r2, r2, #19
   1d580:	4314      	orrs	r4, r2
   1d582:	227f      	movs	r2, #127	; 0x7f
   1d584:	4252      	negs	r2, r2
   1d586:	4690      	mov	r8, r2
   1d588:	4498      	add	r8, r3
   1d58a:	2300      	movs	r3, #0
   1d58c:	4699      	mov	r9, r3
   1d58e:	469b      	mov	fp, r3
   1d590:	027d      	lsls	r5, r7, #9
   1d592:	0078      	lsls	r0, r7, #1
   1d594:	0ffb      	lsrs	r3, r7, #31
   1d596:	0a6d      	lsrs	r5, r5, #9
   1d598:	0e00      	lsrs	r0, r0, #24
   1d59a:	9300      	str	r3, [sp, #0]
   1d59c:	d024      	beq.n	1d5e8 <__aeabi_fdiv+0x90>
   1d59e:	28ff      	cmp	r0, #255	; 0xff
   1d5a0:	d046      	beq.n	1d630 <__aeabi_fdiv+0xd8>
   1d5a2:	2380      	movs	r3, #128	; 0x80
   1d5a4:	2100      	movs	r1, #0
   1d5a6:	00ed      	lsls	r5, r5, #3
   1d5a8:	04db      	lsls	r3, r3, #19
   1d5aa:	431d      	orrs	r5, r3
   1d5ac:	387f      	subs	r0, #127	; 0x7f
   1d5ae:	4647      	mov	r7, r8
   1d5b0:	1a38      	subs	r0, r7, r0
   1d5b2:	464f      	mov	r7, r9
   1d5b4:	430f      	orrs	r7, r1
   1d5b6:	00bf      	lsls	r7, r7, #2
   1d5b8:	46b9      	mov	r9, r7
   1d5ba:	0033      	movs	r3, r6
   1d5bc:	9a00      	ldr	r2, [sp, #0]
   1d5be:	4f87      	ldr	r7, [pc, #540]	; (1d7dc <__aeabi_fdiv+0x284>)
   1d5c0:	4053      	eors	r3, r2
   1d5c2:	464a      	mov	r2, r9
   1d5c4:	58ba      	ldr	r2, [r7, r2]
   1d5c6:	9301      	str	r3, [sp, #4]
   1d5c8:	4697      	mov	pc, r2
   1d5ca:	2c00      	cmp	r4, #0
   1d5cc:	d14e      	bne.n	1d66c <__aeabi_fdiv+0x114>
   1d5ce:	2308      	movs	r3, #8
   1d5d0:	4699      	mov	r9, r3
   1d5d2:	33f7      	adds	r3, #247	; 0xf7
   1d5d4:	4698      	mov	r8, r3
   1d5d6:	3bfd      	subs	r3, #253	; 0xfd
   1d5d8:	469b      	mov	fp, r3
   1d5da:	027d      	lsls	r5, r7, #9
   1d5dc:	0078      	lsls	r0, r7, #1
   1d5de:	0ffb      	lsrs	r3, r7, #31
   1d5e0:	0a6d      	lsrs	r5, r5, #9
   1d5e2:	0e00      	lsrs	r0, r0, #24
   1d5e4:	9300      	str	r3, [sp, #0]
   1d5e6:	d1da      	bne.n	1d59e <__aeabi_fdiv+0x46>
   1d5e8:	2d00      	cmp	r5, #0
   1d5ea:	d126      	bne.n	1d63a <__aeabi_fdiv+0xe2>
   1d5ec:	2000      	movs	r0, #0
   1d5ee:	2101      	movs	r1, #1
   1d5f0:	0033      	movs	r3, r6
   1d5f2:	9a00      	ldr	r2, [sp, #0]
   1d5f4:	4f7a      	ldr	r7, [pc, #488]	; (1d7e0 <__aeabi_fdiv+0x288>)
   1d5f6:	4053      	eors	r3, r2
   1d5f8:	4642      	mov	r2, r8
   1d5fa:	1a10      	subs	r0, r2, r0
   1d5fc:	464a      	mov	r2, r9
   1d5fe:	430a      	orrs	r2, r1
   1d600:	0092      	lsls	r2, r2, #2
   1d602:	58ba      	ldr	r2, [r7, r2]
   1d604:	001d      	movs	r5, r3
   1d606:	4697      	mov	pc, r2
   1d608:	9b00      	ldr	r3, [sp, #0]
   1d60a:	002c      	movs	r4, r5
   1d60c:	469a      	mov	sl, r3
   1d60e:	468b      	mov	fp, r1
   1d610:	465b      	mov	r3, fp
   1d612:	2b02      	cmp	r3, #2
   1d614:	d131      	bne.n	1d67a <__aeabi_fdiv+0x122>
   1d616:	4653      	mov	r3, sl
   1d618:	21ff      	movs	r1, #255	; 0xff
   1d61a:	2400      	movs	r4, #0
   1d61c:	e038      	b.n	1d690 <__aeabi_fdiv+0x138>
   1d61e:	2c00      	cmp	r4, #0
   1d620:	d117      	bne.n	1d652 <__aeabi_fdiv+0xfa>
   1d622:	2304      	movs	r3, #4
   1d624:	4699      	mov	r9, r3
   1d626:	2300      	movs	r3, #0
   1d628:	4698      	mov	r8, r3
   1d62a:	3301      	adds	r3, #1
   1d62c:	469b      	mov	fp, r3
   1d62e:	e7af      	b.n	1d590 <__aeabi_fdiv+0x38>
   1d630:	20ff      	movs	r0, #255	; 0xff
   1d632:	2d00      	cmp	r5, #0
   1d634:	d10b      	bne.n	1d64e <__aeabi_fdiv+0xf6>
   1d636:	2102      	movs	r1, #2
   1d638:	e7da      	b.n	1d5f0 <__aeabi_fdiv+0x98>
   1d63a:	0028      	movs	r0, r5
   1d63c:	f7ff fd5c 	bl	1d0f8 <__clzsi2>
   1d640:	1f43      	subs	r3, r0, #5
   1d642:	409d      	lsls	r5, r3
   1d644:	2376      	movs	r3, #118	; 0x76
   1d646:	425b      	negs	r3, r3
   1d648:	1a18      	subs	r0, r3, r0
   1d64a:	2100      	movs	r1, #0
   1d64c:	e7af      	b.n	1d5ae <__aeabi_fdiv+0x56>
   1d64e:	2103      	movs	r1, #3
   1d650:	e7ad      	b.n	1d5ae <__aeabi_fdiv+0x56>
   1d652:	0020      	movs	r0, r4
   1d654:	f7ff fd50 	bl	1d0f8 <__clzsi2>
   1d658:	1f43      	subs	r3, r0, #5
   1d65a:	409c      	lsls	r4, r3
   1d65c:	2376      	movs	r3, #118	; 0x76
   1d65e:	425b      	negs	r3, r3
   1d660:	1a1b      	subs	r3, r3, r0
   1d662:	4698      	mov	r8, r3
   1d664:	2300      	movs	r3, #0
   1d666:	4699      	mov	r9, r3
   1d668:	469b      	mov	fp, r3
   1d66a:	e791      	b.n	1d590 <__aeabi_fdiv+0x38>
   1d66c:	230c      	movs	r3, #12
   1d66e:	4699      	mov	r9, r3
   1d670:	33f3      	adds	r3, #243	; 0xf3
   1d672:	4698      	mov	r8, r3
   1d674:	3bfc      	subs	r3, #252	; 0xfc
   1d676:	469b      	mov	fp, r3
   1d678:	e78a      	b.n	1d590 <__aeabi_fdiv+0x38>
   1d67a:	2b03      	cmp	r3, #3
   1d67c:	d100      	bne.n	1d680 <__aeabi_fdiv+0x128>
   1d67e:	e0a5      	b.n	1d7cc <__aeabi_fdiv+0x274>
   1d680:	4655      	mov	r5, sl
   1d682:	2b01      	cmp	r3, #1
   1d684:	d000      	beq.n	1d688 <__aeabi_fdiv+0x130>
   1d686:	e081      	b.n	1d78c <__aeabi_fdiv+0x234>
   1d688:	2301      	movs	r3, #1
   1d68a:	2100      	movs	r1, #0
   1d68c:	2400      	movs	r4, #0
   1d68e:	402b      	ands	r3, r5
   1d690:	0264      	lsls	r4, r4, #9
   1d692:	05c9      	lsls	r1, r1, #23
   1d694:	0a60      	lsrs	r0, r4, #9
   1d696:	07db      	lsls	r3, r3, #31
   1d698:	4308      	orrs	r0, r1
   1d69a:	4318      	orrs	r0, r3
   1d69c:	b003      	add	sp, #12
   1d69e:	bc3c      	pop	{r2, r3, r4, r5}
   1d6a0:	4690      	mov	r8, r2
   1d6a2:	4699      	mov	r9, r3
   1d6a4:	46a2      	mov	sl, r4
   1d6a6:	46ab      	mov	fp, r5
   1d6a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d6aa:	2480      	movs	r4, #128	; 0x80
   1d6ac:	2300      	movs	r3, #0
   1d6ae:	03e4      	lsls	r4, r4, #15
   1d6b0:	21ff      	movs	r1, #255	; 0xff
   1d6b2:	e7ed      	b.n	1d690 <__aeabi_fdiv+0x138>
   1d6b4:	21ff      	movs	r1, #255	; 0xff
   1d6b6:	2400      	movs	r4, #0
   1d6b8:	e7ea      	b.n	1d690 <__aeabi_fdiv+0x138>
   1d6ba:	2301      	movs	r3, #1
   1d6bc:	1a59      	subs	r1, r3, r1
   1d6be:	291b      	cmp	r1, #27
   1d6c0:	dd66      	ble.n	1d790 <__aeabi_fdiv+0x238>
   1d6c2:	9a01      	ldr	r2, [sp, #4]
   1d6c4:	4013      	ands	r3, r2
   1d6c6:	2100      	movs	r1, #0
   1d6c8:	2400      	movs	r4, #0
   1d6ca:	e7e1      	b.n	1d690 <__aeabi_fdiv+0x138>
   1d6cc:	2380      	movs	r3, #128	; 0x80
   1d6ce:	03db      	lsls	r3, r3, #15
   1d6d0:	421c      	tst	r4, r3
   1d6d2:	d038      	beq.n	1d746 <__aeabi_fdiv+0x1ee>
   1d6d4:	421d      	tst	r5, r3
   1d6d6:	d051      	beq.n	1d77c <__aeabi_fdiv+0x224>
   1d6d8:	431c      	orrs	r4, r3
   1d6da:	0264      	lsls	r4, r4, #9
   1d6dc:	0a64      	lsrs	r4, r4, #9
   1d6de:	0033      	movs	r3, r6
   1d6e0:	21ff      	movs	r1, #255	; 0xff
   1d6e2:	e7d5      	b.n	1d690 <__aeabi_fdiv+0x138>
   1d6e4:	0163      	lsls	r3, r4, #5
   1d6e6:	016c      	lsls	r4, r5, #5
   1d6e8:	42a3      	cmp	r3, r4
   1d6ea:	d23b      	bcs.n	1d764 <__aeabi_fdiv+0x20c>
   1d6ec:	261b      	movs	r6, #27
   1d6ee:	2100      	movs	r1, #0
   1d6f0:	3801      	subs	r0, #1
   1d6f2:	2501      	movs	r5, #1
   1d6f4:	001f      	movs	r7, r3
   1d6f6:	0049      	lsls	r1, r1, #1
   1d6f8:	005b      	lsls	r3, r3, #1
   1d6fa:	2f00      	cmp	r7, #0
   1d6fc:	db01      	blt.n	1d702 <__aeabi_fdiv+0x1aa>
   1d6fe:	429c      	cmp	r4, r3
   1d700:	d801      	bhi.n	1d706 <__aeabi_fdiv+0x1ae>
   1d702:	1b1b      	subs	r3, r3, r4
   1d704:	4329      	orrs	r1, r5
   1d706:	3e01      	subs	r6, #1
   1d708:	2e00      	cmp	r6, #0
   1d70a:	d1f3      	bne.n	1d6f4 <__aeabi_fdiv+0x19c>
   1d70c:	001c      	movs	r4, r3
   1d70e:	1e63      	subs	r3, r4, #1
   1d710:	419c      	sbcs	r4, r3
   1d712:	430c      	orrs	r4, r1
   1d714:	0001      	movs	r1, r0
   1d716:	317f      	adds	r1, #127	; 0x7f
   1d718:	2900      	cmp	r1, #0
   1d71a:	ddce      	ble.n	1d6ba <__aeabi_fdiv+0x162>
   1d71c:	0763      	lsls	r3, r4, #29
   1d71e:	d004      	beq.n	1d72a <__aeabi_fdiv+0x1d2>
   1d720:	230f      	movs	r3, #15
   1d722:	4023      	ands	r3, r4
   1d724:	2b04      	cmp	r3, #4
   1d726:	d000      	beq.n	1d72a <__aeabi_fdiv+0x1d2>
   1d728:	3404      	adds	r4, #4
   1d72a:	0123      	lsls	r3, r4, #4
   1d72c:	d503      	bpl.n	1d736 <__aeabi_fdiv+0x1de>
   1d72e:	0001      	movs	r1, r0
   1d730:	4b2c      	ldr	r3, [pc, #176]	; (1d7e4 <__aeabi_fdiv+0x28c>)
   1d732:	3180      	adds	r1, #128	; 0x80
   1d734:	401c      	ands	r4, r3
   1d736:	29fe      	cmp	r1, #254	; 0xfe
   1d738:	dd0d      	ble.n	1d756 <__aeabi_fdiv+0x1fe>
   1d73a:	2301      	movs	r3, #1
   1d73c:	9a01      	ldr	r2, [sp, #4]
   1d73e:	21ff      	movs	r1, #255	; 0xff
   1d740:	4013      	ands	r3, r2
   1d742:	2400      	movs	r4, #0
   1d744:	e7a4      	b.n	1d690 <__aeabi_fdiv+0x138>
   1d746:	2380      	movs	r3, #128	; 0x80
   1d748:	03db      	lsls	r3, r3, #15
   1d74a:	431c      	orrs	r4, r3
   1d74c:	0264      	lsls	r4, r4, #9
   1d74e:	0a64      	lsrs	r4, r4, #9
   1d750:	0033      	movs	r3, r6
   1d752:	21ff      	movs	r1, #255	; 0xff
   1d754:	e79c      	b.n	1d690 <__aeabi_fdiv+0x138>
   1d756:	2301      	movs	r3, #1
   1d758:	9a01      	ldr	r2, [sp, #4]
   1d75a:	01a4      	lsls	r4, r4, #6
   1d75c:	0a64      	lsrs	r4, r4, #9
   1d75e:	b2c9      	uxtb	r1, r1
   1d760:	4013      	ands	r3, r2
   1d762:	e795      	b.n	1d690 <__aeabi_fdiv+0x138>
   1d764:	1b1b      	subs	r3, r3, r4
   1d766:	261a      	movs	r6, #26
   1d768:	2101      	movs	r1, #1
   1d76a:	e7c2      	b.n	1d6f2 <__aeabi_fdiv+0x19a>
   1d76c:	9b00      	ldr	r3, [sp, #0]
   1d76e:	468b      	mov	fp, r1
   1d770:	469a      	mov	sl, r3
   1d772:	2400      	movs	r4, #0
   1d774:	e74c      	b.n	1d610 <__aeabi_fdiv+0xb8>
   1d776:	0263      	lsls	r3, r4, #9
   1d778:	d5e5      	bpl.n	1d746 <__aeabi_fdiv+0x1ee>
   1d77a:	2500      	movs	r5, #0
   1d77c:	2480      	movs	r4, #128	; 0x80
   1d77e:	03e4      	lsls	r4, r4, #15
   1d780:	432c      	orrs	r4, r5
   1d782:	0264      	lsls	r4, r4, #9
   1d784:	0a64      	lsrs	r4, r4, #9
   1d786:	9b00      	ldr	r3, [sp, #0]
   1d788:	21ff      	movs	r1, #255	; 0xff
   1d78a:	e781      	b.n	1d690 <__aeabi_fdiv+0x138>
   1d78c:	9501      	str	r5, [sp, #4]
   1d78e:	e7c1      	b.n	1d714 <__aeabi_fdiv+0x1bc>
   1d790:	0023      	movs	r3, r4
   1d792:	2020      	movs	r0, #32
   1d794:	40cb      	lsrs	r3, r1
   1d796:	1a41      	subs	r1, r0, r1
   1d798:	408c      	lsls	r4, r1
   1d79a:	1e61      	subs	r1, r4, #1
   1d79c:	418c      	sbcs	r4, r1
   1d79e:	431c      	orrs	r4, r3
   1d7a0:	0763      	lsls	r3, r4, #29
   1d7a2:	d004      	beq.n	1d7ae <__aeabi_fdiv+0x256>
   1d7a4:	230f      	movs	r3, #15
   1d7a6:	4023      	ands	r3, r4
   1d7a8:	2b04      	cmp	r3, #4
   1d7aa:	d000      	beq.n	1d7ae <__aeabi_fdiv+0x256>
   1d7ac:	3404      	adds	r4, #4
   1d7ae:	0163      	lsls	r3, r4, #5
   1d7b0:	d505      	bpl.n	1d7be <__aeabi_fdiv+0x266>
   1d7b2:	2301      	movs	r3, #1
   1d7b4:	9a01      	ldr	r2, [sp, #4]
   1d7b6:	2101      	movs	r1, #1
   1d7b8:	4013      	ands	r3, r2
   1d7ba:	2400      	movs	r4, #0
   1d7bc:	e768      	b.n	1d690 <__aeabi_fdiv+0x138>
   1d7be:	2301      	movs	r3, #1
   1d7c0:	9a01      	ldr	r2, [sp, #4]
   1d7c2:	01a4      	lsls	r4, r4, #6
   1d7c4:	0a64      	lsrs	r4, r4, #9
   1d7c6:	4013      	ands	r3, r2
   1d7c8:	2100      	movs	r1, #0
   1d7ca:	e761      	b.n	1d690 <__aeabi_fdiv+0x138>
   1d7cc:	2380      	movs	r3, #128	; 0x80
   1d7ce:	03db      	lsls	r3, r3, #15
   1d7d0:	431c      	orrs	r4, r3
   1d7d2:	0264      	lsls	r4, r4, #9
   1d7d4:	0a64      	lsrs	r4, r4, #9
   1d7d6:	4653      	mov	r3, sl
   1d7d8:	21ff      	movs	r1, #255	; 0xff
   1d7da:	e759      	b.n	1d690 <__aeabi_fdiv+0x138>
   1d7dc:	00026aa0 	.word	0x00026aa0
   1d7e0:	00026ae0 	.word	0x00026ae0
   1d7e4:	f7ffffff 	.word	0xf7ffffff

0001d7e8 <__eqsf2>:
   1d7e8:	b570      	push	{r4, r5, r6, lr}
   1d7ea:	0042      	lsls	r2, r0, #1
   1d7ec:	0245      	lsls	r5, r0, #9
   1d7ee:	024e      	lsls	r6, r1, #9
   1d7f0:	004c      	lsls	r4, r1, #1
   1d7f2:	0fc3      	lsrs	r3, r0, #31
   1d7f4:	0a6d      	lsrs	r5, r5, #9
   1d7f6:	0e12      	lsrs	r2, r2, #24
   1d7f8:	0a76      	lsrs	r6, r6, #9
   1d7fa:	0e24      	lsrs	r4, r4, #24
   1d7fc:	0fc9      	lsrs	r1, r1, #31
   1d7fe:	2001      	movs	r0, #1
   1d800:	2aff      	cmp	r2, #255	; 0xff
   1d802:	d006      	beq.n	1d812 <__eqsf2+0x2a>
   1d804:	2cff      	cmp	r4, #255	; 0xff
   1d806:	d003      	beq.n	1d810 <__eqsf2+0x28>
   1d808:	42a2      	cmp	r2, r4
   1d80a:	d101      	bne.n	1d810 <__eqsf2+0x28>
   1d80c:	42b5      	cmp	r5, r6
   1d80e:	d006      	beq.n	1d81e <__eqsf2+0x36>
   1d810:	bd70      	pop	{r4, r5, r6, pc}
   1d812:	2d00      	cmp	r5, #0
   1d814:	d1fc      	bne.n	1d810 <__eqsf2+0x28>
   1d816:	2cff      	cmp	r4, #255	; 0xff
   1d818:	d1fa      	bne.n	1d810 <__eqsf2+0x28>
   1d81a:	2e00      	cmp	r6, #0
   1d81c:	d1f8      	bne.n	1d810 <__eqsf2+0x28>
   1d81e:	428b      	cmp	r3, r1
   1d820:	d006      	beq.n	1d830 <__eqsf2+0x48>
   1d822:	2001      	movs	r0, #1
   1d824:	2a00      	cmp	r2, #0
   1d826:	d1f3      	bne.n	1d810 <__eqsf2+0x28>
   1d828:	0028      	movs	r0, r5
   1d82a:	1e45      	subs	r5, r0, #1
   1d82c:	41a8      	sbcs	r0, r5
   1d82e:	e7ef      	b.n	1d810 <__eqsf2+0x28>
   1d830:	2000      	movs	r0, #0
   1d832:	e7ed      	b.n	1d810 <__eqsf2+0x28>

0001d834 <__gesf2>:
   1d834:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d836:	0042      	lsls	r2, r0, #1
   1d838:	0245      	lsls	r5, r0, #9
   1d83a:	024c      	lsls	r4, r1, #9
   1d83c:	0fc3      	lsrs	r3, r0, #31
   1d83e:	0048      	lsls	r0, r1, #1
   1d840:	0a6d      	lsrs	r5, r5, #9
   1d842:	0e12      	lsrs	r2, r2, #24
   1d844:	0a64      	lsrs	r4, r4, #9
   1d846:	0e00      	lsrs	r0, r0, #24
   1d848:	0fc9      	lsrs	r1, r1, #31
   1d84a:	2aff      	cmp	r2, #255	; 0xff
   1d84c:	d01e      	beq.n	1d88c <__gesf2+0x58>
   1d84e:	28ff      	cmp	r0, #255	; 0xff
   1d850:	d021      	beq.n	1d896 <__gesf2+0x62>
   1d852:	2a00      	cmp	r2, #0
   1d854:	d10a      	bne.n	1d86c <__gesf2+0x38>
   1d856:	426e      	negs	r6, r5
   1d858:	416e      	adcs	r6, r5
   1d85a:	b2f6      	uxtb	r6, r6
   1d85c:	2800      	cmp	r0, #0
   1d85e:	d10f      	bne.n	1d880 <__gesf2+0x4c>
   1d860:	2c00      	cmp	r4, #0
   1d862:	d10d      	bne.n	1d880 <__gesf2+0x4c>
   1d864:	2000      	movs	r0, #0
   1d866:	2d00      	cmp	r5, #0
   1d868:	d009      	beq.n	1d87e <__gesf2+0x4a>
   1d86a:	e005      	b.n	1d878 <__gesf2+0x44>
   1d86c:	2800      	cmp	r0, #0
   1d86e:	d101      	bne.n	1d874 <__gesf2+0x40>
   1d870:	2c00      	cmp	r4, #0
   1d872:	d001      	beq.n	1d878 <__gesf2+0x44>
   1d874:	428b      	cmp	r3, r1
   1d876:	d011      	beq.n	1d89c <__gesf2+0x68>
   1d878:	2101      	movs	r1, #1
   1d87a:	4258      	negs	r0, r3
   1d87c:	4308      	orrs	r0, r1
   1d87e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d880:	2e00      	cmp	r6, #0
   1d882:	d0f7      	beq.n	1d874 <__gesf2+0x40>
   1d884:	2001      	movs	r0, #1
   1d886:	3901      	subs	r1, #1
   1d888:	4308      	orrs	r0, r1
   1d88a:	e7f8      	b.n	1d87e <__gesf2+0x4a>
   1d88c:	2d00      	cmp	r5, #0
   1d88e:	d0de      	beq.n	1d84e <__gesf2+0x1a>
   1d890:	2002      	movs	r0, #2
   1d892:	4240      	negs	r0, r0
   1d894:	e7f3      	b.n	1d87e <__gesf2+0x4a>
   1d896:	2c00      	cmp	r4, #0
   1d898:	d0db      	beq.n	1d852 <__gesf2+0x1e>
   1d89a:	e7f9      	b.n	1d890 <__gesf2+0x5c>
   1d89c:	4282      	cmp	r2, r0
   1d89e:	dceb      	bgt.n	1d878 <__gesf2+0x44>
   1d8a0:	db04      	blt.n	1d8ac <__gesf2+0x78>
   1d8a2:	42a5      	cmp	r5, r4
   1d8a4:	d8e8      	bhi.n	1d878 <__gesf2+0x44>
   1d8a6:	2000      	movs	r0, #0
   1d8a8:	42a5      	cmp	r5, r4
   1d8aa:	d2e8      	bcs.n	1d87e <__gesf2+0x4a>
   1d8ac:	2101      	movs	r1, #1
   1d8ae:	1e58      	subs	r0, r3, #1
   1d8b0:	4308      	orrs	r0, r1
   1d8b2:	e7e4      	b.n	1d87e <__gesf2+0x4a>

0001d8b4 <__lesf2>:
   1d8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d8b6:	0042      	lsls	r2, r0, #1
   1d8b8:	024d      	lsls	r5, r1, #9
   1d8ba:	004c      	lsls	r4, r1, #1
   1d8bc:	0246      	lsls	r6, r0, #9
   1d8be:	0a76      	lsrs	r6, r6, #9
   1d8c0:	0e12      	lsrs	r2, r2, #24
   1d8c2:	0fc3      	lsrs	r3, r0, #31
   1d8c4:	0a6d      	lsrs	r5, r5, #9
   1d8c6:	0e24      	lsrs	r4, r4, #24
   1d8c8:	0fc9      	lsrs	r1, r1, #31
   1d8ca:	2aff      	cmp	r2, #255	; 0xff
   1d8cc:	d016      	beq.n	1d8fc <__lesf2+0x48>
   1d8ce:	2cff      	cmp	r4, #255	; 0xff
   1d8d0:	d018      	beq.n	1d904 <__lesf2+0x50>
   1d8d2:	2a00      	cmp	r2, #0
   1d8d4:	d10a      	bne.n	1d8ec <__lesf2+0x38>
   1d8d6:	4270      	negs	r0, r6
   1d8d8:	4170      	adcs	r0, r6
   1d8da:	b2c0      	uxtb	r0, r0
   1d8dc:	2c00      	cmp	r4, #0
   1d8de:	d015      	beq.n	1d90c <__lesf2+0x58>
   1d8e0:	2800      	cmp	r0, #0
   1d8e2:	d005      	beq.n	1d8f0 <__lesf2+0x3c>
   1d8e4:	2001      	movs	r0, #1
   1d8e6:	3901      	subs	r1, #1
   1d8e8:	4308      	orrs	r0, r1
   1d8ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d8ec:	2c00      	cmp	r4, #0
   1d8ee:	d013      	beq.n	1d918 <__lesf2+0x64>
   1d8f0:	4299      	cmp	r1, r3
   1d8f2:	d014      	beq.n	1d91e <__lesf2+0x6a>
   1d8f4:	2001      	movs	r0, #1
   1d8f6:	425b      	negs	r3, r3
   1d8f8:	4318      	orrs	r0, r3
   1d8fa:	e7f6      	b.n	1d8ea <__lesf2+0x36>
   1d8fc:	2002      	movs	r0, #2
   1d8fe:	2e00      	cmp	r6, #0
   1d900:	d1f3      	bne.n	1d8ea <__lesf2+0x36>
   1d902:	e7e4      	b.n	1d8ce <__lesf2+0x1a>
   1d904:	2002      	movs	r0, #2
   1d906:	2d00      	cmp	r5, #0
   1d908:	d1ef      	bne.n	1d8ea <__lesf2+0x36>
   1d90a:	e7e2      	b.n	1d8d2 <__lesf2+0x1e>
   1d90c:	2d00      	cmp	r5, #0
   1d90e:	d1e7      	bne.n	1d8e0 <__lesf2+0x2c>
   1d910:	2000      	movs	r0, #0
   1d912:	2e00      	cmp	r6, #0
   1d914:	d0e9      	beq.n	1d8ea <__lesf2+0x36>
   1d916:	e7ed      	b.n	1d8f4 <__lesf2+0x40>
   1d918:	2d00      	cmp	r5, #0
   1d91a:	d1e9      	bne.n	1d8f0 <__lesf2+0x3c>
   1d91c:	e7ea      	b.n	1d8f4 <__lesf2+0x40>
   1d91e:	42a2      	cmp	r2, r4
   1d920:	dc06      	bgt.n	1d930 <__lesf2+0x7c>
   1d922:	dbdf      	blt.n	1d8e4 <__lesf2+0x30>
   1d924:	42ae      	cmp	r6, r5
   1d926:	d803      	bhi.n	1d930 <__lesf2+0x7c>
   1d928:	2000      	movs	r0, #0
   1d92a:	42ae      	cmp	r6, r5
   1d92c:	d3da      	bcc.n	1d8e4 <__lesf2+0x30>
   1d92e:	e7dc      	b.n	1d8ea <__lesf2+0x36>
   1d930:	2001      	movs	r0, #1
   1d932:	4249      	negs	r1, r1
   1d934:	4308      	orrs	r0, r1
   1d936:	e7d8      	b.n	1d8ea <__lesf2+0x36>

0001d938 <__aeabi_fmul>:
   1d938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d93a:	4657      	mov	r7, sl
   1d93c:	464e      	mov	r6, r9
   1d93e:	4645      	mov	r5, r8
   1d940:	46de      	mov	lr, fp
   1d942:	b5e0      	push	{r5, r6, r7, lr}
   1d944:	0247      	lsls	r7, r0, #9
   1d946:	0046      	lsls	r6, r0, #1
   1d948:	4688      	mov	r8, r1
   1d94a:	0a7f      	lsrs	r7, r7, #9
   1d94c:	0e36      	lsrs	r6, r6, #24
   1d94e:	0fc4      	lsrs	r4, r0, #31
   1d950:	2e00      	cmp	r6, #0
   1d952:	d047      	beq.n	1d9e4 <__aeabi_fmul+0xac>
   1d954:	2eff      	cmp	r6, #255	; 0xff
   1d956:	d024      	beq.n	1d9a2 <__aeabi_fmul+0x6a>
   1d958:	00fb      	lsls	r3, r7, #3
   1d95a:	2780      	movs	r7, #128	; 0x80
   1d95c:	04ff      	lsls	r7, r7, #19
   1d95e:	431f      	orrs	r7, r3
   1d960:	2300      	movs	r3, #0
   1d962:	4699      	mov	r9, r3
   1d964:	469a      	mov	sl, r3
   1d966:	3e7f      	subs	r6, #127	; 0x7f
   1d968:	4643      	mov	r3, r8
   1d96a:	025d      	lsls	r5, r3, #9
   1d96c:	0058      	lsls	r0, r3, #1
   1d96e:	0fdb      	lsrs	r3, r3, #31
   1d970:	0a6d      	lsrs	r5, r5, #9
   1d972:	0e00      	lsrs	r0, r0, #24
   1d974:	4698      	mov	r8, r3
   1d976:	d043      	beq.n	1da00 <__aeabi_fmul+0xc8>
   1d978:	28ff      	cmp	r0, #255	; 0xff
   1d97a:	d03b      	beq.n	1d9f4 <__aeabi_fmul+0xbc>
   1d97c:	00eb      	lsls	r3, r5, #3
   1d97e:	2580      	movs	r5, #128	; 0x80
   1d980:	2200      	movs	r2, #0
   1d982:	04ed      	lsls	r5, r5, #19
   1d984:	431d      	orrs	r5, r3
   1d986:	387f      	subs	r0, #127	; 0x7f
   1d988:	1836      	adds	r6, r6, r0
   1d98a:	1c73      	adds	r3, r6, #1
   1d98c:	4641      	mov	r1, r8
   1d98e:	469b      	mov	fp, r3
   1d990:	464b      	mov	r3, r9
   1d992:	4061      	eors	r1, r4
   1d994:	4313      	orrs	r3, r2
   1d996:	2b0f      	cmp	r3, #15
   1d998:	d864      	bhi.n	1da64 <__aeabi_fmul+0x12c>
   1d99a:	4875      	ldr	r0, [pc, #468]	; (1db70 <__aeabi_fmul+0x238>)
   1d99c:	009b      	lsls	r3, r3, #2
   1d99e:	58c3      	ldr	r3, [r0, r3]
   1d9a0:	469f      	mov	pc, r3
   1d9a2:	2f00      	cmp	r7, #0
   1d9a4:	d142      	bne.n	1da2c <__aeabi_fmul+0xf4>
   1d9a6:	2308      	movs	r3, #8
   1d9a8:	4699      	mov	r9, r3
   1d9aa:	3b06      	subs	r3, #6
   1d9ac:	26ff      	movs	r6, #255	; 0xff
   1d9ae:	469a      	mov	sl, r3
   1d9b0:	e7da      	b.n	1d968 <__aeabi_fmul+0x30>
   1d9b2:	4641      	mov	r1, r8
   1d9b4:	2a02      	cmp	r2, #2
   1d9b6:	d028      	beq.n	1da0a <__aeabi_fmul+0xd2>
   1d9b8:	2a03      	cmp	r2, #3
   1d9ba:	d100      	bne.n	1d9be <__aeabi_fmul+0x86>
   1d9bc:	e0ce      	b.n	1db5c <__aeabi_fmul+0x224>
   1d9be:	2a01      	cmp	r2, #1
   1d9c0:	d000      	beq.n	1d9c4 <__aeabi_fmul+0x8c>
   1d9c2:	e0ac      	b.n	1db1e <__aeabi_fmul+0x1e6>
   1d9c4:	4011      	ands	r1, r2
   1d9c6:	2000      	movs	r0, #0
   1d9c8:	2200      	movs	r2, #0
   1d9ca:	b2cc      	uxtb	r4, r1
   1d9cc:	0240      	lsls	r0, r0, #9
   1d9ce:	05d2      	lsls	r2, r2, #23
   1d9d0:	0a40      	lsrs	r0, r0, #9
   1d9d2:	07e4      	lsls	r4, r4, #31
   1d9d4:	4310      	orrs	r0, r2
   1d9d6:	4320      	orrs	r0, r4
   1d9d8:	bc3c      	pop	{r2, r3, r4, r5}
   1d9da:	4690      	mov	r8, r2
   1d9dc:	4699      	mov	r9, r3
   1d9de:	46a2      	mov	sl, r4
   1d9e0:	46ab      	mov	fp, r5
   1d9e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d9e4:	2f00      	cmp	r7, #0
   1d9e6:	d115      	bne.n	1da14 <__aeabi_fmul+0xdc>
   1d9e8:	2304      	movs	r3, #4
   1d9ea:	4699      	mov	r9, r3
   1d9ec:	3b03      	subs	r3, #3
   1d9ee:	2600      	movs	r6, #0
   1d9f0:	469a      	mov	sl, r3
   1d9f2:	e7b9      	b.n	1d968 <__aeabi_fmul+0x30>
   1d9f4:	20ff      	movs	r0, #255	; 0xff
   1d9f6:	2202      	movs	r2, #2
   1d9f8:	2d00      	cmp	r5, #0
   1d9fa:	d0c5      	beq.n	1d988 <__aeabi_fmul+0x50>
   1d9fc:	2203      	movs	r2, #3
   1d9fe:	e7c3      	b.n	1d988 <__aeabi_fmul+0x50>
   1da00:	2d00      	cmp	r5, #0
   1da02:	d119      	bne.n	1da38 <__aeabi_fmul+0x100>
   1da04:	2000      	movs	r0, #0
   1da06:	2201      	movs	r2, #1
   1da08:	e7be      	b.n	1d988 <__aeabi_fmul+0x50>
   1da0a:	2401      	movs	r4, #1
   1da0c:	22ff      	movs	r2, #255	; 0xff
   1da0e:	400c      	ands	r4, r1
   1da10:	2000      	movs	r0, #0
   1da12:	e7db      	b.n	1d9cc <__aeabi_fmul+0x94>
   1da14:	0038      	movs	r0, r7
   1da16:	f7ff fb6f 	bl	1d0f8 <__clzsi2>
   1da1a:	2676      	movs	r6, #118	; 0x76
   1da1c:	1f43      	subs	r3, r0, #5
   1da1e:	409f      	lsls	r7, r3
   1da20:	2300      	movs	r3, #0
   1da22:	4276      	negs	r6, r6
   1da24:	1a36      	subs	r6, r6, r0
   1da26:	4699      	mov	r9, r3
   1da28:	469a      	mov	sl, r3
   1da2a:	e79d      	b.n	1d968 <__aeabi_fmul+0x30>
   1da2c:	230c      	movs	r3, #12
   1da2e:	4699      	mov	r9, r3
   1da30:	3b09      	subs	r3, #9
   1da32:	26ff      	movs	r6, #255	; 0xff
   1da34:	469a      	mov	sl, r3
   1da36:	e797      	b.n	1d968 <__aeabi_fmul+0x30>
   1da38:	0028      	movs	r0, r5
   1da3a:	f7ff fb5d 	bl	1d0f8 <__clzsi2>
   1da3e:	1f43      	subs	r3, r0, #5
   1da40:	409d      	lsls	r5, r3
   1da42:	2376      	movs	r3, #118	; 0x76
   1da44:	425b      	negs	r3, r3
   1da46:	1a18      	subs	r0, r3, r0
   1da48:	2200      	movs	r2, #0
   1da4a:	e79d      	b.n	1d988 <__aeabi_fmul+0x50>
   1da4c:	2080      	movs	r0, #128	; 0x80
   1da4e:	2400      	movs	r4, #0
   1da50:	03c0      	lsls	r0, r0, #15
   1da52:	22ff      	movs	r2, #255	; 0xff
   1da54:	e7ba      	b.n	1d9cc <__aeabi_fmul+0x94>
   1da56:	003d      	movs	r5, r7
   1da58:	4652      	mov	r2, sl
   1da5a:	e7ab      	b.n	1d9b4 <__aeabi_fmul+0x7c>
   1da5c:	003d      	movs	r5, r7
   1da5e:	0021      	movs	r1, r4
   1da60:	4652      	mov	r2, sl
   1da62:	e7a7      	b.n	1d9b4 <__aeabi_fmul+0x7c>
   1da64:	0c3b      	lsrs	r3, r7, #16
   1da66:	469c      	mov	ip, r3
   1da68:	042a      	lsls	r2, r5, #16
   1da6a:	0c12      	lsrs	r2, r2, #16
   1da6c:	0c2b      	lsrs	r3, r5, #16
   1da6e:	0014      	movs	r4, r2
   1da70:	4660      	mov	r0, ip
   1da72:	4665      	mov	r5, ip
   1da74:	043f      	lsls	r7, r7, #16
   1da76:	0c3f      	lsrs	r7, r7, #16
   1da78:	437c      	muls	r4, r7
   1da7a:	4342      	muls	r2, r0
   1da7c:	435d      	muls	r5, r3
   1da7e:	437b      	muls	r3, r7
   1da80:	0c27      	lsrs	r7, r4, #16
   1da82:	189b      	adds	r3, r3, r2
   1da84:	18ff      	adds	r7, r7, r3
   1da86:	42ba      	cmp	r2, r7
   1da88:	d903      	bls.n	1da92 <__aeabi_fmul+0x15a>
   1da8a:	2380      	movs	r3, #128	; 0x80
   1da8c:	025b      	lsls	r3, r3, #9
   1da8e:	469c      	mov	ip, r3
   1da90:	4465      	add	r5, ip
   1da92:	0424      	lsls	r4, r4, #16
   1da94:	043a      	lsls	r2, r7, #16
   1da96:	0c24      	lsrs	r4, r4, #16
   1da98:	1912      	adds	r2, r2, r4
   1da9a:	0193      	lsls	r3, r2, #6
   1da9c:	1e5c      	subs	r4, r3, #1
   1da9e:	41a3      	sbcs	r3, r4
   1daa0:	0c3f      	lsrs	r7, r7, #16
   1daa2:	0e92      	lsrs	r2, r2, #26
   1daa4:	197d      	adds	r5, r7, r5
   1daa6:	431a      	orrs	r2, r3
   1daa8:	01ad      	lsls	r5, r5, #6
   1daaa:	4315      	orrs	r5, r2
   1daac:	012b      	lsls	r3, r5, #4
   1daae:	d504      	bpl.n	1daba <__aeabi_fmul+0x182>
   1dab0:	2301      	movs	r3, #1
   1dab2:	465e      	mov	r6, fp
   1dab4:	086a      	lsrs	r2, r5, #1
   1dab6:	401d      	ands	r5, r3
   1dab8:	4315      	orrs	r5, r2
   1daba:	0032      	movs	r2, r6
   1dabc:	327f      	adds	r2, #127	; 0x7f
   1dabe:	2a00      	cmp	r2, #0
   1dac0:	dd25      	ble.n	1db0e <__aeabi_fmul+0x1d6>
   1dac2:	076b      	lsls	r3, r5, #29
   1dac4:	d004      	beq.n	1dad0 <__aeabi_fmul+0x198>
   1dac6:	230f      	movs	r3, #15
   1dac8:	402b      	ands	r3, r5
   1daca:	2b04      	cmp	r3, #4
   1dacc:	d000      	beq.n	1dad0 <__aeabi_fmul+0x198>
   1dace:	3504      	adds	r5, #4
   1dad0:	012b      	lsls	r3, r5, #4
   1dad2:	d503      	bpl.n	1dadc <__aeabi_fmul+0x1a4>
   1dad4:	0032      	movs	r2, r6
   1dad6:	4b27      	ldr	r3, [pc, #156]	; (1db74 <__aeabi_fmul+0x23c>)
   1dad8:	3280      	adds	r2, #128	; 0x80
   1dada:	401d      	ands	r5, r3
   1dadc:	2afe      	cmp	r2, #254	; 0xfe
   1dade:	dc94      	bgt.n	1da0a <__aeabi_fmul+0xd2>
   1dae0:	2401      	movs	r4, #1
   1dae2:	01a8      	lsls	r0, r5, #6
   1dae4:	0a40      	lsrs	r0, r0, #9
   1dae6:	b2d2      	uxtb	r2, r2
   1dae8:	400c      	ands	r4, r1
   1daea:	e76f      	b.n	1d9cc <__aeabi_fmul+0x94>
   1daec:	2080      	movs	r0, #128	; 0x80
   1daee:	03c0      	lsls	r0, r0, #15
   1daf0:	4207      	tst	r7, r0
   1daf2:	d007      	beq.n	1db04 <__aeabi_fmul+0x1cc>
   1daf4:	4205      	tst	r5, r0
   1daf6:	d105      	bne.n	1db04 <__aeabi_fmul+0x1cc>
   1daf8:	4328      	orrs	r0, r5
   1dafa:	0240      	lsls	r0, r0, #9
   1dafc:	0a40      	lsrs	r0, r0, #9
   1dafe:	4644      	mov	r4, r8
   1db00:	22ff      	movs	r2, #255	; 0xff
   1db02:	e763      	b.n	1d9cc <__aeabi_fmul+0x94>
   1db04:	4338      	orrs	r0, r7
   1db06:	0240      	lsls	r0, r0, #9
   1db08:	0a40      	lsrs	r0, r0, #9
   1db0a:	22ff      	movs	r2, #255	; 0xff
   1db0c:	e75e      	b.n	1d9cc <__aeabi_fmul+0x94>
   1db0e:	2401      	movs	r4, #1
   1db10:	1aa3      	subs	r3, r4, r2
   1db12:	2b1b      	cmp	r3, #27
   1db14:	dd05      	ble.n	1db22 <__aeabi_fmul+0x1ea>
   1db16:	400c      	ands	r4, r1
   1db18:	2200      	movs	r2, #0
   1db1a:	2000      	movs	r0, #0
   1db1c:	e756      	b.n	1d9cc <__aeabi_fmul+0x94>
   1db1e:	465e      	mov	r6, fp
   1db20:	e7cb      	b.n	1daba <__aeabi_fmul+0x182>
   1db22:	002a      	movs	r2, r5
   1db24:	2020      	movs	r0, #32
   1db26:	40da      	lsrs	r2, r3
   1db28:	1ac3      	subs	r3, r0, r3
   1db2a:	409d      	lsls	r5, r3
   1db2c:	002b      	movs	r3, r5
   1db2e:	1e5d      	subs	r5, r3, #1
   1db30:	41ab      	sbcs	r3, r5
   1db32:	4313      	orrs	r3, r2
   1db34:	075a      	lsls	r2, r3, #29
   1db36:	d004      	beq.n	1db42 <__aeabi_fmul+0x20a>
   1db38:	220f      	movs	r2, #15
   1db3a:	401a      	ands	r2, r3
   1db3c:	2a04      	cmp	r2, #4
   1db3e:	d000      	beq.n	1db42 <__aeabi_fmul+0x20a>
   1db40:	3304      	adds	r3, #4
   1db42:	015a      	lsls	r2, r3, #5
   1db44:	d504      	bpl.n	1db50 <__aeabi_fmul+0x218>
   1db46:	2401      	movs	r4, #1
   1db48:	2201      	movs	r2, #1
   1db4a:	400c      	ands	r4, r1
   1db4c:	2000      	movs	r0, #0
   1db4e:	e73d      	b.n	1d9cc <__aeabi_fmul+0x94>
   1db50:	2401      	movs	r4, #1
   1db52:	019b      	lsls	r3, r3, #6
   1db54:	0a58      	lsrs	r0, r3, #9
   1db56:	400c      	ands	r4, r1
   1db58:	2200      	movs	r2, #0
   1db5a:	e737      	b.n	1d9cc <__aeabi_fmul+0x94>
   1db5c:	2080      	movs	r0, #128	; 0x80
   1db5e:	2401      	movs	r4, #1
   1db60:	03c0      	lsls	r0, r0, #15
   1db62:	4328      	orrs	r0, r5
   1db64:	0240      	lsls	r0, r0, #9
   1db66:	0a40      	lsrs	r0, r0, #9
   1db68:	400c      	ands	r4, r1
   1db6a:	22ff      	movs	r2, #255	; 0xff
   1db6c:	e72e      	b.n	1d9cc <__aeabi_fmul+0x94>
   1db6e:	46c0      	nop			; (mov r8, r8)
   1db70:	00026b20 	.word	0x00026b20
   1db74:	f7ffffff 	.word	0xf7ffffff

0001db78 <__aeabi_fsub>:
   1db78:	b5f0      	push	{r4, r5, r6, r7, lr}
   1db7a:	464f      	mov	r7, r9
   1db7c:	46d6      	mov	lr, sl
   1db7e:	4646      	mov	r6, r8
   1db80:	0044      	lsls	r4, r0, #1
   1db82:	b5c0      	push	{r6, r7, lr}
   1db84:	0fc2      	lsrs	r2, r0, #31
   1db86:	0247      	lsls	r7, r0, #9
   1db88:	0248      	lsls	r0, r1, #9
   1db8a:	0a40      	lsrs	r0, r0, #9
   1db8c:	4684      	mov	ip, r0
   1db8e:	4666      	mov	r6, ip
   1db90:	0a7b      	lsrs	r3, r7, #9
   1db92:	0048      	lsls	r0, r1, #1
   1db94:	0fc9      	lsrs	r1, r1, #31
   1db96:	469a      	mov	sl, r3
   1db98:	0e24      	lsrs	r4, r4, #24
   1db9a:	0015      	movs	r5, r2
   1db9c:	00db      	lsls	r3, r3, #3
   1db9e:	0e00      	lsrs	r0, r0, #24
   1dba0:	4689      	mov	r9, r1
   1dba2:	00f6      	lsls	r6, r6, #3
   1dba4:	28ff      	cmp	r0, #255	; 0xff
   1dba6:	d100      	bne.n	1dbaa <__aeabi_fsub+0x32>
   1dba8:	e08f      	b.n	1dcca <__aeabi_fsub+0x152>
   1dbaa:	2101      	movs	r1, #1
   1dbac:	464f      	mov	r7, r9
   1dbae:	404f      	eors	r7, r1
   1dbb0:	0039      	movs	r1, r7
   1dbb2:	4291      	cmp	r1, r2
   1dbb4:	d066      	beq.n	1dc84 <__aeabi_fsub+0x10c>
   1dbb6:	1a22      	subs	r2, r4, r0
   1dbb8:	2a00      	cmp	r2, #0
   1dbba:	dc00      	bgt.n	1dbbe <__aeabi_fsub+0x46>
   1dbbc:	e09d      	b.n	1dcfa <__aeabi_fsub+0x182>
   1dbbe:	2800      	cmp	r0, #0
   1dbc0:	d13d      	bne.n	1dc3e <__aeabi_fsub+0xc6>
   1dbc2:	2e00      	cmp	r6, #0
   1dbc4:	d100      	bne.n	1dbc8 <__aeabi_fsub+0x50>
   1dbc6:	e08b      	b.n	1dce0 <__aeabi_fsub+0x168>
   1dbc8:	1e51      	subs	r1, r2, #1
   1dbca:	2900      	cmp	r1, #0
   1dbcc:	d000      	beq.n	1dbd0 <__aeabi_fsub+0x58>
   1dbce:	e0b5      	b.n	1dd3c <__aeabi_fsub+0x1c4>
   1dbd0:	2401      	movs	r4, #1
   1dbd2:	1b9b      	subs	r3, r3, r6
   1dbd4:	015a      	lsls	r2, r3, #5
   1dbd6:	d544      	bpl.n	1dc62 <__aeabi_fsub+0xea>
   1dbd8:	019b      	lsls	r3, r3, #6
   1dbda:	099f      	lsrs	r7, r3, #6
   1dbdc:	0038      	movs	r0, r7
   1dbde:	f7ff fa8b 	bl	1d0f8 <__clzsi2>
   1dbe2:	3805      	subs	r0, #5
   1dbe4:	4087      	lsls	r7, r0
   1dbe6:	4284      	cmp	r4, r0
   1dbe8:	dd00      	ble.n	1dbec <__aeabi_fsub+0x74>
   1dbea:	e096      	b.n	1dd1a <__aeabi_fsub+0x1a2>
   1dbec:	1b04      	subs	r4, r0, r4
   1dbee:	003a      	movs	r2, r7
   1dbf0:	2020      	movs	r0, #32
   1dbf2:	3401      	adds	r4, #1
   1dbf4:	40e2      	lsrs	r2, r4
   1dbf6:	1b04      	subs	r4, r0, r4
   1dbf8:	40a7      	lsls	r7, r4
   1dbfa:	003b      	movs	r3, r7
   1dbfc:	1e5f      	subs	r7, r3, #1
   1dbfe:	41bb      	sbcs	r3, r7
   1dc00:	2400      	movs	r4, #0
   1dc02:	4313      	orrs	r3, r2
   1dc04:	075a      	lsls	r2, r3, #29
   1dc06:	d004      	beq.n	1dc12 <__aeabi_fsub+0x9a>
   1dc08:	220f      	movs	r2, #15
   1dc0a:	401a      	ands	r2, r3
   1dc0c:	2a04      	cmp	r2, #4
   1dc0e:	d000      	beq.n	1dc12 <__aeabi_fsub+0x9a>
   1dc10:	3304      	adds	r3, #4
   1dc12:	015a      	lsls	r2, r3, #5
   1dc14:	d527      	bpl.n	1dc66 <__aeabi_fsub+0xee>
   1dc16:	3401      	adds	r4, #1
   1dc18:	2cff      	cmp	r4, #255	; 0xff
   1dc1a:	d100      	bne.n	1dc1e <__aeabi_fsub+0xa6>
   1dc1c:	e079      	b.n	1dd12 <__aeabi_fsub+0x19a>
   1dc1e:	2201      	movs	r2, #1
   1dc20:	019b      	lsls	r3, r3, #6
   1dc22:	0a5b      	lsrs	r3, r3, #9
   1dc24:	b2e4      	uxtb	r4, r4
   1dc26:	402a      	ands	r2, r5
   1dc28:	025b      	lsls	r3, r3, #9
   1dc2a:	05e4      	lsls	r4, r4, #23
   1dc2c:	0a58      	lsrs	r0, r3, #9
   1dc2e:	07d2      	lsls	r2, r2, #31
   1dc30:	4320      	orrs	r0, r4
   1dc32:	4310      	orrs	r0, r2
   1dc34:	bc1c      	pop	{r2, r3, r4}
   1dc36:	4690      	mov	r8, r2
   1dc38:	4699      	mov	r9, r3
   1dc3a:	46a2      	mov	sl, r4
   1dc3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dc3e:	2cff      	cmp	r4, #255	; 0xff
   1dc40:	d0e0      	beq.n	1dc04 <__aeabi_fsub+0x8c>
   1dc42:	2180      	movs	r1, #128	; 0x80
   1dc44:	04c9      	lsls	r1, r1, #19
   1dc46:	430e      	orrs	r6, r1
   1dc48:	2a1b      	cmp	r2, #27
   1dc4a:	dc7b      	bgt.n	1dd44 <__aeabi_fsub+0x1cc>
   1dc4c:	0031      	movs	r1, r6
   1dc4e:	2020      	movs	r0, #32
   1dc50:	40d1      	lsrs	r1, r2
   1dc52:	1a82      	subs	r2, r0, r2
   1dc54:	4096      	lsls	r6, r2
   1dc56:	1e72      	subs	r2, r6, #1
   1dc58:	4196      	sbcs	r6, r2
   1dc5a:	430e      	orrs	r6, r1
   1dc5c:	1b9b      	subs	r3, r3, r6
   1dc5e:	015a      	lsls	r2, r3, #5
   1dc60:	d4ba      	bmi.n	1dbd8 <__aeabi_fsub+0x60>
   1dc62:	075a      	lsls	r2, r3, #29
   1dc64:	d1d0      	bne.n	1dc08 <__aeabi_fsub+0x90>
   1dc66:	2201      	movs	r2, #1
   1dc68:	08df      	lsrs	r7, r3, #3
   1dc6a:	402a      	ands	r2, r5
   1dc6c:	2cff      	cmp	r4, #255	; 0xff
   1dc6e:	d133      	bne.n	1dcd8 <__aeabi_fsub+0x160>
   1dc70:	2f00      	cmp	r7, #0
   1dc72:	d100      	bne.n	1dc76 <__aeabi_fsub+0xfe>
   1dc74:	e0a8      	b.n	1ddc8 <__aeabi_fsub+0x250>
   1dc76:	2380      	movs	r3, #128	; 0x80
   1dc78:	03db      	lsls	r3, r3, #15
   1dc7a:	433b      	orrs	r3, r7
   1dc7c:	025b      	lsls	r3, r3, #9
   1dc7e:	0a5b      	lsrs	r3, r3, #9
   1dc80:	24ff      	movs	r4, #255	; 0xff
   1dc82:	e7d1      	b.n	1dc28 <__aeabi_fsub+0xb0>
   1dc84:	1a21      	subs	r1, r4, r0
   1dc86:	2900      	cmp	r1, #0
   1dc88:	dd4c      	ble.n	1dd24 <__aeabi_fsub+0x1ac>
   1dc8a:	2800      	cmp	r0, #0
   1dc8c:	d02a      	beq.n	1dce4 <__aeabi_fsub+0x16c>
   1dc8e:	2cff      	cmp	r4, #255	; 0xff
   1dc90:	d0b8      	beq.n	1dc04 <__aeabi_fsub+0x8c>
   1dc92:	2080      	movs	r0, #128	; 0x80
   1dc94:	04c0      	lsls	r0, r0, #19
   1dc96:	4306      	orrs	r6, r0
   1dc98:	291b      	cmp	r1, #27
   1dc9a:	dd00      	ble.n	1dc9e <__aeabi_fsub+0x126>
   1dc9c:	e0af      	b.n	1ddfe <__aeabi_fsub+0x286>
   1dc9e:	0030      	movs	r0, r6
   1dca0:	2720      	movs	r7, #32
   1dca2:	40c8      	lsrs	r0, r1
   1dca4:	1a79      	subs	r1, r7, r1
   1dca6:	408e      	lsls	r6, r1
   1dca8:	1e71      	subs	r1, r6, #1
   1dcaa:	418e      	sbcs	r6, r1
   1dcac:	4306      	orrs	r6, r0
   1dcae:	199b      	adds	r3, r3, r6
   1dcb0:	0159      	lsls	r1, r3, #5
   1dcb2:	d5d6      	bpl.n	1dc62 <__aeabi_fsub+0xea>
   1dcb4:	3401      	adds	r4, #1
   1dcb6:	2cff      	cmp	r4, #255	; 0xff
   1dcb8:	d100      	bne.n	1dcbc <__aeabi_fsub+0x144>
   1dcba:	e085      	b.n	1ddc8 <__aeabi_fsub+0x250>
   1dcbc:	2201      	movs	r2, #1
   1dcbe:	497a      	ldr	r1, [pc, #488]	; (1dea8 <__aeabi_fsub+0x330>)
   1dcc0:	401a      	ands	r2, r3
   1dcc2:	085b      	lsrs	r3, r3, #1
   1dcc4:	400b      	ands	r3, r1
   1dcc6:	4313      	orrs	r3, r2
   1dcc8:	e79c      	b.n	1dc04 <__aeabi_fsub+0x8c>
   1dcca:	2e00      	cmp	r6, #0
   1dccc:	d000      	beq.n	1dcd0 <__aeabi_fsub+0x158>
   1dcce:	e770      	b.n	1dbb2 <__aeabi_fsub+0x3a>
   1dcd0:	e76b      	b.n	1dbaa <__aeabi_fsub+0x32>
   1dcd2:	1e3b      	subs	r3, r7, #0
   1dcd4:	d1c5      	bne.n	1dc62 <__aeabi_fsub+0xea>
   1dcd6:	2200      	movs	r2, #0
   1dcd8:	027b      	lsls	r3, r7, #9
   1dcda:	0a5b      	lsrs	r3, r3, #9
   1dcdc:	b2e4      	uxtb	r4, r4
   1dcde:	e7a3      	b.n	1dc28 <__aeabi_fsub+0xb0>
   1dce0:	0014      	movs	r4, r2
   1dce2:	e78f      	b.n	1dc04 <__aeabi_fsub+0x8c>
   1dce4:	2e00      	cmp	r6, #0
   1dce6:	d04d      	beq.n	1dd84 <__aeabi_fsub+0x20c>
   1dce8:	1e48      	subs	r0, r1, #1
   1dcea:	2800      	cmp	r0, #0
   1dcec:	d157      	bne.n	1dd9e <__aeabi_fsub+0x226>
   1dcee:	199b      	adds	r3, r3, r6
   1dcf0:	2401      	movs	r4, #1
   1dcf2:	015a      	lsls	r2, r3, #5
   1dcf4:	d5b5      	bpl.n	1dc62 <__aeabi_fsub+0xea>
   1dcf6:	2402      	movs	r4, #2
   1dcf8:	e7e0      	b.n	1dcbc <__aeabi_fsub+0x144>
   1dcfa:	2a00      	cmp	r2, #0
   1dcfc:	d125      	bne.n	1dd4a <__aeabi_fsub+0x1d2>
   1dcfe:	1c62      	adds	r2, r4, #1
   1dd00:	b2d2      	uxtb	r2, r2
   1dd02:	2a01      	cmp	r2, #1
   1dd04:	dd72      	ble.n	1ddec <__aeabi_fsub+0x274>
   1dd06:	1b9f      	subs	r7, r3, r6
   1dd08:	017a      	lsls	r2, r7, #5
   1dd0a:	d535      	bpl.n	1dd78 <__aeabi_fsub+0x200>
   1dd0c:	1af7      	subs	r7, r6, r3
   1dd0e:	000d      	movs	r5, r1
   1dd10:	e764      	b.n	1dbdc <__aeabi_fsub+0x64>
   1dd12:	2201      	movs	r2, #1
   1dd14:	2300      	movs	r3, #0
   1dd16:	402a      	ands	r2, r5
   1dd18:	e786      	b.n	1dc28 <__aeabi_fsub+0xb0>
   1dd1a:	003b      	movs	r3, r7
   1dd1c:	4a63      	ldr	r2, [pc, #396]	; (1deac <__aeabi_fsub+0x334>)
   1dd1e:	1a24      	subs	r4, r4, r0
   1dd20:	4013      	ands	r3, r2
   1dd22:	e76f      	b.n	1dc04 <__aeabi_fsub+0x8c>
   1dd24:	2900      	cmp	r1, #0
   1dd26:	d16c      	bne.n	1de02 <__aeabi_fsub+0x28a>
   1dd28:	1c61      	adds	r1, r4, #1
   1dd2a:	b2c8      	uxtb	r0, r1
   1dd2c:	2801      	cmp	r0, #1
   1dd2e:	dd4e      	ble.n	1ddce <__aeabi_fsub+0x256>
   1dd30:	29ff      	cmp	r1, #255	; 0xff
   1dd32:	d049      	beq.n	1ddc8 <__aeabi_fsub+0x250>
   1dd34:	199b      	adds	r3, r3, r6
   1dd36:	085b      	lsrs	r3, r3, #1
   1dd38:	000c      	movs	r4, r1
   1dd3a:	e763      	b.n	1dc04 <__aeabi_fsub+0x8c>
   1dd3c:	2aff      	cmp	r2, #255	; 0xff
   1dd3e:	d041      	beq.n	1ddc4 <__aeabi_fsub+0x24c>
   1dd40:	000a      	movs	r2, r1
   1dd42:	e781      	b.n	1dc48 <__aeabi_fsub+0xd0>
   1dd44:	2601      	movs	r6, #1
   1dd46:	1b9b      	subs	r3, r3, r6
   1dd48:	e789      	b.n	1dc5e <__aeabi_fsub+0xe6>
   1dd4a:	2c00      	cmp	r4, #0
   1dd4c:	d01c      	beq.n	1dd88 <__aeabi_fsub+0x210>
   1dd4e:	28ff      	cmp	r0, #255	; 0xff
   1dd50:	d021      	beq.n	1dd96 <__aeabi_fsub+0x21e>
   1dd52:	2480      	movs	r4, #128	; 0x80
   1dd54:	04e4      	lsls	r4, r4, #19
   1dd56:	4252      	negs	r2, r2
   1dd58:	4323      	orrs	r3, r4
   1dd5a:	2a1b      	cmp	r2, #27
   1dd5c:	dd00      	ble.n	1dd60 <__aeabi_fsub+0x1e8>
   1dd5e:	e096      	b.n	1de8e <__aeabi_fsub+0x316>
   1dd60:	001c      	movs	r4, r3
   1dd62:	2520      	movs	r5, #32
   1dd64:	40d4      	lsrs	r4, r2
   1dd66:	1aaa      	subs	r2, r5, r2
   1dd68:	4093      	lsls	r3, r2
   1dd6a:	1e5a      	subs	r2, r3, #1
   1dd6c:	4193      	sbcs	r3, r2
   1dd6e:	4323      	orrs	r3, r4
   1dd70:	1af3      	subs	r3, r6, r3
   1dd72:	0004      	movs	r4, r0
   1dd74:	000d      	movs	r5, r1
   1dd76:	e72d      	b.n	1dbd4 <__aeabi_fsub+0x5c>
   1dd78:	2f00      	cmp	r7, #0
   1dd7a:	d000      	beq.n	1dd7e <__aeabi_fsub+0x206>
   1dd7c:	e72e      	b.n	1dbdc <__aeabi_fsub+0x64>
   1dd7e:	2200      	movs	r2, #0
   1dd80:	2400      	movs	r4, #0
   1dd82:	e7a9      	b.n	1dcd8 <__aeabi_fsub+0x160>
   1dd84:	000c      	movs	r4, r1
   1dd86:	e73d      	b.n	1dc04 <__aeabi_fsub+0x8c>
   1dd88:	2b00      	cmp	r3, #0
   1dd8a:	d058      	beq.n	1de3e <__aeabi_fsub+0x2c6>
   1dd8c:	43d2      	mvns	r2, r2
   1dd8e:	2a00      	cmp	r2, #0
   1dd90:	d0ee      	beq.n	1dd70 <__aeabi_fsub+0x1f8>
   1dd92:	28ff      	cmp	r0, #255	; 0xff
   1dd94:	d1e1      	bne.n	1dd5a <__aeabi_fsub+0x1e2>
   1dd96:	0033      	movs	r3, r6
   1dd98:	24ff      	movs	r4, #255	; 0xff
   1dd9a:	000d      	movs	r5, r1
   1dd9c:	e732      	b.n	1dc04 <__aeabi_fsub+0x8c>
   1dd9e:	29ff      	cmp	r1, #255	; 0xff
   1dda0:	d010      	beq.n	1ddc4 <__aeabi_fsub+0x24c>
   1dda2:	0001      	movs	r1, r0
   1dda4:	e778      	b.n	1dc98 <__aeabi_fsub+0x120>
   1dda6:	2b00      	cmp	r3, #0
   1dda8:	d06e      	beq.n	1de88 <__aeabi_fsub+0x310>
   1ddaa:	24ff      	movs	r4, #255	; 0xff
   1ddac:	2e00      	cmp	r6, #0
   1ddae:	d100      	bne.n	1ddb2 <__aeabi_fsub+0x23a>
   1ddb0:	e728      	b.n	1dc04 <__aeabi_fsub+0x8c>
   1ddb2:	2280      	movs	r2, #128	; 0x80
   1ddb4:	4651      	mov	r1, sl
   1ddb6:	03d2      	lsls	r2, r2, #15
   1ddb8:	4211      	tst	r1, r2
   1ddba:	d003      	beq.n	1ddc4 <__aeabi_fsub+0x24c>
   1ddbc:	4661      	mov	r1, ip
   1ddbe:	4211      	tst	r1, r2
   1ddc0:	d100      	bne.n	1ddc4 <__aeabi_fsub+0x24c>
   1ddc2:	0033      	movs	r3, r6
   1ddc4:	24ff      	movs	r4, #255	; 0xff
   1ddc6:	e71d      	b.n	1dc04 <__aeabi_fsub+0x8c>
   1ddc8:	24ff      	movs	r4, #255	; 0xff
   1ddca:	2300      	movs	r3, #0
   1ddcc:	e72c      	b.n	1dc28 <__aeabi_fsub+0xb0>
   1ddce:	2c00      	cmp	r4, #0
   1ddd0:	d1e9      	bne.n	1dda6 <__aeabi_fsub+0x22e>
   1ddd2:	2b00      	cmp	r3, #0
   1ddd4:	d063      	beq.n	1de9e <__aeabi_fsub+0x326>
   1ddd6:	2e00      	cmp	r6, #0
   1ddd8:	d100      	bne.n	1dddc <__aeabi_fsub+0x264>
   1ddda:	e713      	b.n	1dc04 <__aeabi_fsub+0x8c>
   1dddc:	199b      	adds	r3, r3, r6
   1ddde:	015a      	lsls	r2, r3, #5
   1dde0:	d400      	bmi.n	1dde4 <__aeabi_fsub+0x26c>
   1dde2:	e73e      	b.n	1dc62 <__aeabi_fsub+0xea>
   1dde4:	4a31      	ldr	r2, [pc, #196]	; (1deac <__aeabi_fsub+0x334>)
   1dde6:	000c      	movs	r4, r1
   1dde8:	4013      	ands	r3, r2
   1ddea:	e70b      	b.n	1dc04 <__aeabi_fsub+0x8c>
   1ddec:	2c00      	cmp	r4, #0
   1ddee:	d11e      	bne.n	1de2e <__aeabi_fsub+0x2b6>
   1ddf0:	2b00      	cmp	r3, #0
   1ddf2:	d12f      	bne.n	1de54 <__aeabi_fsub+0x2dc>
   1ddf4:	2e00      	cmp	r6, #0
   1ddf6:	d04f      	beq.n	1de98 <__aeabi_fsub+0x320>
   1ddf8:	0033      	movs	r3, r6
   1ddfa:	000d      	movs	r5, r1
   1ddfc:	e702      	b.n	1dc04 <__aeabi_fsub+0x8c>
   1ddfe:	2601      	movs	r6, #1
   1de00:	e755      	b.n	1dcae <__aeabi_fsub+0x136>
   1de02:	2c00      	cmp	r4, #0
   1de04:	d11f      	bne.n	1de46 <__aeabi_fsub+0x2ce>
   1de06:	2b00      	cmp	r3, #0
   1de08:	d043      	beq.n	1de92 <__aeabi_fsub+0x31a>
   1de0a:	43c9      	mvns	r1, r1
   1de0c:	2900      	cmp	r1, #0
   1de0e:	d00b      	beq.n	1de28 <__aeabi_fsub+0x2b0>
   1de10:	28ff      	cmp	r0, #255	; 0xff
   1de12:	d039      	beq.n	1de88 <__aeabi_fsub+0x310>
   1de14:	291b      	cmp	r1, #27
   1de16:	dc44      	bgt.n	1dea2 <__aeabi_fsub+0x32a>
   1de18:	001c      	movs	r4, r3
   1de1a:	2720      	movs	r7, #32
   1de1c:	40cc      	lsrs	r4, r1
   1de1e:	1a79      	subs	r1, r7, r1
   1de20:	408b      	lsls	r3, r1
   1de22:	1e59      	subs	r1, r3, #1
   1de24:	418b      	sbcs	r3, r1
   1de26:	4323      	orrs	r3, r4
   1de28:	199b      	adds	r3, r3, r6
   1de2a:	0004      	movs	r4, r0
   1de2c:	e740      	b.n	1dcb0 <__aeabi_fsub+0x138>
   1de2e:	2b00      	cmp	r3, #0
   1de30:	d11a      	bne.n	1de68 <__aeabi_fsub+0x2f0>
   1de32:	2e00      	cmp	r6, #0
   1de34:	d124      	bne.n	1de80 <__aeabi_fsub+0x308>
   1de36:	2780      	movs	r7, #128	; 0x80
   1de38:	2200      	movs	r2, #0
   1de3a:	03ff      	lsls	r7, r7, #15
   1de3c:	e71b      	b.n	1dc76 <__aeabi_fsub+0xfe>
   1de3e:	0033      	movs	r3, r6
   1de40:	0004      	movs	r4, r0
   1de42:	000d      	movs	r5, r1
   1de44:	e6de      	b.n	1dc04 <__aeabi_fsub+0x8c>
   1de46:	28ff      	cmp	r0, #255	; 0xff
   1de48:	d01e      	beq.n	1de88 <__aeabi_fsub+0x310>
   1de4a:	2480      	movs	r4, #128	; 0x80
   1de4c:	04e4      	lsls	r4, r4, #19
   1de4e:	4249      	negs	r1, r1
   1de50:	4323      	orrs	r3, r4
   1de52:	e7df      	b.n	1de14 <__aeabi_fsub+0x29c>
   1de54:	2e00      	cmp	r6, #0
   1de56:	d100      	bne.n	1de5a <__aeabi_fsub+0x2e2>
   1de58:	e6d4      	b.n	1dc04 <__aeabi_fsub+0x8c>
   1de5a:	1b9f      	subs	r7, r3, r6
   1de5c:	017a      	lsls	r2, r7, #5
   1de5e:	d400      	bmi.n	1de62 <__aeabi_fsub+0x2ea>
   1de60:	e737      	b.n	1dcd2 <__aeabi_fsub+0x15a>
   1de62:	1af3      	subs	r3, r6, r3
   1de64:	000d      	movs	r5, r1
   1de66:	e6cd      	b.n	1dc04 <__aeabi_fsub+0x8c>
   1de68:	24ff      	movs	r4, #255	; 0xff
   1de6a:	2e00      	cmp	r6, #0
   1de6c:	d100      	bne.n	1de70 <__aeabi_fsub+0x2f8>
   1de6e:	e6c9      	b.n	1dc04 <__aeabi_fsub+0x8c>
   1de70:	2280      	movs	r2, #128	; 0x80
   1de72:	4650      	mov	r0, sl
   1de74:	03d2      	lsls	r2, r2, #15
   1de76:	4210      	tst	r0, r2
   1de78:	d0a4      	beq.n	1ddc4 <__aeabi_fsub+0x24c>
   1de7a:	4660      	mov	r0, ip
   1de7c:	4210      	tst	r0, r2
   1de7e:	d1a1      	bne.n	1ddc4 <__aeabi_fsub+0x24c>
   1de80:	0033      	movs	r3, r6
   1de82:	000d      	movs	r5, r1
   1de84:	24ff      	movs	r4, #255	; 0xff
   1de86:	e6bd      	b.n	1dc04 <__aeabi_fsub+0x8c>
   1de88:	0033      	movs	r3, r6
   1de8a:	24ff      	movs	r4, #255	; 0xff
   1de8c:	e6ba      	b.n	1dc04 <__aeabi_fsub+0x8c>
   1de8e:	2301      	movs	r3, #1
   1de90:	e76e      	b.n	1dd70 <__aeabi_fsub+0x1f8>
   1de92:	0033      	movs	r3, r6
   1de94:	0004      	movs	r4, r0
   1de96:	e6b5      	b.n	1dc04 <__aeabi_fsub+0x8c>
   1de98:	2700      	movs	r7, #0
   1de9a:	2200      	movs	r2, #0
   1de9c:	e71c      	b.n	1dcd8 <__aeabi_fsub+0x160>
   1de9e:	0033      	movs	r3, r6
   1dea0:	e6b0      	b.n	1dc04 <__aeabi_fsub+0x8c>
   1dea2:	2301      	movs	r3, #1
   1dea4:	e7c0      	b.n	1de28 <__aeabi_fsub+0x2b0>
   1dea6:	46c0      	nop			; (mov r8, r8)
   1dea8:	7dffffff 	.word	0x7dffffff
   1deac:	fbffffff 	.word	0xfbffffff

0001deb0 <__aeabi_f2iz>:
   1deb0:	0241      	lsls	r1, r0, #9
   1deb2:	0043      	lsls	r3, r0, #1
   1deb4:	0fc2      	lsrs	r2, r0, #31
   1deb6:	0a49      	lsrs	r1, r1, #9
   1deb8:	0e1b      	lsrs	r3, r3, #24
   1deba:	2000      	movs	r0, #0
   1debc:	2b7e      	cmp	r3, #126	; 0x7e
   1debe:	dd0d      	ble.n	1dedc <__aeabi_f2iz+0x2c>
   1dec0:	2b9d      	cmp	r3, #157	; 0x9d
   1dec2:	dc0c      	bgt.n	1dede <__aeabi_f2iz+0x2e>
   1dec4:	2080      	movs	r0, #128	; 0x80
   1dec6:	0400      	lsls	r0, r0, #16
   1dec8:	4301      	orrs	r1, r0
   1deca:	2b95      	cmp	r3, #149	; 0x95
   1decc:	dc0a      	bgt.n	1dee4 <__aeabi_f2iz+0x34>
   1dece:	2096      	movs	r0, #150	; 0x96
   1ded0:	1ac3      	subs	r3, r0, r3
   1ded2:	40d9      	lsrs	r1, r3
   1ded4:	4248      	negs	r0, r1
   1ded6:	2a00      	cmp	r2, #0
   1ded8:	d100      	bne.n	1dedc <__aeabi_f2iz+0x2c>
   1deda:	0008      	movs	r0, r1
   1dedc:	4770      	bx	lr
   1dede:	4b03      	ldr	r3, [pc, #12]	; (1deec <__aeabi_f2iz+0x3c>)
   1dee0:	18d0      	adds	r0, r2, r3
   1dee2:	e7fb      	b.n	1dedc <__aeabi_f2iz+0x2c>
   1dee4:	3b96      	subs	r3, #150	; 0x96
   1dee6:	4099      	lsls	r1, r3
   1dee8:	e7f4      	b.n	1ded4 <__aeabi_f2iz+0x24>
   1deea:	46c0      	nop			; (mov r8, r8)
   1deec:	7fffffff 	.word	0x7fffffff

0001def0 <__aeabi_i2f>:
   1def0:	b570      	push	{r4, r5, r6, lr}
   1def2:	2800      	cmp	r0, #0
   1def4:	d030      	beq.n	1df58 <__aeabi_i2f+0x68>
   1def6:	17c3      	asrs	r3, r0, #31
   1def8:	18c4      	adds	r4, r0, r3
   1defa:	405c      	eors	r4, r3
   1defc:	0fc5      	lsrs	r5, r0, #31
   1defe:	0020      	movs	r0, r4
   1df00:	f7ff f8fa 	bl	1d0f8 <__clzsi2>
   1df04:	239e      	movs	r3, #158	; 0x9e
   1df06:	1a1b      	subs	r3, r3, r0
   1df08:	2b96      	cmp	r3, #150	; 0x96
   1df0a:	dc0d      	bgt.n	1df28 <__aeabi_i2f+0x38>
   1df0c:	2296      	movs	r2, #150	; 0x96
   1df0e:	1ad2      	subs	r2, r2, r3
   1df10:	4094      	lsls	r4, r2
   1df12:	002a      	movs	r2, r5
   1df14:	0264      	lsls	r4, r4, #9
   1df16:	0a64      	lsrs	r4, r4, #9
   1df18:	b2db      	uxtb	r3, r3
   1df1a:	0264      	lsls	r4, r4, #9
   1df1c:	05db      	lsls	r3, r3, #23
   1df1e:	0a60      	lsrs	r0, r4, #9
   1df20:	07d2      	lsls	r2, r2, #31
   1df22:	4318      	orrs	r0, r3
   1df24:	4310      	orrs	r0, r2
   1df26:	bd70      	pop	{r4, r5, r6, pc}
   1df28:	2b99      	cmp	r3, #153	; 0x99
   1df2a:	dc19      	bgt.n	1df60 <__aeabi_i2f+0x70>
   1df2c:	2299      	movs	r2, #153	; 0x99
   1df2e:	1ad2      	subs	r2, r2, r3
   1df30:	2a00      	cmp	r2, #0
   1df32:	dd29      	ble.n	1df88 <__aeabi_i2f+0x98>
   1df34:	4094      	lsls	r4, r2
   1df36:	0022      	movs	r2, r4
   1df38:	4c14      	ldr	r4, [pc, #80]	; (1df8c <__aeabi_i2f+0x9c>)
   1df3a:	4014      	ands	r4, r2
   1df3c:	0751      	lsls	r1, r2, #29
   1df3e:	d004      	beq.n	1df4a <__aeabi_i2f+0x5a>
   1df40:	210f      	movs	r1, #15
   1df42:	400a      	ands	r2, r1
   1df44:	2a04      	cmp	r2, #4
   1df46:	d000      	beq.n	1df4a <__aeabi_i2f+0x5a>
   1df48:	3404      	adds	r4, #4
   1df4a:	0162      	lsls	r2, r4, #5
   1df4c:	d413      	bmi.n	1df76 <__aeabi_i2f+0x86>
   1df4e:	01a4      	lsls	r4, r4, #6
   1df50:	0a64      	lsrs	r4, r4, #9
   1df52:	b2db      	uxtb	r3, r3
   1df54:	002a      	movs	r2, r5
   1df56:	e7e0      	b.n	1df1a <__aeabi_i2f+0x2a>
   1df58:	2200      	movs	r2, #0
   1df5a:	2300      	movs	r3, #0
   1df5c:	2400      	movs	r4, #0
   1df5e:	e7dc      	b.n	1df1a <__aeabi_i2f+0x2a>
   1df60:	2205      	movs	r2, #5
   1df62:	0021      	movs	r1, r4
   1df64:	1a12      	subs	r2, r2, r0
   1df66:	40d1      	lsrs	r1, r2
   1df68:	22b9      	movs	r2, #185	; 0xb9
   1df6a:	1ad2      	subs	r2, r2, r3
   1df6c:	4094      	lsls	r4, r2
   1df6e:	1e62      	subs	r2, r4, #1
   1df70:	4194      	sbcs	r4, r2
   1df72:	430c      	orrs	r4, r1
   1df74:	e7da      	b.n	1df2c <__aeabi_i2f+0x3c>
   1df76:	4b05      	ldr	r3, [pc, #20]	; (1df8c <__aeabi_i2f+0x9c>)
   1df78:	002a      	movs	r2, r5
   1df7a:	401c      	ands	r4, r3
   1df7c:	239f      	movs	r3, #159	; 0x9f
   1df7e:	01a4      	lsls	r4, r4, #6
   1df80:	1a1b      	subs	r3, r3, r0
   1df82:	0a64      	lsrs	r4, r4, #9
   1df84:	b2db      	uxtb	r3, r3
   1df86:	e7c8      	b.n	1df1a <__aeabi_i2f+0x2a>
   1df88:	0022      	movs	r2, r4
   1df8a:	e7d5      	b.n	1df38 <__aeabi_i2f+0x48>
   1df8c:	fbffffff 	.word	0xfbffffff

0001df90 <__aeabi_ui2f>:
   1df90:	b510      	push	{r4, lr}
   1df92:	1e04      	subs	r4, r0, #0
   1df94:	d027      	beq.n	1dfe6 <__aeabi_ui2f+0x56>
   1df96:	f7ff f8af 	bl	1d0f8 <__clzsi2>
   1df9a:	239e      	movs	r3, #158	; 0x9e
   1df9c:	1a1b      	subs	r3, r3, r0
   1df9e:	2b96      	cmp	r3, #150	; 0x96
   1dfa0:	dc0a      	bgt.n	1dfb8 <__aeabi_ui2f+0x28>
   1dfa2:	2296      	movs	r2, #150	; 0x96
   1dfa4:	1ad2      	subs	r2, r2, r3
   1dfa6:	4094      	lsls	r4, r2
   1dfa8:	0264      	lsls	r4, r4, #9
   1dfaa:	0a64      	lsrs	r4, r4, #9
   1dfac:	b2db      	uxtb	r3, r3
   1dfae:	0264      	lsls	r4, r4, #9
   1dfb0:	05db      	lsls	r3, r3, #23
   1dfb2:	0a60      	lsrs	r0, r4, #9
   1dfb4:	4318      	orrs	r0, r3
   1dfb6:	bd10      	pop	{r4, pc}
   1dfb8:	2b99      	cmp	r3, #153	; 0x99
   1dfba:	dc17      	bgt.n	1dfec <__aeabi_ui2f+0x5c>
   1dfbc:	2299      	movs	r2, #153	; 0x99
   1dfbe:	1ad2      	subs	r2, r2, r3
   1dfc0:	2a00      	cmp	r2, #0
   1dfc2:	dd27      	ble.n	1e014 <__aeabi_ui2f+0x84>
   1dfc4:	4094      	lsls	r4, r2
   1dfc6:	0022      	movs	r2, r4
   1dfc8:	4c13      	ldr	r4, [pc, #76]	; (1e018 <__aeabi_ui2f+0x88>)
   1dfca:	4014      	ands	r4, r2
   1dfcc:	0751      	lsls	r1, r2, #29
   1dfce:	d004      	beq.n	1dfda <__aeabi_ui2f+0x4a>
   1dfd0:	210f      	movs	r1, #15
   1dfd2:	400a      	ands	r2, r1
   1dfd4:	2a04      	cmp	r2, #4
   1dfd6:	d000      	beq.n	1dfda <__aeabi_ui2f+0x4a>
   1dfd8:	3404      	adds	r4, #4
   1dfda:	0162      	lsls	r2, r4, #5
   1dfdc:	d412      	bmi.n	1e004 <__aeabi_ui2f+0x74>
   1dfde:	01a4      	lsls	r4, r4, #6
   1dfe0:	0a64      	lsrs	r4, r4, #9
   1dfe2:	b2db      	uxtb	r3, r3
   1dfe4:	e7e3      	b.n	1dfae <__aeabi_ui2f+0x1e>
   1dfe6:	2300      	movs	r3, #0
   1dfe8:	2400      	movs	r4, #0
   1dfea:	e7e0      	b.n	1dfae <__aeabi_ui2f+0x1e>
   1dfec:	22b9      	movs	r2, #185	; 0xb9
   1dfee:	0021      	movs	r1, r4
   1dff0:	1ad2      	subs	r2, r2, r3
   1dff2:	4091      	lsls	r1, r2
   1dff4:	000a      	movs	r2, r1
   1dff6:	1e51      	subs	r1, r2, #1
   1dff8:	418a      	sbcs	r2, r1
   1dffa:	2105      	movs	r1, #5
   1dffc:	1a09      	subs	r1, r1, r0
   1dffe:	40cc      	lsrs	r4, r1
   1e000:	4314      	orrs	r4, r2
   1e002:	e7db      	b.n	1dfbc <__aeabi_ui2f+0x2c>
   1e004:	4b04      	ldr	r3, [pc, #16]	; (1e018 <__aeabi_ui2f+0x88>)
   1e006:	401c      	ands	r4, r3
   1e008:	239f      	movs	r3, #159	; 0x9f
   1e00a:	01a4      	lsls	r4, r4, #6
   1e00c:	1a1b      	subs	r3, r3, r0
   1e00e:	0a64      	lsrs	r4, r4, #9
   1e010:	b2db      	uxtb	r3, r3
   1e012:	e7cc      	b.n	1dfae <__aeabi_ui2f+0x1e>
   1e014:	0022      	movs	r2, r4
   1e016:	e7d7      	b.n	1dfc8 <__aeabi_ui2f+0x38>
   1e018:	fbffffff 	.word	0xfbffffff

0001e01c <__aeabi_dadd>:
   1e01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e01e:	4645      	mov	r5, r8
   1e020:	46de      	mov	lr, fp
   1e022:	4657      	mov	r7, sl
   1e024:	464e      	mov	r6, r9
   1e026:	030c      	lsls	r4, r1, #12
   1e028:	b5e0      	push	{r5, r6, r7, lr}
   1e02a:	004e      	lsls	r6, r1, #1
   1e02c:	0fc9      	lsrs	r1, r1, #31
   1e02e:	4688      	mov	r8, r1
   1e030:	000d      	movs	r5, r1
   1e032:	0a61      	lsrs	r1, r4, #9
   1e034:	0f44      	lsrs	r4, r0, #29
   1e036:	430c      	orrs	r4, r1
   1e038:	00c7      	lsls	r7, r0, #3
   1e03a:	0319      	lsls	r1, r3, #12
   1e03c:	0058      	lsls	r0, r3, #1
   1e03e:	0fdb      	lsrs	r3, r3, #31
   1e040:	469b      	mov	fp, r3
   1e042:	0a4b      	lsrs	r3, r1, #9
   1e044:	0f51      	lsrs	r1, r2, #29
   1e046:	430b      	orrs	r3, r1
   1e048:	0d76      	lsrs	r6, r6, #21
   1e04a:	0d40      	lsrs	r0, r0, #21
   1e04c:	0019      	movs	r1, r3
   1e04e:	00d2      	lsls	r2, r2, #3
   1e050:	45d8      	cmp	r8, fp
   1e052:	d100      	bne.n	1e056 <__aeabi_dadd+0x3a>
   1e054:	e0ae      	b.n	1e1b4 <__aeabi_dadd+0x198>
   1e056:	1a35      	subs	r5, r6, r0
   1e058:	2d00      	cmp	r5, #0
   1e05a:	dc00      	bgt.n	1e05e <__aeabi_dadd+0x42>
   1e05c:	e0f6      	b.n	1e24c <__aeabi_dadd+0x230>
   1e05e:	2800      	cmp	r0, #0
   1e060:	d10f      	bne.n	1e082 <__aeabi_dadd+0x66>
   1e062:	4313      	orrs	r3, r2
   1e064:	d100      	bne.n	1e068 <__aeabi_dadd+0x4c>
   1e066:	e0db      	b.n	1e220 <__aeabi_dadd+0x204>
   1e068:	1e6b      	subs	r3, r5, #1
   1e06a:	2b00      	cmp	r3, #0
   1e06c:	d000      	beq.n	1e070 <__aeabi_dadd+0x54>
   1e06e:	e137      	b.n	1e2e0 <__aeabi_dadd+0x2c4>
   1e070:	1aba      	subs	r2, r7, r2
   1e072:	4297      	cmp	r7, r2
   1e074:	41bf      	sbcs	r7, r7
   1e076:	1a64      	subs	r4, r4, r1
   1e078:	427f      	negs	r7, r7
   1e07a:	1be4      	subs	r4, r4, r7
   1e07c:	2601      	movs	r6, #1
   1e07e:	0017      	movs	r7, r2
   1e080:	e024      	b.n	1e0cc <__aeabi_dadd+0xb0>
   1e082:	4bc6      	ldr	r3, [pc, #792]	; (1e39c <__aeabi_dadd+0x380>)
   1e084:	429e      	cmp	r6, r3
   1e086:	d04d      	beq.n	1e124 <__aeabi_dadd+0x108>
   1e088:	2380      	movs	r3, #128	; 0x80
   1e08a:	041b      	lsls	r3, r3, #16
   1e08c:	4319      	orrs	r1, r3
   1e08e:	2d38      	cmp	r5, #56	; 0x38
   1e090:	dd00      	ble.n	1e094 <__aeabi_dadd+0x78>
   1e092:	e107      	b.n	1e2a4 <__aeabi_dadd+0x288>
   1e094:	2d1f      	cmp	r5, #31
   1e096:	dd00      	ble.n	1e09a <__aeabi_dadd+0x7e>
   1e098:	e138      	b.n	1e30c <__aeabi_dadd+0x2f0>
   1e09a:	2020      	movs	r0, #32
   1e09c:	1b43      	subs	r3, r0, r5
   1e09e:	469a      	mov	sl, r3
   1e0a0:	000b      	movs	r3, r1
   1e0a2:	4650      	mov	r0, sl
   1e0a4:	4083      	lsls	r3, r0
   1e0a6:	4699      	mov	r9, r3
   1e0a8:	0013      	movs	r3, r2
   1e0aa:	4648      	mov	r0, r9
   1e0ac:	40eb      	lsrs	r3, r5
   1e0ae:	4318      	orrs	r0, r3
   1e0b0:	0003      	movs	r3, r0
   1e0b2:	4650      	mov	r0, sl
   1e0b4:	4082      	lsls	r2, r0
   1e0b6:	1e50      	subs	r0, r2, #1
   1e0b8:	4182      	sbcs	r2, r0
   1e0ba:	40e9      	lsrs	r1, r5
   1e0bc:	431a      	orrs	r2, r3
   1e0be:	1aba      	subs	r2, r7, r2
   1e0c0:	1a61      	subs	r1, r4, r1
   1e0c2:	4297      	cmp	r7, r2
   1e0c4:	41a4      	sbcs	r4, r4
   1e0c6:	0017      	movs	r7, r2
   1e0c8:	4264      	negs	r4, r4
   1e0ca:	1b0c      	subs	r4, r1, r4
   1e0cc:	0223      	lsls	r3, r4, #8
   1e0ce:	d562      	bpl.n	1e196 <__aeabi_dadd+0x17a>
   1e0d0:	0264      	lsls	r4, r4, #9
   1e0d2:	0a65      	lsrs	r5, r4, #9
   1e0d4:	2d00      	cmp	r5, #0
   1e0d6:	d100      	bne.n	1e0da <__aeabi_dadd+0xbe>
   1e0d8:	e0df      	b.n	1e29a <__aeabi_dadd+0x27e>
   1e0da:	0028      	movs	r0, r5
   1e0dc:	f7ff f80c 	bl	1d0f8 <__clzsi2>
   1e0e0:	0003      	movs	r3, r0
   1e0e2:	3b08      	subs	r3, #8
   1e0e4:	2b1f      	cmp	r3, #31
   1e0e6:	dd00      	ble.n	1e0ea <__aeabi_dadd+0xce>
   1e0e8:	e0d2      	b.n	1e290 <__aeabi_dadd+0x274>
   1e0ea:	2220      	movs	r2, #32
   1e0ec:	003c      	movs	r4, r7
   1e0ee:	1ad2      	subs	r2, r2, r3
   1e0f0:	409d      	lsls	r5, r3
   1e0f2:	40d4      	lsrs	r4, r2
   1e0f4:	409f      	lsls	r7, r3
   1e0f6:	4325      	orrs	r5, r4
   1e0f8:	429e      	cmp	r6, r3
   1e0fa:	dd00      	ble.n	1e0fe <__aeabi_dadd+0xe2>
   1e0fc:	e0c4      	b.n	1e288 <__aeabi_dadd+0x26c>
   1e0fe:	1b9e      	subs	r6, r3, r6
   1e100:	1c73      	adds	r3, r6, #1
   1e102:	2b1f      	cmp	r3, #31
   1e104:	dd00      	ble.n	1e108 <__aeabi_dadd+0xec>
   1e106:	e0f1      	b.n	1e2ec <__aeabi_dadd+0x2d0>
   1e108:	2220      	movs	r2, #32
   1e10a:	0038      	movs	r0, r7
   1e10c:	0029      	movs	r1, r5
   1e10e:	1ad2      	subs	r2, r2, r3
   1e110:	40d8      	lsrs	r0, r3
   1e112:	4091      	lsls	r1, r2
   1e114:	4097      	lsls	r7, r2
   1e116:	002c      	movs	r4, r5
   1e118:	4301      	orrs	r1, r0
   1e11a:	1e78      	subs	r0, r7, #1
   1e11c:	4187      	sbcs	r7, r0
   1e11e:	40dc      	lsrs	r4, r3
   1e120:	2600      	movs	r6, #0
   1e122:	430f      	orrs	r7, r1
   1e124:	077b      	lsls	r3, r7, #29
   1e126:	d009      	beq.n	1e13c <__aeabi_dadd+0x120>
   1e128:	230f      	movs	r3, #15
   1e12a:	403b      	ands	r3, r7
   1e12c:	2b04      	cmp	r3, #4
   1e12e:	d005      	beq.n	1e13c <__aeabi_dadd+0x120>
   1e130:	1d3b      	adds	r3, r7, #4
   1e132:	42bb      	cmp	r3, r7
   1e134:	41bf      	sbcs	r7, r7
   1e136:	427f      	negs	r7, r7
   1e138:	19e4      	adds	r4, r4, r7
   1e13a:	001f      	movs	r7, r3
   1e13c:	0223      	lsls	r3, r4, #8
   1e13e:	d52c      	bpl.n	1e19a <__aeabi_dadd+0x17e>
   1e140:	4b96      	ldr	r3, [pc, #600]	; (1e39c <__aeabi_dadd+0x380>)
   1e142:	3601      	adds	r6, #1
   1e144:	429e      	cmp	r6, r3
   1e146:	d100      	bne.n	1e14a <__aeabi_dadd+0x12e>
   1e148:	e09a      	b.n	1e280 <__aeabi_dadd+0x264>
   1e14a:	4645      	mov	r5, r8
   1e14c:	4b94      	ldr	r3, [pc, #592]	; (1e3a0 <__aeabi_dadd+0x384>)
   1e14e:	08ff      	lsrs	r7, r7, #3
   1e150:	401c      	ands	r4, r3
   1e152:	0760      	lsls	r0, r4, #29
   1e154:	0576      	lsls	r6, r6, #21
   1e156:	0264      	lsls	r4, r4, #9
   1e158:	4307      	orrs	r7, r0
   1e15a:	0b24      	lsrs	r4, r4, #12
   1e15c:	0d76      	lsrs	r6, r6, #21
   1e15e:	2100      	movs	r1, #0
   1e160:	0324      	lsls	r4, r4, #12
   1e162:	0b23      	lsrs	r3, r4, #12
   1e164:	0d0c      	lsrs	r4, r1, #20
   1e166:	4a8f      	ldr	r2, [pc, #572]	; (1e3a4 <__aeabi_dadd+0x388>)
   1e168:	0524      	lsls	r4, r4, #20
   1e16a:	431c      	orrs	r4, r3
   1e16c:	4014      	ands	r4, r2
   1e16e:	0533      	lsls	r3, r6, #20
   1e170:	4323      	orrs	r3, r4
   1e172:	005b      	lsls	r3, r3, #1
   1e174:	07ed      	lsls	r5, r5, #31
   1e176:	085b      	lsrs	r3, r3, #1
   1e178:	432b      	orrs	r3, r5
   1e17a:	0038      	movs	r0, r7
   1e17c:	0019      	movs	r1, r3
   1e17e:	bc3c      	pop	{r2, r3, r4, r5}
   1e180:	4690      	mov	r8, r2
   1e182:	4699      	mov	r9, r3
   1e184:	46a2      	mov	sl, r4
   1e186:	46ab      	mov	fp, r5
   1e188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e18a:	4664      	mov	r4, ip
   1e18c:	4304      	orrs	r4, r0
   1e18e:	d100      	bne.n	1e192 <__aeabi_dadd+0x176>
   1e190:	e211      	b.n	1e5b6 <__aeabi_dadd+0x59a>
   1e192:	0004      	movs	r4, r0
   1e194:	4667      	mov	r7, ip
   1e196:	077b      	lsls	r3, r7, #29
   1e198:	d1c6      	bne.n	1e128 <__aeabi_dadd+0x10c>
   1e19a:	4645      	mov	r5, r8
   1e19c:	0760      	lsls	r0, r4, #29
   1e19e:	08ff      	lsrs	r7, r7, #3
   1e1a0:	4307      	orrs	r7, r0
   1e1a2:	08e4      	lsrs	r4, r4, #3
   1e1a4:	4b7d      	ldr	r3, [pc, #500]	; (1e39c <__aeabi_dadd+0x380>)
   1e1a6:	429e      	cmp	r6, r3
   1e1a8:	d030      	beq.n	1e20c <__aeabi_dadd+0x1f0>
   1e1aa:	0324      	lsls	r4, r4, #12
   1e1ac:	0576      	lsls	r6, r6, #21
   1e1ae:	0b24      	lsrs	r4, r4, #12
   1e1b0:	0d76      	lsrs	r6, r6, #21
   1e1b2:	e7d4      	b.n	1e15e <__aeabi_dadd+0x142>
   1e1b4:	1a33      	subs	r3, r6, r0
   1e1b6:	469a      	mov	sl, r3
   1e1b8:	2b00      	cmp	r3, #0
   1e1ba:	dd78      	ble.n	1e2ae <__aeabi_dadd+0x292>
   1e1bc:	2800      	cmp	r0, #0
   1e1be:	d031      	beq.n	1e224 <__aeabi_dadd+0x208>
   1e1c0:	4876      	ldr	r0, [pc, #472]	; (1e39c <__aeabi_dadd+0x380>)
   1e1c2:	4286      	cmp	r6, r0
   1e1c4:	d0ae      	beq.n	1e124 <__aeabi_dadd+0x108>
   1e1c6:	2080      	movs	r0, #128	; 0x80
   1e1c8:	0400      	lsls	r0, r0, #16
   1e1ca:	4301      	orrs	r1, r0
   1e1cc:	4653      	mov	r3, sl
   1e1ce:	2b38      	cmp	r3, #56	; 0x38
   1e1d0:	dc00      	bgt.n	1e1d4 <__aeabi_dadd+0x1b8>
   1e1d2:	e0e9      	b.n	1e3a8 <__aeabi_dadd+0x38c>
   1e1d4:	430a      	orrs	r2, r1
   1e1d6:	1e51      	subs	r1, r2, #1
   1e1d8:	418a      	sbcs	r2, r1
   1e1da:	2100      	movs	r1, #0
   1e1dc:	19d2      	adds	r2, r2, r7
   1e1de:	42ba      	cmp	r2, r7
   1e1e0:	41bf      	sbcs	r7, r7
   1e1e2:	1909      	adds	r1, r1, r4
   1e1e4:	427c      	negs	r4, r7
   1e1e6:	0017      	movs	r7, r2
   1e1e8:	190c      	adds	r4, r1, r4
   1e1ea:	0223      	lsls	r3, r4, #8
   1e1ec:	d5d3      	bpl.n	1e196 <__aeabi_dadd+0x17a>
   1e1ee:	4b6b      	ldr	r3, [pc, #428]	; (1e39c <__aeabi_dadd+0x380>)
   1e1f0:	3601      	adds	r6, #1
   1e1f2:	429e      	cmp	r6, r3
   1e1f4:	d100      	bne.n	1e1f8 <__aeabi_dadd+0x1dc>
   1e1f6:	e13a      	b.n	1e46e <__aeabi_dadd+0x452>
   1e1f8:	2001      	movs	r0, #1
   1e1fa:	4b69      	ldr	r3, [pc, #420]	; (1e3a0 <__aeabi_dadd+0x384>)
   1e1fc:	401c      	ands	r4, r3
   1e1fe:	087b      	lsrs	r3, r7, #1
   1e200:	4007      	ands	r7, r0
   1e202:	431f      	orrs	r7, r3
   1e204:	07e0      	lsls	r0, r4, #31
   1e206:	4307      	orrs	r7, r0
   1e208:	0864      	lsrs	r4, r4, #1
   1e20a:	e78b      	b.n	1e124 <__aeabi_dadd+0x108>
   1e20c:	0023      	movs	r3, r4
   1e20e:	433b      	orrs	r3, r7
   1e210:	d100      	bne.n	1e214 <__aeabi_dadd+0x1f8>
   1e212:	e1cb      	b.n	1e5ac <__aeabi_dadd+0x590>
   1e214:	2280      	movs	r2, #128	; 0x80
   1e216:	0312      	lsls	r2, r2, #12
   1e218:	4314      	orrs	r4, r2
   1e21a:	0324      	lsls	r4, r4, #12
   1e21c:	0b24      	lsrs	r4, r4, #12
   1e21e:	e79e      	b.n	1e15e <__aeabi_dadd+0x142>
   1e220:	002e      	movs	r6, r5
   1e222:	e77f      	b.n	1e124 <__aeabi_dadd+0x108>
   1e224:	0008      	movs	r0, r1
   1e226:	4310      	orrs	r0, r2
   1e228:	d100      	bne.n	1e22c <__aeabi_dadd+0x210>
   1e22a:	e0b4      	b.n	1e396 <__aeabi_dadd+0x37a>
   1e22c:	1e58      	subs	r0, r3, #1
   1e22e:	2800      	cmp	r0, #0
   1e230:	d000      	beq.n	1e234 <__aeabi_dadd+0x218>
   1e232:	e0de      	b.n	1e3f2 <__aeabi_dadd+0x3d6>
   1e234:	18ba      	adds	r2, r7, r2
   1e236:	42ba      	cmp	r2, r7
   1e238:	419b      	sbcs	r3, r3
   1e23a:	1864      	adds	r4, r4, r1
   1e23c:	425b      	negs	r3, r3
   1e23e:	18e4      	adds	r4, r4, r3
   1e240:	0017      	movs	r7, r2
   1e242:	2601      	movs	r6, #1
   1e244:	0223      	lsls	r3, r4, #8
   1e246:	d5a6      	bpl.n	1e196 <__aeabi_dadd+0x17a>
   1e248:	2602      	movs	r6, #2
   1e24a:	e7d5      	b.n	1e1f8 <__aeabi_dadd+0x1dc>
   1e24c:	2d00      	cmp	r5, #0
   1e24e:	d16e      	bne.n	1e32e <__aeabi_dadd+0x312>
   1e250:	1c70      	adds	r0, r6, #1
   1e252:	0540      	lsls	r0, r0, #21
   1e254:	0d40      	lsrs	r0, r0, #21
   1e256:	2801      	cmp	r0, #1
   1e258:	dc00      	bgt.n	1e25c <__aeabi_dadd+0x240>
   1e25a:	e0f9      	b.n	1e450 <__aeabi_dadd+0x434>
   1e25c:	1ab8      	subs	r0, r7, r2
   1e25e:	4684      	mov	ip, r0
   1e260:	4287      	cmp	r7, r0
   1e262:	4180      	sbcs	r0, r0
   1e264:	1ae5      	subs	r5, r4, r3
   1e266:	4240      	negs	r0, r0
   1e268:	1a2d      	subs	r5, r5, r0
   1e26a:	0228      	lsls	r0, r5, #8
   1e26c:	d400      	bmi.n	1e270 <__aeabi_dadd+0x254>
   1e26e:	e089      	b.n	1e384 <__aeabi_dadd+0x368>
   1e270:	1bd7      	subs	r7, r2, r7
   1e272:	42ba      	cmp	r2, r7
   1e274:	4192      	sbcs	r2, r2
   1e276:	1b1c      	subs	r4, r3, r4
   1e278:	4252      	negs	r2, r2
   1e27a:	1aa5      	subs	r5, r4, r2
   1e27c:	46d8      	mov	r8, fp
   1e27e:	e729      	b.n	1e0d4 <__aeabi_dadd+0xb8>
   1e280:	4645      	mov	r5, r8
   1e282:	2400      	movs	r4, #0
   1e284:	2700      	movs	r7, #0
   1e286:	e76a      	b.n	1e15e <__aeabi_dadd+0x142>
   1e288:	4c45      	ldr	r4, [pc, #276]	; (1e3a0 <__aeabi_dadd+0x384>)
   1e28a:	1af6      	subs	r6, r6, r3
   1e28c:	402c      	ands	r4, r5
   1e28e:	e749      	b.n	1e124 <__aeabi_dadd+0x108>
   1e290:	003d      	movs	r5, r7
   1e292:	3828      	subs	r0, #40	; 0x28
   1e294:	4085      	lsls	r5, r0
   1e296:	2700      	movs	r7, #0
   1e298:	e72e      	b.n	1e0f8 <__aeabi_dadd+0xdc>
   1e29a:	0038      	movs	r0, r7
   1e29c:	f7fe ff2c 	bl	1d0f8 <__clzsi2>
   1e2a0:	3020      	adds	r0, #32
   1e2a2:	e71d      	b.n	1e0e0 <__aeabi_dadd+0xc4>
   1e2a4:	430a      	orrs	r2, r1
   1e2a6:	1e51      	subs	r1, r2, #1
   1e2a8:	418a      	sbcs	r2, r1
   1e2aa:	2100      	movs	r1, #0
   1e2ac:	e707      	b.n	1e0be <__aeabi_dadd+0xa2>
   1e2ae:	2b00      	cmp	r3, #0
   1e2b0:	d000      	beq.n	1e2b4 <__aeabi_dadd+0x298>
   1e2b2:	e0f3      	b.n	1e49c <__aeabi_dadd+0x480>
   1e2b4:	1c70      	adds	r0, r6, #1
   1e2b6:	0543      	lsls	r3, r0, #21
   1e2b8:	0d5b      	lsrs	r3, r3, #21
   1e2ba:	2b01      	cmp	r3, #1
   1e2bc:	dc00      	bgt.n	1e2c0 <__aeabi_dadd+0x2a4>
   1e2be:	e0ad      	b.n	1e41c <__aeabi_dadd+0x400>
   1e2c0:	4b36      	ldr	r3, [pc, #216]	; (1e39c <__aeabi_dadd+0x380>)
   1e2c2:	4298      	cmp	r0, r3
   1e2c4:	d100      	bne.n	1e2c8 <__aeabi_dadd+0x2ac>
   1e2c6:	e0d1      	b.n	1e46c <__aeabi_dadd+0x450>
   1e2c8:	18ba      	adds	r2, r7, r2
   1e2ca:	42ba      	cmp	r2, r7
   1e2cc:	41bf      	sbcs	r7, r7
   1e2ce:	1864      	adds	r4, r4, r1
   1e2d0:	427f      	negs	r7, r7
   1e2d2:	19e4      	adds	r4, r4, r7
   1e2d4:	07e7      	lsls	r7, r4, #31
   1e2d6:	0852      	lsrs	r2, r2, #1
   1e2d8:	4317      	orrs	r7, r2
   1e2da:	0864      	lsrs	r4, r4, #1
   1e2dc:	0006      	movs	r6, r0
   1e2de:	e721      	b.n	1e124 <__aeabi_dadd+0x108>
   1e2e0:	482e      	ldr	r0, [pc, #184]	; (1e39c <__aeabi_dadd+0x380>)
   1e2e2:	4285      	cmp	r5, r0
   1e2e4:	d100      	bne.n	1e2e8 <__aeabi_dadd+0x2cc>
   1e2e6:	e093      	b.n	1e410 <__aeabi_dadd+0x3f4>
   1e2e8:	001d      	movs	r5, r3
   1e2ea:	e6d0      	b.n	1e08e <__aeabi_dadd+0x72>
   1e2ec:	0029      	movs	r1, r5
   1e2ee:	3e1f      	subs	r6, #31
   1e2f0:	40f1      	lsrs	r1, r6
   1e2f2:	2b20      	cmp	r3, #32
   1e2f4:	d100      	bne.n	1e2f8 <__aeabi_dadd+0x2dc>
   1e2f6:	e08d      	b.n	1e414 <__aeabi_dadd+0x3f8>
   1e2f8:	2240      	movs	r2, #64	; 0x40
   1e2fa:	1ad3      	subs	r3, r2, r3
   1e2fc:	409d      	lsls	r5, r3
   1e2fe:	432f      	orrs	r7, r5
   1e300:	1e7d      	subs	r5, r7, #1
   1e302:	41af      	sbcs	r7, r5
   1e304:	2400      	movs	r4, #0
   1e306:	430f      	orrs	r7, r1
   1e308:	2600      	movs	r6, #0
   1e30a:	e744      	b.n	1e196 <__aeabi_dadd+0x17a>
   1e30c:	002b      	movs	r3, r5
   1e30e:	0008      	movs	r0, r1
   1e310:	3b20      	subs	r3, #32
   1e312:	40d8      	lsrs	r0, r3
   1e314:	0003      	movs	r3, r0
   1e316:	2d20      	cmp	r5, #32
   1e318:	d100      	bne.n	1e31c <__aeabi_dadd+0x300>
   1e31a:	e07d      	b.n	1e418 <__aeabi_dadd+0x3fc>
   1e31c:	2040      	movs	r0, #64	; 0x40
   1e31e:	1b45      	subs	r5, r0, r5
   1e320:	40a9      	lsls	r1, r5
   1e322:	430a      	orrs	r2, r1
   1e324:	1e51      	subs	r1, r2, #1
   1e326:	418a      	sbcs	r2, r1
   1e328:	2100      	movs	r1, #0
   1e32a:	431a      	orrs	r2, r3
   1e32c:	e6c7      	b.n	1e0be <__aeabi_dadd+0xa2>
   1e32e:	2e00      	cmp	r6, #0
   1e330:	d050      	beq.n	1e3d4 <__aeabi_dadd+0x3b8>
   1e332:	4e1a      	ldr	r6, [pc, #104]	; (1e39c <__aeabi_dadd+0x380>)
   1e334:	42b0      	cmp	r0, r6
   1e336:	d057      	beq.n	1e3e8 <__aeabi_dadd+0x3cc>
   1e338:	2680      	movs	r6, #128	; 0x80
   1e33a:	426b      	negs	r3, r5
   1e33c:	4699      	mov	r9, r3
   1e33e:	0436      	lsls	r6, r6, #16
   1e340:	4334      	orrs	r4, r6
   1e342:	464b      	mov	r3, r9
   1e344:	2b38      	cmp	r3, #56	; 0x38
   1e346:	dd00      	ble.n	1e34a <__aeabi_dadd+0x32e>
   1e348:	e0d6      	b.n	1e4f8 <__aeabi_dadd+0x4dc>
   1e34a:	2b1f      	cmp	r3, #31
   1e34c:	dd00      	ble.n	1e350 <__aeabi_dadd+0x334>
   1e34e:	e135      	b.n	1e5bc <__aeabi_dadd+0x5a0>
   1e350:	2620      	movs	r6, #32
   1e352:	1af5      	subs	r5, r6, r3
   1e354:	0026      	movs	r6, r4
   1e356:	40ae      	lsls	r6, r5
   1e358:	46b2      	mov	sl, r6
   1e35a:	003e      	movs	r6, r7
   1e35c:	40de      	lsrs	r6, r3
   1e35e:	46ac      	mov	ip, r5
   1e360:	0035      	movs	r5, r6
   1e362:	4656      	mov	r6, sl
   1e364:	432e      	orrs	r6, r5
   1e366:	4665      	mov	r5, ip
   1e368:	40af      	lsls	r7, r5
   1e36a:	1e7d      	subs	r5, r7, #1
   1e36c:	41af      	sbcs	r7, r5
   1e36e:	40dc      	lsrs	r4, r3
   1e370:	4337      	orrs	r7, r6
   1e372:	1bd7      	subs	r7, r2, r7
   1e374:	42ba      	cmp	r2, r7
   1e376:	4192      	sbcs	r2, r2
   1e378:	1b0c      	subs	r4, r1, r4
   1e37a:	4252      	negs	r2, r2
   1e37c:	1aa4      	subs	r4, r4, r2
   1e37e:	0006      	movs	r6, r0
   1e380:	46d8      	mov	r8, fp
   1e382:	e6a3      	b.n	1e0cc <__aeabi_dadd+0xb0>
   1e384:	4664      	mov	r4, ip
   1e386:	4667      	mov	r7, ip
   1e388:	432c      	orrs	r4, r5
   1e38a:	d000      	beq.n	1e38e <__aeabi_dadd+0x372>
   1e38c:	e6a2      	b.n	1e0d4 <__aeabi_dadd+0xb8>
   1e38e:	2500      	movs	r5, #0
   1e390:	2600      	movs	r6, #0
   1e392:	2700      	movs	r7, #0
   1e394:	e706      	b.n	1e1a4 <__aeabi_dadd+0x188>
   1e396:	001e      	movs	r6, r3
   1e398:	e6c4      	b.n	1e124 <__aeabi_dadd+0x108>
   1e39a:	46c0      	nop			; (mov r8, r8)
   1e39c:	000007ff 	.word	0x000007ff
   1e3a0:	ff7fffff 	.word	0xff7fffff
   1e3a4:	800fffff 	.word	0x800fffff
   1e3a8:	2b1f      	cmp	r3, #31
   1e3aa:	dc63      	bgt.n	1e474 <__aeabi_dadd+0x458>
   1e3ac:	2020      	movs	r0, #32
   1e3ae:	1ac3      	subs	r3, r0, r3
   1e3b0:	0008      	movs	r0, r1
   1e3b2:	4098      	lsls	r0, r3
   1e3b4:	469c      	mov	ip, r3
   1e3b6:	4683      	mov	fp, r0
   1e3b8:	4653      	mov	r3, sl
   1e3ba:	0010      	movs	r0, r2
   1e3bc:	40d8      	lsrs	r0, r3
   1e3be:	0003      	movs	r3, r0
   1e3c0:	4658      	mov	r0, fp
   1e3c2:	4318      	orrs	r0, r3
   1e3c4:	4663      	mov	r3, ip
   1e3c6:	409a      	lsls	r2, r3
   1e3c8:	1e53      	subs	r3, r2, #1
   1e3ca:	419a      	sbcs	r2, r3
   1e3cc:	4653      	mov	r3, sl
   1e3ce:	4302      	orrs	r2, r0
   1e3d0:	40d9      	lsrs	r1, r3
   1e3d2:	e703      	b.n	1e1dc <__aeabi_dadd+0x1c0>
   1e3d4:	0026      	movs	r6, r4
   1e3d6:	433e      	orrs	r6, r7
   1e3d8:	d006      	beq.n	1e3e8 <__aeabi_dadd+0x3cc>
   1e3da:	43eb      	mvns	r3, r5
   1e3dc:	4699      	mov	r9, r3
   1e3de:	2b00      	cmp	r3, #0
   1e3e0:	d0c7      	beq.n	1e372 <__aeabi_dadd+0x356>
   1e3e2:	4e94      	ldr	r6, [pc, #592]	; (1e634 <__aeabi_dadd+0x618>)
   1e3e4:	42b0      	cmp	r0, r6
   1e3e6:	d1ac      	bne.n	1e342 <__aeabi_dadd+0x326>
   1e3e8:	000c      	movs	r4, r1
   1e3ea:	0017      	movs	r7, r2
   1e3ec:	0006      	movs	r6, r0
   1e3ee:	46d8      	mov	r8, fp
   1e3f0:	e698      	b.n	1e124 <__aeabi_dadd+0x108>
   1e3f2:	4b90      	ldr	r3, [pc, #576]	; (1e634 <__aeabi_dadd+0x618>)
   1e3f4:	459a      	cmp	sl, r3
   1e3f6:	d00b      	beq.n	1e410 <__aeabi_dadd+0x3f4>
   1e3f8:	4682      	mov	sl, r0
   1e3fa:	e6e7      	b.n	1e1cc <__aeabi_dadd+0x1b0>
   1e3fc:	2800      	cmp	r0, #0
   1e3fe:	d000      	beq.n	1e402 <__aeabi_dadd+0x3e6>
   1e400:	e09e      	b.n	1e540 <__aeabi_dadd+0x524>
   1e402:	0018      	movs	r0, r3
   1e404:	4310      	orrs	r0, r2
   1e406:	d100      	bne.n	1e40a <__aeabi_dadd+0x3ee>
   1e408:	e0e9      	b.n	1e5de <__aeabi_dadd+0x5c2>
   1e40a:	001c      	movs	r4, r3
   1e40c:	0017      	movs	r7, r2
   1e40e:	46d8      	mov	r8, fp
   1e410:	4e88      	ldr	r6, [pc, #544]	; (1e634 <__aeabi_dadd+0x618>)
   1e412:	e687      	b.n	1e124 <__aeabi_dadd+0x108>
   1e414:	2500      	movs	r5, #0
   1e416:	e772      	b.n	1e2fe <__aeabi_dadd+0x2e2>
   1e418:	2100      	movs	r1, #0
   1e41a:	e782      	b.n	1e322 <__aeabi_dadd+0x306>
   1e41c:	0023      	movs	r3, r4
   1e41e:	433b      	orrs	r3, r7
   1e420:	2e00      	cmp	r6, #0
   1e422:	d000      	beq.n	1e426 <__aeabi_dadd+0x40a>
   1e424:	e0ab      	b.n	1e57e <__aeabi_dadd+0x562>
   1e426:	2b00      	cmp	r3, #0
   1e428:	d100      	bne.n	1e42c <__aeabi_dadd+0x410>
   1e42a:	e0e7      	b.n	1e5fc <__aeabi_dadd+0x5e0>
   1e42c:	000b      	movs	r3, r1
   1e42e:	4313      	orrs	r3, r2
   1e430:	d100      	bne.n	1e434 <__aeabi_dadd+0x418>
   1e432:	e677      	b.n	1e124 <__aeabi_dadd+0x108>
   1e434:	18ba      	adds	r2, r7, r2
   1e436:	42ba      	cmp	r2, r7
   1e438:	41bf      	sbcs	r7, r7
   1e43a:	1864      	adds	r4, r4, r1
   1e43c:	427f      	negs	r7, r7
   1e43e:	19e4      	adds	r4, r4, r7
   1e440:	0223      	lsls	r3, r4, #8
   1e442:	d400      	bmi.n	1e446 <__aeabi_dadd+0x42a>
   1e444:	e0f2      	b.n	1e62c <__aeabi_dadd+0x610>
   1e446:	4b7c      	ldr	r3, [pc, #496]	; (1e638 <__aeabi_dadd+0x61c>)
   1e448:	0017      	movs	r7, r2
   1e44a:	401c      	ands	r4, r3
   1e44c:	0006      	movs	r6, r0
   1e44e:	e669      	b.n	1e124 <__aeabi_dadd+0x108>
   1e450:	0020      	movs	r0, r4
   1e452:	4338      	orrs	r0, r7
   1e454:	2e00      	cmp	r6, #0
   1e456:	d1d1      	bne.n	1e3fc <__aeabi_dadd+0x3e0>
   1e458:	2800      	cmp	r0, #0
   1e45a:	d15b      	bne.n	1e514 <__aeabi_dadd+0x4f8>
   1e45c:	001c      	movs	r4, r3
   1e45e:	4314      	orrs	r4, r2
   1e460:	d100      	bne.n	1e464 <__aeabi_dadd+0x448>
   1e462:	e0a8      	b.n	1e5b6 <__aeabi_dadd+0x59a>
   1e464:	001c      	movs	r4, r3
   1e466:	0017      	movs	r7, r2
   1e468:	46d8      	mov	r8, fp
   1e46a:	e65b      	b.n	1e124 <__aeabi_dadd+0x108>
   1e46c:	0006      	movs	r6, r0
   1e46e:	2400      	movs	r4, #0
   1e470:	2700      	movs	r7, #0
   1e472:	e697      	b.n	1e1a4 <__aeabi_dadd+0x188>
   1e474:	4650      	mov	r0, sl
   1e476:	000b      	movs	r3, r1
   1e478:	3820      	subs	r0, #32
   1e47a:	40c3      	lsrs	r3, r0
   1e47c:	4699      	mov	r9, r3
   1e47e:	4653      	mov	r3, sl
   1e480:	2b20      	cmp	r3, #32
   1e482:	d100      	bne.n	1e486 <__aeabi_dadd+0x46a>
   1e484:	e095      	b.n	1e5b2 <__aeabi_dadd+0x596>
   1e486:	2340      	movs	r3, #64	; 0x40
   1e488:	4650      	mov	r0, sl
   1e48a:	1a1b      	subs	r3, r3, r0
   1e48c:	4099      	lsls	r1, r3
   1e48e:	430a      	orrs	r2, r1
   1e490:	1e51      	subs	r1, r2, #1
   1e492:	418a      	sbcs	r2, r1
   1e494:	464b      	mov	r3, r9
   1e496:	2100      	movs	r1, #0
   1e498:	431a      	orrs	r2, r3
   1e49a:	e69f      	b.n	1e1dc <__aeabi_dadd+0x1c0>
   1e49c:	2e00      	cmp	r6, #0
   1e49e:	d130      	bne.n	1e502 <__aeabi_dadd+0x4e6>
   1e4a0:	0026      	movs	r6, r4
   1e4a2:	433e      	orrs	r6, r7
   1e4a4:	d067      	beq.n	1e576 <__aeabi_dadd+0x55a>
   1e4a6:	43db      	mvns	r3, r3
   1e4a8:	469a      	mov	sl, r3
   1e4aa:	2b00      	cmp	r3, #0
   1e4ac:	d01c      	beq.n	1e4e8 <__aeabi_dadd+0x4cc>
   1e4ae:	4e61      	ldr	r6, [pc, #388]	; (1e634 <__aeabi_dadd+0x618>)
   1e4b0:	42b0      	cmp	r0, r6
   1e4b2:	d060      	beq.n	1e576 <__aeabi_dadd+0x55a>
   1e4b4:	4653      	mov	r3, sl
   1e4b6:	2b38      	cmp	r3, #56	; 0x38
   1e4b8:	dd00      	ble.n	1e4bc <__aeabi_dadd+0x4a0>
   1e4ba:	e096      	b.n	1e5ea <__aeabi_dadd+0x5ce>
   1e4bc:	2b1f      	cmp	r3, #31
   1e4be:	dd00      	ble.n	1e4c2 <__aeabi_dadd+0x4a6>
   1e4c0:	e09f      	b.n	1e602 <__aeabi_dadd+0x5e6>
   1e4c2:	2620      	movs	r6, #32
   1e4c4:	1af3      	subs	r3, r6, r3
   1e4c6:	0026      	movs	r6, r4
   1e4c8:	409e      	lsls	r6, r3
   1e4ca:	469c      	mov	ip, r3
   1e4cc:	46b3      	mov	fp, r6
   1e4ce:	4653      	mov	r3, sl
   1e4d0:	003e      	movs	r6, r7
   1e4d2:	40de      	lsrs	r6, r3
   1e4d4:	0033      	movs	r3, r6
   1e4d6:	465e      	mov	r6, fp
   1e4d8:	431e      	orrs	r6, r3
   1e4da:	4663      	mov	r3, ip
   1e4dc:	409f      	lsls	r7, r3
   1e4de:	1e7b      	subs	r3, r7, #1
   1e4e0:	419f      	sbcs	r7, r3
   1e4e2:	4653      	mov	r3, sl
   1e4e4:	40dc      	lsrs	r4, r3
   1e4e6:	4337      	orrs	r7, r6
   1e4e8:	18bf      	adds	r7, r7, r2
   1e4ea:	4297      	cmp	r7, r2
   1e4ec:	4192      	sbcs	r2, r2
   1e4ee:	1864      	adds	r4, r4, r1
   1e4f0:	4252      	negs	r2, r2
   1e4f2:	18a4      	adds	r4, r4, r2
   1e4f4:	0006      	movs	r6, r0
   1e4f6:	e678      	b.n	1e1ea <__aeabi_dadd+0x1ce>
   1e4f8:	4327      	orrs	r7, r4
   1e4fa:	1e7c      	subs	r4, r7, #1
   1e4fc:	41a7      	sbcs	r7, r4
   1e4fe:	2400      	movs	r4, #0
   1e500:	e737      	b.n	1e372 <__aeabi_dadd+0x356>
   1e502:	4e4c      	ldr	r6, [pc, #304]	; (1e634 <__aeabi_dadd+0x618>)
   1e504:	42b0      	cmp	r0, r6
   1e506:	d036      	beq.n	1e576 <__aeabi_dadd+0x55a>
   1e508:	2680      	movs	r6, #128	; 0x80
   1e50a:	425b      	negs	r3, r3
   1e50c:	0436      	lsls	r6, r6, #16
   1e50e:	469a      	mov	sl, r3
   1e510:	4334      	orrs	r4, r6
   1e512:	e7cf      	b.n	1e4b4 <__aeabi_dadd+0x498>
   1e514:	0018      	movs	r0, r3
   1e516:	4310      	orrs	r0, r2
   1e518:	d100      	bne.n	1e51c <__aeabi_dadd+0x500>
   1e51a:	e603      	b.n	1e124 <__aeabi_dadd+0x108>
   1e51c:	1ab8      	subs	r0, r7, r2
   1e51e:	4684      	mov	ip, r0
   1e520:	4567      	cmp	r7, ip
   1e522:	41ad      	sbcs	r5, r5
   1e524:	1ae0      	subs	r0, r4, r3
   1e526:	426d      	negs	r5, r5
   1e528:	1b40      	subs	r0, r0, r5
   1e52a:	0205      	lsls	r5, r0, #8
   1e52c:	d400      	bmi.n	1e530 <__aeabi_dadd+0x514>
   1e52e:	e62c      	b.n	1e18a <__aeabi_dadd+0x16e>
   1e530:	1bd7      	subs	r7, r2, r7
   1e532:	42ba      	cmp	r2, r7
   1e534:	4192      	sbcs	r2, r2
   1e536:	1b1c      	subs	r4, r3, r4
   1e538:	4252      	negs	r2, r2
   1e53a:	1aa4      	subs	r4, r4, r2
   1e53c:	46d8      	mov	r8, fp
   1e53e:	e5f1      	b.n	1e124 <__aeabi_dadd+0x108>
   1e540:	0018      	movs	r0, r3
   1e542:	4310      	orrs	r0, r2
   1e544:	d100      	bne.n	1e548 <__aeabi_dadd+0x52c>
   1e546:	e763      	b.n	1e410 <__aeabi_dadd+0x3f4>
   1e548:	08f8      	lsrs	r0, r7, #3
   1e54a:	0767      	lsls	r7, r4, #29
   1e54c:	4307      	orrs	r7, r0
   1e54e:	2080      	movs	r0, #128	; 0x80
   1e550:	08e4      	lsrs	r4, r4, #3
   1e552:	0300      	lsls	r0, r0, #12
   1e554:	4204      	tst	r4, r0
   1e556:	d008      	beq.n	1e56a <__aeabi_dadd+0x54e>
   1e558:	08dd      	lsrs	r5, r3, #3
   1e55a:	4205      	tst	r5, r0
   1e55c:	d105      	bne.n	1e56a <__aeabi_dadd+0x54e>
   1e55e:	08d2      	lsrs	r2, r2, #3
   1e560:	0759      	lsls	r1, r3, #29
   1e562:	4311      	orrs	r1, r2
   1e564:	000f      	movs	r7, r1
   1e566:	002c      	movs	r4, r5
   1e568:	46d8      	mov	r8, fp
   1e56a:	0f7b      	lsrs	r3, r7, #29
   1e56c:	00e4      	lsls	r4, r4, #3
   1e56e:	431c      	orrs	r4, r3
   1e570:	00ff      	lsls	r7, r7, #3
   1e572:	4e30      	ldr	r6, [pc, #192]	; (1e634 <__aeabi_dadd+0x618>)
   1e574:	e5d6      	b.n	1e124 <__aeabi_dadd+0x108>
   1e576:	000c      	movs	r4, r1
   1e578:	0017      	movs	r7, r2
   1e57a:	0006      	movs	r6, r0
   1e57c:	e5d2      	b.n	1e124 <__aeabi_dadd+0x108>
   1e57e:	2b00      	cmp	r3, #0
   1e580:	d038      	beq.n	1e5f4 <__aeabi_dadd+0x5d8>
   1e582:	000b      	movs	r3, r1
   1e584:	4313      	orrs	r3, r2
   1e586:	d100      	bne.n	1e58a <__aeabi_dadd+0x56e>
   1e588:	e742      	b.n	1e410 <__aeabi_dadd+0x3f4>
   1e58a:	08f8      	lsrs	r0, r7, #3
   1e58c:	0767      	lsls	r7, r4, #29
   1e58e:	4307      	orrs	r7, r0
   1e590:	2080      	movs	r0, #128	; 0x80
   1e592:	08e4      	lsrs	r4, r4, #3
   1e594:	0300      	lsls	r0, r0, #12
   1e596:	4204      	tst	r4, r0
   1e598:	d0e7      	beq.n	1e56a <__aeabi_dadd+0x54e>
   1e59a:	08cb      	lsrs	r3, r1, #3
   1e59c:	4203      	tst	r3, r0
   1e59e:	d1e4      	bne.n	1e56a <__aeabi_dadd+0x54e>
   1e5a0:	08d2      	lsrs	r2, r2, #3
   1e5a2:	0749      	lsls	r1, r1, #29
   1e5a4:	4311      	orrs	r1, r2
   1e5a6:	000f      	movs	r7, r1
   1e5a8:	001c      	movs	r4, r3
   1e5aa:	e7de      	b.n	1e56a <__aeabi_dadd+0x54e>
   1e5ac:	2700      	movs	r7, #0
   1e5ae:	2400      	movs	r4, #0
   1e5b0:	e5d5      	b.n	1e15e <__aeabi_dadd+0x142>
   1e5b2:	2100      	movs	r1, #0
   1e5b4:	e76b      	b.n	1e48e <__aeabi_dadd+0x472>
   1e5b6:	2500      	movs	r5, #0
   1e5b8:	2700      	movs	r7, #0
   1e5ba:	e5f3      	b.n	1e1a4 <__aeabi_dadd+0x188>
   1e5bc:	464e      	mov	r6, r9
   1e5be:	0025      	movs	r5, r4
   1e5c0:	3e20      	subs	r6, #32
   1e5c2:	40f5      	lsrs	r5, r6
   1e5c4:	464b      	mov	r3, r9
   1e5c6:	002e      	movs	r6, r5
   1e5c8:	2b20      	cmp	r3, #32
   1e5ca:	d02d      	beq.n	1e628 <__aeabi_dadd+0x60c>
   1e5cc:	2540      	movs	r5, #64	; 0x40
   1e5ce:	1aed      	subs	r5, r5, r3
   1e5d0:	40ac      	lsls	r4, r5
   1e5d2:	4327      	orrs	r7, r4
   1e5d4:	1e7c      	subs	r4, r7, #1
   1e5d6:	41a7      	sbcs	r7, r4
   1e5d8:	2400      	movs	r4, #0
   1e5da:	4337      	orrs	r7, r6
   1e5dc:	e6c9      	b.n	1e372 <__aeabi_dadd+0x356>
   1e5de:	2480      	movs	r4, #128	; 0x80
   1e5e0:	2500      	movs	r5, #0
   1e5e2:	0324      	lsls	r4, r4, #12
   1e5e4:	4e13      	ldr	r6, [pc, #76]	; (1e634 <__aeabi_dadd+0x618>)
   1e5e6:	2700      	movs	r7, #0
   1e5e8:	e5dc      	b.n	1e1a4 <__aeabi_dadd+0x188>
   1e5ea:	4327      	orrs	r7, r4
   1e5ec:	1e7c      	subs	r4, r7, #1
   1e5ee:	41a7      	sbcs	r7, r4
   1e5f0:	2400      	movs	r4, #0
   1e5f2:	e779      	b.n	1e4e8 <__aeabi_dadd+0x4cc>
   1e5f4:	000c      	movs	r4, r1
   1e5f6:	0017      	movs	r7, r2
   1e5f8:	4e0e      	ldr	r6, [pc, #56]	; (1e634 <__aeabi_dadd+0x618>)
   1e5fa:	e593      	b.n	1e124 <__aeabi_dadd+0x108>
   1e5fc:	000c      	movs	r4, r1
   1e5fe:	0017      	movs	r7, r2
   1e600:	e590      	b.n	1e124 <__aeabi_dadd+0x108>
   1e602:	4656      	mov	r6, sl
   1e604:	0023      	movs	r3, r4
   1e606:	3e20      	subs	r6, #32
   1e608:	40f3      	lsrs	r3, r6
   1e60a:	4699      	mov	r9, r3
   1e60c:	4653      	mov	r3, sl
   1e60e:	2b20      	cmp	r3, #32
   1e610:	d00e      	beq.n	1e630 <__aeabi_dadd+0x614>
   1e612:	2340      	movs	r3, #64	; 0x40
   1e614:	4656      	mov	r6, sl
   1e616:	1b9b      	subs	r3, r3, r6
   1e618:	409c      	lsls	r4, r3
   1e61a:	4327      	orrs	r7, r4
   1e61c:	1e7c      	subs	r4, r7, #1
   1e61e:	41a7      	sbcs	r7, r4
   1e620:	464b      	mov	r3, r9
   1e622:	2400      	movs	r4, #0
   1e624:	431f      	orrs	r7, r3
   1e626:	e75f      	b.n	1e4e8 <__aeabi_dadd+0x4cc>
   1e628:	2400      	movs	r4, #0
   1e62a:	e7d2      	b.n	1e5d2 <__aeabi_dadd+0x5b6>
   1e62c:	0017      	movs	r7, r2
   1e62e:	e5b2      	b.n	1e196 <__aeabi_dadd+0x17a>
   1e630:	2400      	movs	r4, #0
   1e632:	e7f2      	b.n	1e61a <__aeabi_dadd+0x5fe>
   1e634:	000007ff 	.word	0x000007ff
   1e638:	ff7fffff 	.word	0xff7fffff

0001e63c <__aeabi_ddiv>:
   1e63c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e63e:	4657      	mov	r7, sl
   1e640:	4645      	mov	r5, r8
   1e642:	46de      	mov	lr, fp
   1e644:	464e      	mov	r6, r9
   1e646:	b5e0      	push	{r5, r6, r7, lr}
   1e648:	004c      	lsls	r4, r1, #1
   1e64a:	030e      	lsls	r6, r1, #12
   1e64c:	b087      	sub	sp, #28
   1e64e:	4683      	mov	fp, r0
   1e650:	4692      	mov	sl, r2
   1e652:	001d      	movs	r5, r3
   1e654:	4680      	mov	r8, r0
   1e656:	0b36      	lsrs	r6, r6, #12
   1e658:	0d64      	lsrs	r4, r4, #21
   1e65a:	0fcf      	lsrs	r7, r1, #31
   1e65c:	2c00      	cmp	r4, #0
   1e65e:	d04f      	beq.n	1e700 <__aeabi_ddiv+0xc4>
   1e660:	4b6f      	ldr	r3, [pc, #444]	; (1e820 <__aeabi_ddiv+0x1e4>)
   1e662:	429c      	cmp	r4, r3
   1e664:	d035      	beq.n	1e6d2 <__aeabi_ddiv+0x96>
   1e666:	2380      	movs	r3, #128	; 0x80
   1e668:	0f42      	lsrs	r2, r0, #29
   1e66a:	041b      	lsls	r3, r3, #16
   1e66c:	00f6      	lsls	r6, r6, #3
   1e66e:	4313      	orrs	r3, r2
   1e670:	4333      	orrs	r3, r6
   1e672:	4699      	mov	r9, r3
   1e674:	00c3      	lsls	r3, r0, #3
   1e676:	4698      	mov	r8, r3
   1e678:	4b6a      	ldr	r3, [pc, #424]	; (1e824 <__aeabi_ddiv+0x1e8>)
   1e67a:	2600      	movs	r6, #0
   1e67c:	469c      	mov	ip, r3
   1e67e:	2300      	movs	r3, #0
   1e680:	4464      	add	r4, ip
   1e682:	9303      	str	r3, [sp, #12]
   1e684:	032b      	lsls	r3, r5, #12
   1e686:	0b1b      	lsrs	r3, r3, #12
   1e688:	469b      	mov	fp, r3
   1e68a:	006b      	lsls	r3, r5, #1
   1e68c:	0fed      	lsrs	r5, r5, #31
   1e68e:	4650      	mov	r0, sl
   1e690:	0d5b      	lsrs	r3, r3, #21
   1e692:	9501      	str	r5, [sp, #4]
   1e694:	d05e      	beq.n	1e754 <__aeabi_ddiv+0x118>
   1e696:	4a62      	ldr	r2, [pc, #392]	; (1e820 <__aeabi_ddiv+0x1e4>)
   1e698:	4293      	cmp	r3, r2
   1e69a:	d053      	beq.n	1e744 <__aeabi_ddiv+0x108>
   1e69c:	465a      	mov	r2, fp
   1e69e:	00d1      	lsls	r1, r2, #3
   1e6a0:	2280      	movs	r2, #128	; 0x80
   1e6a2:	0f40      	lsrs	r0, r0, #29
   1e6a4:	0412      	lsls	r2, r2, #16
   1e6a6:	4302      	orrs	r2, r0
   1e6a8:	430a      	orrs	r2, r1
   1e6aa:	4693      	mov	fp, r2
   1e6ac:	4652      	mov	r2, sl
   1e6ae:	00d1      	lsls	r1, r2, #3
   1e6b0:	4a5c      	ldr	r2, [pc, #368]	; (1e824 <__aeabi_ddiv+0x1e8>)
   1e6b2:	4694      	mov	ip, r2
   1e6b4:	2200      	movs	r2, #0
   1e6b6:	4463      	add	r3, ip
   1e6b8:	0038      	movs	r0, r7
   1e6ba:	4068      	eors	r0, r5
   1e6bc:	4684      	mov	ip, r0
   1e6be:	9002      	str	r0, [sp, #8]
   1e6c0:	1ae4      	subs	r4, r4, r3
   1e6c2:	4316      	orrs	r6, r2
   1e6c4:	2e0f      	cmp	r6, #15
   1e6c6:	d900      	bls.n	1e6ca <__aeabi_ddiv+0x8e>
   1e6c8:	e0b4      	b.n	1e834 <__aeabi_ddiv+0x1f8>
   1e6ca:	4b57      	ldr	r3, [pc, #348]	; (1e828 <__aeabi_ddiv+0x1ec>)
   1e6cc:	00b6      	lsls	r6, r6, #2
   1e6ce:	599b      	ldr	r3, [r3, r6]
   1e6d0:	469f      	mov	pc, r3
   1e6d2:	0003      	movs	r3, r0
   1e6d4:	4333      	orrs	r3, r6
   1e6d6:	4699      	mov	r9, r3
   1e6d8:	d16c      	bne.n	1e7b4 <__aeabi_ddiv+0x178>
   1e6da:	2300      	movs	r3, #0
   1e6dc:	4698      	mov	r8, r3
   1e6de:	3302      	adds	r3, #2
   1e6e0:	2608      	movs	r6, #8
   1e6e2:	9303      	str	r3, [sp, #12]
   1e6e4:	e7ce      	b.n	1e684 <__aeabi_ddiv+0x48>
   1e6e6:	46cb      	mov	fp, r9
   1e6e8:	4641      	mov	r1, r8
   1e6ea:	9a03      	ldr	r2, [sp, #12]
   1e6ec:	9701      	str	r7, [sp, #4]
   1e6ee:	2a02      	cmp	r2, #2
   1e6f0:	d165      	bne.n	1e7be <__aeabi_ddiv+0x182>
   1e6f2:	9b01      	ldr	r3, [sp, #4]
   1e6f4:	4c4a      	ldr	r4, [pc, #296]	; (1e820 <__aeabi_ddiv+0x1e4>)
   1e6f6:	469c      	mov	ip, r3
   1e6f8:	2300      	movs	r3, #0
   1e6fa:	2200      	movs	r2, #0
   1e6fc:	4698      	mov	r8, r3
   1e6fe:	e06b      	b.n	1e7d8 <__aeabi_ddiv+0x19c>
   1e700:	0003      	movs	r3, r0
   1e702:	4333      	orrs	r3, r6
   1e704:	4699      	mov	r9, r3
   1e706:	d04e      	beq.n	1e7a6 <__aeabi_ddiv+0x16a>
   1e708:	2e00      	cmp	r6, #0
   1e70a:	d100      	bne.n	1e70e <__aeabi_ddiv+0xd2>
   1e70c:	e1bc      	b.n	1ea88 <__aeabi_ddiv+0x44c>
   1e70e:	0030      	movs	r0, r6
   1e710:	f7fe fcf2 	bl	1d0f8 <__clzsi2>
   1e714:	0003      	movs	r3, r0
   1e716:	3b0b      	subs	r3, #11
   1e718:	2b1c      	cmp	r3, #28
   1e71a:	dd00      	ble.n	1e71e <__aeabi_ddiv+0xe2>
   1e71c:	e1ac      	b.n	1ea78 <__aeabi_ddiv+0x43c>
   1e71e:	221d      	movs	r2, #29
   1e720:	1ad3      	subs	r3, r2, r3
   1e722:	465a      	mov	r2, fp
   1e724:	0001      	movs	r1, r0
   1e726:	40da      	lsrs	r2, r3
   1e728:	3908      	subs	r1, #8
   1e72a:	408e      	lsls	r6, r1
   1e72c:	0013      	movs	r3, r2
   1e72e:	4333      	orrs	r3, r6
   1e730:	4699      	mov	r9, r3
   1e732:	465b      	mov	r3, fp
   1e734:	408b      	lsls	r3, r1
   1e736:	4698      	mov	r8, r3
   1e738:	2300      	movs	r3, #0
   1e73a:	4c3c      	ldr	r4, [pc, #240]	; (1e82c <__aeabi_ddiv+0x1f0>)
   1e73c:	2600      	movs	r6, #0
   1e73e:	1a24      	subs	r4, r4, r0
   1e740:	9303      	str	r3, [sp, #12]
   1e742:	e79f      	b.n	1e684 <__aeabi_ddiv+0x48>
   1e744:	4651      	mov	r1, sl
   1e746:	465a      	mov	r2, fp
   1e748:	4311      	orrs	r1, r2
   1e74a:	d129      	bne.n	1e7a0 <__aeabi_ddiv+0x164>
   1e74c:	2200      	movs	r2, #0
   1e74e:	4693      	mov	fp, r2
   1e750:	3202      	adds	r2, #2
   1e752:	e7b1      	b.n	1e6b8 <__aeabi_ddiv+0x7c>
   1e754:	4659      	mov	r1, fp
   1e756:	4301      	orrs	r1, r0
   1e758:	d01e      	beq.n	1e798 <__aeabi_ddiv+0x15c>
   1e75a:	465b      	mov	r3, fp
   1e75c:	2b00      	cmp	r3, #0
   1e75e:	d100      	bne.n	1e762 <__aeabi_ddiv+0x126>
   1e760:	e19e      	b.n	1eaa0 <__aeabi_ddiv+0x464>
   1e762:	4658      	mov	r0, fp
   1e764:	f7fe fcc8 	bl	1d0f8 <__clzsi2>
   1e768:	0003      	movs	r3, r0
   1e76a:	3b0b      	subs	r3, #11
   1e76c:	2b1c      	cmp	r3, #28
   1e76e:	dd00      	ble.n	1e772 <__aeabi_ddiv+0x136>
   1e770:	e18f      	b.n	1ea92 <__aeabi_ddiv+0x456>
   1e772:	0002      	movs	r2, r0
   1e774:	4659      	mov	r1, fp
   1e776:	3a08      	subs	r2, #8
   1e778:	4091      	lsls	r1, r2
   1e77a:	468b      	mov	fp, r1
   1e77c:	211d      	movs	r1, #29
   1e77e:	1acb      	subs	r3, r1, r3
   1e780:	4651      	mov	r1, sl
   1e782:	40d9      	lsrs	r1, r3
   1e784:	000b      	movs	r3, r1
   1e786:	4659      	mov	r1, fp
   1e788:	430b      	orrs	r3, r1
   1e78a:	4651      	mov	r1, sl
   1e78c:	469b      	mov	fp, r3
   1e78e:	4091      	lsls	r1, r2
   1e790:	4b26      	ldr	r3, [pc, #152]	; (1e82c <__aeabi_ddiv+0x1f0>)
   1e792:	2200      	movs	r2, #0
   1e794:	1a1b      	subs	r3, r3, r0
   1e796:	e78f      	b.n	1e6b8 <__aeabi_ddiv+0x7c>
   1e798:	2300      	movs	r3, #0
   1e79a:	2201      	movs	r2, #1
   1e79c:	469b      	mov	fp, r3
   1e79e:	e78b      	b.n	1e6b8 <__aeabi_ddiv+0x7c>
   1e7a0:	4651      	mov	r1, sl
   1e7a2:	2203      	movs	r2, #3
   1e7a4:	e788      	b.n	1e6b8 <__aeabi_ddiv+0x7c>
   1e7a6:	2300      	movs	r3, #0
   1e7a8:	4698      	mov	r8, r3
   1e7aa:	3301      	adds	r3, #1
   1e7ac:	2604      	movs	r6, #4
   1e7ae:	2400      	movs	r4, #0
   1e7b0:	9303      	str	r3, [sp, #12]
   1e7b2:	e767      	b.n	1e684 <__aeabi_ddiv+0x48>
   1e7b4:	2303      	movs	r3, #3
   1e7b6:	46b1      	mov	r9, r6
   1e7b8:	9303      	str	r3, [sp, #12]
   1e7ba:	260c      	movs	r6, #12
   1e7bc:	e762      	b.n	1e684 <__aeabi_ddiv+0x48>
   1e7be:	2a03      	cmp	r2, #3
   1e7c0:	d100      	bne.n	1e7c4 <__aeabi_ddiv+0x188>
   1e7c2:	e25c      	b.n	1ec7e <__aeabi_ddiv+0x642>
   1e7c4:	9b01      	ldr	r3, [sp, #4]
   1e7c6:	2a01      	cmp	r2, #1
   1e7c8:	d000      	beq.n	1e7cc <__aeabi_ddiv+0x190>
   1e7ca:	e1e4      	b.n	1eb96 <__aeabi_ddiv+0x55a>
   1e7cc:	4013      	ands	r3, r2
   1e7ce:	469c      	mov	ip, r3
   1e7d0:	2300      	movs	r3, #0
   1e7d2:	2400      	movs	r4, #0
   1e7d4:	2200      	movs	r2, #0
   1e7d6:	4698      	mov	r8, r3
   1e7d8:	2100      	movs	r1, #0
   1e7da:	0312      	lsls	r2, r2, #12
   1e7dc:	0b13      	lsrs	r3, r2, #12
   1e7de:	0d0a      	lsrs	r2, r1, #20
   1e7e0:	0512      	lsls	r2, r2, #20
   1e7e2:	431a      	orrs	r2, r3
   1e7e4:	0523      	lsls	r3, r4, #20
   1e7e6:	4c12      	ldr	r4, [pc, #72]	; (1e830 <__aeabi_ddiv+0x1f4>)
   1e7e8:	4640      	mov	r0, r8
   1e7ea:	4022      	ands	r2, r4
   1e7ec:	4313      	orrs	r3, r2
   1e7ee:	4662      	mov	r2, ip
   1e7f0:	005b      	lsls	r3, r3, #1
   1e7f2:	07d2      	lsls	r2, r2, #31
   1e7f4:	085b      	lsrs	r3, r3, #1
   1e7f6:	4313      	orrs	r3, r2
   1e7f8:	0019      	movs	r1, r3
   1e7fa:	b007      	add	sp, #28
   1e7fc:	bc3c      	pop	{r2, r3, r4, r5}
   1e7fe:	4690      	mov	r8, r2
   1e800:	4699      	mov	r9, r3
   1e802:	46a2      	mov	sl, r4
   1e804:	46ab      	mov	fp, r5
   1e806:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e808:	2300      	movs	r3, #0
   1e80a:	2280      	movs	r2, #128	; 0x80
   1e80c:	469c      	mov	ip, r3
   1e80e:	0312      	lsls	r2, r2, #12
   1e810:	4698      	mov	r8, r3
   1e812:	4c03      	ldr	r4, [pc, #12]	; (1e820 <__aeabi_ddiv+0x1e4>)
   1e814:	e7e0      	b.n	1e7d8 <__aeabi_ddiv+0x19c>
   1e816:	2300      	movs	r3, #0
   1e818:	4c01      	ldr	r4, [pc, #4]	; (1e820 <__aeabi_ddiv+0x1e4>)
   1e81a:	2200      	movs	r2, #0
   1e81c:	4698      	mov	r8, r3
   1e81e:	e7db      	b.n	1e7d8 <__aeabi_ddiv+0x19c>
   1e820:	000007ff 	.word	0x000007ff
   1e824:	fffffc01 	.word	0xfffffc01
   1e828:	00026b60 	.word	0x00026b60
   1e82c:	fffffc0d 	.word	0xfffffc0d
   1e830:	800fffff 	.word	0x800fffff
   1e834:	45d9      	cmp	r9, fp
   1e836:	d900      	bls.n	1e83a <__aeabi_ddiv+0x1fe>
   1e838:	e139      	b.n	1eaae <__aeabi_ddiv+0x472>
   1e83a:	d100      	bne.n	1e83e <__aeabi_ddiv+0x202>
   1e83c:	e134      	b.n	1eaa8 <__aeabi_ddiv+0x46c>
   1e83e:	2300      	movs	r3, #0
   1e840:	4646      	mov	r6, r8
   1e842:	464d      	mov	r5, r9
   1e844:	469a      	mov	sl, r3
   1e846:	3c01      	subs	r4, #1
   1e848:	465b      	mov	r3, fp
   1e84a:	0e0a      	lsrs	r2, r1, #24
   1e84c:	021b      	lsls	r3, r3, #8
   1e84e:	431a      	orrs	r2, r3
   1e850:	020b      	lsls	r3, r1, #8
   1e852:	0c17      	lsrs	r7, r2, #16
   1e854:	9303      	str	r3, [sp, #12]
   1e856:	0413      	lsls	r3, r2, #16
   1e858:	0c1b      	lsrs	r3, r3, #16
   1e85a:	0039      	movs	r1, r7
   1e85c:	0028      	movs	r0, r5
   1e85e:	4690      	mov	r8, r2
   1e860:	9301      	str	r3, [sp, #4]
   1e862:	f7fe fa5b 	bl	1cd1c <__udivsi3>
   1e866:	0002      	movs	r2, r0
   1e868:	9b01      	ldr	r3, [sp, #4]
   1e86a:	4683      	mov	fp, r0
   1e86c:	435a      	muls	r2, r3
   1e86e:	0028      	movs	r0, r5
   1e870:	0039      	movs	r1, r7
   1e872:	4691      	mov	r9, r2
   1e874:	f7fe fad8 	bl	1ce28 <__aeabi_uidivmod>
   1e878:	0c35      	lsrs	r5, r6, #16
   1e87a:	0409      	lsls	r1, r1, #16
   1e87c:	430d      	orrs	r5, r1
   1e87e:	45a9      	cmp	r9, r5
   1e880:	d90d      	bls.n	1e89e <__aeabi_ddiv+0x262>
   1e882:	465b      	mov	r3, fp
   1e884:	4445      	add	r5, r8
   1e886:	3b01      	subs	r3, #1
   1e888:	45a8      	cmp	r8, r5
   1e88a:	d900      	bls.n	1e88e <__aeabi_ddiv+0x252>
   1e88c:	e13a      	b.n	1eb04 <__aeabi_ddiv+0x4c8>
   1e88e:	45a9      	cmp	r9, r5
   1e890:	d800      	bhi.n	1e894 <__aeabi_ddiv+0x258>
   1e892:	e137      	b.n	1eb04 <__aeabi_ddiv+0x4c8>
   1e894:	2302      	movs	r3, #2
   1e896:	425b      	negs	r3, r3
   1e898:	469c      	mov	ip, r3
   1e89a:	4445      	add	r5, r8
   1e89c:	44e3      	add	fp, ip
   1e89e:	464b      	mov	r3, r9
   1e8a0:	1aeb      	subs	r3, r5, r3
   1e8a2:	0039      	movs	r1, r7
   1e8a4:	0018      	movs	r0, r3
   1e8a6:	9304      	str	r3, [sp, #16]
   1e8a8:	f7fe fa38 	bl	1cd1c <__udivsi3>
   1e8ac:	9b01      	ldr	r3, [sp, #4]
   1e8ae:	0005      	movs	r5, r0
   1e8b0:	4343      	muls	r3, r0
   1e8b2:	0039      	movs	r1, r7
   1e8b4:	9804      	ldr	r0, [sp, #16]
   1e8b6:	4699      	mov	r9, r3
   1e8b8:	f7fe fab6 	bl	1ce28 <__aeabi_uidivmod>
   1e8bc:	0433      	lsls	r3, r6, #16
   1e8be:	0409      	lsls	r1, r1, #16
   1e8c0:	0c1b      	lsrs	r3, r3, #16
   1e8c2:	430b      	orrs	r3, r1
   1e8c4:	4599      	cmp	r9, r3
   1e8c6:	d909      	bls.n	1e8dc <__aeabi_ddiv+0x2a0>
   1e8c8:	4443      	add	r3, r8
   1e8ca:	1e6a      	subs	r2, r5, #1
   1e8cc:	4598      	cmp	r8, r3
   1e8ce:	d900      	bls.n	1e8d2 <__aeabi_ddiv+0x296>
   1e8d0:	e11a      	b.n	1eb08 <__aeabi_ddiv+0x4cc>
   1e8d2:	4599      	cmp	r9, r3
   1e8d4:	d800      	bhi.n	1e8d8 <__aeabi_ddiv+0x29c>
   1e8d6:	e117      	b.n	1eb08 <__aeabi_ddiv+0x4cc>
   1e8d8:	3d02      	subs	r5, #2
   1e8da:	4443      	add	r3, r8
   1e8dc:	464a      	mov	r2, r9
   1e8de:	1a9b      	subs	r3, r3, r2
   1e8e0:	465a      	mov	r2, fp
   1e8e2:	0412      	lsls	r2, r2, #16
   1e8e4:	432a      	orrs	r2, r5
   1e8e6:	9903      	ldr	r1, [sp, #12]
   1e8e8:	4693      	mov	fp, r2
   1e8ea:	0c10      	lsrs	r0, r2, #16
   1e8ec:	0c0a      	lsrs	r2, r1, #16
   1e8ee:	4691      	mov	r9, r2
   1e8f0:	0409      	lsls	r1, r1, #16
   1e8f2:	465a      	mov	r2, fp
   1e8f4:	0c09      	lsrs	r1, r1, #16
   1e8f6:	464e      	mov	r6, r9
   1e8f8:	000d      	movs	r5, r1
   1e8fa:	0412      	lsls	r2, r2, #16
   1e8fc:	0c12      	lsrs	r2, r2, #16
   1e8fe:	4345      	muls	r5, r0
   1e900:	9105      	str	r1, [sp, #20]
   1e902:	4351      	muls	r1, r2
   1e904:	4372      	muls	r2, r6
   1e906:	4370      	muls	r0, r6
   1e908:	1952      	adds	r2, r2, r5
   1e90a:	0c0e      	lsrs	r6, r1, #16
   1e90c:	18b2      	adds	r2, r6, r2
   1e90e:	4295      	cmp	r5, r2
   1e910:	d903      	bls.n	1e91a <__aeabi_ddiv+0x2de>
   1e912:	2580      	movs	r5, #128	; 0x80
   1e914:	026d      	lsls	r5, r5, #9
   1e916:	46ac      	mov	ip, r5
   1e918:	4460      	add	r0, ip
   1e91a:	0c15      	lsrs	r5, r2, #16
   1e91c:	0409      	lsls	r1, r1, #16
   1e91e:	0412      	lsls	r2, r2, #16
   1e920:	0c09      	lsrs	r1, r1, #16
   1e922:	1828      	adds	r0, r5, r0
   1e924:	1852      	adds	r2, r2, r1
   1e926:	4283      	cmp	r3, r0
   1e928:	d200      	bcs.n	1e92c <__aeabi_ddiv+0x2f0>
   1e92a:	e0ce      	b.n	1eaca <__aeabi_ddiv+0x48e>
   1e92c:	d100      	bne.n	1e930 <__aeabi_ddiv+0x2f4>
   1e92e:	e0c8      	b.n	1eac2 <__aeabi_ddiv+0x486>
   1e930:	1a1d      	subs	r5, r3, r0
   1e932:	4653      	mov	r3, sl
   1e934:	1a9e      	subs	r6, r3, r2
   1e936:	45b2      	cmp	sl, r6
   1e938:	4192      	sbcs	r2, r2
   1e93a:	4252      	negs	r2, r2
   1e93c:	1aab      	subs	r3, r5, r2
   1e93e:	469a      	mov	sl, r3
   1e940:	4598      	cmp	r8, r3
   1e942:	d100      	bne.n	1e946 <__aeabi_ddiv+0x30a>
   1e944:	e117      	b.n	1eb76 <__aeabi_ddiv+0x53a>
   1e946:	0039      	movs	r1, r7
   1e948:	0018      	movs	r0, r3
   1e94a:	f7fe f9e7 	bl	1cd1c <__udivsi3>
   1e94e:	9b01      	ldr	r3, [sp, #4]
   1e950:	0005      	movs	r5, r0
   1e952:	4343      	muls	r3, r0
   1e954:	0039      	movs	r1, r7
   1e956:	4650      	mov	r0, sl
   1e958:	9304      	str	r3, [sp, #16]
   1e95a:	f7fe fa65 	bl	1ce28 <__aeabi_uidivmod>
   1e95e:	9804      	ldr	r0, [sp, #16]
   1e960:	040b      	lsls	r3, r1, #16
   1e962:	0c31      	lsrs	r1, r6, #16
   1e964:	4319      	orrs	r1, r3
   1e966:	4288      	cmp	r0, r1
   1e968:	d909      	bls.n	1e97e <__aeabi_ddiv+0x342>
   1e96a:	4441      	add	r1, r8
   1e96c:	1e6b      	subs	r3, r5, #1
   1e96e:	4588      	cmp	r8, r1
   1e970:	d900      	bls.n	1e974 <__aeabi_ddiv+0x338>
   1e972:	e107      	b.n	1eb84 <__aeabi_ddiv+0x548>
   1e974:	4288      	cmp	r0, r1
   1e976:	d800      	bhi.n	1e97a <__aeabi_ddiv+0x33e>
   1e978:	e104      	b.n	1eb84 <__aeabi_ddiv+0x548>
   1e97a:	3d02      	subs	r5, #2
   1e97c:	4441      	add	r1, r8
   1e97e:	9b04      	ldr	r3, [sp, #16]
   1e980:	1acb      	subs	r3, r1, r3
   1e982:	0018      	movs	r0, r3
   1e984:	0039      	movs	r1, r7
   1e986:	9304      	str	r3, [sp, #16]
   1e988:	f7fe f9c8 	bl	1cd1c <__udivsi3>
   1e98c:	9b01      	ldr	r3, [sp, #4]
   1e98e:	4682      	mov	sl, r0
   1e990:	4343      	muls	r3, r0
   1e992:	0039      	movs	r1, r7
   1e994:	9804      	ldr	r0, [sp, #16]
   1e996:	9301      	str	r3, [sp, #4]
   1e998:	f7fe fa46 	bl	1ce28 <__aeabi_uidivmod>
   1e99c:	9801      	ldr	r0, [sp, #4]
   1e99e:	040b      	lsls	r3, r1, #16
   1e9a0:	0431      	lsls	r1, r6, #16
   1e9a2:	0c09      	lsrs	r1, r1, #16
   1e9a4:	4319      	orrs	r1, r3
   1e9a6:	4288      	cmp	r0, r1
   1e9a8:	d90d      	bls.n	1e9c6 <__aeabi_ddiv+0x38a>
   1e9aa:	4653      	mov	r3, sl
   1e9ac:	4441      	add	r1, r8
   1e9ae:	3b01      	subs	r3, #1
   1e9b0:	4588      	cmp	r8, r1
   1e9b2:	d900      	bls.n	1e9b6 <__aeabi_ddiv+0x37a>
   1e9b4:	e0e8      	b.n	1eb88 <__aeabi_ddiv+0x54c>
   1e9b6:	4288      	cmp	r0, r1
   1e9b8:	d800      	bhi.n	1e9bc <__aeabi_ddiv+0x380>
   1e9ba:	e0e5      	b.n	1eb88 <__aeabi_ddiv+0x54c>
   1e9bc:	2302      	movs	r3, #2
   1e9be:	425b      	negs	r3, r3
   1e9c0:	469c      	mov	ip, r3
   1e9c2:	4441      	add	r1, r8
   1e9c4:	44e2      	add	sl, ip
   1e9c6:	9b01      	ldr	r3, [sp, #4]
   1e9c8:	042d      	lsls	r5, r5, #16
   1e9ca:	1ace      	subs	r6, r1, r3
   1e9cc:	4651      	mov	r1, sl
   1e9ce:	4329      	orrs	r1, r5
   1e9d0:	9d05      	ldr	r5, [sp, #20]
   1e9d2:	464f      	mov	r7, r9
   1e9d4:	002a      	movs	r2, r5
   1e9d6:	040b      	lsls	r3, r1, #16
   1e9d8:	0c08      	lsrs	r0, r1, #16
   1e9da:	0c1b      	lsrs	r3, r3, #16
   1e9dc:	435a      	muls	r2, r3
   1e9de:	4345      	muls	r5, r0
   1e9e0:	437b      	muls	r3, r7
   1e9e2:	4378      	muls	r0, r7
   1e9e4:	195b      	adds	r3, r3, r5
   1e9e6:	0c17      	lsrs	r7, r2, #16
   1e9e8:	18fb      	adds	r3, r7, r3
   1e9ea:	429d      	cmp	r5, r3
   1e9ec:	d903      	bls.n	1e9f6 <__aeabi_ddiv+0x3ba>
   1e9ee:	2580      	movs	r5, #128	; 0x80
   1e9f0:	026d      	lsls	r5, r5, #9
   1e9f2:	46ac      	mov	ip, r5
   1e9f4:	4460      	add	r0, ip
   1e9f6:	0c1d      	lsrs	r5, r3, #16
   1e9f8:	0412      	lsls	r2, r2, #16
   1e9fa:	041b      	lsls	r3, r3, #16
   1e9fc:	0c12      	lsrs	r2, r2, #16
   1e9fe:	1828      	adds	r0, r5, r0
   1ea00:	189b      	adds	r3, r3, r2
   1ea02:	4286      	cmp	r6, r0
   1ea04:	d200      	bcs.n	1ea08 <__aeabi_ddiv+0x3cc>
   1ea06:	e093      	b.n	1eb30 <__aeabi_ddiv+0x4f4>
   1ea08:	d100      	bne.n	1ea0c <__aeabi_ddiv+0x3d0>
   1ea0a:	e08e      	b.n	1eb2a <__aeabi_ddiv+0x4ee>
   1ea0c:	2301      	movs	r3, #1
   1ea0e:	4319      	orrs	r1, r3
   1ea10:	4ba0      	ldr	r3, [pc, #640]	; (1ec94 <__aeabi_ddiv+0x658>)
   1ea12:	18e3      	adds	r3, r4, r3
   1ea14:	2b00      	cmp	r3, #0
   1ea16:	dc00      	bgt.n	1ea1a <__aeabi_ddiv+0x3de>
   1ea18:	e099      	b.n	1eb4e <__aeabi_ddiv+0x512>
   1ea1a:	074a      	lsls	r2, r1, #29
   1ea1c:	d000      	beq.n	1ea20 <__aeabi_ddiv+0x3e4>
   1ea1e:	e09e      	b.n	1eb5e <__aeabi_ddiv+0x522>
   1ea20:	465a      	mov	r2, fp
   1ea22:	01d2      	lsls	r2, r2, #7
   1ea24:	d506      	bpl.n	1ea34 <__aeabi_ddiv+0x3f8>
   1ea26:	465a      	mov	r2, fp
   1ea28:	4b9b      	ldr	r3, [pc, #620]	; (1ec98 <__aeabi_ddiv+0x65c>)
   1ea2a:	401a      	ands	r2, r3
   1ea2c:	2380      	movs	r3, #128	; 0x80
   1ea2e:	4693      	mov	fp, r2
   1ea30:	00db      	lsls	r3, r3, #3
   1ea32:	18e3      	adds	r3, r4, r3
   1ea34:	4a99      	ldr	r2, [pc, #612]	; (1ec9c <__aeabi_ddiv+0x660>)
   1ea36:	4293      	cmp	r3, r2
   1ea38:	dd68      	ble.n	1eb0c <__aeabi_ddiv+0x4d0>
   1ea3a:	2301      	movs	r3, #1
   1ea3c:	9a02      	ldr	r2, [sp, #8]
   1ea3e:	4c98      	ldr	r4, [pc, #608]	; (1eca0 <__aeabi_ddiv+0x664>)
   1ea40:	401a      	ands	r2, r3
   1ea42:	2300      	movs	r3, #0
   1ea44:	4694      	mov	ip, r2
   1ea46:	4698      	mov	r8, r3
   1ea48:	2200      	movs	r2, #0
   1ea4a:	e6c5      	b.n	1e7d8 <__aeabi_ddiv+0x19c>
   1ea4c:	2280      	movs	r2, #128	; 0x80
   1ea4e:	464b      	mov	r3, r9
   1ea50:	0312      	lsls	r2, r2, #12
   1ea52:	4213      	tst	r3, r2
   1ea54:	d00a      	beq.n	1ea6c <__aeabi_ddiv+0x430>
   1ea56:	465b      	mov	r3, fp
   1ea58:	4213      	tst	r3, r2
   1ea5a:	d106      	bne.n	1ea6a <__aeabi_ddiv+0x42e>
   1ea5c:	431a      	orrs	r2, r3
   1ea5e:	0312      	lsls	r2, r2, #12
   1ea60:	0b12      	lsrs	r2, r2, #12
   1ea62:	46ac      	mov	ip, r5
   1ea64:	4688      	mov	r8, r1
   1ea66:	4c8e      	ldr	r4, [pc, #568]	; (1eca0 <__aeabi_ddiv+0x664>)
   1ea68:	e6b6      	b.n	1e7d8 <__aeabi_ddiv+0x19c>
   1ea6a:	464b      	mov	r3, r9
   1ea6c:	431a      	orrs	r2, r3
   1ea6e:	0312      	lsls	r2, r2, #12
   1ea70:	0b12      	lsrs	r2, r2, #12
   1ea72:	46bc      	mov	ip, r7
   1ea74:	4c8a      	ldr	r4, [pc, #552]	; (1eca0 <__aeabi_ddiv+0x664>)
   1ea76:	e6af      	b.n	1e7d8 <__aeabi_ddiv+0x19c>
   1ea78:	0003      	movs	r3, r0
   1ea7a:	465a      	mov	r2, fp
   1ea7c:	3b28      	subs	r3, #40	; 0x28
   1ea7e:	409a      	lsls	r2, r3
   1ea80:	2300      	movs	r3, #0
   1ea82:	4691      	mov	r9, r2
   1ea84:	4698      	mov	r8, r3
   1ea86:	e657      	b.n	1e738 <__aeabi_ddiv+0xfc>
   1ea88:	4658      	mov	r0, fp
   1ea8a:	f7fe fb35 	bl	1d0f8 <__clzsi2>
   1ea8e:	3020      	adds	r0, #32
   1ea90:	e640      	b.n	1e714 <__aeabi_ddiv+0xd8>
   1ea92:	0003      	movs	r3, r0
   1ea94:	4652      	mov	r2, sl
   1ea96:	3b28      	subs	r3, #40	; 0x28
   1ea98:	409a      	lsls	r2, r3
   1ea9a:	2100      	movs	r1, #0
   1ea9c:	4693      	mov	fp, r2
   1ea9e:	e677      	b.n	1e790 <__aeabi_ddiv+0x154>
   1eaa0:	f7fe fb2a 	bl	1d0f8 <__clzsi2>
   1eaa4:	3020      	adds	r0, #32
   1eaa6:	e65f      	b.n	1e768 <__aeabi_ddiv+0x12c>
   1eaa8:	4588      	cmp	r8, r1
   1eaaa:	d200      	bcs.n	1eaae <__aeabi_ddiv+0x472>
   1eaac:	e6c7      	b.n	1e83e <__aeabi_ddiv+0x202>
   1eaae:	464b      	mov	r3, r9
   1eab0:	07de      	lsls	r6, r3, #31
   1eab2:	085d      	lsrs	r5, r3, #1
   1eab4:	4643      	mov	r3, r8
   1eab6:	085b      	lsrs	r3, r3, #1
   1eab8:	431e      	orrs	r6, r3
   1eaba:	4643      	mov	r3, r8
   1eabc:	07db      	lsls	r3, r3, #31
   1eabe:	469a      	mov	sl, r3
   1eac0:	e6c2      	b.n	1e848 <__aeabi_ddiv+0x20c>
   1eac2:	2500      	movs	r5, #0
   1eac4:	4592      	cmp	sl, r2
   1eac6:	d300      	bcc.n	1eaca <__aeabi_ddiv+0x48e>
   1eac8:	e733      	b.n	1e932 <__aeabi_ddiv+0x2f6>
   1eaca:	9e03      	ldr	r6, [sp, #12]
   1eacc:	4659      	mov	r1, fp
   1eace:	46b4      	mov	ip, r6
   1ead0:	44e2      	add	sl, ip
   1ead2:	45b2      	cmp	sl, r6
   1ead4:	41ad      	sbcs	r5, r5
   1ead6:	426d      	negs	r5, r5
   1ead8:	4445      	add	r5, r8
   1eada:	18eb      	adds	r3, r5, r3
   1eadc:	3901      	subs	r1, #1
   1eade:	4598      	cmp	r8, r3
   1eae0:	d207      	bcs.n	1eaf2 <__aeabi_ddiv+0x4b6>
   1eae2:	4298      	cmp	r0, r3
   1eae4:	d900      	bls.n	1eae8 <__aeabi_ddiv+0x4ac>
   1eae6:	e07f      	b.n	1ebe8 <__aeabi_ddiv+0x5ac>
   1eae8:	d100      	bne.n	1eaec <__aeabi_ddiv+0x4b0>
   1eaea:	e0bc      	b.n	1ec66 <__aeabi_ddiv+0x62a>
   1eaec:	1a1d      	subs	r5, r3, r0
   1eaee:	468b      	mov	fp, r1
   1eaf0:	e71f      	b.n	1e932 <__aeabi_ddiv+0x2f6>
   1eaf2:	4598      	cmp	r8, r3
   1eaf4:	d1fa      	bne.n	1eaec <__aeabi_ddiv+0x4b0>
   1eaf6:	9d03      	ldr	r5, [sp, #12]
   1eaf8:	4555      	cmp	r5, sl
   1eafa:	d9f2      	bls.n	1eae2 <__aeabi_ddiv+0x4a6>
   1eafc:	4643      	mov	r3, r8
   1eafe:	468b      	mov	fp, r1
   1eb00:	1a1d      	subs	r5, r3, r0
   1eb02:	e716      	b.n	1e932 <__aeabi_ddiv+0x2f6>
   1eb04:	469b      	mov	fp, r3
   1eb06:	e6ca      	b.n	1e89e <__aeabi_ddiv+0x262>
   1eb08:	0015      	movs	r5, r2
   1eb0a:	e6e7      	b.n	1e8dc <__aeabi_ddiv+0x2a0>
   1eb0c:	465a      	mov	r2, fp
   1eb0e:	08c9      	lsrs	r1, r1, #3
   1eb10:	0752      	lsls	r2, r2, #29
   1eb12:	430a      	orrs	r2, r1
   1eb14:	055b      	lsls	r3, r3, #21
   1eb16:	4690      	mov	r8, r2
   1eb18:	0d5c      	lsrs	r4, r3, #21
   1eb1a:	465a      	mov	r2, fp
   1eb1c:	2301      	movs	r3, #1
   1eb1e:	9902      	ldr	r1, [sp, #8]
   1eb20:	0252      	lsls	r2, r2, #9
   1eb22:	4019      	ands	r1, r3
   1eb24:	0b12      	lsrs	r2, r2, #12
   1eb26:	468c      	mov	ip, r1
   1eb28:	e656      	b.n	1e7d8 <__aeabi_ddiv+0x19c>
   1eb2a:	2b00      	cmp	r3, #0
   1eb2c:	d100      	bne.n	1eb30 <__aeabi_ddiv+0x4f4>
   1eb2e:	e76f      	b.n	1ea10 <__aeabi_ddiv+0x3d4>
   1eb30:	4446      	add	r6, r8
   1eb32:	1e4a      	subs	r2, r1, #1
   1eb34:	45b0      	cmp	r8, r6
   1eb36:	d929      	bls.n	1eb8c <__aeabi_ddiv+0x550>
   1eb38:	0011      	movs	r1, r2
   1eb3a:	4286      	cmp	r6, r0
   1eb3c:	d000      	beq.n	1eb40 <__aeabi_ddiv+0x504>
   1eb3e:	e765      	b.n	1ea0c <__aeabi_ddiv+0x3d0>
   1eb40:	9a03      	ldr	r2, [sp, #12]
   1eb42:	4293      	cmp	r3, r2
   1eb44:	d000      	beq.n	1eb48 <__aeabi_ddiv+0x50c>
   1eb46:	e761      	b.n	1ea0c <__aeabi_ddiv+0x3d0>
   1eb48:	e762      	b.n	1ea10 <__aeabi_ddiv+0x3d4>
   1eb4a:	2101      	movs	r1, #1
   1eb4c:	4249      	negs	r1, r1
   1eb4e:	2001      	movs	r0, #1
   1eb50:	1ac2      	subs	r2, r0, r3
   1eb52:	2a38      	cmp	r2, #56	; 0x38
   1eb54:	dd21      	ble.n	1eb9a <__aeabi_ddiv+0x55e>
   1eb56:	9b02      	ldr	r3, [sp, #8]
   1eb58:	4003      	ands	r3, r0
   1eb5a:	469c      	mov	ip, r3
   1eb5c:	e638      	b.n	1e7d0 <__aeabi_ddiv+0x194>
   1eb5e:	220f      	movs	r2, #15
   1eb60:	400a      	ands	r2, r1
   1eb62:	2a04      	cmp	r2, #4
   1eb64:	d100      	bne.n	1eb68 <__aeabi_ddiv+0x52c>
   1eb66:	e75b      	b.n	1ea20 <__aeabi_ddiv+0x3e4>
   1eb68:	000a      	movs	r2, r1
   1eb6a:	1d11      	adds	r1, r2, #4
   1eb6c:	4291      	cmp	r1, r2
   1eb6e:	4192      	sbcs	r2, r2
   1eb70:	4252      	negs	r2, r2
   1eb72:	4493      	add	fp, r2
   1eb74:	e754      	b.n	1ea20 <__aeabi_ddiv+0x3e4>
   1eb76:	4b47      	ldr	r3, [pc, #284]	; (1ec94 <__aeabi_ddiv+0x658>)
   1eb78:	18e3      	adds	r3, r4, r3
   1eb7a:	2b00      	cmp	r3, #0
   1eb7c:	dde5      	ble.n	1eb4a <__aeabi_ddiv+0x50e>
   1eb7e:	2201      	movs	r2, #1
   1eb80:	4252      	negs	r2, r2
   1eb82:	e7f2      	b.n	1eb6a <__aeabi_ddiv+0x52e>
   1eb84:	001d      	movs	r5, r3
   1eb86:	e6fa      	b.n	1e97e <__aeabi_ddiv+0x342>
   1eb88:	469a      	mov	sl, r3
   1eb8a:	e71c      	b.n	1e9c6 <__aeabi_ddiv+0x38a>
   1eb8c:	42b0      	cmp	r0, r6
   1eb8e:	d839      	bhi.n	1ec04 <__aeabi_ddiv+0x5c8>
   1eb90:	d06e      	beq.n	1ec70 <__aeabi_ddiv+0x634>
   1eb92:	0011      	movs	r1, r2
   1eb94:	e73a      	b.n	1ea0c <__aeabi_ddiv+0x3d0>
   1eb96:	9302      	str	r3, [sp, #8]
   1eb98:	e73a      	b.n	1ea10 <__aeabi_ddiv+0x3d4>
   1eb9a:	2a1f      	cmp	r2, #31
   1eb9c:	dc3c      	bgt.n	1ec18 <__aeabi_ddiv+0x5dc>
   1eb9e:	2320      	movs	r3, #32
   1eba0:	1a9b      	subs	r3, r3, r2
   1eba2:	000c      	movs	r4, r1
   1eba4:	4658      	mov	r0, fp
   1eba6:	4099      	lsls	r1, r3
   1eba8:	4098      	lsls	r0, r3
   1ebaa:	1e4b      	subs	r3, r1, #1
   1ebac:	4199      	sbcs	r1, r3
   1ebae:	465b      	mov	r3, fp
   1ebb0:	40d4      	lsrs	r4, r2
   1ebb2:	40d3      	lsrs	r3, r2
   1ebb4:	4320      	orrs	r0, r4
   1ebb6:	4308      	orrs	r0, r1
   1ebb8:	001a      	movs	r2, r3
   1ebba:	0743      	lsls	r3, r0, #29
   1ebbc:	d009      	beq.n	1ebd2 <__aeabi_ddiv+0x596>
   1ebbe:	230f      	movs	r3, #15
   1ebc0:	4003      	ands	r3, r0
   1ebc2:	2b04      	cmp	r3, #4
   1ebc4:	d005      	beq.n	1ebd2 <__aeabi_ddiv+0x596>
   1ebc6:	0001      	movs	r1, r0
   1ebc8:	1d08      	adds	r0, r1, #4
   1ebca:	4288      	cmp	r0, r1
   1ebcc:	419b      	sbcs	r3, r3
   1ebce:	425b      	negs	r3, r3
   1ebd0:	18d2      	adds	r2, r2, r3
   1ebd2:	0213      	lsls	r3, r2, #8
   1ebd4:	d53a      	bpl.n	1ec4c <__aeabi_ddiv+0x610>
   1ebd6:	2301      	movs	r3, #1
   1ebd8:	9a02      	ldr	r2, [sp, #8]
   1ebda:	2401      	movs	r4, #1
   1ebdc:	401a      	ands	r2, r3
   1ebde:	2300      	movs	r3, #0
   1ebe0:	4694      	mov	ip, r2
   1ebe2:	4698      	mov	r8, r3
   1ebe4:	2200      	movs	r2, #0
   1ebe6:	e5f7      	b.n	1e7d8 <__aeabi_ddiv+0x19c>
   1ebe8:	2102      	movs	r1, #2
   1ebea:	4249      	negs	r1, r1
   1ebec:	468c      	mov	ip, r1
   1ebee:	9d03      	ldr	r5, [sp, #12]
   1ebf0:	44e3      	add	fp, ip
   1ebf2:	46ac      	mov	ip, r5
   1ebf4:	44e2      	add	sl, ip
   1ebf6:	45aa      	cmp	sl, r5
   1ebf8:	41ad      	sbcs	r5, r5
   1ebfa:	426d      	negs	r5, r5
   1ebfc:	4445      	add	r5, r8
   1ebfe:	18ed      	adds	r5, r5, r3
   1ec00:	1a2d      	subs	r5, r5, r0
   1ec02:	e696      	b.n	1e932 <__aeabi_ddiv+0x2f6>
   1ec04:	1e8a      	subs	r2, r1, #2
   1ec06:	9903      	ldr	r1, [sp, #12]
   1ec08:	004d      	lsls	r5, r1, #1
   1ec0a:	428d      	cmp	r5, r1
   1ec0c:	4189      	sbcs	r1, r1
   1ec0e:	4249      	negs	r1, r1
   1ec10:	4441      	add	r1, r8
   1ec12:	1876      	adds	r6, r6, r1
   1ec14:	9503      	str	r5, [sp, #12]
   1ec16:	e78f      	b.n	1eb38 <__aeabi_ddiv+0x4fc>
   1ec18:	201f      	movs	r0, #31
   1ec1a:	4240      	negs	r0, r0
   1ec1c:	1ac3      	subs	r3, r0, r3
   1ec1e:	4658      	mov	r0, fp
   1ec20:	40d8      	lsrs	r0, r3
   1ec22:	0003      	movs	r3, r0
   1ec24:	2a20      	cmp	r2, #32
   1ec26:	d028      	beq.n	1ec7a <__aeabi_ddiv+0x63e>
   1ec28:	2040      	movs	r0, #64	; 0x40
   1ec2a:	465d      	mov	r5, fp
   1ec2c:	1a82      	subs	r2, r0, r2
   1ec2e:	4095      	lsls	r5, r2
   1ec30:	4329      	orrs	r1, r5
   1ec32:	1e4a      	subs	r2, r1, #1
   1ec34:	4191      	sbcs	r1, r2
   1ec36:	4319      	orrs	r1, r3
   1ec38:	2307      	movs	r3, #7
   1ec3a:	2200      	movs	r2, #0
   1ec3c:	400b      	ands	r3, r1
   1ec3e:	d009      	beq.n	1ec54 <__aeabi_ddiv+0x618>
   1ec40:	230f      	movs	r3, #15
   1ec42:	2200      	movs	r2, #0
   1ec44:	400b      	ands	r3, r1
   1ec46:	0008      	movs	r0, r1
   1ec48:	2b04      	cmp	r3, #4
   1ec4a:	d1bd      	bne.n	1ebc8 <__aeabi_ddiv+0x58c>
   1ec4c:	0001      	movs	r1, r0
   1ec4e:	0753      	lsls	r3, r2, #29
   1ec50:	0252      	lsls	r2, r2, #9
   1ec52:	0b12      	lsrs	r2, r2, #12
   1ec54:	08c9      	lsrs	r1, r1, #3
   1ec56:	4319      	orrs	r1, r3
   1ec58:	2301      	movs	r3, #1
   1ec5a:	4688      	mov	r8, r1
   1ec5c:	9902      	ldr	r1, [sp, #8]
   1ec5e:	2400      	movs	r4, #0
   1ec60:	4019      	ands	r1, r3
   1ec62:	468c      	mov	ip, r1
   1ec64:	e5b8      	b.n	1e7d8 <__aeabi_ddiv+0x19c>
   1ec66:	4552      	cmp	r2, sl
   1ec68:	d8be      	bhi.n	1ebe8 <__aeabi_ddiv+0x5ac>
   1ec6a:	468b      	mov	fp, r1
   1ec6c:	2500      	movs	r5, #0
   1ec6e:	e660      	b.n	1e932 <__aeabi_ddiv+0x2f6>
   1ec70:	9d03      	ldr	r5, [sp, #12]
   1ec72:	429d      	cmp	r5, r3
   1ec74:	d3c6      	bcc.n	1ec04 <__aeabi_ddiv+0x5c8>
   1ec76:	0011      	movs	r1, r2
   1ec78:	e762      	b.n	1eb40 <__aeabi_ddiv+0x504>
   1ec7a:	2500      	movs	r5, #0
   1ec7c:	e7d8      	b.n	1ec30 <__aeabi_ddiv+0x5f4>
   1ec7e:	2280      	movs	r2, #128	; 0x80
   1ec80:	465b      	mov	r3, fp
   1ec82:	0312      	lsls	r2, r2, #12
   1ec84:	431a      	orrs	r2, r3
   1ec86:	9b01      	ldr	r3, [sp, #4]
   1ec88:	0312      	lsls	r2, r2, #12
   1ec8a:	0b12      	lsrs	r2, r2, #12
   1ec8c:	469c      	mov	ip, r3
   1ec8e:	4688      	mov	r8, r1
   1ec90:	4c03      	ldr	r4, [pc, #12]	; (1eca0 <__aeabi_ddiv+0x664>)
   1ec92:	e5a1      	b.n	1e7d8 <__aeabi_ddiv+0x19c>
   1ec94:	000003ff 	.word	0x000003ff
   1ec98:	feffffff 	.word	0xfeffffff
   1ec9c:	000007fe 	.word	0x000007fe
   1eca0:	000007ff 	.word	0x000007ff

0001eca4 <__eqdf2>:
   1eca4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1eca6:	464f      	mov	r7, r9
   1eca8:	4646      	mov	r6, r8
   1ecaa:	46d6      	mov	lr, sl
   1ecac:	005c      	lsls	r4, r3, #1
   1ecae:	b5c0      	push	{r6, r7, lr}
   1ecb0:	031f      	lsls	r7, r3, #12
   1ecb2:	0fdb      	lsrs	r3, r3, #31
   1ecb4:	469a      	mov	sl, r3
   1ecb6:	4b17      	ldr	r3, [pc, #92]	; (1ed14 <__eqdf2+0x70>)
   1ecb8:	030e      	lsls	r6, r1, #12
   1ecba:	004d      	lsls	r5, r1, #1
   1ecbc:	4684      	mov	ip, r0
   1ecbe:	4680      	mov	r8, r0
   1ecc0:	0b36      	lsrs	r6, r6, #12
   1ecc2:	0d6d      	lsrs	r5, r5, #21
   1ecc4:	0fc9      	lsrs	r1, r1, #31
   1ecc6:	4691      	mov	r9, r2
   1ecc8:	0b3f      	lsrs	r7, r7, #12
   1ecca:	0d64      	lsrs	r4, r4, #21
   1eccc:	2001      	movs	r0, #1
   1ecce:	429d      	cmp	r5, r3
   1ecd0:	d008      	beq.n	1ece4 <__eqdf2+0x40>
   1ecd2:	429c      	cmp	r4, r3
   1ecd4:	d001      	beq.n	1ecda <__eqdf2+0x36>
   1ecd6:	42a5      	cmp	r5, r4
   1ecd8:	d00b      	beq.n	1ecf2 <__eqdf2+0x4e>
   1ecda:	bc1c      	pop	{r2, r3, r4}
   1ecdc:	4690      	mov	r8, r2
   1ecde:	4699      	mov	r9, r3
   1ece0:	46a2      	mov	sl, r4
   1ece2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ece4:	4663      	mov	r3, ip
   1ece6:	4333      	orrs	r3, r6
   1ece8:	d1f7      	bne.n	1ecda <__eqdf2+0x36>
   1ecea:	42ac      	cmp	r4, r5
   1ecec:	d1f5      	bne.n	1ecda <__eqdf2+0x36>
   1ecee:	433a      	orrs	r2, r7
   1ecf0:	d1f3      	bne.n	1ecda <__eqdf2+0x36>
   1ecf2:	2001      	movs	r0, #1
   1ecf4:	42be      	cmp	r6, r7
   1ecf6:	d1f0      	bne.n	1ecda <__eqdf2+0x36>
   1ecf8:	45c8      	cmp	r8, r9
   1ecfa:	d1ee      	bne.n	1ecda <__eqdf2+0x36>
   1ecfc:	4551      	cmp	r1, sl
   1ecfe:	d007      	beq.n	1ed10 <__eqdf2+0x6c>
   1ed00:	2d00      	cmp	r5, #0
   1ed02:	d1ea      	bne.n	1ecda <__eqdf2+0x36>
   1ed04:	4663      	mov	r3, ip
   1ed06:	431e      	orrs	r6, r3
   1ed08:	0030      	movs	r0, r6
   1ed0a:	1e46      	subs	r6, r0, #1
   1ed0c:	41b0      	sbcs	r0, r6
   1ed0e:	e7e4      	b.n	1ecda <__eqdf2+0x36>
   1ed10:	2000      	movs	r0, #0
   1ed12:	e7e2      	b.n	1ecda <__eqdf2+0x36>
   1ed14:	000007ff 	.word	0x000007ff

0001ed18 <__gedf2>:
   1ed18:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ed1a:	4645      	mov	r5, r8
   1ed1c:	46de      	mov	lr, fp
   1ed1e:	4657      	mov	r7, sl
   1ed20:	464e      	mov	r6, r9
   1ed22:	b5e0      	push	{r5, r6, r7, lr}
   1ed24:	031f      	lsls	r7, r3, #12
   1ed26:	0b3d      	lsrs	r5, r7, #12
   1ed28:	4f2c      	ldr	r7, [pc, #176]	; (1eddc <__gedf2+0xc4>)
   1ed2a:	030e      	lsls	r6, r1, #12
   1ed2c:	004c      	lsls	r4, r1, #1
   1ed2e:	46ab      	mov	fp, r5
   1ed30:	005d      	lsls	r5, r3, #1
   1ed32:	4684      	mov	ip, r0
   1ed34:	0b36      	lsrs	r6, r6, #12
   1ed36:	0d64      	lsrs	r4, r4, #21
   1ed38:	0fc9      	lsrs	r1, r1, #31
   1ed3a:	4690      	mov	r8, r2
   1ed3c:	0d6d      	lsrs	r5, r5, #21
   1ed3e:	0fdb      	lsrs	r3, r3, #31
   1ed40:	42bc      	cmp	r4, r7
   1ed42:	d02a      	beq.n	1ed9a <__gedf2+0x82>
   1ed44:	4f25      	ldr	r7, [pc, #148]	; (1eddc <__gedf2+0xc4>)
   1ed46:	42bd      	cmp	r5, r7
   1ed48:	d02d      	beq.n	1eda6 <__gedf2+0x8e>
   1ed4a:	2c00      	cmp	r4, #0
   1ed4c:	d10f      	bne.n	1ed6e <__gedf2+0x56>
   1ed4e:	4330      	orrs	r0, r6
   1ed50:	0007      	movs	r7, r0
   1ed52:	4681      	mov	r9, r0
   1ed54:	4278      	negs	r0, r7
   1ed56:	4178      	adcs	r0, r7
   1ed58:	b2c0      	uxtb	r0, r0
   1ed5a:	2d00      	cmp	r5, #0
   1ed5c:	d117      	bne.n	1ed8e <__gedf2+0x76>
   1ed5e:	465f      	mov	r7, fp
   1ed60:	433a      	orrs	r2, r7
   1ed62:	d114      	bne.n	1ed8e <__gedf2+0x76>
   1ed64:	464b      	mov	r3, r9
   1ed66:	2000      	movs	r0, #0
   1ed68:	2b00      	cmp	r3, #0
   1ed6a:	d00a      	beq.n	1ed82 <__gedf2+0x6a>
   1ed6c:	e006      	b.n	1ed7c <__gedf2+0x64>
   1ed6e:	2d00      	cmp	r5, #0
   1ed70:	d102      	bne.n	1ed78 <__gedf2+0x60>
   1ed72:	4658      	mov	r0, fp
   1ed74:	4302      	orrs	r2, r0
   1ed76:	d001      	beq.n	1ed7c <__gedf2+0x64>
   1ed78:	4299      	cmp	r1, r3
   1ed7a:	d018      	beq.n	1edae <__gedf2+0x96>
   1ed7c:	4248      	negs	r0, r1
   1ed7e:	2101      	movs	r1, #1
   1ed80:	4308      	orrs	r0, r1
   1ed82:	bc3c      	pop	{r2, r3, r4, r5}
   1ed84:	4690      	mov	r8, r2
   1ed86:	4699      	mov	r9, r3
   1ed88:	46a2      	mov	sl, r4
   1ed8a:	46ab      	mov	fp, r5
   1ed8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ed8e:	2800      	cmp	r0, #0
   1ed90:	d0f2      	beq.n	1ed78 <__gedf2+0x60>
   1ed92:	2001      	movs	r0, #1
   1ed94:	3b01      	subs	r3, #1
   1ed96:	4318      	orrs	r0, r3
   1ed98:	e7f3      	b.n	1ed82 <__gedf2+0x6a>
   1ed9a:	0037      	movs	r7, r6
   1ed9c:	4307      	orrs	r7, r0
   1ed9e:	d0d1      	beq.n	1ed44 <__gedf2+0x2c>
   1eda0:	2002      	movs	r0, #2
   1eda2:	4240      	negs	r0, r0
   1eda4:	e7ed      	b.n	1ed82 <__gedf2+0x6a>
   1eda6:	465f      	mov	r7, fp
   1eda8:	4317      	orrs	r7, r2
   1edaa:	d0ce      	beq.n	1ed4a <__gedf2+0x32>
   1edac:	e7f8      	b.n	1eda0 <__gedf2+0x88>
   1edae:	42ac      	cmp	r4, r5
   1edb0:	dce4      	bgt.n	1ed7c <__gedf2+0x64>
   1edb2:	da03      	bge.n	1edbc <__gedf2+0xa4>
   1edb4:	1e48      	subs	r0, r1, #1
   1edb6:	2101      	movs	r1, #1
   1edb8:	4308      	orrs	r0, r1
   1edba:	e7e2      	b.n	1ed82 <__gedf2+0x6a>
   1edbc:	455e      	cmp	r6, fp
   1edbe:	d8dd      	bhi.n	1ed7c <__gedf2+0x64>
   1edc0:	d006      	beq.n	1edd0 <__gedf2+0xb8>
   1edc2:	2000      	movs	r0, #0
   1edc4:	455e      	cmp	r6, fp
   1edc6:	d2dc      	bcs.n	1ed82 <__gedf2+0x6a>
   1edc8:	2301      	movs	r3, #1
   1edca:	1e48      	subs	r0, r1, #1
   1edcc:	4318      	orrs	r0, r3
   1edce:	e7d8      	b.n	1ed82 <__gedf2+0x6a>
   1edd0:	45c4      	cmp	ip, r8
   1edd2:	d8d3      	bhi.n	1ed7c <__gedf2+0x64>
   1edd4:	2000      	movs	r0, #0
   1edd6:	45c4      	cmp	ip, r8
   1edd8:	d3f6      	bcc.n	1edc8 <__gedf2+0xb0>
   1edda:	e7d2      	b.n	1ed82 <__gedf2+0x6a>
   1eddc:	000007ff 	.word	0x000007ff

0001ede0 <__ledf2>:
   1ede0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ede2:	464e      	mov	r6, r9
   1ede4:	4645      	mov	r5, r8
   1ede6:	46de      	mov	lr, fp
   1ede8:	4657      	mov	r7, sl
   1edea:	005c      	lsls	r4, r3, #1
   1edec:	b5e0      	push	{r5, r6, r7, lr}
   1edee:	031f      	lsls	r7, r3, #12
   1edf0:	0fdb      	lsrs	r3, r3, #31
   1edf2:	4699      	mov	r9, r3
   1edf4:	4b2a      	ldr	r3, [pc, #168]	; (1eea0 <__ledf2+0xc0>)
   1edf6:	030e      	lsls	r6, r1, #12
   1edf8:	004d      	lsls	r5, r1, #1
   1edfa:	0fc9      	lsrs	r1, r1, #31
   1edfc:	4684      	mov	ip, r0
   1edfe:	0b36      	lsrs	r6, r6, #12
   1ee00:	0d6d      	lsrs	r5, r5, #21
   1ee02:	468b      	mov	fp, r1
   1ee04:	4690      	mov	r8, r2
   1ee06:	0b3f      	lsrs	r7, r7, #12
   1ee08:	0d64      	lsrs	r4, r4, #21
   1ee0a:	429d      	cmp	r5, r3
   1ee0c:	d020      	beq.n	1ee50 <__ledf2+0x70>
   1ee0e:	4b24      	ldr	r3, [pc, #144]	; (1eea0 <__ledf2+0xc0>)
   1ee10:	429c      	cmp	r4, r3
   1ee12:	d022      	beq.n	1ee5a <__ledf2+0x7a>
   1ee14:	2d00      	cmp	r5, #0
   1ee16:	d112      	bne.n	1ee3e <__ledf2+0x5e>
   1ee18:	4330      	orrs	r0, r6
   1ee1a:	4243      	negs	r3, r0
   1ee1c:	4143      	adcs	r3, r0
   1ee1e:	b2db      	uxtb	r3, r3
   1ee20:	2c00      	cmp	r4, #0
   1ee22:	d01f      	beq.n	1ee64 <__ledf2+0x84>
   1ee24:	2b00      	cmp	r3, #0
   1ee26:	d00c      	beq.n	1ee42 <__ledf2+0x62>
   1ee28:	464b      	mov	r3, r9
   1ee2a:	2001      	movs	r0, #1
   1ee2c:	3b01      	subs	r3, #1
   1ee2e:	4303      	orrs	r3, r0
   1ee30:	0018      	movs	r0, r3
   1ee32:	bc3c      	pop	{r2, r3, r4, r5}
   1ee34:	4690      	mov	r8, r2
   1ee36:	4699      	mov	r9, r3
   1ee38:	46a2      	mov	sl, r4
   1ee3a:	46ab      	mov	fp, r5
   1ee3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ee3e:	2c00      	cmp	r4, #0
   1ee40:	d016      	beq.n	1ee70 <__ledf2+0x90>
   1ee42:	45cb      	cmp	fp, r9
   1ee44:	d017      	beq.n	1ee76 <__ledf2+0x96>
   1ee46:	465b      	mov	r3, fp
   1ee48:	4259      	negs	r1, r3
   1ee4a:	2301      	movs	r3, #1
   1ee4c:	430b      	orrs	r3, r1
   1ee4e:	e7ef      	b.n	1ee30 <__ledf2+0x50>
   1ee50:	0031      	movs	r1, r6
   1ee52:	2302      	movs	r3, #2
   1ee54:	4301      	orrs	r1, r0
   1ee56:	d1eb      	bne.n	1ee30 <__ledf2+0x50>
   1ee58:	e7d9      	b.n	1ee0e <__ledf2+0x2e>
   1ee5a:	0039      	movs	r1, r7
   1ee5c:	2302      	movs	r3, #2
   1ee5e:	4311      	orrs	r1, r2
   1ee60:	d1e6      	bne.n	1ee30 <__ledf2+0x50>
   1ee62:	e7d7      	b.n	1ee14 <__ledf2+0x34>
   1ee64:	433a      	orrs	r2, r7
   1ee66:	d1dd      	bne.n	1ee24 <__ledf2+0x44>
   1ee68:	2300      	movs	r3, #0
   1ee6a:	2800      	cmp	r0, #0
   1ee6c:	d0e0      	beq.n	1ee30 <__ledf2+0x50>
   1ee6e:	e7ea      	b.n	1ee46 <__ledf2+0x66>
   1ee70:	433a      	orrs	r2, r7
   1ee72:	d1e6      	bne.n	1ee42 <__ledf2+0x62>
   1ee74:	e7e7      	b.n	1ee46 <__ledf2+0x66>
   1ee76:	42a5      	cmp	r5, r4
   1ee78:	dce5      	bgt.n	1ee46 <__ledf2+0x66>
   1ee7a:	db05      	blt.n	1ee88 <__ledf2+0xa8>
   1ee7c:	42be      	cmp	r6, r7
   1ee7e:	d8e2      	bhi.n	1ee46 <__ledf2+0x66>
   1ee80:	d007      	beq.n	1ee92 <__ledf2+0xb2>
   1ee82:	2300      	movs	r3, #0
   1ee84:	42be      	cmp	r6, r7
   1ee86:	d2d3      	bcs.n	1ee30 <__ledf2+0x50>
   1ee88:	4659      	mov	r1, fp
   1ee8a:	2301      	movs	r3, #1
   1ee8c:	3901      	subs	r1, #1
   1ee8e:	430b      	orrs	r3, r1
   1ee90:	e7ce      	b.n	1ee30 <__ledf2+0x50>
   1ee92:	45c4      	cmp	ip, r8
   1ee94:	d8d7      	bhi.n	1ee46 <__ledf2+0x66>
   1ee96:	2300      	movs	r3, #0
   1ee98:	45c4      	cmp	ip, r8
   1ee9a:	d3f5      	bcc.n	1ee88 <__ledf2+0xa8>
   1ee9c:	e7c8      	b.n	1ee30 <__ledf2+0x50>
   1ee9e:	46c0      	nop			; (mov r8, r8)
   1eea0:	000007ff 	.word	0x000007ff

0001eea4 <__aeabi_dmul>:
   1eea4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1eea6:	4657      	mov	r7, sl
   1eea8:	4645      	mov	r5, r8
   1eeaa:	46de      	mov	lr, fp
   1eeac:	464e      	mov	r6, r9
   1eeae:	b5e0      	push	{r5, r6, r7, lr}
   1eeb0:	030c      	lsls	r4, r1, #12
   1eeb2:	4698      	mov	r8, r3
   1eeb4:	004e      	lsls	r6, r1, #1
   1eeb6:	0b23      	lsrs	r3, r4, #12
   1eeb8:	b087      	sub	sp, #28
   1eeba:	0007      	movs	r7, r0
   1eebc:	4692      	mov	sl, r2
   1eebe:	469b      	mov	fp, r3
   1eec0:	0d76      	lsrs	r6, r6, #21
   1eec2:	0fcd      	lsrs	r5, r1, #31
   1eec4:	2e00      	cmp	r6, #0
   1eec6:	d06b      	beq.n	1efa0 <__aeabi_dmul+0xfc>
   1eec8:	4b6d      	ldr	r3, [pc, #436]	; (1f080 <__aeabi_dmul+0x1dc>)
   1eeca:	429e      	cmp	r6, r3
   1eecc:	d035      	beq.n	1ef3a <__aeabi_dmul+0x96>
   1eece:	2480      	movs	r4, #128	; 0x80
   1eed0:	465b      	mov	r3, fp
   1eed2:	0f42      	lsrs	r2, r0, #29
   1eed4:	0424      	lsls	r4, r4, #16
   1eed6:	00db      	lsls	r3, r3, #3
   1eed8:	4314      	orrs	r4, r2
   1eeda:	431c      	orrs	r4, r3
   1eedc:	00c3      	lsls	r3, r0, #3
   1eede:	4699      	mov	r9, r3
   1eee0:	4b68      	ldr	r3, [pc, #416]	; (1f084 <__aeabi_dmul+0x1e0>)
   1eee2:	46a3      	mov	fp, r4
   1eee4:	469c      	mov	ip, r3
   1eee6:	2300      	movs	r3, #0
   1eee8:	2700      	movs	r7, #0
   1eeea:	4466      	add	r6, ip
   1eeec:	9302      	str	r3, [sp, #8]
   1eeee:	4643      	mov	r3, r8
   1eef0:	031c      	lsls	r4, r3, #12
   1eef2:	005a      	lsls	r2, r3, #1
   1eef4:	0fdb      	lsrs	r3, r3, #31
   1eef6:	4650      	mov	r0, sl
   1eef8:	0b24      	lsrs	r4, r4, #12
   1eefa:	0d52      	lsrs	r2, r2, #21
   1eefc:	4698      	mov	r8, r3
   1eefe:	d100      	bne.n	1ef02 <__aeabi_dmul+0x5e>
   1ef00:	e076      	b.n	1eff0 <__aeabi_dmul+0x14c>
   1ef02:	4b5f      	ldr	r3, [pc, #380]	; (1f080 <__aeabi_dmul+0x1dc>)
   1ef04:	429a      	cmp	r2, r3
   1ef06:	d06d      	beq.n	1efe4 <__aeabi_dmul+0x140>
   1ef08:	2380      	movs	r3, #128	; 0x80
   1ef0a:	0f41      	lsrs	r1, r0, #29
   1ef0c:	041b      	lsls	r3, r3, #16
   1ef0e:	430b      	orrs	r3, r1
   1ef10:	495c      	ldr	r1, [pc, #368]	; (1f084 <__aeabi_dmul+0x1e0>)
   1ef12:	00e4      	lsls	r4, r4, #3
   1ef14:	468c      	mov	ip, r1
   1ef16:	431c      	orrs	r4, r3
   1ef18:	00c3      	lsls	r3, r0, #3
   1ef1a:	2000      	movs	r0, #0
   1ef1c:	4462      	add	r2, ip
   1ef1e:	4641      	mov	r1, r8
   1ef20:	18b6      	adds	r6, r6, r2
   1ef22:	4069      	eors	r1, r5
   1ef24:	1c72      	adds	r2, r6, #1
   1ef26:	9101      	str	r1, [sp, #4]
   1ef28:	4694      	mov	ip, r2
   1ef2a:	4307      	orrs	r7, r0
   1ef2c:	2f0f      	cmp	r7, #15
   1ef2e:	d900      	bls.n	1ef32 <__aeabi_dmul+0x8e>
   1ef30:	e0b0      	b.n	1f094 <__aeabi_dmul+0x1f0>
   1ef32:	4a55      	ldr	r2, [pc, #340]	; (1f088 <__aeabi_dmul+0x1e4>)
   1ef34:	00bf      	lsls	r7, r7, #2
   1ef36:	59d2      	ldr	r2, [r2, r7]
   1ef38:	4697      	mov	pc, r2
   1ef3a:	465b      	mov	r3, fp
   1ef3c:	4303      	orrs	r3, r0
   1ef3e:	4699      	mov	r9, r3
   1ef40:	d000      	beq.n	1ef44 <__aeabi_dmul+0xa0>
   1ef42:	e087      	b.n	1f054 <__aeabi_dmul+0x1b0>
   1ef44:	2300      	movs	r3, #0
   1ef46:	469b      	mov	fp, r3
   1ef48:	3302      	adds	r3, #2
   1ef4a:	2708      	movs	r7, #8
   1ef4c:	9302      	str	r3, [sp, #8]
   1ef4e:	e7ce      	b.n	1eeee <__aeabi_dmul+0x4a>
   1ef50:	4642      	mov	r2, r8
   1ef52:	9201      	str	r2, [sp, #4]
   1ef54:	2802      	cmp	r0, #2
   1ef56:	d067      	beq.n	1f028 <__aeabi_dmul+0x184>
   1ef58:	2803      	cmp	r0, #3
   1ef5a:	d100      	bne.n	1ef5e <__aeabi_dmul+0xba>
   1ef5c:	e20e      	b.n	1f37c <__aeabi_dmul+0x4d8>
   1ef5e:	2801      	cmp	r0, #1
   1ef60:	d000      	beq.n	1ef64 <__aeabi_dmul+0xc0>
   1ef62:	e162      	b.n	1f22a <__aeabi_dmul+0x386>
   1ef64:	2300      	movs	r3, #0
   1ef66:	2400      	movs	r4, #0
   1ef68:	2200      	movs	r2, #0
   1ef6a:	4699      	mov	r9, r3
   1ef6c:	9901      	ldr	r1, [sp, #4]
   1ef6e:	4001      	ands	r1, r0
   1ef70:	b2cd      	uxtb	r5, r1
   1ef72:	2100      	movs	r1, #0
   1ef74:	0312      	lsls	r2, r2, #12
   1ef76:	0d0b      	lsrs	r3, r1, #20
   1ef78:	0b12      	lsrs	r2, r2, #12
   1ef7a:	051b      	lsls	r3, r3, #20
   1ef7c:	4313      	orrs	r3, r2
   1ef7e:	4a43      	ldr	r2, [pc, #268]	; (1f08c <__aeabi_dmul+0x1e8>)
   1ef80:	0524      	lsls	r4, r4, #20
   1ef82:	4013      	ands	r3, r2
   1ef84:	431c      	orrs	r4, r3
   1ef86:	0064      	lsls	r4, r4, #1
   1ef88:	07ed      	lsls	r5, r5, #31
   1ef8a:	0864      	lsrs	r4, r4, #1
   1ef8c:	432c      	orrs	r4, r5
   1ef8e:	4648      	mov	r0, r9
   1ef90:	0021      	movs	r1, r4
   1ef92:	b007      	add	sp, #28
   1ef94:	bc3c      	pop	{r2, r3, r4, r5}
   1ef96:	4690      	mov	r8, r2
   1ef98:	4699      	mov	r9, r3
   1ef9a:	46a2      	mov	sl, r4
   1ef9c:	46ab      	mov	fp, r5
   1ef9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1efa0:	4303      	orrs	r3, r0
   1efa2:	4699      	mov	r9, r3
   1efa4:	d04f      	beq.n	1f046 <__aeabi_dmul+0x1a2>
   1efa6:	465b      	mov	r3, fp
   1efa8:	2b00      	cmp	r3, #0
   1efaa:	d100      	bne.n	1efae <__aeabi_dmul+0x10a>
   1efac:	e189      	b.n	1f2c2 <__aeabi_dmul+0x41e>
   1efae:	4658      	mov	r0, fp
   1efb0:	f7fe f8a2 	bl	1d0f8 <__clzsi2>
   1efb4:	0003      	movs	r3, r0
   1efb6:	3b0b      	subs	r3, #11
   1efb8:	2b1c      	cmp	r3, #28
   1efba:	dd00      	ble.n	1efbe <__aeabi_dmul+0x11a>
   1efbc:	e17a      	b.n	1f2b4 <__aeabi_dmul+0x410>
   1efbe:	221d      	movs	r2, #29
   1efc0:	1ad3      	subs	r3, r2, r3
   1efc2:	003a      	movs	r2, r7
   1efc4:	0001      	movs	r1, r0
   1efc6:	465c      	mov	r4, fp
   1efc8:	40da      	lsrs	r2, r3
   1efca:	3908      	subs	r1, #8
   1efcc:	408c      	lsls	r4, r1
   1efce:	0013      	movs	r3, r2
   1efd0:	408f      	lsls	r7, r1
   1efd2:	4323      	orrs	r3, r4
   1efd4:	469b      	mov	fp, r3
   1efd6:	46b9      	mov	r9, r7
   1efd8:	2300      	movs	r3, #0
   1efda:	4e2d      	ldr	r6, [pc, #180]	; (1f090 <__aeabi_dmul+0x1ec>)
   1efdc:	2700      	movs	r7, #0
   1efde:	1a36      	subs	r6, r6, r0
   1efe0:	9302      	str	r3, [sp, #8]
   1efe2:	e784      	b.n	1eeee <__aeabi_dmul+0x4a>
   1efe4:	4653      	mov	r3, sl
   1efe6:	4323      	orrs	r3, r4
   1efe8:	d12a      	bne.n	1f040 <__aeabi_dmul+0x19c>
   1efea:	2400      	movs	r4, #0
   1efec:	2002      	movs	r0, #2
   1efee:	e796      	b.n	1ef1e <__aeabi_dmul+0x7a>
   1eff0:	4653      	mov	r3, sl
   1eff2:	4323      	orrs	r3, r4
   1eff4:	d020      	beq.n	1f038 <__aeabi_dmul+0x194>
   1eff6:	2c00      	cmp	r4, #0
   1eff8:	d100      	bne.n	1effc <__aeabi_dmul+0x158>
   1effa:	e157      	b.n	1f2ac <__aeabi_dmul+0x408>
   1effc:	0020      	movs	r0, r4
   1effe:	f7fe f87b 	bl	1d0f8 <__clzsi2>
   1f002:	0003      	movs	r3, r0
   1f004:	3b0b      	subs	r3, #11
   1f006:	2b1c      	cmp	r3, #28
   1f008:	dd00      	ble.n	1f00c <__aeabi_dmul+0x168>
   1f00a:	e149      	b.n	1f2a0 <__aeabi_dmul+0x3fc>
   1f00c:	211d      	movs	r1, #29
   1f00e:	1acb      	subs	r3, r1, r3
   1f010:	4651      	mov	r1, sl
   1f012:	0002      	movs	r2, r0
   1f014:	40d9      	lsrs	r1, r3
   1f016:	4653      	mov	r3, sl
   1f018:	3a08      	subs	r2, #8
   1f01a:	4094      	lsls	r4, r2
   1f01c:	4093      	lsls	r3, r2
   1f01e:	430c      	orrs	r4, r1
   1f020:	4a1b      	ldr	r2, [pc, #108]	; (1f090 <__aeabi_dmul+0x1ec>)
   1f022:	1a12      	subs	r2, r2, r0
   1f024:	2000      	movs	r0, #0
   1f026:	e77a      	b.n	1ef1e <__aeabi_dmul+0x7a>
   1f028:	2501      	movs	r5, #1
   1f02a:	9b01      	ldr	r3, [sp, #4]
   1f02c:	4c14      	ldr	r4, [pc, #80]	; (1f080 <__aeabi_dmul+0x1dc>)
   1f02e:	401d      	ands	r5, r3
   1f030:	2300      	movs	r3, #0
   1f032:	2200      	movs	r2, #0
   1f034:	4699      	mov	r9, r3
   1f036:	e79c      	b.n	1ef72 <__aeabi_dmul+0xce>
   1f038:	2400      	movs	r4, #0
   1f03a:	2200      	movs	r2, #0
   1f03c:	2001      	movs	r0, #1
   1f03e:	e76e      	b.n	1ef1e <__aeabi_dmul+0x7a>
   1f040:	4653      	mov	r3, sl
   1f042:	2003      	movs	r0, #3
   1f044:	e76b      	b.n	1ef1e <__aeabi_dmul+0x7a>
   1f046:	2300      	movs	r3, #0
   1f048:	469b      	mov	fp, r3
   1f04a:	3301      	adds	r3, #1
   1f04c:	2704      	movs	r7, #4
   1f04e:	2600      	movs	r6, #0
   1f050:	9302      	str	r3, [sp, #8]
   1f052:	e74c      	b.n	1eeee <__aeabi_dmul+0x4a>
   1f054:	2303      	movs	r3, #3
   1f056:	4681      	mov	r9, r0
   1f058:	270c      	movs	r7, #12
   1f05a:	9302      	str	r3, [sp, #8]
   1f05c:	e747      	b.n	1eeee <__aeabi_dmul+0x4a>
   1f05e:	2280      	movs	r2, #128	; 0x80
   1f060:	2300      	movs	r3, #0
   1f062:	2500      	movs	r5, #0
   1f064:	0312      	lsls	r2, r2, #12
   1f066:	4699      	mov	r9, r3
   1f068:	4c05      	ldr	r4, [pc, #20]	; (1f080 <__aeabi_dmul+0x1dc>)
   1f06a:	e782      	b.n	1ef72 <__aeabi_dmul+0xce>
   1f06c:	465c      	mov	r4, fp
   1f06e:	464b      	mov	r3, r9
   1f070:	9802      	ldr	r0, [sp, #8]
   1f072:	e76f      	b.n	1ef54 <__aeabi_dmul+0xb0>
   1f074:	465c      	mov	r4, fp
   1f076:	464b      	mov	r3, r9
   1f078:	9501      	str	r5, [sp, #4]
   1f07a:	9802      	ldr	r0, [sp, #8]
   1f07c:	e76a      	b.n	1ef54 <__aeabi_dmul+0xb0>
   1f07e:	46c0      	nop			; (mov r8, r8)
   1f080:	000007ff 	.word	0x000007ff
   1f084:	fffffc01 	.word	0xfffffc01
   1f088:	00026ba0 	.word	0x00026ba0
   1f08c:	800fffff 	.word	0x800fffff
   1f090:	fffffc0d 	.word	0xfffffc0d
   1f094:	464a      	mov	r2, r9
   1f096:	4649      	mov	r1, r9
   1f098:	0c17      	lsrs	r7, r2, #16
   1f09a:	0c1a      	lsrs	r2, r3, #16
   1f09c:	041b      	lsls	r3, r3, #16
   1f09e:	0c1b      	lsrs	r3, r3, #16
   1f0a0:	0408      	lsls	r0, r1, #16
   1f0a2:	0019      	movs	r1, r3
   1f0a4:	0c00      	lsrs	r0, r0, #16
   1f0a6:	4341      	muls	r1, r0
   1f0a8:	0015      	movs	r5, r2
   1f0aa:	4688      	mov	r8, r1
   1f0ac:	0019      	movs	r1, r3
   1f0ae:	437d      	muls	r5, r7
   1f0b0:	4379      	muls	r1, r7
   1f0b2:	9503      	str	r5, [sp, #12]
   1f0b4:	4689      	mov	r9, r1
   1f0b6:	0029      	movs	r1, r5
   1f0b8:	0015      	movs	r5, r2
   1f0ba:	4345      	muls	r5, r0
   1f0bc:	444d      	add	r5, r9
   1f0be:	9502      	str	r5, [sp, #8]
   1f0c0:	4645      	mov	r5, r8
   1f0c2:	0c2d      	lsrs	r5, r5, #16
   1f0c4:	46aa      	mov	sl, r5
   1f0c6:	9d02      	ldr	r5, [sp, #8]
   1f0c8:	4455      	add	r5, sl
   1f0ca:	45a9      	cmp	r9, r5
   1f0cc:	d906      	bls.n	1f0dc <__aeabi_dmul+0x238>
   1f0ce:	468a      	mov	sl, r1
   1f0d0:	2180      	movs	r1, #128	; 0x80
   1f0d2:	0249      	lsls	r1, r1, #9
   1f0d4:	4689      	mov	r9, r1
   1f0d6:	44ca      	add	sl, r9
   1f0d8:	4651      	mov	r1, sl
   1f0da:	9103      	str	r1, [sp, #12]
   1f0dc:	0c29      	lsrs	r1, r5, #16
   1f0de:	9104      	str	r1, [sp, #16]
   1f0e0:	4641      	mov	r1, r8
   1f0e2:	0409      	lsls	r1, r1, #16
   1f0e4:	042d      	lsls	r5, r5, #16
   1f0e6:	0c09      	lsrs	r1, r1, #16
   1f0e8:	4688      	mov	r8, r1
   1f0ea:	0029      	movs	r1, r5
   1f0ec:	0c25      	lsrs	r5, r4, #16
   1f0ee:	0424      	lsls	r4, r4, #16
   1f0f0:	4441      	add	r1, r8
   1f0f2:	0c24      	lsrs	r4, r4, #16
   1f0f4:	9105      	str	r1, [sp, #20]
   1f0f6:	0021      	movs	r1, r4
   1f0f8:	4341      	muls	r1, r0
   1f0fa:	4688      	mov	r8, r1
   1f0fc:	0021      	movs	r1, r4
   1f0fe:	4379      	muls	r1, r7
   1f100:	468a      	mov	sl, r1
   1f102:	4368      	muls	r0, r5
   1f104:	4641      	mov	r1, r8
   1f106:	4450      	add	r0, sl
   1f108:	4681      	mov	r9, r0
   1f10a:	0c08      	lsrs	r0, r1, #16
   1f10c:	4448      	add	r0, r9
   1f10e:	436f      	muls	r7, r5
   1f110:	4582      	cmp	sl, r0
   1f112:	d903      	bls.n	1f11c <__aeabi_dmul+0x278>
   1f114:	2180      	movs	r1, #128	; 0x80
   1f116:	0249      	lsls	r1, r1, #9
   1f118:	4689      	mov	r9, r1
   1f11a:	444f      	add	r7, r9
   1f11c:	0c01      	lsrs	r1, r0, #16
   1f11e:	4689      	mov	r9, r1
   1f120:	0039      	movs	r1, r7
   1f122:	4449      	add	r1, r9
   1f124:	9102      	str	r1, [sp, #8]
   1f126:	4641      	mov	r1, r8
   1f128:	040f      	lsls	r7, r1, #16
   1f12a:	9904      	ldr	r1, [sp, #16]
   1f12c:	0c3f      	lsrs	r7, r7, #16
   1f12e:	4688      	mov	r8, r1
   1f130:	0400      	lsls	r0, r0, #16
   1f132:	19c0      	adds	r0, r0, r7
   1f134:	4480      	add	r8, r0
   1f136:	4641      	mov	r1, r8
   1f138:	9104      	str	r1, [sp, #16]
   1f13a:	4659      	mov	r1, fp
   1f13c:	0c0f      	lsrs	r7, r1, #16
   1f13e:	0409      	lsls	r1, r1, #16
   1f140:	0c09      	lsrs	r1, r1, #16
   1f142:	4688      	mov	r8, r1
   1f144:	4359      	muls	r1, r3
   1f146:	468a      	mov	sl, r1
   1f148:	0039      	movs	r1, r7
   1f14a:	4351      	muls	r1, r2
   1f14c:	4689      	mov	r9, r1
   1f14e:	4641      	mov	r1, r8
   1f150:	434a      	muls	r2, r1
   1f152:	4651      	mov	r1, sl
   1f154:	0c09      	lsrs	r1, r1, #16
   1f156:	468b      	mov	fp, r1
   1f158:	437b      	muls	r3, r7
   1f15a:	18d2      	adds	r2, r2, r3
   1f15c:	445a      	add	r2, fp
   1f15e:	4293      	cmp	r3, r2
   1f160:	d903      	bls.n	1f16a <__aeabi_dmul+0x2c6>
   1f162:	2380      	movs	r3, #128	; 0x80
   1f164:	025b      	lsls	r3, r3, #9
   1f166:	469b      	mov	fp, r3
   1f168:	44d9      	add	r9, fp
   1f16a:	4651      	mov	r1, sl
   1f16c:	0409      	lsls	r1, r1, #16
   1f16e:	0c09      	lsrs	r1, r1, #16
   1f170:	468a      	mov	sl, r1
   1f172:	4641      	mov	r1, r8
   1f174:	4361      	muls	r1, r4
   1f176:	437c      	muls	r4, r7
   1f178:	0c13      	lsrs	r3, r2, #16
   1f17a:	0412      	lsls	r2, r2, #16
   1f17c:	444b      	add	r3, r9
   1f17e:	4452      	add	r2, sl
   1f180:	46a1      	mov	r9, r4
   1f182:	468a      	mov	sl, r1
   1f184:	003c      	movs	r4, r7
   1f186:	4641      	mov	r1, r8
   1f188:	436c      	muls	r4, r5
   1f18a:	434d      	muls	r5, r1
   1f18c:	4651      	mov	r1, sl
   1f18e:	444d      	add	r5, r9
   1f190:	0c0f      	lsrs	r7, r1, #16
   1f192:	197d      	adds	r5, r7, r5
   1f194:	45a9      	cmp	r9, r5
   1f196:	d903      	bls.n	1f1a0 <__aeabi_dmul+0x2fc>
   1f198:	2180      	movs	r1, #128	; 0x80
   1f19a:	0249      	lsls	r1, r1, #9
   1f19c:	4688      	mov	r8, r1
   1f19e:	4444      	add	r4, r8
   1f1a0:	9f04      	ldr	r7, [sp, #16]
   1f1a2:	9903      	ldr	r1, [sp, #12]
   1f1a4:	46b8      	mov	r8, r7
   1f1a6:	4441      	add	r1, r8
   1f1a8:	468b      	mov	fp, r1
   1f1aa:	4583      	cmp	fp, r0
   1f1ac:	4180      	sbcs	r0, r0
   1f1ae:	4241      	negs	r1, r0
   1f1b0:	4688      	mov	r8, r1
   1f1b2:	4651      	mov	r1, sl
   1f1b4:	0408      	lsls	r0, r1, #16
   1f1b6:	042f      	lsls	r7, r5, #16
   1f1b8:	0c00      	lsrs	r0, r0, #16
   1f1ba:	183f      	adds	r7, r7, r0
   1f1bc:	4658      	mov	r0, fp
   1f1be:	9902      	ldr	r1, [sp, #8]
   1f1c0:	1810      	adds	r0, r2, r0
   1f1c2:	4689      	mov	r9, r1
   1f1c4:	4290      	cmp	r0, r2
   1f1c6:	4192      	sbcs	r2, r2
   1f1c8:	444f      	add	r7, r9
   1f1ca:	46ba      	mov	sl, r7
   1f1cc:	4252      	negs	r2, r2
   1f1ce:	4699      	mov	r9, r3
   1f1d0:	4693      	mov	fp, r2
   1f1d2:	44c2      	add	sl, r8
   1f1d4:	44d1      	add	r9, sl
   1f1d6:	44cb      	add	fp, r9
   1f1d8:	428f      	cmp	r7, r1
   1f1da:	41bf      	sbcs	r7, r7
   1f1dc:	45c2      	cmp	sl, r8
   1f1de:	4189      	sbcs	r1, r1
   1f1e0:	4599      	cmp	r9, r3
   1f1e2:	419b      	sbcs	r3, r3
   1f1e4:	4593      	cmp	fp, r2
   1f1e6:	4192      	sbcs	r2, r2
   1f1e8:	427f      	negs	r7, r7
   1f1ea:	4249      	negs	r1, r1
   1f1ec:	0c2d      	lsrs	r5, r5, #16
   1f1ee:	4252      	negs	r2, r2
   1f1f0:	430f      	orrs	r7, r1
   1f1f2:	425b      	negs	r3, r3
   1f1f4:	4313      	orrs	r3, r2
   1f1f6:	197f      	adds	r7, r7, r5
   1f1f8:	18ff      	adds	r7, r7, r3
   1f1fa:	465b      	mov	r3, fp
   1f1fc:	193c      	adds	r4, r7, r4
   1f1fe:	0ddb      	lsrs	r3, r3, #23
   1f200:	9a05      	ldr	r2, [sp, #20]
   1f202:	0264      	lsls	r4, r4, #9
   1f204:	431c      	orrs	r4, r3
   1f206:	0243      	lsls	r3, r0, #9
   1f208:	4313      	orrs	r3, r2
   1f20a:	1e5d      	subs	r5, r3, #1
   1f20c:	41ab      	sbcs	r3, r5
   1f20e:	465a      	mov	r2, fp
   1f210:	0dc0      	lsrs	r0, r0, #23
   1f212:	4303      	orrs	r3, r0
   1f214:	0252      	lsls	r2, r2, #9
   1f216:	4313      	orrs	r3, r2
   1f218:	01e2      	lsls	r2, r4, #7
   1f21a:	d556      	bpl.n	1f2ca <__aeabi_dmul+0x426>
   1f21c:	2001      	movs	r0, #1
   1f21e:	085a      	lsrs	r2, r3, #1
   1f220:	4003      	ands	r3, r0
   1f222:	4313      	orrs	r3, r2
   1f224:	07e2      	lsls	r2, r4, #31
   1f226:	4313      	orrs	r3, r2
   1f228:	0864      	lsrs	r4, r4, #1
   1f22a:	485a      	ldr	r0, [pc, #360]	; (1f394 <__aeabi_dmul+0x4f0>)
   1f22c:	4460      	add	r0, ip
   1f22e:	2800      	cmp	r0, #0
   1f230:	dd4d      	ble.n	1f2ce <__aeabi_dmul+0x42a>
   1f232:	075a      	lsls	r2, r3, #29
   1f234:	d009      	beq.n	1f24a <__aeabi_dmul+0x3a6>
   1f236:	220f      	movs	r2, #15
   1f238:	401a      	ands	r2, r3
   1f23a:	2a04      	cmp	r2, #4
   1f23c:	d005      	beq.n	1f24a <__aeabi_dmul+0x3a6>
   1f23e:	1d1a      	adds	r2, r3, #4
   1f240:	429a      	cmp	r2, r3
   1f242:	419b      	sbcs	r3, r3
   1f244:	425b      	negs	r3, r3
   1f246:	18e4      	adds	r4, r4, r3
   1f248:	0013      	movs	r3, r2
   1f24a:	01e2      	lsls	r2, r4, #7
   1f24c:	d504      	bpl.n	1f258 <__aeabi_dmul+0x3b4>
   1f24e:	2080      	movs	r0, #128	; 0x80
   1f250:	4a51      	ldr	r2, [pc, #324]	; (1f398 <__aeabi_dmul+0x4f4>)
   1f252:	00c0      	lsls	r0, r0, #3
   1f254:	4014      	ands	r4, r2
   1f256:	4460      	add	r0, ip
   1f258:	4a50      	ldr	r2, [pc, #320]	; (1f39c <__aeabi_dmul+0x4f8>)
   1f25a:	4290      	cmp	r0, r2
   1f25c:	dd00      	ble.n	1f260 <__aeabi_dmul+0x3bc>
   1f25e:	e6e3      	b.n	1f028 <__aeabi_dmul+0x184>
   1f260:	2501      	movs	r5, #1
   1f262:	08db      	lsrs	r3, r3, #3
   1f264:	0762      	lsls	r2, r4, #29
   1f266:	431a      	orrs	r2, r3
   1f268:	0264      	lsls	r4, r4, #9
   1f26a:	9b01      	ldr	r3, [sp, #4]
   1f26c:	4691      	mov	r9, r2
   1f26e:	0b22      	lsrs	r2, r4, #12
   1f270:	0544      	lsls	r4, r0, #21
   1f272:	0d64      	lsrs	r4, r4, #21
   1f274:	401d      	ands	r5, r3
   1f276:	e67c      	b.n	1ef72 <__aeabi_dmul+0xce>
   1f278:	2280      	movs	r2, #128	; 0x80
   1f27a:	4659      	mov	r1, fp
   1f27c:	0312      	lsls	r2, r2, #12
   1f27e:	4211      	tst	r1, r2
   1f280:	d008      	beq.n	1f294 <__aeabi_dmul+0x3f0>
   1f282:	4214      	tst	r4, r2
   1f284:	d106      	bne.n	1f294 <__aeabi_dmul+0x3f0>
   1f286:	4322      	orrs	r2, r4
   1f288:	0312      	lsls	r2, r2, #12
   1f28a:	0b12      	lsrs	r2, r2, #12
   1f28c:	4645      	mov	r5, r8
   1f28e:	4699      	mov	r9, r3
   1f290:	4c43      	ldr	r4, [pc, #268]	; (1f3a0 <__aeabi_dmul+0x4fc>)
   1f292:	e66e      	b.n	1ef72 <__aeabi_dmul+0xce>
   1f294:	465b      	mov	r3, fp
   1f296:	431a      	orrs	r2, r3
   1f298:	0312      	lsls	r2, r2, #12
   1f29a:	0b12      	lsrs	r2, r2, #12
   1f29c:	4c40      	ldr	r4, [pc, #256]	; (1f3a0 <__aeabi_dmul+0x4fc>)
   1f29e:	e668      	b.n	1ef72 <__aeabi_dmul+0xce>
   1f2a0:	0003      	movs	r3, r0
   1f2a2:	4654      	mov	r4, sl
   1f2a4:	3b28      	subs	r3, #40	; 0x28
   1f2a6:	409c      	lsls	r4, r3
   1f2a8:	2300      	movs	r3, #0
   1f2aa:	e6b9      	b.n	1f020 <__aeabi_dmul+0x17c>
   1f2ac:	f7fd ff24 	bl	1d0f8 <__clzsi2>
   1f2b0:	3020      	adds	r0, #32
   1f2b2:	e6a6      	b.n	1f002 <__aeabi_dmul+0x15e>
   1f2b4:	0003      	movs	r3, r0
   1f2b6:	3b28      	subs	r3, #40	; 0x28
   1f2b8:	409f      	lsls	r7, r3
   1f2ba:	2300      	movs	r3, #0
   1f2bc:	46bb      	mov	fp, r7
   1f2be:	4699      	mov	r9, r3
   1f2c0:	e68a      	b.n	1efd8 <__aeabi_dmul+0x134>
   1f2c2:	f7fd ff19 	bl	1d0f8 <__clzsi2>
   1f2c6:	3020      	adds	r0, #32
   1f2c8:	e674      	b.n	1efb4 <__aeabi_dmul+0x110>
   1f2ca:	46b4      	mov	ip, r6
   1f2cc:	e7ad      	b.n	1f22a <__aeabi_dmul+0x386>
   1f2ce:	2501      	movs	r5, #1
   1f2d0:	1a2a      	subs	r2, r5, r0
   1f2d2:	2a38      	cmp	r2, #56	; 0x38
   1f2d4:	dd06      	ble.n	1f2e4 <__aeabi_dmul+0x440>
   1f2d6:	9b01      	ldr	r3, [sp, #4]
   1f2d8:	2400      	movs	r4, #0
   1f2da:	401d      	ands	r5, r3
   1f2dc:	2300      	movs	r3, #0
   1f2de:	2200      	movs	r2, #0
   1f2e0:	4699      	mov	r9, r3
   1f2e2:	e646      	b.n	1ef72 <__aeabi_dmul+0xce>
   1f2e4:	2a1f      	cmp	r2, #31
   1f2e6:	dc21      	bgt.n	1f32c <__aeabi_dmul+0x488>
   1f2e8:	2520      	movs	r5, #32
   1f2ea:	0020      	movs	r0, r4
   1f2ec:	1aad      	subs	r5, r5, r2
   1f2ee:	001e      	movs	r6, r3
   1f2f0:	40ab      	lsls	r3, r5
   1f2f2:	40a8      	lsls	r0, r5
   1f2f4:	40d6      	lsrs	r6, r2
   1f2f6:	1e5d      	subs	r5, r3, #1
   1f2f8:	41ab      	sbcs	r3, r5
   1f2fa:	4330      	orrs	r0, r6
   1f2fc:	4318      	orrs	r0, r3
   1f2fe:	40d4      	lsrs	r4, r2
   1f300:	0743      	lsls	r3, r0, #29
   1f302:	d009      	beq.n	1f318 <__aeabi_dmul+0x474>
   1f304:	230f      	movs	r3, #15
   1f306:	4003      	ands	r3, r0
   1f308:	2b04      	cmp	r3, #4
   1f30a:	d005      	beq.n	1f318 <__aeabi_dmul+0x474>
   1f30c:	0003      	movs	r3, r0
   1f30e:	1d18      	adds	r0, r3, #4
   1f310:	4298      	cmp	r0, r3
   1f312:	419b      	sbcs	r3, r3
   1f314:	425b      	negs	r3, r3
   1f316:	18e4      	adds	r4, r4, r3
   1f318:	0223      	lsls	r3, r4, #8
   1f31a:	d521      	bpl.n	1f360 <__aeabi_dmul+0x4bc>
   1f31c:	2501      	movs	r5, #1
   1f31e:	9b01      	ldr	r3, [sp, #4]
   1f320:	2401      	movs	r4, #1
   1f322:	401d      	ands	r5, r3
   1f324:	2300      	movs	r3, #0
   1f326:	2200      	movs	r2, #0
   1f328:	4699      	mov	r9, r3
   1f32a:	e622      	b.n	1ef72 <__aeabi_dmul+0xce>
   1f32c:	251f      	movs	r5, #31
   1f32e:	0021      	movs	r1, r4
   1f330:	426d      	negs	r5, r5
   1f332:	1a28      	subs	r0, r5, r0
   1f334:	40c1      	lsrs	r1, r0
   1f336:	0008      	movs	r0, r1
   1f338:	2a20      	cmp	r2, #32
   1f33a:	d01d      	beq.n	1f378 <__aeabi_dmul+0x4d4>
   1f33c:	355f      	adds	r5, #95	; 0x5f
   1f33e:	1aaa      	subs	r2, r5, r2
   1f340:	4094      	lsls	r4, r2
   1f342:	4323      	orrs	r3, r4
   1f344:	1e5c      	subs	r4, r3, #1
   1f346:	41a3      	sbcs	r3, r4
   1f348:	2507      	movs	r5, #7
   1f34a:	4303      	orrs	r3, r0
   1f34c:	401d      	ands	r5, r3
   1f34e:	2200      	movs	r2, #0
   1f350:	2d00      	cmp	r5, #0
   1f352:	d009      	beq.n	1f368 <__aeabi_dmul+0x4c4>
   1f354:	220f      	movs	r2, #15
   1f356:	2400      	movs	r4, #0
   1f358:	401a      	ands	r2, r3
   1f35a:	0018      	movs	r0, r3
   1f35c:	2a04      	cmp	r2, #4
   1f35e:	d1d6      	bne.n	1f30e <__aeabi_dmul+0x46a>
   1f360:	0003      	movs	r3, r0
   1f362:	0765      	lsls	r5, r4, #29
   1f364:	0264      	lsls	r4, r4, #9
   1f366:	0b22      	lsrs	r2, r4, #12
   1f368:	08db      	lsrs	r3, r3, #3
   1f36a:	432b      	orrs	r3, r5
   1f36c:	2501      	movs	r5, #1
   1f36e:	4699      	mov	r9, r3
   1f370:	9b01      	ldr	r3, [sp, #4]
   1f372:	2400      	movs	r4, #0
   1f374:	401d      	ands	r5, r3
   1f376:	e5fc      	b.n	1ef72 <__aeabi_dmul+0xce>
   1f378:	2400      	movs	r4, #0
   1f37a:	e7e2      	b.n	1f342 <__aeabi_dmul+0x49e>
   1f37c:	2280      	movs	r2, #128	; 0x80
   1f37e:	2501      	movs	r5, #1
   1f380:	0312      	lsls	r2, r2, #12
   1f382:	4322      	orrs	r2, r4
   1f384:	9901      	ldr	r1, [sp, #4]
   1f386:	0312      	lsls	r2, r2, #12
   1f388:	0b12      	lsrs	r2, r2, #12
   1f38a:	400d      	ands	r5, r1
   1f38c:	4699      	mov	r9, r3
   1f38e:	4c04      	ldr	r4, [pc, #16]	; (1f3a0 <__aeabi_dmul+0x4fc>)
   1f390:	e5ef      	b.n	1ef72 <__aeabi_dmul+0xce>
   1f392:	46c0      	nop			; (mov r8, r8)
   1f394:	000003ff 	.word	0x000003ff
   1f398:	feffffff 	.word	0xfeffffff
   1f39c:	000007fe 	.word	0x000007fe
   1f3a0:	000007ff 	.word	0x000007ff

0001f3a4 <__aeabi_dsub>:
   1f3a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f3a6:	4646      	mov	r6, r8
   1f3a8:	46d6      	mov	lr, sl
   1f3aa:	464f      	mov	r7, r9
   1f3ac:	030c      	lsls	r4, r1, #12
   1f3ae:	b5c0      	push	{r6, r7, lr}
   1f3b0:	0fcd      	lsrs	r5, r1, #31
   1f3b2:	004e      	lsls	r6, r1, #1
   1f3b4:	0a61      	lsrs	r1, r4, #9
   1f3b6:	0f44      	lsrs	r4, r0, #29
   1f3b8:	430c      	orrs	r4, r1
   1f3ba:	00c1      	lsls	r1, r0, #3
   1f3bc:	0058      	lsls	r0, r3, #1
   1f3be:	0d40      	lsrs	r0, r0, #21
   1f3c0:	4684      	mov	ip, r0
   1f3c2:	468a      	mov	sl, r1
   1f3c4:	000f      	movs	r7, r1
   1f3c6:	0319      	lsls	r1, r3, #12
   1f3c8:	0f50      	lsrs	r0, r2, #29
   1f3ca:	0a49      	lsrs	r1, r1, #9
   1f3cc:	4301      	orrs	r1, r0
   1f3ce:	48c6      	ldr	r0, [pc, #792]	; (1f6e8 <__aeabi_dsub+0x344>)
   1f3d0:	0d76      	lsrs	r6, r6, #21
   1f3d2:	46a8      	mov	r8, r5
   1f3d4:	0fdb      	lsrs	r3, r3, #31
   1f3d6:	00d2      	lsls	r2, r2, #3
   1f3d8:	4584      	cmp	ip, r0
   1f3da:	d100      	bne.n	1f3de <__aeabi_dsub+0x3a>
   1f3dc:	e0d8      	b.n	1f590 <__aeabi_dsub+0x1ec>
   1f3de:	2001      	movs	r0, #1
   1f3e0:	4043      	eors	r3, r0
   1f3e2:	42ab      	cmp	r3, r5
   1f3e4:	d100      	bne.n	1f3e8 <__aeabi_dsub+0x44>
   1f3e6:	e0a6      	b.n	1f536 <__aeabi_dsub+0x192>
   1f3e8:	4660      	mov	r0, ip
   1f3ea:	1a35      	subs	r5, r6, r0
   1f3ec:	2d00      	cmp	r5, #0
   1f3ee:	dc00      	bgt.n	1f3f2 <__aeabi_dsub+0x4e>
   1f3f0:	e105      	b.n	1f5fe <__aeabi_dsub+0x25a>
   1f3f2:	2800      	cmp	r0, #0
   1f3f4:	d110      	bne.n	1f418 <__aeabi_dsub+0x74>
   1f3f6:	000b      	movs	r3, r1
   1f3f8:	4313      	orrs	r3, r2
   1f3fa:	d100      	bne.n	1f3fe <__aeabi_dsub+0x5a>
   1f3fc:	e0d7      	b.n	1f5ae <__aeabi_dsub+0x20a>
   1f3fe:	1e6b      	subs	r3, r5, #1
   1f400:	2b00      	cmp	r3, #0
   1f402:	d000      	beq.n	1f406 <__aeabi_dsub+0x62>
   1f404:	e14b      	b.n	1f69e <__aeabi_dsub+0x2fa>
   1f406:	4653      	mov	r3, sl
   1f408:	1a9f      	subs	r7, r3, r2
   1f40a:	45ba      	cmp	sl, r7
   1f40c:	4180      	sbcs	r0, r0
   1f40e:	1a64      	subs	r4, r4, r1
   1f410:	4240      	negs	r0, r0
   1f412:	1a24      	subs	r4, r4, r0
   1f414:	2601      	movs	r6, #1
   1f416:	e01e      	b.n	1f456 <__aeabi_dsub+0xb2>
   1f418:	4bb3      	ldr	r3, [pc, #716]	; (1f6e8 <__aeabi_dsub+0x344>)
   1f41a:	429e      	cmp	r6, r3
   1f41c:	d048      	beq.n	1f4b0 <__aeabi_dsub+0x10c>
   1f41e:	2380      	movs	r3, #128	; 0x80
   1f420:	041b      	lsls	r3, r3, #16
   1f422:	4319      	orrs	r1, r3
   1f424:	2d38      	cmp	r5, #56	; 0x38
   1f426:	dd00      	ble.n	1f42a <__aeabi_dsub+0x86>
   1f428:	e119      	b.n	1f65e <__aeabi_dsub+0x2ba>
   1f42a:	2d1f      	cmp	r5, #31
   1f42c:	dd00      	ble.n	1f430 <__aeabi_dsub+0x8c>
   1f42e:	e14c      	b.n	1f6ca <__aeabi_dsub+0x326>
   1f430:	2320      	movs	r3, #32
   1f432:	000f      	movs	r7, r1
   1f434:	1b5b      	subs	r3, r3, r5
   1f436:	0010      	movs	r0, r2
   1f438:	409a      	lsls	r2, r3
   1f43a:	409f      	lsls	r7, r3
   1f43c:	40e8      	lsrs	r0, r5
   1f43e:	1e53      	subs	r3, r2, #1
   1f440:	419a      	sbcs	r2, r3
   1f442:	40e9      	lsrs	r1, r5
   1f444:	4307      	orrs	r7, r0
   1f446:	4317      	orrs	r7, r2
   1f448:	4653      	mov	r3, sl
   1f44a:	1bdf      	subs	r7, r3, r7
   1f44c:	1a61      	subs	r1, r4, r1
   1f44e:	45ba      	cmp	sl, r7
   1f450:	41a4      	sbcs	r4, r4
   1f452:	4264      	negs	r4, r4
   1f454:	1b0c      	subs	r4, r1, r4
   1f456:	0223      	lsls	r3, r4, #8
   1f458:	d400      	bmi.n	1f45c <__aeabi_dsub+0xb8>
   1f45a:	e0c5      	b.n	1f5e8 <__aeabi_dsub+0x244>
   1f45c:	0264      	lsls	r4, r4, #9
   1f45e:	0a65      	lsrs	r5, r4, #9
   1f460:	2d00      	cmp	r5, #0
   1f462:	d100      	bne.n	1f466 <__aeabi_dsub+0xc2>
   1f464:	e0f6      	b.n	1f654 <__aeabi_dsub+0x2b0>
   1f466:	0028      	movs	r0, r5
   1f468:	f7fd fe46 	bl	1d0f8 <__clzsi2>
   1f46c:	0003      	movs	r3, r0
   1f46e:	3b08      	subs	r3, #8
   1f470:	2b1f      	cmp	r3, #31
   1f472:	dd00      	ble.n	1f476 <__aeabi_dsub+0xd2>
   1f474:	e0e9      	b.n	1f64a <__aeabi_dsub+0x2a6>
   1f476:	2220      	movs	r2, #32
   1f478:	003c      	movs	r4, r7
   1f47a:	1ad2      	subs	r2, r2, r3
   1f47c:	409d      	lsls	r5, r3
   1f47e:	40d4      	lsrs	r4, r2
   1f480:	409f      	lsls	r7, r3
   1f482:	4325      	orrs	r5, r4
   1f484:	429e      	cmp	r6, r3
   1f486:	dd00      	ble.n	1f48a <__aeabi_dsub+0xe6>
   1f488:	e0db      	b.n	1f642 <__aeabi_dsub+0x29e>
   1f48a:	1b9e      	subs	r6, r3, r6
   1f48c:	1c73      	adds	r3, r6, #1
   1f48e:	2b1f      	cmp	r3, #31
   1f490:	dd00      	ble.n	1f494 <__aeabi_dsub+0xf0>
   1f492:	e10a      	b.n	1f6aa <__aeabi_dsub+0x306>
   1f494:	2220      	movs	r2, #32
   1f496:	0038      	movs	r0, r7
   1f498:	1ad2      	subs	r2, r2, r3
   1f49a:	0029      	movs	r1, r5
   1f49c:	4097      	lsls	r7, r2
   1f49e:	002c      	movs	r4, r5
   1f4a0:	4091      	lsls	r1, r2
   1f4a2:	40d8      	lsrs	r0, r3
   1f4a4:	1e7a      	subs	r2, r7, #1
   1f4a6:	4197      	sbcs	r7, r2
   1f4a8:	40dc      	lsrs	r4, r3
   1f4aa:	2600      	movs	r6, #0
   1f4ac:	4301      	orrs	r1, r0
   1f4ae:	430f      	orrs	r7, r1
   1f4b0:	077b      	lsls	r3, r7, #29
   1f4b2:	d009      	beq.n	1f4c8 <__aeabi_dsub+0x124>
   1f4b4:	230f      	movs	r3, #15
   1f4b6:	403b      	ands	r3, r7
   1f4b8:	2b04      	cmp	r3, #4
   1f4ba:	d005      	beq.n	1f4c8 <__aeabi_dsub+0x124>
   1f4bc:	1d3b      	adds	r3, r7, #4
   1f4be:	42bb      	cmp	r3, r7
   1f4c0:	41bf      	sbcs	r7, r7
   1f4c2:	427f      	negs	r7, r7
   1f4c4:	19e4      	adds	r4, r4, r7
   1f4c6:	001f      	movs	r7, r3
   1f4c8:	0223      	lsls	r3, r4, #8
   1f4ca:	d525      	bpl.n	1f518 <__aeabi_dsub+0x174>
   1f4cc:	4b86      	ldr	r3, [pc, #536]	; (1f6e8 <__aeabi_dsub+0x344>)
   1f4ce:	3601      	adds	r6, #1
   1f4d0:	429e      	cmp	r6, r3
   1f4d2:	d100      	bne.n	1f4d6 <__aeabi_dsub+0x132>
   1f4d4:	e0af      	b.n	1f636 <__aeabi_dsub+0x292>
   1f4d6:	4b85      	ldr	r3, [pc, #532]	; (1f6ec <__aeabi_dsub+0x348>)
   1f4d8:	2501      	movs	r5, #1
   1f4da:	401c      	ands	r4, r3
   1f4dc:	4643      	mov	r3, r8
   1f4de:	0762      	lsls	r2, r4, #29
   1f4e0:	08ff      	lsrs	r7, r7, #3
   1f4e2:	0264      	lsls	r4, r4, #9
   1f4e4:	0576      	lsls	r6, r6, #21
   1f4e6:	4317      	orrs	r7, r2
   1f4e8:	0b24      	lsrs	r4, r4, #12
   1f4ea:	0d76      	lsrs	r6, r6, #21
   1f4ec:	401d      	ands	r5, r3
   1f4ee:	2100      	movs	r1, #0
   1f4f0:	0324      	lsls	r4, r4, #12
   1f4f2:	0b23      	lsrs	r3, r4, #12
   1f4f4:	0d0c      	lsrs	r4, r1, #20
   1f4f6:	4a7e      	ldr	r2, [pc, #504]	; (1f6f0 <__aeabi_dsub+0x34c>)
   1f4f8:	0524      	lsls	r4, r4, #20
   1f4fa:	431c      	orrs	r4, r3
   1f4fc:	4014      	ands	r4, r2
   1f4fe:	0533      	lsls	r3, r6, #20
   1f500:	4323      	orrs	r3, r4
   1f502:	005b      	lsls	r3, r3, #1
   1f504:	07ed      	lsls	r5, r5, #31
   1f506:	085b      	lsrs	r3, r3, #1
   1f508:	432b      	orrs	r3, r5
   1f50a:	0038      	movs	r0, r7
   1f50c:	0019      	movs	r1, r3
   1f50e:	bc1c      	pop	{r2, r3, r4}
   1f510:	4690      	mov	r8, r2
   1f512:	4699      	mov	r9, r3
   1f514:	46a2      	mov	sl, r4
   1f516:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f518:	2501      	movs	r5, #1
   1f51a:	4643      	mov	r3, r8
   1f51c:	0762      	lsls	r2, r4, #29
   1f51e:	08ff      	lsrs	r7, r7, #3
   1f520:	4317      	orrs	r7, r2
   1f522:	08e4      	lsrs	r4, r4, #3
   1f524:	401d      	ands	r5, r3
   1f526:	4b70      	ldr	r3, [pc, #448]	; (1f6e8 <__aeabi_dsub+0x344>)
   1f528:	429e      	cmp	r6, r3
   1f52a:	d036      	beq.n	1f59a <__aeabi_dsub+0x1f6>
   1f52c:	0324      	lsls	r4, r4, #12
   1f52e:	0576      	lsls	r6, r6, #21
   1f530:	0b24      	lsrs	r4, r4, #12
   1f532:	0d76      	lsrs	r6, r6, #21
   1f534:	e7db      	b.n	1f4ee <__aeabi_dsub+0x14a>
   1f536:	4663      	mov	r3, ip
   1f538:	1af3      	subs	r3, r6, r3
   1f53a:	2b00      	cmp	r3, #0
   1f53c:	dc00      	bgt.n	1f540 <__aeabi_dsub+0x19c>
   1f53e:	e094      	b.n	1f66a <__aeabi_dsub+0x2c6>
   1f540:	4660      	mov	r0, ip
   1f542:	2800      	cmp	r0, #0
   1f544:	d035      	beq.n	1f5b2 <__aeabi_dsub+0x20e>
   1f546:	4868      	ldr	r0, [pc, #416]	; (1f6e8 <__aeabi_dsub+0x344>)
   1f548:	4286      	cmp	r6, r0
   1f54a:	d0b1      	beq.n	1f4b0 <__aeabi_dsub+0x10c>
   1f54c:	2780      	movs	r7, #128	; 0x80
   1f54e:	043f      	lsls	r7, r7, #16
   1f550:	4339      	orrs	r1, r7
   1f552:	2b38      	cmp	r3, #56	; 0x38
   1f554:	dc00      	bgt.n	1f558 <__aeabi_dsub+0x1b4>
   1f556:	e0fd      	b.n	1f754 <__aeabi_dsub+0x3b0>
   1f558:	430a      	orrs	r2, r1
   1f55a:	0017      	movs	r7, r2
   1f55c:	2100      	movs	r1, #0
   1f55e:	1e7a      	subs	r2, r7, #1
   1f560:	4197      	sbcs	r7, r2
   1f562:	4457      	add	r7, sl
   1f564:	4557      	cmp	r7, sl
   1f566:	4180      	sbcs	r0, r0
   1f568:	1909      	adds	r1, r1, r4
   1f56a:	4244      	negs	r4, r0
   1f56c:	190c      	adds	r4, r1, r4
   1f56e:	0223      	lsls	r3, r4, #8
   1f570:	d53a      	bpl.n	1f5e8 <__aeabi_dsub+0x244>
   1f572:	4b5d      	ldr	r3, [pc, #372]	; (1f6e8 <__aeabi_dsub+0x344>)
   1f574:	3601      	adds	r6, #1
   1f576:	429e      	cmp	r6, r3
   1f578:	d100      	bne.n	1f57c <__aeabi_dsub+0x1d8>
   1f57a:	e14b      	b.n	1f814 <__aeabi_dsub+0x470>
   1f57c:	2201      	movs	r2, #1
   1f57e:	4b5b      	ldr	r3, [pc, #364]	; (1f6ec <__aeabi_dsub+0x348>)
   1f580:	401c      	ands	r4, r3
   1f582:	087b      	lsrs	r3, r7, #1
   1f584:	4017      	ands	r7, r2
   1f586:	431f      	orrs	r7, r3
   1f588:	07e2      	lsls	r2, r4, #31
   1f58a:	4317      	orrs	r7, r2
   1f58c:	0864      	lsrs	r4, r4, #1
   1f58e:	e78f      	b.n	1f4b0 <__aeabi_dsub+0x10c>
   1f590:	0008      	movs	r0, r1
   1f592:	4310      	orrs	r0, r2
   1f594:	d000      	beq.n	1f598 <__aeabi_dsub+0x1f4>
   1f596:	e724      	b.n	1f3e2 <__aeabi_dsub+0x3e>
   1f598:	e721      	b.n	1f3de <__aeabi_dsub+0x3a>
   1f59a:	0023      	movs	r3, r4
   1f59c:	433b      	orrs	r3, r7
   1f59e:	d100      	bne.n	1f5a2 <__aeabi_dsub+0x1fe>
   1f5a0:	e1b9      	b.n	1f916 <__aeabi_dsub+0x572>
   1f5a2:	2280      	movs	r2, #128	; 0x80
   1f5a4:	0312      	lsls	r2, r2, #12
   1f5a6:	4314      	orrs	r4, r2
   1f5a8:	0324      	lsls	r4, r4, #12
   1f5aa:	0b24      	lsrs	r4, r4, #12
   1f5ac:	e79f      	b.n	1f4ee <__aeabi_dsub+0x14a>
   1f5ae:	002e      	movs	r6, r5
   1f5b0:	e77e      	b.n	1f4b0 <__aeabi_dsub+0x10c>
   1f5b2:	0008      	movs	r0, r1
   1f5b4:	4310      	orrs	r0, r2
   1f5b6:	d100      	bne.n	1f5ba <__aeabi_dsub+0x216>
   1f5b8:	e0ca      	b.n	1f750 <__aeabi_dsub+0x3ac>
   1f5ba:	1e58      	subs	r0, r3, #1
   1f5bc:	4684      	mov	ip, r0
   1f5be:	2800      	cmp	r0, #0
   1f5c0:	d000      	beq.n	1f5c4 <__aeabi_dsub+0x220>
   1f5c2:	e0e7      	b.n	1f794 <__aeabi_dsub+0x3f0>
   1f5c4:	4452      	add	r2, sl
   1f5c6:	4552      	cmp	r2, sl
   1f5c8:	4180      	sbcs	r0, r0
   1f5ca:	1864      	adds	r4, r4, r1
   1f5cc:	4240      	negs	r0, r0
   1f5ce:	1824      	adds	r4, r4, r0
   1f5d0:	0017      	movs	r7, r2
   1f5d2:	2601      	movs	r6, #1
   1f5d4:	0223      	lsls	r3, r4, #8
   1f5d6:	d507      	bpl.n	1f5e8 <__aeabi_dsub+0x244>
   1f5d8:	2602      	movs	r6, #2
   1f5da:	e7cf      	b.n	1f57c <__aeabi_dsub+0x1d8>
   1f5dc:	4664      	mov	r4, ip
   1f5de:	432c      	orrs	r4, r5
   1f5e0:	d100      	bne.n	1f5e4 <__aeabi_dsub+0x240>
   1f5e2:	e1b3      	b.n	1f94c <__aeabi_dsub+0x5a8>
   1f5e4:	002c      	movs	r4, r5
   1f5e6:	4667      	mov	r7, ip
   1f5e8:	077b      	lsls	r3, r7, #29
   1f5ea:	d000      	beq.n	1f5ee <__aeabi_dsub+0x24a>
   1f5ec:	e762      	b.n	1f4b4 <__aeabi_dsub+0x110>
   1f5ee:	0763      	lsls	r3, r4, #29
   1f5f0:	08ff      	lsrs	r7, r7, #3
   1f5f2:	431f      	orrs	r7, r3
   1f5f4:	2501      	movs	r5, #1
   1f5f6:	4643      	mov	r3, r8
   1f5f8:	08e4      	lsrs	r4, r4, #3
   1f5fa:	401d      	ands	r5, r3
   1f5fc:	e793      	b.n	1f526 <__aeabi_dsub+0x182>
   1f5fe:	2d00      	cmp	r5, #0
   1f600:	d178      	bne.n	1f6f4 <__aeabi_dsub+0x350>
   1f602:	1c75      	adds	r5, r6, #1
   1f604:	056d      	lsls	r5, r5, #21
   1f606:	0d6d      	lsrs	r5, r5, #21
   1f608:	2d01      	cmp	r5, #1
   1f60a:	dc00      	bgt.n	1f60e <__aeabi_dsub+0x26a>
   1f60c:	e0f2      	b.n	1f7f4 <__aeabi_dsub+0x450>
   1f60e:	4650      	mov	r0, sl
   1f610:	1a80      	subs	r0, r0, r2
   1f612:	4582      	cmp	sl, r0
   1f614:	41bf      	sbcs	r7, r7
   1f616:	1a65      	subs	r5, r4, r1
   1f618:	427f      	negs	r7, r7
   1f61a:	1bed      	subs	r5, r5, r7
   1f61c:	4684      	mov	ip, r0
   1f61e:	0228      	lsls	r0, r5, #8
   1f620:	d400      	bmi.n	1f624 <__aeabi_dsub+0x280>
   1f622:	e08c      	b.n	1f73e <__aeabi_dsub+0x39a>
   1f624:	4650      	mov	r0, sl
   1f626:	1a17      	subs	r7, r2, r0
   1f628:	42ba      	cmp	r2, r7
   1f62a:	4192      	sbcs	r2, r2
   1f62c:	1b0c      	subs	r4, r1, r4
   1f62e:	4255      	negs	r5, r2
   1f630:	1b65      	subs	r5, r4, r5
   1f632:	4698      	mov	r8, r3
   1f634:	e714      	b.n	1f460 <__aeabi_dsub+0xbc>
   1f636:	2501      	movs	r5, #1
   1f638:	4643      	mov	r3, r8
   1f63a:	2400      	movs	r4, #0
   1f63c:	401d      	ands	r5, r3
   1f63e:	2700      	movs	r7, #0
   1f640:	e755      	b.n	1f4ee <__aeabi_dsub+0x14a>
   1f642:	4c2a      	ldr	r4, [pc, #168]	; (1f6ec <__aeabi_dsub+0x348>)
   1f644:	1af6      	subs	r6, r6, r3
   1f646:	402c      	ands	r4, r5
   1f648:	e732      	b.n	1f4b0 <__aeabi_dsub+0x10c>
   1f64a:	003d      	movs	r5, r7
   1f64c:	3828      	subs	r0, #40	; 0x28
   1f64e:	4085      	lsls	r5, r0
   1f650:	2700      	movs	r7, #0
   1f652:	e717      	b.n	1f484 <__aeabi_dsub+0xe0>
   1f654:	0038      	movs	r0, r7
   1f656:	f7fd fd4f 	bl	1d0f8 <__clzsi2>
   1f65a:	3020      	adds	r0, #32
   1f65c:	e706      	b.n	1f46c <__aeabi_dsub+0xc8>
   1f65e:	430a      	orrs	r2, r1
   1f660:	0017      	movs	r7, r2
   1f662:	2100      	movs	r1, #0
   1f664:	1e7a      	subs	r2, r7, #1
   1f666:	4197      	sbcs	r7, r2
   1f668:	e6ee      	b.n	1f448 <__aeabi_dsub+0xa4>
   1f66a:	2b00      	cmp	r3, #0
   1f66c:	d000      	beq.n	1f670 <__aeabi_dsub+0x2cc>
   1f66e:	e0e5      	b.n	1f83c <__aeabi_dsub+0x498>
   1f670:	1c73      	adds	r3, r6, #1
   1f672:	469c      	mov	ip, r3
   1f674:	055b      	lsls	r3, r3, #21
   1f676:	0d5b      	lsrs	r3, r3, #21
   1f678:	2b01      	cmp	r3, #1
   1f67a:	dc00      	bgt.n	1f67e <__aeabi_dsub+0x2da>
   1f67c:	e09f      	b.n	1f7be <__aeabi_dsub+0x41a>
   1f67e:	4b1a      	ldr	r3, [pc, #104]	; (1f6e8 <__aeabi_dsub+0x344>)
   1f680:	459c      	cmp	ip, r3
   1f682:	d100      	bne.n	1f686 <__aeabi_dsub+0x2e2>
   1f684:	e0c5      	b.n	1f812 <__aeabi_dsub+0x46e>
   1f686:	4452      	add	r2, sl
   1f688:	4552      	cmp	r2, sl
   1f68a:	4180      	sbcs	r0, r0
   1f68c:	1864      	adds	r4, r4, r1
   1f68e:	4240      	negs	r0, r0
   1f690:	1824      	adds	r4, r4, r0
   1f692:	07e7      	lsls	r7, r4, #31
   1f694:	0852      	lsrs	r2, r2, #1
   1f696:	4317      	orrs	r7, r2
   1f698:	0864      	lsrs	r4, r4, #1
   1f69a:	4666      	mov	r6, ip
   1f69c:	e708      	b.n	1f4b0 <__aeabi_dsub+0x10c>
   1f69e:	4812      	ldr	r0, [pc, #72]	; (1f6e8 <__aeabi_dsub+0x344>)
   1f6a0:	4285      	cmp	r5, r0
   1f6a2:	d100      	bne.n	1f6a6 <__aeabi_dsub+0x302>
   1f6a4:	e085      	b.n	1f7b2 <__aeabi_dsub+0x40e>
   1f6a6:	001d      	movs	r5, r3
   1f6a8:	e6bc      	b.n	1f424 <__aeabi_dsub+0x80>
   1f6aa:	0029      	movs	r1, r5
   1f6ac:	3e1f      	subs	r6, #31
   1f6ae:	40f1      	lsrs	r1, r6
   1f6b0:	2b20      	cmp	r3, #32
   1f6b2:	d100      	bne.n	1f6b6 <__aeabi_dsub+0x312>
   1f6b4:	e07f      	b.n	1f7b6 <__aeabi_dsub+0x412>
   1f6b6:	2240      	movs	r2, #64	; 0x40
   1f6b8:	1ad3      	subs	r3, r2, r3
   1f6ba:	409d      	lsls	r5, r3
   1f6bc:	432f      	orrs	r7, r5
   1f6be:	1e7d      	subs	r5, r7, #1
   1f6c0:	41af      	sbcs	r7, r5
   1f6c2:	2400      	movs	r4, #0
   1f6c4:	430f      	orrs	r7, r1
   1f6c6:	2600      	movs	r6, #0
   1f6c8:	e78e      	b.n	1f5e8 <__aeabi_dsub+0x244>
   1f6ca:	002b      	movs	r3, r5
   1f6cc:	000f      	movs	r7, r1
   1f6ce:	3b20      	subs	r3, #32
   1f6d0:	40df      	lsrs	r7, r3
   1f6d2:	2d20      	cmp	r5, #32
   1f6d4:	d071      	beq.n	1f7ba <__aeabi_dsub+0x416>
   1f6d6:	2340      	movs	r3, #64	; 0x40
   1f6d8:	1b5d      	subs	r5, r3, r5
   1f6da:	40a9      	lsls	r1, r5
   1f6dc:	430a      	orrs	r2, r1
   1f6de:	1e51      	subs	r1, r2, #1
   1f6e0:	418a      	sbcs	r2, r1
   1f6e2:	2100      	movs	r1, #0
   1f6e4:	4317      	orrs	r7, r2
   1f6e6:	e6af      	b.n	1f448 <__aeabi_dsub+0xa4>
   1f6e8:	000007ff 	.word	0x000007ff
   1f6ec:	ff7fffff 	.word	0xff7fffff
   1f6f0:	800fffff 	.word	0x800fffff
   1f6f4:	2e00      	cmp	r6, #0
   1f6f6:	d03e      	beq.n	1f776 <__aeabi_dsub+0x3d2>
   1f6f8:	4eb3      	ldr	r6, [pc, #716]	; (1f9c8 <__aeabi_dsub+0x624>)
   1f6fa:	45b4      	cmp	ip, r6
   1f6fc:	d045      	beq.n	1f78a <__aeabi_dsub+0x3e6>
   1f6fe:	2680      	movs	r6, #128	; 0x80
   1f700:	0436      	lsls	r6, r6, #16
   1f702:	426d      	negs	r5, r5
   1f704:	4334      	orrs	r4, r6
   1f706:	2d38      	cmp	r5, #56	; 0x38
   1f708:	dd00      	ble.n	1f70c <__aeabi_dsub+0x368>
   1f70a:	e0a8      	b.n	1f85e <__aeabi_dsub+0x4ba>
   1f70c:	2d1f      	cmp	r5, #31
   1f70e:	dd00      	ble.n	1f712 <__aeabi_dsub+0x36e>
   1f710:	e11f      	b.n	1f952 <__aeabi_dsub+0x5ae>
   1f712:	2620      	movs	r6, #32
   1f714:	0027      	movs	r7, r4
   1f716:	4650      	mov	r0, sl
   1f718:	1b76      	subs	r6, r6, r5
   1f71a:	40b7      	lsls	r7, r6
   1f71c:	40e8      	lsrs	r0, r5
   1f71e:	4307      	orrs	r7, r0
   1f720:	4650      	mov	r0, sl
   1f722:	40b0      	lsls	r0, r6
   1f724:	1e46      	subs	r6, r0, #1
   1f726:	41b0      	sbcs	r0, r6
   1f728:	40ec      	lsrs	r4, r5
   1f72a:	4338      	orrs	r0, r7
   1f72c:	1a17      	subs	r7, r2, r0
   1f72e:	42ba      	cmp	r2, r7
   1f730:	4192      	sbcs	r2, r2
   1f732:	1b0c      	subs	r4, r1, r4
   1f734:	4252      	negs	r2, r2
   1f736:	1aa4      	subs	r4, r4, r2
   1f738:	4666      	mov	r6, ip
   1f73a:	4698      	mov	r8, r3
   1f73c:	e68b      	b.n	1f456 <__aeabi_dsub+0xb2>
   1f73e:	4664      	mov	r4, ip
   1f740:	4667      	mov	r7, ip
   1f742:	432c      	orrs	r4, r5
   1f744:	d000      	beq.n	1f748 <__aeabi_dsub+0x3a4>
   1f746:	e68b      	b.n	1f460 <__aeabi_dsub+0xbc>
   1f748:	2500      	movs	r5, #0
   1f74a:	2600      	movs	r6, #0
   1f74c:	2700      	movs	r7, #0
   1f74e:	e6ea      	b.n	1f526 <__aeabi_dsub+0x182>
   1f750:	001e      	movs	r6, r3
   1f752:	e6ad      	b.n	1f4b0 <__aeabi_dsub+0x10c>
   1f754:	2b1f      	cmp	r3, #31
   1f756:	dc60      	bgt.n	1f81a <__aeabi_dsub+0x476>
   1f758:	2720      	movs	r7, #32
   1f75a:	1af8      	subs	r0, r7, r3
   1f75c:	000f      	movs	r7, r1
   1f75e:	4684      	mov	ip, r0
   1f760:	4087      	lsls	r7, r0
   1f762:	0010      	movs	r0, r2
   1f764:	40d8      	lsrs	r0, r3
   1f766:	4307      	orrs	r7, r0
   1f768:	4660      	mov	r0, ip
   1f76a:	4082      	lsls	r2, r0
   1f76c:	1e50      	subs	r0, r2, #1
   1f76e:	4182      	sbcs	r2, r0
   1f770:	40d9      	lsrs	r1, r3
   1f772:	4317      	orrs	r7, r2
   1f774:	e6f5      	b.n	1f562 <__aeabi_dsub+0x1be>
   1f776:	0026      	movs	r6, r4
   1f778:	4650      	mov	r0, sl
   1f77a:	4306      	orrs	r6, r0
   1f77c:	d005      	beq.n	1f78a <__aeabi_dsub+0x3e6>
   1f77e:	43ed      	mvns	r5, r5
   1f780:	2d00      	cmp	r5, #0
   1f782:	d0d3      	beq.n	1f72c <__aeabi_dsub+0x388>
   1f784:	4e90      	ldr	r6, [pc, #576]	; (1f9c8 <__aeabi_dsub+0x624>)
   1f786:	45b4      	cmp	ip, r6
   1f788:	d1bd      	bne.n	1f706 <__aeabi_dsub+0x362>
   1f78a:	000c      	movs	r4, r1
   1f78c:	0017      	movs	r7, r2
   1f78e:	4666      	mov	r6, ip
   1f790:	4698      	mov	r8, r3
   1f792:	e68d      	b.n	1f4b0 <__aeabi_dsub+0x10c>
   1f794:	488c      	ldr	r0, [pc, #560]	; (1f9c8 <__aeabi_dsub+0x624>)
   1f796:	4283      	cmp	r3, r0
   1f798:	d00b      	beq.n	1f7b2 <__aeabi_dsub+0x40e>
   1f79a:	4663      	mov	r3, ip
   1f79c:	e6d9      	b.n	1f552 <__aeabi_dsub+0x1ae>
   1f79e:	2d00      	cmp	r5, #0
   1f7a0:	d000      	beq.n	1f7a4 <__aeabi_dsub+0x400>
   1f7a2:	e096      	b.n	1f8d2 <__aeabi_dsub+0x52e>
   1f7a4:	0008      	movs	r0, r1
   1f7a6:	4310      	orrs	r0, r2
   1f7a8:	d100      	bne.n	1f7ac <__aeabi_dsub+0x408>
   1f7aa:	e0e2      	b.n	1f972 <__aeabi_dsub+0x5ce>
   1f7ac:	000c      	movs	r4, r1
   1f7ae:	0017      	movs	r7, r2
   1f7b0:	4698      	mov	r8, r3
   1f7b2:	4e85      	ldr	r6, [pc, #532]	; (1f9c8 <__aeabi_dsub+0x624>)
   1f7b4:	e67c      	b.n	1f4b0 <__aeabi_dsub+0x10c>
   1f7b6:	2500      	movs	r5, #0
   1f7b8:	e780      	b.n	1f6bc <__aeabi_dsub+0x318>
   1f7ba:	2100      	movs	r1, #0
   1f7bc:	e78e      	b.n	1f6dc <__aeabi_dsub+0x338>
   1f7be:	0023      	movs	r3, r4
   1f7c0:	4650      	mov	r0, sl
   1f7c2:	4303      	orrs	r3, r0
   1f7c4:	2e00      	cmp	r6, #0
   1f7c6:	d000      	beq.n	1f7ca <__aeabi_dsub+0x426>
   1f7c8:	e0a8      	b.n	1f91c <__aeabi_dsub+0x578>
   1f7ca:	2b00      	cmp	r3, #0
   1f7cc:	d100      	bne.n	1f7d0 <__aeabi_dsub+0x42c>
   1f7ce:	e0de      	b.n	1f98e <__aeabi_dsub+0x5ea>
   1f7d0:	000b      	movs	r3, r1
   1f7d2:	4313      	orrs	r3, r2
   1f7d4:	d100      	bne.n	1f7d8 <__aeabi_dsub+0x434>
   1f7d6:	e66b      	b.n	1f4b0 <__aeabi_dsub+0x10c>
   1f7d8:	4452      	add	r2, sl
   1f7da:	4552      	cmp	r2, sl
   1f7dc:	4180      	sbcs	r0, r0
   1f7de:	1864      	adds	r4, r4, r1
   1f7e0:	4240      	negs	r0, r0
   1f7e2:	1824      	adds	r4, r4, r0
   1f7e4:	0017      	movs	r7, r2
   1f7e6:	0223      	lsls	r3, r4, #8
   1f7e8:	d400      	bmi.n	1f7ec <__aeabi_dsub+0x448>
   1f7ea:	e6fd      	b.n	1f5e8 <__aeabi_dsub+0x244>
   1f7ec:	4b77      	ldr	r3, [pc, #476]	; (1f9cc <__aeabi_dsub+0x628>)
   1f7ee:	4666      	mov	r6, ip
   1f7f0:	401c      	ands	r4, r3
   1f7f2:	e65d      	b.n	1f4b0 <__aeabi_dsub+0x10c>
   1f7f4:	0025      	movs	r5, r4
   1f7f6:	4650      	mov	r0, sl
   1f7f8:	4305      	orrs	r5, r0
   1f7fa:	2e00      	cmp	r6, #0
   1f7fc:	d1cf      	bne.n	1f79e <__aeabi_dsub+0x3fa>
   1f7fe:	2d00      	cmp	r5, #0
   1f800:	d14f      	bne.n	1f8a2 <__aeabi_dsub+0x4fe>
   1f802:	000c      	movs	r4, r1
   1f804:	4314      	orrs	r4, r2
   1f806:	d100      	bne.n	1f80a <__aeabi_dsub+0x466>
   1f808:	e0a0      	b.n	1f94c <__aeabi_dsub+0x5a8>
   1f80a:	000c      	movs	r4, r1
   1f80c:	0017      	movs	r7, r2
   1f80e:	4698      	mov	r8, r3
   1f810:	e64e      	b.n	1f4b0 <__aeabi_dsub+0x10c>
   1f812:	4666      	mov	r6, ip
   1f814:	2400      	movs	r4, #0
   1f816:	2700      	movs	r7, #0
   1f818:	e685      	b.n	1f526 <__aeabi_dsub+0x182>
   1f81a:	001f      	movs	r7, r3
   1f81c:	0008      	movs	r0, r1
   1f81e:	3f20      	subs	r7, #32
   1f820:	40f8      	lsrs	r0, r7
   1f822:	0007      	movs	r7, r0
   1f824:	2b20      	cmp	r3, #32
   1f826:	d100      	bne.n	1f82a <__aeabi_dsub+0x486>
   1f828:	e08e      	b.n	1f948 <__aeabi_dsub+0x5a4>
   1f82a:	2040      	movs	r0, #64	; 0x40
   1f82c:	1ac3      	subs	r3, r0, r3
   1f82e:	4099      	lsls	r1, r3
   1f830:	430a      	orrs	r2, r1
   1f832:	1e51      	subs	r1, r2, #1
   1f834:	418a      	sbcs	r2, r1
   1f836:	2100      	movs	r1, #0
   1f838:	4317      	orrs	r7, r2
   1f83a:	e692      	b.n	1f562 <__aeabi_dsub+0x1be>
   1f83c:	2e00      	cmp	r6, #0
   1f83e:	d114      	bne.n	1f86a <__aeabi_dsub+0x4c6>
   1f840:	0026      	movs	r6, r4
   1f842:	4650      	mov	r0, sl
   1f844:	4306      	orrs	r6, r0
   1f846:	d062      	beq.n	1f90e <__aeabi_dsub+0x56a>
   1f848:	43db      	mvns	r3, r3
   1f84a:	2b00      	cmp	r3, #0
   1f84c:	d15c      	bne.n	1f908 <__aeabi_dsub+0x564>
   1f84e:	1887      	adds	r7, r0, r2
   1f850:	4297      	cmp	r7, r2
   1f852:	4192      	sbcs	r2, r2
   1f854:	1864      	adds	r4, r4, r1
   1f856:	4252      	negs	r2, r2
   1f858:	18a4      	adds	r4, r4, r2
   1f85a:	4666      	mov	r6, ip
   1f85c:	e687      	b.n	1f56e <__aeabi_dsub+0x1ca>
   1f85e:	4650      	mov	r0, sl
   1f860:	4320      	orrs	r0, r4
   1f862:	1e44      	subs	r4, r0, #1
   1f864:	41a0      	sbcs	r0, r4
   1f866:	2400      	movs	r4, #0
   1f868:	e760      	b.n	1f72c <__aeabi_dsub+0x388>
   1f86a:	4e57      	ldr	r6, [pc, #348]	; (1f9c8 <__aeabi_dsub+0x624>)
   1f86c:	45b4      	cmp	ip, r6
   1f86e:	d04e      	beq.n	1f90e <__aeabi_dsub+0x56a>
   1f870:	2680      	movs	r6, #128	; 0x80
   1f872:	0436      	lsls	r6, r6, #16
   1f874:	425b      	negs	r3, r3
   1f876:	4334      	orrs	r4, r6
   1f878:	2b38      	cmp	r3, #56	; 0x38
   1f87a:	dd00      	ble.n	1f87e <__aeabi_dsub+0x4da>
   1f87c:	e07f      	b.n	1f97e <__aeabi_dsub+0x5da>
   1f87e:	2b1f      	cmp	r3, #31
   1f880:	dd00      	ble.n	1f884 <__aeabi_dsub+0x4e0>
   1f882:	e08b      	b.n	1f99c <__aeabi_dsub+0x5f8>
   1f884:	2620      	movs	r6, #32
   1f886:	0027      	movs	r7, r4
   1f888:	4650      	mov	r0, sl
   1f88a:	1af6      	subs	r6, r6, r3
   1f88c:	40b7      	lsls	r7, r6
   1f88e:	40d8      	lsrs	r0, r3
   1f890:	4307      	orrs	r7, r0
   1f892:	4650      	mov	r0, sl
   1f894:	40b0      	lsls	r0, r6
   1f896:	1e46      	subs	r6, r0, #1
   1f898:	41b0      	sbcs	r0, r6
   1f89a:	4307      	orrs	r7, r0
   1f89c:	40dc      	lsrs	r4, r3
   1f89e:	18bf      	adds	r7, r7, r2
   1f8a0:	e7d6      	b.n	1f850 <__aeabi_dsub+0x4ac>
   1f8a2:	000d      	movs	r5, r1
   1f8a4:	4315      	orrs	r5, r2
   1f8a6:	d100      	bne.n	1f8aa <__aeabi_dsub+0x506>
   1f8a8:	e602      	b.n	1f4b0 <__aeabi_dsub+0x10c>
   1f8aa:	4650      	mov	r0, sl
   1f8ac:	1a80      	subs	r0, r0, r2
   1f8ae:	4582      	cmp	sl, r0
   1f8b0:	41bf      	sbcs	r7, r7
   1f8b2:	1a65      	subs	r5, r4, r1
   1f8b4:	427f      	negs	r7, r7
   1f8b6:	1bed      	subs	r5, r5, r7
   1f8b8:	4684      	mov	ip, r0
   1f8ba:	0228      	lsls	r0, r5, #8
   1f8bc:	d400      	bmi.n	1f8c0 <__aeabi_dsub+0x51c>
   1f8be:	e68d      	b.n	1f5dc <__aeabi_dsub+0x238>
   1f8c0:	4650      	mov	r0, sl
   1f8c2:	1a17      	subs	r7, r2, r0
   1f8c4:	42ba      	cmp	r2, r7
   1f8c6:	4192      	sbcs	r2, r2
   1f8c8:	1b0c      	subs	r4, r1, r4
   1f8ca:	4252      	negs	r2, r2
   1f8cc:	1aa4      	subs	r4, r4, r2
   1f8ce:	4698      	mov	r8, r3
   1f8d0:	e5ee      	b.n	1f4b0 <__aeabi_dsub+0x10c>
   1f8d2:	000d      	movs	r5, r1
   1f8d4:	4315      	orrs	r5, r2
   1f8d6:	d100      	bne.n	1f8da <__aeabi_dsub+0x536>
   1f8d8:	e76b      	b.n	1f7b2 <__aeabi_dsub+0x40e>
   1f8da:	4650      	mov	r0, sl
   1f8dc:	0767      	lsls	r7, r4, #29
   1f8de:	08c0      	lsrs	r0, r0, #3
   1f8e0:	4307      	orrs	r7, r0
   1f8e2:	2080      	movs	r0, #128	; 0x80
   1f8e4:	08e4      	lsrs	r4, r4, #3
   1f8e6:	0300      	lsls	r0, r0, #12
   1f8e8:	4204      	tst	r4, r0
   1f8ea:	d007      	beq.n	1f8fc <__aeabi_dsub+0x558>
   1f8ec:	08cd      	lsrs	r5, r1, #3
   1f8ee:	4205      	tst	r5, r0
   1f8f0:	d104      	bne.n	1f8fc <__aeabi_dsub+0x558>
   1f8f2:	002c      	movs	r4, r5
   1f8f4:	4698      	mov	r8, r3
   1f8f6:	08d7      	lsrs	r7, r2, #3
   1f8f8:	0749      	lsls	r1, r1, #29
   1f8fa:	430f      	orrs	r7, r1
   1f8fc:	0f7b      	lsrs	r3, r7, #29
   1f8fe:	00e4      	lsls	r4, r4, #3
   1f900:	431c      	orrs	r4, r3
   1f902:	00ff      	lsls	r7, r7, #3
   1f904:	4e30      	ldr	r6, [pc, #192]	; (1f9c8 <__aeabi_dsub+0x624>)
   1f906:	e5d3      	b.n	1f4b0 <__aeabi_dsub+0x10c>
   1f908:	4e2f      	ldr	r6, [pc, #188]	; (1f9c8 <__aeabi_dsub+0x624>)
   1f90a:	45b4      	cmp	ip, r6
   1f90c:	d1b4      	bne.n	1f878 <__aeabi_dsub+0x4d4>
   1f90e:	000c      	movs	r4, r1
   1f910:	0017      	movs	r7, r2
   1f912:	4666      	mov	r6, ip
   1f914:	e5cc      	b.n	1f4b0 <__aeabi_dsub+0x10c>
   1f916:	2700      	movs	r7, #0
   1f918:	2400      	movs	r4, #0
   1f91a:	e5e8      	b.n	1f4ee <__aeabi_dsub+0x14a>
   1f91c:	2b00      	cmp	r3, #0
   1f91e:	d039      	beq.n	1f994 <__aeabi_dsub+0x5f0>
   1f920:	000b      	movs	r3, r1
   1f922:	4313      	orrs	r3, r2
   1f924:	d100      	bne.n	1f928 <__aeabi_dsub+0x584>
   1f926:	e744      	b.n	1f7b2 <__aeabi_dsub+0x40e>
   1f928:	08c0      	lsrs	r0, r0, #3
   1f92a:	0767      	lsls	r7, r4, #29
   1f92c:	4307      	orrs	r7, r0
   1f92e:	2080      	movs	r0, #128	; 0x80
   1f930:	08e4      	lsrs	r4, r4, #3
   1f932:	0300      	lsls	r0, r0, #12
   1f934:	4204      	tst	r4, r0
   1f936:	d0e1      	beq.n	1f8fc <__aeabi_dsub+0x558>
   1f938:	08cb      	lsrs	r3, r1, #3
   1f93a:	4203      	tst	r3, r0
   1f93c:	d1de      	bne.n	1f8fc <__aeabi_dsub+0x558>
   1f93e:	08d7      	lsrs	r7, r2, #3
   1f940:	0749      	lsls	r1, r1, #29
   1f942:	430f      	orrs	r7, r1
   1f944:	001c      	movs	r4, r3
   1f946:	e7d9      	b.n	1f8fc <__aeabi_dsub+0x558>
   1f948:	2100      	movs	r1, #0
   1f94a:	e771      	b.n	1f830 <__aeabi_dsub+0x48c>
   1f94c:	2500      	movs	r5, #0
   1f94e:	2700      	movs	r7, #0
   1f950:	e5e9      	b.n	1f526 <__aeabi_dsub+0x182>
   1f952:	002e      	movs	r6, r5
   1f954:	0027      	movs	r7, r4
   1f956:	3e20      	subs	r6, #32
   1f958:	40f7      	lsrs	r7, r6
   1f95a:	2d20      	cmp	r5, #32
   1f95c:	d02f      	beq.n	1f9be <__aeabi_dsub+0x61a>
   1f95e:	2640      	movs	r6, #64	; 0x40
   1f960:	1b75      	subs	r5, r6, r5
   1f962:	40ac      	lsls	r4, r5
   1f964:	4650      	mov	r0, sl
   1f966:	4320      	orrs	r0, r4
   1f968:	1e44      	subs	r4, r0, #1
   1f96a:	41a0      	sbcs	r0, r4
   1f96c:	2400      	movs	r4, #0
   1f96e:	4338      	orrs	r0, r7
   1f970:	e6dc      	b.n	1f72c <__aeabi_dsub+0x388>
   1f972:	2480      	movs	r4, #128	; 0x80
   1f974:	2500      	movs	r5, #0
   1f976:	0324      	lsls	r4, r4, #12
   1f978:	4e13      	ldr	r6, [pc, #76]	; (1f9c8 <__aeabi_dsub+0x624>)
   1f97a:	2700      	movs	r7, #0
   1f97c:	e5d3      	b.n	1f526 <__aeabi_dsub+0x182>
   1f97e:	4650      	mov	r0, sl
   1f980:	4320      	orrs	r0, r4
   1f982:	0007      	movs	r7, r0
   1f984:	1e78      	subs	r0, r7, #1
   1f986:	4187      	sbcs	r7, r0
   1f988:	2400      	movs	r4, #0
   1f98a:	18bf      	adds	r7, r7, r2
   1f98c:	e760      	b.n	1f850 <__aeabi_dsub+0x4ac>
   1f98e:	000c      	movs	r4, r1
   1f990:	0017      	movs	r7, r2
   1f992:	e58d      	b.n	1f4b0 <__aeabi_dsub+0x10c>
   1f994:	000c      	movs	r4, r1
   1f996:	0017      	movs	r7, r2
   1f998:	4e0b      	ldr	r6, [pc, #44]	; (1f9c8 <__aeabi_dsub+0x624>)
   1f99a:	e589      	b.n	1f4b0 <__aeabi_dsub+0x10c>
   1f99c:	001e      	movs	r6, r3
   1f99e:	0027      	movs	r7, r4
   1f9a0:	3e20      	subs	r6, #32
   1f9a2:	40f7      	lsrs	r7, r6
   1f9a4:	2b20      	cmp	r3, #32
   1f9a6:	d00c      	beq.n	1f9c2 <__aeabi_dsub+0x61e>
   1f9a8:	2640      	movs	r6, #64	; 0x40
   1f9aa:	1af3      	subs	r3, r6, r3
   1f9ac:	409c      	lsls	r4, r3
   1f9ae:	4650      	mov	r0, sl
   1f9b0:	4320      	orrs	r0, r4
   1f9b2:	1e44      	subs	r4, r0, #1
   1f9b4:	41a0      	sbcs	r0, r4
   1f9b6:	4307      	orrs	r7, r0
   1f9b8:	2400      	movs	r4, #0
   1f9ba:	18bf      	adds	r7, r7, r2
   1f9bc:	e748      	b.n	1f850 <__aeabi_dsub+0x4ac>
   1f9be:	2400      	movs	r4, #0
   1f9c0:	e7d0      	b.n	1f964 <__aeabi_dsub+0x5c0>
   1f9c2:	2400      	movs	r4, #0
   1f9c4:	e7f3      	b.n	1f9ae <__aeabi_dsub+0x60a>
   1f9c6:	46c0      	nop			; (mov r8, r8)
   1f9c8:	000007ff 	.word	0x000007ff
   1f9cc:	ff7fffff 	.word	0xff7fffff

0001f9d0 <__aeabi_dcmpun>:
   1f9d0:	b570      	push	{r4, r5, r6, lr}
   1f9d2:	4e0e      	ldr	r6, [pc, #56]	; (1fa0c <__aeabi_dcmpun+0x3c>)
   1f9d4:	030d      	lsls	r5, r1, #12
   1f9d6:	031c      	lsls	r4, r3, #12
   1f9d8:	0049      	lsls	r1, r1, #1
   1f9da:	005b      	lsls	r3, r3, #1
   1f9dc:	0b2d      	lsrs	r5, r5, #12
   1f9de:	0d49      	lsrs	r1, r1, #21
   1f9e0:	0b24      	lsrs	r4, r4, #12
   1f9e2:	0d5b      	lsrs	r3, r3, #21
   1f9e4:	42b1      	cmp	r1, r6
   1f9e6:	d004      	beq.n	1f9f2 <__aeabi_dcmpun+0x22>
   1f9e8:	4908      	ldr	r1, [pc, #32]	; (1fa0c <__aeabi_dcmpun+0x3c>)
   1f9ea:	2000      	movs	r0, #0
   1f9ec:	428b      	cmp	r3, r1
   1f9ee:	d008      	beq.n	1fa02 <__aeabi_dcmpun+0x32>
   1f9f0:	bd70      	pop	{r4, r5, r6, pc}
   1f9f2:	4305      	orrs	r5, r0
   1f9f4:	2001      	movs	r0, #1
   1f9f6:	2d00      	cmp	r5, #0
   1f9f8:	d1fa      	bne.n	1f9f0 <__aeabi_dcmpun+0x20>
   1f9fa:	4904      	ldr	r1, [pc, #16]	; (1fa0c <__aeabi_dcmpun+0x3c>)
   1f9fc:	2000      	movs	r0, #0
   1f9fe:	428b      	cmp	r3, r1
   1fa00:	d1f6      	bne.n	1f9f0 <__aeabi_dcmpun+0x20>
   1fa02:	4314      	orrs	r4, r2
   1fa04:	0020      	movs	r0, r4
   1fa06:	1e44      	subs	r4, r0, #1
   1fa08:	41a0      	sbcs	r0, r4
   1fa0a:	e7f1      	b.n	1f9f0 <__aeabi_dcmpun+0x20>
   1fa0c:	000007ff 	.word	0x000007ff

0001fa10 <__aeabi_d2iz>:
   1fa10:	b530      	push	{r4, r5, lr}
   1fa12:	4d13      	ldr	r5, [pc, #76]	; (1fa60 <__aeabi_d2iz+0x50>)
   1fa14:	030a      	lsls	r2, r1, #12
   1fa16:	004b      	lsls	r3, r1, #1
   1fa18:	0b12      	lsrs	r2, r2, #12
   1fa1a:	0d5b      	lsrs	r3, r3, #21
   1fa1c:	0fc9      	lsrs	r1, r1, #31
   1fa1e:	2400      	movs	r4, #0
   1fa20:	42ab      	cmp	r3, r5
   1fa22:	dd10      	ble.n	1fa46 <__aeabi_d2iz+0x36>
   1fa24:	4c0f      	ldr	r4, [pc, #60]	; (1fa64 <__aeabi_d2iz+0x54>)
   1fa26:	42a3      	cmp	r3, r4
   1fa28:	dc0f      	bgt.n	1fa4a <__aeabi_d2iz+0x3a>
   1fa2a:	2480      	movs	r4, #128	; 0x80
   1fa2c:	4d0e      	ldr	r5, [pc, #56]	; (1fa68 <__aeabi_d2iz+0x58>)
   1fa2e:	0364      	lsls	r4, r4, #13
   1fa30:	4322      	orrs	r2, r4
   1fa32:	1aed      	subs	r5, r5, r3
   1fa34:	2d1f      	cmp	r5, #31
   1fa36:	dd0b      	ble.n	1fa50 <__aeabi_d2iz+0x40>
   1fa38:	480c      	ldr	r0, [pc, #48]	; (1fa6c <__aeabi_d2iz+0x5c>)
   1fa3a:	1ac3      	subs	r3, r0, r3
   1fa3c:	40da      	lsrs	r2, r3
   1fa3e:	4254      	negs	r4, r2
   1fa40:	2900      	cmp	r1, #0
   1fa42:	d100      	bne.n	1fa46 <__aeabi_d2iz+0x36>
   1fa44:	0014      	movs	r4, r2
   1fa46:	0020      	movs	r0, r4
   1fa48:	bd30      	pop	{r4, r5, pc}
   1fa4a:	4b09      	ldr	r3, [pc, #36]	; (1fa70 <__aeabi_d2iz+0x60>)
   1fa4c:	18cc      	adds	r4, r1, r3
   1fa4e:	e7fa      	b.n	1fa46 <__aeabi_d2iz+0x36>
   1fa50:	4c08      	ldr	r4, [pc, #32]	; (1fa74 <__aeabi_d2iz+0x64>)
   1fa52:	40e8      	lsrs	r0, r5
   1fa54:	46a4      	mov	ip, r4
   1fa56:	4463      	add	r3, ip
   1fa58:	409a      	lsls	r2, r3
   1fa5a:	4302      	orrs	r2, r0
   1fa5c:	e7ef      	b.n	1fa3e <__aeabi_d2iz+0x2e>
   1fa5e:	46c0      	nop			; (mov r8, r8)
   1fa60:	000003fe 	.word	0x000003fe
   1fa64:	0000041d 	.word	0x0000041d
   1fa68:	00000433 	.word	0x00000433
   1fa6c:	00000413 	.word	0x00000413
   1fa70:	7fffffff 	.word	0x7fffffff
   1fa74:	fffffbed 	.word	0xfffffbed

0001fa78 <__aeabi_i2d>:
   1fa78:	b570      	push	{r4, r5, r6, lr}
   1fa7a:	2800      	cmp	r0, #0
   1fa7c:	d030      	beq.n	1fae0 <__aeabi_i2d+0x68>
   1fa7e:	17c3      	asrs	r3, r0, #31
   1fa80:	18c4      	adds	r4, r0, r3
   1fa82:	405c      	eors	r4, r3
   1fa84:	0fc5      	lsrs	r5, r0, #31
   1fa86:	0020      	movs	r0, r4
   1fa88:	f7fd fb36 	bl	1d0f8 <__clzsi2>
   1fa8c:	4b17      	ldr	r3, [pc, #92]	; (1faec <__aeabi_i2d+0x74>)
   1fa8e:	4a18      	ldr	r2, [pc, #96]	; (1faf0 <__aeabi_i2d+0x78>)
   1fa90:	1a1b      	subs	r3, r3, r0
   1fa92:	1ad2      	subs	r2, r2, r3
   1fa94:	2a1f      	cmp	r2, #31
   1fa96:	dd18      	ble.n	1faca <__aeabi_i2d+0x52>
   1fa98:	4a16      	ldr	r2, [pc, #88]	; (1faf4 <__aeabi_i2d+0x7c>)
   1fa9a:	1ad2      	subs	r2, r2, r3
   1fa9c:	4094      	lsls	r4, r2
   1fa9e:	2200      	movs	r2, #0
   1faa0:	0324      	lsls	r4, r4, #12
   1faa2:	055b      	lsls	r3, r3, #21
   1faa4:	0b24      	lsrs	r4, r4, #12
   1faa6:	0d5b      	lsrs	r3, r3, #21
   1faa8:	2100      	movs	r1, #0
   1faaa:	0010      	movs	r0, r2
   1faac:	0324      	lsls	r4, r4, #12
   1faae:	0d0a      	lsrs	r2, r1, #20
   1fab0:	0b24      	lsrs	r4, r4, #12
   1fab2:	0512      	lsls	r2, r2, #20
   1fab4:	4322      	orrs	r2, r4
   1fab6:	4c10      	ldr	r4, [pc, #64]	; (1faf8 <__aeabi_i2d+0x80>)
   1fab8:	051b      	lsls	r3, r3, #20
   1faba:	4022      	ands	r2, r4
   1fabc:	4313      	orrs	r3, r2
   1fabe:	005b      	lsls	r3, r3, #1
   1fac0:	07ed      	lsls	r5, r5, #31
   1fac2:	085b      	lsrs	r3, r3, #1
   1fac4:	432b      	orrs	r3, r5
   1fac6:	0019      	movs	r1, r3
   1fac8:	bd70      	pop	{r4, r5, r6, pc}
   1faca:	0021      	movs	r1, r4
   1facc:	4091      	lsls	r1, r2
   1face:	000a      	movs	r2, r1
   1fad0:	210b      	movs	r1, #11
   1fad2:	1a08      	subs	r0, r1, r0
   1fad4:	40c4      	lsrs	r4, r0
   1fad6:	055b      	lsls	r3, r3, #21
   1fad8:	0324      	lsls	r4, r4, #12
   1fada:	0b24      	lsrs	r4, r4, #12
   1fadc:	0d5b      	lsrs	r3, r3, #21
   1fade:	e7e3      	b.n	1faa8 <__aeabi_i2d+0x30>
   1fae0:	2500      	movs	r5, #0
   1fae2:	2300      	movs	r3, #0
   1fae4:	2400      	movs	r4, #0
   1fae6:	2200      	movs	r2, #0
   1fae8:	e7de      	b.n	1faa8 <__aeabi_i2d+0x30>
   1faea:	46c0      	nop			; (mov r8, r8)
   1faec:	0000041e 	.word	0x0000041e
   1faf0:	00000433 	.word	0x00000433
   1faf4:	00000413 	.word	0x00000413
   1faf8:	800fffff 	.word	0x800fffff

0001fafc <__aeabi_ui2d>:
   1fafc:	b510      	push	{r4, lr}
   1fafe:	1e04      	subs	r4, r0, #0
   1fb00:	d028      	beq.n	1fb54 <__aeabi_ui2d+0x58>
   1fb02:	f7fd faf9 	bl	1d0f8 <__clzsi2>
   1fb06:	4b15      	ldr	r3, [pc, #84]	; (1fb5c <__aeabi_ui2d+0x60>)
   1fb08:	4a15      	ldr	r2, [pc, #84]	; (1fb60 <__aeabi_ui2d+0x64>)
   1fb0a:	1a1b      	subs	r3, r3, r0
   1fb0c:	1ad2      	subs	r2, r2, r3
   1fb0e:	2a1f      	cmp	r2, #31
   1fb10:	dd15      	ble.n	1fb3e <__aeabi_ui2d+0x42>
   1fb12:	4a14      	ldr	r2, [pc, #80]	; (1fb64 <__aeabi_ui2d+0x68>)
   1fb14:	1ad2      	subs	r2, r2, r3
   1fb16:	4094      	lsls	r4, r2
   1fb18:	2200      	movs	r2, #0
   1fb1a:	0324      	lsls	r4, r4, #12
   1fb1c:	055b      	lsls	r3, r3, #21
   1fb1e:	0b24      	lsrs	r4, r4, #12
   1fb20:	0d5b      	lsrs	r3, r3, #21
   1fb22:	2100      	movs	r1, #0
   1fb24:	0010      	movs	r0, r2
   1fb26:	0324      	lsls	r4, r4, #12
   1fb28:	0d0a      	lsrs	r2, r1, #20
   1fb2a:	0b24      	lsrs	r4, r4, #12
   1fb2c:	0512      	lsls	r2, r2, #20
   1fb2e:	4322      	orrs	r2, r4
   1fb30:	4c0d      	ldr	r4, [pc, #52]	; (1fb68 <__aeabi_ui2d+0x6c>)
   1fb32:	051b      	lsls	r3, r3, #20
   1fb34:	4022      	ands	r2, r4
   1fb36:	4313      	orrs	r3, r2
   1fb38:	005b      	lsls	r3, r3, #1
   1fb3a:	0859      	lsrs	r1, r3, #1
   1fb3c:	bd10      	pop	{r4, pc}
   1fb3e:	0021      	movs	r1, r4
   1fb40:	4091      	lsls	r1, r2
   1fb42:	000a      	movs	r2, r1
   1fb44:	210b      	movs	r1, #11
   1fb46:	1a08      	subs	r0, r1, r0
   1fb48:	40c4      	lsrs	r4, r0
   1fb4a:	055b      	lsls	r3, r3, #21
   1fb4c:	0324      	lsls	r4, r4, #12
   1fb4e:	0b24      	lsrs	r4, r4, #12
   1fb50:	0d5b      	lsrs	r3, r3, #21
   1fb52:	e7e6      	b.n	1fb22 <__aeabi_ui2d+0x26>
   1fb54:	2300      	movs	r3, #0
   1fb56:	2400      	movs	r4, #0
   1fb58:	2200      	movs	r2, #0
   1fb5a:	e7e2      	b.n	1fb22 <__aeabi_ui2d+0x26>
   1fb5c:	0000041e 	.word	0x0000041e
   1fb60:	00000433 	.word	0x00000433
   1fb64:	00000413 	.word	0x00000413
   1fb68:	800fffff 	.word	0x800fffff

0001fb6c <__aeabi_f2d>:
   1fb6c:	0041      	lsls	r1, r0, #1
   1fb6e:	0e09      	lsrs	r1, r1, #24
   1fb70:	1c4b      	adds	r3, r1, #1
   1fb72:	b570      	push	{r4, r5, r6, lr}
   1fb74:	b2db      	uxtb	r3, r3
   1fb76:	0246      	lsls	r6, r0, #9
   1fb78:	0a75      	lsrs	r5, r6, #9
   1fb7a:	0fc4      	lsrs	r4, r0, #31
   1fb7c:	2b01      	cmp	r3, #1
   1fb7e:	dd14      	ble.n	1fbaa <__aeabi_f2d+0x3e>
   1fb80:	23e0      	movs	r3, #224	; 0xe0
   1fb82:	009b      	lsls	r3, r3, #2
   1fb84:	076d      	lsls	r5, r5, #29
   1fb86:	0b36      	lsrs	r6, r6, #12
   1fb88:	18cb      	adds	r3, r1, r3
   1fb8a:	2100      	movs	r1, #0
   1fb8c:	0d0a      	lsrs	r2, r1, #20
   1fb8e:	0028      	movs	r0, r5
   1fb90:	0512      	lsls	r2, r2, #20
   1fb92:	4d1c      	ldr	r5, [pc, #112]	; (1fc04 <__aeabi_f2d+0x98>)
   1fb94:	4332      	orrs	r2, r6
   1fb96:	055b      	lsls	r3, r3, #21
   1fb98:	402a      	ands	r2, r5
   1fb9a:	085b      	lsrs	r3, r3, #1
   1fb9c:	4313      	orrs	r3, r2
   1fb9e:	005b      	lsls	r3, r3, #1
   1fba0:	07e4      	lsls	r4, r4, #31
   1fba2:	085b      	lsrs	r3, r3, #1
   1fba4:	4323      	orrs	r3, r4
   1fba6:	0019      	movs	r1, r3
   1fba8:	bd70      	pop	{r4, r5, r6, pc}
   1fbaa:	2900      	cmp	r1, #0
   1fbac:	d114      	bne.n	1fbd8 <__aeabi_f2d+0x6c>
   1fbae:	2d00      	cmp	r5, #0
   1fbb0:	d01e      	beq.n	1fbf0 <__aeabi_f2d+0x84>
   1fbb2:	0028      	movs	r0, r5
   1fbb4:	f7fd faa0 	bl	1d0f8 <__clzsi2>
   1fbb8:	280a      	cmp	r0, #10
   1fbba:	dc1c      	bgt.n	1fbf6 <__aeabi_f2d+0x8a>
   1fbbc:	230b      	movs	r3, #11
   1fbbe:	002a      	movs	r2, r5
   1fbc0:	1a1b      	subs	r3, r3, r0
   1fbc2:	40da      	lsrs	r2, r3
   1fbc4:	0003      	movs	r3, r0
   1fbc6:	3315      	adds	r3, #21
   1fbc8:	409d      	lsls	r5, r3
   1fbca:	4b0f      	ldr	r3, [pc, #60]	; (1fc08 <__aeabi_f2d+0x9c>)
   1fbcc:	0312      	lsls	r2, r2, #12
   1fbce:	1a1b      	subs	r3, r3, r0
   1fbd0:	055b      	lsls	r3, r3, #21
   1fbd2:	0b16      	lsrs	r6, r2, #12
   1fbd4:	0d5b      	lsrs	r3, r3, #21
   1fbd6:	e7d8      	b.n	1fb8a <__aeabi_f2d+0x1e>
   1fbd8:	2d00      	cmp	r5, #0
   1fbda:	d006      	beq.n	1fbea <__aeabi_f2d+0x7e>
   1fbdc:	0b32      	lsrs	r2, r6, #12
   1fbde:	2680      	movs	r6, #128	; 0x80
   1fbe0:	0336      	lsls	r6, r6, #12
   1fbe2:	076d      	lsls	r5, r5, #29
   1fbe4:	4316      	orrs	r6, r2
   1fbe6:	4b09      	ldr	r3, [pc, #36]	; (1fc0c <__aeabi_f2d+0xa0>)
   1fbe8:	e7cf      	b.n	1fb8a <__aeabi_f2d+0x1e>
   1fbea:	4b08      	ldr	r3, [pc, #32]	; (1fc0c <__aeabi_f2d+0xa0>)
   1fbec:	2600      	movs	r6, #0
   1fbee:	e7cc      	b.n	1fb8a <__aeabi_f2d+0x1e>
   1fbf0:	2300      	movs	r3, #0
   1fbf2:	2600      	movs	r6, #0
   1fbf4:	e7c9      	b.n	1fb8a <__aeabi_f2d+0x1e>
   1fbf6:	0003      	movs	r3, r0
   1fbf8:	002a      	movs	r2, r5
   1fbfa:	3b0b      	subs	r3, #11
   1fbfc:	409a      	lsls	r2, r3
   1fbfe:	2500      	movs	r5, #0
   1fc00:	e7e3      	b.n	1fbca <__aeabi_f2d+0x5e>
   1fc02:	46c0      	nop			; (mov r8, r8)
   1fc04:	800fffff 	.word	0x800fffff
   1fc08:	00000389 	.word	0x00000389
   1fc0c:	000007ff 	.word	0x000007ff

0001fc10 <__aeabi_d2f>:
   1fc10:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fc12:	004c      	lsls	r4, r1, #1
   1fc14:	0d64      	lsrs	r4, r4, #21
   1fc16:	030b      	lsls	r3, r1, #12
   1fc18:	1c62      	adds	r2, r4, #1
   1fc1a:	0f45      	lsrs	r5, r0, #29
   1fc1c:	0a5b      	lsrs	r3, r3, #9
   1fc1e:	0552      	lsls	r2, r2, #21
   1fc20:	432b      	orrs	r3, r5
   1fc22:	0fc9      	lsrs	r1, r1, #31
   1fc24:	00c5      	lsls	r5, r0, #3
   1fc26:	0d52      	lsrs	r2, r2, #21
   1fc28:	2a01      	cmp	r2, #1
   1fc2a:	dd28      	ble.n	1fc7e <__aeabi_d2f+0x6e>
   1fc2c:	4a3a      	ldr	r2, [pc, #232]	; (1fd18 <__aeabi_d2f+0x108>)
   1fc2e:	18a6      	adds	r6, r4, r2
   1fc30:	2efe      	cmp	r6, #254	; 0xfe
   1fc32:	dc1b      	bgt.n	1fc6c <__aeabi_d2f+0x5c>
   1fc34:	2e00      	cmp	r6, #0
   1fc36:	dd3e      	ble.n	1fcb6 <__aeabi_d2f+0xa6>
   1fc38:	0180      	lsls	r0, r0, #6
   1fc3a:	0002      	movs	r2, r0
   1fc3c:	1e50      	subs	r0, r2, #1
   1fc3e:	4182      	sbcs	r2, r0
   1fc40:	0f6d      	lsrs	r5, r5, #29
   1fc42:	432a      	orrs	r2, r5
   1fc44:	00db      	lsls	r3, r3, #3
   1fc46:	4313      	orrs	r3, r2
   1fc48:	075a      	lsls	r2, r3, #29
   1fc4a:	d004      	beq.n	1fc56 <__aeabi_d2f+0x46>
   1fc4c:	220f      	movs	r2, #15
   1fc4e:	401a      	ands	r2, r3
   1fc50:	2a04      	cmp	r2, #4
   1fc52:	d000      	beq.n	1fc56 <__aeabi_d2f+0x46>
   1fc54:	3304      	adds	r3, #4
   1fc56:	2280      	movs	r2, #128	; 0x80
   1fc58:	04d2      	lsls	r2, r2, #19
   1fc5a:	401a      	ands	r2, r3
   1fc5c:	d05a      	beq.n	1fd14 <__aeabi_d2f+0x104>
   1fc5e:	3601      	adds	r6, #1
   1fc60:	2eff      	cmp	r6, #255	; 0xff
   1fc62:	d003      	beq.n	1fc6c <__aeabi_d2f+0x5c>
   1fc64:	019b      	lsls	r3, r3, #6
   1fc66:	0a5b      	lsrs	r3, r3, #9
   1fc68:	b2f4      	uxtb	r4, r6
   1fc6a:	e001      	b.n	1fc70 <__aeabi_d2f+0x60>
   1fc6c:	24ff      	movs	r4, #255	; 0xff
   1fc6e:	2300      	movs	r3, #0
   1fc70:	0258      	lsls	r0, r3, #9
   1fc72:	05e4      	lsls	r4, r4, #23
   1fc74:	0a40      	lsrs	r0, r0, #9
   1fc76:	07c9      	lsls	r1, r1, #31
   1fc78:	4320      	orrs	r0, r4
   1fc7a:	4308      	orrs	r0, r1
   1fc7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fc7e:	2c00      	cmp	r4, #0
   1fc80:	d007      	beq.n	1fc92 <__aeabi_d2f+0x82>
   1fc82:	431d      	orrs	r5, r3
   1fc84:	d0f2      	beq.n	1fc6c <__aeabi_d2f+0x5c>
   1fc86:	2080      	movs	r0, #128	; 0x80
   1fc88:	00db      	lsls	r3, r3, #3
   1fc8a:	0480      	lsls	r0, r0, #18
   1fc8c:	4303      	orrs	r3, r0
   1fc8e:	26ff      	movs	r6, #255	; 0xff
   1fc90:	e7da      	b.n	1fc48 <__aeabi_d2f+0x38>
   1fc92:	432b      	orrs	r3, r5
   1fc94:	d003      	beq.n	1fc9e <__aeabi_d2f+0x8e>
   1fc96:	2305      	movs	r3, #5
   1fc98:	08db      	lsrs	r3, r3, #3
   1fc9a:	2cff      	cmp	r4, #255	; 0xff
   1fc9c:	d003      	beq.n	1fca6 <__aeabi_d2f+0x96>
   1fc9e:	025b      	lsls	r3, r3, #9
   1fca0:	0a5b      	lsrs	r3, r3, #9
   1fca2:	b2e4      	uxtb	r4, r4
   1fca4:	e7e4      	b.n	1fc70 <__aeabi_d2f+0x60>
   1fca6:	2b00      	cmp	r3, #0
   1fca8:	d032      	beq.n	1fd10 <__aeabi_d2f+0x100>
   1fcaa:	2080      	movs	r0, #128	; 0x80
   1fcac:	03c0      	lsls	r0, r0, #15
   1fcae:	4303      	orrs	r3, r0
   1fcb0:	025b      	lsls	r3, r3, #9
   1fcb2:	0a5b      	lsrs	r3, r3, #9
   1fcb4:	e7dc      	b.n	1fc70 <__aeabi_d2f+0x60>
   1fcb6:	0032      	movs	r2, r6
   1fcb8:	3217      	adds	r2, #23
   1fcba:	db14      	blt.n	1fce6 <__aeabi_d2f+0xd6>
   1fcbc:	2280      	movs	r2, #128	; 0x80
   1fcbe:	271e      	movs	r7, #30
   1fcc0:	0412      	lsls	r2, r2, #16
   1fcc2:	4313      	orrs	r3, r2
   1fcc4:	1bbf      	subs	r7, r7, r6
   1fcc6:	2f1f      	cmp	r7, #31
   1fcc8:	dc0f      	bgt.n	1fcea <__aeabi_d2f+0xda>
   1fcca:	4a14      	ldr	r2, [pc, #80]	; (1fd1c <__aeabi_d2f+0x10c>)
   1fccc:	4694      	mov	ip, r2
   1fcce:	4464      	add	r4, ip
   1fcd0:	002a      	movs	r2, r5
   1fcd2:	40a5      	lsls	r5, r4
   1fcd4:	002e      	movs	r6, r5
   1fcd6:	40a3      	lsls	r3, r4
   1fcd8:	1e75      	subs	r5, r6, #1
   1fcda:	41ae      	sbcs	r6, r5
   1fcdc:	40fa      	lsrs	r2, r7
   1fcde:	4333      	orrs	r3, r6
   1fce0:	4313      	orrs	r3, r2
   1fce2:	2600      	movs	r6, #0
   1fce4:	e7b0      	b.n	1fc48 <__aeabi_d2f+0x38>
   1fce6:	2400      	movs	r4, #0
   1fce8:	e7d5      	b.n	1fc96 <__aeabi_d2f+0x86>
   1fcea:	2202      	movs	r2, #2
   1fcec:	4252      	negs	r2, r2
   1fcee:	1b96      	subs	r6, r2, r6
   1fcf0:	001a      	movs	r2, r3
   1fcf2:	40f2      	lsrs	r2, r6
   1fcf4:	2f20      	cmp	r7, #32
   1fcf6:	d009      	beq.n	1fd0c <__aeabi_d2f+0xfc>
   1fcf8:	4809      	ldr	r0, [pc, #36]	; (1fd20 <__aeabi_d2f+0x110>)
   1fcfa:	4684      	mov	ip, r0
   1fcfc:	4464      	add	r4, ip
   1fcfe:	40a3      	lsls	r3, r4
   1fd00:	432b      	orrs	r3, r5
   1fd02:	1e5d      	subs	r5, r3, #1
   1fd04:	41ab      	sbcs	r3, r5
   1fd06:	2600      	movs	r6, #0
   1fd08:	4313      	orrs	r3, r2
   1fd0a:	e79d      	b.n	1fc48 <__aeabi_d2f+0x38>
   1fd0c:	2300      	movs	r3, #0
   1fd0e:	e7f7      	b.n	1fd00 <__aeabi_d2f+0xf0>
   1fd10:	2300      	movs	r3, #0
   1fd12:	e7ad      	b.n	1fc70 <__aeabi_d2f+0x60>
   1fd14:	0034      	movs	r4, r6
   1fd16:	e7bf      	b.n	1fc98 <__aeabi_d2f+0x88>
   1fd18:	fffffc80 	.word	0xfffffc80
   1fd1c:	fffffc82 	.word	0xfffffc82
   1fd20:	fffffca2 	.word	0xfffffca2

0001fd24 <__errno>:
   1fd24:	4b01      	ldr	r3, [pc, #4]	; (1fd2c <__errno+0x8>)
   1fd26:	6818      	ldr	r0, [r3, #0]
   1fd28:	4770      	bx	lr
   1fd2a:	46c0      	nop			; (mov r8, r8)
   1fd2c:	200003ac 	.word	0x200003ac

0001fd30 <__libc_init_array>:
   1fd30:	b570      	push	{r4, r5, r6, lr}
   1fd32:	4e0d      	ldr	r6, [pc, #52]	; (1fd68 <__libc_init_array+0x38>)
   1fd34:	4d0d      	ldr	r5, [pc, #52]	; (1fd6c <__libc_init_array+0x3c>)
   1fd36:	2400      	movs	r4, #0
   1fd38:	1bad      	subs	r5, r5, r6
   1fd3a:	10ad      	asrs	r5, r5, #2
   1fd3c:	d005      	beq.n	1fd4a <__libc_init_array+0x1a>
   1fd3e:	00a3      	lsls	r3, r4, #2
   1fd40:	58f3      	ldr	r3, [r6, r3]
   1fd42:	3401      	adds	r4, #1
   1fd44:	4798      	blx	r3
   1fd46:	42a5      	cmp	r5, r4
   1fd48:	d1f9      	bne.n	1fd3e <__libc_init_array+0xe>
   1fd4a:	f007 f93d 	bl	26fc8 <_init>
   1fd4e:	4e08      	ldr	r6, [pc, #32]	; (1fd70 <__libc_init_array+0x40>)
   1fd50:	4d08      	ldr	r5, [pc, #32]	; (1fd74 <__libc_init_array+0x44>)
   1fd52:	2400      	movs	r4, #0
   1fd54:	1bad      	subs	r5, r5, r6
   1fd56:	10ad      	asrs	r5, r5, #2
   1fd58:	d005      	beq.n	1fd66 <__libc_init_array+0x36>
   1fd5a:	00a3      	lsls	r3, r4, #2
   1fd5c:	58f3      	ldr	r3, [r6, r3]
   1fd5e:	3401      	adds	r4, #1
   1fd60:	4798      	blx	r3
   1fd62:	42a5      	cmp	r5, r4
   1fd64:	d1f9      	bne.n	1fd5a <__libc_init_array+0x2a>
   1fd66:	bd70      	pop	{r4, r5, r6, pc}
   1fd68:	00026fd4 	.word	0x00026fd4
   1fd6c:	00026fd4 	.word	0x00026fd4
   1fd70:	00026fd4 	.word	0x00026fd4
   1fd74:	00026fdc 	.word	0x00026fdc

0001fd78 <memcpy>:
   1fd78:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fd7a:	0005      	movs	r5, r0
   1fd7c:	2a0f      	cmp	r2, #15
   1fd7e:	d92f      	bls.n	1fde0 <memcpy+0x68>
   1fd80:	000b      	movs	r3, r1
   1fd82:	4303      	orrs	r3, r0
   1fd84:	079b      	lsls	r3, r3, #30
   1fd86:	d134      	bne.n	1fdf2 <memcpy+0x7a>
   1fd88:	0016      	movs	r6, r2
   1fd8a:	000c      	movs	r4, r1
   1fd8c:	0003      	movs	r3, r0
   1fd8e:	3e10      	subs	r6, #16
   1fd90:	0935      	lsrs	r5, r6, #4
   1fd92:	3501      	adds	r5, #1
   1fd94:	012d      	lsls	r5, r5, #4
   1fd96:	1945      	adds	r5, r0, r5
   1fd98:	6827      	ldr	r7, [r4, #0]
   1fd9a:	601f      	str	r7, [r3, #0]
   1fd9c:	6867      	ldr	r7, [r4, #4]
   1fd9e:	605f      	str	r7, [r3, #4]
   1fda0:	68a7      	ldr	r7, [r4, #8]
   1fda2:	609f      	str	r7, [r3, #8]
   1fda4:	68e7      	ldr	r7, [r4, #12]
   1fda6:	3410      	adds	r4, #16
   1fda8:	60df      	str	r7, [r3, #12]
   1fdaa:	3310      	adds	r3, #16
   1fdac:	429d      	cmp	r5, r3
   1fdae:	d1f3      	bne.n	1fd98 <memcpy+0x20>
   1fdb0:	230f      	movs	r3, #15
   1fdb2:	439e      	bics	r6, r3
   1fdb4:	3610      	adds	r6, #16
   1fdb6:	1985      	adds	r5, r0, r6
   1fdb8:	1989      	adds	r1, r1, r6
   1fdba:	4013      	ands	r3, r2
   1fdbc:	2b03      	cmp	r3, #3
   1fdbe:	d91a      	bls.n	1fdf6 <memcpy+0x7e>
   1fdc0:	1f1e      	subs	r6, r3, #4
   1fdc2:	2300      	movs	r3, #0
   1fdc4:	08b4      	lsrs	r4, r6, #2
   1fdc6:	3401      	adds	r4, #1
   1fdc8:	00a4      	lsls	r4, r4, #2
   1fdca:	58cf      	ldr	r7, [r1, r3]
   1fdcc:	50ef      	str	r7, [r5, r3]
   1fdce:	3304      	adds	r3, #4
   1fdd0:	42a3      	cmp	r3, r4
   1fdd2:	d1fa      	bne.n	1fdca <memcpy+0x52>
   1fdd4:	2403      	movs	r4, #3
   1fdd6:	43a6      	bics	r6, r4
   1fdd8:	1d33      	adds	r3, r6, #4
   1fdda:	4022      	ands	r2, r4
   1fddc:	18c9      	adds	r1, r1, r3
   1fdde:	18ed      	adds	r5, r5, r3
   1fde0:	2a00      	cmp	r2, #0
   1fde2:	d005      	beq.n	1fdf0 <memcpy+0x78>
   1fde4:	2300      	movs	r3, #0
   1fde6:	5ccc      	ldrb	r4, [r1, r3]
   1fde8:	54ec      	strb	r4, [r5, r3]
   1fdea:	3301      	adds	r3, #1
   1fdec:	4293      	cmp	r3, r2
   1fdee:	d1fa      	bne.n	1fde6 <memcpy+0x6e>
   1fdf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fdf2:	0005      	movs	r5, r0
   1fdf4:	e7f6      	b.n	1fde4 <memcpy+0x6c>
   1fdf6:	001a      	movs	r2, r3
   1fdf8:	e7f2      	b.n	1fde0 <memcpy+0x68>
   1fdfa:	46c0      	nop			; (mov r8, r8)

0001fdfc <memset>:
   1fdfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fdfe:	0783      	lsls	r3, r0, #30
   1fe00:	d043      	beq.n	1fe8a <memset+0x8e>
   1fe02:	1e54      	subs	r4, r2, #1
   1fe04:	2a00      	cmp	r2, #0
   1fe06:	d03f      	beq.n	1fe88 <memset+0x8c>
   1fe08:	b2ce      	uxtb	r6, r1
   1fe0a:	0002      	movs	r2, r0
   1fe0c:	2503      	movs	r5, #3
   1fe0e:	e002      	b.n	1fe16 <memset+0x1a>
   1fe10:	001a      	movs	r2, r3
   1fe12:	3c01      	subs	r4, #1
   1fe14:	d338      	bcc.n	1fe88 <memset+0x8c>
   1fe16:	1c53      	adds	r3, r2, #1
   1fe18:	7016      	strb	r6, [r2, #0]
   1fe1a:	422b      	tst	r3, r5
   1fe1c:	d1f8      	bne.n	1fe10 <memset+0x14>
   1fe1e:	2c03      	cmp	r4, #3
   1fe20:	d92a      	bls.n	1fe78 <memset+0x7c>
   1fe22:	22ff      	movs	r2, #255	; 0xff
   1fe24:	400a      	ands	r2, r1
   1fe26:	0215      	lsls	r5, r2, #8
   1fe28:	4315      	orrs	r5, r2
   1fe2a:	042a      	lsls	r2, r5, #16
   1fe2c:	4315      	orrs	r5, r2
   1fe2e:	2c0f      	cmp	r4, #15
   1fe30:	d914      	bls.n	1fe5c <memset+0x60>
   1fe32:	0027      	movs	r7, r4
   1fe34:	001a      	movs	r2, r3
   1fe36:	3f10      	subs	r7, #16
   1fe38:	093e      	lsrs	r6, r7, #4
   1fe3a:	3601      	adds	r6, #1
   1fe3c:	0136      	lsls	r6, r6, #4
   1fe3e:	199e      	adds	r6, r3, r6
   1fe40:	6015      	str	r5, [r2, #0]
   1fe42:	6055      	str	r5, [r2, #4]
   1fe44:	6095      	str	r5, [r2, #8]
   1fe46:	60d5      	str	r5, [r2, #12]
   1fe48:	3210      	adds	r2, #16
   1fe4a:	4296      	cmp	r6, r2
   1fe4c:	d1f8      	bne.n	1fe40 <memset+0x44>
   1fe4e:	220f      	movs	r2, #15
   1fe50:	4397      	bics	r7, r2
   1fe52:	3710      	adds	r7, #16
   1fe54:	19db      	adds	r3, r3, r7
   1fe56:	4014      	ands	r4, r2
   1fe58:	2c03      	cmp	r4, #3
   1fe5a:	d90d      	bls.n	1fe78 <memset+0x7c>
   1fe5c:	001a      	movs	r2, r3
   1fe5e:	1f27      	subs	r7, r4, #4
   1fe60:	08be      	lsrs	r6, r7, #2
   1fe62:	3601      	adds	r6, #1
   1fe64:	00b6      	lsls	r6, r6, #2
   1fe66:	199e      	adds	r6, r3, r6
   1fe68:	c220      	stmia	r2!, {r5}
   1fe6a:	42b2      	cmp	r2, r6
   1fe6c:	d1fc      	bne.n	1fe68 <memset+0x6c>
   1fe6e:	2203      	movs	r2, #3
   1fe70:	4397      	bics	r7, r2
   1fe72:	3704      	adds	r7, #4
   1fe74:	19db      	adds	r3, r3, r7
   1fe76:	4014      	ands	r4, r2
   1fe78:	2c00      	cmp	r4, #0
   1fe7a:	d005      	beq.n	1fe88 <memset+0x8c>
   1fe7c:	b2c9      	uxtb	r1, r1
   1fe7e:	191c      	adds	r4, r3, r4
   1fe80:	7019      	strb	r1, [r3, #0]
   1fe82:	3301      	adds	r3, #1
   1fe84:	429c      	cmp	r4, r3
   1fe86:	d1fb      	bne.n	1fe80 <memset+0x84>
   1fe88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fe8a:	0014      	movs	r4, r2
   1fe8c:	0003      	movs	r3, r0
   1fe8e:	e7c6      	b.n	1fe1e <memset+0x22>

0001fe90 <sprintf>:
   1fe90:	b40e      	push	{r1, r2, r3}
   1fe92:	b510      	push	{r4, lr}
   1fe94:	b09d      	sub	sp, #116	; 0x74
   1fe96:	a902      	add	r1, sp, #8
   1fe98:	9002      	str	r0, [sp, #8]
   1fe9a:	6108      	str	r0, [r1, #16]
   1fe9c:	480b      	ldr	r0, [pc, #44]	; (1fecc <sprintf+0x3c>)
   1fe9e:	2482      	movs	r4, #130	; 0x82
   1fea0:	6088      	str	r0, [r1, #8]
   1fea2:	6148      	str	r0, [r1, #20]
   1fea4:	2001      	movs	r0, #1
   1fea6:	4240      	negs	r0, r0
   1fea8:	ab1f      	add	r3, sp, #124	; 0x7c
   1feaa:	81c8      	strh	r0, [r1, #14]
   1feac:	4808      	ldr	r0, [pc, #32]	; (1fed0 <sprintf+0x40>)
   1feae:	cb04      	ldmia	r3!, {r2}
   1feb0:	00a4      	lsls	r4, r4, #2
   1feb2:	6800      	ldr	r0, [r0, #0]
   1feb4:	9301      	str	r3, [sp, #4]
   1feb6:	818c      	strh	r4, [r1, #12]
   1feb8:	f000 fb38 	bl	2052c <_svfprintf_r>
   1febc:	2300      	movs	r3, #0
   1febe:	9a02      	ldr	r2, [sp, #8]
   1fec0:	7013      	strb	r3, [r2, #0]
   1fec2:	b01d      	add	sp, #116	; 0x74
   1fec4:	bc10      	pop	{r4}
   1fec6:	bc08      	pop	{r3}
   1fec8:	b003      	add	sp, #12
   1feca:	4718      	bx	r3
   1fecc:	7fffffff 	.word	0x7fffffff
   1fed0:	200003ac 	.word	0x200003ac

0001fed4 <stpcpy>:
   1fed4:	000b      	movs	r3, r1
   1fed6:	4303      	orrs	r3, r0
   1fed8:	b510      	push	{r4, lr}
   1feda:	079b      	lsls	r3, r3, #30
   1fedc:	d10f      	bne.n	1fefe <stpcpy+0x2a>
   1fede:	680b      	ldr	r3, [r1, #0]
   1fee0:	4a0b      	ldr	r2, [pc, #44]	; (1ff10 <stpcpy+0x3c>)
   1fee2:	4c0c      	ldr	r4, [pc, #48]	; (1ff14 <stpcpy+0x40>)
   1fee4:	189a      	adds	r2, r3, r2
   1fee6:	439a      	bics	r2, r3
   1fee8:	4222      	tst	r2, r4
   1feea:	d108      	bne.n	1fefe <stpcpy+0x2a>
   1feec:	3104      	adds	r1, #4
   1feee:	6003      	str	r3, [r0, #0]
   1fef0:	4a07      	ldr	r2, [pc, #28]	; (1ff10 <stpcpy+0x3c>)
   1fef2:	680b      	ldr	r3, [r1, #0]
   1fef4:	3004      	adds	r0, #4
   1fef6:	189a      	adds	r2, r3, r2
   1fef8:	439a      	bics	r2, r3
   1fefa:	4222      	tst	r2, r4
   1fefc:	d0f6      	beq.n	1feec <stpcpy+0x18>
   1fefe:	0003      	movs	r3, r0
   1ff00:	780a      	ldrb	r2, [r1, #0]
   1ff02:	0018      	movs	r0, r3
   1ff04:	701a      	strb	r2, [r3, #0]
   1ff06:	3101      	adds	r1, #1
   1ff08:	3301      	adds	r3, #1
   1ff0a:	2a00      	cmp	r2, #0
   1ff0c:	d1f8      	bne.n	1ff00 <stpcpy+0x2c>
   1ff0e:	bd10      	pop	{r4, pc}
   1ff10:	fefefeff 	.word	0xfefefeff
   1ff14:	80808080 	.word	0x80808080

0001ff18 <strcat>:
   1ff18:	b570      	push	{r4, r5, r6, lr}
   1ff1a:	0005      	movs	r5, r0
   1ff1c:	0783      	lsls	r3, r0, #30
   1ff1e:	d116      	bne.n	1ff4e <strcat+0x36>
   1ff20:	6802      	ldr	r2, [r0, #0]
   1ff22:	4b0e      	ldr	r3, [pc, #56]	; (1ff5c <strcat+0x44>)
   1ff24:	4c0e      	ldr	r4, [pc, #56]	; (1ff60 <strcat+0x48>)
   1ff26:	18d3      	adds	r3, r2, r3
   1ff28:	4393      	bics	r3, r2
   1ff2a:	4223      	tst	r3, r4
   1ff2c:	d10f      	bne.n	1ff4e <strcat+0x36>
   1ff2e:	3004      	adds	r0, #4
   1ff30:	6802      	ldr	r2, [r0, #0]
   1ff32:	4b0a      	ldr	r3, [pc, #40]	; (1ff5c <strcat+0x44>)
   1ff34:	18d3      	adds	r3, r2, r3
   1ff36:	4393      	bics	r3, r2
   1ff38:	4223      	tst	r3, r4
   1ff3a:	d108      	bne.n	1ff4e <strcat+0x36>
   1ff3c:	3004      	adds	r0, #4
   1ff3e:	6802      	ldr	r2, [r0, #0]
   1ff40:	4b06      	ldr	r3, [pc, #24]	; (1ff5c <strcat+0x44>)
   1ff42:	18d3      	adds	r3, r2, r3
   1ff44:	4393      	bics	r3, r2
   1ff46:	4223      	tst	r3, r4
   1ff48:	d0f1      	beq.n	1ff2e <strcat+0x16>
   1ff4a:	e000      	b.n	1ff4e <strcat+0x36>
   1ff4c:	3001      	adds	r0, #1
   1ff4e:	7803      	ldrb	r3, [r0, #0]
   1ff50:	2b00      	cmp	r3, #0
   1ff52:	d1fb      	bne.n	1ff4c <strcat+0x34>
   1ff54:	f000 f84a 	bl	1ffec <strcpy>
   1ff58:	0028      	movs	r0, r5
   1ff5a:	bd70      	pop	{r4, r5, r6, pc}
   1ff5c:	fefefeff 	.word	0xfefefeff
   1ff60:	80808080 	.word	0x80808080

0001ff64 <strcmp>:
   1ff64:	4602      	mov	r2, r0
   1ff66:	b570      	push	{r4, r5, r6, lr}
   1ff68:	430a      	orrs	r2, r1
   1ff6a:	0792      	lsls	r2, r2, #30
   1ff6c:	d12a      	bne.n	1ffc4 <strcmp+0x60>
   1ff6e:	4d1e      	ldr	r5, [pc, #120]	; (1ffe8 <strcmp+0x84>)
   1ff70:	01ee      	lsls	r6, r5, #7
   1ff72:	c804      	ldmia	r0!, {r2}
   1ff74:	c908      	ldmia	r1!, {r3}
   1ff76:	1b54      	subs	r4, r2, r5
   1ff78:	4394      	bics	r4, r2
   1ff7a:	4034      	ands	r4, r6
   1ff7c:	d017      	beq.n	1ffae <strcmp+0x4a>
   1ff7e:	b2d0      	uxtb	r0, r2
   1ff80:	b2d9      	uxtb	r1, r3
   1ff82:	1a40      	subs	r0, r0, r1
   1ff84:	0621      	lsls	r1, r4, #24
   1ff86:	4301      	orrs	r1, r0
   1ff88:	d110      	bne.n	1ffac <strcmp+0x48>
   1ff8a:	b290      	uxth	r0, r2
   1ff8c:	b299      	uxth	r1, r3
   1ff8e:	1a40      	subs	r0, r0, r1
   1ff90:	0421      	lsls	r1, r4, #16
   1ff92:	4301      	orrs	r1, r0
   1ff94:	d10a      	bne.n	1ffac <strcmp+0x48>
   1ff96:	0210      	lsls	r0, r2, #8
   1ff98:	0219      	lsls	r1, r3, #8
   1ff9a:	0a00      	lsrs	r0, r0, #8
   1ff9c:	0a09      	lsrs	r1, r1, #8
   1ff9e:	1a40      	subs	r0, r0, r1
   1ffa0:	0221      	lsls	r1, r4, #8
   1ffa2:	4301      	orrs	r1, r0
   1ffa4:	d102      	bne.n	1ffac <strcmp+0x48>
   1ffa6:	0e10      	lsrs	r0, r2, #24
   1ffa8:	0e19      	lsrs	r1, r3, #24
   1ffaa:	1a40      	subs	r0, r0, r1
   1ffac:	bd70      	pop	{r4, r5, r6, pc}
   1ffae:	429a      	cmp	r2, r3
   1ffb0:	d0df      	beq.n	1ff72 <strcmp+0xe>
   1ffb2:	ba10      	rev	r0, r2
   1ffb4:	ba19      	rev	r1, r3
   1ffb6:	4288      	cmp	r0, r1
   1ffb8:	d901      	bls.n	1ffbe <strcmp+0x5a>
   1ffba:	2001      	movs	r0, #1
   1ffbc:	bd70      	pop	{r4, r5, r6, pc}
   1ffbe:	2000      	movs	r0, #0
   1ffc0:	43c0      	mvns	r0, r0
   1ffc2:	bd70      	pop	{r4, r5, r6, pc}
   1ffc4:	7802      	ldrb	r2, [r0, #0]
   1ffc6:	780b      	ldrb	r3, [r1, #0]
   1ffc8:	3001      	adds	r0, #1
   1ffca:	3101      	adds	r1, #1
   1ffcc:	2a00      	cmp	r2, #0
   1ffce:	d009      	beq.n	1ffe4 <strcmp+0x80>
   1ffd0:	429a      	cmp	r2, r3
   1ffd2:	d107      	bne.n	1ffe4 <strcmp+0x80>
   1ffd4:	7802      	ldrb	r2, [r0, #0]
   1ffd6:	780b      	ldrb	r3, [r1, #0]
   1ffd8:	3001      	adds	r0, #1
   1ffda:	3101      	adds	r1, #1
   1ffdc:	2a00      	cmp	r2, #0
   1ffde:	d001      	beq.n	1ffe4 <strcmp+0x80>
   1ffe0:	429a      	cmp	r2, r3
   1ffe2:	d0ef      	beq.n	1ffc4 <strcmp+0x60>
   1ffe4:	1ad0      	subs	r0, r2, r3
   1ffe6:	bd70      	pop	{r4, r5, r6, pc}
   1ffe8:	01010101 	.word	0x01010101

0001ffec <strcpy>:
   1ffec:	1c03      	adds	r3, r0, #0
   1ffee:	780a      	ldrb	r2, [r1, #0]
   1fff0:	3101      	adds	r1, #1
   1fff2:	701a      	strb	r2, [r3, #0]
   1fff4:	3301      	adds	r3, #1
   1fff6:	2a00      	cmp	r2, #0
   1fff8:	d1f9      	bne.n	1ffee <strcpy+0x2>
   1fffa:	4770      	bx	lr

0001fffc <strlen>:
   1fffc:	b510      	push	{r4, lr}
   1fffe:	0783      	lsls	r3, r0, #30
   20000:	d025      	beq.n	2004e <strlen+0x52>
   20002:	7803      	ldrb	r3, [r0, #0]
   20004:	2b00      	cmp	r3, #0
   20006:	d024      	beq.n	20052 <strlen+0x56>
   20008:	0003      	movs	r3, r0
   2000a:	2103      	movs	r1, #3
   2000c:	e002      	b.n	20014 <strlen+0x18>
   2000e:	781a      	ldrb	r2, [r3, #0]
   20010:	2a00      	cmp	r2, #0
   20012:	d01a      	beq.n	2004a <strlen+0x4e>
   20014:	3301      	adds	r3, #1
   20016:	420b      	tst	r3, r1
   20018:	d1f9      	bne.n	2000e <strlen+0x12>
   2001a:	6819      	ldr	r1, [r3, #0]
   2001c:	4a0e      	ldr	r2, [pc, #56]	; (20058 <strlen+0x5c>)
   2001e:	4c0f      	ldr	r4, [pc, #60]	; (2005c <strlen+0x60>)
   20020:	188a      	adds	r2, r1, r2
   20022:	438a      	bics	r2, r1
   20024:	4222      	tst	r2, r4
   20026:	d106      	bne.n	20036 <strlen+0x3a>
   20028:	3304      	adds	r3, #4
   2002a:	6819      	ldr	r1, [r3, #0]
   2002c:	4a0a      	ldr	r2, [pc, #40]	; (20058 <strlen+0x5c>)
   2002e:	188a      	adds	r2, r1, r2
   20030:	438a      	bics	r2, r1
   20032:	4222      	tst	r2, r4
   20034:	d0f8      	beq.n	20028 <strlen+0x2c>
   20036:	001a      	movs	r2, r3
   20038:	781b      	ldrb	r3, [r3, #0]
   2003a:	2b00      	cmp	r3, #0
   2003c:	d003      	beq.n	20046 <strlen+0x4a>
   2003e:	3201      	adds	r2, #1
   20040:	7811      	ldrb	r1, [r2, #0]
   20042:	2900      	cmp	r1, #0
   20044:	d1fb      	bne.n	2003e <strlen+0x42>
   20046:	1a10      	subs	r0, r2, r0
   20048:	bd10      	pop	{r4, pc}
   2004a:	1a18      	subs	r0, r3, r0
   2004c:	e7fc      	b.n	20048 <strlen+0x4c>
   2004e:	0003      	movs	r3, r0
   20050:	e7e3      	b.n	2001a <strlen+0x1e>
   20052:	2000      	movs	r0, #0
   20054:	e7f8      	b.n	20048 <strlen+0x4c>
   20056:	46c0      	nop			; (mov r8, r8)
   20058:	fefefeff 	.word	0xfefefeff
   2005c:	80808080 	.word	0x80808080

00020060 <critical_factorization>:
   20060:	2301      	movs	r3, #1
   20062:	b5f0      	push	{r4, r5, r6, r7, lr}
   20064:	4647      	mov	r7, r8
   20066:	46ce      	mov	lr, r9
   20068:	4694      	mov	ip, r2
   2006a:	2201      	movs	r2, #1
   2006c:	4698      	mov	r8, r3
   2006e:	2401      	movs	r4, #1
   20070:	2500      	movs	r5, #0
   20072:	b580      	push	{r7, lr}
   20074:	4252      	negs	r2, r2
   20076:	192b      	adds	r3, r5, r4
   20078:	428b      	cmp	r3, r1
   2007a:	d20b      	bcs.n	20094 <critical_factorization+0x34>
   2007c:	1886      	adds	r6, r0, r2
   2007e:	5cc7      	ldrb	r7, [r0, r3]
   20080:	5d36      	ldrb	r6, [r6, r4]
   20082:	42b7      	cmp	r7, r6
   20084:	d22d      	bcs.n	200e2 <critical_factorization+0x82>
   20086:	1a9c      	subs	r4, r3, r2
   20088:	46a0      	mov	r8, r4
   2008a:	001d      	movs	r5, r3
   2008c:	2401      	movs	r4, #1
   2008e:	192b      	adds	r3, r5, r4
   20090:	428b      	cmp	r3, r1
   20092:	d3f3      	bcc.n	2007c <critical_factorization+0x1c>
   20094:	4644      	mov	r4, r8
   20096:	4663      	mov	r3, ip
   20098:	601c      	str	r4, [r3, #0]
   2009a:	2301      	movs	r3, #1
   2009c:	4699      	mov	r9, r3
   2009e:	3b02      	subs	r3, #2
   200a0:	2401      	movs	r4, #1
   200a2:	2500      	movs	r5, #0
   200a4:	4698      	mov	r8, r3
   200a6:	192b      	adds	r3, r5, r4
   200a8:	4299      	cmp	r1, r3
   200aa:	d90d      	bls.n	200c8 <critical_factorization+0x68>
   200ac:	4646      	mov	r6, r8
   200ae:	1986      	adds	r6, r0, r6
   200b0:	5cc7      	ldrb	r7, [r0, r3]
   200b2:	5d36      	ldrb	r6, [r6, r4]
   200b4:	42b7      	cmp	r7, r6
   200b6:	d91c      	bls.n	200f2 <critical_factorization+0x92>
   200b8:	4644      	mov	r4, r8
   200ba:	1b1c      	subs	r4, r3, r4
   200bc:	46a1      	mov	r9, r4
   200be:	001d      	movs	r5, r3
   200c0:	2401      	movs	r4, #1
   200c2:	192b      	adds	r3, r5, r4
   200c4:	4299      	cmp	r1, r3
   200c6:	d8f1      	bhi.n	200ac <critical_factorization+0x4c>
   200c8:	4643      	mov	r3, r8
   200ca:	1c50      	adds	r0, r2, #1
   200cc:	3301      	adds	r3, #1
   200ce:	4283      	cmp	r3, r0
   200d0:	d303      	bcc.n	200da <critical_factorization+0x7a>
   200d2:	4662      	mov	r2, ip
   200d4:	4649      	mov	r1, r9
   200d6:	0018      	movs	r0, r3
   200d8:	6011      	str	r1, [r2, #0]
   200da:	bc0c      	pop	{r2, r3}
   200dc:	4690      	mov	r8, r2
   200de:	4699      	mov	r9, r3
   200e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   200e2:	42b7      	cmp	r7, r6
   200e4:	d00d      	beq.n	20102 <critical_factorization+0xa2>
   200e6:	2301      	movs	r3, #1
   200e8:	002a      	movs	r2, r5
   200ea:	4698      	mov	r8, r3
   200ec:	3501      	adds	r5, #1
   200ee:	2401      	movs	r4, #1
   200f0:	e7c1      	b.n	20076 <critical_factorization+0x16>
   200f2:	42b7      	cmp	r7, r6
   200f4:	d009      	beq.n	2010a <critical_factorization+0xaa>
   200f6:	2301      	movs	r3, #1
   200f8:	46a8      	mov	r8, r5
   200fa:	4699      	mov	r9, r3
   200fc:	3501      	adds	r5, #1
   200fe:	2401      	movs	r4, #1
   20100:	e7d1      	b.n	200a6 <critical_factorization+0x46>
   20102:	4544      	cmp	r4, r8
   20104:	d005      	beq.n	20112 <critical_factorization+0xb2>
   20106:	3401      	adds	r4, #1
   20108:	e7b5      	b.n	20076 <critical_factorization+0x16>
   2010a:	454c      	cmp	r4, r9
   2010c:	d004      	beq.n	20118 <critical_factorization+0xb8>
   2010e:	3401      	adds	r4, #1
   20110:	e7c9      	b.n	200a6 <critical_factorization+0x46>
   20112:	001d      	movs	r5, r3
   20114:	2401      	movs	r4, #1
   20116:	e7ae      	b.n	20076 <critical_factorization+0x16>
   20118:	001d      	movs	r5, r3
   2011a:	2401      	movs	r4, #1
   2011c:	e7c3      	b.n	200a6 <critical_factorization+0x46>
   2011e:	46c0      	nop			; (mov r8, r8)

00020120 <two_way_long_needle>:
   20120:	b5f0      	push	{r4, r5, r6, r7, lr}
   20122:	46de      	mov	lr, fp
   20124:	4657      	mov	r7, sl
   20126:	464e      	mov	r6, r9
   20128:	4645      	mov	r5, r8
   2012a:	b5e0      	push	{r5, r6, r7, lr}
   2012c:	0015      	movs	r5, r2
   2012e:	4c7b      	ldr	r4, [pc, #492]	; (2031c <two_way_long_needle+0x1fc>)
   20130:	0006      	movs	r6, r0
   20132:	44a5      	add	sp, r4
   20134:	aa03      	add	r2, sp, #12
   20136:	000f      	movs	r7, r1
   20138:	0028      	movs	r0, r5
   2013a:	0019      	movs	r1, r3
   2013c:	001c      	movs	r4, r3
   2013e:	f7ff ff8f 	bl	20060 <critical_factorization>
   20142:	4683      	mov	fp, r0
   20144:	aaff      	add	r2, sp, #1020	; 0x3fc
   20146:	ab04      	add	r3, sp, #16
   20148:	3214      	adds	r2, #20
   2014a:	c310      	stmia	r3!, {r4}
   2014c:	4293      	cmp	r3, r2
   2014e:	d1fc      	bne.n	2014a <two_way_long_needle+0x2a>
   20150:	1e63      	subs	r3, r4, #1
   20152:	0029      	movs	r1, r5
   20154:	46a4      	mov	ip, r4
   20156:	2c00      	cmp	r4, #0
   20158:	d009      	beq.n	2016e <two_way_long_needle+0x4e>
   2015a:	2408      	movs	r4, #8
   2015c:	780a      	ldrb	r2, [r1, #0]
   2015e:	a802      	add	r0, sp, #8
   20160:	0092      	lsls	r2, r2, #2
   20162:	1900      	adds	r0, r0, r4
   20164:	5083      	str	r3, [r0, r2]
   20166:	3101      	adds	r1, #1
   20168:	3b01      	subs	r3, #1
   2016a:	d2f6      	bcs.n	2015a <two_way_long_needle+0x3a>
   2016c:	4664      	mov	r4, ip
   2016e:	9b03      	ldr	r3, [sp, #12]
   20170:	465a      	mov	r2, fp
   20172:	18e9      	adds	r1, r5, r3
   20174:	0028      	movs	r0, r5
   20176:	f003 f87f 	bl	23278 <memcmp>
   2017a:	2800      	cmp	r0, #0
   2017c:	d000      	beq.n	20180 <two_way_long_needle+0x60>
   2017e:	e074      	b.n	2026a <two_way_long_needle+0x14a>
   20180:	2300      	movs	r3, #0
   20182:	001a      	movs	r2, r3
   20184:	469a      	mov	sl, r3
   20186:	1e63      	subs	r3, r4, #1
   20188:	4698      	mov	r8, r3
   2018a:	4659      	mov	r1, fp
   2018c:	2301      	movs	r3, #1
   2018e:	0038      	movs	r0, r7
   20190:	46a1      	mov	r9, r4
   20192:	0017      	movs	r7, r2
   20194:	4644      	mov	r4, r8
   20196:	46b0      	mov	r8, r6
   20198:	1a5b      	subs	r3, r3, r1
   2019a:	9301      	str	r3, [sp, #4]
   2019c:	9100      	str	r1, [sp, #0]
   2019e:	4656      	mov	r6, sl
   201a0:	444e      	add	r6, r9
   201a2:	1a32      	subs	r2, r6, r0
   201a4:	2100      	movs	r1, #0
   201a6:	4440      	add	r0, r8
   201a8:	f003 f826 	bl	231f8 <memchr>
   201ac:	2800      	cmp	r0, #0
   201ae:	d153      	bne.n	20258 <two_way_long_needle+0x138>
   201b0:	2e00      	cmp	r6, #0
   201b2:	d051      	beq.n	20258 <two_way_long_needle+0x138>
   201b4:	4643      	mov	r3, r8
   201b6:	2108      	movs	r1, #8
   201b8:	199b      	adds	r3, r3, r6
   201ba:	3b01      	subs	r3, #1
   201bc:	781b      	ldrb	r3, [r3, #0]
   201be:	aa02      	add	r2, sp, #8
   201c0:	009b      	lsls	r3, r3, #2
   201c2:	1852      	adds	r2, r2, r1
   201c4:	58d3      	ldr	r3, [r2, r3]
   201c6:	2b00      	cmp	r3, #0
   201c8:	d00a      	beq.n	201e0 <two_way_long_needle+0xc0>
   201ca:	2f00      	cmp	r7, #0
   201cc:	d004      	beq.n	201d8 <two_way_long_needle+0xb8>
   201ce:	9a03      	ldr	r2, [sp, #12]
   201d0:	4293      	cmp	r3, r2
   201d2:	d201      	bcs.n	201d8 <two_way_long_needle+0xb8>
   201d4:	464b      	mov	r3, r9
   201d6:	1a9b      	subs	r3, r3, r2
   201d8:	449a      	add	sl, r3
   201da:	2700      	movs	r7, #0
   201dc:	0030      	movs	r0, r6
   201de:	e7de      	b.n	2019e <two_way_long_needle+0x7e>
   201e0:	9900      	ldr	r1, [sp, #0]
   201e2:	003b      	movs	r3, r7
   201e4:	428f      	cmp	r7, r1
   201e6:	d200      	bcs.n	201ea <two_way_long_needle+0xca>
   201e8:	000b      	movs	r3, r1
   201ea:	42a3      	cmp	r3, r4
   201ec:	d20d      	bcs.n	2020a <two_way_long_needle+0xea>
   201ee:	4642      	mov	r2, r8
   201f0:	4452      	add	r2, sl
   201f2:	e002      	b.n	201fa <two_way_long_needle+0xda>
   201f4:	3301      	adds	r3, #1
   201f6:	42a3      	cmp	r3, r4
   201f8:	d207      	bcs.n	2020a <two_way_long_needle+0xea>
   201fa:	5ce8      	ldrb	r0, [r5, r3]
   201fc:	5cd1      	ldrb	r1, [r2, r3]
   201fe:	4288      	cmp	r0, r1
   20200:	d0f8      	beq.n	201f4 <two_way_long_needle+0xd4>
   20202:	9a01      	ldr	r2, [sp, #4]
   20204:	4452      	add	r2, sl
   20206:	4692      	mov	sl, r2
   20208:	e7e6      	b.n	201d8 <two_way_long_needle+0xb8>
   2020a:	9b00      	ldr	r3, [sp, #0]
   2020c:	1e59      	subs	r1, r3, #1
   2020e:	429f      	cmp	r7, r3
   20210:	d300      	bcc.n	20214 <two_way_long_needle+0xf4>
   20212:	e07d      	b.n	20310 <two_way_long_needle+0x1f0>
   20214:	4642      	mov	r2, r8
   20216:	4452      	add	r2, sl
   20218:	5c50      	ldrb	r0, [r2, r1]
   2021a:	5c6b      	ldrb	r3, [r5, r1]
   2021c:	4298      	cmp	r0, r3
   2021e:	d000      	beq.n	20222 <two_way_long_needle+0x102>
   20220:	e074      	b.n	2030c <two_way_long_needle+0x1ec>
   20222:	1e7b      	subs	r3, r7, #1
   20224:	469b      	mov	fp, r3
   20226:	0023      	movs	r3, r4
   20228:	46b4      	mov	ip, r6
   2022a:	465c      	mov	r4, fp
   2022c:	0016      	movs	r6, r2
   2022e:	469b      	mov	fp, r3
   20230:	e004      	b.n	2023c <two_way_long_needle+0x11c>
   20232:	5cea      	ldrb	r2, [r5, r3]
   20234:	5cf0      	ldrb	r0, [r6, r3]
   20236:	4282      	cmp	r2, r0
   20238:	d103      	bne.n	20242 <two_way_long_needle+0x122>
   2023a:	0019      	movs	r1, r3
   2023c:	1e4b      	subs	r3, r1, #1
   2023e:	42a3      	cmp	r3, r4
   20240:	d1f7      	bne.n	20232 <two_way_long_needle+0x112>
   20242:	4666      	mov	r6, ip
   20244:	465c      	mov	r4, fp
   20246:	3701      	adds	r7, #1
   20248:	428f      	cmp	r7, r1
   2024a:	d863      	bhi.n	20314 <two_way_long_needle+0x1f4>
   2024c:	464b      	mov	r3, r9
   2024e:	9f03      	ldr	r7, [sp, #12]
   20250:	0030      	movs	r0, r6
   20252:	44ba      	add	sl, r7
   20254:	1bdf      	subs	r7, r3, r7
   20256:	e7a2      	b.n	2019e <two_way_long_needle+0x7e>
   20258:	2000      	movs	r0, #0
   2025a:	4b31      	ldr	r3, [pc, #196]	; (20320 <two_way_long_needle+0x200>)
   2025c:	449d      	add	sp, r3
   2025e:	bc3c      	pop	{r2, r3, r4, r5}
   20260:	4690      	mov	r8, r2
   20262:	4699      	mov	r9, r3
   20264:	46a2      	mov	sl, r4
   20266:	46ab      	mov	fp, r5
   20268:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2026a:	465b      	mov	r3, fp
   2026c:	1ae3      	subs	r3, r4, r3
   2026e:	455b      	cmp	r3, fp
   20270:	d34a      	bcc.n	20308 <two_way_long_needle+0x1e8>
   20272:	3301      	adds	r3, #1
   20274:	9303      	str	r3, [sp, #12]
   20276:	2300      	movs	r3, #0
   20278:	469a      	mov	sl, r3
   2027a:	1e63      	subs	r3, r4, #1
   2027c:	4698      	mov	r8, r3
   2027e:	465a      	mov	r2, fp
   20280:	2301      	movs	r3, #1
   20282:	0038      	movs	r0, r7
   20284:	46a1      	mov	r9, r4
   20286:	4657      	mov	r7, sl
   20288:	4644      	mov	r4, r8
   2028a:	46b0      	mov	r8, r6
   2028c:	1a9b      	subs	r3, r3, r2
   2028e:	9300      	str	r3, [sp, #0]
   20290:	464b      	mov	r3, r9
   20292:	18fe      	adds	r6, r7, r3
   20294:	1a32      	subs	r2, r6, r0
   20296:	2100      	movs	r1, #0
   20298:	4440      	add	r0, r8
   2029a:	f002 ffad 	bl	231f8 <memchr>
   2029e:	2800      	cmp	r0, #0
   202a0:	d1da      	bne.n	20258 <two_way_long_needle+0x138>
   202a2:	2e00      	cmp	r6, #0
   202a4:	d0d8      	beq.n	20258 <two_way_long_needle+0x138>
   202a6:	4643      	mov	r3, r8
   202a8:	2108      	movs	r1, #8
   202aa:	199b      	adds	r3, r3, r6
   202ac:	3b01      	subs	r3, #1
   202ae:	781b      	ldrb	r3, [r3, #0]
   202b0:	aa02      	add	r2, sp, #8
   202b2:	009b      	lsls	r3, r3, #2
   202b4:	1852      	adds	r2, r2, r1
   202b6:	58d3      	ldr	r3, [r2, r3]
   202b8:	2b00      	cmp	r3, #0
   202ba:	d122      	bne.n	20302 <two_way_long_needle+0x1e2>
   202bc:	4643      	mov	r3, r8
   202be:	19d8      	adds	r0, r3, r7
   202c0:	45a3      	cmp	fp, r4
   202c2:	d20c      	bcs.n	202de <two_way_long_needle+0x1be>
   202c4:	465b      	mov	r3, fp
   202c6:	5cc1      	ldrb	r1, [r0, r3]
   202c8:	5cea      	ldrb	r2, [r5, r3]
   202ca:	4291      	cmp	r1, r2
   202cc:	d004      	beq.n	202d8 <two_way_long_needle+0x1b8>
   202ce:	e015      	b.n	202fc <two_way_long_needle+0x1dc>
   202d0:	5ce9      	ldrb	r1, [r5, r3]
   202d2:	5cc2      	ldrb	r2, [r0, r3]
   202d4:	4291      	cmp	r1, r2
   202d6:	d111      	bne.n	202fc <two_way_long_needle+0x1dc>
   202d8:	3301      	adds	r3, #1
   202da:	42a3      	cmp	r3, r4
   202dc:	d3f8      	bcc.n	202d0 <two_way_long_needle+0x1b0>
   202de:	465b      	mov	r3, fp
   202e0:	3b01      	subs	r3, #1
   202e2:	d202      	bcs.n	202ea <two_way_long_needle+0x1ca>
   202e4:	e7b9      	b.n	2025a <two_way_long_needle+0x13a>
   202e6:	3b01      	subs	r3, #1
   202e8:	d3b7      	bcc.n	2025a <two_way_long_needle+0x13a>
   202ea:	5ce9      	ldrb	r1, [r5, r3]
   202ec:	5cc2      	ldrb	r2, [r0, r3]
   202ee:	4291      	cmp	r1, r2
   202f0:	d0f9      	beq.n	202e6 <two_way_long_needle+0x1c6>
   202f2:	9b03      	ldr	r3, [sp, #12]
   202f4:	0030      	movs	r0, r6
   202f6:	469c      	mov	ip, r3
   202f8:	4467      	add	r7, ip
   202fa:	e7c9      	b.n	20290 <two_way_long_needle+0x170>
   202fc:	9a00      	ldr	r2, [sp, #0]
   202fe:	4694      	mov	ip, r2
   20300:	4467      	add	r7, ip
   20302:	18ff      	adds	r7, r7, r3
   20304:	0030      	movs	r0, r6
   20306:	e7c3      	b.n	20290 <two_way_long_needle+0x170>
   20308:	465b      	mov	r3, fp
   2030a:	e7b2      	b.n	20272 <two_way_long_needle+0x152>
   2030c:	9900      	ldr	r1, [sp, #0]
   2030e:	e79a      	b.n	20246 <two_way_long_needle+0x126>
   20310:	0019      	movs	r1, r3
   20312:	e798      	b.n	20246 <two_way_long_needle+0x126>
   20314:	4640      	mov	r0, r8
   20316:	4450      	add	r0, sl
   20318:	e79f      	b.n	2025a <two_way_long_needle+0x13a>
   2031a:	46c0      	nop			; (mov r8, r8)
   2031c:	fffffbec 	.word	0xfffffbec
   20320:	00000414 	.word	0x00000414

00020324 <strstr>:
   20324:	b5f0      	push	{r4, r5, r6, r7, lr}
   20326:	4657      	mov	r7, sl
   20328:	4645      	mov	r5, r8
   2032a:	46de      	mov	lr, fp
   2032c:	464e      	mov	r6, r9
   2032e:	b5e0      	push	{r5, r6, r7, lr}
   20330:	7803      	ldrb	r3, [r0, #0]
   20332:	b085      	sub	sp, #20
   20334:	0007      	movs	r7, r0
   20336:	000d      	movs	r5, r1
   20338:	2b00      	cmp	r3, #0
   2033a:	d035      	beq.n	203a8 <strstr+0x84>
   2033c:	7809      	ldrb	r1, [r1, #0]
   2033e:	1e0a      	subs	r2, r1, #0
   20340:	d100      	bne.n	20344 <strstr+0x20>
   20342:	e09f      	b.n	20484 <strstr+0x160>
   20344:	002c      	movs	r4, r5
   20346:	2601      	movs	r6, #1
   20348:	e002      	b.n	20350 <strstr+0x2c>
   2034a:	7822      	ldrb	r2, [r4, #0]
   2034c:	2a00      	cmp	r2, #0
   2034e:	d00b      	beq.n	20368 <strstr+0x44>
   20350:	1a9b      	subs	r3, r3, r2
   20352:	425a      	negs	r2, r3
   20354:	4153      	adcs	r3, r2
   20356:	3001      	adds	r0, #1
   20358:	401e      	ands	r6, r3
   2035a:	7803      	ldrb	r3, [r0, #0]
   2035c:	3401      	adds	r4, #1
   2035e:	2b00      	cmp	r3, #0
   20360:	d1f3      	bne.n	2034a <strstr+0x26>
   20362:	7823      	ldrb	r3, [r4, #0]
   20364:	2b00      	cmp	r3, #0
   20366:	d122      	bne.n	203ae <strstr+0x8a>
   20368:	0038      	movs	r0, r7
   2036a:	2e00      	cmp	r6, #0
   2036c:	d006      	beq.n	2037c <strstr+0x58>
   2036e:	b005      	add	sp, #20
   20370:	bc3c      	pop	{r2, r3, r4, r5}
   20372:	4690      	mov	r8, r2
   20374:	4699      	mov	r9, r3
   20376:	46a2      	mov	sl, r4
   20378:	46ab      	mov	fp, r5
   2037a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2037c:	1c78      	adds	r0, r7, #1
   2037e:	f003 fb0b 	bl	23998 <strchr>
   20382:	1b64      	subs	r4, r4, r5
   20384:	1e06      	subs	r6, r0, #0
   20386:	d012      	beq.n	203ae <strstr+0x8a>
   20388:	2c01      	cmp	r4, #1
   2038a:	d0f0      	beq.n	2036e <strstr+0x4a>
   2038c:	193f      	adds	r7, r7, r4
   2038e:	2101      	movs	r1, #1
   20390:	42b8      	cmp	r0, r7
   20392:	d800      	bhi.n	20396 <strstr+0x72>
   20394:	1a39      	subs	r1, r7, r0
   20396:	000f      	movs	r7, r1
   20398:	2c1f      	cmp	r4, #31
   2039a:	d90a      	bls.n	203b2 <strstr+0x8e>
   2039c:	0023      	movs	r3, r4
   2039e:	002a      	movs	r2, r5
   203a0:	0030      	movs	r0, r6
   203a2:	f7ff febd 	bl	20120 <two_way_long_needle>
   203a6:	e7e2      	b.n	2036e <strstr+0x4a>
   203a8:	780b      	ldrb	r3, [r1, #0]
   203aa:	2b00      	cmp	r3, #0
   203ac:	d06a      	beq.n	20484 <strstr+0x160>
   203ae:	2000      	movs	r0, #0
   203b0:	e7dd      	b.n	2036e <strstr+0x4a>
   203b2:	aa03      	add	r2, sp, #12
   203b4:	0021      	movs	r1, r4
   203b6:	0028      	movs	r0, r5
   203b8:	f7ff fe52 	bl	20060 <critical_factorization>
   203bc:	9b03      	ldr	r3, [sp, #12]
   203be:	4680      	mov	r8, r0
   203c0:	0002      	movs	r2, r0
   203c2:	18e9      	adds	r1, r5, r3
   203c4:	0028      	movs	r0, r5
   203c6:	f002 ff57 	bl	23278 <memcmp>
   203ca:	2800      	cmp	r0, #0
   203cc:	d15c      	bne.n	20488 <strstr+0x164>
   203ce:	2300      	movs	r3, #0
   203d0:	4699      	mov	r9, r3
   203d2:	4643      	mov	r3, r8
   203d4:	3b01      	subs	r3, #1
   203d6:	9300      	str	r3, [sp, #0]
   203d8:	4642      	mov	r2, r8
   203da:	2301      	movs	r3, #1
   203dc:	46b2      	mov	sl, r6
   203de:	0038      	movs	r0, r7
   203e0:	464e      	mov	r6, r9
   203e2:	464f      	mov	r7, r9
   203e4:	1a9b      	subs	r3, r3, r2
   203e6:	9301      	str	r3, [sp, #4]
   203e8:	19e3      	adds	r3, r4, r7
   203ea:	1a1a      	subs	r2, r3, r0
   203ec:	2100      	movs	r1, #0
   203ee:	4450      	add	r0, sl
   203f0:	4699      	mov	r9, r3
   203f2:	f002 ff01 	bl	231f8 <memchr>
   203f6:	2800      	cmp	r0, #0
   203f8:	d1d9      	bne.n	203ae <strstr+0x8a>
   203fa:	464b      	mov	r3, r9
   203fc:	2b00      	cmp	r3, #0
   203fe:	d0d6      	beq.n	203ae <strstr+0x8a>
   20400:	4643      	mov	r3, r8
   20402:	45b0      	cmp	r8, r6
   20404:	d200      	bcs.n	20408 <strstr+0xe4>
   20406:	0033      	movs	r3, r6
   20408:	429c      	cmp	r4, r3
   2040a:	d90f      	bls.n	2042c <strstr+0x108>
   2040c:	4652      	mov	r2, sl
   2040e:	18d2      	adds	r2, r2, r3
   20410:	5ce9      	ldrb	r1, [r5, r3]
   20412:	5dd2      	ldrb	r2, [r2, r7]
   20414:	4291      	cmp	r1, r2
   20416:	d12e      	bne.n	20476 <strstr+0x152>
   20418:	4652      	mov	r2, sl
   2041a:	19d0      	adds	r0, r2, r7
   2041c:	e003      	b.n	20426 <strstr+0x102>
   2041e:	5ce9      	ldrb	r1, [r5, r3]
   20420:	5cc2      	ldrb	r2, [r0, r3]
   20422:	4291      	cmp	r1, r2
   20424:	d127      	bne.n	20476 <strstr+0x152>
   20426:	3301      	adds	r3, #1
   20428:	429c      	cmp	r4, r3
   2042a:	d1f8      	bne.n	2041e <strstr+0xfa>
   2042c:	9a00      	ldr	r2, [sp, #0]
   2042e:	45b0      	cmp	r8, r6
   20430:	d976      	bls.n	20520 <strstr+0x1fc>
   20432:	46bc      	mov	ip, r7
   20434:	44d4      	add	ip, sl
   20436:	4661      	mov	r1, ip
   20438:	9b00      	ldr	r3, [sp, #0]
   2043a:	5cc9      	ldrb	r1, [r1, r3]
   2043c:	5ceb      	ldrb	r3, [r5, r3]
   2043e:	4299      	cmp	r1, r3
   20440:	d16e      	bne.n	20520 <strstr+0x1fc>
   20442:	1e73      	subs	r3, r6, #1
   20444:	469b      	mov	fp, r3
   20446:	4663      	mov	r3, ip
   20448:	46a4      	mov	ip, r4
   2044a:	465c      	mov	r4, fp
   2044c:	46b3      	mov	fp, r6
   2044e:	001e      	movs	r6, r3
   20450:	e004      	b.n	2045c <strstr+0x138>
   20452:	5ce8      	ldrb	r0, [r5, r3]
   20454:	5cf1      	ldrb	r1, [r6, r3]
   20456:	4288      	cmp	r0, r1
   20458:	d103      	bne.n	20462 <strstr+0x13e>
   2045a:	001a      	movs	r2, r3
   2045c:	1e53      	subs	r3, r2, #1
   2045e:	42a3      	cmp	r3, r4
   20460:	d1f7      	bne.n	20452 <strstr+0x12e>
   20462:	4664      	mov	r4, ip
   20464:	465e      	mov	r6, fp
   20466:	3601      	adds	r6, #1
   20468:	4296      	cmp	r6, r2
   2046a:	d85b      	bhi.n	20524 <strstr+0x200>
   2046c:	9e03      	ldr	r6, [sp, #12]
   2046e:	4648      	mov	r0, r9
   20470:	19bf      	adds	r7, r7, r6
   20472:	1ba6      	subs	r6, r4, r6
   20474:	e7b8      	b.n	203e8 <strstr+0xc4>
   20476:	9a01      	ldr	r2, [sp, #4]
   20478:	2600      	movs	r6, #0
   2047a:	4694      	mov	ip, r2
   2047c:	4467      	add	r7, ip
   2047e:	18ff      	adds	r7, r7, r3
   20480:	4648      	mov	r0, r9
   20482:	e7b1      	b.n	203e8 <strstr+0xc4>
   20484:	0038      	movs	r0, r7
   20486:	e772      	b.n	2036e <strstr+0x4a>
   20488:	4643      	mov	r3, r8
   2048a:	1ae3      	subs	r3, r4, r3
   2048c:	4543      	cmp	r3, r8
   2048e:	d200      	bcs.n	20492 <strstr+0x16e>
   20490:	4643      	mov	r3, r8
   20492:	3301      	adds	r3, #1
   20494:	9303      	str	r3, [sp, #12]
   20496:	2300      	movs	r3, #0
   20498:	4642      	mov	r2, r8
   2049a:	4699      	mov	r9, r3
   2049c:	3301      	adds	r3, #1
   2049e:	1a9b      	subs	r3, r3, r2
   204a0:	464a      	mov	r2, r9
   204a2:	46b3      	mov	fp, r6
   204a4:	46b1      	mov	r9, r6
   204a6:	0038      	movs	r0, r7
   204a8:	469a      	mov	sl, r3
   204aa:	0016      	movs	r6, r2
   204ac:	44c3      	add	fp, r8
   204ae:	19a7      	adds	r7, r4, r6
   204b0:	1a3a      	subs	r2, r7, r0
   204b2:	2100      	movs	r1, #0
   204b4:	4448      	add	r0, r9
   204b6:	f002 fe9f 	bl	231f8 <memchr>
   204ba:	2800      	cmp	r0, #0
   204bc:	d000      	beq.n	204c0 <strstr+0x19c>
   204be:	e776      	b.n	203ae <strstr+0x8a>
   204c0:	2f00      	cmp	r7, #0
   204c2:	d100      	bne.n	204c6 <strstr+0x1a2>
   204c4:	e773      	b.n	203ae <strstr+0x8a>
   204c6:	464b      	mov	r3, r9
   204c8:	1998      	adds	r0, r3, r6
   204ca:	4544      	cmp	r4, r8
   204cc:	d90f      	bls.n	204ee <strstr+0x1ca>
   204ce:	465b      	mov	r3, fp
   204d0:	5d99      	ldrb	r1, [r3, r6]
   204d2:	4643      	mov	r3, r8
   204d4:	4648      	mov	r0, r9
   204d6:	5cea      	ldrb	r2, [r5, r3]
   204d8:	1980      	adds	r0, r0, r6
   204da:	4291      	cmp	r1, r2
   204dc:	d004      	beq.n	204e8 <strstr+0x1c4>
   204de:	e016      	b.n	2050e <strstr+0x1ea>
   204e0:	5ce9      	ldrb	r1, [r5, r3]
   204e2:	5cc2      	ldrb	r2, [r0, r3]
   204e4:	4291      	cmp	r1, r2
   204e6:	d112      	bne.n	2050e <strstr+0x1ea>
   204e8:	3301      	adds	r3, #1
   204ea:	429c      	cmp	r4, r3
   204ec:	d1f8      	bne.n	204e0 <strstr+0x1bc>
   204ee:	4643      	mov	r3, r8
   204f0:	3b01      	subs	r3, #1
   204f2:	d200      	bcs.n	204f6 <strstr+0x1d2>
   204f4:	e73b      	b.n	2036e <strstr+0x4a>
   204f6:	5cc1      	ldrb	r1, [r0, r3]
   204f8:	5cea      	ldrb	r2, [r5, r3]
   204fa:	4291      	cmp	r1, r2
   204fc:	d004      	beq.n	20508 <strstr+0x1e4>
   204fe:	e00a      	b.n	20516 <strstr+0x1f2>
   20500:	5ce9      	ldrb	r1, [r5, r3]
   20502:	5cc2      	ldrb	r2, [r0, r3]
   20504:	4291      	cmp	r1, r2
   20506:	d106      	bne.n	20516 <strstr+0x1f2>
   20508:	3b01      	subs	r3, #1
   2050a:	d2f9      	bcs.n	20500 <strstr+0x1dc>
   2050c:	e72f      	b.n	2036e <strstr+0x4a>
   2050e:	4456      	add	r6, sl
   20510:	18f6      	adds	r6, r6, r3
   20512:	0038      	movs	r0, r7
   20514:	e7cb      	b.n	204ae <strstr+0x18a>
   20516:	9b03      	ldr	r3, [sp, #12]
   20518:	0038      	movs	r0, r7
   2051a:	469c      	mov	ip, r3
   2051c:	4466      	add	r6, ip
   2051e:	e7c6      	b.n	204ae <strstr+0x18a>
   20520:	4642      	mov	r2, r8
   20522:	e7a0      	b.n	20466 <strstr+0x142>
   20524:	46b9      	mov	r9, r7
   20526:	4650      	mov	r0, sl
   20528:	4448      	add	r0, r9
   2052a:	e720      	b.n	2036e <strstr+0x4a>

0002052c <_svfprintf_r>:
   2052c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2052e:	46de      	mov	lr, fp
   20530:	4645      	mov	r5, r8
   20532:	4657      	mov	r7, sl
   20534:	464e      	mov	r6, r9
   20536:	b5e0      	push	{r5, r6, r7, lr}
   20538:	b0c3      	sub	sp, #268	; 0x10c
   2053a:	000d      	movs	r5, r1
   2053c:	9106      	str	r1, [sp, #24]
   2053e:	0014      	movs	r4, r2
   20540:	930f      	str	r3, [sp, #60]	; 0x3c
   20542:	9009      	str	r0, [sp, #36]	; 0x24
   20544:	f002 fb92 	bl	22c6c <_localeconv_r>
   20548:	6803      	ldr	r3, [r0, #0]
   2054a:	0018      	movs	r0, r3
   2054c:	9319      	str	r3, [sp, #100]	; 0x64
   2054e:	f7ff fd55 	bl	1fffc <strlen>
   20552:	9018      	str	r0, [sp, #96]	; 0x60
   20554:	89ab      	ldrh	r3, [r5, #12]
   20556:	061b      	lsls	r3, r3, #24
   20558:	d505      	bpl.n	20566 <_svfprintf_r+0x3a>
   2055a:	692b      	ldr	r3, [r5, #16]
   2055c:	9307      	str	r3, [sp, #28]
   2055e:	2b00      	cmp	r3, #0
   20560:	d101      	bne.n	20566 <_svfprintf_r+0x3a>
   20562:	f001 f863 	bl	2162c <_svfprintf_r+0x1100>
   20566:	ab32      	add	r3, sp, #200	; 0xc8
   20568:	9325      	str	r3, [sp, #148]	; 0x94
   2056a:	2300      	movs	r3, #0
   2056c:	46a3      	mov	fp, r4
   2056e:	af25      	add	r7, sp, #148	; 0x94
   20570:	60bb      	str	r3, [r7, #8]
   20572:	607b      	str	r3, [r7, #4]
   20574:	9314      	str	r3, [sp, #80]	; 0x50
   20576:	9316      	str	r3, [sp, #88]	; 0x58
   20578:	9315      	str	r3, [sp, #84]	; 0x54
   2057a:	ae32      	add	r6, sp, #200	; 0xc8
   2057c:	9317      	str	r3, [sp, #92]	; 0x5c
   2057e:	931a      	str	r3, [sp, #104]	; 0x68
   20580:	930a      	str	r3, [sp, #40]	; 0x28
   20582:	465b      	mov	r3, fp
   20584:	781b      	ldrb	r3, [r3, #0]
   20586:	465c      	mov	r4, fp
   20588:	2b00      	cmp	r3, #0
   2058a:	d01c      	beq.n	205c6 <_svfprintf_r+0x9a>
   2058c:	2b25      	cmp	r3, #37	; 0x25
   2058e:	d102      	bne.n	20596 <_svfprintf_r+0x6a>
   20590:	e019      	b.n	205c6 <_svfprintf_r+0x9a>
   20592:	2b25      	cmp	r3, #37	; 0x25
   20594:	d003      	beq.n	2059e <_svfprintf_r+0x72>
   20596:	3401      	adds	r4, #1
   20598:	7823      	ldrb	r3, [r4, #0]
   2059a:	2b00      	cmp	r3, #0
   2059c:	d1f9      	bne.n	20592 <_svfprintf_r+0x66>
   2059e:	465b      	mov	r3, fp
   205a0:	1ae5      	subs	r5, r4, r3
   205a2:	d010      	beq.n	205c6 <_svfprintf_r+0x9a>
   205a4:	465b      	mov	r3, fp
   205a6:	6033      	str	r3, [r6, #0]
   205a8:	68bb      	ldr	r3, [r7, #8]
   205aa:	6075      	str	r5, [r6, #4]
   205ac:	195b      	adds	r3, r3, r5
   205ae:	60bb      	str	r3, [r7, #8]
   205b0:	687b      	ldr	r3, [r7, #4]
   205b2:	3301      	adds	r3, #1
   205b4:	607b      	str	r3, [r7, #4]
   205b6:	2b07      	cmp	r3, #7
   205b8:	dc2e      	bgt.n	20618 <_svfprintf_r+0xec>
   205ba:	3608      	adds	r6, #8
   205bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   205be:	469c      	mov	ip, r3
   205c0:	44ac      	add	ip, r5
   205c2:	4663      	mov	r3, ip
   205c4:	930a      	str	r3, [sp, #40]	; 0x28
   205c6:	7823      	ldrb	r3, [r4, #0]
   205c8:	2b00      	cmp	r3, #0
   205ca:	d02e      	beq.n	2062a <_svfprintf_r+0xfe>
   205cc:	1c63      	adds	r3, r4, #1
   205ce:	469b      	mov	fp, r3
   205d0:	2300      	movs	r3, #0
   205d2:	aa16      	add	r2, sp, #88	; 0x58
   205d4:	77d3      	strb	r3, [r2, #31]
   205d6:	2201      	movs	r2, #1
   205d8:	4252      	negs	r2, r2
   205da:	4692      	mov	sl, r2
   205dc:	2200      	movs	r2, #0
   205de:	2100      	movs	r1, #0
   205e0:	920b      	str	r2, [sp, #44]	; 0x2c
   205e2:	3220      	adds	r2, #32
   205e4:	4691      	mov	r9, r2
   205e6:	3220      	adds	r2, #32
   205e8:	7863      	ldrb	r3, [r4, #1]
   205ea:	4688      	mov	r8, r1
   205ec:	2000      	movs	r0, #0
   205ee:	2400      	movs	r4, #0
   205f0:	4694      	mov	ip, r2
   205f2:	4659      	mov	r1, fp
   205f4:	3101      	adds	r1, #1
   205f6:	001a      	movs	r2, r3
   205f8:	3a20      	subs	r2, #32
   205fa:	2a58      	cmp	r2, #88	; 0x58
   205fc:	d900      	bls.n	20600 <_svfprintf_r+0xd4>
   205fe:	e2fd      	b.n	20bfc <_svfprintf_r+0x6d0>
   20600:	4dd7      	ldr	r5, [pc, #860]	; (20960 <_svfprintf_r+0x434>)
   20602:	0092      	lsls	r2, r2, #2
   20604:	58aa      	ldr	r2, [r5, r2]
   20606:	4697      	mov	pc, r2
   20608:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2060a:	920f      	str	r2, [sp, #60]	; 0x3c
   2060c:	425b      	negs	r3, r3
   2060e:	930b      	str	r3, [sp, #44]	; 0x2c
   20610:	2304      	movs	r3, #4
   20612:	431c      	orrs	r4, r3
   20614:	780b      	ldrb	r3, [r1, #0]
   20616:	e7ed      	b.n	205f4 <_svfprintf_r+0xc8>
   20618:	003a      	movs	r2, r7
   2061a:	9906      	ldr	r1, [sp, #24]
   2061c:	9809      	ldr	r0, [sp, #36]	; 0x24
   2061e:	f003 fa29 	bl	23a74 <__ssprint_r>
   20622:	2800      	cmp	r0, #0
   20624:	d109      	bne.n	2063a <_svfprintf_r+0x10e>
   20626:	ae32      	add	r6, sp, #200	; 0xc8
   20628:	e7c8      	b.n	205bc <_svfprintf_r+0x90>
   2062a:	68bb      	ldr	r3, [r7, #8]
   2062c:	2b00      	cmp	r3, #0
   2062e:	d004      	beq.n	2063a <_svfprintf_r+0x10e>
   20630:	003a      	movs	r2, r7
   20632:	9906      	ldr	r1, [sp, #24]
   20634:	9809      	ldr	r0, [sp, #36]	; 0x24
   20636:	f003 fa1d 	bl	23a74 <__ssprint_r>
   2063a:	9b06      	ldr	r3, [sp, #24]
   2063c:	899b      	ldrh	r3, [r3, #12]
   2063e:	065b      	lsls	r3, r3, #25
   20640:	d501      	bpl.n	20646 <_svfprintf_r+0x11a>
   20642:	f001 f8ce 	bl	217e2 <_svfprintf_r+0x12b6>
   20646:	980a      	ldr	r0, [sp, #40]	; 0x28
   20648:	b043      	add	sp, #268	; 0x10c
   2064a:	bc3c      	pop	{r2, r3, r4, r5}
   2064c:	4690      	mov	r8, r2
   2064e:	4699      	mov	r9, r3
   20650:	46a2      	mov	sl, r4
   20652:	46ab      	mov	fp, r5
   20654:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20656:	2201      	movs	r2, #1
   20658:	780b      	ldrb	r3, [r1, #0]
   2065a:	4690      	mov	r8, r2
   2065c:	202b      	movs	r0, #43	; 0x2b
   2065e:	e7c9      	b.n	205f4 <_svfprintf_r+0xc8>
   20660:	1c4b      	adds	r3, r1, #1
   20662:	469b      	mov	fp, r3
   20664:	780b      	ldrb	r3, [r1, #0]
   20666:	2b2a      	cmp	r3, #42	; 0x2a
   20668:	d101      	bne.n	2066e <_svfprintf_r+0x142>
   2066a:	f001 fa1b 	bl	21aa4 <_svfprintf_r+0x1578>
   2066e:	001a      	movs	r2, r3
   20670:	2100      	movs	r1, #0
   20672:	3a30      	subs	r2, #48	; 0x30
   20674:	468a      	mov	sl, r1
   20676:	4659      	mov	r1, fp
   20678:	2a09      	cmp	r2, #9
   2067a:	d8bc      	bhi.n	205f6 <_svfprintf_r+0xca>
   2067c:	0003      	movs	r3, r0
   2067e:	0011      	movs	r1, r2
   20680:	4650      	mov	r0, sl
   20682:	465a      	mov	r2, fp
   20684:	469a      	mov	sl, r3
   20686:	46a3      	mov	fp, r4
   20688:	0083      	lsls	r3, r0, #2
   2068a:	181b      	adds	r3, r3, r0
   2068c:	7814      	ldrb	r4, [r2, #0]
   2068e:	005b      	lsls	r3, r3, #1
   20690:	1858      	adds	r0, r3, r1
   20692:	0021      	movs	r1, r4
   20694:	1c53      	adds	r3, r2, #1
   20696:	3930      	subs	r1, #48	; 0x30
   20698:	001a      	movs	r2, r3
   2069a:	2909      	cmp	r1, #9
   2069c:	d9f4      	bls.n	20688 <_svfprintf_r+0x15c>
   2069e:	4652      	mov	r2, sl
   206a0:	0019      	movs	r1, r3
   206a2:	4682      	mov	sl, r0
   206a4:	0023      	movs	r3, r4
   206a6:	0010      	movs	r0, r2
   206a8:	465c      	mov	r4, fp
   206aa:	e7a4      	b.n	205f6 <_svfprintf_r+0xca>
   206ac:	2380      	movs	r3, #128	; 0x80
   206ae:	431c      	orrs	r4, r3
   206b0:	780b      	ldrb	r3, [r1, #0]
   206b2:	e79f      	b.n	205f4 <_svfprintf_r+0xc8>
   206b4:	468b      	mov	fp, r1
   206b6:	4641      	mov	r1, r8
   206b8:	9312      	str	r3, [sp, #72]	; 0x48
   206ba:	2900      	cmp	r1, #0
   206bc:	d001      	beq.n	206c2 <_svfprintf_r+0x196>
   206be:	f001 fa1f 	bl	21b00 <_svfprintf_r+0x15d4>
   206c2:	2310      	movs	r3, #16
   206c4:	431c      	orrs	r4, r3
   206c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   206c8:	06a3      	lsls	r3, r4, #26
   206ca:	d501      	bpl.n	206d0 <_svfprintf_r+0x1a4>
   206cc:	f000 fe88 	bl	213e0 <_svfprintf_r+0xeb4>
   206d0:	06e3      	lsls	r3, r4, #27
   206d2:	d501      	bpl.n	206d8 <_svfprintf_r+0x1ac>
   206d4:	f000 fd80 	bl	211d8 <_svfprintf_r+0xcac>
   206d8:	0663      	lsls	r3, r4, #25
   206da:	d401      	bmi.n	206e0 <_svfprintf_r+0x1b4>
   206dc:	f000 fd7c 	bl	211d8 <_svfprintf_r+0xcac>
   206e0:	2100      	movs	r1, #0
   206e2:	5e53      	ldrsh	r3, [r2, r1]
   206e4:	930c      	str	r3, [sp, #48]	; 0x30
   206e6:	3204      	adds	r2, #4
   206e8:	17db      	asrs	r3, r3, #31
   206ea:	930d      	str	r3, [sp, #52]	; 0x34
   206ec:	920f      	str	r2, [sp, #60]	; 0x3c
   206ee:	d501      	bpl.n	206f4 <_svfprintf_r+0x1c8>
   206f0:	f000 fe86 	bl	21400 <_svfprintf_r+0xed4>
   206f4:	990c      	ldr	r1, [sp, #48]	; 0x30
   206f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   206f8:	0008      	movs	r0, r1
   206fa:	ab16      	add	r3, sp, #88	; 0x58
   206fc:	7fdb      	ldrb	r3, [r3, #31]
   206fe:	4310      	orrs	r0, r2
   20700:	4698      	mov	r8, r3
   20702:	0002      	movs	r2, r0
   20704:	2301      	movs	r3, #1
   20706:	4651      	mov	r1, sl
   20708:	3101      	adds	r1, #1
   2070a:	d100      	bne.n	2070e <_svfprintf_r+0x1e2>
   2070c:	e0ff      	b.n	2090e <_svfprintf_r+0x3e2>
   2070e:	2180      	movs	r1, #128	; 0x80
   20710:	0020      	movs	r0, r4
   20712:	4388      	bics	r0, r1
   20714:	9008      	str	r0, [sp, #32]
   20716:	2a00      	cmp	r2, #0
   20718:	d000      	beq.n	2071c <_svfprintf_r+0x1f0>
   2071a:	e0fc      	b.n	20916 <_svfprintf_r+0x3ea>
   2071c:	4652      	mov	r2, sl
   2071e:	2a00      	cmp	r2, #0
   20720:	d001      	beq.n	20726 <_svfprintf_r+0x1fa>
   20722:	f000 fc2c 	bl	20f7e <_svfprintf_r+0xa52>
   20726:	2b00      	cmp	r3, #0
   20728:	d001      	beq.n	2072e <_svfprintf_r+0x202>
   2072a:	f000 fd04 	bl	21136 <_svfprintf_r+0xc0a>
   2072e:	2001      	movs	r0, #1
   20730:	ab32      	add	r3, sp, #200	; 0xc8
   20732:	4020      	ands	r0, r4
   20734:	900e      	str	r0, [sp, #56]	; 0x38
   20736:	9311      	str	r3, [sp, #68]	; 0x44
   20738:	d008      	beq.n	2074c <_svfprintf_r+0x220>
   2073a:	2327      	movs	r3, #39	; 0x27
   2073c:	2130      	movs	r1, #48	; 0x30
   2073e:	aa28      	add	r2, sp, #160	; 0xa0
   20740:	54d1      	strb	r1, [r2, r3]
   20742:	aa16      	add	r2, sp, #88	; 0x58
   20744:	4694      	mov	ip, r2
   20746:	3348      	adds	r3, #72	; 0x48
   20748:	4463      	add	r3, ip
   2074a:	9311      	str	r3, [sp, #68]	; 0x44
   2074c:	4653      	mov	r3, sl
   2074e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   20750:	9307      	str	r3, [sp, #28]
   20752:	4592      	cmp	sl, r2
   20754:	da00      	bge.n	20758 <_svfprintf_r+0x22c>
   20756:	9207      	str	r2, [sp, #28]
   20758:	2300      	movs	r3, #0
   2075a:	9313      	str	r3, [sp, #76]	; 0x4c
   2075c:	4643      	mov	r3, r8
   2075e:	2b00      	cmp	r3, #0
   20760:	d002      	beq.n	20768 <_svfprintf_r+0x23c>
   20762:	9b07      	ldr	r3, [sp, #28]
   20764:	3301      	adds	r3, #1
   20766:	9307      	str	r3, [sp, #28]
   20768:	2302      	movs	r3, #2
   2076a:	9a08      	ldr	r2, [sp, #32]
   2076c:	401a      	ands	r2, r3
   2076e:	4691      	mov	r9, r2
   20770:	d002      	beq.n	20778 <_svfprintf_r+0x24c>
   20772:	9b07      	ldr	r3, [sp, #28]
   20774:	3302      	adds	r3, #2
   20776:	9307      	str	r3, [sp, #28]
   20778:	2384      	movs	r3, #132	; 0x84
   2077a:	9a08      	ldr	r2, [sp, #32]
   2077c:	401a      	ands	r2, r3
   2077e:	9210      	str	r2, [sp, #64]	; 0x40
   20780:	d000      	beq.n	20784 <_svfprintf_r+0x258>
   20782:	e24d      	b.n	20c20 <_svfprintf_r+0x6f4>
   20784:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20786:	9a07      	ldr	r2, [sp, #28]
   20788:	1a9c      	subs	r4, r3, r2
   2078a:	2c00      	cmp	r4, #0
   2078c:	dc00      	bgt.n	20790 <_svfprintf_r+0x264>
   2078e:	e247      	b.n	20c20 <_svfprintf_r+0x6f4>
   20790:	4974      	ldr	r1, [pc, #464]	; (20964 <_svfprintf_r+0x438>)
   20792:	68ba      	ldr	r2, [r7, #8]
   20794:	687b      	ldr	r3, [r7, #4]
   20796:	4688      	mov	r8, r1
   20798:	2c10      	cmp	r4, #16
   2079a:	dd1f      	ble.n	207dc <_svfprintf_r+0x2b0>
   2079c:	0031      	movs	r1, r6
   2079e:	2510      	movs	r5, #16
   207a0:	4646      	mov	r6, r8
   207a2:	e003      	b.n	207ac <_svfprintf_r+0x280>
   207a4:	3c10      	subs	r4, #16
   207a6:	3108      	adds	r1, #8
   207a8:	2c10      	cmp	r4, #16
   207aa:	dd15      	ble.n	207d8 <_svfprintf_r+0x2ac>
   207ac:	3210      	adds	r2, #16
   207ae:	3301      	adds	r3, #1
   207b0:	600e      	str	r6, [r1, #0]
   207b2:	604d      	str	r5, [r1, #4]
   207b4:	60ba      	str	r2, [r7, #8]
   207b6:	607b      	str	r3, [r7, #4]
   207b8:	2b07      	cmp	r3, #7
   207ba:	ddf3      	ble.n	207a4 <_svfprintf_r+0x278>
   207bc:	003a      	movs	r2, r7
   207be:	9906      	ldr	r1, [sp, #24]
   207c0:	9809      	ldr	r0, [sp, #36]	; 0x24
   207c2:	f003 f957 	bl	23a74 <__ssprint_r>
   207c6:	2800      	cmp	r0, #0
   207c8:	d000      	beq.n	207cc <_svfprintf_r+0x2a0>
   207ca:	e736      	b.n	2063a <_svfprintf_r+0x10e>
   207cc:	3c10      	subs	r4, #16
   207ce:	68ba      	ldr	r2, [r7, #8]
   207d0:	687b      	ldr	r3, [r7, #4]
   207d2:	a932      	add	r1, sp, #200	; 0xc8
   207d4:	2c10      	cmp	r4, #16
   207d6:	dce9      	bgt.n	207ac <_svfprintf_r+0x280>
   207d8:	46b0      	mov	r8, r6
   207da:	000e      	movs	r6, r1
   207dc:	4641      	mov	r1, r8
   207de:	6074      	str	r4, [r6, #4]
   207e0:	3301      	adds	r3, #1
   207e2:	18a4      	adds	r4, r4, r2
   207e4:	6031      	str	r1, [r6, #0]
   207e6:	60bc      	str	r4, [r7, #8]
   207e8:	607b      	str	r3, [r7, #4]
   207ea:	2b07      	cmp	r3, #7
   207ec:	dd01      	ble.n	207f2 <_svfprintf_r+0x2c6>
   207ee:	f000 fca8 	bl	21142 <_svfprintf_r+0xc16>
   207f2:	ab16      	add	r3, sp, #88	; 0x58
   207f4:	7fdb      	ldrb	r3, [r3, #31]
   207f6:	3608      	adds	r6, #8
   207f8:	4698      	mov	r8, r3
   207fa:	e212      	b.n	20c22 <_svfprintf_r+0x6f6>
   207fc:	468b      	mov	fp, r1
   207fe:	4641      	mov	r1, r8
   20800:	9312      	str	r3, [sp, #72]	; 0x48
   20802:	2900      	cmp	r1, #0
   20804:	d001      	beq.n	2080a <_svfprintf_r+0x2de>
   20806:	f001 f977 	bl	21af8 <_svfprintf_r+0x15cc>
   2080a:	2207      	movs	r2, #7
   2080c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2080e:	3307      	adds	r3, #7
   20810:	4393      	bics	r3, r2
   20812:	3201      	adds	r2, #1
   20814:	4694      	mov	ip, r2
   20816:	449c      	add	ip, r3
   20818:	4662      	mov	r2, ip
   2081a:	920f      	str	r2, [sp, #60]	; 0x3c
   2081c:	681a      	ldr	r2, [r3, #0]
   2081e:	9216      	str	r2, [sp, #88]	; 0x58
   20820:	685b      	ldr	r3, [r3, #4]
   20822:	2201      	movs	r2, #1
   20824:	9315      	str	r3, [sp, #84]	; 0x54
   20826:	9b15      	ldr	r3, [sp, #84]	; 0x54
   20828:	9d16      	ldr	r5, [sp, #88]	; 0x58
   2082a:	005b      	lsls	r3, r3, #1
   2082c:	085b      	lsrs	r3, r3, #1
   2082e:	4698      	mov	r8, r3
   20830:	4252      	negs	r2, r2
   20832:	4b4d      	ldr	r3, [pc, #308]	; (20968 <_svfprintf_r+0x43c>)
   20834:	0028      	movs	r0, r5
   20836:	4641      	mov	r1, r8
   20838:	f7ff f8ca 	bl	1f9d0 <__aeabi_dcmpun>
   2083c:	2800      	cmp	r0, #0
   2083e:	d001      	beq.n	20844 <_svfprintf_r+0x318>
   20840:	f000 fdfd 	bl	2143e <_svfprintf_r+0xf12>
   20844:	2201      	movs	r2, #1
   20846:	4b48      	ldr	r3, [pc, #288]	; (20968 <_svfprintf_r+0x43c>)
   20848:	4252      	negs	r2, r2
   2084a:	0028      	movs	r0, r5
   2084c:	4641      	mov	r1, r8
   2084e:	f7fc fbfb 	bl	1d048 <__aeabi_dcmple>
   20852:	2800      	cmp	r0, #0
   20854:	d001      	beq.n	2085a <_svfprintf_r+0x32e>
   20856:	f000 fdf2 	bl	2143e <_svfprintf_r+0xf12>
   2085a:	2200      	movs	r2, #0
   2085c:	2300      	movs	r3, #0
   2085e:	9816      	ldr	r0, [sp, #88]	; 0x58
   20860:	9915      	ldr	r1, [sp, #84]	; 0x54
   20862:	f7fc fbe7 	bl	1d034 <__aeabi_dcmplt>
   20866:	2800      	cmp	r0, #0
   20868:	d001      	beq.n	2086e <_svfprintf_r+0x342>
   2086a:	f001 f822 	bl	218b2 <_svfprintf_r+0x1386>
   2086e:	ab16      	add	r3, sp, #88	; 0x58
   20870:	7fdb      	ldrb	r3, [r3, #31]
   20872:	4698      	mov	r8, r3
   20874:	9b12      	ldr	r3, [sp, #72]	; 0x48
   20876:	2b47      	cmp	r3, #71	; 0x47
   20878:	dd01      	ble.n	2087e <_svfprintf_r+0x352>
   2087a:	f000 fec7 	bl	2160c <_svfprintf_r+0x10e0>
   2087e:	4b3b      	ldr	r3, [pc, #236]	; (2096c <_svfprintf_r+0x440>)
   20880:	9311      	str	r3, [sp, #68]	; 0x44
   20882:	2380      	movs	r3, #128	; 0x80
   20884:	439c      	bics	r4, r3
   20886:	3b7d      	subs	r3, #125	; 0x7d
   20888:	9307      	str	r3, [sp, #28]
   2088a:	930e      	str	r3, [sp, #56]	; 0x38
   2088c:	2300      	movs	r3, #0
   2088e:	9408      	str	r4, [sp, #32]
   20890:	469a      	mov	sl, r3
   20892:	9313      	str	r3, [sp, #76]	; 0x4c
   20894:	e762      	b.n	2075c <_svfprintf_r+0x230>
   20896:	2200      	movs	r2, #0
   20898:	3b30      	subs	r3, #48	; 0x30
   2089a:	0015      	movs	r5, r2
   2089c:	001a      	movs	r2, r3
   2089e:	0003      	movs	r3, r0
   208a0:	9407      	str	r4, [sp, #28]
   208a2:	0008      	movs	r0, r1
   208a4:	002c      	movs	r4, r5
   208a6:	469b      	mov	fp, r3
   208a8:	00a3      	lsls	r3, r4, #2
   208aa:	191c      	adds	r4, r3, r4
   208ac:	7803      	ldrb	r3, [r0, #0]
   208ae:	0064      	lsls	r4, r4, #1
   208b0:	1914      	adds	r4, r2, r4
   208b2:	001a      	movs	r2, r3
   208b4:	3101      	adds	r1, #1
   208b6:	3a30      	subs	r2, #48	; 0x30
   208b8:	0008      	movs	r0, r1
   208ba:	2a09      	cmp	r2, #9
   208bc:	d9f4      	bls.n	208a8 <_svfprintf_r+0x37c>
   208be:	940b      	str	r4, [sp, #44]	; 0x2c
   208c0:	4658      	mov	r0, fp
   208c2:	9c07      	ldr	r4, [sp, #28]
   208c4:	e697      	b.n	205f6 <_svfprintf_r+0xca>
   208c6:	2308      	movs	r3, #8
   208c8:	431c      	orrs	r4, r3
   208ca:	780b      	ldrb	r3, [r1, #0]
   208cc:	e692      	b.n	205f4 <_svfprintf_r+0xc8>
   208ce:	9312      	str	r3, [sp, #72]	; 0x48
   208d0:	2310      	movs	r3, #16
   208d2:	431c      	orrs	r4, r3
   208d4:	468b      	mov	fp, r1
   208d6:	06a3      	lsls	r3, r4, #26
   208d8:	d500      	bpl.n	208dc <_svfprintf_r+0x3b0>
   208da:	e17b      	b.n	20bd4 <_svfprintf_r+0x6a8>
   208dc:	06e3      	lsls	r3, r4, #27
   208de:	d501      	bpl.n	208e4 <_svfprintf_r+0x3b8>
   208e0:	f000 fc7e 	bl	211e0 <_svfprintf_r+0xcb4>
   208e4:	0663      	lsls	r3, r4, #25
   208e6:	d401      	bmi.n	208ec <_svfprintf_r+0x3c0>
   208e8:	f000 fc7a 	bl	211e0 <_svfprintf_r+0xcb4>
   208ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   208ee:	881a      	ldrh	r2, [r3, #0]
   208f0:	920c      	str	r2, [sp, #48]	; 0x30
   208f2:	2200      	movs	r2, #0
   208f4:	3304      	adds	r3, #4
   208f6:	930f      	str	r3, [sp, #60]	; 0x3c
   208f8:	2300      	movs	r3, #0
   208fa:	920d      	str	r2, [sp, #52]	; 0x34
   208fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   208fe:	2100      	movs	r1, #0
   20900:	a816      	add	r0, sp, #88	; 0x58
   20902:	77c1      	strb	r1, [r0, #31]
   20904:	4688      	mov	r8, r1
   20906:	4651      	mov	r1, sl
   20908:	3101      	adds	r1, #1
   2090a:	d000      	beq.n	2090e <_svfprintf_r+0x3e2>
   2090c:	e6ff      	b.n	2070e <_svfprintf_r+0x1e2>
   2090e:	2a00      	cmp	r2, #0
   20910:	d100      	bne.n	20914 <_svfprintf_r+0x3e8>
   20912:	e335      	b.n	20f80 <_svfprintf_r+0xa54>
   20914:	9408      	str	r4, [sp, #32]
   20916:	2b01      	cmp	r3, #1
   20918:	d100      	bne.n	2091c <_svfprintf_r+0x3f0>
   2091a:	e3e5      	b.n	210e8 <_svfprintf_r+0xbbc>
   2091c:	2b02      	cmp	r3, #2
   2091e:	d000      	beq.n	20922 <_svfprintf_r+0x3f6>
   20920:	e362      	b.n	20fe8 <_svfprintf_r+0xabc>
   20922:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   20924:	200f      	movs	r0, #15
   20926:	46a1      	mov	r9, r4
   20928:	46b4      	mov	ip, r6
   2092a:	ab32      	add	r3, sp, #200	; 0xc8
   2092c:	0019      	movs	r1, r3
   2092e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   20930:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20932:	0004      	movs	r4, r0
   20934:	464d      	mov	r5, r9
   20936:	4014      	ands	r4, r2
   20938:	5d2c      	ldrb	r4, [r5, r4]
   2093a:	071e      	lsls	r6, r3, #28
   2093c:	0915      	lsrs	r5, r2, #4
   2093e:	3901      	subs	r1, #1
   20940:	432e      	orrs	r6, r5
   20942:	700c      	strb	r4, [r1, #0]
   20944:	091c      	lsrs	r4, r3, #4
   20946:	0023      	movs	r3, r4
   20948:	0034      	movs	r4, r6
   2094a:	0032      	movs	r2, r6
   2094c:	431c      	orrs	r4, r3
   2094e:	d1f0      	bne.n	20932 <_svfprintf_r+0x406>
   20950:	920c      	str	r2, [sp, #48]	; 0x30
   20952:	930d      	str	r3, [sp, #52]	; 0x34
   20954:	ab32      	add	r3, sp, #200	; 0xc8
   20956:	1a5b      	subs	r3, r3, r1
   20958:	9111      	str	r1, [sp, #68]	; 0x44
   2095a:	4666      	mov	r6, ip
   2095c:	930e      	str	r3, [sp, #56]	; 0x38
   2095e:	e6f5      	b.n	2074c <_svfprintf_r+0x220>
   20960:	00026be4 	.word	0x00026be4
   20964:	00026d8c 	.word	0x00026d8c
   20968:	7fefffff 	.word	0x7fefffff
   2096c:	00026d48 	.word	0x00026d48
   20970:	9312      	str	r3, [sp, #72]	; 0x48
   20972:	2310      	movs	r3, #16
   20974:	431c      	orrs	r4, r3
   20976:	468b      	mov	fp, r1
   20978:	06a3      	lsls	r3, r4, #26
   2097a:	d500      	bpl.n	2097e <_svfprintf_r+0x452>
   2097c:	e111      	b.n	20ba2 <_svfprintf_r+0x676>
   2097e:	06e3      	lsls	r3, r4, #27
   20980:	d501      	bpl.n	20986 <_svfprintf_r+0x45a>
   20982:	f000 fc31 	bl	211e8 <_svfprintf_r+0xcbc>
   20986:	0663      	lsls	r3, r4, #25
   20988:	d401      	bmi.n	2098e <_svfprintf_r+0x462>
   2098a:	f000 fc2d 	bl	211e8 <_svfprintf_r+0xcbc>
   2098e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20990:	881a      	ldrh	r2, [r3, #0]
   20992:	920c      	str	r2, [sp, #48]	; 0x30
   20994:	2200      	movs	r2, #0
   20996:	3304      	adds	r3, #4
   20998:	920d      	str	r2, [sp, #52]	; 0x34
   2099a:	930f      	str	r3, [sp, #60]	; 0x3c
   2099c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2099e:	2301      	movs	r3, #1
   209a0:	e7ad      	b.n	208fe <_svfprintf_r+0x3d2>
   209a2:	468b      	mov	fp, r1
   209a4:	4641      	mov	r1, r8
   209a6:	9312      	str	r3, [sp, #72]	; 0x48
   209a8:	2900      	cmp	r1, #0
   209aa:	d001      	beq.n	209b0 <_svfprintf_r+0x484>
   209ac:	f001 f890 	bl	21ad0 <_svfprintf_r+0x15a4>
   209b0:	4bb8      	ldr	r3, [pc, #736]	; (20c94 <_svfprintf_r+0x768>)
   209b2:	9317      	str	r3, [sp, #92]	; 0x5c
   209b4:	06a3      	lsls	r3, r4, #26
   209b6:	d500      	bpl.n	209ba <_svfprintf_r+0x48e>
   209b8:	e0ab      	b.n	20b12 <_svfprintf_r+0x5e6>
   209ba:	06e3      	lsls	r3, r4, #27
   209bc:	d501      	bpl.n	209c2 <_svfprintf_r+0x496>
   209be:	f000 fc07 	bl	211d0 <_svfprintf_r+0xca4>
   209c2:	0663      	lsls	r3, r4, #25
   209c4:	d401      	bmi.n	209ca <_svfprintf_r+0x49e>
   209c6:	f000 fc03 	bl	211d0 <_svfprintf_r+0xca4>
   209ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   209cc:	881a      	ldrh	r2, [r3, #0]
   209ce:	920c      	str	r2, [sp, #48]	; 0x30
   209d0:	2200      	movs	r2, #0
   209d2:	3304      	adds	r3, #4
   209d4:	920d      	str	r2, [sp, #52]	; 0x34
   209d6:	930f      	str	r3, [sp, #60]	; 0x3c
   209d8:	07e3      	lsls	r3, r4, #31
   209da:	d400      	bmi.n	209de <_svfprintf_r+0x4b2>
   209dc:	e0a9      	b.n	20b32 <_svfprintf_r+0x606>
   209de:	990c      	ldr	r1, [sp, #48]	; 0x30
   209e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   209e2:	000b      	movs	r3, r1
   209e4:	4313      	orrs	r3, r2
   209e6:	001a      	movs	r2, r3
   209e8:	2302      	movs	r3, #2
   209ea:	2a00      	cmp	r2, #0
   209ec:	d100      	bne.n	209f0 <_svfprintf_r+0x4c4>
   209ee:	e786      	b.n	208fe <_svfprintf_r+0x3d2>
   209f0:	2030      	movs	r0, #48	; 0x30
   209f2:	a91e      	add	r1, sp, #120	; 0x78
   209f4:	7008      	strb	r0, [r1, #0]
   209f6:	2548      	movs	r5, #72	; 0x48
   209f8:	4668      	mov	r0, sp
   209fa:	1940      	adds	r0, r0, r5
   209fc:	7800      	ldrb	r0, [r0, #0]
   209fe:	431c      	orrs	r4, r3
   20a00:	7048      	strb	r0, [r1, #1]
   20a02:	e77c      	b.n	208fe <_svfprintf_r+0x3d2>
   20a04:	468b      	mov	fp, r1
   20a06:	4641      	mov	r1, r8
   20a08:	2900      	cmp	r1, #0
   20a0a:	d001      	beq.n	20a10 <_svfprintf_r+0x4e4>
   20a0c:	f001 f883 	bl	21b16 <_svfprintf_r+0x15ea>
   20a10:	06a3      	lsls	r3, r4, #26
   20a12:	d501      	bpl.n	20a18 <_svfprintf_r+0x4ec>
   20a14:	f000 fde9 	bl	215ea <_svfprintf_r+0x10be>
   20a18:	06e3      	lsls	r3, r4, #27
   20a1a:	d501      	bpl.n	20a20 <_svfprintf_r+0x4f4>
   20a1c:	f000 fd9b 	bl	21556 <_svfprintf_r+0x102a>
   20a20:	0663      	lsls	r3, r4, #25
   20a22:	d401      	bmi.n	20a28 <_svfprintf_r+0x4fc>
   20a24:	f000 fd97 	bl	21556 <_svfprintf_r+0x102a>
   20a28:	4669      	mov	r1, sp
   20a2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20a2c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
   20a2e:	681a      	ldr	r2, [r3, #0]
   20a30:	3304      	adds	r3, #4
   20a32:	9207      	str	r2, [sp, #28]
   20a34:	8011      	strh	r1, [r2, #0]
   20a36:	930f      	str	r3, [sp, #60]	; 0x3c
   20a38:	e5a3      	b.n	20582 <_svfprintf_r+0x56>
   20a3a:	464b      	mov	r3, r9
   20a3c:	431c      	orrs	r4, r3
   20a3e:	780b      	ldrb	r3, [r1, #0]
   20a40:	e5d8      	b.n	205f4 <_svfprintf_r+0xc8>
   20a42:	9312      	str	r3, [sp, #72]	; 0x48
   20a44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20a46:	468b      	mov	fp, r1
   20a48:	1d1d      	adds	r5, r3, #4
   20a4a:	681b      	ldr	r3, [r3, #0]
   20a4c:	a916      	add	r1, sp, #88	; 0x58
   20a4e:	001a      	movs	r2, r3
   20a50:	9311      	str	r3, [sp, #68]	; 0x44
   20a52:	2300      	movs	r3, #0
   20a54:	77cb      	strb	r3, [r1, #31]
   20a56:	2a00      	cmp	r2, #0
   20a58:	d101      	bne.n	20a5e <_svfprintf_r+0x532>
   20a5a:	f000 fefb 	bl	21854 <_svfprintf_r+0x1328>
   20a5e:	4653      	mov	r3, sl
   20a60:	3301      	adds	r3, #1
   20a62:	d101      	bne.n	20a68 <_svfprintf_r+0x53c>
   20a64:	f000 fe38 	bl	216d8 <_svfprintf_r+0x11ac>
   20a68:	4652      	mov	r2, sl
   20a6a:	2100      	movs	r1, #0
   20a6c:	9811      	ldr	r0, [sp, #68]	; 0x44
   20a6e:	f002 fbc3 	bl	231f8 <memchr>
   20a72:	2800      	cmp	r0, #0
   20a74:	d101      	bne.n	20a7a <_svfprintf_r+0x54e>
   20a76:	f000 ff54 	bl	21922 <_svfprintf_r+0x13f6>
   20a7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   20a7c:	1ac3      	subs	r3, r0, r3
   20a7e:	001a      	movs	r2, r3
   20a80:	930e      	str	r3, [sp, #56]	; 0x38
   20a82:	43db      	mvns	r3, r3
   20a84:	17db      	asrs	r3, r3, #31
   20a86:	401a      	ands	r2, r3
   20a88:	ab16      	add	r3, sp, #88	; 0x58
   20a8a:	7fdb      	ldrb	r3, [r3, #31]
   20a8c:	9207      	str	r2, [sp, #28]
   20a8e:	4698      	mov	r8, r3
   20a90:	2300      	movs	r3, #0
   20a92:	950f      	str	r5, [sp, #60]	; 0x3c
   20a94:	9408      	str	r4, [sp, #32]
   20a96:	469a      	mov	sl, r3
   20a98:	9313      	str	r3, [sp, #76]	; 0x4c
   20a9a:	e65f      	b.n	2075c <_svfprintf_r+0x230>
   20a9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   20a9e:	9312      	str	r3, [sp, #72]	; 0x48
   20aa0:	6813      	ldr	r3, [r2, #0]
   20aa2:	ad28      	add	r5, sp, #160	; 0xa0
   20aa4:	9307      	str	r3, [sp, #28]
   20aa6:	466b      	mov	r3, sp
   20aa8:	7f1b      	ldrb	r3, [r3, #28]
   20aaa:	468b      	mov	fp, r1
   20aac:	702b      	strb	r3, [r5, #0]
   20aae:	2300      	movs	r3, #0
   20ab0:	a916      	add	r1, sp, #88	; 0x58
   20ab2:	77cb      	strb	r3, [r1, #31]
   20ab4:	0013      	movs	r3, r2
   20ab6:	3304      	adds	r3, #4
   20ab8:	930f      	str	r3, [sp, #60]	; 0x3c
   20aba:	2300      	movs	r3, #0
   20abc:	9408      	str	r4, [sp, #32]
   20abe:	4698      	mov	r8, r3
   20ac0:	3301      	adds	r3, #1
   20ac2:	9307      	str	r3, [sp, #28]
   20ac4:	930e      	str	r3, [sp, #56]	; 0x38
   20ac6:	2300      	movs	r3, #0
   20ac8:	9511      	str	r5, [sp, #68]	; 0x44
   20aca:	469a      	mov	sl, r3
   20acc:	9313      	str	r3, [sp, #76]	; 0x4c
   20ace:	e64b      	b.n	20768 <_svfprintf_r+0x23c>
   20ad0:	468b      	mov	fp, r1
   20ad2:	4641      	mov	r1, r8
   20ad4:	9312      	str	r3, [sp, #72]	; 0x48
   20ad6:	2900      	cmp	r1, #0
   20ad8:	d100      	bne.n	20adc <_svfprintf_r+0x5b0>
   20ada:	e5f4      	b.n	206c6 <_svfprintf_r+0x19a>
   20adc:	ab16      	add	r3, sp, #88	; 0x58
   20ade:	77d8      	strb	r0, [r3, #31]
   20ae0:	e5f1      	b.n	206c6 <_svfprintf_r+0x19a>
   20ae2:	4663      	mov	r3, ip
   20ae4:	431c      	orrs	r4, r3
   20ae6:	780b      	ldrb	r3, [r1, #0]
   20ae8:	e584      	b.n	205f4 <_svfprintf_r+0xc8>
   20aea:	780b      	ldrb	r3, [r1, #0]
   20aec:	2b6c      	cmp	r3, #108	; 0x6c
   20aee:	d101      	bne.n	20af4 <_svfprintf_r+0x5c8>
   20af0:	f000 fd86 	bl	21600 <_svfprintf_r+0x10d4>
   20af4:	2210      	movs	r2, #16
   20af6:	4314      	orrs	r4, r2
   20af8:	e57c      	b.n	205f4 <_svfprintf_r+0xc8>
   20afa:	468b      	mov	fp, r1
   20afc:	4641      	mov	r1, r8
   20afe:	9312      	str	r3, [sp, #72]	; 0x48
   20b00:	2900      	cmp	r1, #0
   20b02:	d001      	beq.n	20b08 <_svfprintf_r+0x5dc>
   20b04:	f000 ffe8 	bl	21ad8 <_svfprintf_r+0x15ac>
   20b08:	4b63      	ldr	r3, [pc, #396]	; (20c98 <_svfprintf_r+0x76c>)
   20b0a:	9317      	str	r3, [sp, #92]	; 0x5c
   20b0c:	06a3      	lsls	r3, r4, #26
   20b0e:	d400      	bmi.n	20b12 <_svfprintf_r+0x5e6>
   20b10:	e753      	b.n	209ba <_svfprintf_r+0x48e>
   20b12:	2207      	movs	r2, #7
   20b14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20b16:	3307      	adds	r3, #7
   20b18:	4393      	bics	r3, r2
   20b1a:	3201      	adds	r2, #1
   20b1c:	4694      	mov	ip, r2
   20b1e:	449c      	add	ip, r3
   20b20:	4662      	mov	r2, ip
   20b22:	920f      	str	r2, [sp, #60]	; 0x3c
   20b24:	681a      	ldr	r2, [r3, #0]
   20b26:	685b      	ldr	r3, [r3, #4]
   20b28:	920c      	str	r2, [sp, #48]	; 0x30
   20b2a:	930d      	str	r3, [sp, #52]	; 0x34
   20b2c:	07e3      	lsls	r3, r4, #31
   20b2e:	d500      	bpl.n	20b32 <_svfprintf_r+0x606>
   20b30:	e755      	b.n	209de <_svfprintf_r+0x4b2>
   20b32:	990c      	ldr	r1, [sp, #48]	; 0x30
   20b34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   20b36:	0008      	movs	r0, r1
   20b38:	4310      	orrs	r0, r2
   20b3a:	2302      	movs	r3, #2
   20b3c:	0002      	movs	r2, r0
   20b3e:	e6de      	b.n	208fe <_svfprintf_r+0x3d2>
   20b40:	468b      	mov	fp, r1
   20b42:	990f      	ldr	r1, [sp, #60]	; 0x3c
   20b44:	2230      	movs	r2, #48	; 0x30
   20b46:	680b      	ldr	r3, [r1, #0]
   20b48:	930c      	str	r3, [sp, #48]	; 0x30
   20b4a:	2300      	movs	r3, #0
   20b4c:	930d      	str	r3, [sp, #52]	; 0x34
   20b4e:	3302      	adds	r3, #2
   20b50:	431c      	orrs	r4, r3
   20b52:	ab1e      	add	r3, sp, #120	; 0x78
   20b54:	701a      	strb	r2, [r3, #0]
   20b56:	3248      	adds	r2, #72	; 0x48
   20b58:	705a      	strb	r2, [r3, #1]
   20b5a:	000b      	movs	r3, r1
   20b5c:	3304      	adds	r3, #4
   20b5e:	930f      	str	r3, [sp, #60]	; 0x3c
   20b60:	4b4d      	ldr	r3, [pc, #308]	; (20c98 <_svfprintf_r+0x76c>)
   20b62:	9212      	str	r2, [sp, #72]	; 0x48
   20b64:	9317      	str	r3, [sp, #92]	; 0x5c
   20b66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   20b68:	2302      	movs	r3, #2
   20b6a:	e6c8      	b.n	208fe <_svfprintf_r+0x3d2>
   20b6c:	2301      	movs	r3, #1
   20b6e:	431c      	orrs	r4, r3
   20b70:	780b      	ldrb	r3, [r1, #0]
   20b72:	e53f      	b.n	205f4 <_svfprintf_r+0xc8>
   20b74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20b76:	1d1a      	adds	r2, r3, #4
   20b78:	681b      	ldr	r3, [r3, #0]
   20b7a:	930b      	str	r3, [sp, #44]	; 0x2c
   20b7c:	2b00      	cmp	r3, #0
   20b7e:	da00      	bge.n	20b82 <_svfprintf_r+0x656>
   20b80:	e542      	b.n	20608 <_svfprintf_r+0xdc>
   20b82:	780b      	ldrb	r3, [r1, #0]
   20b84:	920f      	str	r2, [sp, #60]	; 0x3c
   20b86:	e535      	b.n	205f4 <_svfprintf_r+0xc8>
   20b88:	780b      	ldrb	r3, [r1, #0]
   20b8a:	2800      	cmp	r0, #0
   20b8c:	d000      	beq.n	20b90 <_svfprintf_r+0x664>
   20b8e:	e531      	b.n	205f4 <_svfprintf_r+0xc8>
   20b90:	2201      	movs	r2, #1
   20b92:	3020      	adds	r0, #32
   20b94:	4690      	mov	r8, r2
   20b96:	e52d      	b.n	205f4 <_svfprintf_r+0xc8>
   20b98:	468b      	mov	fp, r1
   20b9a:	9312      	str	r3, [sp, #72]	; 0x48
   20b9c:	06a3      	lsls	r3, r4, #26
   20b9e:	d400      	bmi.n	20ba2 <_svfprintf_r+0x676>
   20ba0:	e6ed      	b.n	2097e <_svfprintf_r+0x452>
   20ba2:	2207      	movs	r2, #7
   20ba4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20ba6:	3307      	adds	r3, #7
   20ba8:	4393      	bics	r3, r2
   20baa:	3201      	adds	r2, #1
   20bac:	4694      	mov	ip, r2
   20bae:	449c      	add	ip, r3
   20bb0:	4662      	mov	r2, ip
   20bb2:	920f      	str	r2, [sp, #60]	; 0x3c
   20bb4:	681a      	ldr	r2, [r3, #0]
   20bb6:	685b      	ldr	r3, [r3, #4]
   20bb8:	0011      	movs	r1, r2
   20bba:	001a      	movs	r2, r3
   20bbc:	0008      	movs	r0, r1
   20bbe:	4310      	orrs	r0, r2
   20bc0:	910c      	str	r1, [sp, #48]	; 0x30
   20bc2:	920d      	str	r2, [sp, #52]	; 0x34
   20bc4:	2301      	movs	r3, #1
   20bc6:	0002      	movs	r2, r0
   20bc8:	e699      	b.n	208fe <_svfprintf_r+0x3d2>
   20bca:	468b      	mov	fp, r1
   20bcc:	9312      	str	r3, [sp, #72]	; 0x48
   20bce:	06a3      	lsls	r3, r4, #26
   20bd0:	d400      	bmi.n	20bd4 <_svfprintf_r+0x6a8>
   20bd2:	e683      	b.n	208dc <_svfprintf_r+0x3b0>
   20bd4:	2207      	movs	r2, #7
   20bd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20bd8:	3307      	adds	r3, #7
   20bda:	4393      	bics	r3, r2
   20bdc:	3201      	adds	r2, #1
   20bde:	4694      	mov	ip, r2
   20be0:	449c      	add	ip, r3
   20be2:	4662      	mov	r2, ip
   20be4:	920f      	str	r2, [sp, #60]	; 0x3c
   20be6:	681a      	ldr	r2, [r3, #0]
   20be8:	685b      	ldr	r3, [r3, #4]
   20bea:	0011      	movs	r1, r2
   20bec:	001a      	movs	r2, r3
   20bee:	0008      	movs	r0, r1
   20bf0:	4310      	orrs	r0, r2
   20bf2:	910c      	str	r1, [sp, #48]	; 0x30
   20bf4:	920d      	str	r2, [sp, #52]	; 0x34
   20bf6:	2300      	movs	r3, #0
   20bf8:	0002      	movs	r2, r0
   20bfa:	e680      	b.n	208fe <_svfprintf_r+0x3d2>
   20bfc:	468b      	mov	fp, r1
   20bfe:	4641      	mov	r1, r8
   20c00:	9312      	str	r3, [sp, #72]	; 0x48
   20c02:	2900      	cmp	r1, #0
   20c04:	d001      	beq.n	20c0a <_svfprintf_r+0x6de>
   20c06:	f000 ff7f 	bl	21b08 <_svfprintf_r+0x15dc>
   20c0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   20c0c:	2b00      	cmp	r3, #0
   20c0e:	d100      	bne.n	20c12 <_svfprintf_r+0x6e6>
   20c10:	e50b      	b.n	2062a <_svfprintf_r+0xfe>
   20c12:	ad28      	add	r5, sp, #160	; 0xa0
   20c14:	702b      	strb	r3, [r5, #0]
   20c16:	2300      	movs	r3, #0
   20c18:	aa16      	add	r2, sp, #88	; 0x58
   20c1a:	77d3      	strb	r3, [r2, #31]
   20c1c:	9408      	str	r4, [sp, #32]
   20c1e:	e74e      	b.n	20abe <_svfprintf_r+0x592>
   20c20:	68bc      	ldr	r4, [r7, #8]
   20c22:	4643      	mov	r3, r8
   20c24:	2b00      	cmp	r3, #0
   20c26:	d00f      	beq.n	20c48 <_svfprintf_r+0x71c>
   20c28:	aa16      	add	r2, sp, #88	; 0x58
   20c2a:	231f      	movs	r3, #31
   20c2c:	4694      	mov	ip, r2
   20c2e:	4463      	add	r3, ip
   20c30:	6033      	str	r3, [r6, #0]
   20c32:	2301      	movs	r3, #1
   20c34:	6073      	str	r3, [r6, #4]
   20c36:	687b      	ldr	r3, [r7, #4]
   20c38:	3401      	adds	r4, #1
   20c3a:	3301      	adds	r3, #1
   20c3c:	60bc      	str	r4, [r7, #8]
   20c3e:	607b      	str	r3, [r7, #4]
   20c40:	2b07      	cmp	r3, #7
   20c42:	dd00      	ble.n	20c46 <_svfprintf_r+0x71a>
   20c44:	e1b3      	b.n	20fae <_svfprintf_r+0xa82>
   20c46:	3608      	adds	r6, #8
   20c48:	464b      	mov	r3, r9
   20c4a:	2b00      	cmp	r3, #0
   20c4c:	d00c      	beq.n	20c68 <_svfprintf_r+0x73c>
   20c4e:	ab1e      	add	r3, sp, #120	; 0x78
   20c50:	6033      	str	r3, [r6, #0]
   20c52:	2302      	movs	r3, #2
   20c54:	6073      	str	r3, [r6, #4]
   20c56:	687b      	ldr	r3, [r7, #4]
   20c58:	3402      	adds	r4, #2
   20c5a:	3301      	adds	r3, #1
   20c5c:	60bc      	str	r4, [r7, #8]
   20c5e:	607b      	str	r3, [r7, #4]
   20c60:	2b07      	cmp	r3, #7
   20c62:	dd00      	ble.n	20c66 <_svfprintf_r+0x73a>
   20c64:	e1af      	b.n	20fc6 <_svfprintf_r+0xa9a>
   20c66:	3608      	adds	r6, #8
   20c68:	9b10      	ldr	r3, [sp, #64]	; 0x40
   20c6a:	2b80      	cmp	r3, #128	; 0x80
   20c6c:	d100      	bne.n	20c70 <_svfprintf_r+0x744>
   20c6e:	e120      	b.n	20eb2 <_svfprintf_r+0x986>
   20c70:	4653      	mov	r3, sl
   20c72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   20c74:	1a9d      	subs	r5, r3, r2
   20c76:	2d00      	cmp	r5, #0
   20c78:	dd3c      	ble.n	20cf4 <_svfprintf_r+0x7c8>
   20c7a:	4a08      	ldr	r2, [pc, #32]	; (20c9c <_svfprintf_r+0x770>)
   20c7c:	687b      	ldr	r3, [r7, #4]
   20c7e:	4691      	mov	r9, r2
   20c80:	2d10      	cmp	r5, #16
   20c82:	dd2c      	ble.n	20cde <_svfprintf_r+0x7b2>
   20c84:	2210      	movs	r2, #16
   20c86:	0021      	movs	r1, r4
   20c88:	4692      	mov	sl, r2
   20c8a:	9c09      	ldr	r4, [sp, #36]	; 0x24
   20c8c:	0032      	movs	r2, r6
   20c8e:	002e      	movs	r6, r5
   20c90:	464d      	mov	r5, r9
   20c92:	e009      	b.n	20ca8 <_svfprintf_r+0x77c>
   20c94:	00026d58 	.word	0x00026d58
   20c98:	00026d6c 	.word	0x00026d6c
   20c9c:	00026d9c 	.word	0x00026d9c
   20ca0:	3e10      	subs	r6, #16
   20ca2:	3208      	adds	r2, #8
   20ca4:	2e10      	cmp	r6, #16
   20ca6:	dd16      	ble.n	20cd6 <_svfprintf_r+0x7aa>
   20ca8:	4650      	mov	r0, sl
   20caa:	3110      	adds	r1, #16
   20cac:	3301      	adds	r3, #1
   20cae:	6015      	str	r5, [r2, #0]
   20cb0:	6050      	str	r0, [r2, #4]
   20cb2:	60b9      	str	r1, [r7, #8]
   20cb4:	607b      	str	r3, [r7, #4]
   20cb6:	2b07      	cmp	r3, #7
   20cb8:	ddf2      	ble.n	20ca0 <_svfprintf_r+0x774>
   20cba:	003a      	movs	r2, r7
   20cbc:	9906      	ldr	r1, [sp, #24]
   20cbe:	0020      	movs	r0, r4
   20cc0:	f002 fed8 	bl	23a74 <__ssprint_r>
   20cc4:	2800      	cmp	r0, #0
   20cc6:	d000      	beq.n	20cca <_svfprintf_r+0x79e>
   20cc8:	e4b7      	b.n	2063a <_svfprintf_r+0x10e>
   20cca:	3e10      	subs	r6, #16
   20ccc:	68b9      	ldr	r1, [r7, #8]
   20cce:	687b      	ldr	r3, [r7, #4]
   20cd0:	aa32      	add	r2, sp, #200	; 0xc8
   20cd2:	2e10      	cmp	r6, #16
   20cd4:	dce8      	bgt.n	20ca8 <_svfprintf_r+0x77c>
   20cd6:	46a9      	mov	r9, r5
   20cd8:	000c      	movs	r4, r1
   20cda:	0035      	movs	r5, r6
   20cdc:	0016      	movs	r6, r2
   20cde:	464a      	mov	r2, r9
   20ce0:	1964      	adds	r4, r4, r5
   20ce2:	3301      	adds	r3, #1
   20ce4:	6032      	str	r2, [r6, #0]
   20ce6:	6075      	str	r5, [r6, #4]
   20ce8:	60bc      	str	r4, [r7, #8]
   20cea:	607b      	str	r3, [r7, #4]
   20cec:	2b07      	cmp	r3, #7
   20cee:	dd00      	ble.n	20cf2 <_svfprintf_r+0x7c6>
   20cf0:	e151      	b.n	20f96 <_svfprintf_r+0xa6a>
   20cf2:	3608      	adds	r6, #8
   20cf4:	9b08      	ldr	r3, [sp, #32]
   20cf6:	05db      	lsls	r3, r3, #23
   20cf8:	d500      	bpl.n	20cfc <_svfprintf_r+0x7d0>
   20cfa:	e0b6      	b.n	20e6a <_svfprintf_r+0x93e>
   20cfc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   20cfe:	6033      	str	r3, [r6, #0]
   20d00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20d02:	469c      	mov	ip, r3
   20d04:	6073      	str	r3, [r6, #4]
   20d06:	687b      	ldr	r3, [r7, #4]
   20d08:	4464      	add	r4, ip
   20d0a:	3301      	adds	r3, #1
   20d0c:	60bc      	str	r4, [r7, #8]
   20d0e:	607b      	str	r3, [r7, #4]
   20d10:	2b07      	cmp	r3, #7
   20d12:	dd00      	ble.n	20d16 <_svfprintf_r+0x7ea>
   20d14:	e09d      	b.n	20e52 <_svfprintf_r+0x926>
   20d16:	3608      	adds	r6, #8
   20d18:	9b08      	ldr	r3, [sp, #32]
   20d1a:	075b      	lsls	r3, r3, #29
   20d1c:	d541      	bpl.n	20da2 <_svfprintf_r+0x876>
   20d1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20d20:	9a07      	ldr	r2, [sp, #28]
   20d22:	1a9d      	subs	r5, r3, r2
   20d24:	2d00      	cmp	r5, #0
   20d26:	dd3c      	ble.n	20da2 <_svfprintf_r+0x876>
   20d28:	4ac4      	ldr	r2, [pc, #784]	; (2103c <_svfprintf_r+0xb10>)
   20d2a:	687b      	ldr	r3, [r7, #4]
   20d2c:	4690      	mov	r8, r2
   20d2e:	2d10      	cmp	r5, #16
   20d30:	dd26      	ble.n	20d80 <_svfprintf_r+0x854>
   20d32:	2210      	movs	r2, #16
   20d34:	0021      	movs	r1, r4
   20d36:	4691      	mov	r9, r2
   20d38:	9c09      	ldr	r4, [sp, #36]	; 0x24
   20d3a:	0032      	movs	r2, r6
   20d3c:	002e      	movs	r6, r5
   20d3e:	9d06      	ldr	r5, [sp, #24]
   20d40:	e003      	b.n	20d4a <_svfprintf_r+0x81e>
   20d42:	3e10      	subs	r6, #16
   20d44:	3208      	adds	r2, #8
   20d46:	2e10      	cmp	r6, #16
   20d48:	dd17      	ble.n	20d7a <_svfprintf_r+0x84e>
   20d4a:	48bc      	ldr	r0, [pc, #752]	; (2103c <_svfprintf_r+0xb10>)
   20d4c:	3110      	adds	r1, #16
   20d4e:	6010      	str	r0, [r2, #0]
   20d50:	4648      	mov	r0, r9
   20d52:	3301      	adds	r3, #1
   20d54:	6050      	str	r0, [r2, #4]
   20d56:	60b9      	str	r1, [r7, #8]
   20d58:	607b      	str	r3, [r7, #4]
   20d5a:	2b07      	cmp	r3, #7
   20d5c:	ddf1      	ble.n	20d42 <_svfprintf_r+0x816>
   20d5e:	003a      	movs	r2, r7
   20d60:	0029      	movs	r1, r5
   20d62:	0020      	movs	r0, r4
   20d64:	f002 fe86 	bl	23a74 <__ssprint_r>
   20d68:	2800      	cmp	r0, #0
   20d6a:	d000      	beq.n	20d6e <_svfprintf_r+0x842>
   20d6c:	e465      	b.n	2063a <_svfprintf_r+0x10e>
   20d6e:	3e10      	subs	r6, #16
   20d70:	68b9      	ldr	r1, [r7, #8]
   20d72:	687b      	ldr	r3, [r7, #4]
   20d74:	aa32      	add	r2, sp, #200	; 0xc8
   20d76:	2e10      	cmp	r6, #16
   20d78:	dce7      	bgt.n	20d4a <_svfprintf_r+0x81e>
   20d7a:	0035      	movs	r5, r6
   20d7c:	000c      	movs	r4, r1
   20d7e:	0016      	movs	r6, r2
   20d80:	4642      	mov	r2, r8
   20d82:	1964      	adds	r4, r4, r5
   20d84:	3301      	adds	r3, #1
   20d86:	c624      	stmia	r6!, {r2, r5}
   20d88:	60bc      	str	r4, [r7, #8]
   20d8a:	607b      	str	r3, [r7, #4]
   20d8c:	2b07      	cmp	r3, #7
   20d8e:	dd08      	ble.n	20da2 <_svfprintf_r+0x876>
   20d90:	003a      	movs	r2, r7
   20d92:	9906      	ldr	r1, [sp, #24]
   20d94:	9809      	ldr	r0, [sp, #36]	; 0x24
   20d96:	f002 fe6d 	bl	23a74 <__ssprint_r>
   20d9a:	2800      	cmp	r0, #0
   20d9c:	d000      	beq.n	20da0 <_svfprintf_r+0x874>
   20d9e:	e44c      	b.n	2063a <_svfprintf_r+0x10e>
   20da0:	68bc      	ldr	r4, [r7, #8]
   20da2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20da4:	9907      	ldr	r1, [sp, #28]
   20da6:	428b      	cmp	r3, r1
   20da8:	da00      	bge.n	20dac <_svfprintf_r+0x880>
   20daa:	000b      	movs	r3, r1
   20dac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20dae:	4694      	mov	ip, r2
   20db0:	449c      	add	ip, r3
   20db2:	4663      	mov	r3, ip
   20db4:	930a      	str	r3, [sp, #40]	; 0x28
   20db6:	2c00      	cmp	r4, #0
   20db8:	d000      	beq.n	20dbc <_svfprintf_r+0x890>
   20dba:	e0d6      	b.n	20f6a <_svfprintf_r+0xa3e>
   20dbc:	2300      	movs	r3, #0
   20dbe:	ae32      	add	r6, sp, #200	; 0xc8
   20dc0:	607b      	str	r3, [r7, #4]
   20dc2:	f7ff fbde 	bl	20582 <_svfprintf_r+0x56>
   20dc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   20dc8:	2b01      	cmp	r3, #1
   20dca:	dc00      	bgt.n	20dce <_svfprintf_r+0x8a2>
   20dcc:	e0ae      	b.n	20f2c <_svfprintf_r+0xa00>
   20dce:	9b11      	ldr	r3, [sp, #68]	; 0x44
   20dd0:	3401      	adds	r4, #1
   20dd2:	6033      	str	r3, [r6, #0]
   20dd4:	2301      	movs	r3, #1
   20dd6:	6073      	str	r3, [r6, #4]
   20dd8:	687b      	ldr	r3, [r7, #4]
   20dda:	60bc      	str	r4, [r7, #8]
   20ddc:	3301      	adds	r3, #1
   20dde:	607b      	str	r3, [r7, #4]
   20de0:	2b07      	cmp	r3, #7
   20de2:	dd00      	ble.n	20de6 <_svfprintf_r+0x8ba>
   20de4:	e2df      	b.n	213a6 <_svfprintf_r+0xe7a>
   20de6:	3608      	adds	r6, #8
   20de8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   20dea:	3301      	adds	r3, #1
   20dec:	6032      	str	r2, [r6, #0]
   20dee:	9a18      	ldr	r2, [sp, #96]	; 0x60
   20df0:	4698      	mov	r8, r3
   20df2:	4694      	mov	ip, r2
   20df4:	4464      	add	r4, ip
   20df6:	6072      	str	r2, [r6, #4]
   20df8:	60bc      	str	r4, [r7, #8]
   20dfa:	607b      	str	r3, [r7, #4]
   20dfc:	2b07      	cmp	r3, #7
   20dfe:	dd00      	ble.n	20e02 <_svfprintf_r+0x8d6>
   20e00:	e2de      	b.n	213c0 <_svfprintf_r+0xe94>
   20e02:	3608      	adds	r6, #8
   20e04:	2200      	movs	r2, #0
   20e06:	2300      	movs	r3, #0
   20e08:	9816      	ldr	r0, [sp, #88]	; 0x58
   20e0a:	9915      	ldr	r1, [sp, #84]	; 0x54
   20e0c:	f7fc f90c 	bl	1d028 <__aeabi_dcmpeq>
   20e10:	2800      	cmp	r0, #0
   20e12:	d000      	beq.n	20e16 <_svfprintf_r+0x8ea>
   20e14:	e1a4      	b.n	21160 <_svfprintf_r+0xc34>
   20e16:	9d11      	ldr	r5, [sp, #68]	; 0x44
   20e18:	9b14      	ldr	r3, [sp, #80]	; 0x50
   20e1a:	3501      	adds	r5, #1
   20e1c:	3b01      	subs	r3, #1
   20e1e:	6035      	str	r5, [r6, #0]
   20e20:	6073      	str	r3, [r6, #4]
   20e22:	18e4      	adds	r4, r4, r3
   20e24:	2301      	movs	r3, #1
   20e26:	469c      	mov	ip, r3
   20e28:	44e0      	add	r8, ip
   20e2a:	4643      	mov	r3, r8
   20e2c:	60bc      	str	r4, [r7, #8]
   20e2e:	607b      	str	r3, [r7, #4]
   20e30:	2b07      	cmp	r3, #7
   20e32:	dd00      	ble.n	20e36 <_svfprintf_r+0x90a>
   20e34:	e08b      	b.n	20f4e <_svfprintf_r+0xa22>
   20e36:	3608      	adds	r6, #8
   20e38:	ab21      	add	r3, sp, #132	; 0x84
   20e3a:	6033      	str	r3, [r6, #0]
   20e3c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   20e3e:	469c      	mov	ip, r3
   20e40:	6073      	str	r3, [r6, #4]
   20e42:	4643      	mov	r3, r8
   20e44:	4464      	add	r4, ip
   20e46:	3301      	adds	r3, #1
   20e48:	60bc      	str	r4, [r7, #8]
   20e4a:	607b      	str	r3, [r7, #4]
   20e4c:	2b07      	cmp	r3, #7
   20e4e:	dc00      	bgt.n	20e52 <_svfprintf_r+0x926>
   20e50:	e761      	b.n	20d16 <_svfprintf_r+0x7ea>
   20e52:	003a      	movs	r2, r7
   20e54:	9906      	ldr	r1, [sp, #24]
   20e56:	9809      	ldr	r0, [sp, #36]	; 0x24
   20e58:	f002 fe0c 	bl	23a74 <__ssprint_r>
   20e5c:	2800      	cmp	r0, #0
   20e5e:	d001      	beq.n	20e64 <_svfprintf_r+0x938>
   20e60:	f7ff fbeb 	bl	2063a <_svfprintf_r+0x10e>
   20e64:	68bc      	ldr	r4, [r7, #8]
   20e66:	ae32      	add	r6, sp, #200	; 0xc8
   20e68:	e756      	b.n	20d18 <_svfprintf_r+0x7ec>
   20e6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   20e6c:	2b65      	cmp	r3, #101	; 0x65
   20e6e:	ddaa      	ble.n	20dc6 <_svfprintf_r+0x89a>
   20e70:	2200      	movs	r2, #0
   20e72:	2300      	movs	r3, #0
   20e74:	9816      	ldr	r0, [sp, #88]	; 0x58
   20e76:	9915      	ldr	r1, [sp, #84]	; 0x54
   20e78:	f7fc f8d6 	bl	1d028 <__aeabi_dcmpeq>
   20e7c:	2800      	cmp	r0, #0
   20e7e:	d100      	bne.n	20e82 <_svfprintf_r+0x956>
   20e80:	e0e2      	b.n	21048 <_svfprintf_r+0xb1c>
   20e82:	4b6f      	ldr	r3, [pc, #444]	; (21040 <_svfprintf_r+0xb14>)
   20e84:	3401      	adds	r4, #1
   20e86:	6033      	str	r3, [r6, #0]
   20e88:	2301      	movs	r3, #1
   20e8a:	6073      	str	r3, [r6, #4]
   20e8c:	687b      	ldr	r3, [r7, #4]
   20e8e:	60bc      	str	r4, [r7, #8]
   20e90:	3301      	adds	r3, #1
   20e92:	607b      	str	r3, [r7, #4]
   20e94:	2b07      	cmp	r3, #7
   20e96:	dd00      	ble.n	20e9a <_svfprintf_r+0x96e>
   20e98:	e366      	b.n	21568 <_svfprintf_r+0x103c>
   20e9a:	3608      	adds	r6, #8
   20e9c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   20e9e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   20ea0:	4293      	cmp	r3, r2
   20ea2:	da00      	bge.n	20ea6 <_svfprintf_r+0x97a>
   20ea4:	e1a4      	b.n	211f0 <_svfprintf_r+0xcc4>
   20ea6:	9b08      	ldr	r3, [sp, #32]
   20ea8:	07db      	lsls	r3, r3, #31
   20eaa:	d500      	bpl.n	20eae <_svfprintf_r+0x982>
   20eac:	e1a0      	b.n	211f0 <_svfprintf_r+0xcc4>
   20eae:	68bc      	ldr	r4, [r7, #8]
   20eb0:	e732      	b.n	20d18 <_svfprintf_r+0x7ec>
   20eb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20eb4:	9a07      	ldr	r2, [sp, #28]
   20eb6:	1a9d      	subs	r5, r3, r2
   20eb8:	2d00      	cmp	r5, #0
   20eba:	dc00      	bgt.n	20ebe <_svfprintf_r+0x992>
   20ebc:	e6d8      	b.n	20c70 <_svfprintf_r+0x744>
   20ebe:	4a61      	ldr	r2, [pc, #388]	; (21044 <_svfprintf_r+0xb18>)
   20ec0:	687b      	ldr	r3, [r7, #4]
   20ec2:	4691      	mov	r9, r2
   20ec4:	2d10      	cmp	r5, #16
   20ec6:	dd25      	ble.n	20f14 <_svfprintf_r+0x9e8>
   20ec8:	2210      	movs	r2, #16
   20eca:	0021      	movs	r1, r4
   20ecc:	4690      	mov	r8, r2
   20ece:	9c09      	ldr	r4, [sp, #36]	; 0x24
   20ed0:	0032      	movs	r2, r6
   20ed2:	464e      	mov	r6, r9
   20ed4:	e003      	b.n	20ede <_svfprintf_r+0x9b2>
   20ed6:	3d10      	subs	r5, #16
   20ed8:	3208      	adds	r2, #8
   20eda:	2d10      	cmp	r5, #16
   20edc:	dd17      	ble.n	20f0e <_svfprintf_r+0x9e2>
   20ede:	4640      	mov	r0, r8
   20ee0:	3110      	adds	r1, #16
   20ee2:	3301      	adds	r3, #1
   20ee4:	6016      	str	r6, [r2, #0]
   20ee6:	6050      	str	r0, [r2, #4]
   20ee8:	60b9      	str	r1, [r7, #8]
   20eea:	607b      	str	r3, [r7, #4]
   20eec:	2b07      	cmp	r3, #7
   20eee:	ddf2      	ble.n	20ed6 <_svfprintf_r+0x9aa>
   20ef0:	003a      	movs	r2, r7
   20ef2:	9906      	ldr	r1, [sp, #24]
   20ef4:	0020      	movs	r0, r4
   20ef6:	f002 fdbd 	bl	23a74 <__ssprint_r>
   20efa:	2800      	cmp	r0, #0
   20efc:	d001      	beq.n	20f02 <_svfprintf_r+0x9d6>
   20efe:	f7ff fb9c 	bl	2063a <_svfprintf_r+0x10e>
   20f02:	3d10      	subs	r5, #16
   20f04:	68b9      	ldr	r1, [r7, #8]
   20f06:	687b      	ldr	r3, [r7, #4]
   20f08:	aa32      	add	r2, sp, #200	; 0xc8
   20f0a:	2d10      	cmp	r5, #16
   20f0c:	dce7      	bgt.n	20ede <_svfprintf_r+0x9b2>
   20f0e:	46b1      	mov	r9, r6
   20f10:	000c      	movs	r4, r1
   20f12:	0016      	movs	r6, r2
   20f14:	464a      	mov	r2, r9
   20f16:	1964      	adds	r4, r4, r5
   20f18:	3301      	adds	r3, #1
   20f1a:	6032      	str	r2, [r6, #0]
   20f1c:	6075      	str	r5, [r6, #4]
   20f1e:	60bc      	str	r4, [r7, #8]
   20f20:	607b      	str	r3, [r7, #4]
   20f22:	2b07      	cmp	r3, #7
   20f24:	dd00      	ble.n	20f28 <_svfprintf_r+0x9fc>
   20f26:	e27e      	b.n	21426 <_svfprintf_r+0xefa>
   20f28:	3608      	adds	r6, #8
   20f2a:	e6a1      	b.n	20c70 <_svfprintf_r+0x744>
   20f2c:	2301      	movs	r3, #1
   20f2e:	9a08      	ldr	r2, [sp, #32]
   20f30:	4213      	tst	r3, r2
   20f32:	d000      	beq.n	20f36 <_svfprintf_r+0xa0a>
   20f34:	e74b      	b.n	20dce <_svfprintf_r+0x8a2>
   20f36:	6073      	str	r3, [r6, #4]
   20f38:	687b      	ldr	r3, [r7, #4]
   20f3a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   20f3c:	3301      	adds	r3, #1
   20f3e:	3401      	adds	r4, #1
   20f40:	6032      	str	r2, [r6, #0]
   20f42:	60bc      	str	r4, [r7, #8]
   20f44:	4698      	mov	r8, r3
   20f46:	607b      	str	r3, [r7, #4]
   20f48:	2b07      	cmp	r3, #7
   20f4a:	dc00      	bgt.n	20f4e <_svfprintf_r+0xa22>
   20f4c:	e773      	b.n	20e36 <_svfprintf_r+0x90a>
   20f4e:	003a      	movs	r2, r7
   20f50:	9906      	ldr	r1, [sp, #24]
   20f52:	9809      	ldr	r0, [sp, #36]	; 0x24
   20f54:	f002 fd8e 	bl	23a74 <__ssprint_r>
   20f58:	2800      	cmp	r0, #0
   20f5a:	d001      	beq.n	20f60 <_svfprintf_r+0xa34>
   20f5c:	f7ff fb6d 	bl	2063a <_svfprintf_r+0x10e>
   20f60:	687b      	ldr	r3, [r7, #4]
   20f62:	68bc      	ldr	r4, [r7, #8]
   20f64:	4698      	mov	r8, r3
   20f66:	ae32      	add	r6, sp, #200	; 0xc8
   20f68:	e766      	b.n	20e38 <_svfprintf_r+0x90c>
   20f6a:	003a      	movs	r2, r7
   20f6c:	9906      	ldr	r1, [sp, #24]
   20f6e:	9809      	ldr	r0, [sp, #36]	; 0x24
   20f70:	f002 fd80 	bl	23a74 <__ssprint_r>
   20f74:	2800      	cmp	r0, #0
   20f76:	d100      	bne.n	20f7a <_svfprintf_r+0xa4e>
   20f78:	e720      	b.n	20dbc <_svfprintf_r+0x890>
   20f7a:	f7ff fb5e 	bl	2063a <_svfprintf_r+0x10e>
   20f7e:	9c08      	ldr	r4, [sp, #32]
   20f80:	2b01      	cmp	r3, #1
   20f82:	d100      	bne.n	20f86 <_svfprintf_r+0xa5a>
   20f84:	e184      	b.n	21290 <_svfprintf_r+0xd64>
   20f86:	2b02      	cmp	r3, #2
   20f88:	d129      	bne.n	20fde <_svfprintf_r+0xab2>
   20f8a:	9408      	str	r4, [sp, #32]
   20f8c:	2300      	movs	r3, #0
   20f8e:	2400      	movs	r4, #0
   20f90:	930c      	str	r3, [sp, #48]	; 0x30
   20f92:	940d      	str	r4, [sp, #52]	; 0x34
   20f94:	e4c5      	b.n	20922 <_svfprintf_r+0x3f6>
   20f96:	003a      	movs	r2, r7
   20f98:	9906      	ldr	r1, [sp, #24]
   20f9a:	9809      	ldr	r0, [sp, #36]	; 0x24
   20f9c:	f002 fd6a 	bl	23a74 <__ssprint_r>
   20fa0:	2800      	cmp	r0, #0
   20fa2:	d001      	beq.n	20fa8 <_svfprintf_r+0xa7c>
   20fa4:	f7ff fb49 	bl	2063a <_svfprintf_r+0x10e>
   20fa8:	68bc      	ldr	r4, [r7, #8]
   20faa:	ae32      	add	r6, sp, #200	; 0xc8
   20fac:	e6a2      	b.n	20cf4 <_svfprintf_r+0x7c8>
   20fae:	003a      	movs	r2, r7
   20fb0:	9906      	ldr	r1, [sp, #24]
   20fb2:	9809      	ldr	r0, [sp, #36]	; 0x24
   20fb4:	f002 fd5e 	bl	23a74 <__ssprint_r>
   20fb8:	2800      	cmp	r0, #0
   20fba:	d001      	beq.n	20fc0 <_svfprintf_r+0xa94>
   20fbc:	f7ff fb3d 	bl	2063a <_svfprintf_r+0x10e>
   20fc0:	68bc      	ldr	r4, [r7, #8]
   20fc2:	ae32      	add	r6, sp, #200	; 0xc8
   20fc4:	e640      	b.n	20c48 <_svfprintf_r+0x71c>
   20fc6:	003a      	movs	r2, r7
   20fc8:	9906      	ldr	r1, [sp, #24]
   20fca:	9809      	ldr	r0, [sp, #36]	; 0x24
   20fcc:	f002 fd52 	bl	23a74 <__ssprint_r>
   20fd0:	2800      	cmp	r0, #0
   20fd2:	d001      	beq.n	20fd8 <_svfprintf_r+0xaac>
   20fd4:	f7ff fb31 	bl	2063a <_svfprintf_r+0x10e>
   20fd8:	68bc      	ldr	r4, [r7, #8]
   20fda:	ae32      	add	r6, sp, #200	; 0xc8
   20fdc:	e644      	b.n	20c68 <_svfprintf_r+0x73c>
   20fde:	9408      	str	r4, [sp, #32]
   20fe0:	2300      	movs	r3, #0
   20fe2:	2400      	movs	r4, #0
   20fe4:	930c      	str	r3, [sp, #48]	; 0x30
   20fe6:	940d      	str	r4, [sp, #52]	; 0x34
   20fe8:	980c      	ldr	r0, [sp, #48]	; 0x30
   20fea:	990d      	ldr	r1, [sp, #52]	; 0x34
   20fec:	465b      	mov	r3, fp
   20fee:	aa32      	add	r2, sp, #200	; 0xc8
   20ff0:	9307      	str	r3, [sp, #28]
   20ff2:	4691      	mov	r9, r2
   20ff4:	46b3      	mov	fp, r6
   20ff6:	e000      	b.n	20ffa <_svfprintf_r+0xace>
   20ff8:	46a1      	mov	r9, r4
   20ffa:	074a      	lsls	r2, r1, #29
   20ffc:	4694      	mov	ip, r2
   20ffe:	464b      	mov	r3, r9
   21000:	4665      	mov	r5, ip
   21002:	1e5c      	subs	r4, r3, #1
   21004:	08c6      	lsrs	r6, r0, #3
   21006:	2307      	movs	r3, #7
   21008:	08ca      	lsrs	r2, r1, #3
   2100a:	4335      	orrs	r5, r6
   2100c:	0011      	movs	r1, r2
   2100e:	002a      	movs	r2, r5
   21010:	4003      	ands	r3, r0
   21012:	3330      	adds	r3, #48	; 0x30
   21014:	7023      	strb	r3, [r4, #0]
   21016:	0028      	movs	r0, r5
   21018:	430a      	orrs	r2, r1
   2101a:	d1ed      	bne.n	20ff8 <_svfprintf_r+0xacc>
   2101c:	900c      	str	r0, [sp, #48]	; 0x30
   2101e:	910d      	str	r1, [sp, #52]	; 0x34
   21020:	9907      	ldr	r1, [sp, #28]
   21022:	465e      	mov	r6, fp
   21024:	468b      	mov	fp, r1
   21026:	9908      	ldr	r1, [sp, #32]
   21028:	464a      	mov	r2, r9
   2102a:	9411      	str	r4, [sp, #68]	; 0x44
   2102c:	07c9      	lsls	r1, r1, #31
   2102e:	d500      	bpl.n	21032 <_svfprintf_r+0xb06>
   21030:	e13d      	b.n	212ae <_svfprintf_r+0xd82>
   21032:	ab32      	add	r3, sp, #200	; 0xc8
   21034:	1b1b      	subs	r3, r3, r4
   21036:	930e      	str	r3, [sp, #56]	; 0x38
   21038:	f7ff fb88 	bl	2074c <_svfprintf_r+0x220>
   2103c:	00026d8c 	.word	0x00026d8c
   21040:	00026d88 	.word	0x00026d88
   21044:	00026d9c 	.word	0x00026d9c
   21048:	981f      	ldr	r0, [sp, #124]	; 0x7c
   2104a:	2800      	cmp	r0, #0
   2104c:	dc00      	bgt.n	21050 <_svfprintf_r+0xb24>
   2104e:	e296      	b.n	2157e <_svfprintf_r+0x1052>
   21050:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   21052:	9914      	ldr	r1, [sp, #80]	; 0x50
   21054:	0013      	movs	r3, r2
   21056:	4690      	mov	r8, r2
   21058:	428b      	cmp	r3, r1
   2105a:	dd00      	ble.n	2105e <_svfprintf_r+0xb32>
   2105c:	4688      	mov	r8, r1
   2105e:	4643      	mov	r3, r8
   21060:	2b00      	cmp	r3, #0
   21062:	dd0c      	ble.n	2107e <_svfprintf_r+0xb52>
   21064:	9b11      	ldr	r3, [sp, #68]	; 0x44
   21066:	4444      	add	r4, r8
   21068:	6033      	str	r3, [r6, #0]
   2106a:	4643      	mov	r3, r8
   2106c:	6073      	str	r3, [r6, #4]
   2106e:	687b      	ldr	r3, [r7, #4]
   21070:	60bc      	str	r4, [r7, #8]
   21072:	3301      	adds	r3, #1
   21074:	607b      	str	r3, [r7, #4]
   21076:	2b07      	cmp	r3, #7
   21078:	dd00      	ble.n	2107c <_svfprintf_r+0xb50>
   2107a:	e3b7      	b.n	217ec <_svfprintf_r+0x12c0>
   2107c:	3608      	adds	r6, #8
   2107e:	4643      	mov	r3, r8
   21080:	43db      	mvns	r3, r3
   21082:	4642      	mov	r2, r8
   21084:	17db      	asrs	r3, r3, #31
   21086:	4013      	ands	r3, r2
   21088:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2108a:	1ad3      	subs	r3, r2, r3
   2108c:	4698      	mov	r8, r3
   2108e:	2b00      	cmp	r3, #0
   21090:	dc00      	bgt.n	21094 <_svfprintf_r+0xb68>
   21092:	e128      	b.n	212e6 <_svfprintf_r+0xdba>
   21094:	2b10      	cmp	r3, #16
   21096:	dc01      	bgt.n	2109c <_svfprintf_r+0xb70>
   21098:	f000 fce7 	bl	21a6a <_svfprintf_r+0x153e>
   2109c:	4acf      	ldr	r2, [pc, #828]	; (213dc <_svfprintf_r+0xeb0>)
   2109e:	0021      	movs	r1, r4
   210a0:	4691      	mov	r9, r2
   210a2:	2210      	movs	r2, #16
   210a4:	687b      	ldr	r3, [r7, #4]
   210a6:	4692      	mov	sl, r2
   210a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
   210aa:	0032      	movs	r2, r6
   210ac:	464c      	mov	r4, r9
   210ae:	4646      	mov	r6, r8
   210b0:	e004      	b.n	210bc <_svfprintf_r+0xb90>
   210b2:	3208      	adds	r2, #8
   210b4:	3e10      	subs	r6, #16
   210b6:	2e10      	cmp	r6, #16
   210b8:	dc00      	bgt.n	210bc <_svfprintf_r+0xb90>
   210ba:	e104      	b.n	212c6 <_svfprintf_r+0xd9a>
   210bc:	4650      	mov	r0, sl
   210be:	3110      	adds	r1, #16
   210c0:	3301      	adds	r3, #1
   210c2:	6014      	str	r4, [r2, #0]
   210c4:	6050      	str	r0, [r2, #4]
   210c6:	60b9      	str	r1, [r7, #8]
   210c8:	607b      	str	r3, [r7, #4]
   210ca:	2b07      	cmp	r3, #7
   210cc:	ddf1      	ble.n	210b2 <_svfprintf_r+0xb86>
   210ce:	003a      	movs	r2, r7
   210d0:	9906      	ldr	r1, [sp, #24]
   210d2:	0028      	movs	r0, r5
   210d4:	f002 fcce 	bl	23a74 <__ssprint_r>
   210d8:	2800      	cmp	r0, #0
   210da:	d001      	beq.n	210e0 <_svfprintf_r+0xbb4>
   210dc:	f7ff faad 	bl	2063a <_svfprintf_r+0x10e>
   210e0:	68b9      	ldr	r1, [r7, #8]
   210e2:	687b      	ldr	r3, [r7, #4]
   210e4:	aa32      	add	r2, sp, #200	; 0xc8
   210e6:	e7e5      	b.n	210b4 <_svfprintf_r+0xb88>
   210e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   210ea:	2b00      	cmp	r3, #0
   210ec:	d100      	bne.n	210f0 <_svfprintf_r+0xbc4>
   210ee:	e0ca      	b.n	21286 <_svfprintf_r+0xd5a>
   210f0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   210f2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   210f4:	ab32      	add	r3, sp, #200	; 0xc8
   210f6:	46b1      	mov	r9, r6
   210f8:	001e      	movs	r6, r3
   210fa:	0020      	movs	r0, r4
   210fc:	0029      	movs	r1, r5
   210fe:	220a      	movs	r2, #10
   21100:	2300      	movs	r3, #0
   21102:	f003 f94d 	bl	243a0 <__aeabi_uldivmod>
   21106:	3e01      	subs	r6, #1
   21108:	3230      	adds	r2, #48	; 0x30
   2110a:	7032      	strb	r2, [r6, #0]
   2110c:	2300      	movs	r3, #0
   2110e:	0020      	movs	r0, r4
   21110:	0029      	movs	r1, r5
   21112:	220a      	movs	r2, #10
   21114:	f003 f944 	bl	243a0 <__aeabi_uldivmod>
   21118:	0003      	movs	r3, r0
   2111a:	0004      	movs	r4, r0
   2111c:	000d      	movs	r5, r1
   2111e:	430b      	orrs	r3, r1
   21120:	d1eb      	bne.n	210fa <_svfprintf_r+0xbce>
   21122:	0032      	movs	r2, r6
   21124:	ab32      	add	r3, sp, #200	; 0xc8
   21126:	1a9b      	subs	r3, r3, r2
   21128:	9611      	str	r6, [sp, #68]	; 0x44
   2112a:	940c      	str	r4, [sp, #48]	; 0x30
   2112c:	950d      	str	r5, [sp, #52]	; 0x34
   2112e:	464e      	mov	r6, r9
   21130:	930e      	str	r3, [sp, #56]	; 0x38
   21132:	f7ff fb0b 	bl	2074c <_svfprintf_r+0x220>
   21136:	2300      	movs	r3, #0
   21138:	930e      	str	r3, [sp, #56]	; 0x38
   2113a:	ab32      	add	r3, sp, #200	; 0xc8
   2113c:	9311      	str	r3, [sp, #68]	; 0x44
   2113e:	f7ff fb05 	bl	2074c <_svfprintf_r+0x220>
   21142:	003a      	movs	r2, r7
   21144:	9906      	ldr	r1, [sp, #24]
   21146:	9809      	ldr	r0, [sp, #36]	; 0x24
   21148:	f002 fc94 	bl	23a74 <__ssprint_r>
   2114c:	2800      	cmp	r0, #0
   2114e:	d001      	beq.n	21154 <_svfprintf_r+0xc28>
   21150:	f7ff fa73 	bl	2063a <_svfprintf_r+0x10e>
   21154:	ab16      	add	r3, sp, #88	; 0x58
   21156:	7fdb      	ldrb	r3, [r3, #31]
   21158:	68bc      	ldr	r4, [r7, #8]
   2115a:	4698      	mov	r8, r3
   2115c:	ae32      	add	r6, sp, #200	; 0xc8
   2115e:	e560      	b.n	20c22 <_svfprintf_r+0x6f6>
   21160:	9b14      	ldr	r3, [sp, #80]	; 0x50
   21162:	1e5d      	subs	r5, r3, #1
   21164:	2d00      	cmp	r5, #0
   21166:	dc00      	bgt.n	2116a <_svfprintf_r+0xc3e>
   21168:	e666      	b.n	20e38 <_svfprintf_r+0x90c>
   2116a:	4b9c      	ldr	r3, [pc, #624]	; (213dc <_svfprintf_r+0xeb0>)
   2116c:	4699      	mov	r9, r3
   2116e:	2d10      	cmp	r5, #16
   21170:	dd29      	ble.n	211c6 <_svfprintf_r+0xc9a>
   21172:	2310      	movs	r3, #16
   21174:	0032      	movs	r2, r6
   21176:	469a      	mov	sl, r3
   21178:	002e      	movs	r6, r5
   2117a:	0021      	movs	r1, r4
   2117c:	4643      	mov	r3, r8
   2117e:	9c09      	ldr	r4, [sp, #36]	; 0x24
   21180:	464d      	mov	r5, r9
   21182:	e003      	b.n	2118c <_svfprintf_r+0xc60>
   21184:	3e10      	subs	r6, #16
   21186:	3208      	adds	r2, #8
   21188:	2e10      	cmp	r6, #16
   2118a:	dd17      	ble.n	211bc <_svfprintf_r+0xc90>
   2118c:	4650      	mov	r0, sl
   2118e:	3110      	adds	r1, #16
   21190:	3301      	adds	r3, #1
   21192:	6015      	str	r5, [r2, #0]
   21194:	6050      	str	r0, [r2, #4]
   21196:	60b9      	str	r1, [r7, #8]
   21198:	607b      	str	r3, [r7, #4]
   2119a:	2b07      	cmp	r3, #7
   2119c:	ddf2      	ble.n	21184 <_svfprintf_r+0xc58>
   2119e:	003a      	movs	r2, r7
   211a0:	9906      	ldr	r1, [sp, #24]
   211a2:	0020      	movs	r0, r4
   211a4:	f002 fc66 	bl	23a74 <__ssprint_r>
   211a8:	2800      	cmp	r0, #0
   211aa:	d001      	beq.n	211b0 <_svfprintf_r+0xc84>
   211ac:	f7ff fa45 	bl	2063a <_svfprintf_r+0x10e>
   211b0:	3e10      	subs	r6, #16
   211b2:	68b9      	ldr	r1, [r7, #8]
   211b4:	687b      	ldr	r3, [r7, #4]
   211b6:	aa32      	add	r2, sp, #200	; 0xc8
   211b8:	2e10      	cmp	r6, #16
   211ba:	dce7      	bgt.n	2118c <_svfprintf_r+0xc60>
   211bc:	46a9      	mov	r9, r5
   211be:	000c      	movs	r4, r1
   211c0:	0035      	movs	r5, r6
   211c2:	4698      	mov	r8, r3
   211c4:	0016      	movs	r6, r2
   211c6:	464b      	mov	r3, r9
   211c8:	6075      	str	r5, [r6, #4]
   211ca:	6033      	str	r3, [r6, #0]
   211cc:	1964      	adds	r4, r4, r5
   211ce:	e629      	b.n	20e24 <_svfprintf_r+0x8f8>
   211d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   211d2:	681a      	ldr	r2, [r3, #0]
   211d4:	f7ff fbfb 	bl	209ce <_svfprintf_r+0x4a2>
   211d8:	6813      	ldr	r3, [r2, #0]
   211da:	9307      	str	r3, [sp, #28]
   211dc:	f7ff fa82 	bl	206e4 <_svfprintf_r+0x1b8>
   211e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   211e2:	681a      	ldr	r2, [r3, #0]
   211e4:	f7ff fb84 	bl	208f0 <_svfprintf_r+0x3c4>
   211e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   211ea:	681a      	ldr	r2, [r3, #0]
   211ec:	f7ff fbd1 	bl	20992 <_svfprintf_r+0x466>
   211f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
   211f2:	68ba      	ldr	r2, [r7, #8]
   211f4:	6033      	str	r3, [r6, #0]
   211f6:	9b18      	ldr	r3, [sp, #96]	; 0x60
   211f8:	469c      	mov	ip, r3
   211fa:	6073      	str	r3, [r6, #4]
   211fc:	687b      	ldr	r3, [r7, #4]
   211fe:	4462      	add	r2, ip
   21200:	3301      	adds	r3, #1
   21202:	0014      	movs	r4, r2
   21204:	60ba      	str	r2, [r7, #8]
   21206:	607b      	str	r3, [r7, #4]
   21208:	2b07      	cmp	r3, #7
   2120a:	dd00      	ble.n	2120e <_svfprintf_r+0xce2>
   2120c:	e202      	b.n	21614 <_svfprintf_r+0x10e8>
   2120e:	3608      	adds	r6, #8
   21210:	9b14      	ldr	r3, [sp, #80]	; 0x50
   21212:	1e5d      	subs	r5, r3, #1
   21214:	2d00      	cmp	r5, #0
   21216:	dc00      	bgt.n	2121a <_svfprintf_r+0xcee>
   21218:	e57e      	b.n	20d18 <_svfprintf_r+0x7ec>
   2121a:	4a70      	ldr	r2, [pc, #448]	; (213dc <_svfprintf_r+0xeb0>)
   2121c:	687b      	ldr	r3, [r7, #4]
   2121e:	4691      	mov	r9, r2
   21220:	2d10      	cmp	r5, #16
   21222:	dd25      	ble.n	21270 <_svfprintf_r+0xd44>
   21224:	2210      	movs	r2, #16
   21226:	0021      	movs	r1, r4
   21228:	4690      	mov	r8, r2
   2122a:	9c09      	ldr	r4, [sp, #36]	; 0x24
   2122c:	0032      	movs	r2, r6
   2122e:	002e      	movs	r6, r5
   21230:	464d      	mov	r5, r9
   21232:	e003      	b.n	2123c <_svfprintf_r+0xd10>
   21234:	3208      	adds	r2, #8
   21236:	3e10      	subs	r6, #16
   21238:	2e10      	cmp	r6, #16
   2123a:	dd15      	ble.n	21268 <_svfprintf_r+0xd3c>
   2123c:	4640      	mov	r0, r8
   2123e:	3110      	adds	r1, #16
   21240:	3301      	adds	r3, #1
   21242:	6015      	str	r5, [r2, #0]
   21244:	6050      	str	r0, [r2, #4]
   21246:	60b9      	str	r1, [r7, #8]
   21248:	607b      	str	r3, [r7, #4]
   2124a:	2b07      	cmp	r3, #7
   2124c:	ddf2      	ble.n	21234 <_svfprintf_r+0xd08>
   2124e:	003a      	movs	r2, r7
   21250:	9906      	ldr	r1, [sp, #24]
   21252:	0020      	movs	r0, r4
   21254:	f002 fc0e 	bl	23a74 <__ssprint_r>
   21258:	2800      	cmp	r0, #0
   2125a:	d001      	beq.n	21260 <_svfprintf_r+0xd34>
   2125c:	f7ff f9ed 	bl	2063a <_svfprintf_r+0x10e>
   21260:	68b9      	ldr	r1, [r7, #8]
   21262:	687b      	ldr	r3, [r7, #4]
   21264:	aa32      	add	r2, sp, #200	; 0xc8
   21266:	e7e6      	b.n	21236 <_svfprintf_r+0xd0a>
   21268:	46a9      	mov	r9, r5
   2126a:	000c      	movs	r4, r1
   2126c:	0035      	movs	r5, r6
   2126e:	0016      	movs	r6, r2
   21270:	464a      	mov	r2, r9
   21272:	1964      	adds	r4, r4, r5
   21274:	3301      	adds	r3, #1
   21276:	6032      	str	r2, [r6, #0]
   21278:	6075      	str	r5, [r6, #4]
   2127a:	60bc      	str	r4, [r7, #8]
   2127c:	607b      	str	r3, [r7, #4]
   2127e:	2b07      	cmp	r3, #7
   21280:	dc00      	bgt.n	21284 <_svfprintf_r+0xd58>
   21282:	e548      	b.n	20d16 <_svfprintf_r+0x7ea>
   21284:	e5e5      	b.n	20e52 <_svfprintf_r+0x926>
   21286:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   21288:	2b09      	cmp	r3, #9
   2128a:	d900      	bls.n	2128e <_svfprintf_r+0xd62>
   2128c:	e730      	b.n	210f0 <_svfprintf_r+0xbc4>
   2128e:	9c08      	ldr	r4, [sp, #32]
   21290:	2227      	movs	r2, #39	; 0x27
   21292:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   21294:	a928      	add	r1, sp, #160	; 0xa0
   21296:	3330      	adds	r3, #48	; 0x30
   21298:	548b      	strb	r3, [r1, r2]
   2129a:	2301      	movs	r3, #1
   2129c:	aa16      	add	r2, sp, #88	; 0x58
   2129e:	4694      	mov	ip, r2
   212a0:	930e      	str	r3, [sp, #56]	; 0x38
   212a2:	336e      	adds	r3, #110	; 0x6e
   212a4:	4463      	add	r3, ip
   212a6:	9408      	str	r4, [sp, #32]
   212a8:	9311      	str	r3, [sp, #68]	; 0x44
   212aa:	f7ff fa4f 	bl	2074c <_svfprintf_r+0x220>
   212ae:	2b30      	cmp	r3, #48	; 0x30
   212b0:	d100      	bne.n	212b4 <_svfprintf_r+0xd88>
   212b2:	e20b      	b.n	216cc <_svfprintf_r+0x11a0>
   212b4:	2330      	movs	r3, #48	; 0x30
   212b6:	3a02      	subs	r2, #2
   212b8:	7013      	strb	r3, [r2, #0]
   212ba:	ab32      	add	r3, sp, #200	; 0xc8
   212bc:	1a9b      	subs	r3, r3, r2
   212be:	930e      	str	r3, [sp, #56]	; 0x38
   212c0:	9211      	str	r2, [sp, #68]	; 0x44
   212c2:	f7ff fa43 	bl	2074c <_svfprintf_r+0x220>
   212c6:	46b0      	mov	r8, r6
   212c8:	46a1      	mov	r9, r4
   212ca:	0016      	movs	r6, r2
   212cc:	000c      	movs	r4, r1
   212ce:	464a      	mov	r2, r9
   212d0:	6032      	str	r2, [r6, #0]
   212d2:	4642      	mov	r2, r8
   212d4:	4444      	add	r4, r8
   212d6:	3301      	adds	r3, #1
   212d8:	6072      	str	r2, [r6, #4]
   212da:	60bc      	str	r4, [r7, #8]
   212dc:	607b      	str	r3, [r7, #4]
   212de:	2b07      	cmp	r3, #7
   212e0:	dd00      	ble.n	212e4 <_svfprintf_r+0xdb8>
   212e2:	e29c      	b.n	2181e <_svfprintf_r+0x12f2>
   212e4:	3608      	adds	r6, #8
   212e6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   212e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
   212ea:	4293      	cmp	r3, r2
   212ec:	db4c      	blt.n	21388 <_svfprintf_r+0xe5c>
   212ee:	9a08      	ldr	r2, [sp, #32]
   212f0:	07d2      	lsls	r2, r2, #31
   212f2:	d449      	bmi.n	21388 <_svfprintf_r+0xe5c>
   212f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   212f6:	9913      	ldr	r1, [sp, #76]	; 0x4c
   212f8:	1ad3      	subs	r3, r2, r3
   212fa:	1a52      	subs	r2, r2, r1
   212fc:	4690      	mov	r8, r2
   212fe:	429a      	cmp	r2, r3
   21300:	dd00      	ble.n	21304 <_svfprintf_r+0xdd8>
   21302:	4698      	mov	r8, r3
   21304:	4642      	mov	r2, r8
   21306:	2a00      	cmp	r2, #0
   21308:	dd0f      	ble.n	2132a <_svfprintf_r+0xdfe>
   2130a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   2130c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   2130e:	468c      	mov	ip, r1
   21310:	4462      	add	r2, ip
   21312:	6032      	str	r2, [r6, #0]
   21314:	4642      	mov	r2, r8
   21316:	6072      	str	r2, [r6, #4]
   21318:	687a      	ldr	r2, [r7, #4]
   2131a:	4444      	add	r4, r8
   2131c:	3201      	adds	r2, #1
   2131e:	60bc      	str	r4, [r7, #8]
   21320:	607a      	str	r2, [r7, #4]
   21322:	2a07      	cmp	r2, #7
   21324:	dd00      	ble.n	21328 <_svfprintf_r+0xdfc>
   21326:	e286      	b.n	21836 <_svfprintf_r+0x130a>
   21328:	3608      	adds	r6, #8
   2132a:	4642      	mov	r2, r8
   2132c:	43d5      	mvns	r5, r2
   2132e:	17ed      	asrs	r5, r5, #31
   21330:	4015      	ands	r5, r2
   21332:	1b5d      	subs	r5, r3, r5
   21334:	2d00      	cmp	r5, #0
   21336:	dc00      	bgt.n	2133a <_svfprintf_r+0xe0e>
   21338:	e4ee      	b.n	20d18 <_svfprintf_r+0x7ec>
   2133a:	4a28      	ldr	r2, [pc, #160]	; (213dc <_svfprintf_r+0xeb0>)
   2133c:	687b      	ldr	r3, [r7, #4]
   2133e:	4691      	mov	r9, r2
   21340:	2d10      	cmp	r5, #16
   21342:	dd95      	ble.n	21270 <_svfprintf_r+0xd44>
   21344:	2210      	movs	r2, #16
   21346:	0021      	movs	r1, r4
   21348:	4690      	mov	r8, r2
   2134a:	9c09      	ldr	r4, [sp, #36]	; 0x24
   2134c:	0032      	movs	r2, r6
   2134e:	002e      	movs	r6, r5
   21350:	464d      	mov	r5, r9
   21352:	e003      	b.n	2135c <_svfprintf_r+0xe30>
   21354:	3208      	adds	r2, #8
   21356:	3e10      	subs	r6, #16
   21358:	2e10      	cmp	r6, #16
   2135a:	dd85      	ble.n	21268 <_svfprintf_r+0xd3c>
   2135c:	4640      	mov	r0, r8
   2135e:	3110      	adds	r1, #16
   21360:	3301      	adds	r3, #1
   21362:	6015      	str	r5, [r2, #0]
   21364:	6050      	str	r0, [r2, #4]
   21366:	60b9      	str	r1, [r7, #8]
   21368:	607b      	str	r3, [r7, #4]
   2136a:	2b07      	cmp	r3, #7
   2136c:	ddf2      	ble.n	21354 <_svfprintf_r+0xe28>
   2136e:	003a      	movs	r2, r7
   21370:	9906      	ldr	r1, [sp, #24]
   21372:	0020      	movs	r0, r4
   21374:	f002 fb7e 	bl	23a74 <__ssprint_r>
   21378:	2800      	cmp	r0, #0
   2137a:	d001      	beq.n	21380 <_svfprintf_r+0xe54>
   2137c:	f7ff f95d 	bl	2063a <_svfprintf_r+0x10e>
   21380:	68b9      	ldr	r1, [r7, #8]
   21382:	687b      	ldr	r3, [r7, #4]
   21384:	aa32      	add	r2, sp, #200	; 0xc8
   21386:	e7e6      	b.n	21356 <_svfprintf_r+0xe2a>
   21388:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2138a:	6032      	str	r2, [r6, #0]
   2138c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   2138e:	4694      	mov	ip, r2
   21390:	6072      	str	r2, [r6, #4]
   21392:	687a      	ldr	r2, [r7, #4]
   21394:	4464      	add	r4, ip
   21396:	3201      	adds	r2, #1
   21398:	60bc      	str	r4, [r7, #8]
   2139a:	607a      	str	r2, [r7, #4]
   2139c:	2a07      	cmp	r2, #7
   2139e:	dd00      	ble.n	213a2 <_svfprintf_r+0xe76>
   213a0:	e230      	b.n	21804 <_svfprintf_r+0x12d8>
   213a2:	3608      	adds	r6, #8
   213a4:	e7a6      	b.n	212f4 <_svfprintf_r+0xdc8>
   213a6:	003a      	movs	r2, r7
   213a8:	9906      	ldr	r1, [sp, #24]
   213aa:	9809      	ldr	r0, [sp, #36]	; 0x24
   213ac:	f002 fb62 	bl	23a74 <__ssprint_r>
   213b0:	2800      	cmp	r0, #0
   213b2:	d001      	beq.n	213b8 <_svfprintf_r+0xe8c>
   213b4:	f7ff f941 	bl	2063a <_svfprintf_r+0x10e>
   213b8:	68bc      	ldr	r4, [r7, #8]
   213ba:	687b      	ldr	r3, [r7, #4]
   213bc:	ae32      	add	r6, sp, #200	; 0xc8
   213be:	e513      	b.n	20de8 <_svfprintf_r+0x8bc>
   213c0:	003a      	movs	r2, r7
   213c2:	9906      	ldr	r1, [sp, #24]
   213c4:	9809      	ldr	r0, [sp, #36]	; 0x24
   213c6:	f002 fb55 	bl	23a74 <__ssprint_r>
   213ca:	2800      	cmp	r0, #0
   213cc:	d001      	beq.n	213d2 <_svfprintf_r+0xea6>
   213ce:	f7ff f934 	bl	2063a <_svfprintf_r+0x10e>
   213d2:	687b      	ldr	r3, [r7, #4]
   213d4:	68bc      	ldr	r4, [r7, #8]
   213d6:	4698      	mov	r8, r3
   213d8:	ae32      	add	r6, sp, #200	; 0xc8
   213da:	e513      	b.n	20e04 <_svfprintf_r+0x8d8>
   213dc:	00026d9c 	.word	0x00026d9c
   213e0:	2307      	movs	r3, #7
   213e2:	3207      	adds	r2, #7
   213e4:	439a      	bics	r2, r3
   213e6:	3301      	adds	r3, #1
   213e8:	469c      	mov	ip, r3
   213ea:	4494      	add	ip, r2
   213ec:	4663      	mov	r3, ip
   213ee:	930f      	str	r3, [sp, #60]	; 0x3c
   213f0:	6853      	ldr	r3, [r2, #4]
   213f2:	6812      	ldr	r2, [r2, #0]
   213f4:	930d      	str	r3, [sp, #52]	; 0x34
   213f6:	920c      	str	r2, [sp, #48]	; 0x30
   213f8:	2b00      	cmp	r3, #0
   213fa:	db01      	blt.n	21400 <_svfprintf_r+0xed4>
   213fc:	f7ff f97a 	bl	206f4 <_svfprintf_r+0x1c8>
   21400:	980c      	ldr	r0, [sp, #48]	; 0x30
   21402:	990d      	ldr	r1, [sp, #52]	; 0x34
   21404:	2300      	movs	r3, #0
   21406:	4242      	negs	r2, r0
   21408:	418b      	sbcs	r3, r1
   2140a:	0011      	movs	r1, r2
   2140c:	001a      	movs	r2, r3
   2140e:	232d      	movs	r3, #45	; 0x2d
   21410:	a816      	add	r0, sp, #88	; 0x58
   21412:	77c3      	strb	r3, [r0, #31]
   21414:	0008      	movs	r0, r1
   21416:	4310      	orrs	r0, r2
   21418:	910c      	str	r1, [sp, #48]	; 0x30
   2141a:	920d      	str	r2, [sp, #52]	; 0x34
   2141c:	4698      	mov	r8, r3
   2141e:	0002      	movs	r2, r0
   21420:	3b2c      	subs	r3, #44	; 0x2c
   21422:	f7ff f970 	bl	20706 <_svfprintf_r+0x1da>
   21426:	003a      	movs	r2, r7
   21428:	9906      	ldr	r1, [sp, #24]
   2142a:	9809      	ldr	r0, [sp, #36]	; 0x24
   2142c:	f002 fb22 	bl	23a74 <__ssprint_r>
   21430:	2800      	cmp	r0, #0
   21432:	d001      	beq.n	21438 <_svfprintf_r+0xf0c>
   21434:	f7ff f901 	bl	2063a <_svfprintf_r+0x10e>
   21438:	68bc      	ldr	r4, [r7, #8]
   2143a:	ae32      	add	r6, sp, #200	; 0xc8
   2143c:	e418      	b.n	20c70 <_svfprintf_r+0x744>
   2143e:	9916      	ldr	r1, [sp, #88]	; 0x58
   21440:	9d15      	ldr	r5, [sp, #84]	; 0x54
   21442:	000a      	movs	r2, r1
   21444:	0008      	movs	r0, r1
   21446:	002b      	movs	r3, r5
   21448:	0029      	movs	r1, r5
   2144a:	f7fe fac1 	bl	1f9d0 <__aeabi_dcmpun>
   2144e:	2800      	cmp	r0, #0
   21450:	d000      	beq.n	21454 <_svfprintf_r+0xf28>
   21452:	e2e6      	b.n	21a22 <_svfprintf_r+0x14f6>
   21454:	4653      	mov	r3, sl
   21456:	3301      	adds	r3, #1
   21458:	d100      	bne.n	2145c <_svfprintf_r+0xf30>
   2145a:	e20d      	b.n	21878 <_svfprintf_r+0x134c>
   2145c:	2320      	movs	r3, #32
   2145e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   21460:	439a      	bics	r2, r3
   21462:	920e      	str	r2, [sp, #56]	; 0x38
   21464:	2a47      	cmp	r2, #71	; 0x47
   21466:	d100      	bne.n	2146a <_svfprintf_r+0xf3e>
   21468:	e11c      	b.n	216a4 <_svfprintf_r+0x1178>
   2146a:	2380      	movs	r3, #128	; 0x80
   2146c:	005b      	lsls	r3, r3, #1
   2146e:	4323      	orrs	r3, r4
   21470:	9308      	str	r3, [sp, #32]
   21472:	9b15      	ldr	r3, [sp, #84]	; 0x54
   21474:	2b00      	cmp	r3, #0
   21476:	da00      	bge.n	2147a <_svfprintf_r+0xf4e>
   21478:	e221      	b.n	218be <_svfprintf_r+0x1392>
   2147a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2147c:	9307      	str	r3, [sp, #28]
   2147e:	2300      	movs	r3, #0
   21480:	4691      	mov	r9, r2
   21482:	9310      	str	r3, [sp, #64]	; 0x40
   21484:	9b12      	ldr	r3, [sp, #72]	; 0x48
   21486:	2b66      	cmp	r3, #102	; 0x66
   21488:	d100      	bne.n	2148c <_svfprintf_r+0xf60>
   2148a:	e1fc      	b.n	21886 <_svfprintf_r+0x135a>
   2148c:	2b46      	cmp	r3, #70	; 0x46
   2148e:	d100      	bne.n	21492 <_svfprintf_r+0xf66>
   21490:	e0db      	b.n	2164a <_svfprintf_r+0x111e>
   21492:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   21494:	9809      	ldr	r0, [sp, #36]	; 0x24
   21496:	3a45      	subs	r2, #69	; 0x45
   21498:	0013      	movs	r3, r2
   2149a:	4259      	negs	r1, r3
   2149c:	4159      	adcs	r1, r3
   2149e:	ab20      	add	r3, sp, #128	; 0x80
   214a0:	000d      	movs	r5, r1
   214a2:	9303      	str	r3, [sp, #12]
   214a4:	ab1f      	add	r3, sp, #124	; 0x7c
   214a6:	9302      	str	r3, [sp, #8]
   214a8:	2302      	movs	r3, #2
   214aa:	aa23      	add	r2, sp, #140	; 0x8c
   214ac:	4455      	add	r5, sl
   214ae:	921b      	str	r2, [sp, #108]	; 0x6c
   214b0:	9204      	str	r2, [sp, #16]
   214b2:	9300      	str	r3, [sp, #0]
   214b4:	9501      	str	r5, [sp, #4]
   214b6:	9b07      	ldr	r3, [sp, #28]
   214b8:	464a      	mov	r2, r9
   214ba:	f000 fbf9 	bl	21cb0 <_dtoa_r>
   214be:	9b12      	ldr	r3, [sp, #72]	; 0x48
   214c0:	9011      	str	r0, [sp, #68]	; 0x44
   214c2:	2b67      	cmp	r3, #103	; 0x67
   214c4:	d000      	beq.n	214c8 <_svfprintf_r+0xf9c>
   214c6:	e239      	b.n	2193c <_svfprintf_r+0x1410>
   214c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   214ca:	4698      	mov	r8, r3
   214cc:	44a8      	add	r8, r5
   214ce:	07e3      	lsls	r3, r4, #31
   214d0:	d400      	bmi.n	214d4 <_svfprintf_r+0xfa8>
   214d2:	e28b      	b.n	219ec <_svfprintf_r+0x14c0>
   214d4:	2300      	movs	r3, #0
   214d6:	2200      	movs	r2, #0
   214d8:	4648      	mov	r0, r9
   214da:	9907      	ldr	r1, [sp, #28]
   214dc:	f7fb fda4 	bl	1d028 <__aeabi_dcmpeq>
   214e0:	4643      	mov	r3, r8
   214e2:	2800      	cmp	r0, #0
   214e4:	d10a      	bne.n	214fc <_svfprintf_r+0xfd0>
   214e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   214e8:	4543      	cmp	r3, r8
   214ea:	d207      	bcs.n	214fc <_svfprintf_r+0xfd0>
   214ec:	2130      	movs	r1, #48	; 0x30
   214ee:	4640      	mov	r0, r8
   214f0:	1c5a      	adds	r2, r3, #1
   214f2:	9223      	str	r2, [sp, #140]	; 0x8c
   214f4:	7019      	strb	r1, [r3, #0]
   214f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   214f8:	4298      	cmp	r0, r3
   214fa:	d8f9      	bhi.n	214f0 <_svfprintf_r+0xfc4>
   214fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   214fe:	1a9b      	subs	r3, r3, r2
   21500:	9314      	str	r3, [sp, #80]	; 0x50
   21502:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21504:	2b47      	cmp	r3, #71	; 0x47
   21506:	d100      	bne.n	2150a <_svfprintf_r+0xfde>
   21508:	e0f6      	b.n	216f8 <_svfprintf_r+0x11cc>
   2150a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2150c:	2b65      	cmp	r3, #101	; 0x65
   2150e:	dc00      	bgt.n	21512 <_svfprintf_r+0xfe6>
   21510:	e226      	b.n	21960 <_svfprintf_r+0x1434>
   21512:	9b12      	ldr	r3, [sp, #72]	; 0x48
   21514:	2b66      	cmp	r3, #102	; 0x66
   21516:	d100      	bne.n	2151a <_svfprintf_r+0xfee>
   21518:	e1f4      	b.n	21904 <_svfprintf_r+0x13d8>
   2151a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2151c:	9313      	str	r3, [sp, #76]	; 0x4c
   2151e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   21520:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   21522:	0019      	movs	r1, r3
   21524:	4291      	cmp	r1, r2
   21526:	dd00      	ble.n	2152a <_svfprintf_r+0xffe>
   21528:	e1d4      	b.n	218d4 <_svfprintf_r+0x13a8>
   2152a:	07e3      	lsls	r3, r4, #31
   2152c:	d500      	bpl.n	21530 <_svfprintf_r+0x1004>
   2152e:	e249      	b.n	219c4 <_svfprintf_r+0x1498>
   21530:	43d3      	mvns	r3, r2
   21532:	17db      	asrs	r3, r3, #31
   21534:	0011      	movs	r1, r2
   21536:	401a      	ands	r2, r3
   21538:	2367      	movs	r3, #103	; 0x67
   2153a:	9207      	str	r2, [sp, #28]
   2153c:	910e      	str	r1, [sp, #56]	; 0x38
   2153e:	9312      	str	r3, [sp, #72]	; 0x48
   21540:	9b10      	ldr	r3, [sp, #64]	; 0x40
   21542:	2b00      	cmp	r3, #0
   21544:	d000      	beq.n	21548 <_svfprintf_r+0x101c>
   21546:	e0cf      	b.n	216e8 <_svfprintf_r+0x11bc>
   21548:	ab16      	add	r3, sp, #88	; 0x58
   2154a:	7fdb      	ldrb	r3, [r3, #31]
   2154c:	4698      	mov	r8, r3
   2154e:	2300      	movs	r3, #0
   21550:	469a      	mov	sl, r3
   21552:	f7ff f903 	bl	2075c <_svfprintf_r+0x230>
   21556:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   21558:	990a      	ldr	r1, [sp, #40]	; 0x28
   2155a:	6813      	ldr	r3, [r2, #0]
   2155c:	6019      	str	r1, [r3, #0]
   2155e:	0013      	movs	r3, r2
   21560:	3304      	adds	r3, #4
   21562:	930f      	str	r3, [sp, #60]	; 0x3c
   21564:	f7ff f80d 	bl	20582 <_svfprintf_r+0x56>
   21568:	003a      	movs	r2, r7
   2156a:	9906      	ldr	r1, [sp, #24]
   2156c:	9809      	ldr	r0, [sp, #36]	; 0x24
   2156e:	f002 fa81 	bl	23a74 <__ssprint_r>
   21572:	2800      	cmp	r0, #0
   21574:	d001      	beq.n	2157a <_svfprintf_r+0x104e>
   21576:	f7ff f860 	bl	2063a <_svfprintf_r+0x10e>
   2157a:	ae32      	add	r6, sp, #200	; 0xc8
   2157c:	e48e      	b.n	20e9c <_svfprintf_r+0x970>
   2157e:	4bde      	ldr	r3, [pc, #888]	; (218f8 <_svfprintf_r+0x13cc>)
   21580:	3401      	adds	r4, #1
   21582:	6033      	str	r3, [r6, #0]
   21584:	2301      	movs	r3, #1
   21586:	6073      	str	r3, [r6, #4]
   21588:	687b      	ldr	r3, [r7, #4]
   2158a:	60bc      	str	r4, [r7, #8]
   2158c:	3301      	adds	r3, #1
   2158e:	607b      	str	r3, [r7, #4]
   21590:	2b07      	cmp	r3, #7
   21592:	dc7a      	bgt.n	2168a <_svfprintf_r+0x115e>
   21594:	3608      	adds	r6, #8
   21596:	2800      	cmp	r0, #0
   21598:	d107      	bne.n	215aa <_svfprintf_r+0x107e>
   2159a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2159c:	2b00      	cmp	r3, #0
   2159e:	d104      	bne.n	215aa <_svfprintf_r+0x107e>
   215a0:	9b08      	ldr	r3, [sp, #32]
   215a2:	07db      	lsls	r3, r3, #31
   215a4:	d401      	bmi.n	215aa <_svfprintf_r+0x107e>
   215a6:	f7ff fbb7 	bl	20d18 <_svfprintf_r+0x7ec>
   215aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
   215ac:	6033      	str	r3, [r6, #0]
   215ae:	9b18      	ldr	r3, [sp, #96]	; 0x60
   215b0:	1919      	adds	r1, r3, r4
   215b2:	6073      	str	r3, [r6, #4]
   215b4:	687b      	ldr	r3, [r7, #4]
   215b6:	60b9      	str	r1, [r7, #8]
   215b8:	3301      	adds	r3, #1
   215ba:	607b      	str	r3, [r7, #4]
   215bc:	2b07      	cmp	r3, #7
   215be:	dd00      	ble.n	215c2 <_svfprintf_r+0x1096>
   215c0:	e1f2      	b.n	219a8 <_svfprintf_r+0x147c>
   215c2:	0032      	movs	r2, r6
   215c4:	3208      	adds	r2, #8
   215c6:	2800      	cmp	r0, #0
   215c8:	da00      	bge.n	215cc <_svfprintf_r+0x10a0>
   215ca:	e1cc      	b.n	21966 <_svfprintf_r+0x143a>
   215cc:	9811      	ldr	r0, [sp, #68]	; 0x44
   215ce:	3301      	adds	r3, #1
   215d0:	6010      	str	r0, [r2, #0]
   215d2:	9814      	ldr	r0, [sp, #80]	; 0x50
   215d4:	607b      	str	r3, [r7, #4]
   215d6:	1844      	adds	r4, r0, r1
   215d8:	6050      	str	r0, [r2, #4]
   215da:	60bc      	str	r4, [r7, #8]
   215dc:	2b07      	cmp	r3, #7
   215de:	dd00      	ble.n	215e2 <_svfprintf_r+0x10b6>
   215e0:	e437      	b.n	20e52 <_svfprintf_r+0x926>
   215e2:	3208      	adds	r2, #8
   215e4:	0016      	movs	r6, r2
   215e6:	f7ff fb97 	bl	20d18 <_svfprintf_r+0x7ec>
   215ea:	990f      	ldr	r1, [sp, #60]	; 0x3c
   215ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   215ee:	680b      	ldr	r3, [r1, #0]
   215f0:	601a      	str	r2, [r3, #0]
   215f2:	17d2      	asrs	r2, r2, #31
   215f4:	605a      	str	r2, [r3, #4]
   215f6:	000b      	movs	r3, r1
   215f8:	3304      	adds	r3, #4
   215fa:	930f      	str	r3, [sp, #60]	; 0x3c
   215fc:	f7fe ffc1 	bl	20582 <_svfprintf_r+0x56>
   21600:	464b      	mov	r3, r9
   21602:	3101      	adds	r1, #1
   21604:	431c      	orrs	r4, r3
   21606:	780b      	ldrb	r3, [r1, #0]
   21608:	f7fe fff4 	bl	205f4 <_svfprintf_r+0xc8>
   2160c:	4bbb      	ldr	r3, [pc, #748]	; (218fc <_svfprintf_r+0x13d0>)
   2160e:	9311      	str	r3, [sp, #68]	; 0x44
   21610:	f7ff f937 	bl	20882 <_svfprintf_r+0x356>
   21614:	003a      	movs	r2, r7
   21616:	9906      	ldr	r1, [sp, #24]
   21618:	9809      	ldr	r0, [sp, #36]	; 0x24
   2161a:	f002 fa2b 	bl	23a74 <__ssprint_r>
   2161e:	2800      	cmp	r0, #0
   21620:	d001      	beq.n	21626 <_svfprintf_r+0x10fa>
   21622:	f7ff f80a 	bl	2063a <_svfprintf_r+0x10e>
   21626:	68bc      	ldr	r4, [r7, #8]
   21628:	ae32      	add	r6, sp, #200	; 0xc8
   2162a:	e5f1      	b.n	21210 <_svfprintf_r+0xce4>
   2162c:	2140      	movs	r1, #64	; 0x40
   2162e:	9809      	ldr	r0, [sp, #36]	; 0x24
   21630:	f001 fb2e 	bl	22c90 <_malloc_r>
   21634:	9b06      	ldr	r3, [sp, #24]
   21636:	6018      	str	r0, [r3, #0]
   21638:	6118      	str	r0, [r3, #16]
   2163a:	2800      	cmp	r0, #0
   2163c:	d100      	bne.n	21640 <_svfprintf_r+0x1114>
   2163e:	e24f      	b.n	21ae0 <_svfprintf_r+0x15b4>
   21640:	2340      	movs	r3, #64	; 0x40
   21642:	9a06      	ldr	r2, [sp, #24]
   21644:	6153      	str	r3, [r2, #20]
   21646:	f7fe ff8e 	bl	20566 <_svfprintf_r+0x3a>
   2164a:	ab23      	add	r3, sp, #140	; 0x8c
   2164c:	931b      	str	r3, [sp, #108]	; 0x6c
   2164e:	9304      	str	r3, [sp, #16]
   21650:	ab20      	add	r3, sp, #128	; 0x80
   21652:	9303      	str	r3, [sp, #12]
   21654:	ab1f      	add	r3, sp, #124	; 0x7c
   21656:	9302      	str	r3, [sp, #8]
   21658:	4653      	mov	r3, sl
   2165a:	9301      	str	r3, [sp, #4]
   2165c:	2303      	movs	r3, #3
   2165e:	464a      	mov	r2, r9
   21660:	9300      	str	r3, [sp, #0]
   21662:	9809      	ldr	r0, [sp, #36]	; 0x24
   21664:	9b07      	ldr	r3, [sp, #28]
   21666:	f000 fb23 	bl	21cb0 <_dtoa_r>
   2166a:	4655      	mov	r5, sl
   2166c:	9011      	str	r0, [sp, #68]	; 0x44
   2166e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   21670:	4698      	mov	r8, r3
   21672:	9b12      	ldr	r3, [sp, #72]	; 0x48
   21674:	44a8      	add	r8, r5
   21676:	2b46      	cmp	r3, #70	; 0x46
   21678:	d000      	beq.n	2167c <_svfprintf_r+0x1150>
   2167a:	e72b      	b.n	214d4 <_svfprintf_r+0xfa8>
   2167c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2167e:	781b      	ldrb	r3, [r3, #0]
   21680:	2b30      	cmp	r3, #48	; 0x30
   21682:	d016      	beq.n	216b2 <_svfprintf_r+0x1186>
   21684:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   21686:	4498      	add	r8, r3
   21688:	e724      	b.n	214d4 <_svfprintf_r+0xfa8>
   2168a:	003a      	movs	r2, r7
   2168c:	9906      	ldr	r1, [sp, #24]
   2168e:	9809      	ldr	r0, [sp, #36]	; 0x24
   21690:	f002 f9f0 	bl	23a74 <__ssprint_r>
   21694:	2800      	cmp	r0, #0
   21696:	d001      	beq.n	2169c <_svfprintf_r+0x1170>
   21698:	f7fe ffcf 	bl	2063a <_svfprintf_r+0x10e>
   2169c:	981f      	ldr	r0, [sp, #124]	; 0x7c
   2169e:	68bc      	ldr	r4, [r7, #8]
   216a0:	ae32      	add	r6, sp, #200	; 0xc8
   216a2:	e778      	b.n	21596 <_svfprintf_r+0x106a>
   216a4:	4653      	mov	r3, sl
   216a6:	2b00      	cmp	r3, #0
   216a8:	d000      	beq.n	216ac <_svfprintf_r+0x1180>
   216aa:	e6de      	b.n	2146a <_svfprintf_r+0xf3e>
   216ac:	3301      	adds	r3, #1
   216ae:	469a      	mov	sl, r3
   216b0:	e6db      	b.n	2146a <_svfprintf_r+0xf3e>
   216b2:	2200      	movs	r2, #0
   216b4:	2300      	movs	r3, #0
   216b6:	4648      	mov	r0, r9
   216b8:	9907      	ldr	r1, [sp, #28]
   216ba:	f7fb fcb5 	bl	1d028 <__aeabi_dcmpeq>
   216be:	2800      	cmp	r0, #0
   216c0:	d1e0      	bne.n	21684 <_svfprintf_r+0x1158>
   216c2:	2301      	movs	r3, #1
   216c4:	1b5b      	subs	r3, r3, r5
   216c6:	931f      	str	r3, [sp, #124]	; 0x7c
   216c8:	4498      	add	r8, r3
   216ca:	e703      	b.n	214d4 <_svfprintf_r+0xfa8>
   216cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   216ce:	ab32      	add	r3, sp, #200	; 0xc8
   216d0:	1a9b      	subs	r3, r3, r2
   216d2:	930e      	str	r3, [sp, #56]	; 0x38
   216d4:	f7ff f83a 	bl	2074c <_svfprintf_r+0x220>
   216d8:	9811      	ldr	r0, [sp, #68]	; 0x44
   216da:	f7fe fc8f 	bl	1fffc <strlen>
   216de:	0002      	movs	r2, r0
   216e0:	900e      	str	r0, [sp, #56]	; 0x38
   216e2:	0003      	movs	r3, r0
   216e4:	f7ff f9cd 	bl	20a82 <_svfprintf_r+0x556>
   216e8:	232d      	movs	r3, #45	; 0x2d
   216ea:	aa16      	add	r2, sp, #88	; 0x58
   216ec:	77d3      	strb	r3, [r2, #31]
   216ee:	4698      	mov	r8, r3
   216f0:	2300      	movs	r3, #0
   216f2:	469a      	mov	sl, r3
   216f4:	f7ff f835 	bl	20762 <_svfprintf_r+0x236>
   216f8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   216fa:	9313      	str	r3, [sp, #76]	; 0x4c
   216fc:	1cda      	adds	r2, r3, #3
   216fe:	db02      	blt.n	21706 <_svfprintf_r+0x11da>
   21700:	459a      	cmp	sl, r3
   21702:	db00      	blt.n	21706 <_svfprintf_r+0x11da>
   21704:	e70b      	b.n	2151e <_svfprintf_r+0xff2>
   21706:	9b12      	ldr	r3, [sp, #72]	; 0x48
   21708:	3b02      	subs	r3, #2
   2170a:	9312      	str	r3, [sp, #72]	; 0x48
   2170c:	222c      	movs	r2, #44	; 0x2c
   2170e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   21710:	2148      	movs	r1, #72	; 0x48
   21712:	1e5d      	subs	r5, r3, #1
   21714:	ab16      	add	r3, sp, #88	; 0x58
   21716:	189b      	adds	r3, r3, r2
   21718:	466a      	mov	r2, sp
   2171a:	1852      	adds	r2, r2, r1
   2171c:	7812      	ldrb	r2, [r2, #0]
   2171e:	951f      	str	r5, [sp, #124]	; 0x7c
   21720:	701a      	strb	r2, [r3, #0]
   21722:	2d00      	cmp	r5, #0
   21724:	da00      	bge.n	21728 <_svfprintf_r+0x11fc>
   21726:	e1a4      	b.n	21a72 <_svfprintf_r+0x1546>
   21728:	212d      	movs	r1, #45	; 0x2d
   2172a:	232b      	movs	r3, #43	; 0x2b
   2172c:	aa16      	add	r2, sp, #88	; 0x58
   2172e:	1852      	adds	r2, r2, r1
   21730:	7013      	strb	r3, [r2, #0]
   21732:	2d09      	cmp	r5, #9
   21734:	dc00      	bgt.n	21738 <_svfprintf_r+0x120c>
   21736:	e14c      	b.n	219d2 <_svfprintf_r+0x14a6>
   21738:	aa16      	add	r2, sp, #88	; 0x58
   2173a:	233b      	movs	r3, #59	; 0x3b
   2173c:	4694      	mov	ip, r2
   2173e:	4463      	add	r3, ip
   21740:	469a      	mov	sl, r3
   21742:	46b1      	mov	r9, r6
   21744:	46a0      	mov	r8, r4
   21746:	4656      	mov	r6, sl
   21748:	e000      	b.n	2174c <_svfprintf_r+0x1220>
   2174a:	0026      	movs	r6, r4
   2174c:	0028      	movs	r0, r5
   2174e:	210a      	movs	r1, #10
   21750:	f7fb fc54 	bl	1cffc <__aeabi_idivmod>
   21754:	1e74      	subs	r4, r6, #1
   21756:	3130      	adds	r1, #48	; 0x30
   21758:	7021      	strb	r1, [r4, #0]
   2175a:	0028      	movs	r0, r5
   2175c:	210a      	movs	r1, #10
   2175e:	f7fb fb67 	bl	1ce30 <__divsi3>
   21762:	0005      	movs	r5, r0
   21764:	2809      	cmp	r0, #9
   21766:	dcf0      	bgt.n	2174a <_svfprintf_r+0x121e>
   21768:	0023      	movs	r3, r4
   2176a:	4644      	mov	r4, r8
   2176c:	46b0      	mov	r8, r6
   2176e:	464e      	mov	r6, r9
   21770:	4699      	mov	r9, r3
   21772:	0003      	movs	r3, r0
   21774:	3330      	adds	r3, #48	; 0x30
   21776:	b2d8      	uxtb	r0, r3
   21778:	4643      	mov	r3, r8
   2177a:	3b02      	subs	r3, #2
   2177c:	7018      	strb	r0, [r3, #0]
   2177e:	459a      	cmp	sl, r3
   21780:	d800      	bhi.n	21784 <_svfprintf_r+0x1258>
   21782:	e1b4      	b.n	21aee <_svfprintf_r+0x15c2>
   21784:	4642      	mov	r2, r8
   21786:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   21788:	4645      	mov	r5, r8
   2178a:	1a99      	subs	r1, r3, r2
   2178c:	2301      	movs	r3, #1
   2178e:	3107      	adds	r1, #7
   21790:	425b      	negs	r3, r3
   21792:	e001      	b.n	21798 <_svfprintf_r+0x126c>
   21794:	5ce8      	ldrb	r0, [r5, r3]
   21796:	3301      	adds	r3, #1
   21798:	aa21      	add	r2, sp, #132	; 0x84
   2179a:	18d2      	adds	r2, r2, r3
   2179c:	70d0      	strb	r0, [r2, #3]
   2179e:	428b      	cmp	r3, r1
   217a0:	d1f8      	bne.n	21794 <_svfprintf_r+0x1268>
   217a2:	a916      	add	r1, sp, #88	; 0x58
   217a4:	468c      	mov	ip, r1
   217a6:	222e      	movs	r2, #46	; 0x2e
   217a8:	464b      	mov	r3, r9
   217aa:	4462      	add	r2, ip
   217ac:	4694      	mov	ip, r2
   217ae:	1afb      	subs	r3, r7, r3
   217b0:	4463      	add	r3, ip
   217b2:	aa21      	add	r2, sp, #132	; 0x84
   217b4:	9914      	ldr	r1, [sp, #80]	; 0x50
   217b6:	1a9b      	subs	r3, r3, r2
   217b8:	469c      	mov	ip, r3
   217ba:	000a      	movs	r2, r1
   217bc:	4462      	add	r2, ip
   217be:	931a      	str	r3, [sp, #104]	; 0x68
   217c0:	920e      	str	r2, [sp, #56]	; 0x38
   217c2:	2901      	cmp	r1, #1
   217c4:	dc00      	bgt.n	217c8 <_svfprintf_r+0x129c>
   217c6:	e145      	b.n	21a54 <_svfprintf_r+0x1528>
   217c8:	9a18      	ldr	r2, [sp, #96]	; 0x60
   217ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   217cc:	4694      	mov	ip, r2
   217ce:	4463      	add	r3, ip
   217d0:	001a      	movs	r2, r3
   217d2:	930e      	str	r3, [sp, #56]	; 0x38
   217d4:	43db      	mvns	r3, r3
   217d6:	17db      	asrs	r3, r3, #31
   217d8:	401a      	ands	r2, r3
   217da:	2300      	movs	r3, #0
   217dc:	9207      	str	r2, [sp, #28]
   217de:	9313      	str	r3, [sp, #76]	; 0x4c
   217e0:	e6ae      	b.n	21540 <_svfprintf_r+0x1014>
   217e2:	2301      	movs	r3, #1
   217e4:	425b      	negs	r3, r3
   217e6:	930a      	str	r3, [sp, #40]	; 0x28
   217e8:	f7fe ff2d 	bl	20646 <_svfprintf_r+0x11a>
   217ec:	003a      	movs	r2, r7
   217ee:	9906      	ldr	r1, [sp, #24]
   217f0:	9809      	ldr	r0, [sp, #36]	; 0x24
   217f2:	f002 f93f 	bl	23a74 <__ssprint_r>
   217f6:	2800      	cmp	r0, #0
   217f8:	d001      	beq.n	217fe <_svfprintf_r+0x12d2>
   217fa:	f7fe ff1e 	bl	2063a <_svfprintf_r+0x10e>
   217fe:	68bc      	ldr	r4, [r7, #8]
   21800:	ae32      	add	r6, sp, #200	; 0xc8
   21802:	e43c      	b.n	2107e <_svfprintf_r+0xb52>
   21804:	003a      	movs	r2, r7
   21806:	9906      	ldr	r1, [sp, #24]
   21808:	9809      	ldr	r0, [sp, #36]	; 0x24
   2180a:	f002 f933 	bl	23a74 <__ssprint_r>
   2180e:	2800      	cmp	r0, #0
   21810:	d001      	beq.n	21816 <_svfprintf_r+0x12ea>
   21812:	f7fe ff12 	bl	2063a <_svfprintf_r+0x10e>
   21816:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   21818:	68bc      	ldr	r4, [r7, #8]
   2181a:	ae32      	add	r6, sp, #200	; 0xc8
   2181c:	e56a      	b.n	212f4 <_svfprintf_r+0xdc8>
   2181e:	003a      	movs	r2, r7
   21820:	9906      	ldr	r1, [sp, #24]
   21822:	9809      	ldr	r0, [sp, #36]	; 0x24
   21824:	f002 f926 	bl	23a74 <__ssprint_r>
   21828:	2800      	cmp	r0, #0
   2182a:	d001      	beq.n	21830 <_svfprintf_r+0x1304>
   2182c:	f7fe ff05 	bl	2063a <_svfprintf_r+0x10e>
   21830:	68bc      	ldr	r4, [r7, #8]
   21832:	ae32      	add	r6, sp, #200	; 0xc8
   21834:	e557      	b.n	212e6 <_svfprintf_r+0xdba>
   21836:	003a      	movs	r2, r7
   21838:	9906      	ldr	r1, [sp, #24]
   2183a:	9809      	ldr	r0, [sp, #36]	; 0x24
   2183c:	f002 f91a 	bl	23a74 <__ssprint_r>
   21840:	2800      	cmp	r0, #0
   21842:	d001      	beq.n	21848 <_svfprintf_r+0x131c>
   21844:	f7fe fef9 	bl	2063a <_svfprintf_r+0x10e>
   21848:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2184a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   2184c:	68bc      	ldr	r4, [r7, #8]
   2184e:	1a9b      	subs	r3, r3, r2
   21850:	ae32      	add	r6, sp, #200	; 0xc8
   21852:	e56a      	b.n	2132a <_svfprintf_r+0xdfe>
   21854:	4653      	mov	r3, sl
   21856:	9307      	str	r3, [sp, #28]
   21858:	2b06      	cmp	r3, #6
   2185a:	d901      	bls.n	21860 <_svfprintf_r+0x1334>
   2185c:	2306      	movs	r3, #6
   2185e:	9307      	str	r3, [sp, #28]
   21860:	9b07      	ldr	r3, [sp, #28]
   21862:	950f      	str	r5, [sp, #60]	; 0x3c
   21864:	930e      	str	r3, [sp, #56]	; 0x38
   21866:	2300      	movs	r3, #0
   21868:	4698      	mov	r8, r3
   2186a:	469a      	mov	sl, r3
   2186c:	9313      	str	r3, [sp, #76]	; 0x4c
   2186e:	4b24      	ldr	r3, [pc, #144]	; (21900 <_svfprintf_r+0x13d4>)
   21870:	9408      	str	r4, [sp, #32]
   21872:	9311      	str	r3, [sp, #68]	; 0x44
   21874:	f7fe ff78 	bl	20768 <_svfprintf_r+0x23c>
   21878:	2320      	movs	r3, #32
   2187a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2187c:	439a      	bics	r2, r3
   2187e:	3b1a      	subs	r3, #26
   21880:	920e      	str	r2, [sp, #56]	; 0x38
   21882:	469a      	mov	sl, r3
   21884:	e5f1      	b.n	2146a <_svfprintf_r+0xf3e>
   21886:	ab23      	add	r3, sp, #140	; 0x8c
   21888:	931b      	str	r3, [sp, #108]	; 0x6c
   2188a:	9304      	str	r3, [sp, #16]
   2188c:	ab20      	add	r3, sp, #128	; 0x80
   2188e:	9303      	str	r3, [sp, #12]
   21890:	ab1f      	add	r3, sp, #124	; 0x7c
   21892:	9302      	str	r3, [sp, #8]
   21894:	4653      	mov	r3, sl
   21896:	9301      	str	r3, [sp, #4]
   21898:	2303      	movs	r3, #3
   2189a:	464a      	mov	r2, r9
   2189c:	9300      	str	r3, [sp, #0]
   2189e:	9809      	ldr	r0, [sp, #36]	; 0x24
   218a0:	9b07      	ldr	r3, [sp, #28]
   218a2:	f000 fa05 	bl	21cb0 <_dtoa_r>
   218a6:	0003      	movs	r3, r0
   218a8:	4453      	add	r3, sl
   218aa:	9011      	str	r0, [sp, #68]	; 0x44
   218ac:	4698      	mov	r8, r3
   218ae:	4655      	mov	r5, sl
   218b0:	e6e4      	b.n	2167c <_svfprintf_r+0x1150>
   218b2:	232d      	movs	r3, #45	; 0x2d
   218b4:	aa16      	add	r2, sp, #88	; 0x58
   218b6:	77d3      	strb	r3, [r2, #31]
   218b8:	4698      	mov	r8, r3
   218ba:	f7fe ffdb 	bl	20874 <_svfprintf_r+0x348>
   218be:	2280      	movs	r2, #128	; 0x80
   218c0:	0612      	lsls	r2, r2, #24
   218c2:	4694      	mov	ip, r2
   218c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   218c6:	4699      	mov	r9, r3
   218c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   218ca:	4463      	add	r3, ip
   218cc:	9307      	str	r3, [sp, #28]
   218ce:	232d      	movs	r3, #45	; 0x2d
   218d0:	9310      	str	r3, [sp, #64]	; 0x40
   218d2:	e5d7      	b.n	21484 <_svfprintf_r+0xf58>
   218d4:	9a18      	ldr	r2, [sp, #96]	; 0x60
   218d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   218d8:	4694      	mov	ip, r2
   218da:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   218dc:	4463      	add	r3, ip
   218de:	930e      	str	r3, [sp, #56]	; 0x38
   218e0:	2a00      	cmp	r2, #0
   218e2:	dc00      	bgt.n	218e6 <_svfprintf_r+0x13ba>
   218e4:	e0ce      	b.n	21a84 <_svfprintf_r+0x1558>
   218e6:	001a      	movs	r2, r3
   218e8:	43db      	mvns	r3, r3
   218ea:	17db      	asrs	r3, r3, #31
   218ec:	401a      	ands	r2, r3
   218ee:	2367      	movs	r3, #103	; 0x67
   218f0:	9207      	str	r2, [sp, #28]
   218f2:	9312      	str	r3, [sp, #72]	; 0x48
   218f4:	e624      	b.n	21540 <_svfprintf_r+0x1014>
   218f6:	46c0      	nop			; (mov r8, r8)
   218f8:	00026d88 	.word	0x00026d88
   218fc:	00026d4c 	.word	0x00026d4c
   21900:	00026d80 	.word	0x00026d80
   21904:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   21906:	9313      	str	r3, [sp, #76]	; 0x4c
   21908:	2b00      	cmp	r3, #0
   2190a:	dc00      	bgt.n	2190e <_svfprintf_r+0x13e2>
   2190c:	e0d5      	b.n	21aba <_svfprintf_r+0x158e>
   2190e:	4652      	mov	r2, sl
   21910:	2a00      	cmp	r2, #0
   21912:	d000      	beq.n	21916 <_svfprintf_r+0x13ea>
   21914:	e092      	b.n	21a3c <_svfprintf_r+0x1510>
   21916:	07e2      	lsls	r2, r4, #31
   21918:	d500      	bpl.n	2191c <_svfprintf_r+0x13f0>
   2191a:	e08f      	b.n	21a3c <_svfprintf_r+0x1510>
   2191c:	9307      	str	r3, [sp, #28]
   2191e:	930e      	str	r3, [sp, #56]	; 0x38
   21920:	e60e      	b.n	21540 <_svfprintf_r+0x1014>
   21922:	ab16      	add	r3, sp, #88	; 0x58
   21924:	7fdb      	ldrb	r3, [r3, #31]
   21926:	950f      	str	r5, [sp, #60]	; 0x3c
   21928:	4698      	mov	r8, r3
   2192a:	4653      	mov	r3, sl
   2192c:	9307      	str	r3, [sp, #28]
   2192e:	930e      	str	r3, [sp, #56]	; 0x38
   21930:	2300      	movs	r3, #0
   21932:	9408      	str	r4, [sp, #32]
   21934:	469a      	mov	sl, r3
   21936:	9313      	str	r3, [sp, #76]	; 0x4c
   21938:	f7fe ff10 	bl	2075c <_svfprintf_r+0x230>
   2193c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2193e:	4698      	mov	r8, r3
   21940:	9b12      	ldr	r3, [sp, #72]	; 0x48
   21942:	44a8      	add	r8, r5
   21944:	2b47      	cmp	r3, #71	; 0x47
   21946:	d000      	beq.n	2194a <_svfprintf_r+0x141e>
   21948:	e5c4      	b.n	214d4 <_svfprintf_r+0xfa8>
   2194a:	07e3      	lsls	r3, r4, #31
   2194c:	d500      	bpl.n	21950 <_svfprintf_r+0x1424>
   2194e:	e68e      	b.n	2166e <_svfprintf_r+0x1142>
   21950:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   21952:	9a11      	ldr	r2, [sp, #68]	; 0x44
   21954:	1a9b      	subs	r3, r3, r2
   21956:	9314      	str	r3, [sp, #80]	; 0x50
   21958:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2195a:	2b47      	cmp	r3, #71	; 0x47
   2195c:	d100      	bne.n	21960 <_svfprintf_r+0x1434>
   2195e:	e6cb      	b.n	216f8 <_svfprintf_r+0x11cc>
   21960:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   21962:	9313      	str	r3, [sp, #76]	; 0x4c
   21964:	e6d2      	b.n	2170c <_svfprintf_r+0x11e0>
   21966:	4244      	negs	r4, r0
   21968:	3010      	adds	r0, #16
   2196a:	db00      	blt.n	2196e <_svfprintf_r+0x1442>
   2196c:	e0d0      	b.n	21b10 <_svfprintf_r+0x15e4>
   2196e:	486e      	ldr	r0, [pc, #440]	; (21b28 <_svfprintf_r+0x15fc>)
   21970:	2610      	movs	r6, #16
   21972:	0005      	movs	r5, r0
   21974:	e003      	b.n	2197e <_svfprintf_r+0x1452>
   21976:	3208      	adds	r2, #8
   21978:	3c10      	subs	r4, #16
   2197a:	2c10      	cmp	r4, #16
   2197c:	dd38      	ble.n	219f0 <_svfprintf_r+0x14c4>
   2197e:	3110      	adds	r1, #16
   21980:	3301      	adds	r3, #1
   21982:	6015      	str	r5, [r2, #0]
   21984:	6056      	str	r6, [r2, #4]
   21986:	60b9      	str	r1, [r7, #8]
   21988:	607b      	str	r3, [r7, #4]
   2198a:	2b07      	cmp	r3, #7
   2198c:	ddf3      	ble.n	21976 <_svfprintf_r+0x144a>
   2198e:	003a      	movs	r2, r7
   21990:	9906      	ldr	r1, [sp, #24]
   21992:	9809      	ldr	r0, [sp, #36]	; 0x24
   21994:	f002 f86e 	bl	23a74 <__ssprint_r>
   21998:	2800      	cmp	r0, #0
   2199a:	d001      	beq.n	219a0 <_svfprintf_r+0x1474>
   2199c:	f7fe fe4d 	bl	2063a <_svfprintf_r+0x10e>
   219a0:	68b9      	ldr	r1, [r7, #8]
   219a2:	687b      	ldr	r3, [r7, #4]
   219a4:	aa32      	add	r2, sp, #200	; 0xc8
   219a6:	e7e7      	b.n	21978 <_svfprintf_r+0x144c>
   219a8:	003a      	movs	r2, r7
   219aa:	9906      	ldr	r1, [sp, #24]
   219ac:	9809      	ldr	r0, [sp, #36]	; 0x24
   219ae:	f002 f861 	bl	23a74 <__ssprint_r>
   219b2:	2800      	cmp	r0, #0
   219b4:	d001      	beq.n	219ba <_svfprintf_r+0x148e>
   219b6:	f7fe fe40 	bl	2063a <_svfprintf_r+0x10e>
   219ba:	981f      	ldr	r0, [sp, #124]	; 0x7c
   219bc:	68b9      	ldr	r1, [r7, #8]
   219be:	687b      	ldr	r3, [r7, #4]
   219c0:	aa32      	add	r2, sp, #200	; 0xc8
   219c2:	e600      	b.n	215c6 <_svfprintf_r+0x109a>
   219c4:	9a18      	ldr	r2, [sp, #96]	; 0x60
   219c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   219c8:	4694      	mov	ip, r2
   219ca:	4463      	add	r3, ip
   219cc:	001a      	movs	r2, r3
   219ce:	930e      	str	r3, [sp, #56]	; 0x38
   219d0:	e78a      	b.n	218e8 <_svfprintf_r+0x13bc>
   219d2:	212e      	movs	r1, #46	; 0x2e
   219d4:	2330      	movs	r3, #48	; 0x30
   219d6:	aa16      	add	r2, sp, #88	; 0x58
   219d8:	1852      	adds	r2, r2, r1
   219da:	7013      	strb	r3, [r2, #0]
   219dc:	002b      	movs	r3, r5
   219de:	aa16      	add	r2, sp, #88	; 0x58
   219e0:	3101      	adds	r1, #1
   219e2:	3330      	adds	r3, #48	; 0x30
   219e4:	1852      	adds	r2, r2, r1
   219e6:	7013      	strb	r3, [r2, #0]
   219e8:	ab22      	add	r3, sp, #136	; 0x88
   219ea:	e6e2      	b.n	217b2 <_svfprintf_r+0x1286>
   219ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   219ee:	e585      	b.n	214fc <_svfprintf_r+0xfd0>
   219f0:	46a9      	mov	r9, r5
   219f2:	4648      	mov	r0, r9
   219f4:	1909      	adds	r1, r1, r4
   219f6:	3301      	adds	r3, #1
   219f8:	6010      	str	r0, [r2, #0]
   219fa:	6054      	str	r4, [r2, #4]
   219fc:	60b9      	str	r1, [r7, #8]
   219fe:	3208      	adds	r2, #8
   21a00:	607b      	str	r3, [r7, #4]
   21a02:	2b07      	cmp	r3, #7
   21a04:	dc00      	bgt.n	21a08 <_svfprintf_r+0x14dc>
   21a06:	e5e1      	b.n	215cc <_svfprintf_r+0x10a0>
   21a08:	003a      	movs	r2, r7
   21a0a:	9906      	ldr	r1, [sp, #24]
   21a0c:	9809      	ldr	r0, [sp, #36]	; 0x24
   21a0e:	f002 f831 	bl	23a74 <__ssprint_r>
   21a12:	2800      	cmp	r0, #0
   21a14:	d001      	beq.n	21a1a <_svfprintf_r+0x14ee>
   21a16:	f7fe fe10 	bl	2063a <_svfprintf_r+0x10e>
   21a1a:	68b9      	ldr	r1, [r7, #8]
   21a1c:	687b      	ldr	r3, [r7, #4]
   21a1e:	aa32      	add	r2, sp, #200	; 0xc8
   21a20:	e5d4      	b.n	215cc <_svfprintf_r+0x10a0>
   21a22:	9b15      	ldr	r3, [sp, #84]	; 0x54
   21a24:	2b00      	cmp	r3, #0
   21a26:	db38      	blt.n	21a9a <_svfprintf_r+0x156e>
   21a28:	ab16      	add	r3, sp, #88	; 0x58
   21a2a:	7fdb      	ldrb	r3, [r3, #31]
   21a2c:	4698      	mov	r8, r3
   21a2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   21a30:	2b47      	cmp	r3, #71	; 0x47
   21a32:	dc2e      	bgt.n	21a92 <_svfprintf_r+0x1566>
   21a34:	4b3d      	ldr	r3, [pc, #244]	; (21b2c <_svfprintf_r+0x1600>)
   21a36:	9311      	str	r3, [sp, #68]	; 0x44
   21a38:	f7fe ff23 	bl	20882 <_svfprintf_r+0x356>
   21a3c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   21a3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   21a40:	4694      	mov	ip, r2
   21a42:	4463      	add	r3, ip
   21a44:	4453      	add	r3, sl
   21a46:	001a      	movs	r2, r3
   21a48:	930e      	str	r3, [sp, #56]	; 0x38
   21a4a:	43db      	mvns	r3, r3
   21a4c:	17db      	asrs	r3, r3, #31
   21a4e:	401a      	ands	r2, r3
   21a50:	9207      	str	r2, [sp, #28]
   21a52:	e575      	b.n	21540 <_svfprintf_r+0x1014>
   21a54:	2301      	movs	r3, #1
   21a56:	4023      	ands	r3, r4
   21a58:	9313      	str	r3, [sp, #76]	; 0x4c
   21a5a:	d000      	beq.n	21a5e <_svfprintf_r+0x1532>
   21a5c:	e6b4      	b.n	217c8 <_svfprintf_r+0x129c>
   21a5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   21a60:	43d3      	mvns	r3, r2
   21a62:	17db      	asrs	r3, r3, #31
   21a64:	401a      	ands	r2, r3
   21a66:	9207      	str	r2, [sp, #28]
   21a68:	e56a      	b.n	21540 <_svfprintf_r+0x1014>
   21a6a:	4a2f      	ldr	r2, [pc, #188]	; (21b28 <_svfprintf_r+0x15fc>)
   21a6c:	687b      	ldr	r3, [r7, #4]
   21a6e:	4691      	mov	r9, r2
   21a70:	e42d      	b.n	212ce <_svfprintf_r+0xda2>
   21a72:	2301      	movs	r3, #1
   21a74:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   21a76:	391b      	subs	r1, #27
   21a78:	1a9d      	subs	r5, r3, r2
   21a7a:	aa16      	add	r2, sp, #88	; 0x58
   21a7c:	332c      	adds	r3, #44	; 0x2c
   21a7e:	1852      	adds	r2, r2, r1
   21a80:	7013      	strb	r3, [r2, #0]
   21a82:	e656      	b.n	21732 <_svfprintf_r+0x1206>
   21a84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21a86:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   21a88:	1a98      	subs	r0, r3, r2
   21a8a:	1c43      	adds	r3, r0, #1
   21a8c:	001a      	movs	r2, r3
   21a8e:	930e      	str	r3, [sp, #56]	; 0x38
   21a90:	e72a      	b.n	218e8 <_svfprintf_r+0x13bc>
   21a92:	4b27      	ldr	r3, [pc, #156]	; (21b30 <_svfprintf_r+0x1604>)
   21a94:	9311      	str	r3, [sp, #68]	; 0x44
   21a96:	f7fe fef4 	bl	20882 <_svfprintf_r+0x356>
   21a9a:	232d      	movs	r3, #45	; 0x2d
   21a9c:	aa16      	add	r2, sp, #88	; 0x58
   21a9e:	77d3      	strb	r3, [r2, #31]
   21aa0:	4698      	mov	r8, r3
   21aa2:	e7c4      	b.n	21a2e <_svfprintf_r+0x1502>
   21aa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   21aa6:	1d1a      	adds	r2, r3, #4
   21aa8:	681b      	ldr	r3, [r3, #0]
   21aaa:	469a      	mov	sl, r3
   21aac:	2b00      	cmp	r3, #0
   21aae:	db36      	blt.n	21b1e <_svfprintf_r+0x15f2>
   21ab0:	784b      	ldrb	r3, [r1, #1]
   21ab2:	920f      	str	r2, [sp, #60]	; 0x3c
   21ab4:	4659      	mov	r1, fp
   21ab6:	f7fe fd9d 	bl	205f4 <_svfprintf_r+0xc8>
   21aba:	4653      	mov	r3, sl
   21abc:	2b00      	cmp	r3, #0
   21abe:	d101      	bne.n	21ac4 <_svfprintf_r+0x1598>
   21ac0:	07e3      	lsls	r3, r4, #31
   21ac2:	d503      	bpl.n	21acc <_svfprintf_r+0x15a0>
   21ac4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   21ac6:	1c58      	adds	r0, r3, #1
   21ac8:	0003      	movs	r3, r0
   21aca:	e7bb      	b.n	21a44 <_svfprintf_r+0x1518>
   21acc:	2301      	movs	r3, #1
   21ace:	e725      	b.n	2191c <_svfprintf_r+0x13f0>
   21ad0:	ab16      	add	r3, sp, #88	; 0x58
   21ad2:	77d8      	strb	r0, [r3, #31]
   21ad4:	f7fe ff6c 	bl	209b0 <_svfprintf_r+0x484>
   21ad8:	ab16      	add	r3, sp, #88	; 0x58
   21ada:	77d8      	strb	r0, [r3, #31]
   21adc:	f7ff f814 	bl	20b08 <_svfprintf_r+0x5dc>
   21ae0:	230c      	movs	r3, #12
   21ae2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   21ae4:	6013      	str	r3, [r2, #0]
   21ae6:	3b0d      	subs	r3, #13
   21ae8:	930a      	str	r3, [sp, #40]	; 0x28
   21aea:	f7fe fdac 	bl	20646 <_svfprintf_r+0x11a>
   21aee:	aa16      	add	r2, sp, #88	; 0x58
   21af0:	232e      	movs	r3, #46	; 0x2e
   21af2:	4694      	mov	ip, r2
   21af4:	4463      	add	r3, ip
   21af6:	e65c      	b.n	217b2 <_svfprintf_r+0x1286>
   21af8:	ab16      	add	r3, sp, #88	; 0x58
   21afa:	77d8      	strb	r0, [r3, #31]
   21afc:	f7fe fe85 	bl	2080a <_svfprintf_r+0x2de>
   21b00:	ab16      	add	r3, sp, #88	; 0x58
   21b02:	77d8      	strb	r0, [r3, #31]
   21b04:	f7fe fddd 	bl	206c2 <_svfprintf_r+0x196>
   21b08:	ab16      	add	r3, sp, #88	; 0x58
   21b0a:	77d8      	strb	r0, [r3, #31]
   21b0c:	f7ff f87d 	bl	20c0a <_svfprintf_r+0x6de>
   21b10:	4805      	ldr	r0, [pc, #20]	; (21b28 <_svfprintf_r+0x15fc>)
   21b12:	4681      	mov	r9, r0
   21b14:	e76d      	b.n	219f2 <_svfprintf_r+0x14c6>
   21b16:	ab16      	add	r3, sp, #88	; 0x58
   21b18:	77d8      	strb	r0, [r3, #31]
   21b1a:	f7fe ff79 	bl	20a10 <_svfprintf_r+0x4e4>
   21b1e:	2301      	movs	r3, #1
   21b20:	425b      	negs	r3, r3
   21b22:	469a      	mov	sl, r3
   21b24:	e7c4      	b.n	21ab0 <_svfprintf_r+0x1584>
   21b26:	46c0      	nop			; (mov r8, r8)
   21b28:	00026d9c 	.word	0x00026d9c
   21b2c:	00026d50 	.word	0x00026d50
   21b30:	00026d54 	.word	0x00026d54

00021b34 <register_fini>:
   21b34:	4b03      	ldr	r3, [pc, #12]	; (21b44 <register_fini+0x10>)
   21b36:	b510      	push	{r4, lr}
   21b38:	2b00      	cmp	r3, #0
   21b3a:	d002      	beq.n	21b42 <register_fini+0xe>
   21b3c:	4802      	ldr	r0, [pc, #8]	; (21b48 <register_fini+0x14>)
   21b3e:	f000 f805 	bl	21b4c <atexit>
   21b42:	bd10      	pop	{r4, pc}
   21b44:	00000000 	.word	0x00000000
   21b48:	00022c39 	.word	0x00022c39

00021b4c <atexit>:
   21b4c:	b510      	push	{r4, lr}
   21b4e:	0001      	movs	r1, r0
   21b50:	2300      	movs	r3, #0
   21b52:	2200      	movs	r2, #0
   21b54:	2000      	movs	r0, #0
   21b56:	f002 f81d 	bl	23b94 <__register_exitproc>
   21b5a:	bd10      	pop	{r4, pc}

00021b5c <quorem>:
   21b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   21b5e:	4645      	mov	r5, r8
   21b60:	4680      	mov	r8, r0
   21b62:	46de      	mov	lr, fp
   21b64:	4657      	mov	r7, sl
   21b66:	464e      	mov	r6, r9
   21b68:	4642      	mov	r2, r8
   21b6a:	b5e0      	push	{r5, r6, r7, lr}
   21b6c:	690c      	ldr	r4, [r1, #16]
   21b6e:	6912      	ldr	r2, [r2, #16]
   21b70:	b085      	sub	sp, #20
   21b72:	000b      	movs	r3, r1
   21b74:	9102      	str	r1, [sp, #8]
   21b76:	2000      	movs	r0, #0
   21b78:	4294      	cmp	r4, r2
   21b7a:	dd00      	ble.n	21b7e <quorem+0x22>
   21b7c:	e090      	b.n	21ca0 <quorem+0x144>
   21b7e:	2214      	movs	r2, #20
   21b80:	4694      	mov	ip, r2
   21b82:	4463      	add	r3, ip
   21b84:	4699      	mov	r9, r3
   21b86:	464a      	mov	r2, r9
   21b88:	3c01      	subs	r4, #1
   21b8a:	00a3      	lsls	r3, r4, #2
   21b8c:	18d6      	adds	r6, r2, r3
   21b8e:	2214      	movs	r2, #20
   21b90:	4442      	add	r2, r8
   21b92:	4693      	mov	fp, r2
   21b94:	449b      	add	fp, r3
   21b96:	6833      	ldr	r3, [r6, #0]
   21b98:	0015      	movs	r5, r2
   21b9a:	1c59      	adds	r1, r3, #1
   21b9c:	465b      	mov	r3, fp
   21b9e:	6818      	ldr	r0, [r3, #0]
   21ba0:	9201      	str	r2, [sp, #4]
   21ba2:	f7fb f8bb 	bl	1cd1c <__udivsi3>
   21ba6:	1e03      	subs	r3, r0, #0
   21ba8:	9000      	str	r0, [sp, #0]
   21baa:	d042      	beq.n	21c32 <quorem+0xd6>
   21bac:	0029      	movs	r1, r5
   21bae:	2700      	movs	r7, #0
   21bb0:	464d      	mov	r5, r9
   21bb2:	2000      	movs	r0, #0
   21bb4:	46b1      	mov	r9, r6
   21bb6:	46a2      	mov	sl, r4
   21bb8:	003e      	movs	r6, r7
   21bba:	0004      	movs	r4, r0
   21bbc:	469c      	mov	ip, r3
   21bbe:	002f      	movs	r7, r5
   21bc0:	0008      	movs	r0, r1
   21bc2:	9503      	str	r5, [sp, #12]
   21bc4:	4663      	mov	r3, ip
   21bc6:	cf04      	ldmia	r7!, {r2}
   21bc8:	0415      	lsls	r5, r2, #16
   21bca:	0c2d      	lsrs	r5, r5, #16
   21bcc:	435d      	muls	r5, r3
   21bce:	0c12      	lsrs	r2, r2, #16
   21bd0:	435a      	muls	r2, r3
   21bd2:	19ad      	adds	r5, r5, r6
   21bd4:	0c2b      	lsrs	r3, r5, #16
   21bd6:	18d2      	adds	r2, r2, r3
   21bd8:	6803      	ldr	r3, [r0, #0]
   21bda:	042d      	lsls	r5, r5, #16
   21bdc:	0419      	lsls	r1, r3, #16
   21bde:	0c09      	lsrs	r1, r1, #16
   21be0:	1909      	adds	r1, r1, r4
   21be2:	0c16      	lsrs	r6, r2, #16
   21be4:	0c2d      	lsrs	r5, r5, #16
   21be6:	0412      	lsls	r2, r2, #16
   21be8:	1b49      	subs	r1, r1, r5
   21bea:	0c12      	lsrs	r2, r2, #16
   21bec:	0c1b      	lsrs	r3, r3, #16
   21bee:	1a9b      	subs	r3, r3, r2
   21bf0:	140a      	asrs	r2, r1, #16
   21bf2:	189b      	adds	r3, r3, r2
   21bf4:	0409      	lsls	r1, r1, #16
   21bf6:	141c      	asrs	r4, r3, #16
   21bf8:	0c09      	lsrs	r1, r1, #16
   21bfa:	041b      	lsls	r3, r3, #16
   21bfc:	4319      	orrs	r1, r3
   21bfe:	c002      	stmia	r0!, {r1}
   21c00:	45b9      	cmp	r9, r7
   21c02:	d2df      	bcs.n	21bc4 <quorem+0x68>
   21c04:	9b03      	ldr	r3, [sp, #12]
   21c06:	464e      	mov	r6, r9
   21c08:	4699      	mov	r9, r3
   21c0a:	465b      	mov	r3, fp
   21c0c:	681b      	ldr	r3, [r3, #0]
   21c0e:	4654      	mov	r4, sl
   21c10:	2b00      	cmp	r3, #0
   21c12:	d10e      	bne.n	21c32 <quorem+0xd6>
   21c14:	465b      	mov	r3, fp
   21c16:	9a01      	ldr	r2, [sp, #4]
   21c18:	3b04      	subs	r3, #4
   21c1a:	429a      	cmp	r2, r3
   21c1c:	d304      	bcc.n	21c28 <quorem+0xcc>
   21c1e:	e006      	b.n	21c2e <quorem+0xd2>
   21c20:	3b04      	subs	r3, #4
   21c22:	3c01      	subs	r4, #1
   21c24:	429a      	cmp	r2, r3
   21c26:	d202      	bcs.n	21c2e <quorem+0xd2>
   21c28:	6819      	ldr	r1, [r3, #0]
   21c2a:	2900      	cmp	r1, #0
   21c2c:	d0f8      	beq.n	21c20 <quorem+0xc4>
   21c2e:	4643      	mov	r3, r8
   21c30:	611c      	str	r4, [r3, #16]
   21c32:	9902      	ldr	r1, [sp, #8]
   21c34:	4640      	mov	r0, r8
   21c36:	f001 fd89 	bl	2374c <__mcmp>
   21c3a:	2800      	cmp	r0, #0
   21c3c:	db2f      	blt.n	21c9e <quorem+0x142>
   21c3e:	464f      	mov	r7, r9
   21c40:	2000      	movs	r0, #0
   21c42:	9b00      	ldr	r3, [sp, #0]
   21c44:	9d01      	ldr	r5, [sp, #4]
   21c46:	3301      	adds	r3, #1
   21c48:	9300      	str	r3, [sp, #0]
   21c4a:	682b      	ldr	r3, [r5, #0]
   21c4c:	cf02      	ldmia	r7!, {r1}
   21c4e:	041a      	lsls	r2, r3, #16
   21c50:	0c12      	lsrs	r2, r2, #16
   21c52:	1810      	adds	r0, r2, r0
   21c54:	040a      	lsls	r2, r1, #16
   21c56:	0c12      	lsrs	r2, r2, #16
   21c58:	1a82      	subs	r2, r0, r2
   21c5a:	0c09      	lsrs	r1, r1, #16
   21c5c:	0c1b      	lsrs	r3, r3, #16
   21c5e:	1a5b      	subs	r3, r3, r1
   21c60:	1411      	asrs	r1, r2, #16
   21c62:	185b      	adds	r3, r3, r1
   21c64:	0412      	lsls	r2, r2, #16
   21c66:	1418      	asrs	r0, r3, #16
   21c68:	0c12      	lsrs	r2, r2, #16
   21c6a:	041b      	lsls	r3, r3, #16
   21c6c:	4313      	orrs	r3, r2
   21c6e:	c508      	stmia	r5!, {r3}
   21c70:	42be      	cmp	r6, r7
   21c72:	d2ea      	bcs.n	21c4a <quorem+0xee>
   21c74:	9901      	ldr	r1, [sp, #4]
   21c76:	00a3      	lsls	r3, r4, #2
   21c78:	468c      	mov	ip, r1
   21c7a:	4463      	add	r3, ip
   21c7c:	681a      	ldr	r2, [r3, #0]
   21c7e:	2a00      	cmp	r2, #0
   21c80:	d10d      	bne.n	21c9e <quorem+0x142>
   21c82:	3b04      	subs	r3, #4
   21c84:	000a      	movs	r2, r1
   21c86:	4299      	cmp	r1, r3
   21c88:	d304      	bcc.n	21c94 <quorem+0x138>
   21c8a:	e006      	b.n	21c9a <quorem+0x13e>
   21c8c:	3b04      	subs	r3, #4
   21c8e:	3c01      	subs	r4, #1
   21c90:	429a      	cmp	r2, r3
   21c92:	d202      	bcs.n	21c9a <quorem+0x13e>
   21c94:	6819      	ldr	r1, [r3, #0]
   21c96:	2900      	cmp	r1, #0
   21c98:	d0f8      	beq.n	21c8c <quorem+0x130>
   21c9a:	4643      	mov	r3, r8
   21c9c:	611c      	str	r4, [r3, #16]
   21c9e:	9800      	ldr	r0, [sp, #0]
   21ca0:	b005      	add	sp, #20
   21ca2:	bc3c      	pop	{r2, r3, r4, r5}
   21ca4:	4690      	mov	r8, r2
   21ca6:	4699      	mov	r9, r3
   21ca8:	46a2      	mov	sl, r4
   21caa:	46ab      	mov	fp, r5
   21cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21cae:	46c0      	nop			; (mov r8, r8)

00021cb0 <_dtoa_r>:
   21cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   21cb2:	4657      	mov	r7, sl
   21cb4:	464e      	mov	r6, r9
   21cb6:	4645      	mov	r5, r8
   21cb8:	46de      	mov	lr, fp
   21cba:	b5e0      	push	{r5, r6, r7, lr}
   21cbc:	6c01      	ldr	r1, [r0, #64]	; 0x40
   21cbe:	b099      	sub	sp, #100	; 0x64
   21cc0:	4682      	mov	sl, r0
   21cc2:	001d      	movs	r5, r3
   21cc4:	0016      	movs	r6, r2
   21cc6:	001f      	movs	r7, r3
   21cc8:	2900      	cmp	r1, #0
   21cca:	d009      	beq.n	21ce0 <_dtoa_r+0x30>
   21ccc:	2301      	movs	r3, #1
   21cce:	6c42      	ldr	r2, [r0, #68]	; 0x44
   21cd0:	4093      	lsls	r3, r2
   21cd2:	604a      	str	r2, [r1, #4]
   21cd4:	608b      	str	r3, [r1, #8]
   21cd6:	f001 fb2d 	bl	23334 <_Bfree>
   21cda:	2300      	movs	r3, #0
   21cdc:	4652      	mov	r2, sl
   21cde:	6413      	str	r3, [r2, #64]	; 0x40
   21ce0:	46b8      	mov	r8, r7
   21ce2:	2f00      	cmp	r7, #0
   21ce4:	db37      	blt.n	21d56 <_dtoa_r+0xa6>
   21ce6:	2300      	movs	r3, #0
   21ce8:	9a25      	ldr	r2, [sp, #148]	; 0x94
   21cea:	6013      	str	r3, [r2, #0]
   21cec:	4642      	mov	r2, r8
   21cee:	4bd6      	ldr	r3, [pc, #856]	; (22048 <_dtoa_r+0x398>)
   21cf0:	401a      	ands	r2, r3
   21cf2:	429a      	cmp	r2, r3
   21cf4:	d018      	beq.n	21d28 <_dtoa_r+0x78>
   21cf6:	2200      	movs	r2, #0
   21cf8:	2300      	movs	r3, #0
   21cfa:	0030      	movs	r0, r6
   21cfc:	0039      	movs	r1, r7
   21cfe:	f7fb f993 	bl	1d028 <__aeabi_dcmpeq>
   21d02:	2800      	cmp	r0, #0
   21d04:	d02f      	beq.n	21d66 <_dtoa_r+0xb6>
   21d06:	2301      	movs	r3, #1
   21d08:	9a24      	ldr	r2, [sp, #144]	; 0x90
   21d0a:	6013      	str	r3, [r2, #0]
   21d0c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   21d0e:	2b00      	cmp	r3, #0
   21d10:	d100      	bne.n	21d14 <_dtoa_r+0x64>
   21d12:	e22a      	b.n	2216a <_dtoa_r+0x4ba>
   21d14:	48cd      	ldr	r0, [pc, #820]	; (2204c <_dtoa_r+0x39c>)
   21d16:	6018      	str	r0, [r3, #0]
   21d18:	3801      	subs	r0, #1
   21d1a:	b019      	add	sp, #100	; 0x64
   21d1c:	bc3c      	pop	{r2, r3, r4, r5}
   21d1e:	4690      	mov	r8, r2
   21d20:	4699      	mov	r9, r3
   21d22:	46a2      	mov	sl, r4
   21d24:	46ab      	mov	fp, r5
   21d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21d28:	4bc9      	ldr	r3, [pc, #804]	; (22050 <_dtoa_r+0x3a0>)
   21d2a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   21d2c:	6013      	str	r3, [r2, #0]
   21d2e:	2e00      	cmp	r6, #0
   21d30:	d10b      	bne.n	21d4a <_dtoa_r+0x9a>
   21d32:	4643      	mov	r3, r8
   21d34:	0318      	lsls	r0, r3, #12
   21d36:	d108      	bne.n	21d4a <_dtoa_r+0x9a>
   21d38:	9b26      	ldr	r3, [sp, #152]	; 0x98
   21d3a:	48c6      	ldr	r0, [pc, #792]	; (22054 <_dtoa_r+0x3a4>)
   21d3c:	2b00      	cmp	r3, #0
   21d3e:	d0ec      	beq.n	21d1a <_dtoa_r+0x6a>
   21d40:	0003      	movs	r3, r0
   21d42:	3308      	adds	r3, #8
   21d44:	9a26      	ldr	r2, [sp, #152]	; 0x98
   21d46:	6013      	str	r3, [r2, #0]
   21d48:	e7e7      	b.n	21d1a <_dtoa_r+0x6a>
   21d4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   21d4c:	48c2      	ldr	r0, [pc, #776]	; (22058 <_dtoa_r+0x3a8>)
   21d4e:	2b00      	cmp	r3, #0
   21d50:	d0e3      	beq.n	21d1a <_dtoa_r+0x6a>
   21d52:	1cc3      	adds	r3, r0, #3
   21d54:	e7f6      	b.n	21d44 <_dtoa_r+0x94>
   21d56:	2301      	movs	r3, #1
   21d58:	9a25      	ldr	r2, [sp, #148]	; 0x94
   21d5a:	0068      	lsls	r0, r5, #1
   21d5c:	6013      	str	r3, [r2, #0]
   21d5e:	0843      	lsrs	r3, r0, #1
   21d60:	4698      	mov	r8, r3
   21d62:	001f      	movs	r7, r3
   21d64:	e7c2      	b.n	21cec <_dtoa_r+0x3c>
   21d66:	ab16      	add	r3, sp, #88	; 0x58
   21d68:	9301      	str	r3, [sp, #4]
   21d6a:	ab17      	add	r3, sp, #92	; 0x5c
   21d6c:	9300      	str	r3, [sp, #0]
   21d6e:	0032      	movs	r2, r6
   21d70:	003b      	movs	r3, r7
   21d72:	4650      	mov	r0, sl
   21d74:	f001 fda0 	bl	238b8 <__d2b>
   21d78:	4643      	mov	r3, r8
   21d7a:	4683      	mov	fp, r0
   21d7c:	0d1a      	lsrs	r2, r3, #20
   21d7e:	d100      	bne.n	21d82 <_dtoa_r+0xd2>
   21d80:	e1d6      	b.n	22130 <_dtoa_r+0x480>
   21d82:	033b      	lsls	r3, r7, #12
   21d84:	4cb5      	ldr	r4, [pc, #724]	; (2205c <_dtoa_r+0x3ac>)
   21d86:	0b1b      	lsrs	r3, r3, #12
   21d88:	431c      	orrs	r4, r3
   21d8a:	4bb5      	ldr	r3, [pc, #724]	; (22060 <_dtoa_r+0x3b0>)
   21d8c:	0030      	movs	r0, r6
   21d8e:	4698      	mov	r8, r3
   21d90:	9b16      	ldr	r3, [sp, #88]	; 0x58
   21d92:	0021      	movs	r1, r4
   21d94:	4699      	mov	r9, r3
   21d96:	2300      	movs	r3, #0
   21d98:	4490      	add	r8, r2
   21d9a:	930f      	str	r3, [sp, #60]	; 0x3c
   21d9c:	2200      	movs	r2, #0
   21d9e:	4bb1      	ldr	r3, [pc, #708]	; (22064 <_dtoa_r+0x3b4>)
   21da0:	f7fd fb00 	bl	1f3a4 <__aeabi_dsub>
   21da4:	4ab0      	ldr	r2, [pc, #704]	; (22068 <_dtoa_r+0x3b8>)
   21da6:	4bb1      	ldr	r3, [pc, #708]	; (2206c <_dtoa_r+0x3bc>)
   21da8:	f7fd f87c 	bl	1eea4 <__aeabi_dmul>
   21dac:	4ab0      	ldr	r2, [pc, #704]	; (22070 <_dtoa_r+0x3c0>)
   21dae:	4bb1      	ldr	r3, [pc, #708]	; (22074 <_dtoa_r+0x3c4>)
   21db0:	f7fc f934 	bl	1e01c <__aeabi_dadd>
   21db4:	0004      	movs	r4, r0
   21db6:	4640      	mov	r0, r8
   21db8:	000d      	movs	r5, r1
   21dba:	f7fd fe5d 	bl	1fa78 <__aeabi_i2d>
   21dbe:	4aae      	ldr	r2, [pc, #696]	; (22078 <_dtoa_r+0x3c8>)
   21dc0:	4bae      	ldr	r3, [pc, #696]	; (2207c <_dtoa_r+0x3cc>)
   21dc2:	f7fd f86f 	bl	1eea4 <__aeabi_dmul>
   21dc6:	0002      	movs	r2, r0
   21dc8:	000b      	movs	r3, r1
   21dca:	0020      	movs	r0, r4
   21dcc:	0029      	movs	r1, r5
   21dce:	f7fc f925 	bl	1e01c <__aeabi_dadd>
   21dd2:	0004      	movs	r4, r0
   21dd4:	000d      	movs	r5, r1
   21dd6:	f7fd fe1b 	bl	1fa10 <__aeabi_d2iz>
   21dda:	2200      	movs	r2, #0
   21ddc:	9003      	str	r0, [sp, #12]
   21dde:	2300      	movs	r3, #0
   21de0:	0020      	movs	r0, r4
   21de2:	0029      	movs	r1, r5
   21de4:	f7fb f926 	bl	1d034 <__aeabi_dcmplt>
   21de8:	2800      	cmp	r0, #0
   21dea:	d000      	beq.n	21dee <_dtoa_r+0x13e>
   21dec:	e2b1      	b.n	22352 <_dtoa_r+0x6a2>
   21dee:	2301      	movs	r3, #1
   21df0:	9c03      	ldr	r4, [sp, #12]
   21df2:	930c      	str	r3, [sp, #48]	; 0x30
   21df4:	2c16      	cmp	r4, #22
   21df6:	d810      	bhi.n	21e1a <_dtoa_r+0x16a>
   21df8:	49a1      	ldr	r1, [pc, #644]	; (22080 <_dtoa_r+0x3d0>)
   21dfa:	00e3      	lsls	r3, r4, #3
   21dfc:	18c9      	adds	r1, r1, r3
   21dfe:	0032      	movs	r2, r6
   21e00:	6808      	ldr	r0, [r1, #0]
   21e02:	6849      	ldr	r1, [r1, #4]
   21e04:	003b      	movs	r3, r7
   21e06:	f7fb f929 	bl	1d05c <__aeabi_dcmpgt>
   21e0a:	2800      	cmp	r0, #0
   21e0c:	d100      	bne.n	21e10 <_dtoa_r+0x160>
   21e0e:	e31d      	b.n	2244c <_dtoa_r+0x79c>
   21e10:	0023      	movs	r3, r4
   21e12:	3b01      	subs	r3, #1
   21e14:	9303      	str	r3, [sp, #12]
   21e16:	2300      	movs	r3, #0
   21e18:	930c      	str	r3, [sp, #48]	; 0x30
   21e1a:	464b      	mov	r3, r9
   21e1c:	4642      	mov	r2, r8
   21e1e:	1a9a      	subs	r2, r3, r2
   21e20:	2300      	movs	r3, #0
   21e22:	9306      	str	r3, [sp, #24]
   21e24:	0013      	movs	r3, r2
   21e26:	3b01      	subs	r3, #1
   21e28:	9304      	str	r3, [sp, #16]
   21e2a:	d500      	bpl.n	21e2e <_dtoa_r+0x17e>
   21e2c:	e2a1      	b.n	22372 <_dtoa_r+0x6c2>
   21e2e:	9b03      	ldr	r3, [sp, #12]
   21e30:	2b00      	cmp	r3, #0
   21e32:	da00      	bge.n	21e36 <_dtoa_r+0x186>
   21e34:	e284      	b.n	22340 <_dtoa_r+0x690>
   21e36:	469c      	mov	ip, r3
   21e38:	930d      	str	r3, [sp, #52]	; 0x34
   21e3a:	2300      	movs	r3, #0
   21e3c:	9a04      	ldr	r2, [sp, #16]
   21e3e:	4699      	mov	r9, r3
   21e40:	0011      	movs	r1, r2
   21e42:	4461      	add	r1, ip
   21e44:	9104      	str	r1, [sp, #16]
   21e46:	9b22      	ldr	r3, [sp, #136]	; 0x88
   21e48:	2b09      	cmp	r3, #9
   21e4a:	d900      	bls.n	21e4e <_dtoa_r+0x19e>
   21e4c:	e18f      	b.n	2216e <_dtoa_r+0x4be>
   21e4e:	2401      	movs	r4, #1
   21e50:	2b05      	cmp	r3, #5
   21e52:	dd02      	ble.n	21e5a <_dtoa_r+0x1aa>
   21e54:	2400      	movs	r4, #0
   21e56:	3b04      	subs	r3, #4
   21e58:	9322      	str	r3, [sp, #136]	; 0x88
   21e5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   21e5c:	2b03      	cmp	r3, #3
   21e5e:	d101      	bne.n	21e64 <_dtoa_r+0x1b4>
   21e60:	f000 fcce 	bl	22800 <_dtoa_r+0xb50>
   21e64:	dc01      	bgt.n	21e6a <_dtoa_r+0x1ba>
   21e66:	f000 fc92 	bl	2278e <_dtoa_r+0xade>
   21e6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   21e6c:	2b04      	cmp	r3, #4
   21e6e:	d101      	bne.n	21e74 <_dtoa_r+0x1c4>
   21e70:	f000 fc40 	bl	226f4 <_dtoa_r+0xa44>
   21e74:	2301      	movs	r3, #1
   21e76:	930b      	str	r3, [sp, #44]	; 0x2c
   21e78:	9b22      	ldr	r3, [sp, #136]	; 0x88
   21e7a:	2b05      	cmp	r3, #5
   21e7c:	d001      	beq.n	21e82 <_dtoa_r+0x1d2>
   21e7e:	f000 fc8b 	bl	22798 <_dtoa_r+0xae8>
   21e82:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   21e84:	9b03      	ldr	r3, [sp, #12]
   21e86:	4694      	mov	ip, r2
   21e88:	4463      	add	r3, ip
   21e8a:	930e      	str	r3, [sp, #56]	; 0x38
   21e8c:	3301      	adds	r3, #1
   21e8e:	9307      	str	r3, [sp, #28]
   21e90:	1e1d      	subs	r5, r3, #0
   21e92:	dc01      	bgt.n	21e98 <_dtoa_r+0x1e8>
   21e94:	f000 fd49 	bl	2292a <_dtoa_r+0xc7a>
   21e98:	9b07      	ldr	r3, [sp, #28]
   21e9a:	4698      	mov	r8, r3
   21e9c:	2300      	movs	r3, #0
   21e9e:	4652      	mov	r2, sl
   21ea0:	2100      	movs	r1, #0
   21ea2:	6453      	str	r3, [r2, #68]	; 0x44
   21ea4:	2d17      	cmp	r5, #23
   21ea6:	d90a      	bls.n	21ebe <_dtoa_r+0x20e>
   21ea8:	2201      	movs	r2, #1
   21eaa:	3304      	adds	r3, #4
   21eac:	005b      	lsls	r3, r3, #1
   21eae:	0018      	movs	r0, r3
   21eb0:	3014      	adds	r0, #20
   21eb2:	0011      	movs	r1, r2
   21eb4:	3201      	adds	r2, #1
   21eb6:	4285      	cmp	r5, r0
   21eb8:	d2f8      	bcs.n	21eac <_dtoa_r+0x1fc>
   21eba:	4653      	mov	r3, sl
   21ebc:	6459      	str	r1, [r3, #68]	; 0x44
   21ebe:	4650      	mov	r0, sl
   21ec0:	f001 fa10 	bl	232e4 <_Balloc>
   21ec4:	4653      	mov	r3, sl
   21ec6:	6418      	str	r0, [r3, #64]	; 0x40
   21ec8:	4643      	mov	r3, r8
   21eca:	900a      	str	r0, [sp, #40]	; 0x28
   21ecc:	2b0e      	cmp	r3, #14
   21ece:	d900      	bls.n	21ed2 <_dtoa_r+0x222>
   21ed0:	e161      	b.n	22196 <_dtoa_r+0x4e6>
   21ed2:	2c00      	cmp	r4, #0
   21ed4:	d100      	bne.n	21ed8 <_dtoa_r+0x228>
   21ed6:	e15e      	b.n	22196 <_dtoa_r+0x4e6>
   21ed8:	9610      	str	r6, [sp, #64]	; 0x40
   21eda:	9711      	str	r7, [sp, #68]	; 0x44
   21edc:	9e03      	ldr	r6, [sp, #12]
   21ede:	2e00      	cmp	r6, #0
   21ee0:	dc01      	bgt.n	21ee6 <_dtoa_r+0x236>
   21ee2:	f000 fd25 	bl	22930 <_dtoa_r+0xc80>
   21ee6:	0032      	movs	r2, r6
   21ee8:	210f      	movs	r1, #15
   21eea:	4b65      	ldr	r3, [pc, #404]	; (22080 <_dtoa_r+0x3d0>)
   21eec:	400a      	ands	r2, r1
   21eee:	00d2      	lsls	r2, r2, #3
   21ef0:	189b      	adds	r3, r3, r2
   21ef2:	1136      	asrs	r6, r6, #4
   21ef4:	681c      	ldr	r4, [r3, #0]
   21ef6:	685d      	ldr	r5, [r3, #4]
   21ef8:	06f3      	lsls	r3, r6, #27
   21efa:	d401      	bmi.n	21f00 <_dtoa_r+0x250>
   21efc:	f000 fcca 	bl	22894 <_dtoa_r+0xbe4>
   21f00:	4b60      	ldr	r3, [pc, #384]	; (22084 <_dtoa_r+0x3d4>)
   21f02:	400e      	ands	r6, r1
   21f04:	6a1a      	ldr	r2, [r3, #32]
   21f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21f08:	9810      	ldr	r0, [sp, #64]	; 0x40
   21f0a:	9911      	ldr	r1, [sp, #68]	; 0x44
   21f0c:	f7fc fb96 	bl	1e63c <__aeabi_ddiv>
   21f10:	2303      	movs	r3, #3
   21f12:	4698      	mov	r8, r3
   21f14:	9008      	str	r0, [sp, #32]
   21f16:	9109      	str	r1, [sp, #36]	; 0x24
   21f18:	2e00      	cmp	r6, #0
   21f1a:	d011      	beq.n	21f40 <_dtoa_r+0x290>
   21f1c:	4f59      	ldr	r7, [pc, #356]	; (22084 <_dtoa_r+0x3d4>)
   21f1e:	2301      	movs	r3, #1
   21f20:	4233      	tst	r3, r6
   21f22:	d009      	beq.n	21f38 <_dtoa_r+0x288>
   21f24:	469c      	mov	ip, r3
   21f26:	683a      	ldr	r2, [r7, #0]
   21f28:	687b      	ldr	r3, [r7, #4]
   21f2a:	0020      	movs	r0, r4
   21f2c:	0029      	movs	r1, r5
   21f2e:	44e0      	add	r8, ip
   21f30:	f7fc ffb8 	bl	1eea4 <__aeabi_dmul>
   21f34:	0004      	movs	r4, r0
   21f36:	000d      	movs	r5, r1
   21f38:	1076      	asrs	r6, r6, #1
   21f3a:	3708      	adds	r7, #8
   21f3c:	2e00      	cmp	r6, #0
   21f3e:	d1ee      	bne.n	21f1e <_dtoa_r+0x26e>
   21f40:	0022      	movs	r2, r4
   21f42:	9808      	ldr	r0, [sp, #32]
   21f44:	9909      	ldr	r1, [sp, #36]	; 0x24
   21f46:	002b      	movs	r3, r5
   21f48:	f7fc fb78 	bl	1e63c <__aeabi_ddiv>
   21f4c:	0006      	movs	r6, r0
   21f4e:	000f      	movs	r7, r1
   21f50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   21f52:	2b00      	cmp	r3, #0
   21f54:	d009      	beq.n	21f6a <_dtoa_r+0x2ba>
   21f56:	2200      	movs	r2, #0
   21f58:	4b40      	ldr	r3, [pc, #256]	; (2205c <_dtoa_r+0x3ac>)
   21f5a:	0030      	movs	r0, r6
   21f5c:	0039      	movs	r1, r7
   21f5e:	f7fb f869 	bl	1d034 <__aeabi_dcmplt>
   21f62:	2800      	cmp	r0, #0
   21f64:	d001      	beq.n	21f6a <_dtoa_r+0x2ba>
   21f66:	f000 fdc2 	bl	22aee <_dtoa_r+0xe3e>
   21f6a:	4640      	mov	r0, r8
   21f6c:	f7fd fd84 	bl	1fa78 <__aeabi_i2d>
   21f70:	0032      	movs	r2, r6
   21f72:	003b      	movs	r3, r7
   21f74:	f7fc ff96 	bl	1eea4 <__aeabi_dmul>
   21f78:	2200      	movs	r2, #0
   21f7a:	4b43      	ldr	r3, [pc, #268]	; (22088 <_dtoa_r+0x3d8>)
   21f7c:	f7fc f84e 	bl	1e01c <__aeabi_dadd>
   21f80:	4a42      	ldr	r2, [pc, #264]	; (2208c <_dtoa_r+0x3dc>)
   21f82:	000b      	movs	r3, r1
   21f84:	4694      	mov	ip, r2
   21f86:	4463      	add	r3, ip
   21f88:	9008      	str	r0, [sp, #32]
   21f8a:	9109      	str	r1, [sp, #36]	; 0x24
   21f8c:	9309      	str	r3, [sp, #36]	; 0x24
   21f8e:	9b07      	ldr	r3, [sp, #28]
   21f90:	2b00      	cmp	r3, #0
   21f92:	d101      	bne.n	21f98 <_dtoa_r+0x2e8>
   21f94:	f000 fc50 	bl	22838 <_dtoa_r+0xb88>
   21f98:	9b03      	ldr	r3, [sp, #12]
   21f9a:	9313      	str	r3, [sp, #76]	; 0x4c
   21f9c:	9b07      	ldr	r3, [sp, #28]
   21f9e:	9312      	str	r3, [sp, #72]	; 0x48
   21fa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   21fa2:	2b00      	cmp	r3, #0
   21fa4:	d101      	bne.n	21faa <_dtoa_r+0x2fa>
   21fa6:	f000 fd1d 	bl	229e4 <_dtoa_r+0xd34>
   21faa:	9b12      	ldr	r3, [sp, #72]	; 0x48
   21fac:	2000      	movs	r0, #0
   21fae:	1e5a      	subs	r2, r3, #1
   21fb0:	4b33      	ldr	r3, [pc, #204]	; (22080 <_dtoa_r+0x3d0>)
   21fb2:	00d2      	lsls	r2, r2, #3
   21fb4:	189b      	adds	r3, r3, r2
   21fb6:	681a      	ldr	r2, [r3, #0]
   21fb8:	685b      	ldr	r3, [r3, #4]
   21fba:	4935      	ldr	r1, [pc, #212]	; (22090 <_dtoa_r+0x3e0>)
   21fbc:	f7fc fb3e 	bl	1e63c <__aeabi_ddiv>
   21fc0:	9a08      	ldr	r2, [sp, #32]
   21fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21fc4:	f7fd f9ee 	bl	1f3a4 <__aeabi_dsub>
   21fc8:	9008      	str	r0, [sp, #32]
   21fca:	9109      	str	r1, [sp, #36]	; 0x24
   21fcc:	0039      	movs	r1, r7
   21fce:	0030      	movs	r0, r6
   21fd0:	f7fd fd1e 	bl	1fa10 <__aeabi_d2iz>
   21fd4:	0004      	movs	r4, r0
   21fd6:	f7fd fd4f 	bl	1fa78 <__aeabi_i2d>
   21fda:	0002      	movs	r2, r0
   21fdc:	000b      	movs	r3, r1
   21fde:	0030      	movs	r0, r6
   21fe0:	0039      	movs	r1, r7
   21fe2:	f7fd f9df 	bl	1f3a4 <__aeabi_dsub>
   21fe6:	0005      	movs	r5, r0
   21fe8:	000e      	movs	r6, r1
   21fea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21fec:	3430      	adds	r4, #48	; 0x30
   21fee:	1c51      	adds	r1, r2, #1
   21ff0:	b2e7      	uxtb	r7, r4
   21ff2:	9114      	str	r1, [sp, #80]	; 0x50
   21ff4:	7017      	strb	r7, [r2, #0]
   21ff6:	0033      	movs	r3, r6
   21ff8:	9808      	ldr	r0, [sp, #32]
   21ffa:	9909      	ldr	r1, [sp, #36]	; 0x24
   21ffc:	002a      	movs	r2, r5
   21ffe:	f7fb f82d 	bl	1d05c <__aeabi_dcmpgt>
   22002:	2800      	cmp	r0, #0
   22004:	d001      	beq.n	2200a <_dtoa_r+0x35a>
   22006:	f000 fdfe 	bl	22c06 <_dtoa_r+0xf56>
   2200a:	002a      	movs	r2, r5
   2200c:	0033      	movs	r3, r6
   2200e:	2000      	movs	r0, #0
   22010:	4912      	ldr	r1, [pc, #72]	; (2205c <_dtoa_r+0x3ac>)
   22012:	f7fd f9c7 	bl	1f3a4 <__aeabi_dsub>
   22016:	0002      	movs	r2, r0
   22018:	000b      	movs	r3, r1
   2201a:	9808      	ldr	r0, [sp, #32]
   2201c:	9909      	ldr	r1, [sp, #36]	; 0x24
   2201e:	f7fb f81d 	bl	1d05c <__aeabi_dcmpgt>
   22022:	2800      	cmp	r0, #0
   22024:	d001      	beq.n	2202a <_dtoa_r+0x37a>
   22026:	f000 fde7 	bl	22bf8 <_dtoa_r+0xf48>
   2202a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2202c:	2b01      	cmp	r3, #1
   2202e:	d101      	bne.n	22034 <_dtoa_r+0x384>
   22030:	f000 fc78 	bl	22924 <_dtoa_r+0xc74>
   22034:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   22036:	9b12      	ldr	r3, [sp, #72]	; 0x48
   22038:	4694      	mov	ip, r2
   2203a:	4463      	add	r3, ip
   2203c:	4698      	mov	r8, r3
   2203e:	464b      	mov	r3, r9
   22040:	9312      	str	r3, [sp, #72]	; 0x48
   22042:	9b14      	ldr	r3, [sp, #80]	; 0x50
   22044:	4699      	mov	r9, r3
   22046:	e038      	b.n	220ba <_dtoa_r+0x40a>
   22048:	7ff00000 	.word	0x7ff00000
   2204c:	00026d89 	.word	0x00026d89
   22050:	0000270f 	.word	0x0000270f
   22054:	00026dac 	.word	0x00026dac
   22058:	00026db8 	.word	0x00026db8
   2205c:	3ff00000 	.word	0x3ff00000
   22060:	fffffc01 	.word	0xfffffc01
   22064:	3ff80000 	.word	0x3ff80000
   22068:	636f4361 	.word	0x636f4361
   2206c:	3fd287a7 	.word	0x3fd287a7
   22070:	8b60c8b3 	.word	0x8b60c8b3
   22074:	3fc68a28 	.word	0x3fc68a28
   22078:	509f79fb 	.word	0x509f79fb
   2207c:	3fd34413 	.word	0x3fd34413
   22080:	00026de8 	.word	0x00026de8
   22084:	00026dc0 	.word	0x00026dc0
   22088:	401c0000 	.word	0x401c0000
   2208c:	fcc00000 	.word	0xfcc00000
   22090:	3fe00000 	.word	0x3fe00000
   22094:	002a      	movs	r2, r5
   22096:	0033      	movs	r3, r6
   22098:	2000      	movs	r0, #0
   2209a:	49b9      	ldr	r1, [pc, #740]	; (22380 <_dtoa_r+0x6d0>)
   2209c:	f7fd f982 	bl	1f3a4 <__aeabi_dsub>
   220a0:	9a08      	ldr	r2, [sp, #32]
   220a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   220a4:	f7fa ffc6 	bl	1d034 <__aeabi_dcmplt>
   220a8:	2800      	cmp	r0, #0
   220aa:	d001      	beq.n	220b0 <_dtoa_r+0x400>
   220ac:	f000 fd74 	bl	22b98 <_dtoa_r+0xee8>
   220b0:	46a1      	mov	r9, r4
   220b2:	4544      	cmp	r4, r8
   220b4:	d101      	bne.n	220ba <_dtoa_r+0x40a>
   220b6:	f000 fc33 	bl	22920 <_dtoa_r+0xc70>
   220ba:	9808      	ldr	r0, [sp, #32]
   220bc:	9909      	ldr	r1, [sp, #36]	; 0x24
   220be:	2200      	movs	r2, #0
   220c0:	4bb0      	ldr	r3, [pc, #704]	; (22384 <_dtoa_r+0x6d4>)
   220c2:	f7fc feef 	bl	1eea4 <__aeabi_dmul>
   220c6:	2200      	movs	r2, #0
   220c8:	4bae      	ldr	r3, [pc, #696]	; (22384 <_dtoa_r+0x6d4>)
   220ca:	9008      	str	r0, [sp, #32]
   220cc:	9109      	str	r1, [sp, #36]	; 0x24
   220ce:	0028      	movs	r0, r5
   220d0:	0031      	movs	r1, r6
   220d2:	f7fc fee7 	bl	1eea4 <__aeabi_dmul>
   220d6:	000d      	movs	r5, r1
   220d8:	0004      	movs	r4, r0
   220da:	f7fd fc99 	bl	1fa10 <__aeabi_d2iz>
   220de:	0007      	movs	r7, r0
   220e0:	f7fd fcca 	bl	1fa78 <__aeabi_i2d>
   220e4:	0002      	movs	r2, r0
   220e6:	000b      	movs	r3, r1
   220e8:	0020      	movs	r0, r4
   220ea:	0029      	movs	r1, r5
   220ec:	f7fd f95a 	bl	1f3a4 <__aeabi_dsub>
   220f0:	464b      	mov	r3, r9
   220f2:	3730      	adds	r7, #48	; 0x30
   220f4:	b2ff      	uxtb	r7, r7
   220f6:	1c5c      	adds	r4, r3, #1
   220f8:	701f      	strb	r7, [r3, #0]
   220fa:	9a08      	ldr	r2, [sp, #32]
   220fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   220fe:	0005      	movs	r5, r0
   22100:	000e      	movs	r6, r1
   22102:	f7fa ff97 	bl	1d034 <__aeabi_dcmplt>
   22106:	2800      	cmp	r0, #0
   22108:	d0c4      	beq.n	22094 <_dtoa_r+0x3e4>
   2210a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2210c:	9303      	str	r3, [sp, #12]
   2210e:	4659      	mov	r1, fp
   22110:	4650      	mov	r0, sl
   22112:	f001 f90f 	bl	23334 <_Bfree>
   22116:	2300      	movs	r3, #0
   22118:	7023      	strb	r3, [r4, #0]
   2211a:	9b03      	ldr	r3, [sp, #12]
   2211c:	9a24      	ldr	r2, [sp, #144]	; 0x90
   2211e:	3301      	adds	r3, #1
   22120:	6013      	str	r3, [r2, #0]
   22122:	9b26      	ldr	r3, [sp, #152]	; 0x98
   22124:	2b00      	cmp	r3, #0
   22126:	d100      	bne.n	2212a <_dtoa_r+0x47a>
   22128:	e3a8      	b.n	2287c <_dtoa_r+0xbcc>
   2212a:	601c      	str	r4, [r3, #0]
   2212c:	980a      	ldr	r0, [sp, #40]	; 0x28
   2212e:	e5f4      	b.n	21d1a <_dtoa_r+0x6a>
   22130:	9b16      	ldr	r3, [sp, #88]	; 0x58
   22132:	4699      	mov	r9, r3
   22134:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   22136:	444b      	add	r3, r9
   22138:	001c      	movs	r4, r3
   2213a:	4b93      	ldr	r3, [pc, #588]	; (22388 <_dtoa_r+0x6d8>)
   2213c:	18e3      	adds	r3, r4, r3
   2213e:	2b20      	cmp	r3, #32
   22140:	dc00      	bgt.n	22144 <_dtoa_r+0x494>
   22142:	e17e      	b.n	22442 <_dtoa_r+0x792>
   22144:	0031      	movs	r1, r6
   22146:	4a91      	ldr	r2, [pc, #580]	; (2238c <_dtoa_r+0x6dc>)
   22148:	4640      	mov	r0, r8
   2214a:	18a2      	adds	r2, r4, r2
   2214c:	40d1      	lsrs	r1, r2
   2214e:	000a      	movs	r2, r1
   22150:	2140      	movs	r1, #64	; 0x40
   22152:	1acb      	subs	r3, r1, r3
   22154:	4098      	lsls	r0, r3
   22156:	4310      	orrs	r0, r2
   22158:	f7fd fcd0 	bl	1fafc <__aeabi_ui2d>
   2215c:	1e63      	subs	r3, r4, #1
   2215e:	4698      	mov	r8, r3
   22160:	2301      	movs	r3, #1
   22162:	4d8b      	ldr	r5, [pc, #556]	; (22390 <_dtoa_r+0x6e0>)
   22164:	930f      	str	r3, [sp, #60]	; 0x3c
   22166:	1949      	adds	r1, r1, r5
   22168:	e618      	b.n	21d9c <_dtoa_r+0xec>
   2216a:	488a      	ldr	r0, [pc, #552]	; (22394 <_dtoa_r+0x6e4>)
   2216c:	e5d5      	b.n	21d1a <_dtoa_r+0x6a>
   2216e:	2300      	movs	r3, #0
   22170:	4652      	mov	r2, sl
   22172:	2100      	movs	r1, #0
   22174:	6453      	str	r3, [r2, #68]	; 0x44
   22176:	4650      	mov	r0, sl
   22178:	f001 f8b4 	bl	232e4 <_Balloc>
   2217c:	4653      	mov	r3, sl
   2217e:	6418      	str	r0, [r3, #64]	; 0x40
   22180:	2301      	movs	r3, #1
   22182:	425b      	negs	r3, r3
   22184:	9307      	str	r3, [sp, #28]
   22186:	930e      	str	r3, [sp, #56]	; 0x38
   22188:	3302      	adds	r3, #2
   2218a:	2200      	movs	r2, #0
   2218c:	930b      	str	r3, [sp, #44]	; 0x2c
   2218e:	2300      	movs	r3, #0
   22190:	900a      	str	r0, [sp, #40]	; 0x28
   22192:	9223      	str	r2, [sp, #140]	; 0x8c
   22194:	9322      	str	r3, [sp, #136]	; 0x88
   22196:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   22198:	2b00      	cmp	r3, #0
   2219a:	da00      	bge.n	2219e <_dtoa_r+0x4ee>
   2219c:	e0ab      	b.n	222f6 <_dtoa_r+0x646>
   2219e:	9a03      	ldr	r2, [sp, #12]
   221a0:	2a0e      	cmp	r2, #14
   221a2:	dd00      	ble.n	221a6 <_dtoa_r+0x4f6>
   221a4:	e0a7      	b.n	222f6 <_dtoa_r+0x646>
   221a6:	4b7c      	ldr	r3, [pc, #496]	; (22398 <_dtoa_r+0x6e8>)
   221a8:	00d2      	lsls	r2, r2, #3
   221aa:	189b      	adds	r3, r3, r2
   221ac:	685c      	ldr	r4, [r3, #4]
   221ae:	681b      	ldr	r3, [r3, #0]
   221b0:	9304      	str	r3, [sp, #16]
   221b2:	9405      	str	r4, [sp, #20]
   221b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   221b6:	2b00      	cmp	r3, #0
   221b8:	da00      	bge.n	221bc <_dtoa_r+0x50c>
   221ba:	e2a7      	b.n	2270c <_dtoa_r+0xa5c>
   221bc:	9c04      	ldr	r4, [sp, #16]
   221be:	9d05      	ldr	r5, [sp, #20]
   221c0:	0030      	movs	r0, r6
   221c2:	0022      	movs	r2, r4
   221c4:	002b      	movs	r3, r5
   221c6:	0039      	movs	r1, r7
   221c8:	f7fc fa38 	bl	1e63c <__aeabi_ddiv>
   221cc:	f7fd fc20 	bl	1fa10 <__aeabi_d2iz>
   221d0:	4680      	mov	r8, r0
   221d2:	f7fd fc51 	bl	1fa78 <__aeabi_i2d>
   221d6:	0022      	movs	r2, r4
   221d8:	002b      	movs	r3, r5
   221da:	f7fc fe63 	bl	1eea4 <__aeabi_dmul>
   221de:	0002      	movs	r2, r0
   221e0:	000b      	movs	r3, r1
   221e2:	0030      	movs	r0, r6
   221e4:	0039      	movs	r1, r7
   221e6:	f7fd f8dd 	bl	1f3a4 <__aeabi_dsub>
   221ea:	4643      	mov	r3, r8
   221ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   221ee:	3330      	adds	r3, #48	; 0x30
   221f0:	7013      	strb	r3, [r2, #0]
   221f2:	9b07      	ldr	r3, [sp, #28]
   221f4:	0006      	movs	r6, r0
   221f6:	000f      	movs	r7, r1
   221f8:	1c54      	adds	r4, r2, #1
   221fa:	2b01      	cmp	r3, #1
   221fc:	d04e      	beq.n	2229c <_dtoa_r+0x5ec>
   221fe:	2200      	movs	r2, #0
   22200:	4b60      	ldr	r3, [pc, #384]	; (22384 <_dtoa_r+0x6d4>)
   22202:	f7fc fe4f 	bl	1eea4 <__aeabi_dmul>
   22206:	2200      	movs	r2, #0
   22208:	2300      	movs	r3, #0
   2220a:	0006      	movs	r6, r0
   2220c:	000f      	movs	r7, r1
   2220e:	f7fa ff0b 	bl	1d028 <__aeabi_dcmpeq>
   22212:	2800      	cmp	r0, #0
   22214:	d000      	beq.n	22218 <_dtoa_r+0x568>
   22216:	e77a      	b.n	2210e <_dtoa_r+0x45e>
   22218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2221a:	9a07      	ldr	r2, [sp, #28]
   2221c:	1c9d      	adds	r5, r3, #2
   2221e:	469c      	mov	ip, r3
   22220:	465b      	mov	r3, fp
   22222:	9306      	str	r3, [sp, #24]
   22224:	4653      	mov	r3, sl
   22226:	4462      	add	r2, ip
   22228:	46aa      	mov	sl, r5
   2222a:	9c04      	ldr	r4, [sp, #16]
   2222c:	9d05      	ldr	r5, [sp, #20]
   2222e:	4691      	mov	r9, r2
   22230:	9307      	str	r3, [sp, #28]
   22232:	e00f      	b.n	22254 <_dtoa_r+0x5a4>
   22234:	2200      	movs	r2, #0
   22236:	4b53      	ldr	r3, [pc, #332]	; (22384 <_dtoa_r+0x6d4>)
   22238:	f7fc fe34 	bl	1eea4 <__aeabi_dmul>
   2223c:	2301      	movs	r3, #1
   2223e:	469c      	mov	ip, r3
   22240:	2200      	movs	r2, #0
   22242:	2300      	movs	r3, #0
   22244:	0006      	movs	r6, r0
   22246:	000f      	movs	r7, r1
   22248:	44e2      	add	sl, ip
   2224a:	f7fa feed 	bl	1d028 <__aeabi_dcmpeq>
   2224e:	2800      	cmp	r0, #0
   22250:	d000      	beq.n	22254 <_dtoa_r+0x5a4>
   22252:	e2d9      	b.n	22808 <_dtoa_r+0xb58>
   22254:	0022      	movs	r2, r4
   22256:	002b      	movs	r3, r5
   22258:	0030      	movs	r0, r6
   2225a:	0039      	movs	r1, r7
   2225c:	f7fc f9ee 	bl	1e63c <__aeabi_ddiv>
   22260:	f7fd fbd6 	bl	1fa10 <__aeabi_d2iz>
   22264:	4680      	mov	r8, r0
   22266:	f7fd fc07 	bl	1fa78 <__aeabi_i2d>
   2226a:	0022      	movs	r2, r4
   2226c:	002b      	movs	r3, r5
   2226e:	f7fc fe19 	bl	1eea4 <__aeabi_dmul>
   22272:	0002      	movs	r2, r0
   22274:	000b      	movs	r3, r1
   22276:	0030      	movs	r0, r6
   22278:	0039      	movs	r1, r7
   2227a:	f7fd f893 	bl	1f3a4 <__aeabi_dsub>
   2227e:	4653      	mov	r3, sl
   22280:	4642      	mov	r2, r8
   22282:	3b01      	subs	r3, #1
   22284:	3230      	adds	r2, #48	; 0x30
   22286:	0006      	movs	r6, r0
   22288:	000f      	movs	r7, r1
   2228a:	46d3      	mov	fp, sl
   2228c:	701a      	strb	r2, [r3, #0]
   2228e:	45d1      	cmp	r9, sl
   22290:	d1d0      	bne.n	22234 <_dtoa_r+0x584>
   22292:	9b06      	ldr	r3, [sp, #24]
   22294:	4654      	mov	r4, sl
   22296:	469b      	mov	fp, r3
   22298:	9b07      	ldr	r3, [sp, #28]
   2229a:	469a      	mov	sl, r3
   2229c:	0032      	movs	r2, r6
   2229e:	003b      	movs	r3, r7
   222a0:	0030      	movs	r0, r6
   222a2:	0039      	movs	r1, r7
   222a4:	f7fb feba 	bl	1e01c <__aeabi_dadd>
   222a8:	0006      	movs	r6, r0
   222aa:	000f      	movs	r7, r1
   222ac:	0002      	movs	r2, r0
   222ae:	000b      	movs	r3, r1
   222b0:	9804      	ldr	r0, [sp, #16]
   222b2:	9905      	ldr	r1, [sp, #20]
   222b4:	f7fa febe 	bl	1d034 <__aeabi_dcmplt>
   222b8:	2800      	cmp	r0, #0
   222ba:	d10c      	bne.n	222d6 <_dtoa_r+0x626>
   222bc:	9804      	ldr	r0, [sp, #16]
   222be:	9905      	ldr	r1, [sp, #20]
   222c0:	0032      	movs	r2, r6
   222c2:	003b      	movs	r3, r7
   222c4:	f7fa feb0 	bl	1d028 <__aeabi_dcmpeq>
   222c8:	2800      	cmp	r0, #0
   222ca:	d100      	bne.n	222ce <_dtoa_r+0x61e>
   222cc:	e71f      	b.n	2210e <_dtoa_r+0x45e>
   222ce:	4643      	mov	r3, r8
   222d0:	07db      	lsls	r3, r3, #31
   222d2:	d400      	bmi.n	222d6 <_dtoa_r+0x626>
   222d4:	e71b      	b.n	2210e <_dtoa_r+0x45e>
   222d6:	1e65      	subs	r5, r4, #1
   222d8:	782f      	ldrb	r7, [r5, #0]
   222da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   222dc:	e006      	b.n	222ec <_dtoa_r+0x63c>
   222de:	429d      	cmp	r5, r3
   222e0:	d100      	bne.n	222e4 <_dtoa_r+0x634>
   222e2:	e351      	b.n	22988 <_dtoa_r+0xcd8>
   222e4:	3c02      	subs	r4, #2
   222e6:	7827      	ldrb	r7, [r4, #0]
   222e8:	002c      	movs	r4, r5
   222ea:	3d01      	subs	r5, #1
   222ec:	2f39      	cmp	r7, #57	; 0x39
   222ee:	d0f6      	beq.n	222de <_dtoa_r+0x62e>
   222f0:	3701      	adds	r7, #1
   222f2:	702f      	strb	r7, [r5, #0]
   222f4:	e70b      	b.n	2210e <_dtoa_r+0x45e>
   222f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   222f8:	2a00      	cmp	r2, #0
   222fa:	d04f      	beq.n	2239c <_dtoa_r+0x6ec>
   222fc:	9a22      	ldr	r2, [sp, #136]	; 0x88
   222fe:	2a01      	cmp	r2, #1
   22300:	dc00      	bgt.n	22304 <_dtoa_r+0x654>
   22302:	e22c      	b.n	2275e <_dtoa_r+0xaae>
   22304:	9b07      	ldr	r3, [sp, #28]
   22306:	1e5c      	subs	r4, r3, #1
   22308:	464b      	mov	r3, r9
   2230a:	45a1      	cmp	r9, r4
   2230c:	da00      	bge.n	22310 <_dtoa_r+0x660>
   2230e:	e2b8      	b.n	22882 <_dtoa_r+0xbd2>
   22310:	1b1c      	subs	r4, r3, r4
   22312:	9b07      	ldr	r3, [sp, #28]
   22314:	2b00      	cmp	r3, #0
   22316:	da00      	bge.n	2231a <_dtoa_r+0x66a>
   22318:	e3d4      	b.n	22ac4 <_dtoa_r+0xe14>
   2231a:	9b06      	ldr	r3, [sp, #24]
   2231c:	9308      	str	r3, [sp, #32]
   2231e:	9b07      	ldr	r3, [sp, #28]
   22320:	9a06      	ldr	r2, [sp, #24]
   22322:	2101      	movs	r1, #1
   22324:	4694      	mov	ip, r2
   22326:	449c      	add	ip, r3
   22328:	4662      	mov	r2, ip
   2232a:	9206      	str	r2, [sp, #24]
   2232c:	9a04      	ldr	r2, [sp, #16]
   2232e:	4650      	mov	r0, sl
   22330:	4694      	mov	ip, r2
   22332:	449c      	add	ip, r3
   22334:	4663      	mov	r3, ip
   22336:	9304      	str	r3, [sp, #16]
   22338:	f001 f894 	bl	23464 <__i2b>
   2233c:	4680      	mov	r8, r0
   2233e:	e032      	b.n	223a6 <_dtoa_r+0x6f6>
   22340:	9a06      	ldr	r2, [sp, #24]
   22342:	9b03      	ldr	r3, [sp, #12]
   22344:	1ad2      	subs	r2, r2, r3
   22346:	425b      	negs	r3, r3
   22348:	4699      	mov	r9, r3
   2234a:	2300      	movs	r3, #0
   2234c:	9206      	str	r2, [sp, #24]
   2234e:	930d      	str	r3, [sp, #52]	; 0x34
   22350:	e579      	b.n	21e46 <_dtoa_r+0x196>
   22352:	9803      	ldr	r0, [sp, #12]
   22354:	f7fd fb90 	bl	1fa78 <__aeabi_i2d>
   22358:	000b      	movs	r3, r1
   2235a:	0002      	movs	r2, r0
   2235c:	0029      	movs	r1, r5
   2235e:	0020      	movs	r0, r4
   22360:	f7fa fe62 	bl	1d028 <__aeabi_dcmpeq>
   22364:	0002      	movs	r2, r0
   22366:	4250      	negs	r0, r2
   22368:	4150      	adcs	r0, r2
   2236a:	9b03      	ldr	r3, [sp, #12]
   2236c:	1a1b      	subs	r3, r3, r0
   2236e:	9303      	str	r3, [sp, #12]
   22370:	e53d      	b.n	21dee <_dtoa_r+0x13e>
   22372:	2301      	movs	r3, #1
   22374:	1a9b      	subs	r3, r3, r2
   22376:	9306      	str	r3, [sp, #24]
   22378:	2300      	movs	r3, #0
   2237a:	9304      	str	r3, [sp, #16]
   2237c:	e557      	b.n	21e2e <_dtoa_r+0x17e>
   2237e:	46c0      	nop			; (mov r8, r8)
   22380:	3ff00000 	.word	0x3ff00000
   22384:	40240000 	.word	0x40240000
   22388:	00000432 	.word	0x00000432
   2238c:	00000412 	.word	0x00000412
   22390:	fe100000 	.word	0xfe100000
   22394:	00026d88 	.word	0x00026d88
   22398:	00026de8 	.word	0x00026de8
   2239c:	9b06      	ldr	r3, [sp, #24]
   2239e:	464c      	mov	r4, r9
   223a0:	9308      	str	r3, [sp, #32]
   223a2:	2300      	movs	r3, #0
   223a4:	4698      	mov	r8, r3
   223a6:	9908      	ldr	r1, [sp, #32]
   223a8:	1e0b      	subs	r3, r1, #0
   223aa:	dd0e      	ble.n	223ca <_dtoa_r+0x71a>
   223ac:	9a04      	ldr	r2, [sp, #16]
   223ae:	2a00      	cmp	r2, #0
   223b0:	dd0b      	ble.n	223ca <_dtoa_r+0x71a>
   223b2:	4293      	cmp	r3, r2
   223b4:	dd00      	ble.n	223b8 <_dtoa_r+0x708>
   223b6:	e187      	b.n	226c8 <_dtoa_r+0xa18>
   223b8:	9a06      	ldr	r2, [sp, #24]
   223ba:	1ad2      	subs	r2, r2, r3
   223bc:	9206      	str	r2, [sp, #24]
   223be:	9a08      	ldr	r2, [sp, #32]
   223c0:	1ad2      	subs	r2, r2, r3
   223c2:	9208      	str	r2, [sp, #32]
   223c4:	9a04      	ldr	r2, [sp, #16]
   223c6:	1ad3      	subs	r3, r2, r3
   223c8:	9304      	str	r3, [sp, #16]
   223ca:	464b      	mov	r3, r9
   223cc:	2b00      	cmp	r3, #0
   223ce:	d01a      	beq.n	22406 <_dtoa_r+0x756>
   223d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   223d2:	2b00      	cmp	r3, #0
   223d4:	d100      	bne.n	223d8 <_dtoa_r+0x728>
   223d6:	e1bb      	b.n	22750 <_dtoa_r+0xaa0>
   223d8:	2c00      	cmp	r4, #0
   223da:	dd10      	ble.n	223fe <_dtoa_r+0x74e>
   223dc:	4641      	mov	r1, r8
   223de:	0022      	movs	r2, r4
   223e0:	4650      	mov	r0, sl
   223e2:	f001 f8f3 	bl	235cc <__pow5mult>
   223e6:	465a      	mov	r2, fp
   223e8:	0001      	movs	r1, r0
   223ea:	4680      	mov	r8, r0
   223ec:	4650      	mov	r0, sl
   223ee:	f001 f843 	bl	23478 <__multiply>
   223f2:	0005      	movs	r5, r0
   223f4:	4659      	mov	r1, fp
   223f6:	4650      	mov	r0, sl
   223f8:	f000 ff9c 	bl	23334 <_Bfree>
   223fc:	46ab      	mov	fp, r5
   223fe:	464b      	mov	r3, r9
   22400:	1b1a      	subs	r2, r3, r4
   22402:	d000      	beq.n	22406 <_dtoa_r+0x756>
   22404:	e1a5      	b.n	22752 <_dtoa_r+0xaa2>
   22406:	2101      	movs	r1, #1
   22408:	4650      	mov	r0, sl
   2240a:	f001 f82b 	bl	23464 <__i2b>
   2240e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   22410:	4681      	mov	r9, r0
   22412:	2b00      	cmp	r3, #0
   22414:	dd1d      	ble.n	22452 <_dtoa_r+0x7a2>
   22416:	001a      	movs	r2, r3
   22418:	0001      	movs	r1, r0
   2241a:	4650      	mov	r0, sl
   2241c:	f001 f8d6 	bl	235cc <__pow5mult>
   22420:	9b22      	ldr	r3, [sp, #136]	; 0x88
   22422:	4681      	mov	r9, r0
   22424:	2b01      	cmp	r3, #1
   22426:	dc00      	bgt.n	2242a <_dtoa_r+0x77a>
   22428:	e150      	b.n	226cc <_dtoa_r+0xa1c>
   2242a:	2400      	movs	r4, #0
   2242c:	464b      	mov	r3, r9
   2242e:	691b      	ldr	r3, [r3, #16]
   22430:	3303      	adds	r3, #3
   22432:	009b      	lsls	r3, r3, #2
   22434:	444b      	add	r3, r9
   22436:	6858      	ldr	r0, [r3, #4]
   22438:	f000 ffcc 	bl	233d4 <__hi0bits>
   2243c:	2320      	movs	r3, #32
   2243e:	1a1b      	subs	r3, r3, r0
   22440:	e010      	b.n	22464 <_dtoa_r+0x7b4>
   22442:	2220      	movs	r2, #32
   22444:	0030      	movs	r0, r6
   22446:	1ad3      	subs	r3, r2, r3
   22448:	4098      	lsls	r0, r3
   2244a:	e685      	b.n	22158 <_dtoa_r+0x4a8>
   2244c:	2300      	movs	r3, #0
   2244e:	930c      	str	r3, [sp, #48]	; 0x30
   22450:	e4e3      	b.n	21e1a <_dtoa_r+0x16a>
   22452:	9b22      	ldr	r3, [sp, #136]	; 0x88
   22454:	2400      	movs	r4, #0
   22456:	2b01      	cmp	r3, #1
   22458:	dc00      	bgt.n	2245c <_dtoa_r+0x7ac>
   2245a:	e18b      	b.n	22774 <_dtoa_r+0xac4>
   2245c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2245e:	2301      	movs	r3, #1
   22460:	2a00      	cmp	r2, #0
   22462:	d1e3      	bne.n	2242c <_dtoa_r+0x77c>
   22464:	9904      	ldr	r1, [sp, #16]
   22466:	201f      	movs	r0, #31
   22468:	468c      	mov	ip, r1
   2246a:	4463      	add	r3, ip
   2246c:	4018      	ands	r0, r3
   2246e:	d100      	bne.n	22472 <_dtoa_r+0x7c2>
   22470:	e0ae      	b.n	225d0 <_dtoa_r+0x920>
   22472:	2320      	movs	r3, #32
   22474:	1a1b      	subs	r3, r3, r0
   22476:	2b04      	cmp	r3, #4
   22478:	dc00      	bgt.n	2247c <_dtoa_r+0x7cc>
   2247a:	e3cc      	b.n	22c16 <_dtoa_r+0xf66>
   2247c:	231c      	movs	r3, #28
   2247e:	1a18      	subs	r0, r3, r0
   22480:	9b06      	ldr	r3, [sp, #24]
   22482:	469c      	mov	ip, r3
   22484:	4484      	add	ip, r0
   22486:	4663      	mov	r3, ip
   22488:	9306      	str	r3, [sp, #24]
   2248a:	9b08      	ldr	r3, [sp, #32]
   2248c:	469c      	mov	ip, r3
   2248e:	4484      	add	ip, r0
   22490:	4663      	mov	r3, ip
   22492:	468c      	mov	ip, r1
   22494:	4484      	add	ip, r0
   22496:	9308      	str	r3, [sp, #32]
   22498:	4663      	mov	r3, ip
   2249a:	9304      	str	r3, [sp, #16]
   2249c:	9b06      	ldr	r3, [sp, #24]
   2249e:	2b00      	cmp	r3, #0
   224a0:	dd05      	ble.n	224ae <_dtoa_r+0x7fe>
   224a2:	4659      	mov	r1, fp
   224a4:	001a      	movs	r2, r3
   224a6:	4650      	mov	r0, sl
   224a8:	f001 f8f0 	bl	2368c <__lshift>
   224ac:	4683      	mov	fp, r0
   224ae:	9b04      	ldr	r3, [sp, #16]
   224b0:	2b00      	cmp	r3, #0
   224b2:	dd05      	ble.n	224c0 <_dtoa_r+0x810>
   224b4:	4649      	mov	r1, r9
   224b6:	001a      	movs	r2, r3
   224b8:	4650      	mov	r0, sl
   224ba:	f001 f8e7 	bl	2368c <__lshift>
   224be:	4681      	mov	r9, r0
   224c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   224c2:	2b00      	cmp	r3, #0
   224c4:	d000      	beq.n	224c8 <_dtoa_r+0x818>
   224c6:	e094      	b.n	225f2 <_dtoa_r+0x942>
   224c8:	9b07      	ldr	r3, [sp, #28]
   224ca:	2b00      	cmp	r3, #0
   224cc:	dc00      	bgt.n	224d0 <_dtoa_r+0x820>
   224ce:	e175      	b.n	227bc <_dtoa_r+0xb0c>
   224d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   224d2:	2b00      	cmp	r3, #0
   224d4:	d100      	bne.n	224d8 <_dtoa_r+0x828>
   224d6:	e0a6      	b.n	22626 <_dtoa_r+0x976>
   224d8:	9b08      	ldr	r3, [sp, #32]
   224da:	2b00      	cmp	r3, #0
   224dc:	dd05      	ble.n	224ea <_dtoa_r+0x83a>
   224de:	4641      	mov	r1, r8
   224e0:	001a      	movs	r2, r3
   224e2:	4650      	mov	r0, sl
   224e4:	f001 f8d2 	bl	2368c <__lshift>
   224e8:	4680      	mov	r8, r0
   224ea:	4643      	mov	r3, r8
   224ec:	930c      	str	r3, [sp, #48]	; 0x30
   224ee:	2c00      	cmp	r4, #0
   224f0:	d000      	beq.n	224f4 <_dtoa_r+0x844>
   224f2:	e250      	b.n	22996 <_dtoa_r+0xce6>
   224f4:	9c07      	ldr	r4, [sp, #28]
   224f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   224f8:	3c01      	subs	r4, #1
   224fa:	0023      	movs	r3, r4
   224fc:	4694      	mov	ip, r2
   224fe:	4463      	add	r3, ip
   22500:	9308      	str	r3, [sp, #32]
   22502:	2301      	movs	r3, #1
   22504:	4033      	ands	r3, r6
   22506:	9307      	str	r3, [sp, #28]
   22508:	464b      	mov	r3, r9
   2250a:	9306      	str	r3, [sp, #24]
   2250c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2250e:	4657      	mov	r7, sl
   22510:	4645      	mov	r5, r8
   22512:	465e      	mov	r6, fp
   22514:	4692      	mov	sl, r2
   22516:	4698      	mov	r8, r3
   22518:	9b06      	ldr	r3, [sp, #24]
   2251a:	0030      	movs	r0, r6
   2251c:	0019      	movs	r1, r3
   2251e:	4699      	mov	r9, r3
   22520:	f7ff fb1c 	bl	21b5c <quorem>
   22524:	0003      	movs	r3, r0
   22526:	900b      	str	r0, [sp, #44]	; 0x2c
   22528:	3330      	adds	r3, #48	; 0x30
   2252a:	0029      	movs	r1, r5
   2252c:	0030      	movs	r0, r6
   2252e:	9304      	str	r3, [sp, #16]
   22530:	f001 f90c 	bl	2374c <__mcmp>
   22534:	4649      	mov	r1, r9
   22536:	0004      	movs	r4, r0
   22538:	4642      	mov	r2, r8
   2253a:	0038      	movs	r0, r7
   2253c:	f001 f920 	bl	23780 <__mdiff>
   22540:	68c3      	ldr	r3, [r0, #12]
   22542:	4681      	mov	r9, r0
   22544:	2b00      	cmp	r3, #0
   22546:	d000      	beq.n	2254a <_dtoa_r+0x89a>
   22548:	e11e      	b.n	22788 <_dtoa_r+0xad8>
   2254a:	0001      	movs	r1, r0
   2254c:	0030      	movs	r0, r6
   2254e:	f001 f8fd 	bl	2374c <__mcmp>
   22552:	4683      	mov	fp, r0
   22554:	4649      	mov	r1, r9
   22556:	0038      	movs	r0, r7
   22558:	f000 feec 	bl	23334 <_Bfree>
   2255c:	465b      	mov	r3, fp
   2255e:	9a22      	ldr	r2, [sp, #136]	; 0x88
   22560:	4313      	orrs	r3, r2
   22562:	d103      	bne.n	2256c <_dtoa_r+0x8bc>
   22564:	9b07      	ldr	r3, [sp, #28]
   22566:	2b00      	cmp	r3, #0
   22568:	d100      	bne.n	2256c <_dtoa_r+0x8bc>
   2256a:	e306      	b.n	22b7a <_dtoa_r+0xeca>
   2256c:	2c00      	cmp	r4, #0
   2256e:	da00      	bge.n	22572 <_dtoa_r+0x8c2>
   22570:	e1a8      	b.n	228c4 <_dtoa_r+0xc14>
   22572:	9b22      	ldr	r3, [sp, #136]	; 0x88
   22574:	431c      	orrs	r4, r3
   22576:	d103      	bne.n	22580 <_dtoa_r+0x8d0>
   22578:	9b07      	ldr	r3, [sp, #28]
   2257a:	2b00      	cmp	r3, #0
   2257c:	d100      	bne.n	22580 <_dtoa_r+0x8d0>
   2257e:	e1a1      	b.n	228c4 <_dtoa_r+0xc14>
   22580:	465b      	mov	r3, fp
   22582:	2b00      	cmp	r3, #0
   22584:	dd00      	ble.n	22588 <_dtoa_r+0x8d8>
   22586:	e282      	b.n	22a8e <_dtoa_r+0xdde>
   22588:	4669      	mov	r1, sp
   2258a:	4652      	mov	r2, sl
   2258c:	4653      	mov	r3, sl
   2258e:	7c09      	ldrb	r1, [r1, #16]
   22590:	1c5c      	adds	r4, r3, #1
   22592:	7011      	strb	r1, [r2, #0]
   22594:	9a08      	ldr	r2, [sp, #32]
   22596:	4552      	cmp	r2, sl
   22598:	d100      	bne.n	2259c <_dtoa_r+0x8ec>
   2259a:	e28a      	b.n	22ab2 <_dtoa_r+0xe02>
   2259c:	0031      	movs	r1, r6
   2259e:	2300      	movs	r3, #0
   225a0:	220a      	movs	r2, #10
   225a2:	0038      	movs	r0, r7
   225a4:	f000 fed0 	bl	23348 <__multadd>
   225a8:	2300      	movs	r3, #0
   225aa:	0006      	movs	r6, r0
   225ac:	220a      	movs	r2, #10
   225ae:	0029      	movs	r1, r5
   225b0:	0038      	movs	r0, r7
   225b2:	4545      	cmp	r5, r8
   225b4:	d100      	bne.n	225b8 <_dtoa_r+0x908>
   225b6:	e0e1      	b.n	2277c <_dtoa_r+0xacc>
   225b8:	f000 fec6 	bl	23348 <__multadd>
   225bc:	4641      	mov	r1, r8
   225be:	0005      	movs	r5, r0
   225c0:	2300      	movs	r3, #0
   225c2:	220a      	movs	r2, #10
   225c4:	0038      	movs	r0, r7
   225c6:	f000 febf 	bl	23348 <__multadd>
   225ca:	46a2      	mov	sl, r4
   225cc:	4680      	mov	r8, r0
   225ce:	e7a3      	b.n	22518 <_dtoa_r+0x868>
   225d0:	201c      	movs	r0, #28
   225d2:	9b06      	ldr	r3, [sp, #24]
   225d4:	469c      	mov	ip, r3
   225d6:	4484      	add	ip, r0
   225d8:	4663      	mov	r3, ip
   225da:	9306      	str	r3, [sp, #24]
   225dc:	9b08      	ldr	r3, [sp, #32]
   225de:	469c      	mov	ip, r3
   225e0:	4484      	add	ip, r0
   225e2:	4663      	mov	r3, ip
   225e4:	9308      	str	r3, [sp, #32]
   225e6:	9b04      	ldr	r3, [sp, #16]
   225e8:	469c      	mov	ip, r3
   225ea:	4484      	add	ip, r0
   225ec:	4663      	mov	r3, ip
   225ee:	9304      	str	r3, [sp, #16]
   225f0:	e754      	b.n	2249c <_dtoa_r+0x7ec>
   225f2:	4649      	mov	r1, r9
   225f4:	4658      	mov	r0, fp
   225f6:	f001 f8a9 	bl	2374c <__mcmp>
   225fa:	2800      	cmp	r0, #0
   225fc:	db00      	blt.n	22600 <_dtoa_r+0x950>
   225fe:	e763      	b.n	224c8 <_dtoa_r+0x818>
   22600:	9b03      	ldr	r3, [sp, #12]
   22602:	4659      	mov	r1, fp
   22604:	3b01      	subs	r3, #1
   22606:	9303      	str	r3, [sp, #12]
   22608:	220a      	movs	r2, #10
   2260a:	2300      	movs	r3, #0
   2260c:	4650      	mov	r0, sl
   2260e:	f000 fe9b 	bl	23348 <__multadd>
   22612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   22614:	4683      	mov	fp, r0
   22616:	2b00      	cmp	r3, #0
   22618:	d000      	beq.n	2261c <_dtoa_r+0x96c>
   2261a:	e2ca      	b.n	22bb2 <_dtoa_r+0xf02>
   2261c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2261e:	2b00      	cmp	r3, #0
   22620:	dc00      	bgt.n	22624 <_dtoa_r+0x974>
   22622:	e2d8      	b.n	22bd6 <_dtoa_r+0xf26>
   22624:	9307      	str	r3, [sp, #28]
   22626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22628:	465d      	mov	r5, fp
   2262a:	2400      	movs	r4, #0
   2262c:	9f07      	ldr	r7, [sp, #28]
   2262e:	469b      	mov	fp, r3
   22630:	e006      	b.n	22640 <_dtoa_r+0x990>
   22632:	0029      	movs	r1, r5
   22634:	2300      	movs	r3, #0
   22636:	220a      	movs	r2, #10
   22638:	4650      	mov	r0, sl
   2263a:	f000 fe85 	bl	23348 <__multadd>
   2263e:	0005      	movs	r5, r0
   22640:	4649      	mov	r1, r9
   22642:	0028      	movs	r0, r5
   22644:	f7ff fa8a 	bl	21b5c <quorem>
   22648:	465b      	mov	r3, fp
   2264a:	3030      	adds	r0, #48	; 0x30
   2264c:	5518      	strb	r0, [r3, r4]
   2264e:	3401      	adds	r4, #1
   22650:	42bc      	cmp	r4, r7
   22652:	dbee      	blt.n	22632 <_dtoa_r+0x982>
   22654:	46ab      	mov	fp, r5
   22656:	0006      	movs	r6, r0
   22658:	9c07      	ldr	r4, [sp, #28]
   2265a:	2c00      	cmp	r4, #0
   2265c:	dc00      	bgt.n	22660 <_dtoa_r+0x9b0>
   2265e:	e237      	b.n	22ad0 <_dtoa_r+0xe20>
   22660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22662:	2700      	movs	r7, #0
   22664:	469c      	mov	ip, r3
   22666:	4464      	add	r4, ip
   22668:	4659      	mov	r1, fp
   2266a:	2201      	movs	r2, #1
   2266c:	4650      	mov	r0, sl
   2266e:	f001 f80d 	bl	2368c <__lshift>
   22672:	4649      	mov	r1, r9
   22674:	4683      	mov	fp, r0
   22676:	f001 f869 	bl	2374c <__mcmp>
   2267a:	2800      	cmp	r0, #0
   2267c:	dc00      	bgt.n	22680 <_dtoa_r+0x9d0>
   2267e:	e144      	b.n	2290a <_dtoa_r+0xc5a>
   22680:	1e65      	subs	r5, r4, #1
   22682:	782b      	ldrb	r3, [r5, #0]
   22684:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   22686:	e006      	b.n	22696 <_dtoa_r+0x9e6>
   22688:	4295      	cmp	r5, r2
   2268a:	d100      	bne.n	2268e <_dtoa_r+0x9de>
   2268c:	e0b1      	b.n	227f2 <_dtoa_r+0xb42>
   2268e:	3c02      	subs	r4, #2
   22690:	7823      	ldrb	r3, [r4, #0]
   22692:	002c      	movs	r4, r5
   22694:	3d01      	subs	r5, #1
   22696:	2b39      	cmp	r3, #57	; 0x39
   22698:	d0f6      	beq.n	22688 <_dtoa_r+0x9d8>
   2269a:	3301      	adds	r3, #1
   2269c:	702b      	strb	r3, [r5, #0]
   2269e:	4649      	mov	r1, r9
   226a0:	4650      	mov	r0, sl
   226a2:	f000 fe47 	bl	23334 <_Bfree>
   226a6:	4643      	mov	r3, r8
   226a8:	2b00      	cmp	r3, #0
   226aa:	d100      	bne.n	226ae <_dtoa_r+0x9fe>
   226ac:	e52f      	b.n	2210e <_dtoa_r+0x45e>
   226ae:	2f00      	cmp	r7, #0
   226b0:	d005      	beq.n	226be <_dtoa_r+0xa0e>
   226b2:	4547      	cmp	r7, r8
   226b4:	d003      	beq.n	226be <_dtoa_r+0xa0e>
   226b6:	0039      	movs	r1, r7
   226b8:	4650      	mov	r0, sl
   226ba:	f000 fe3b 	bl	23334 <_Bfree>
   226be:	4641      	mov	r1, r8
   226c0:	4650      	mov	r0, sl
   226c2:	f000 fe37 	bl	23334 <_Bfree>
   226c6:	e522      	b.n	2210e <_dtoa_r+0x45e>
   226c8:	0013      	movs	r3, r2
   226ca:	e675      	b.n	223b8 <_dtoa_r+0x708>
   226cc:	2e00      	cmp	r6, #0
   226ce:	d000      	beq.n	226d2 <_dtoa_r+0xa22>
   226d0:	e6ab      	b.n	2242a <_dtoa_r+0x77a>
   226d2:	033b      	lsls	r3, r7, #12
   226d4:	2400      	movs	r4, #0
   226d6:	2b00      	cmp	r3, #0
   226d8:	d000      	beq.n	226dc <_dtoa_r+0xa2c>
   226da:	e6bf      	b.n	2245c <_dtoa_r+0x7ac>
   226dc:	4bba      	ldr	r3, [pc, #744]	; (229c8 <_dtoa_r+0xd18>)
   226de:	423b      	tst	r3, r7
   226e0:	d100      	bne.n	226e4 <_dtoa_r+0xa34>
   226e2:	e6bb      	b.n	2245c <_dtoa_r+0x7ac>
   226e4:	9b06      	ldr	r3, [sp, #24]
   226e6:	3401      	adds	r4, #1
   226e8:	3301      	adds	r3, #1
   226ea:	9306      	str	r3, [sp, #24]
   226ec:	9b04      	ldr	r3, [sp, #16]
   226ee:	3301      	adds	r3, #1
   226f0:	9304      	str	r3, [sp, #16]
   226f2:	e6b3      	b.n	2245c <_dtoa_r+0x7ac>
   226f4:	2301      	movs	r3, #1
   226f6:	930b      	str	r3, [sp, #44]	; 0x2c
   226f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   226fa:	2b00      	cmp	r3, #0
   226fc:	dc00      	bgt.n	22700 <_dtoa_r+0xa50>
   226fe:	e0d1      	b.n	228a4 <_dtoa_r+0xbf4>
   22700:	001d      	movs	r5, r3
   22702:	4698      	mov	r8, r3
   22704:	930e      	str	r3, [sp, #56]	; 0x38
   22706:	9307      	str	r3, [sp, #28]
   22708:	f7ff fbc8 	bl	21e9c <_dtoa_r+0x1ec>
   2270c:	9b07      	ldr	r3, [sp, #28]
   2270e:	2b00      	cmp	r3, #0
   22710:	dd00      	ble.n	22714 <_dtoa_r+0xa64>
   22712:	e553      	b.n	221bc <_dtoa_r+0x50c>
   22714:	d000      	beq.n	22718 <_dtoa_r+0xa68>
   22716:	e0ad      	b.n	22874 <_dtoa_r+0xbc4>
   22718:	9804      	ldr	r0, [sp, #16]
   2271a:	9905      	ldr	r1, [sp, #20]
   2271c:	2200      	movs	r2, #0
   2271e:	4bab      	ldr	r3, [pc, #684]	; (229cc <_dtoa_r+0xd1c>)
   22720:	f7fc fbc0 	bl	1eea4 <__aeabi_dmul>
   22724:	003b      	movs	r3, r7
   22726:	0032      	movs	r2, r6
   22728:	f7fa fca2 	bl	1d070 <__aeabi_dcmpge>
   2272c:	2300      	movs	r3, #0
   2272e:	4699      	mov	r9, r3
   22730:	4698      	mov	r8, r3
   22732:	2800      	cmp	r0, #0
   22734:	d055      	beq.n	227e2 <_dtoa_r+0xb32>
   22736:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   22738:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2273a:	43db      	mvns	r3, r3
   2273c:	9303      	str	r3, [sp, #12]
   2273e:	4649      	mov	r1, r9
   22740:	4650      	mov	r0, sl
   22742:	f000 fdf7 	bl	23334 <_Bfree>
   22746:	4643      	mov	r3, r8
   22748:	2b00      	cmp	r3, #0
   2274a:	d100      	bne.n	2274e <_dtoa_r+0xa9e>
   2274c:	e4df      	b.n	2210e <_dtoa_r+0x45e>
   2274e:	e7b6      	b.n	226be <_dtoa_r+0xa0e>
   22750:	464a      	mov	r2, r9
   22752:	4659      	mov	r1, fp
   22754:	4650      	mov	r0, sl
   22756:	f000 ff39 	bl	235cc <__pow5mult>
   2275a:	4683      	mov	fp, r0
   2275c:	e653      	b.n	22406 <_dtoa_r+0x756>
   2275e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   22760:	2a00      	cmp	r2, #0
   22762:	d100      	bne.n	22766 <_dtoa_r+0xab6>
   22764:	e1b6      	b.n	22ad4 <_dtoa_r+0xe24>
   22766:	4a9a      	ldr	r2, [pc, #616]	; (229d0 <_dtoa_r+0xd20>)
   22768:	464c      	mov	r4, r9
   2276a:	4694      	mov	ip, r2
   2276c:	9a06      	ldr	r2, [sp, #24]
   2276e:	4463      	add	r3, ip
   22770:	9208      	str	r2, [sp, #32]
   22772:	e5d5      	b.n	22320 <_dtoa_r+0x670>
   22774:	2e00      	cmp	r6, #0
   22776:	d000      	beq.n	2277a <_dtoa_r+0xaca>
   22778:	e670      	b.n	2245c <_dtoa_r+0x7ac>
   2277a:	e7aa      	b.n	226d2 <_dtoa_r+0xa22>
   2277c:	f000 fde4 	bl	23348 <__multadd>
   22780:	46a2      	mov	sl, r4
   22782:	0005      	movs	r5, r0
   22784:	4680      	mov	r8, r0
   22786:	e6c7      	b.n	22518 <_dtoa_r+0x868>
   22788:	2301      	movs	r3, #1
   2278a:	469b      	mov	fp, r3
   2278c:	e6e2      	b.n	22554 <_dtoa_r+0x8a4>
   2278e:	2300      	movs	r3, #0
   22790:	930b      	str	r3, [sp, #44]	; 0x2c
   22792:	9b22      	ldr	r3, [sp, #136]	; 0x88
   22794:	2b02      	cmp	r3, #2
   22796:	d0af      	beq.n	226f8 <_dtoa_r+0xa48>
   22798:	2400      	movs	r4, #0
   2279a:	4653      	mov	r3, sl
   2279c:	0021      	movs	r1, r4
   2279e:	645c      	str	r4, [r3, #68]	; 0x44
   227a0:	4650      	mov	r0, sl
   227a2:	f000 fd9f 	bl	232e4 <_Balloc>
   227a6:	4653      	mov	r3, sl
   227a8:	6418      	str	r0, [r3, #64]	; 0x40
   227aa:	2301      	movs	r3, #1
   227ac:	425b      	negs	r3, r3
   227ae:	9307      	str	r3, [sp, #28]
   227b0:	930e      	str	r3, [sp, #56]	; 0x38
   227b2:	3302      	adds	r3, #2
   227b4:	900a      	str	r0, [sp, #40]	; 0x28
   227b6:	9423      	str	r4, [sp, #140]	; 0x8c
   227b8:	930b      	str	r3, [sp, #44]	; 0x2c
   227ba:	e4ec      	b.n	22196 <_dtoa_r+0x4e6>
   227bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   227be:	2b02      	cmp	r3, #2
   227c0:	dc00      	bgt.n	227c4 <_dtoa_r+0xb14>
   227c2:	e685      	b.n	224d0 <_dtoa_r+0x820>
   227c4:	9b07      	ldr	r3, [sp, #28]
   227c6:	2b00      	cmp	r3, #0
   227c8:	d1b5      	bne.n	22736 <_dtoa_r+0xa86>
   227ca:	4649      	mov	r1, r9
   227cc:	2205      	movs	r2, #5
   227ce:	4650      	mov	r0, sl
   227d0:	f000 fdba 	bl	23348 <__multadd>
   227d4:	4681      	mov	r9, r0
   227d6:	0001      	movs	r1, r0
   227d8:	4658      	mov	r0, fp
   227da:	f000 ffb7 	bl	2374c <__mcmp>
   227de:	2800      	cmp	r0, #0
   227e0:	dda9      	ble.n	22736 <_dtoa_r+0xa86>
   227e2:	2331      	movs	r3, #49	; 0x31
   227e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   227e6:	7013      	strb	r3, [r2, #0]
   227e8:	9b03      	ldr	r3, [sp, #12]
   227ea:	1c54      	adds	r4, r2, #1
   227ec:	3301      	adds	r3, #1
   227ee:	9303      	str	r3, [sp, #12]
   227f0:	e7a5      	b.n	2273e <_dtoa_r+0xa8e>
   227f2:	9b03      	ldr	r3, [sp, #12]
   227f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   227f6:	3301      	adds	r3, #1
   227f8:	9303      	str	r3, [sp, #12]
   227fa:	2331      	movs	r3, #49	; 0x31
   227fc:	7013      	strb	r3, [r2, #0]
   227fe:	e74e      	b.n	2269e <_dtoa_r+0x9ee>
   22800:	2300      	movs	r3, #0
   22802:	930b      	str	r3, [sp, #44]	; 0x2c
   22804:	f7ff fb3d 	bl	21e82 <_dtoa_r+0x1d2>
   22808:	9b06      	ldr	r3, [sp, #24]
   2280a:	465c      	mov	r4, fp
   2280c:	469b      	mov	fp, r3
   2280e:	9b07      	ldr	r3, [sp, #28]
   22810:	469a      	mov	sl, r3
   22812:	e47c      	b.n	2210e <_dtoa_r+0x45e>
   22814:	4640      	mov	r0, r8
   22816:	f7fd f92f 	bl	1fa78 <__aeabi_i2d>
   2281a:	0032      	movs	r2, r6
   2281c:	003b      	movs	r3, r7
   2281e:	f7fc fb41 	bl	1eea4 <__aeabi_dmul>
   22822:	2200      	movs	r2, #0
   22824:	4b6b      	ldr	r3, [pc, #428]	; (229d4 <_dtoa_r+0xd24>)
   22826:	f7fb fbf9 	bl	1e01c <__aeabi_dadd>
   2282a:	4a6b      	ldr	r2, [pc, #428]	; (229d8 <_dtoa_r+0xd28>)
   2282c:	000b      	movs	r3, r1
   2282e:	4694      	mov	ip, r2
   22830:	4463      	add	r3, ip
   22832:	9008      	str	r0, [sp, #32]
   22834:	9109      	str	r1, [sp, #36]	; 0x24
   22836:	9309      	str	r3, [sp, #36]	; 0x24
   22838:	2200      	movs	r2, #0
   2283a:	4b64      	ldr	r3, [pc, #400]	; (229cc <_dtoa_r+0xd1c>)
   2283c:	0030      	movs	r0, r6
   2283e:	0039      	movs	r1, r7
   22840:	f7fc fdb0 	bl	1f3a4 <__aeabi_dsub>
   22844:	9e08      	ldr	r6, [sp, #32]
   22846:	9f09      	ldr	r7, [sp, #36]	; 0x24
   22848:	0032      	movs	r2, r6
   2284a:	003b      	movs	r3, r7
   2284c:	0004      	movs	r4, r0
   2284e:	000d      	movs	r5, r1
   22850:	f7fa fc04 	bl	1d05c <__aeabi_dcmpgt>
   22854:	2800      	cmp	r0, #0
   22856:	d000      	beq.n	2285a <_dtoa_r+0xbaa>
   22858:	e0b2      	b.n	229c0 <_dtoa_r+0xd10>
   2285a:	2080      	movs	r0, #128	; 0x80
   2285c:	0600      	lsls	r0, r0, #24
   2285e:	4684      	mov	ip, r0
   22860:	0039      	movs	r1, r7
   22862:	4461      	add	r1, ip
   22864:	000b      	movs	r3, r1
   22866:	0032      	movs	r2, r6
   22868:	0020      	movs	r0, r4
   2286a:	0029      	movs	r1, r5
   2286c:	f7fa fbe2 	bl	1d034 <__aeabi_dcmplt>
   22870:	2800      	cmp	r0, #0
   22872:	d057      	beq.n	22924 <_dtoa_r+0xc74>
   22874:	2300      	movs	r3, #0
   22876:	4699      	mov	r9, r3
   22878:	4698      	mov	r8, r3
   2287a:	e75c      	b.n	22736 <_dtoa_r+0xa86>
   2287c:	980a      	ldr	r0, [sp, #40]	; 0x28
   2287e:	f7ff fa4c 	bl	21d1a <_dtoa_r+0x6a>
   22882:	1ae2      	subs	r2, r4, r3
   22884:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   22886:	46a1      	mov	r9, r4
   22888:	469c      	mov	ip, r3
   2288a:	4494      	add	ip, r2
   2288c:	4663      	mov	r3, ip
   2288e:	2400      	movs	r4, #0
   22890:	930d      	str	r3, [sp, #52]	; 0x34
   22892:	e53e      	b.n	22312 <_dtoa_r+0x662>
   22894:	9a10      	ldr	r2, [sp, #64]	; 0x40
   22896:	9b11      	ldr	r3, [sp, #68]	; 0x44
   22898:	9208      	str	r2, [sp, #32]
   2289a:	9309      	str	r3, [sp, #36]	; 0x24
   2289c:	2302      	movs	r3, #2
   2289e:	4698      	mov	r8, r3
   228a0:	f7ff fb3a 	bl	21f18 <_dtoa_r+0x268>
   228a4:	2300      	movs	r3, #0
   228a6:	4652      	mov	r2, sl
   228a8:	2100      	movs	r1, #0
   228aa:	6453      	str	r3, [r2, #68]	; 0x44
   228ac:	4650      	mov	r0, sl
   228ae:	f000 fd19 	bl	232e4 <_Balloc>
   228b2:	4653      	mov	r3, sl
   228b4:	6418      	str	r0, [r3, #64]	; 0x40
   228b6:	2301      	movs	r3, #1
   228b8:	900a      	str	r0, [sp, #40]	; 0x28
   228ba:	9307      	str	r3, [sp, #28]
   228bc:	9323      	str	r3, [sp, #140]	; 0x8c
   228be:	930e      	str	r3, [sp, #56]	; 0x38
   228c0:	f7ff fb07 	bl	21ed2 <_dtoa_r+0x222>
   228c4:	4643      	mov	r3, r8
   228c6:	930c      	str	r3, [sp, #48]	; 0x30
   228c8:	465b      	mov	r3, fp
   228ca:	9a06      	ldr	r2, [sp, #24]
   228cc:	46a8      	mov	r8, r5
   228ce:	46b3      	mov	fp, r6
   228d0:	4655      	mov	r5, sl
   228d2:	9e04      	ldr	r6, [sp, #16]
   228d4:	4691      	mov	r9, r2
   228d6:	46ba      	mov	sl, r7
   228d8:	2b00      	cmp	r3, #0
   228da:	dd10      	ble.n	228fe <_dtoa_r+0xc4e>
   228dc:	4659      	mov	r1, fp
   228de:	2201      	movs	r2, #1
   228e0:	0038      	movs	r0, r7
   228e2:	f000 fed3 	bl	2368c <__lshift>
   228e6:	4649      	mov	r1, r9
   228e8:	4683      	mov	fp, r0
   228ea:	f000 ff2f 	bl	2374c <__mcmp>
   228ee:	2800      	cmp	r0, #0
   228f0:	dc00      	bgt.n	228f4 <_dtoa_r+0xc44>
   228f2:	e157      	b.n	22ba4 <_dtoa_r+0xef4>
   228f4:	2e39      	cmp	r6, #57	; 0x39
   228f6:	d100      	bne.n	228fa <_dtoa_r+0xc4a>
   228f8:	e122      	b.n	22b40 <_dtoa_r+0xe90>
   228fa:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   228fc:	3631      	adds	r6, #49	; 0x31
   228fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   22900:	4647      	mov	r7, r8
   22902:	1c6c      	adds	r4, r5, #1
   22904:	702e      	strb	r6, [r5, #0]
   22906:	4698      	mov	r8, r3
   22908:	e6c9      	b.n	2269e <_dtoa_r+0x9ee>
   2290a:	2800      	cmp	r0, #0
   2290c:	d103      	bne.n	22916 <_dtoa_r+0xc66>
   2290e:	07f3      	lsls	r3, r6, #31
   22910:	d501      	bpl.n	22916 <_dtoa_r+0xc66>
   22912:	e6b5      	b.n	22680 <_dtoa_r+0x9d0>
   22914:	001c      	movs	r4, r3
   22916:	1e63      	subs	r3, r4, #1
   22918:	781a      	ldrb	r2, [r3, #0]
   2291a:	2a30      	cmp	r2, #48	; 0x30
   2291c:	d0fa      	beq.n	22914 <_dtoa_r+0xc64>
   2291e:	e6be      	b.n	2269e <_dtoa_r+0x9ee>
   22920:	9b12      	ldr	r3, [sp, #72]	; 0x48
   22922:	4699      	mov	r9, r3
   22924:	9e10      	ldr	r6, [sp, #64]	; 0x40
   22926:	9f11      	ldr	r7, [sp, #68]	; 0x44
   22928:	e435      	b.n	22196 <_dtoa_r+0x4e6>
   2292a:	2501      	movs	r5, #1
   2292c:	f7ff fab4 	bl	21e98 <_dtoa_r+0x1e8>
   22930:	9b03      	ldr	r3, [sp, #12]
   22932:	2b00      	cmp	r3, #0
   22934:	d100      	bne.n	22938 <_dtoa_r+0xc88>
   22936:	e0d4      	b.n	22ae2 <_dtoa_r+0xe32>
   22938:	9810      	ldr	r0, [sp, #64]	; 0x40
   2293a:	9911      	ldr	r1, [sp, #68]	; 0x44
   2293c:	425c      	negs	r4, r3
   2293e:	230f      	movs	r3, #15
   22940:	4a26      	ldr	r2, [pc, #152]	; (229dc <_dtoa_r+0xd2c>)
   22942:	4023      	ands	r3, r4
   22944:	00db      	lsls	r3, r3, #3
   22946:	18d3      	adds	r3, r2, r3
   22948:	681a      	ldr	r2, [r3, #0]
   2294a:	685b      	ldr	r3, [r3, #4]
   2294c:	f7fc faaa 	bl	1eea4 <__aeabi_dmul>
   22950:	1124      	asrs	r4, r4, #4
   22952:	0006      	movs	r6, r0
   22954:	000f      	movs	r7, r1
   22956:	2c00      	cmp	r4, #0
   22958:	d100      	bne.n	2295c <_dtoa_r+0xcac>
   2295a:	e149      	b.n	22bf0 <_dtoa_r+0xf40>
   2295c:	2302      	movs	r3, #2
   2295e:	4698      	mov	r8, r3
   22960:	4d1f      	ldr	r5, [pc, #124]	; (229e0 <_dtoa_r+0xd30>)
   22962:	2301      	movs	r3, #1
   22964:	4223      	tst	r3, r4
   22966:	d009      	beq.n	2297c <_dtoa_r+0xccc>
   22968:	469c      	mov	ip, r3
   2296a:	682a      	ldr	r2, [r5, #0]
   2296c:	686b      	ldr	r3, [r5, #4]
   2296e:	0030      	movs	r0, r6
   22970:	0039      	movs	r1, r7
   22972:	44e0      	add	r8, ip
   22974:	f7fc fa96 	bl	1eea4 <__aeabi_dmul>
   22978:	0006      	movs	r6, r0
   2297a:	000f      	movs	r7, r1
   2297c:	1064      	asrs	r4, r4, #1
   2297e:	3508      	adds	r5, #8
   22980:	2c00      	cmp	r4, #0
   22982:	d1ee      	bne.n	22962 <_dtoa_r+0xcb2>
   22984:	f7ff fae4 	bl	21f50 <_dtoa_r+0x2a0>
   22988:	9b03      	ldr	r3, [sp, #12]
   2298a:	2730      	movs	r7, #48	; 0x30
   2298c:	3301      	adds	r3, #1
   2298e:	9303      	str	r3, [sp, #12]
   22990:	2330      	movs	r3, #48	; 0x30
   22992:	702b      	strb	r3, [r5, #0]
   22994:	e4ac      	b.n	222f0 <_dtoa_r+0x640>
   22996:	6859      	ldr	r1, [r3, #4]
   22998:	4650      	mov	r0, sl
   2299a:	f000 fca3 	bl	232e4 <_Balloc>
   2299e:	4643      	mov	r3, r8
   229a0:	4641      	mov	r1, r8
   229a2:	0004      	movs	r4, r0
   229a4:	691b      	ldr	r3, [r3, #16]
   229a6:	310c      	adds	r1, #12
   229a8:	1c9a      	adds	r2, r3, #2
   229aa:	0092      	lsls	r2, r2, #2
   229ac:	300c      	adds	r0, #12
   229ae:	f7fd f9e3 	bl	1fd78 <memcpy>
   229b2:	2201      	movs	r2, #1
   229b4:	0021      	movs	r1, r4
   229b6:	4650      	mov	r0, sl
   229b8:	f000 fe68 	bl	2368c <__lshift>
   229bc:	900c      	str	r0, [sp, #48]	; 0x30
   229be:	e599      	b.n	224f4 <_dtoa_r+0x844>
   229c0:	2300      	movs	r3, #0
   229c2:	4699      	mov	r9, r3
   229c4:	4698      	mov	r8, r3
   229c6:	e70c      	b.n	227e2 <_dtoa_r+0xb32>
   229c8:	7ff00000 	.word	0x7ff00000
   229cc:	40140000 	.word	0x40140000
   229d0:	00000433 	.word	0x00000433
   229d4:	401c0000 	.word	0x401c0000
   229d8:	fcc00000 	.word	0xfcc00000
   229dc:	00026de8 	.word	0x00026de8
   229e0:	00026dc0 	.word	0x00026dc0
   229e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   229e6:	498f      	ldr	r1, [pc, #572]	; (22c24 <_dtoa_r+0xf74>)
   229e8:	3b01      	subs	r3, #1
   229ea:	00db      	lsls	r3, r3, #3
   229ec:	18c9      	adds	r1, r1, r3
   229ee:	6808      	ldr	r0, [r1, #0]
   229f0:	6849      	ldr	r1, [r1, #4]
   229f2:	9a08      	ldr	r2, [sp, #32]
   229f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   229f6:	f7fc fa55 	bl	1eea4 <__aeabi_dmul>
   229fa:	9014      	str	r0, [sp, #80]	; 0x50
   229fc:	9115      	str	r1, [sp, #84]	; 0x54
   229fe:	0039      	movs	r1, r7
   22a00:	0030      	movs	r0, r6
   22a02:	f7fd f805 	bl	1fa10 <__aeabi_d2iz>
   22a06:	0005      	movs	r5, r0
   22a08:	f7fd f836 	bl	1fa78 <__aeabi_i2d>
   22a0c:	0002      	movs	r2, r0
   22a0e:	000b      	movs	r3, r1
   22a10:	0030      	movs	r0, r6
   22a12:	0039      	movs	r1, r7
   22a14:	f7fc fcc6 	bl	1f3a4 <__aeabi_dsub>
   22a18:	9b12      	ldr	r3, [sp, #72]	; 0x48
   22a1a:	9008      	str	r0, [sp, #32]
   22a1c:	9109      	str	r1, [sp, #36]	; 0x24
   22a1e:	990a      	ldr	r1, [sp, #40]	; 0x28
   22a20:	001a      	movs	r2, r3
   22a22:	468c      	mov	ip, r1
   22a24:	3530      	adds	r5, #48	; 0x30
   22a26:	4462      	add	r2, ip
   22a28:	1c4c      	adds	r4, r1, #1
   22a2a:	700d      	strb	r5, [r1, #0]
   22a2c:	4690      	mov	r8, r2
   22a2e:	2b01      	cmp	r3, #1
   22a30:	d01b      	beq.n	22a6a <_dtoa_r+0xdba>
   22a32:	9808      	ldr	r0, [sp, #32]
   22a34:	9909      	ldr	r1, [sp, #36]	; 0x24
   22a36:	0025      	movs	r5, r4
   22a38:	2200      	movs	r2, #0
   22a3a:	4b7b      	ldr	r3, [pc, #492]	; (22c28 <_dtoa_r+0xf78>)
   22a3c:	f7fc fa32 	bl	1eea4 <__aeabi_dmul>
   22a40:	000f      	movs	r7, r1
   22a42:	0006      	movs	r6, r0
   22a44:	f7fc ffe4 	bl	1fa10 <__aeabi_d2iz>
   22a48:	0004      	movs	r4, r0
   22a4a:	f7fd f815 	bl	1fa78 <__aeabi_i2d>
   22a4e:	3430      	adds	r4, #48	; 0x30
   22a50:	0002      	movs	r2, r0
   22a52:	000b      	movs	r3, r1
   22a54:	0030      	movs	r0, r6
   22a56:	0039      	movs	r1, r7
   22a58:	f7fc fca4 	bl	1f3a4 <__aeabi_dsub>
   22a5c:	702c      	strb	r4, [r5, #0]
   22a5e:	3501      	adds	r5, #1
   22a60:	45a8      	cmp	r8, r5
   22a62:	d1e9      	bne.n	22a38 <_dtoa_r+0xd88>
   22a64:	4644      	mov	r4, r8
   22a66:	9008      	str	r0, [sp, #32]
   22a68:	9109      	str	r1, [sp, #36]	; 0x24
   22a6a:	9814      	ldr	r0, [sp, #80]	; 0x50
   22a6c:	9915      	ldr	r1, [sp, #84]	; 0x54
   22a6e:	2200      	movs	r2, #0
   22a70:	4b6e      	ldr	r3, [pc, #440]	; (22c2c <_dtoa_r+0xf7c>)
   22a72:	f7fb fad3 	bl	1e01c <__aeabi_dadd>
   22a76:	9a08      	ldr	r2, [sp, #32]
   22a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
   22a7a:	f7fa fadb 	bl	1d034 <__aeabi_dcmplt>
   22a7e:	2800      	cmp	r0, #0
   22a80:	d067      	beq.n	22b52 <_dtoa_r+0xea2>
   22a82:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   22a84:	1e65      	subs	r5, r4, #1
   22a86:	9303      	str	r3, [sp, #12]
   22a88:	782f      	ldrb	r7, [r5, #0]
   22a8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22a8c:	e42e      	b.n	222ec <_dtoa_r+0x63c>
   22a8e:	4643      	mov	r3, r8
   22a90:	46b3      	mov	fp, r6
   22a92:	930c      	str	r3, [sp, #48]	; 0x30
   22a94:	9e04      	ldr	r6, [sp, #16]
   22a96:	9b06      	ldr	r3, [sp, #24]
   22a98:	46a8      	mov	r8, r5
   22a9a:	4699      	mov	r9, r3
   22a9c:	4655      	mov	r5, sl
   22a9e:	46ba      	mov	sl, r7
   22aa0:	2e39      	cmp	r6, #57	; 0x39
   22aa2:	d04d      	beq.n	22b40 <_dtoa_r+0xe90>
   22aa4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   22aa6:	3601      	adds	r6, #1
   22aa8:	4647      	mov	r7, r8
   22aaa:	1c6c      	adds	r4, r5, #1
   22aac:	702e      	strb	r6, [r5, #0]
   22aae:	4698      	mov	r8, r3
   22ab0:	e5f5      	b.n	2269e <_dtoa_r+0x9ee>
   22ab2:	4642      	mov	r2, r8
   22ab4:	9b06      	ldr	r3, [sp, #24]
   22ab6:	46b3      	mov	fp, r6
   22ab8:	46ba      	mov	sl, r7
   22aba:	9e04      	ldr	r6, [sp, #16]
   22abc:	4699      	mov	r9, r3
   22abe:	002f      	movs	r7, r5
   22ac0:	4690      	mov	r8, r2
   22ac2:	e5d1      	b.n	22668 <_dtoa_r+0x9b8>
   22ac4:	9b06      	ldr	r3, [sp, #24]
   22ac6:	9a07      	ldr	r2, [sp, #28]
   22ac8:	1a9b      	subs	r3, r3, r2
   22aca:	9308      	str	r3, [sp, #32]
   22acc:	2300      	movs	r3, #0
   22ace:	e427      	b.n	22320 <_dtoa_r+0x670>
   22ad0:	2401      	movs	r4, #1
   22ad2:	e5c5      	b.n	22660 <_dtoa_r+0x9b0>
   22ad4:	2336      	movs	r3, #54	; 0x36
   22ad6:	9a16      	ldr	r2, [sp, #88]	; 0x58
   22ad8:	464c      	mov	r4, r9
   22ada:	1a9b      	subs	r3, r3, r2
   22adc:	9a06      	ldr	r2, [sp, #24]
   22ade:	9208      	str	r2, [sp, #32]
   22ae0:	e41e      	b.n	22320 <_dtoa_r+0x670>
   22ae2:	2302      	movs	r3, #2
   22ae4:	9e10      	ldr	r6, [sp, #64]	; 0x40
   22ae6:	9f11      	ldr	r7, [sp, #68]	; 0x44
   22ae8:	4698      	mov	r8, r3
   22aea:	f7ff fa31 	bl	21f50 <_dtoa_r+0x2a0>
   22aee:	9b07      	ldr	r3, [sp, #28]
   22af0:	2b00      	cmp	r3, #0
   22af2:	d100      	bne.n	22af6 <_dtoa_r+0xe46>
   22af4:	e68e      	b.n	22814 <_dtoa_r+0xb64>
   22af6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   22af8:	2c00      	cmp	r4, #0
   22afa:	dc00      	bgt.n	22afe <_dtoa_r+0xe4e>
   22afc:	e712      	b.n	22924 <_dtoa_r+0xc74>
   22afe:	9b03      	ldr	r3, [sp, #12]
   22b00:	2200      	movs	r2, #0
   22b02:	3b01      	subs	r3, #1
   22b04:	9313      	str	r3, [sp, #76]	; 0x4c
   22b06:	0030      	movs	r0, r6
   22b08:	4b47      	ldr	r3, [pc, #284]	; (22c28 <_dtoa_r+0xf78>)
   22b0a:	0039      	movs	r1, r7
   22b0c:	f7fc f9ca 	bl	1eea4 <__aeabi_dmul>
   22b10:	0006      	movs	r6, r0
   22b12:	4640      	mov	r0, r8
   22b14:	000f      	movs	r7, r1
   22b16:	3001      	adds	r0, #1
   22b18:	f7fc ffae 	bl	1fa78 <__aeabi_i2d>
   22b1c:	0032      	movs	r2, r6
   22b1e:	003b      	movs	r3, r7
   22b20:	f7fc f9c0 	bl	1eea4 <__aeabi_dmul>
   22b24:	2200      	movs	r2, #0
   22b26:	4b42      	ldr	r3, [pc, #264]	; (22c30 <_dtoa_r+0xf80>)
   22b28:	f7fb fa78 	bl	1e01c <__aeabi_dadd>
   22b2c:	4a41      	ldr	r2, [pc, #260]	; (22c34 <_dtoa_r+0xf84>)
   22b2e:	000b      	movs	r3, r1
   22b30:	4694      	mov	ip, r2
   22b32:	4463      	add	r3, ip
   22b34:	9008      	str	r0, [sp, #32]
   22b36:	9109      	str	r1, [sp, #36]	; 0x24
   22b38:	9412      	str	r4, [sp, #72]	; 0x48
   22b3a:	9309      	str	r3, [sp, #36]	; 0x24
   22b3c:	f7ff fa30 	bl	21fa0 <_dtoa_r+0x2f0>
   22b40:	2339      	movs	r3, #57	; 0x39
   22b42:	702b      	strb	r3, [r5, #0]
   22b44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   22b46:	4647      	mov	r7, r8
   22b48:	1c6c      	adds	r4, r5, #1
   22b4a:	4698      	mov	r8, r3
   22b4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   22b4e:	2339      	movs	r3, #57	; 0x39
   22b50:	e5a1      	b.n	22696 <_dtoa_r+0x9e6>
   22b52:	9a14      	ldr	r2, [sp, #80]	; 0x50
   22b54:	9b15      	ldr	r3, [sp, #84]	; 0x54
   22b56:	2000      	movs	r0, #0
   22b58:	4934      	ldr	r1, [pc, #208]	; (22c2c <_dtoa_r+0xf7c>)
   22b5a:	f7fc fc23 	bl	1f3a4 <__aeabi_dsub>
   22b5e:	9a08      	ldr	r2, [sp, #32]
   22b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
   22b62:	f7fa fa7b 	bl	1d05c <__aeabi_dcmpgt>
   22b66:	2800      	cmp	r0, #0
   22b68:	d101      	bne.n	22b6e <_dtoa_r+0xebe>
   22b6a:	e6db      	b.n	22924 <_dtoa_r+0xc74>
   22b6c:	001c      	movs	r4, r3
   22b6e:	1e63      	subs	r3, r4, #1
   22b70:	781a      	ldrb	r2, [r3, #0]
   22b72:	2a30      	cmp	r2, #48	; 0x30
   22b74:	d0fa      	beq.n	22b6c <_dtoa_r+0xebc>
   22b76:	f7ff fac8 	bl	2210a <_dtoa_r+0x45a>
   22b7a:	4643      	mov	r3, r8
   22b7c:	46b3      	mov	fp, r6
   22b7e:	930c      	str	r3, [sp, #48]	; 0x30
   22b80:	9e04      	ldr	r6, [sp, #16]
   22b82:	9b06      	ldr	r3, [sp, #24]
   22b84:	46a8      	mov	r8, r5
   22b86:	4699      	mov	r9, r3
   22b88:	4655      	mov	r5, sl
   22b8a:	46ba      	mov	sl, r7
   22b8c:	2e39      	cmp	r6, #57	; 0x39
   22b8e:	d0d7      	beq.n	22b40 <_dtoa_r+0xe90>
   22b90:	2c00      	cmp	r4, #0
   22b92:	dd00      	ble.n	22b96 <_dtoa_r+0xee6>
   22b94:	e6b1      	b.n	228fa <_dtoa_r+0xc4a>
   22b96:	e6b2      	b.n	228fe <_dtoa_r+0xc4e>
   22b98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   22b9a:	464d      	mov	r5, r9
   22b9c:	9203      	str	r2, [sp, #12]
   22b9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22ba0:	f7ff fba4 	bl	222ec <_dtoa_r+0x63c>
   22ba4:	2800      	cmp	r0, #0
   22ba6:	d000      	beq.n	22baa <_dtoa_r+0xefa>
   22ba8:	e6a9      	b.n	228fe <_dtoa_r+0xc4e>
   22baa:	07f3      	lsls	r3, r6, #31
   22bac:	d400      	bmi.n	22bb0 <_dtoa_r+0xf00>
   22bae:	e6a6      	b.n	228fe <_dtoa_r+0xc4e>
   22bb0:	e6a0      	b.n	228f4 <_dtoa_r+0xc44>
   22bb2:	2300      	movs	r3, #0
   22bb4:	4641      	mov	r1, r8
   22bb6:	220a      	movs	r2, #10
   22bb8:	4650      	mov	r0, sl
   22bba:	f000 fbc5 	bl	23348 <__multadd>
   22bbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   22bc0:	4680      	mov	r8, r0
   22bc2:	2b00      	cmp	r3, #0
   22bc4:	dd01      	ble.n	22bca <_dtoa_r+0xf1a>
   22bc6:	9307      	str	r3, [sp, #28]
   22bc8:	e486      	b.n	224d8 <_dtoa_r+0x828>
   22bca:	9b22      	ldr	r3, [sp, #136]	; 0x88
   22bcc:	2b02      	cmp	r3, #2
   22bce:	dc1f      	bgt.n	22c10 <_dtoa_r+0xf60>
   22bd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   22bd2:	9307      	str	r3, [sp, #28]
   22bd4:	e480      	b.n	224d8 <_dtoa_r+0x828>
   22bd6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   22bd8:	2b02      	cmp	r3, #2
   22bda:	dc19      	bgt.n	22c10 <_dtoa_r+0xf60>
   22bdc:	4649      	mov	r1, r9
   22bde:	f7fe ffbd 	bl	21b5c <quorem>
   22be2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22be4:	3030      	adds	r0, #48	; 0x30
   22be6:	7018      	strb	r0, [r3, #0]
   22be8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   22bea:	0006      	movs	r6, r0
   22bec:	9307      	str	r3, [sp, #28]
   22bee:	e533      	b.n	22658 <_dtoa_r+0x9a8>
   22bf0:	2302      	movs	r3, #2
   22bf2:	4698      	mov	r8, r3
   22bf4:	f7ff f9ac 	bl	21f50 <_dtoa_r+0x2a0>
   22bf8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   22bfa:	9c14      	ldr	r4, [sp, #80]	; 0x50
   22bfc:	9303      	str	r3, [sp, #12]
   22bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22c00:	001d      	movs	r5, r3
   22c02:	f7ff fb73 	bl	222ec <_dtoa_r+0x63c>
   22c06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   22c08:	9c14      	ldr	r4, [sp, #80]	; 0x50
   22c0a:	9303      	str	r3, [sp, #12]
   22c0c:	f7ff fa7f 	bl	2210e <_dtoa_r+0x45e>
   22c10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   22c12:	9307      	str	r3, [sp, #28]
   22c14:	e5d6      	b.n	227c4 <_dtoa_r+0xb14>
   22c16:	2b04      	cmp	r3, #4
   22c18:	d100      	bne.n	22c1c <_dtoa_r+0xf6c>
   22c1a:	e43f      	b.n	2249c <_dtoa_r+0x7ec>
   22c1c:	233c      	movs	r3, #60	; 0x3c
   22c1e:	1a18      	subs	r0, r3, r0
   22c20:	e4d7      	b.n	225d2 <_dtoa_r+0x922>
   22c22:	46c0      	nop			; (mov r8, r8)
   22c24:	00026de8 	.word	0x00026de8
   22c28:	40240000 	.word	0x40240000
   22c2c:	3fe00000 	.word	0x3fe00000
   22c30:	401c0000 	.word	0x401c0000
   22c34:	fcc00000 	.word	0xfcc00000

00022c38 <__libc_fini_array>:
   22c38:	b570      	push	{r4, r5, r6, lr}
   22c3a:	4b09      	ldr	r3, [pc, #36]	; (22c60 <__libc_fini_array+0x28>)
   22c3c:	4c09      	ldr	r4, [pc, #36]	; (22c64 <__libc_fini_array+0x2c>)
   22c3e:	1ae4      	subs	r4, r4, r3
   22c40:	10a4      	asrs	r4, r4, #2
   22c42:	d009      	beq.n	22c58 <__libc_fini_array+0x20>
   22c44:	4a08      	ldr	r2, [pc, #32]	; (22c68 <__libc_fini_array+0x30>)
   22c46:	18a5      	adds	r5, r4, r2
   22c48:	00ad      	lsls	r5, r5, #2
   22c4a:	18ed      	adds	r5, r5, r3
   22c4c:	682b      	ldr	r3, [r5, #0]
   22c4e:	3c01      	subs	r4, #1
   22c50:	4798      	blx	r3
   22c52:	3d04      	subs	r5, #4
   22c54:	2c00      	cmp	r4, #0
   22c56:	d1f9      	bne.n	22c4c <__libc_fini_array+0x14>
   22c58:	f004 f9c0 	bl	26fdc <_fini>
   22c5c:	bd70      	pop	{r4, r5, r6, pc}
   22c5e:	46c0      	nop			; (mov r8, r8)
   22c60:	00026fe8 	.word	0x00026fe8
   22c64:	00026fec 	.word	0x00026fec
   22c68:	3fffffff 	.word	0x3fffffff

00022c6c <_localeconv_r>:
   22c6c:	4b04      	ldr	r3, [pc, #16]	; (22c80 <_localeconv_r+0x14>)
   22c6e:	681b      	ldr	r3, [r3, #0]
   22c70:	6b58      	ldr	r0, [r3, #52]	; 0x34
   22c72:	2800      	cmp	r0, #0
   22c74:	d001      	beq.n	22c7a <_localeconv_r+0xe>
   22c76:	30f0      	adds	r0, #240	; 0xf0
   22c78:	4770      	bx	lr
   22c7a:	4802      	ldr	r0, [pc, #8]	; (22c84 <_localeconv_r+0x18>)
   22c7c:	e7fb      	b.n	22c76 <_localeconv_r+0xa>
   22c7e:	46c0      	nop			; (mov r8, r8)
   22c80:	200003ac 	.word	0x200003ac
   22c84:	20000bec 	.word	0x20000bec

00022c88 <__retarget_lock_acquire_recursive>:
   22c88:	4770      	bx	lr
   22c8a:	46c0      	nop			; (mov r8, r8)

00022c8c <__retarget_lock_release_recursive>:
   22c8c:	4770      	bx	lr
   22c8e:	46c0      	nop			; (mov r8, r8)

00022c90 <_malloc_r>:
   22c90:	b5f0      	push	{r4, r5, r6, r7, lr}
   22c92:	4657      	mov	r7, sl
   22c94:	4645      	mov	r5, r8
   22c96:	46de      	mov	lr, fp
   22c98:	464e      	mov	r6, r9
   22c9a:	b5e0      	push	{r5, r6, r7, lr}
   22c9c:	000d      	movs	r5, r1
   22c9e:	350b      	adds	r5, #11
   22ca0:	b083      	sub	sp, #12
   22ca2:	0007      	movs	r7, r0
   22ca4:	2d16      	cmp	r5, #22
   22ca6:	d800      	bhi.n	22caa <_malloc_r+0x1a>
   22ca8:	e09f      	b.n	22dea <_malloc_r+0x15a>
   22caa:	2307      	movs	r3, #7
   22cac:	439d      	bics	r5, r3
   22cae:	d500      	bpl.n	22cb2 <_malloc_r+0x22>
   22cb0:	e0c4      	b.n	22e3c <_malloc_r+0x1ac>
   22cb2:	42a9      	cmp	r1, r5
   22cb4:	d900      	bls.n	22cb8 <_malloc_r+0x28>
   22cb6:	e0c1      	b.n	22e3c <_malloc_r+0x1ac>
   22cb8:	f000 fb04 	bl	232c4 <__malloc_lock>
   22cbc:	23f8      	movs	r3, #248	; 0xf8
   22cbe:	33ff      	adds	r3, #255	; 0xff
   22cc0:	429d      	cmp	r5, r3
   22cc2:	d800      	bhi.n	22cc6 <_malloc_r+0x36>
   22cc4:	e28f      	b.n	231e6 <_malloc_r+0x556>
   22cc6:	0a68      	lsrs	r0, r5, #9
   22cc8:	d100      	bne.n	22ccc <_malloc_r+0x3c>
   22cca:	e0bb      	b.n	22e44 <_malloc_r+0x1b4>
   22ccc:	2804      	cmp	r0, #4
   22cce:	d900      	bls.n	22cd2 <_malloc_r+0x42>
   22cd0:	e162      	b.n	22f98 <_malloc_r+0x308>
   22cd2:	2338      	movs	r3, #56	; 0x38
   22cd4:	4698      	mov	r8, r3
   22cd6:	09a8      	lsrs	r0, r5, #6
   22cd8:	4480      	add	r8, r0
   22cda:	3039      	adds	r0, #57	; 0x39
   22cdc:	00c1      	lsls	r1, r0, #3
   22cde:	4ed2      	ldr	r6, [pc, #840]	; (23028 <_malloc_r+0x398>)
   22ce0:	1871      	adds	r1, r6, r1
   22ce2:	3908      	subs	r1, #8
   22ce4:	68cc      	ldr	r4, [r1, #12]
   22ce6:	42a1      	cmp	r1, r4
   22ce8:	d019      	beq.n	22d1e <_malloc_r+0x8e>
   22cea:	2303      	movs	r3, #3
   22cec:	6862      	ldr	r2, [r4, #4]
   22cee:	439a      	bics	r2, r3
   22cf0:	0013      	movs	r3, r2
   22cf2:	1b52      	subs	r2, r2, r5
   22cf4:	2a0f      	cmp	r2, #15
   22cf6:	dd00      	ble.n	22cfa <_malloc_r+0x6a>
   22cf8:	e0aa      	b.n	22e50 <_malloc_r+0x1c0>
   22cfa:	2a00      	cmp	r2, #0
   22cfc:	db00      	blt.n	22d00 <_malloc_r+0x70>
   22cfe:	e088      	b.n	22e12 <_malloc_r+0x182>
   22d00:	2303      	movs	r3, #3
   22d02:	469c      	mov	ip, r3
   22d04:	e008      	b.n	22d18 <_malloc_r+0x88>
   22d06:	4662      	mov	r2, ip
   22d08:	6863      	ldr	r3, [r4, #4]
   22d0a:	4393      	bics	r3, r2
   22d0c:	1b5a      	subs	r2, r3, r5
   22d0e:	2a0f      	cmp	r2, #15
   22d10:	dd00      	ble.n	22d14 <_malloc_r+0x84>
   22d12:	e09d      	b.n	22e50 <_malloc_r+0x1c0>
   22d14:	2a00      	cmp	r2, #0
   22d16:	da7c      	bge.n	22e12 <_malloc_r+0x182>
   22d18:	68e4      	ldr	r4, [r4, #12]
   22d1a:	42a1      	cmp	r1, r4
   22d1c:	d1f3      	bne.n	22d06 <_malloc_r+0x76>
   22d1e:	0032      	movs	r2, r6
   22d20:	6934      	ldr	r4, [r6, #16]
   22d22:	3208      	adds	r2, #8
   22d24:	4294      	cmp	r4, r2
   22d26:	d100      	bne.n	22d2a <_malloc_r+0x9a>
   22d28:	e190      	b.n	2304c <_malloc_r+0x3bc>
   22d2a:	2303      	movs	r3, #3
   22d2c:	6861      	ldr	r1, [r4, #4]
   22d2e:	4399      	bics	r1, r3
   22d30:	4689      	mov	r9, r1
   22d32:	1b49      	subs	r1, r1, r5
   22d34:	290f      	cmp	r1, #15
   22d36:	dd00      	ble.n	22d3a <_malloc_r+0xaa>
   22d38:	e162      	b.n	23000 <_malloc_r+0x370>
   22d3a:	6172      	str	r2, [r6, #20]
   22d3c:	6132      	str	r2, [r6, #16]
   22d3e:	2900      	cmp	r1, #0
   22d40:	db00      	blt.n	22d44 <_malloc_r+0xb4>
   22d42:	e087      	b.n	22e54 <_malloc_r+0x1c4>
   22d44:	4ab9      	ldr	r2, [pc, #740]	; (2302c <_malloc_r+0x39c>)
   22d46:	464b      	mov	r3, r9
   22d48:	4591      	cmp	r9, r2
   22d4a:	d900      	bls.n	22d4e <_malloc_r+0xbe>
   22d4c:	e130      	b.n	22fb0 <_malloc_r+0x320>
   22d4e:	08db      	lsrs	r3, r3, #3
   22d50:	3aff      	subs	r2, #255	; 0xff
   22d52:	1099      	asrs	r1, r3, #2
   22d54:	3aff      	subs	r2, #255	; 0xff
   22d56:	408a      	lsls	r2, r1
   22d58:	00db      	lsls	r3, r3, #3
   22d5a:	6871      	ldr	r1, [r6, #4]
   22d5c:	199b      	adds	r3, r3, r6
   22d5e:	430a      	orrs	r2, r1
   22d60:	6899      	ldr	r1, [r3, #8]
   22d62:	6072      	str	r2, [r6, #4]
   22d64:	60e3      	str	r3, [r4, #12]
   22d66:	60a1      	str	r1, [r4, #8]
   22d68:	609c      	str	r4, [r3, #8]
   22d6a:	0013      	movs	r3, r2
   22d6c:	60cc      	str	r4, [r1, #12]
   22d6e:	2101      	movs	r1, #1
   22d70:	1082      	asrs	r2, r0, #2
   22d72:	4091      	lsls	r1, r2
   22d74:	4299      	cmp	r1, r3
   22d76:	d86f      	bhi.n	22e58 <_malloc_r+0x1c8>
   22d78:	420b      	tst	r3, r1
   22d7a:	d105      	bne.n	22d88 <_malloc_r+0xf8>
   22d7c:	2203      	movs	r2, #3
   22d7e:	4390      	bics	r0, r2
   22d80:	0049      	lsls	r1, r1, #1
   22d82:	3004      	adds	r0, #4
   22d84:	420b      	tst	r3, r1
   22d86:	d0fb      	beq.n	22d80 <_malloc_r+0xf0>
   22d88:	2303      	movs	r3, #3
   22d8a:	4698      	mov	r8, r3
   22d8c:	00c3      	lsls	r3, r0, #3
   22d8e:	4699      	mov	r9, r3
   22d90:	44b1      	add	r9, r6
   22d92:	46cc      	mov	ip, r9
   22d94:	4682      	mov	sl, r0
   22d96:	4663      	mov	r3, ip
   22d98:	68dc      	ldr	r4, [r3, #12]
   22d9a:	45a4      	cmp	ip, r4
   22d9c:	d107      	bne.n	22dae <_malloc_r+0x11e>
   22d9e:	e157      	b.n	23050 <_malloc_r+0x3c0>
   22da0:	2a00      	cmp	r2, #0
   22da2:	db00      	blt.n	22da6 <_malloc_r+0x116>
   22da4:	e166      	b.n	23074 <_malloc_r+0x3e4>
   22da6:	68e4      	ldr	r4, [r4, #12]
   22da8:	45a4      	cmp	ip, r4
   22daa:	d100      	bne.n	22dae <_malloc_r+0x11e>
   22dac:	e150      	b.n	23050 <_malloc_r+0x3c0>
   22dae:	4642      	mov	r2, r8
   22db0:	6863      	ldr	r3, [r4, #4]
   22db2:	4393      	bics	r3, r2
   22db4:	1b5a      	subs	r2, r3, r5
   22db6:	2a0f      	cmp	r2, #15
   22db8:	ddf2      	ble.n	22da0 <_malloc_r+0x110>
   22dba:	2001      	movs	r0, #1
   22dbc:	4680      	mov	r8, r0
   22dbe:	1961      	adds	r1, r4, r5
   22dc0:	4305      	orrs	r5, r0
   22dc2:	6065      	str	r5, [r4, #4]
   22dc4:	68a0      	ldr	r0, [r4, #8]
   22dc6:	68e5      	ldr	r5, [r4, #12]
   22dc8:	3608      	adds	r6, #8
   22dca:	60c5      	str	r5, [r0, #12]
   22dcc:	60a8      	str	r0, [r5, #8]
   22dce:	4640      	mov	r0, r8
   22dd0:	60f1      	str	r1, [r6, #12]
   22dd2:	60b1      	str	r1, [r6, #8]
   22dd4:	4310      	orrs	r0, r2
   22dd6:	6048      	str	r0, [r1, #4]
   22dd8:	60ce      	str	r6, [r1, #12]
   22dda:	608e      	str	r6, [r1, #8]
   22ddc:	0038      	movs	r0, r7
   22dde:	50e2      	str	r2, [r4, r3]
   22de0:	f000 fa78 	bl	232d4 <__malloc_unlock>
   22de4:	0020      	movs	r0, r4
   22de6:	3008      	adds	r0, #8
   22de8:	e021      	b.n	22e2e <_malloc_r+0x19e>
   22dea:	2910      	cmp	r1, #16
   22dec:	d826      	bhi.n	22e3c <_malloc_r+0x1ac>
   22dee:	0038      	movs	r0, r7
   22df0:	f000 fa68 	bl	232c4 <__malloc_lock>
   22df4:	2510      	movs	r5, #16
   22df6:	2318      	movs	r3, #24
   22df8:	2002      	movs	r0, #2
   22dfa:	4e8b      	ldr	r6, [pc, #556]	; (23028 <_malloc_r+0x398>)
   22dfc:	18f3      	adds	r3, r6, r3
   22dfe:	001a      	movs	r2, r3
   22e00:	685c      	ldr	r4, [r3, #4]
   22e02:	3a08      	subs	r2, #8
   22e04:	4294      	cmp	r4, r2
   22e06:	d100      	bne.n	22e0a <_malloc_r+0x17a>
   22e08:	e12e      	b.n	23068 <_malloc_r+0x3d8>
   22e0a:	2303      	movs	r3, #3
   22e0c:	6862      	ldr	r2, [r4, #4]
   22e0e:	439a      	bics	r2, r3
   22e10:	0013      	movs	r3, r2
   22e12:	68e2      	ldr	r2, [r4, #12]
   22e14:	68a1      	ldr	r1, [r4, #8]
   22e16:	60ca      	str	r2, [r1, #12]
   22e18:	6091      	str	r1, [r2, #8]
   22e1a:	2201      	movs	r2, #1
   22e1c:	18e3      	adds	r3, r4, r3
   22e1e:	6859      	ldr	r1, [r3, #4]
   22e20:	0038      	movs	r0, r7
   22e22:	430a      	orrs	r2, r1
   22e24:	605a      	str	r2, [r3, #4]
   22e26:	f000 fa55 	bl	232d4 <__malloc_unlock>
   22e2a:	0020      	movs	r0, r4
   22e2c:	3008      	adds	r0, #8
   22e2e:	b003      	add	sp, #12
   22e30:	bc3c      	pop	{r2, r3, r4, r5}
   22e32:	4690      	mov	r8, r2
   22e34:	4699      	mov	r9, r3
   22e36:	46a2      	mov	sl, r4
   22e38:	46ab      	mov	fp, r5
   22e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22e3c:	230c      	movs	r3, #12
   22e3e:	2000      	movs	r0, #0
   22e40:	603b      	str	r3, [r7, #0]
   22e42:	e7f4      	b.n	22e2e <_malloc_r+0x19e>
   22e44:	2180      	movs	r1, #128	; 0x80
   22e46:	233f      	movs	r3, #63	; 0x3f
   22e48:	2040      	movs	r0, #64	; 0x40
   22e4a:	0089      	lsls	r1, r1, #2
   22e4c:	4698      	mov	r8, r3
   22e4e:	e746      	b.n	22cde <_malloc_r+0x4e>
   22e50:	4640      	mov	r0, r8
   22e52:	e764      	b.n	22d1e <_malloc_r+0x8e>
   22e54:	464b      	mov	r3, r9
   22e56:	e7e0      	b.n	22e1a <_malloc_r+0x18a>
   22e58:	2303      	movs	r3, #3
   22e5a:	68b4      	ldr	r4, [r6, #8]
   22e5c:	6862      	ldr	r2, [r4, #4]
   22e5e:	439a      	bics	r2, r3
   22e60:	4690      	mov	r8, r2
   22e62:	42aa      	cmp	r2, r5
   22e64:	d303      	bcc.n	22e6e <_malloc_r+0x1de>
   22e66:	1b53      	subs	r3, r2, r5
   22e68:	2b0f      	cmp	r3, #15
   22e6a:	dd00      	ble.n	22e6e <_malloc_r+0x1de>
   22e6c:	e086      	b.n	22f7c <_malloc_r+0x2ec>
   22e6e:	0023      	movs	r3, r4
   22e70:	4443      	add	r3, r8
   22e72:	4a6f      	ldr	r2, [pc, #444]	; (23030 <_malloc_r+0x3a0>)
   22e74:	9301      	str	r3, [sp, #4]
   22e76:	4b6f      	ldr	r3, [pc, #444]	; (23034 <_malloc_r+0x3a4>)
   22e78:	4693      	mov	fp, r2
   22e7a:	681b      	ldr	r3, [r3, #0]
   22e7c:	6812      	ldr	r2, [r2, #0]
   22e7e:	18eb      	adds	r3, r5, r3
   22e80:	3201      	adds	r2, #1
   22e82:	d100      	bne.n	22e86 <_malloc_r+0x1f6>
   22e84:	e168      	b.n	23158 <_malloc_r+0x4c8>
   22e86:	4a6c      	ldr	r2, [pc, #432]	; (23038 <_malloc_r+0x3a8>)
   22e88:	4694      	mov	ip, r2
   22e8a:	4463      	add	r3, ip
   22e8c:	0b1b      	lsrs	r3, r3, #12
   22e8e:	031b      	lsls	r3, r3, #12
   22e90:	9300      	str	r3, [sp, #0]
   22e92:	9900      	ldr	r1, [sp, #0]
   22e94:	0038      	movs	r0, r7
   22e96:	f000 fd6d 	bl	23974 <_sbrk_r>
   22e9a:	0003      	movs	r3, r0
   22e9c:	4681      	mov	r9, r0
   22e9e:	3301      	adds	r3, #1
   22ea0:	d061      	beq.n	22f66 <_malloc_r+0x2d6>
   22ea2:	9b01      	ldr	r3, [sp, #4]
   22ea4:	4283      	cmp	r3, r0
   22ea6:	d900      	bls.n	22eaa <_malloc_r+0x21a>
   22ea8:	e0ff      	b.n	230aa <_malloc_r+0x41a>
   22eaa:	4b64      	ldr	r3, [pc, #400]	; (2303c <_malloc_r+0x3ac>)
   22eac:	9a00      	ldr	r2, [sp, #0]
   22eae:	469a      	mov	sl, r3
   22eb0:	681b      	ldr	r3, [r3, #0]
   22eb2:	469c      	mov	ip, r3
   22eb4:	4653      	mov	r3, sl
   22eb6:	4462      	add	r2, ip
   22eb8:	601a      	str	r2, [r3, #0]
   22eba:	9b01      	ldr	r3, [sp, #4]
   22ebc:	0011      	movs	r1, r2
   22ebe:	4283      	cmp	r3, r0
   22ec0:	d100      	bne.n	22ec4 <_malloc_r+0x234>
   22ec2:	e155      	b.n	23170 <_malloc_r+0x4e0>
   22ec4:	465b      	mov	r3, fp
   22ec6:	681b      	ldr	r3, [r3, #0]
   22ec8:	3301      	adds	r3, #1
   22eca:	d100      	bne.n	22ece <_malloc_r+0x23e>
   22ecc:	e16c      	b.n	231a8 <_malloc_r+0x518>
   22ece:	464b      	mov	r3, r9
   22ed0:	9a01      	ldr	r2, [sp, #4]
   22ed2:	1a9b      	subs	r3, r3, r2
   22ed4:	1859      	adds	r1, r3, r1
   22ed6:	4653      	mov	r3, sl
   22ed8:	6019      	str	r1, [r3, #0]
   22eda:	2307      	movs	r3, #7
   22edc:	464a      	mov	r2, r9
   22ede:	4013      	ands	r3, r2
   22ee0:	d100      	bne.n	22ee4 <_malloc_r+0x254>
   22ee2:	e124      	b.n	2312e <_malloc_r+0x49e>
   22ee4:	2108      	movs	r1, #8
   22ee6:	4689      	mov	r9, r1
   22ee8:	4955      	ldr	r1, [pc, #340]	; (23040 <_malloc_r+0x3b0>)
   22eea:	1ad2      	subs	r2, r2, r3
   22eec:	4491      	add	r9, r2
   22eee:	1acb      	subs	r3, r1, r3
   22ef0:	9a00      	ldr	r2, [sp, #0]
   22ef2:	0038      	movs	r0, r7
   22ef4:	444a      	add	r2, r9
   22ef6:	0511      	lsls	r1, r2, #20
   22ef8:	0d09      	lsrs	r1, r1, #20
   22efa:	1a5b      	subs	r3, r3, r1
   22efc:	0019      	movs	r1, r3
   22efe:	469b      	mov	fp, r3
   22f00:	f000 fd38 	bl	23974 <_sbrk_r>
   22f04:	1c43      	adds	r3, r0, #1
   22f06:	d100      	bne.n	22f0a <_malloc_r+0x27a>
   22f08:	e142      	b.n	23190 <_malloc_r+0x500>
   22f0a:	464b      	mov	r3, r9
   22f0c:	1ac0      	subs	r0, r0, r3
   22f0e:	2301      	movs	r3, #1
   22f10:	4458      	add	r0, fp
   22f12:	4318      	orrs	r0, r3
   22f14:	4653      	mov	r3, sl
   22f16:	681b      	ldr	r3, [r3, #0]
   22f18:	445b      	add	r3, fp
   22f1a:	0019      	movs	r1, r3
   22f1c:	4653      	mov	r3, sl
   22f1e:	6019      	str	r1, [r3, #0]
   22f20:	464b      	mov	r3, r9
   22f22:	60b3      	str	r3, [r6, #8]
   22f24:	6058      	str	r0, [r3, #4]
   22f26:	42b4      	cmp	r4, r6
   22f28:	d013      	beq.n	22f52 <_malloc_r+0x2c2>
   22f2a:	4643      	mov	r3, r8
   22f2c:	2b0f      	cmp	r3, #15
   22f2e:	d800      	bhi.n	22f32 <_malloc_r+0x2a2>
   22f30:	e0e8      	b.n	23104 <_malloc_r+0x474>
   22f32:	4643      	mov	r3, r8
   22f34:	2207      	movs	r2, #7
   22f36:	6860      	ldr	r0, [r4, #4]
   22f38:	3b0c      	subs	r3, #12
   22f3a:	4393      	bics	r3, r2
   22f3c:	3a06      	subs	r2, #6
   22f3e:	4002      	ands	r2, r0
   22f40:	2005      	movs	r0, #5
   22f42:	431a      	orrs	r2, r3
   22f44:	6062      	str	r2, [r4, #4]
   22f46:	18e2      	adds	r2, r4, r3
   22f48:	6050      	str	r0, [r2, #4]
   22f4a:	6090      	str	r0, [r2, #8]
   22f4c:	2b0f      	cmp	r3, #15
   22f4e:	d900      	bls.n	22f52 <_malloc_r+0x2c2>
   22f50:	e122      	b.n	23198 <_malloc_r+0x508>
   22f52:	4b3c      	ldr	r3, [pc, #240]	; (23044 <_malloc_r+0x3b4>)
   22f54:	681a      	ldr	r2, [r3, #0]
   22f56:	4291      	cmp	r1, r2
   22f58:	d900      	bls.n	22f5c <_malloc_r+0x2cc>
   22f5a:	6019      	str	r1, [r3, #0]
   22f5c:	4b3a      	ldr	r3, [pc, #232]	; (23048 <_malloc_r+0x3b8>)
   22f5e:	681a      	ldr	r2, [r3, #0]
   22f60:	4291      	cmp	r1, r2
   22f62:	d900      	bls.n	22f66 <_malloc_r+0x2d6>
   22f64:	6019      	str	r1, [r3, #0]
   22f66:	2303      	movs	r3, #3
   22f68:	68b4      	ldr	r4, [r6, #8]
   22f6a:	6862      	ldr	r2, [r4, #4]
   22f6c:	439a      	bics	r2, r3
   22f6e:	1b53      	subs	r3, r2, r5
   22f70:	4295      	cmp	r5, r2
   22f72:	d900      	bls.n	22f76 <_malloc_r+0x2e6>
   22f74:	e0c9      	b.n	2310a <_malloc_r+0x47a>
   22f76:	2b0f      	cmp	r3, #15
   22f78:	dc00      	bgt.n	22f7c <_malloc_r+0x2ec>
   22f7a:	e0c6      	b.n	2310a <_malloc_r+0x47a>
   22f7c:	2201      	movs	r2, #1
   22f7e:	0029      	movs	r1, r5
   22f80:	4313      	orrs	r3, r2
   22f82:	4311      	orrs	r1, r2
   22f84:	1965      	adds	r5, r4, r5
   22f86:	6061      	str	r1, [r4, #4]
   22f88:	0038      	movs	r0, r7
   22f8a:	60b5      	str	r5, [r6, #8]
   22f8c:	606b      	str	r3, [r5, #4]
   22f8e:	f000 f9a1 	bl	232d4 <__malloc_unlock>
   22f92:	0020      	movs	r0, r4
   22f94:	3008      	adds	r0, #8
   22f96:	e74a      	b.n	22e2e <_malloc_r+0x19e>
   22f98:	2814      	cmp	r0, #20
   22f9a:	d97a      	bls.n	23092 <_malloc_r+0x402>
   22f9c:	2854      	cmp	r0, #84	; 0x54
   22f9e:	d900      	bls.n	22fa2 <_malloc_r+0x312>
   22fa0:	e0ba      	b.n	23118 <_malloc_r+0x488>
   22fa2:	236e      	movs	r3, #110	; 0x6e
   22fa4:	4698      	mov	r8, r3
   22fa6:	0b28      	lsrs	r0, r5, #12
   22fa8:	4480      	add	r8, r0
   22faa:	306f      	adds	r0, #111	; 0x6f
   22fac:	00c1      	lsls	r1, r0, #3
   22fae:	e696      	b.n	22cde <_malloc_r+0x4e>
   22fb0:	0a5a      	lsrs	r2, r3, #9
   22fb2:	2a04      	cmp	r2, #4
   22fb4:	d973      	bls.n	2309e <_malloc_r+0x40e>
   22fb6:	2a14      	cmp	r2, #20
   22fb8:	d900      	bls.n	22fbc <_malloc_r+0x32c>
   22fba:	e0d0      	b.n	2315e <_malloc_r+0x4ce>
   22fbc:	0011      	movs	r1, r2
   22fbe:	325c      	adds	r2, #92	; 0x5c
   22fc0:	315b      	adds	r1, #91	; 0x5b
   22fc2:	00d2      	lsls	r2, r2, #3
   22fc4:	2308      	movs	r3, #8
   22fc6:	425b      	negs	r3, r3
   22fc8:	469c      	mov	ip, r3
   22fca:	18b2      	adds	r2, r6, r2
   22fcc:	4494      	add	ip, r2
   22fce:	4663      	mov	r3, ip
   22fd0:	689a      	ldr	r2, [r3, #8]
   22fd2:	2303      	movs	r3, #3
   22fd4:	4698      	mov	r8, r3
   22fd6:	4594      	cmp	ip, r2
   22fd8:	d100      	bne.n	22fdc <_malloc_r+0x34c>
   22fda:	e0ab      	b.n	23134 <_malloc_r+0x4a4>
   22fdc:	4643      	mov	r3, r8
   22fde:	6851      	ldr	r1, [r2, #4]
   22fe0:	4399      	bics	r1, r3
   22fe2:	4589      	cmp	r9, r1
   22fe4:	d300      	bcc.n	22fe8 <_malloc_r+0x358>
   22fe6:	e095      	b.n	23114 <_malloc_r+0x484>
   22fe8:	6892      	ldr	r2, [r2, #8]
   22fea:	4594      	cmp	ip, r2
   22fec:	d1f6      	bne.n	22fdc <_malloc_r+0x34c>
   22fee:	4663      	mov	r3, ip
   22ff0:	68da      	ldr	r2, [r3, #12]
   22ff2:	6873      	ldr	r3, [r6, #4]
   22ff4:	4661      	mov	r1, ip
   22ff6:	60e2      	str	r2, [r4, #12]
   22ff8:	60a1      	str	r1, [r4, #8]
   22ffa:	6094      	str	r4, [r2, #8]
   22ffc:	60cc      	str	r4, [r1, #12]
   22ffe:	e6b6      	b.n	22d6e <_malloc_r+0xde>
   23000:	2301      	movs	r3, #1
   23002:	1960      	adds	r0, r4, r5
   23004:	431d      	orrs	r5, r3
   23006:	6065      	str	r5, [r4, #4]
   23008:	6170      	str	r0, [r6, #20]
   2300a:	6130      	str	r0, [r6, #16]
   2300c:	60c2      	str	r2, [r0, #12]
   2300e:	6082      	str	r2, [r0, #8]
   23010:	001a      	movs	r2, r3
   23012:	464b      	mov	r3, r9
   23014:	430a      	orrs	r2, r1
   23016:	6042      	str	r2, [r0, #4]
   23018:	0038      	movs	r0, r7
   2301a:	50e1      	str	r1, [r4, r3]
   2301c:	f000 f95a 	bl	232d4 <__malloc_unlock>
   23020:	0020      	movs	r0, r4
   23022:	3008      	adds	r0, #8
   23024:	e703      	b.n	22e2e <_malloc_r+0x19e>
   23026:	46c0      	nop			; (mov r8, r8)
   23028:	200007dc 	.word	0x200007dc
   2302c:	000001ff 	.word	0x000001ff
   23030:	20000be4 	.word	0x20000be4
   23034:	20000f64 	.word	0x20000f64
   23038:	0000100f 	.word	0x0000100f
   2303c:	20000f34 	.word	0x20000f34
   23040:	00001008 	.word	0x00001008
   23044:	20000f5c 	.word	0x20000f5c
   23048:	20000f60 	.word	0x20000f60
   2304c:	6873      	ldr	r3, [r6, #4]
   2304e:	e68e      	b.n	22d6e <_malloc_r+0xde>
   23050:	2308      	movs	r3, #8
   23052:	469b      	mov	fp, r3
   23054:	3b07      	subs	r3, #7
   23056:	44dc      	add	ip, fp
   23058:	469b      	mov	fp, r3
   2305a:	44da      	add	sl, fp
   2305c:	4643      	mov	r3, r8
   2305e:	4652      	mov	r2, sl
   23060:	4213      	tst	r3, r2
   23062:	d000      	beq.n	23066 <_malloc_r+0x3d6>
   23064:	e697      	b.n	22d96 <_malloc_r+0x106>
   23066:	e037      	b.n	230d8 <_malloc_r+0x448>
   23068:	68dc      	ldr	r4, [r3, #12]
   2306a:	3002      	adds	r0, #2
   2306c:	42a3      	cmp	r3, r4
   2306e:	d100      	bne.n	23072 <_malloc_r+0x3e2>
   23070:	e655      	b.n	22d1e <_malloc_r+0x8e>
   23072:	e6ca      	b.n	22e0a <_malloc_r+0x17a>
   23074:	2201      	movs	r2, #1
   23076:	18e3      	adds	r3, r4, r3
   23078:	6859      	ldr	r1, [r3, #4]
   2307a:	0038      	movs	r0, r7
   2307c:	430a      	orrs	r2, r1
   2307e:	605a      	str	r2, [r3, #4]
   23080:	68e3      	ldr	r3, [r4, #12]
   23082:	68a2      	ldr	r2, [r4, #8]
   23084:	60d3      	str	r3, [r2, #12]
   23086:	609a      	str	r2, [r3, #8]
   23088:	f000 f924 	bl	232d4 <__malloc_unlock>
   2308c:	0020      	movs	r0, r4
   2308e:	3008      	adds	r0, #8
   23090:	e6cd      	b.n	22e2e <_malloc_r+0x19e>
   23092:	235b      	movs	r3, #91	; 0x5b
   23094:	4698      	mov	r8, r3
   23096:	4480      	add	r8, r0
   23098:	305c      	adds	r0, #92	; 0x5c
   2309a:	00c1      	lsls	r1, r0, #3
   2309c:	e61f      	b.n	22cde <_malloc_r+0x4e>
   2309e:	099a      	lsrs	r2, r3, #6
   230a0:	0011      	movs	r1, r2
   230a2:	3239      	adds	r2, #57	; 0x39
   230a4:	3138      	adds	r1, #56	; 0x38
   230a6:	00d2      	lsls	r2, r2, #3
   230a8:	e78c      	b.n	22fc4 <_malloc_r+0x334>
   230aa:	42b4      	cmp	r4, r6
   230ac:	d000      	beq.n	230b0 <_malloc_r+0x420>
   230ae:	e75a      	b.n	22f66 <_malloc_r+0x2d6>
   230b0:	4b4f      	ldr	r3, [pc, #316]	; (231f0 <_malloc_r+0x560>)
   230b2:	9a00      	ldr	r2, [sp, #0]
   230b4:	469a      	mov	sl, r3
   230b6:	681b      	ldr	r3, [r3, #0]
   230b8:	469c      	mov	ip, r3
   230ba:	4653      	mov	r3, sl
   230bc:	4462      	add	r2, ip
   230be:	0011      	movs	r1, r2
   230c0:	601a      	str	r2, [r3, #0]
   230c2:	e6ff      	b.n	22ec4 <_malloc_r+0x234>
   230c4:	2308      	movs	r3, #8
   230c6:	425b      	negs	r3, r3
   230c8:	469c      	mov	ip, r3
   230ca:	44e1      	add	r9, ip
   230cc:	464b      	mov	r3, r9
   230ce:	689b      	ldr	r3, [r3, #8]
   230d0:	3801      	subs	r0, #1
   230d2:	4599      	cmp	r9, r3
   230d4:	d000      	beq.n	230d8 <_malloc_r+0x448>
   230d6:	e084      	b.n	231e2 <_malloc_r+0x552>
   230d8:	4643      	mov	r3, r8
   230da:	4203      	tst	r3, r0
   230dc:	d1f2      	bne.n	230c4 <_malloc_r+0x434>
   230de:	6873      	ldr	r3, [r6, #4]
   230e0:	438b      	bics	r3, r1
   230e2:	6073      	str	r3, [r6, #4]
   230e4:	0049      	lsls	r1, r1, #1
   230e6:	4299      	cmp	r1, r3
   230e8:	d900      	bls.n	230ec <_malloc_r+0x45c>
   230ea:	e6b5      	b.n	22e58 <_malloc_r+0x1c8>
   230ec:	2900      	cmp	r1, #0
   230ee:	d100      	bne.n	230f2 <_malloc_r+0x462>
   230f0:	e6b2      	b.n	22e58 <_malloc_r+0x1c8>
   230f2:	4650      	mov	r0, sl
   230f4:	420b      	tst	r3, r1
   230f6:	d000      	beq.n	230fa <_malloc_r+0x46a>
   230f8:	e648      	b.n	22d8c <_malloc_r+0xfc>
   230fa:	0049      	lsls	r1, r1, #1
   230fc:	3004      	adds	r0, #4
   230fe:	420b      	tst	r3, r1
   23100:	d0fb      	beq.n	230fa <_malloc_r+0x46a>
   23102:	e643      	b.n	22d8c <_malloc_r+0xfc>
   23104:	2301      	movs	r3, #1
   23106:	464a      	mov	r2, r9
   23108:	6053      	str	r3, [r2, #4]
   2310a:	0038      	movs	r0, r7
   2310c:	f000 f8e2 	bl	232d4 <__malloc_unlock>
   23110:	2000      	movs	r0, #0
   23112:	e68c      	b.n	22e2e <_malloc_r+0x19e>
   23114:	4694      	mov	ip, r2
   23116:	e76a      	b.n	22fee <_malloc_r+0x35e>
   23118:	23aa      	movs	r3, #170	; 0xaa
   2311a:	005b      	lsls	r3, r3, #1
   2311c:	4298      	cmp	r0, r3
   2311e:	d811      	bhi.n	23144 <_malloc_r+0x4b4>
   23120:	3bdd      	subs	r3, #221	; 0xdd
   23122:	4698      	mov	r8, r3
   23124:	0be8      	lsrs	r0, r5, #15
   23126:	4480      	add	r8, r0
   23128:	3078      	adds	r0, #120	; 0x78
   2312a:	00c1      	lsls	r1, r0, #3
   2312c:	e5d7      	b.n	22cde <_malloc_r+0x4e>
   2312e:	2380      	movs	r3, #128	; 0x80
   23130:	015b      	lsls	r3, r3, #5
   23132:	e6dd      	b.n	22ef0 <_malloc_r+0x260>
   23134:	1089      	asrs	r1, r1, #2
   23136:	3b02      	subs	r3, #2
   23138:	408b      	lsls	r3, r1
   2313a:	6872      	ldr	r2, [r6, #4]
   2313c:	4313      	orrs	r3, r2
   2313e:	6073      	str	r3, [r6, #4]
   23140:	4662      	mov	r2, ip
   23142:	e757      	b.n	22ff4 <_malloc_r+0x364>
   23144:	4b2b      	ldr	r3, [pc, #172]	; (231f4 <_malloc_r+0x564>)
   23146:	4298      	cmp	r0, r3
   23148:	d81c      	bhi.n	23184 <_malloc_r+0x4f4>
   2314a:	237c      	movs	r3, #124	; 0x7c
   2314c:	4698      	mov	r8, r3
   2314e:	0ca8      	lsrs	r0, r5, #18
   23150:	4480      	add	r8, r0
   23152:	307d      	adds	r0, #125	; 0x7d
   23154:	00c1      	lsls	r1, r0, #3
   23156:	e5c2      	b.n	22cde <_malloc_r+0x4e>
   23158:	3310      	adds	r3, #16
   2315a:	9300      	str	r3, [sp, #0]
   2315c:	e699      	b.n	22e92 <_malloc_r+0x202>
   2315e:	2a54      	cmp	r2, #84	; 0x54
   23160:	d826      	bhi.n	231b0 <_malloc_r+0x520>
   23162:	464b      	mov	r3, r9
   23164:	0b1a      	lsrs	r2, r3, #12
   23166:	0011      	movs	r1, r2
   23168:	326f      	adds	r2, #111	; 0x6f
   2316a:	316e      	adds	r1, #110	; 0x6e
   2316c:	00d2      	lsls	r2, r2, #3
   2316e:	e729      	b.n	22fc4 <_malloc_r+0x334>
   23170:	051b      	lsls	r3, r3, #20
   23172:	d000      	beq.n	23176 <_malloc_r+0x4e6>
   23174:	e6a6      	b.n	22ec4 <_malloc_r+0x234>
   23176:	2001      	movs	r0, #1
   23178:	9b00      	ldr	r3, [sp, #0]
   2317a:	68b2      	ldr	r2, [r6, #8]
   2317c:	4443      	add	r3, r8
   2317e:	4303      	orrs	r3, r0
   23180:	6053      	str	r3, [r2, #4]
   23182:	e6e6      	b.n	22f52 <_malloc_r+0x2c2>
   23184:	21fe      	movs	r1, #254	; 0xfe
   23186:	237e      	movs	r3, #126	; 0x7e
   23188:	207f      	movs	r0, #127	; 0x7f
   2318a:	0089      	lsls	r1, r1, #2
   2318c:	4698      	mov	r8, r3
   2318e:	e5a6      	b.n	22cde <_malloc_r+0x4e>
   23190:	2300      	movs	r3, #0
   23192:	2001      	movs	r0, #1
   23194:	469b      	mov	fp, r3
   23196:	e6bd      	b.n	22f14 <_malloc_r+0x284>
   23198:	0021      	movs	r1, r4
   2319a:	0038      	movs	r0, r7
   2319c:	3108      	adds	r1, #8
   2319e:	f000 fdef 	bl	23d80 <_free_r>
   231a2:	4653      	mov	r3, sl
   231a4:	6819      	ldr	r1, [r3, #0]
   231a6:	e6d4      	b.n	22f52 <_malloc_r+0x2c2>
   231a8:	465b      	mov	r3, fp
   231aa:	464a      	mov	r2, r9
   231ac:	601a      	str	r2, [r3, #0]
   231ae:	e694      	b.n	22eda <_malloc_r+0x24a>
   231b0:	21aa      	movs	r1, #170	; 0xaa
   231b2:	0049      	lsls	r1, r1, #1
   231b4:	428a      	cmp	r2, r1
   231b6:	d806      	bhi.n	231c6 <_malloc_r+0x536>
   231b8:	464b      	mov	r3, r9
   231ba:	0bda      	lsrs	r2, r3, #15
   231bc:	0011      	movs	r1, r2
   231be:	3278      	adds	r2, #120	; 0x78
   231c0:	3177      	adds	r1, #119	; 0x77
   231c2:	00d2      	lsls	r2, r2, #3
   231c4:	e6fe      	b.n	22fc4 <_malloc_r+0x334>
   231c6:	490b      	ldr	r1, [pc, #44]	; (231f4 <_malloc_r+0x564>)
   231c8:	428a      	cmp	r2, r1
   231ca:	d806      	bhi.n	231da <_malloc_r+0x54a>
   231cc:	464b      	mov	r3, r9
   231ce:	0c9a      	lsrs	r2, r3, #18
   231d0:	0011      	movs	r1, r2
   231d2:	327d      	adds	r2, #125	; 0x7d
   231d4:	317c      	adds	r1, #124	; 0x7c
   231d6:	00d2      	lsls	r2, r2, #3
   231d8:	e6f4      	b.n	22fc4 <_malloc_r+0x334>
   231da:	22fe      	movs	r2, #254	; 0xfe
   231dc:	217e      	movs	r1, #126	; 0x7e
   231de:	0092      	lsls	r2, r2, #2
   231e0:	e6f0      	b.n	22fc4 <_malloc_r+0x334>
   231e2:	6873      	ldr	r3, [r6, #4]
   231e4:	e77e      	b.n	230e4 <_malloc_r+0x454>
   231e6:	002b      	movs	r3, r5
   231e8:	08e8      	lsrs	r0, r5, #3
   231ea:	3308      	adds	r3, #8
   231ec:	e605      	b.n	22dfa <_malloc_r+0x16a>
   231ee:	46c0      	nop			; (mov r8, r8)
   231f0:	20000f34 	.word	0x20000f34
   231f4:	00000554 	.word	0x00000554

000231f8 <memchr>:
   231f8:	b570      	push	{r4, r5, r6, lr}
   231fa:	b2cd      	uxtb	r5, r1
   231fc:	0783      	lsls	r3, r0, #30
   231fe:	d034      	beq.n	2326a <memchr+0x72>
   23200:	1e54      	subs	r4, r2, #1
   23202:	2a00      	cmp	r2, #0
   23204:	d01b      	beq.n	2323e <memchr+0x46>
   23206:	7803      	ldrb	r3, [r0, #0]
   23208:	42ab      	cmp	r3, r5
   2320a:	d019      	beq.n	23240 <memchr+0x48>
   2320c:	2203      	movs	r2, #3
   2320e:	e004      	b.n	2321a <memchr+0x22>
   23210:	3c01      	subs	r4, #1
   23212:	d314      	bcc.n	2323e <memchr+0x46>
   23214:	7803      	ldrb	r3, [r0, #0]
   23216:	42ab      	cmp	r3, r5
   23218:	d012      	beq.n	23240 <memchr+0x48>
   2321a:	3001      	adds	r0, #1
   2321c:	4210      	tst	r0, r2
   2321e:	d1f7      	bne.n	23210 <memchr+0x18>
   23220:	2c03      	cmp	r4, #3
   23222:	d80e      	bhi.n	23242 <memchr+0x4a>
   23224:	2c00      	cmp	r4, #0
   23226:	d00a      	beq.n	2323e <memchr+0x46>
   23228:	7803      	ldrb	r3, [r0, #0]
   2322a:	42ab      	cmp	r3, r5
   2322c:	d008      	beq.n	23240 <memchr+0x48>
   2322e:	1904      	adds	r4, r0, r4
   23230:	e002      	b.n	23238 <memchr+0x40>
   23232:	7803      	ldrb	r3, [r0, #0]
   23234:	42ab      	cmp	r3, r5
   23236:	d003      	beq.n	23240 <memchr+0x48>
   23238:	3001      	adds	r0, #1
   2323a:	4284      	cmp	r4, r0
   2323c:	d1f9      	bne.n	23232 <memchr+0x3a>
   2323e:	2000      	movs	r0, #0
   23240:	bd70      	pop	{r4, r5, r6, pc}
   23242:	22ff      	movs	r2, #255	; 0xff
   23244:	060b      	lsls	r3, r1, #24
   23246:	0c1b      	lsrs	r3, r3, #16
   23248:	4011      	ands	r1, r2
   2324a:	4319      	orrs	r1, r3
   2324c:	040b      	lsls	r3, r1, #16
   2324e:	4e08      	ldr	r6, [pc, #32]	; (23270 <memchr+0x78>)
   23250:	4319      	orrs	r1, r3
   23252:	6803      	ldr	r3, [r0, #0]
   23254:	4a07      	ldr	r2, [pc, #28]	; (23274 <memchr+0x7c>)
   23256:	404b      	eors	r3, r1
   23258:	189a      	adds	r2, r3, r2
   2325a:	439a      	bics	r2, r3
   2325c:	4232      	tst	r2, r6
   2325e:	d1e3      	bne.n	23228 <memchr+0x30>
   23260:	3c04      	subs	r4, #4
   23262:	3004      	adds	r0, #4
   23264:	2c03      	cmp	r4, #3
   23266:	d8f4      	bhi.n	23252 <memchr+0x5a>
   23268:	e7dc      	b.n	23224 <memchr+0x2c>
   2326a:	0014      	movs	r4, r2
   2326c:	e7d8      	b.n	23220 <memchr+0x28>
   2326e:	46c0      	nop			; (mov r8, r8)
   23270:	80808080 	.word	0x80808080
   23274:	fefefeff 	.word	0xfefefeff

00023278 <memcmp>:
   23278:	b510      	push	{r4, lr}
   2327a:	2a03      	cmp	r2, #3
   2327c:	d91c      	bls.n	232b8 <memcmp+0x40>
   2327e:	0003      	movs	r3, r0
   23280:	430b      	orrs	r3, r1
   23282:	079b      	lsls	r3, r3, #30
   23284:	d00f      	beq.n	232a6 <memcmp+0x2e>
   23286:	7803      	ldrb	r3, [r0, #0]
   23288:	780c      	ldrb	r4, [r1, #0]
   2328a:	1882      	adds	r2, r0, r2
   2328c:	42a3      	cmp	r3, r4
   2328e:	d004      	beq.n	2329a <memcmp+0x22>
   23290:	e015      	b.n	232be <memcmp+0x46>
   23292:	7803      	ldrb	r3, [r0, #0]
   23294:	780c      	ldrb	r4, [r1, #0]
   23296:	42a3      	cmp	r3, r4
   23298:	d111      	bne.n	232be <memcmp+0x46>
   2329a:	3001      	adds	r0, #1
   2329c:	3101      	adds	r1, #1
   2329e:	4282      	cmp	r2, r0
   232a0:	d1f7      	bne.n	23292 <memcmp+0x1a>
   232a2:	2000      	movs	r0, #0
   232a4:	bd10      	pop	{r4, pc}
   232a6:	6803      	ldr	r3, [r0, #0]
   232a8:	680c      	ldr	r4, [r1, #0]
   232aa:	42a3      	cmp	r3, r4
   232ac:	d1eb      	bne.n	23286 <memcmp+0xe>
   232ae:	3a04      	subs	r2, #4
   232b0:	3004      	adds	r0, #4
   232b2:	3104      	adds	r1, #4
   232b4:	2a03      	cmp	r2, #3
   232b6:	d8f6      	bhi.n	232a6 <memcmp+0x2e>
   232b8:	2a00      	cmp	r2, #0
   232ba:	d1e4      	bne.n	23286 <memcmp+0xe>
   232bc:	e7f1      	b.n	232a2 <memcmp+0x2a>
   232be:	1b18      	subs	r0, r3, r4
   232c0:	e7f0      	b.n	232a4 <memcmp+0x2c>
   232c2:	46c0      	nop			; (mov r8, r8)

000232c4 <__malloc_lock>:
   232c4:	b510      	push	{r4, lr}
   232c6:	4802      	ldr	r0, [pc, #8]	; (232d0 <__malloc_lock+0xc>)
   232c8:	f7ff fcde 	bl	22c88 <__retarget_lock_acquire_recursive>
   232cc:	bd10      	pop	{r4, pc}
   232ce:	46c0      	nop			; (mov r8, r8)
   232d0:	20005640 	.word	0x20005640

000232d4 <__malloc_unlock>:
   232d4:	b510      	push	{r4, lr}
   232d6:	4802      	ldr	r0, [pc, #8]	; (232e0 <__malloc_unlock+0xc>)
   232d8:	f7ff fcd8 	bl	22c8c <__retarget_lock_release_recursive>
   232dc:	bd10      	pop	{r4, pc}
   232de:	46c0      	nop			; (mov r8, r8)
   232e0:	20005640 	.word	0x20005640

000232e4 <_Balloc>:
   232e4:	b570      	push	{r4, r5, r6, lr}
   232e6:	0004      	movs	r4, r0
   232e8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   232ea:	000d      	movs	r5, r1
   232ec:	2800      	cmp	r0, #0
   232ee:	d00a      	beq.n	23306 <_Balloc+0x22>
   232f0:	00ab      	lsls	r3, r5, #2
   232f2:	18c3      	adds	r3, r0, r3
   232f4:	6818      	ldr	r0, [r3, #0]
   232f6:	2800      	cmp	r0, #0
   232f8:	d00f      	beq.n	2331a <_Balloc+0x36>
   232fa:	6802      	ldr	r2, [r0, #0]
   232fc:	601a      	str	r2, [r3, #0]
   232fe:	2300      	movs	r3, #0
   23300:	6103      	str	r3, [r0, #16]
   23302:	60c3      	str	r3, [r0, #12]
   23304:	bd70      	pop	{r4, r5, r6, pc}
   23306:	2221      	movs	r2, #33	; 0x21
   23308:	2104      	movs	r1, #4
   2330a:	0020      	movs	r0, r4
   2330c:	f000 fcbc 	bl	23c88 <_calloc_r>
   23310:	64e0      	str	r0, [r4, #76]	; 0x4c
   23312:	2800      	cmp	r0, #0
   23314:	d1ec      	bne.n	232f0 <_Balloc+0xc>
   23316:	2000      	movs	r0, #0
   23318:	e7f4      	b.n	23304 <_Balloc+0x20>
   2331a:	2601      	movs	r6, #1
   2331c:	40ae      	lsls	r6, r5
   2331e:	1d72      	adds	r2, r6, #5
   23320:	0092      	lsls	r2, r2, #2
   23322:	2101      	movs	r1, #1
   23324:	0020      	movs	r0, r4
   23326:	f000 fcaf 	bl	23c88 <_calloc_r>
   2332a:	2800      	cmp	r0, #0
   2332c:	d0f3      	beq.n	23316 <_Balloc+0x32>
   2332e:	6045      	str	r5, [r0, #4]
   23330:	6086      	str	r6, [r0, #8]
   23332:	e7e4      	b.n	232fe <_Balloc+0x1a>

00023334 <_Bfree>:
   23334:	2900      	cmp	r1, #0
   23336:	d006      	beq.n	23346 <_Bfree+0x12>
   23338:	684b      	ldr	r3, [r1, #4]
   2333a:	009a      	lsls	r2, r3, #2
   2333c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2333e:	189b      	adds	r3, r3, r2
   23340:	681a      	ldr	r2, [r3, #0]
   23342:	600a      	str	r2, [r1, #0]
   23344:	6019      	str	r1, [r3, #0]
   23346:	4770      	bx	lr

00023348 <__multadd>:
   23348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2334a:	46ce      	mov	lr, r9
   2334c:	4647      	mov	r7, r8
   2334e:	4681      	mov	r9, r0
   23350:	0008      	movs	r0, r1
   23352:	b580      	push	{r7, lr}
   23354:	000d      	movs	r5, r1
   23356:	690c      	ldr	r4, [r1, #16]
   23358:	001f      	movs	r7, r3
   2335a:	2100      	movs	r1, #0
   2335c:	3014      	adds	r0, #20
   2335e:	6803      	ldr	r3, [r0, #0]
   23360:	3101      	adds	r1, #1
   23362:	041e      	lsls	r6, r3, #16
   23364:	0c36      	lsrs	r6, r6, #16
   23366:	4356      	muls	r6, r2
   23368:	0c1b      	lsrs	r3, r3, #16
   2336a:	4353      	muls	r3, r2
   2336c:	19f6      	adds	r6, r6, r7
   2336e:	0c37      	lsrs	r7, r6, #16
   23370:	19db      	adds	r3, r3, r7
   23372:	0436      	lsls	r6, r6, #16
   23374:	0c1f      	lsrs	r7, r3, #16
   23376:	0c36      	lsrs	r6, r6, #16
   23378:	041b      	lsls	r3, r3, #16
   2337a:	199b      	adds	r3, r3, r6
   2337c:	c008      	stmia	r0!, {r3}
   2337e:	428c      	cmp	r4, r1
   23380:	dced      	bgt.n	2335e <__multadd+0x16>
   23382:	2f00      	cmp	r7, #0
   23384:	d008      	beq.n	23398 <__multadd+0x50>
   23386:	68ab      	ldr	r3, [r5, #8]
   23388:	429c      	cmp	r4, r3
   2338a:	da0a      	bge.n	233a2 <__multadd+0x5a>
   2338c:	1d23      	adds	r3, r4, #4
   2338e:	009b      	lsls	r3, r3, #2
   23390:	18eb      	adds	r3, r5, r3
   23392:	3401      	adds	r4, #1
   23394:	605f      	str	r7, [r3, #4]
   23396:	612c      	str	r4, [r5, #16]
   23398:	0028      	movs	r0, r5
   2339a:	bc0c      	pop	{r2, r3}
   2339c:	4690      	mov	r8, r2
   2339e:	4699      	mov	r9, r3
   233a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   233a2:	686b      	ldr	r3, [r5, #4]
   233a4:	4648      	mov	r0, r9
   233a6:	1c59      	adds	r1, r3, #1
   233a8:	f7ff ff9c 	bl	232e4 <_Balloc>
   233ac:	0029      	movs	r1, r5
   233ae:	692b      	ldr	r3, [r5, #16]
   233b0:	4680      	mov	r8, r0
   233b2:	1c9a      	adds	r2, r3, #2
   233b4:	0092      	lsls	r2, r2, #2
   233b6:	310c      	adds	r1, #12
   233b8:	300c      	adds	r0, #12
   233ba:	f7fc fcdd 	bl	1fd78 <memcpy>
   233be:	686b      	ldr	r3, [r5, #4]
   233c0:	009a      	lsls	r2, r3, #2
   233c2:	464b      	mov	r3, r9
   233c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   233c6:	189b      	adds	r3, r3, r2
   233c8:	681a      	ldr	r2, [r3, #0]
   233ca:	602a      	str	r2, [r5, #0]
   233cc:	601d      	str	r5, [r3, #0]
   233ce:	4645      	mov	r5, r8
   233d0:	e7dc      	b.n	2338c <__multadd+0x44>
   233d2:	46c0      	nop			; (mov r8, r8)

000233d4 <__hi0bits>:
   233d4:	0003      	movs	r3, r0
   233d6:	0c02      	lsrs	r2, r0, #16
   233d8:	2000      	movs	r0, #0
   233da:	2a00      	cmp	r2, #0
   233dc:	d101      	bne.n	233e2 <__hi0bits+0xe>
   233de:	041b      	lsls	r3, r3, #16
   233e0:	3010      	adds	r0, #16
   233e2:	0e1a      	lsrs	r2, r3, #24
   233e4:	d101      	bne.n	233ea <__hi0bits+0x16>
   233e6:	3008      	adds	r0, #8
   233e8:	021b      	lsls	r3, r3, #8
   233ea:	0f1a      	lsrs	r2, r3, #28
   233ec:	d101      	bne.n	233f2 <__hi0bits+0x1e>
   233ee:	3004      	adds	r0, #4
   233f0:	011b      	lsls	r3, r3, #4
   233f2:	0f9a      	lsrs	r2, r3, #30
   233f4:	d101      	bne.n	233fa <__hi0bits+0x26>
   233f6:	3002      	adds	r0, #2
   233f8:	009b      	lsls	r3, r3, #2
   233fa:	2b00      	cmp	r3, #0
   233fc:	db03      	blt.n	23406 <__hi0bits+0x32>
   233fe:	3001      	adds	r0, #1
   23400:	005b      	lsls	r3, r3, #1
   23402:	d400      	bmi.n	23406 <__hi0bits+0x32>
   23404:	2020      	movs	r0, #32
   23406:	4770      	bx	lr

00023408 <__lo0bits>:
   23408:	6803      	ldr	r3, [r0, #0]
   2340a:	075a      	lsls	r2, r3, #29
   2340c:	d009      	beq.n	23422 <__lo0bits+0x1a>
   2340e:	2200      	movs	r2, #0
   23410:	07d9      	lsls	r1, r3, #31
   23412:	d404      	bmi.n	2341e <__lo0bits+0x16>
   23414:	079a      	lsls	r2, r3, #30
   23416:	d420      	bmi.n	2345a <__lo0bits+0x52>
   23418:	2202      	movs	r2, #2
   2341a:	089b      	lsrs	r3, r3, #2
   2341c:	6003      	str	r3, [r0, #0]
   2341e:	0010      	movs	r0, r2
   23420:	4770      	bx	lr
   23422:	0419      	lsls	r1, r3, #16
   23424:	2200      	movs	r2, #0
   23426:	2900      	cmp	r1, #0
   23428:	d101      	bne.n	2342e <__lo0bits+0x26>
   2342a:	0c1b      	lsrs	r3, r3, #16
   2342c:	3210      	adds	r2, #16
   2342e:	21ff      	movs	r1, #255	; 0xff
   23430:	4219      	tst	r1, r3
   23432:	d101      	bne.n	23438 <__lo0bits+0x30>
   23434:	3208      	adds	r2, #8
   23436:	0a1b      	lsrs	r3, r3, #8
   23438:	0719      	lsls	r1, r3, #28
   2343a:	d101      	bne.n	23440 <__lo0bits+0x38>
   2343c:	3204      	adds	r2, #4
   2343e:	091b      	lsrs	r3, r3, #4
   23440:	0799      	lsls	r1, r3, #30
   23442:	d101      	bne.n	23448 <__lo0bits+0x40>
   23444:	3202      	adds	r2, #2
   23446:	089b      	lsrs	r3, r3, #2
   23448:	07d9      	lsls	r1, r3, #31
   2344a:	d404      	bmi.n	23456 <__lo0bits+0x4e>
   2344c:	085b      	lsrs	r3, r3, #1
   2344e:	d101      	bne.n	23454 <__lo0bits+0x4c>
   23450:	2220      	movs	r2, #32
   23452:	e7e4      	b.n	2341e <__lo0bits+0x16>
   23454:	3201      	adds	r2, #1
   23456:	6003      	str	r3, [r0, #0]
   23458:	e7e1      	b.n	2341e <__lo0bits+0x16>
   2345a:	085b      	lsrs	r3, r3, #1
   2345c:	6003      	str	r3, [r0, #0]
   2345e:	2201      	movs	r2, #1
   23460:	e7dd      	b.n	2341e <__lo0bits+0x16>
   23462:	46c0      	nop			; (mov r8, r8)

00023464 <__i2b>:
   23464:	b510      	push	{r4, lr}
   23466:	000c      	movs	r4, r1
   23468:	2101      	movs	r1, #1
   2346a:	f7ff ff3b 	bl	232e4 <_Balloc>
   2346e:	2301      	movs	r3, #1
   23470:	6144      	str	r4, [r0, #20]
   23472:	6103      	str	r3, [r0, #16]
   23474:	bd10      	pop	{r4, pc}
   23476:	46c0      	nop			; (mov r8, r8)

00023478 <__multiply>:
   23478:	b5f0      	push	{r4, r5, r6, r7, lr}
   2347a:	4657      	mov	r7, sl
   2347c:	464e      	mov	r6, r9
   2347e:	4645      	mov	r5, r8
   23480:	46de      	mov	lr, fp
   23482:	b5e0      	push	{r5, r6, r7, lr}
   23484:	6914      	ldr	r4, [r2, #16]
   23486:	690e      	ldr	r6, [r1, #16]
   23488:	b085      	sub	sp, #20
   2348a:	000f      	movs	r7, r1
   2348c:	0015      	movs	r5, r2
   2348e:	42a6      	cmp	r6, r4
   23490:	da04      	bge.n	2349c <__multiply+0x24>
   23492:	0033      	movs	r3, r6
   23494:	0017      	movs	r7, r2
   23496:	0026      	movs	r6, r4
   23498:	000d      	movs	r5, r1
   2349a:	001c      	movs	r4, r3
   2349c:	1933      	adds	r3, r6, r4
   2349e:	4698      	mov	r8, r3
   234a0:	68bb      	ldr	r3, [r7, #8]
   234a2:	6879      	ldr	r1, [r7, #4]
   234a4:	4598      	cmp	r8, r3
   234a6:	dd00      	ble.n	234aa <__multiply+0x32>
   234a8:	3101      	adds	r1, #1
   234aa:	f7ff ff1b 	bl	232e4 <_Balloc>
   234ae:	2214      	movs	r2, #20
   234b0:	0003      	movs	r3, r0
   234b2:	4694      	mov	ip, r2
   234b4:	4463      	add	r3, ip
   234b6:	469b      	mov	fp, r3
   234b8:	4643      	mov	r3, r8
   234ba:	009b      	lsls	r3, r3, #2
   234bc:	445b      	add	r3, fp
   234be:	0019      	movs	r1, r3
   234c0:	9302      	str	r3, [sp, #8]
   234c2:	9003      	str	r0, [sp, #12]
   234c4:	465b      	mov	r3, fp
   234c6:	2200      	movs	r2, #0
   234c8:	458b      	cmp	fp, r1
   234ca:	d203      	bcs.n	234d4 <__multiply+0x5c>
   234cc:	9902      	ldr	r1, [sp, #8]
   234ce:	c304      	stmia	r3!, {r2}
   234d0:	4299      	cmp	r1, r3
   234d2:	d8fc      	bhi.n	234ce <__multiply+0x56>
   234d4:	2314      	movs	r3, #20
   234d6:	00a4      	lsls	r4, r4, #2
   234d8:	469a      	mov	sl, r3
   234da:	3714      	adds	r7, #20
   234dc:	0023      	movs	r3, r4
   234de:	46bc      	mov	ip, r7
   234e0:	44aa      	add	sl, r5
   234e2:	00b6      	lsls	r6, r6, #2
   234e4:	4453      	add	r3, sl
   234e6:	9700      	str	r7, [sp, #0]
   234e8:	44b4      	add	ip, r6
   234ea:	9301      	str	r3, [sp, #4]
   234ec:	459a      	cmp	sl, r3
   234ee:	d24f      	bcs.n	23590 <__multiply+0x118>
   234f0:	4653      	mov	r3, sl
   234f2:	681b      	ldr	r3, [r3, #0]
   234f4:	041e      	lsls	r6, r3, #16
   234f6:	0c36      	lsrs	r6, r6, #16
   234f8:	d020      	beq.n	2353c <__multiply+0xc4>
   234fa:	465c      	mov	r4, fp
   234fc:	2700      	movs	r7, #0
   234fe:	9d00      	ldr	r5, [sp, #0]
   23500:	0021      	movs	r1, r4
   23502:	cc08      	ldmia	r4!, {r3}
   23504:	cd04      	ldmia	r5!, {r2}
   23506:	4699      	mov	r9, r3
   23508:	4648      	mov	r0, r9
   2350a:	0413      	lsls	r3, r2, #16
   2350c:	0c1b      	lsrs	r3, r3, #16
   2350e:	4373      	muls	r3, r6
   23510:	0400      	lsls	r0, r0, #16
   23512:	0c00      	lsrs	r0, r0, #16
   23514:	181b      	adds	r3, r3, r0
   23516:	19d8      	adds	r0, r3, r7
   23518:	0c13      	lsrs	r3, r2, #16
   2351a:	464a      	mov	r2, r9
   2351c:	4373      	muls	r3, r6
   2351e:	0c12      	lsrs	r2, r2, #16
   23520:	189b      	adds	r3, r3, r2
   23522:	0c02      	lsrs	r2, r0, #16
   23524:	189b      	adds	r3, r3, r2
   23526:	0402      	lsls	r2, r0, #16
   23528:	0c1f      	lsrs	r7, r3, #16
   2352a:	0c12      	lsrs	r2, r2, #16
   2352c:	041b      	lsls	r3, r3, #16
   2352e:	4313      	orrs	r3, r2
   23530:	600b      	str	r3, [r1, #0]
   23532:	45ac      	cmp	ip, r5
   23534:	d8e4      	bhi.n	23500 <__multiply+0x88>
   23536:	4653      	mov	r3, sl
   23538:	6027      	str	r7, [r4, #0]
   2353a:	681b      	ldr	r3, [r3, #0]
   2353c:	0c1e      	lsrs	r6, r3, #16
   2353e:	d020      	beq.n	23582 <__multiply+0x10a>
   23540:	465b      	mov	r3, fp
   23542:	2100      	movs	r1, #0
   23544:	681b      	ldr	r3, [r3, #0]
   23546:	465c      	mov	r4, fp
   23548:	0018      	movs	r0, r3
   2354a:	000f      	movs	r7, r1
   2354c:	4662      	mov	r2, ip
   2354e:	9d00      	ldr	r5, [sp, #0]
   23550:	8829      	ldrh	r1, [r5, #0]
   23552:	0c00      	lsrs	r0, r0, #16
   23554:	4371      	muls	r1, r6
   23556:	1809      	adds	r1, r1, r0
   23558:	19c9      	adds	r1, r1, r7
   2355a:	041b      	lsls	r3, r3, #16
   2355c:	0408      	lsls	r0, r1, #16
   2355e:	0c1b      	lsrs	r3, r3, #16
   23560:	4303      	orrs	r3, r0
   23562:	6023      	str	r3, [r4, #0]
   23564:	cd08      	ldmia	r5!, {r3}
   23566:	6860      	ldr	r0, [r4, #4]
   23568:	0c1b      	lsrs	r3, r3, #16
   2356a:	4373      	muls	r3, r6
   2356c:	0407      	lsls	r7, r0, #16
   2356e:	0c3f      	lsrs	r7, r7, #16
   23570:	19db      	adds	r3, r3, r7
   23572:	0c09      	lsrs	r1, r1, #16
   23574:	185b      	adds	r3, r3, r1
   23576:	0c1f      	lsrs	r7, r3, #16
   23578:	3404      	adds	r4, #4
   2357a:	42aa      	cmp	r2, r5
   2357c:	d8e8      	bhi.n	23550 <__multiply+0xd8>
   2357e:	4694      	mov	ip, r2
   23580:	6023      	str	r3, [r4, #0]
   23582:	2304      	movs	r3, #4
   23584:	4699      	mov	r9, r3
   23586:	9b01      	ldr	r3, [sp, #4]
   23588:	44ca      	add	sl, r9
   2358a:	44cb      	add	fp, r9
   2358c:	4553      	cmp	r3, sl
   2358e:	d8af      	bhi.n	234f0 <__multiply+0x78>
   23590:	4643      	mov	r3, r8
   23592:	2b00      	cmp	r3, #0
   23594:	dd0e      	ble.n	235b4 <__multiply+0x13c>
   23596:	9b02      	ldr	r3, [sp, #8]
   23598:	3b04      	subs	r3, #4
   2359a:	681a      	ldr	r2, [r3, #0]
   2359c:	2a00      	cmp	r2, #0
   2359e:	d109      	bne.n	235b4 <__multiply+0x13c>
   235a0:	4642      	mov	r2, r8
   235a2:	e003      	b.n	235ac <__multiply+0x134>
   235a4:	3b04      	subs	r3, #4
   235a6:	6819      	ldr	r1, [r3, #0]
   235a8:	2900      	cmp	r1, #0
   235aa:	d102      	bne.n	235b2 <__multiply+0x13a>
   235ac:	3a01      	subs	r2, #1
   235ae:	2a00      	cmp	r2, #0
   235b0:	d1f8      	bne.n	235a4 <__multiply+0x12c>
   235b2:	4690      	mov	r8, r2
   235b4:	9b03      	ldr	r3, [sp, #12]
   235b6:	4642      	mov	r2, r8
   235b8:	0018      	movs	r0, r3
   235ba:	611a      	str	r2, [r3, #16]
   235bc:	b005      	add	sp, #20
   235be:	bc3c      	pop	{r2, r3, r4, r5}
   235c0:	4690      	mov	r8, r2
   235c2:	4699      	mov	r9, r3
   235c4:	46a2      	mov	sl, r4
   235c6:	46ab      	mov	fp, r5
   235c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   235ca:	46c0      	nop			; (mov r8, r8)

000235cc <__pow5mult>:
   235cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   235ce:	4647      	mov	r7, r8
   235d0:	46ce      	mov	lr, r9
   235d2:	2303      	movs	r3, #3
   235d4:	b580      	push	{r7, lr}
   235d6:	4680      	mov	r8, r0
   235d8:	000f      	movs	r7, r1
   235da:	0014      	movs	r4, r2
   235dc:	4013      	ands	r3, r2
   235de:	d13a      	bne.n	23656 <__pow5mult+0x8a>
   235e0:	10a4      	asrs	r4, r4, #2
   235e2:	003e      	movs	r6, r7
   235e4:	2c00      	cmp	r4, #0
   235e6:	d025      	beq.n	23634 <__pow5mult+0x68>
   235e8:	4643      	mov	r3, r8
   235ea:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   235ec:	2d00      	cmp	r5, #0
   235ee:	d03b      	beq.n	23668 <__pow5mult+0x9c>
   235f0:	003e      	movs	r6, r7
   235f2:	2300      	movs	r3, #0
   235f4:	2701      	movs	r7, #1
   235f6:	4699      	mov	r9, r3
   235f8:	4227      	tst	r7, r4
   235fa:	d107      	bne.n	2360c <__pow5mult+0x40>
   235fc:	1064      	asrs	r4, r4, #1
   235fe:	d019      	beq.n	23634 <__pow5mult+0x68>
   23600:	6828      	ldr	r0, [r5, #0]
   23602:	2800      	cmp	r0, #0
   23604:	d01b      	beq.n	2363e <__pow5mult+0x72>
   23606:	0005      	movs	r5, r0
   23608:	4227      	tst	r7, r4
   2360a:	d0f7      	beq.n	235fc <__pow5mult+0x30>
   2360c:	002a      	movs	r2, r5
   2360e:	0031      	movs	r1, r6
   23610:	4640      	mov	r0, r8
   23612:	f7ff ff31 	bl	23478 <__multiply>
   23616:	2e00      	cmp	r6, #0
   23618:	d01b      	beq.n	23652 <__pow5mult+0x86>
   2361a:	4642      	mov	r2, r8
   2361c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   2361e:	6873      	ldr	r3, [r6, #4]
   23620:	4694      	mov	ip, r2
   23622:	009b      	lsls	r3, r3, #2
   23624:	4463      	add	r3, ip
   23626:	681a      	ldr	r2, [r3, #0]
   23628:	1064      	asrs	r4, r4, #1
   2362a:	6032      	str	r2, [r6, #0]
   2362c:	601e      	str	r6, [r3, #0]
   2362e:	0006      	movs	r6, r0
   23630:	2c00      	cmp	r4, #0
   23632:	d1e5      	bne.n	23600 <__pow5mult+0x34>
   23634:	0030      	movs	r0, r6
   23636:	bc0c      	pop	{r2, r3}
   23638:	4690      	mov	r8, r2
   2363a:	4699      	mov	r9, r3
   2363c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2363e:	002a      	movs	r2, r5
   23640:	0029      	movs	r1, r5
   23642:	4640      	mov	r0, r8
   23644:	f7ff ff18 	bl	23478 <__multiply>
   23648:	464b      	mov	r3, r9
   2364a:	6028      	str	r0, [r5, #0]
   2364c:	6003      	str	r3, [r0, #0]
   2364e:	0005      	movs	r5, r0
   23650:	e7da      	b.n	23608 <__pow5mult+0x3c>
   23652:	0006      	movs	r6, r0
   23654:	e7d2      	b.n	235fc <__pow5mult+0x30>
   23656:	4a0b      	ldr	r2, [pc, #44]	; (23684 <__pow5mult+0xb8>)
   23658:	3b01      	subs	r3, #1
   2365a:	009b      	lsls	r3, r3, #2
   2365c:	589a      	ldr	r2, [r3, r2]
   2365e:	2300      	movs	r3, #0
   23660:	f7ff fe72 	bl	23348 <__multadd>
   23664:	0007      	movs	r7, r0
   23666:	e7bb      	b.n	235e0 <__pow5mult+0x14>
   23668:	2101      	movs	r1, #1
   2366a:	4640      	mov	r0, r8
   2366c:	f7ff fe3a 	bl	232e4 <_Balloc>
   23670:	4b05      	ldr	r3, [pc, #20]	; (23688 <__pow5mult+0xbc>)
   23672:	0005      	movs	r5, r0
   23674:	6143      	str	r3, [r0, #20]
   23676:	2301      	movs	r3, #1
   23678:	6103      	str	r3, [r0, #16]
   2367a:	4643      	mov	r3, r8
   2367c:	6498      	str	r0, [r3, #72]	; 0x48
   2367e:	2300      	movs	r3, #0
   23680:	6003      	str	r3, [r0, #0]
   23682:	e7b5      	b.n	235f0 <__pow5mult+0x24>
   23684:	00026eb0 	.word	0x00026eb0
   23688:	00000271 	.word	0x00000271

0002368c <__lshift>:
   2368c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2368e:	464e      	mov	r6, r9
   23690:	4645      	mov	r5, r8
   23692:	46de      	mov	lr, fp
   23694:	4657      	mov	r7, sl
   23696:	b5e0      	push	{r5, r6, r7, lr}
   23698:	000e      	movs	r6, r1
   2369a:	6933      	ldr	r3, [r6, #16]
   2369c:	1154      	asrs	r4, r2, #5
   2369e:	4698      	mov	r8, r3
   236a0:	44a0      	add	r8, r4
   236a2:	4643      	mov	r3, r8
   236a4:	1c5d      	adds	r5, r3, #1
   236a6:	68b3      	ldr	r3, [r6, #8]
   236a8:	4683      	mov	fp, r0
   236aa:	4691      	mov	r9, r2
   236ac:	6849      	ldr	r1, [r1, #4]
   236ae:	429d      	cmp	r5, r3
   236b0:	dd03      	ble.n	236ba <__lshift+0x2e>
   236b2:	3101      	adds	r1, #1
   236b4:	005b      	lsls	r3, r3, #1
   236b6:	429d      	cmp	r5, r3
   236b8:	dcfb      	bgt.n	236b2 <__lshift+0x26>
   236ba:	4658      	mov	r0, fp
   236bc:	f7ff fe12 	bl	232e4 <_Balloc>
   236c0:	0003      	movs	r3, r0
   236c2:	4684      	mov	ip, r0
   236c4:	3314      	adds	r3, #20
   236c6:	2c00      	cmp	r4, #0
   236c8:	dd06      	ble.n	236d8 <__lshift+0x4c>
   236ca:	2100      	movs	r1, #0
   236cc:	00a4      	lsls	r4, r4, #2
   236ce:	001a      	movs	r2, r3
   236d0:	191b      	adds	r3, r3, r4
   236d2:	c202      	stmia	r2!, {r1}
   236d4:	4293      	cmp	r3, r2
   236d6:	d1fc      	bne.n	236d2 <__lshift+0x46>
   236d8:	6932      	ldr	r2, [r6, #16]
   236da:	4648      	mov	r0, r9
   236dc:	0097      	lsls	r7, r2, #2
   236de:	0031      	movs	r1, r6
   236e0:	221f      	movs	r2, #31
   236e2:	3114      	adds	r1, #20
   236e4:	4010      	ands	r0, r2
   236e6:	19cf      	adds	r7, r1, r7
   236e8:	4681      	mov	r9, r0
   236ea:	2800      	cmp	r0, #0
   236ec:	d025      	beq.n	2373a <__lshift+0xae>
   236ee:	2220      	movs	r2, #32
   236f0:	1a12      	subs	r2, r2, r0
   236f2:	4692      	mov	sl, r2
   236f4:	2200      	movs	r2, #0
   236f6:	4648      	mov	r0, r9
   236f8:	680c      	ldr	r4, [r1, #0]
   236fa:	4084      	lsls	r4, r0
   236fc:	4650      	mov	r0, sl
   236fe:	4314      	orrs	r4, r2
   23700:	601c      	str	r4, [r3, #0]
   23702:	c904      	ldmia	r1!, {r2}
   23704:	3304      	adds	r3, #4
   23706:	40c2      	lsrs	r2, r0
   23708:	428f      	cmp	r7, r1
   2370a:	d8f4      	bhi.n	236f6 <__lshift+0x6a>
   2370c:	601a      	str	r2, [r3, #0]
   2370e:	2a00      	cmp	r2, #0
   23710:	d001      	beq.n	23716 <__lshift+0x8a>
   23712:	4645      	mov	r5, r8
   23714:	3502      	adds	r5, #2
   23716:	4663      	mov	r3, ip
   23718:	3d01      	subs	r5, #1
   2371a:	611d      	str	r5, [r3, #16]
   2371c:	6873      	ldr	r3, [r6, #4]
   2371e:	4660      	mov	r0, ip
   23720:	009a      	lsls	r2, r3, #2
   23722:	465b      	mov	r3, fp
   23724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   23726:	189b      	adds	r3, r3, r2
   23728:	681a      	ldr	r2, [r3, #0]
   2372a:	6032      	str	r2, [r6, #0]
   2372c:	601e      	str	r6, [r3, #0]
   2372e:	bc3c      	pop	{r2, r3, r4, r5}
   23730:	4690      	mov	r8, r2
   23732:	4699      	mov	r9, r3
   23734:	46a2      	mov	sl, r4
   23736:	46ab      	mov	fp, r5
   23738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2373a:	c904      	ldmia	r1!, {r2}
   2373c:	c304      	stmia	r3!, {r2}
   2373e:	428f      	cmp	r7, r1
   23740:	d9e9      	bls.n	23716 <__lshift+0x8a>
   23742:	c904      	ldmia	r1!, {r2}
   23744:	c304      	stmia	r3!, {r2}
   23746:	428f      	cmp	r7, r1
   23748:	d8f7      	bhi.n	2373a <__lshift+0xae>
   2374a:	e7e4      	b.n	23716 <__lshift+0x8a>

0002374c <__mcmp>:
   2374c:	690a      	ldr	r2, [r1, #16]
   2374e:	6903      	ldr	r3, [r0, #16]
   23750:	b530      	push	{r4, r5, lr}
   23752:	0005      	movs	r5, r0
   23754:	1a98      	subs	r0, r3, r2
   23756:	d111      	bne.n	2377c <__mcmp+0x30>
   23758:	0092      	lsls	r2, r2, #2
   2375a:	3514      	adds	r5, #20
   2375c:	3114      	adds	r1, #20
   2375e:	18ab      	adds	r3, r5, r2
   23760:	1889      	adds	r1, r1, r2
   23762:	e001      	b.n	23768 <__mcmp+0x1c>
   23764:	429d      	cmp	r5, r3
   23766:	d209      	bcs.n	2377c <__mcmp+0x30>
   23768:	3b04      	subs	r3, #4
   2376a:	3904      	subs	r1, #4
   2376c:	681c      	ldr	r4, [r3, #0]
   2376e:	680a      	ldr	r2, [r1, #0]
   23770:	4294      	cmp	r4, r2
   23772:	d0f7      	beq.n	23764 <__mcmp+0x18>
   23774:	4294      	cmp	r4, r2
   23776:	4180      	sbcs	r0, r0
   23778:	2201      	movs	r2, #1
   2377a:	4310      	orrs	r0, r2
   2377c:	bd30      	pop	{r4, r5, pc}
   2377e:	46c0      	nop			; (mov r8, r8)

00023780 <__mdiff>:
   23780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23782:	4645      	mov	r5, r8
   23784:	46de      	mov	lr, fp
   23786:	4657      	mov	r7, sl
   23788:	464e      	mov	r6, r9
   2378a:	0014      	movs	r4, r2
   2378c:	690b      	ldr	r3, [r1, #16]
   2378e:	6912      	ldr	r2, [r2, #16]
   23790:	b5e0      	push	{r5, r6, r7, lr}
   23792:	4688      	mov	r8, r1
   23794:	1a9d      	subs	r5, r3, r2
   23796:	d11a      	bne.n	237ce <__mdiff+0x4e>
   23798:	000f      	movs	r7, r1
   2379a:	2114      	movs	r1, #20
   2379c:	468c      	mov	ip, r1
   2379e:	0092      	lsls	r2, r2, #2
   237a0:	3714      	adds	r7, #20
   237a2:	44a4      	add	ip, r4
   237a4:	18bb      	adds	r3, r7, r2
   237a6:	4462      	add	r2, ip
   237a8:	e002      	b.n	237b0 <__mdiff+0x30>
   237aa:	429f      	cmp	r7, r3
   237ac:	d300      	bcc.n	237b0 <__mdiff+0x30>
   237ae:	e070      	b.n	23892 <__mdiff+0x112>
   237b0:	3b04      	subs	r3, #4
   237b2:	3a04      	subs	r2, #4
   237b4:	681e      	ldr	r6, [r3, #0]
   237b6:	6811      	ldr	r1, [r2, #0]
   237b8:	428e      	cmp	r6, r1
   237ba:	d0f6      	beq.n	237aa <__mdiff+0x2a>
   237bc:	d300      	bcc.n	237c0 <__mdiff+0x40>
   237be:	e071      	b.n	238a4 <__mdiff+0x124>
   237c0:	4643      	mov	r3, r8
   237c2:	003e      	movs	r6, r7
   237c4:	46a0      	mov	r8, r4
   237c6:	4667      	mov	r7, ip
   237c8:	001c      	movs	r4, r3
   237ca:	2501      	movs	r5, #1
   237cc:	e006      	b.n	237dc <__mdiff+0x5c>
   237ce:	2d00      	cmp	r5, #0
   237d0:	db6a      	blt.n	238a8 <__mdiff+0x128>
   237d2:	4647      	mov	r7, r8
   237d4:	0026      	movs	r6, r4
   237d6:	2500      	movs	r5, #0
   237d8:	3714      	adds	r7, #20
   237da:	3614      	adds	r6, #20
   237dc:	4643      	mov	r3, r8
   237de:	6859      	ldr	r1, [r3, #4]
   237e0:	f7ff fd80 	bl	232e4 <_Balloc>
   237e4:	4643      	mov	r3, r8
   237e6:	4681      	mov	r9, r0
   237e8:	60c5      	str	r5, [r0, #12]
   237ea:	6918      	ldr	r0, [r3, #16]
   237ec:	464d      	mov	r5, r9
   237ee:	0083      	lsls	r3, r0, #2
   237f0:	469c      	mov	ip, r3
   237f2:	6923      	ldr	r3, [r4, #16]
   237f4:	44bc      	add	ip, r7
   237f6:	009b      	lsls	r3, r3, #2
   237f8:	4698      	mov	r8, r3
   237fa:	2300      	movs	r3, #0
   237fc:	44b0      	add	r8, r6
   237fe:	3514      	adds	r5, #20
   23800:	469a      	mov	sl, r3
   23802:	e000      	b.n	23806 <__mdiff+0x86>
   23804:	0027      	movs	r7, r4
   23806:	ce04      	ldmia	r6!, {r2}
   23808:	003c      	movs	r4, r7
   2380a:	4693      	mov	fp, r2
   2380c:	4659      	mov	r1, fp
   2380e:	cc08      	ldmia	r4!, {r3}
   23810:	0409      	lsls	r1, r1, #16
   23812:	041a      	lsls	r2, r3, #16
   23814:	0c12      	lsrs	r2, r2, #16
   23816:	4452      	add	r2, sl
   23818:	0c09      	lsrs	r1, r1, #16
   2381a:	1a52      	subs	r2, r2, r1
   2381c:	0c19      	lsrs	r1, r3, #16
   2381e:	465b      	mov	r3, fp
   23820:	0c1b      	lsrs	r3, r3, #16
   23822:	1acb      	subs	r3, r1, r3
   23824:	1411      	asrs	r1, r2, #16
   23826:	185b      	adds	r3, r3, r1
   23828:	0412      	lsls	r2, r2, #16
   2382a:	1419      	asrs	r1, r3, #16
   2382c:	0c12      	lsrs	r2, r2, #16
   2382e:	041b      	lsls	r3, r3, #16
   23830:	468a      	mov	sl, r1
   23832:	4313      	orrs	r3, r2
   23834:	1d29      	adds	r1, r5, #4
   23836:	602b      	str	r3, [r5, #0]
   23838:	000d      	movs	r5, r1
   2383a:	45b0      	cmp	r8, r6
   2383c:	d8e2      	bhi.n	23804 <__mdiff+0x84>
   2383e:	45a4      	cmp	ip, r4
   23840:	d916      	bls.n	23870 <__mdiff+0xf0>
   23842:	cc08      	ldmia	r4!, {r3}
   23844:	041a      	lsls	r2, r3, #16
   23846:	0c12      	lsrs	r2, r2, #16
   23848:	4452      	add	r2, sl
   2384a:	1416      	asrs	r6, r2, #16
   2384c:	0c1b      	lsrs	r3, r3, #16
   2384e:	199b      	adds	r3, r3, r6
   23850:	0412      	lsls	r2, r2, #16
   23852:	141e      	asrs	r6, r3, #16
   23854:	0c12      	lsrs	r2, r2, #16
   23856:	041b      	lsls	r3, r3, #16
   23858:	4313      	orrs	r3, r2
   2385a:	46b2      	mov	sl, r6
   2385c:	c508      	stmia	r5!, {r3}
   2385e:	45a4      	cmp	ip, r4
   23860:	d8ef      	bhi.n	23842 <__mdiff+0xc2>
   23862:	4662      	mov	r2, ip
   23864:	2403      	movs	r4, #3
   23866:	1bd2      	subs	r2, r2, r7
   23868:	3a05      	subs	r2, #5
   2386a:	43a2      	bics	r2, r4
   2386c:	3204      	adds	r2, #4
   2386e:	1889      	adds	r1, r1, r2
   23870:	3904      	subs	r1, #4
   23872:	2b00      	cmp	r3, #0
   23874:	d104      	bne.n	23880 <__mdiff+0x100>
   23876:	3904      	subs	r1, #4
   23878:	680b      	ldr	r3, [r1, #0]
   2387a:	3801      	subs	r0, #1
   2387c:	2b00      	cmp	r3, #0
   2387e:	d0fa      	beq.n	23876 <__mdiff+0xf6>
   23880:	464b      	mov	r3, r9
   23882:	6118      	str	r0, [r3, #16]
   23884:	4648      	mov	r0, r9
   23886:	bc3c      	pop	{r2, r3, r4, r5}
   23888:	4690      	mov	r8, r2
   2388a:	4699      	mov	r9, r3
   2388c:	46a2      	mov	sl, r4
   2388e:	46ab      	mov	fp, r5
   23890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23892:	2100      	movs	r1, #0
   23894:	f7ff fd26 	bl	232e4 <_Balloc>
   23898:	2301      	movs	r3, #1
   2389a:	6103      	str	r3, [r0, #16]
   2389c:	2300      	movs	r3, #0
   2389e:	4681      	mov	r9, r0
   238a0:	6143      	str	r3, [r0, #20]
   238a2:	e7ef      	b.n	23884 <__mdiff+0x104>
   238a4:	4666      	mov	r6, ip
   238a6:	e799      	b.n	237dc <__mdiff+0x5c>
   238a8:	0027      	movs	r7, r4
   238aa:	000e      	movs	r6, r1
   238ac:	46a0      	mov	r8, r4
   238ae:	3714      	adds	r7, #20
   238b0:	3614      	adds	r6, #20
   238b2:	000c      	movs	r4, r1
   238b4:	2501      	movs	r5, #1
   238b6:	e791      	b.n	237dc <__mdiff+0x5c>

000238b8 <__d2b>:
   238b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   238ba:	2101      	movs	r1, #1
   238bc:	001c      	movs	r4, r3
   238be:	b083      	sub	sp, #12
   238c0:	9e08      	ldr	r6, [sp, #32]
   238c2:	0015      	movs	r5, r2
   238c4:	f7ff fd0e 	bl	232e4 <_Balloc>
   238c8:	0323      	lsls	r3, r4, #12
   238ca:	0064      	lsls	r4, r4, #1
   238cc:	0007      	movs	r7, r0
   238ce:	0b1b      	lsrs	r3, r3, #12
   238d0:	0d64      	lsrs	r4, r4, #21
   238d2:	d002      	beq.n	238da <__d2b+0x22>
   238d4:	2280      	movs	r2, #128	; 0x80
   238d6:	0352      	lsls	r2, r2, #13
   238d8:	4313      	orrs	r3, r2
   238da:	9301      	str	r3, [sp, #4]
   238dc:	2d00      	cmp	r5, #0
   238de:	d019      	beq.n	23914 <__d2b+0x5c>
   238e0:	4668      	mov	r0, sp
   238e2:	9500      	str	r5, [sp, #0]
   238e4:	f7ff fd90 	bl	23408 <__lo0bits>
   238e8:	2800      	cmp	r0, #0
   238ea:	d130      	bne.n	2394e <__d2b+0x96>
   238ec:	9b00      	ldr	r3, [sp, #0]
   238ee:	617b      	str	r3, [r7, #20]
   238f0:	9b01      	ldr	r3, [sp, #4]
   238f2:	61bb      	str	r3, [r7, #24]
   238f4:	1e5a      	subs	r2, r3, #1
   238f6:	4193      	sbcs	r3, r2
   238f8:	1c5d      	adds	r5, r3, #1
   238fa:	613d      	str	r5, [r7, #16]
   238fc:	2c00      	cmp	r4, #0
   238fe:	d014      	beq.n	2392a <__d2b+0x72>
   23900:	4b19      	ldr	r3, [pc, #100]	; (23968 <__d2b+0xb0>)
   23902:	469c      	mov	ip, r3
   23904:	2335      	movs	r3, #53	; 0x35
   23906:	4464      	add	r4, ip
   23908:	1824      	adds	r4, r4, r0
   2390a:	1a18      	subs	r0, r3, r0
   2390c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2390e:	6034      	str	r4, [r6, #0]
   23910:	6018      	str	r0, [r3, #0]
   23912:	e019      	b.n	23948 <__d2b+0x90>
   23914:	a801      	add	r0, sp, #4
   23916:	f7ff fd77 	bl	23408 <__lo0bits>
   2391a:	9b01      	ldr	r3, [sp, #4]
   2391c:	3020      	adds	r0, #32
   2391e:	617b      	str	r3, [r7, #20]
   23920:	2301      	movs	r3, #1
   23922:	2501      	movs	r5, #1
   23924:	613b      	str	r3, [r7, #16]
   23926:	2c00      	cmp	r4, #0
   23928:	d1ea      	bne.n	23900 <__d2b+0x48>
   2392a:	4b10      	ldr	r3, [pc, #64]	; (2396c <__d2b+0xb4>)
   2392c:	469c      	mov	ip, r3
   2392e:	4b10      	ldr	r3, [pc, #64]	; (23970 <__d2b+0xb8>)
   23930:	4460      	add	r0, ip
   23932:	18eb      	adds	r3, r5, r3
   23934:	009b      	lsls	r3, r3, #2
   23936:	18fb      	adds	r3, r7, r3
   23938:	6030      	str	r0, [r6, #0]
   2393a:	6958      	ldr	r0, [r3, #20]
   2393c:	f7ff fd4a 	bl	233d4 <__hi0bits>
   23940:	016b      	lsls	r3, r5, #5
   23942:	1a18      	subs	r0, r3, r0
   23944:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23946:	6018      	str	r0, [r3, #0]
   23948:	0038      	movs	r0, r7
   2394a:	b003      	add	sp, #12
   2394c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2394e:	9b01      	ldr	r3, [sp, #4]
   23950:	2220      	movs	r2, #32
   23952:	0019      	movs	r1, r3
   23954:	1a12      	subs	r2, r2, r0
   23956:	4091      	lsls	r1, r2
   23958:	000a      	movs	r2, r1
   2395a:	40c3      	lsrs	r3, r0
   2395c:	9900      	ldr	r1, [sp, #0]
   2395e:	9301      	str	r3, [sp, #4]
   23960:	430a      	orrs	r2, r1
   23962:	617a      	str	r2, [r7, #20]
   23964:	e7c5      	b.n	238f2 <__d2b+0x3a>
   23966:	46c0      	nop			; (mov r8, r8)
   23968:	fffffbcd 	.word	0xfffffbcd
   2396c:	fffffbce 	.word	0xfffffbce
   23970:	3fffffff 	.word	0x3fffffff

00023974 <_sbrk_r>:
   23974:	2300      	movs	r3, #0
   23976:	b570      	push	{r4, r5, r6, lr}
   23978:	4c06      	ldr	r4, [pc, #24]	; (23994 <_sbrk_r+0x20>)
   2397a:	0005      	movs	r5, r0
   2397c:	0008      	movs	r0, r1
   2397e:	6023      	str	r3, [r4, #0]
   23980:	f7e0 f9a4 	bl	3ccc <_sbrk>
   23984:	1c43      	adds	r3, r0, #1
   23986:	d000      	beq.n	2398a <_sbrk_r+0x16>
   23988:	bd70      	pop	{r4, r5, r6, pc}
   2398a:	6823      	ldr	r3, [r4, #0]
   2398c:	2b00      	cmp	r3, #0
   2398e:	d0fb      	beq.n	23988 <_sbrk_r+0x14>
   23990:	602b      	str	r3, [r5, #0]
   23992:	e7f9      	b.n	23988 <_sbrk_r+0x14>
   23994:	20005654 	.word	0x20005654

00023998 <strchr>:
   23998:	b570      	push	{r4, r5, r6, lr}
   2399a:	b2cc      	uxtb	r4, r1
   2399c:	2c00      	cmp	r4, #0
   2399e:	d03b      	beq.n	23a18 <strchr+0x80>
   239a0:	0783      	lsls	r3, r0, #30
   239a2:	d00e      	beq.n	239c2 <strchr+0x2a>
   239a4:	7803      	ldrb	r3, [r0, #0]
   239a6:	2b00      	cmp	r3, #0
   239a8:	d05b      	beq.n	23a62 <strchr+0xca>
   239aa:	429c      	cmp	r4, r3
   239ac:	d033      	beq.n	23a16 <strchr+0x7e>
   239ae:	2203      	movs	r2, #3
   239b0:	e004      	b.n	239bc <strchr+0x24>
   239b2:	7803      	ldrb	r3, [r0, #0]
   239b4:	2b00      	cmp	r3, #0
   239b6:	d054      	beq.n	23a62 <strchr+0xca>
   239b8:	429c      	cmp	r4, r3
   239ba:	d02c      	beq.n	23a16 <strchr+0x7e>
   239bc:	3001      	adds	r0, #1
   239be:	4210      	tst	r0, r2
   239c0:	d1f7      	bne.n	239b2 <strchr+0x1a>
   239c2:	25ff      	movs	r5, #255	; 0xff
   239c4:	4029      	ands	r1, r5
   239c6:	020d      	lsls	r5, r1, #8
   239c8:	4329      	orrs	r1, r5
   239ca:	040d      	lsls	r5, r1, #16
   239cc:	430d      	orrs	r5, r1
   239ce:	0029      	movs	r1, r5
   239d0:	6802      	ldr	r2, [r0, #0]
   239d2:	4b26      	ldr	r3, [pc, #152]	; (23a6c <strchr+0xd4>)
   239d4:	4051      	eors	r1, r2
   239d6:	18d3      	adds	r3, r2, r3
   239d8:	4393      	bics	r3, r2
   239da:	4a24      	ldr	r2, [pc, #144]	; (23a6c <strchr+0xd4>)
   239dc:	4e24      	ldr	r6, [pc, #144]	; (23a70 <strchr+0xd8>)
   239de:	188a      	adds	r2, r1, r2
   239e0:	438a      	bics	r2, r1
   239e2:	4313      	orrs	r3, r2
   239e4:	4233      	tst	r3, r6
   239e6:	d10c      	bne.n	23a02 <strchr+0x6a>
   239e8:	0029      	movs	r1, r5
   239ea:	3004      	adds	r0, #4
   239ec:	6802      	ldr	r2, [r0, #0]
   239ee:	4b1f      	ldr	r3, [pc, #124]	; (23a6c <strchr+0xd4>)
   239f0:	4051      	eors	r1, r2
   239f2:	18d3      	adds	r3, r2, r3
   239f4:	4393      	bics	r3, r2
   239f6:	4a1d      	ldr	r2, [pc, #116]	; (23a6c <strchr+0xd4>)
   239f8:	188a      	adds	r2, r1, r2
   239fa:	438a      	bics	r2, r1
   239fc:	4313      	orrs	r3, r2
   239fe:	4233      	tst	r3, r6
   23a00:	d0f2      	beq.n	239e8 <strchr+0x50>
   23a02:	7803      	ldrb	r3, [r0, #0]
   23a04:	2b00      	cmp	r3, #0
   23a06:	d104      	bne.n	23a12 <strchr+0x7a>
   23a08:	e02b      	b.n	23a62 <strchr+0xca>
   23a0a:	3001      	adds	r0, #1
   23a0c:	7803      	ldrb	r3, [r0, #0]
   23a0e:	2b00      	cmp	r3, #0
   23a10:	d027      	beq.n	23a62 <strchr+0xca>
   23a12:	429c      	cmp	r4, r3
   23a14:	d1f9      	bne.n	23a0a <strchr+0x72>
   23a16:	bd70      	pop	{r4, r5, r6, pc}
   23a18:	0783      	lsls	r3, r0, #30
   23a1a:	d00a      	beq.n	23a32 <strchr+0x9a>
   23a1c:	7803      	ldrb	r3, [r0, #0]
   23a1e:	2b00      	cmp	r3, #0
   23a20:	d0f9      	beq.n	23a16 <strchr+0x7e>
   23a22:	2203      	movs	r2, #3
   23a24:	e002      	b.n	23a2c <strchr+0x94>
   23a26:	7803      	ldrb	r3, [r0, #0]
   23a28:	2b00      	cmp	r3, #0
   23a2a:	d0f4      	beq.n	23a16 <strchr+0x7e>
   23a2c:	3001      	adds	r0, #1
   23a2e:	4210      	tst	r0, r2
   23a30:	d1f9      	bne.n	23a26 <strchr+0x8e>
   23a32:	6801      	ldr	r1, [r0, #0]
   23a34:	4a0d      	ldr	r2, [pc, #52]	; (23a6c <strchr+0xd4>)
   23a36:	0003      	movs	r3, r0
   23a38:	188a      	adds	r2, r1, r2
   23a3a:	480d      	ldr	r0, [pc, #52]	; (23a70 <strchr+0xd8>)
   23a3c:	438a      	bics	r2, r1
   23a3e:	4202      	tst	r2, r0
   23a40:	d106      	bne.n	23a50 <strchr+0xb8>
   23a42:	3304      	adds	r3, #4
   23a44:	6819      	ldr	r1, [r3, #0]
   23a46:	4a09      	ldr	r2, [pc, #36]	; (23a6c <strchr+0xd4>)
   23a48:	188a      	adds	r2, r1, r2
   23a4a:	438a      	bics	r2, r1
   23a4c:	4202      	tst	r2, r0
   23a4e:	d0f8      	beq.n	23a42 <strchr+0xaa>
   23a50:	781a      	ldrb	r2, [r3, #0]
   23a52:	0018      	movs	r0, r3
   23a54:	2a00      	cmp	r2, #0
   23a56:	d006      	beq.n	23a66 <strchr+0xce>
   23a58:	3001      	adds	r0, #1
   23a5a:	7803      	ldrb	r3, [r0, #0]
   23a5c:	2b00      	cmp	r3, #0
   23a5e:	d1fb      	bne.n	23a58 <strchr+0xc0>
   23a60:	e7d9      	b.n	23a16 <strchr+0x7e>
   23a62:	2000      	movs	r0, #0
   23a64:	e7d7      	b.n	23a16 <strchr+0x7e>
   23a66:	0018      	movs	r0, r3
   23a68:	e7d5      	b.n	23a16 <strchr+0x7e>
   23a6a:	46c0      	nop			; (mov r8, r8)
   23a6c:	fefefeff 	.word	0xfefefeff
   23a70:	80808080 	.word	0x80808080

00023a74 <__ssprint_r>:
   23a74:	b5f0      	push	{r4, r5, r6, r7, lr}
   23a76:	4657      	mov	r7, sl
   23a78:	464e      	mov	r6, r9
   23a7a:	46de      	mov	lr, fp
   23a7c:	4645      	mov	r5, r8
   23a7e:	b5e0      	push	{r5, r6, r7, lr}
   23a80:	6893      	ldr	r3, [r2, #8]
   23a82:	b083      	sub	sp, #12
   23a84:	9001      	str	r0, [sp, #4]
   23a86:	000e      	movs	r6, r1
   23a88:	4692      	mov	sl, r2
   23a8a:	2b00      	cmp	r3, #0
   23a8c:	d070      	beq.n	23b70 <__ssprint_r+0xfc>
   23a8e:	688d      	ldr	r5, [r1, #8]
   23a90:	6813      	ldr	r3, [r2, #0]
   23a92:	002c      	movs	r4, r5
   23a94:	6808      	ldr	r0, [r1, #0]
   23a96:	001d      	movs	r5, r3
   23a98:	e046      	b.n	23b28 <__ssprint_r+0xb4>
   23a9a:	2290      	movs	r2, #144	; 0x90
   23a9c:	89b3      	ldrh	r3, [r6, #12]
   23a9e:	00d2      	lsls	r2, r2, #3
   23aa0:	4213      	tst	r3, r2
   23aa2:	d030      	beq.n	23b06 <__ssprint_r+0x92>
   23aa4:	6931      	ldr	r1, [r6, #16]
   23aa6:	1a42      	subs	r2, r0, r1
   23aa8:	4693      	mov	fp, r2
   23aaa:	6970      	ldr	r0, [r6, #20]
   23aac:	0042      	lsls	r2, r0, #1
   23aae:	1812      	adds	r2, r2, r0
   23ab0:	0fd0      	lsrs	r0, r2, #31
   23ab2:	1882      	adds	r2, r0, r2
   23ab4:	1052      	asrs	r2, r2, #1
   23ab6:	4690      	mov	r8, r2
   23ab8:	465a      	mov	r2, fp
   23aba:	1c50      	adds	r0, r2, #1
   23abc:	19c0      	adds	r0, r0, r7
   23abe:	4642      	mov	r2, r8
   23ac0:	4540      	cmp	r0, r8
   23ac2:	d901      	bls.n	23ac8 <__ssprint_r+0x54>
   23ac4:	4680      	mov	r8, r0
   23ac6:	0002      	movs	r2, r0
   23ac8:	2080      	movs	r0, #128	; 0x80
   23aca:	00c0      	lsls	r0, r0, #3
   23acc:	4203      	tst	r3, r0
   23ace:	d038      	beq.n	23b42 <__ssprint_r+0xce>
   23ad0:	0011      	movs	r1, r2
   23ad2:	9801      	ldr	r0, [sp, #4]
   23ad4:	f7ff f8dc 	bl	22c90 <_malloc_r>
   23ad8:	1e04      	subs	r4, r0, #0
   23ada:	d054      	beq.n	23b86 <__ssprint_r+0x112>
   23adc:	465a      	mov	r2, fp
   23ade:	6931      	ldr	r1, [r6, #16]
   23ae0:	f7fc f94a 	bl	1fd78 <memcpy>
   23ae4:	89b3      	ldrh	r3, [r6, #12]
   23ae6:	4a2a      	ldr	r2, [pc, #168]	; (23b90 <__ssprint_r+0x11c>)
   23ae8:	4013      	ands	r3, r2
   23aea:	2280      	movs	r2, #128	; 0x80
   23aec:	4313      	orrs	r3, r2
   23aee:	81b3      	strh	r3, [r6, #12]
   23af0:	4643      	mov	r3, r8
   23af2:	0020      	movs	r0, r4
   23af4:	465a      	mov	r2, fp
   23af6:	6134      	str	r4, [r6, #16]
   23af8:	46b8      	mov	r8, r7
   23afa:	003c      	movs	r4, r7
   23afc:	4458      	add	r0, fp
   23afe:	6173      	str	r3, [r6, #20]
   23b00:	1a9b      	subs	r3, r3, r2
   23b02:	6030      	str	r0, [r6, #0]
   23b04:	60b3      	str	r3, [r6, #8]
   23b06:	4642      	mov	r2, r8
   23b08:	4649      	mov	r1, r9
   23b0a:	f000 fa2d 	bl	23f68 <memmove>
   23b0e:	68b3      	ldr	r3, [r6, #8]
   23b10:	1b1c      	subs	r4, r3, r4
   23b12:	6833      	ldr	r3, [r6, #0]
   23b14:	60b4      	str	r4, [r6, #8]
   23b16:	4443      	add	r3, r8
   23b18:	6033      	str	r3, [r6, #0]
   23b1a:	0018      	movs	r0, r3
   23b1c:	4653      	mov	r3, sl
   23b1e:	689b      	ldr	r3, [r3, #8]
   23b20:	1bdf      	subs	r7, r3, r7
   23b22:	4653      	mov	r3, sl
   23b24:	609f      	str	r7, [r3, #8]
   23b26:	d023      	beq.n	23b70 <__ssprint_r+0xfc>
   23b28:	686f      	ldr	r7, [r5, #4]
   23b2a:	002b      	movs	r3, r5
   23b2c:	3508      	adds	r5, #8
   23b2e:	2f00      	cmp	r7, #0
   23b30:	d0fa      	beq.n	23b28 <__ssprint_r+0xb4>
   23b32:	681b      	ldr	r3, [r3, #0]
   23b34:	46a0      	mov	r8, r4
   23b36:	4699      	mov	r9, r3
   23b38:	42a7      	cmp	r7, r4
   23b3a:	d2ae      	bcs.n	23a9a <__ssprint_r+0x26>
   23b3c:	003c      	movs	r4, r7
   23b3e:	46b8      	mov	r8, r7
   23b40:	e7e1      	b.n	23b06 <__ssprint_r+0x92>
   23b42:	9801      	ldr	r0, [sp, #4]
   23b44:	f000 fa60 	bl	24008 <_realloc_r>
   23b48:	1e04      	subs	r4, r0, #0
   23b4a:	d1d1      	bne.n	23af0 <__ssprint_r+0x7c>
   23b4c:	9c01      	ldr	r4, [sp, #4]
   23b4e:	6931      	ldr	r1, [r6, #16]
   23b50:	0020      	movs	r0, r4
   23b52:	f000 f915 	bl	23d80 <_free_r>
   23b56:	230c      	movs	r3, #12
   23b58:	6023      	str	r3, [r4, #0]
   23b5a:	2240      	movs	r2, #64	; 0x40
   23b5c:	89b3      	ldrh	r3, [r6, #12]
   23b5e:	2001      	movs	r0, #1
   23b60:	4313      	orrs	r3, r2
   23b62:	81b3      	strh	r3, [r6, #12]
   23b64:	4652      	mov	r2, sl
   23b66:	2300      	movs	r3, #0
   23b68:	4240      	negs	r0, r0
   23b6a:	6093      	str	r3, [r2, #8]
   23b6c:	6053      	str	r3, [r2, #4]
   23b6e:	e003      	b.n	23b78 <__ssprint_r+0x104>
   23b70:	2300      	movs	r3, #0
   23b72:	4652      	mov	r2, sl
   23b74:	2000      	movs	r0, #0
   23b76:	6053      	str	r3, [r2, #4]
   23b78:	b003      	add	sp, #12
   23b7a:	bc3c      	pop	{r2, r3, r4, r5}
   23b7c:	4690      	mov	r8, r2
   23b7e:	4699      	mov	r9, r3
   23b80:	46a2      	mov	sl, r4
   23b82:	46ab      	mov	fp, r5
   23b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23b86:	230c      	movs	r3, #12
   23b88:	9a01      	ldr	r2, [sp, #4]
   23b8a:	6013      	str	r3, [r2, #0]
   23b8c:	e7e5      	b.n	23b5a <__ssprint_r+0xe6>
   23b8e:	46c0      	nop			; (mov r8, r8)
   23b90:	fffffb7f 	.word	0xfffffb7f

00023b94 <__register_exitproc>:
   23b94:	b5f0      	push	{r4, r5, r6, r7, lr}
   23b96:	464e      	mov	r6, r9
   23b98:	4645      	mov	r5, r8
   23b9a:	46de      	mov	lr, fp
   23b9c:	4657      	mov	r7, sl
   23b9e:	b5e0      	push	{r5, r6, r7, lr}
   23ba0:	4d36      	ldr	r5, [pc, #216]	; (23c7c <__register_exitproc+0xe8>)
   23ba2:	b083      	sub	sp, #12
   23ba4:	0006      	movs	r6, r0
   23ba6:	6828      	ldr	r0, [r5, #0]
   23ba8:	4698      	mov	r8, r3
   23baa:	000f      	movs	r7, r1
   23bac:	4691      	mov	r9, r2
   23bae:	f7ff f86b 	bl	22c88 <__retarget_lock_acquire_recursive>
   23bb2:	4b33      	ldr	r3, [pc, #204]	; (23c80 <__register_exitproc+0xec>)
   23bb4:	681c      	ldr	r4, [r3, #0]
   23bb6:	23a4      	movs	r3, #164	; 0xa4
   23bb8:	005b      	lsls	r3, r3, #1
   23bba:	58e0      	ldr	r0, [r4, r3]
   23bbc:	2800      	cmp	r0, #0
   23bbe:	d052      	beq.n	23c66 <__register_exitproc+0xd2>
   23bc0:	6843      	ldr	r3, [r0, #4]
   23bc2:	2b1f      	cmp	r3, #31
   23bc4:	dc13      	bgt.n	23bee <__register_exitproc+0x5a>
   23bc6:	1c5a      	adds	r2, r3, #1
   23bc8:	9201      	str	r2, [sp, #4]
   23bca:	2e00      	cmp	r6, #0
   23bcc:	d128      	bne.n	23c20 <__register_exitproc+0x8c>
   23bce:	9a01      	ldr	r2, [sp, #4]
   23bd0:	3302      	adds	r3, #2
   23bd2:	009b      	lsls	r3, r3, #2
   23bd4:	6042      	str	r2, [r0, #4]
   23bd6:	501f      	str	r7, [r3, r0]
   23bd8:	6828      	ldr	r0, [r5, #0]
   23bda:	f7ff f857 	bl	22c8c <__retarget_lock_release_recursive>
   23bde:	2000      	movs	r0, #0
   23be0:	b003      	add	sp, #12
   23be2:	bc3c      	pop	{r2, r3, r4, r5}
   23be4:	4690      	mov	r8, r2
   23be6:	4699      	mov	r9, r3
   23be8:	46a2      	mov	sl, r4
   23bea:	46ab      	mov	fp, r5
   23bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23bee:	4b25      	ldr	r3, [pc, #148]	; (23c84 <__register_exitproc+0xf0>)
   23bf0:	2b00      	cmp	r3, #0
   23bf2:	d03d      	beq.n	23c70 <__register_exitproc+0xdc>
   23bf4:	20c8      	movs	r0, #200	; 0xc8
   23bf6:	0040      	lsls	r0, r0, #1
   23bf8:	e000      	b.n	23bfc <__register_exitproc+0x68>
   23bfa:	bf00      	nop
   23bfc:	2800      	cmp	r0, #0
   23bfe:	d037      	beq.n	23c70 <__register_exitproc+0xdc>
   23c00:	22a4      	movs	r2, #164	; 0xa4
   23c02:	2300      	movs	r3, #0
   23c04:	0052      	lsls	r2, r2, #1
   23c06:	58a1      	ldr	r1, [r4, r2]
   23c08:	6043      	str	r3, [r0, #4]
   23c0a:	6001      	str	r1, [r0, #0]
   23c0c:	50a0      	str	r0, [r4, r2]
   23c0e:	3240      	adds	r2, #64	; 0x40
   23c10:	5083      	str	r3, [r0, r2]
   23c12:	3204      	adds	r2, #4
   23c14:	5083      	str	r3, [r0, r2]
   23c16:	3301      	adds	r3, #1
   23c18:	9301      	str	r3, [sp, #4]
   23c1a:	2300      	movs	r3, #0
   23c1c:	2e00      	cmp	r6, #0
   23c1e:	d0d6      	beq.n	23bce <__register_exitproc+0x3a>
   23c20:	009a      	lsls	r2, r3, #2
   23c22:	4692      	mov	sl, r2
   23c24:	4482      	add	sl, r0
   23c26:	464a      	mov	r2, r9
   23c28:	2188      	movs	r1, #136	; 0x88
   23c2a:	4654      	mov	r4, sl
   23c2c:	5062      	str	r2, [r4, r1]
   23c2e:	22c4      	movs	r2, #196	; 0xc4
   23c30:	0052      	lsls	r2, r2, #1
   23c32:	4691      	mov	r9, r2
   23c34:	4481      	add	r9, r0
   23c36:	464a      	mov	r2, r9
   23c38:	3987      	subs	r1, #135	; 0x87
   23c3a:	4099      	lsls	r1, r3
   23c3c:	6812      	ldr	r2, [r2, #0]
   23c3e:	468b      	mov	fp, r1
   23c40:	430a      	orrs	r2, r1
   23c42:	4694      	mov	ip, r2
   23c44:	464a      	mov	r2, r9
   23c46:	4661      	mov	r1, ip
   23c48:	6011      	str	r1, [r2, #0]
   23c4a:	2284      	movs	r2, #132	; 0x84
   23c4c:	4641      	mov	r1, r8
   23c4e:	0052      	lsls	r2, r2, #1
   23c50:	50a1      	str	r1, [r4, r2]
   23c52:	2e02      	cmp	r6, #2
   23c54:	d1bb      	bne.n	23bce <__register_exitproc+0x3a>
   23c56:	0002      	movs	r2, r0
   23c58:	465c      	mov	r4, fp
   23c5a:	328d      	adds	r2, #141	; 0x8d
   23c5c:	32ff      	adds	r2, #255	; 0xff
   23c5e:	6811      	ldr	r1, [r2, #0]
   23c60:	430c      	orrs	r4, r1
   23c62:	6014      	str	r4, [r2, #0]
   23c64:	e7b3      	b.n	23bce <__register_exitproc+0x3a>
   23c66:	0020      	movs	r0, r4
   23c68:	304d      	adds	r0, #77	; 0x4d
   23c6a:	30ff      	adds	r0, #255	; 0xff
   23c6c:	50e0      	str	r0, [r4, r3]
   23c6e:	e7a7      	b.n	23bc0 <__register_exitproc+0x2c>
   23c70:	6828      	ldr	r0, [r5, #0]
   23c72:	f7ff f80b 	bl	22c8c <__retarget_lock_release_recursive>
   23c76:	2001      	movs	r0, #1
   23c78:	4240      	negs	r0, r0
   23c7a:	e7b1      	b.n	23be0 <__register_exitproc+0x4c>
   23c7c:	200007d8 	.word	0x200007d8
   23c80:	00026be0 	.word	0x00026be0
   23c84:	00000000 	.word	0x00000000

00023c88 <_calloc_r>:
   23c88:	b510      	push	{r4, lr}
   23c8a:	4351      	muls	r1, r2
   23c8c:	f7ff f800 	bl	22c90 <_malloc_r>
   23c90:	1e04      	subs	r4, r0, #0
   23c92:	d01c      	beq.n	23cce <_calloc_r+0x46>
   23c94:	0003      	movs	r3, r0
   23c96:	3b08      	subs	r3, #8
   23c98:	685a      	ldr	r2, [r3, #4]
   23c9a:	2303      	movs	r3, #3
   23c9c:	439a      	bics	r2, r3
   23c9e:	3a04      	subs	r2, #4
   23ca0:	2a24      	cmp	r2, #36	; 0x24
   23ca2:	d816      	bhi.n	23cd2 <_calloc_r+0x4a>
   23ca4:	0003      	movs	r3, r0
   23ca6:	2a13      	cmp	r2, #19
   23ca8:	d90d      	bls.n	23cc6 <_calloc_r+0x3e>
   23caa:	2100      	movs	r1, #0
   23cac:	3308      	adds	r3, #8
   23cae:	6001      	str	r1, [r0, #0]
   23cb0:	6041      	str	r1, [r0, #4]
   23cb2:	2a1b      	cmp	r2, #27
   23cb4:	d907      	bls.n	23cc6 <_calloc_r+0x3e>
   23cb6:	6081      	str	r1, [r0, #8]
   23cb8:	60c1      	str	r1, [r0, #12]
   23cba:	2a24      	cmp	r2, #36	; 0x24
   23cbc:	d10d      	bne.n	23cda <_calloc_r+0x52>
   23cbe:	0003      	movs	r3, r0
   23cc0:	6101      	str	r1, [r0, #16]
   23cc2:	3318      	adds	r3, #24
   23cc4:	6141      	str	r1, [r0, #20]
   23cc6:	2200      	movs	r2, #0
   23cc8:	601a      	str	r2, [r3, #0]
   23cca:	605a      	str	r2, [r3, #4]
   23ccc:	609a      	str	r2, [r3, #8]
   23cce:	0020      	movs	r0, r4
   23cd0:	bd10      	pop	{r4, pc}
   23cd2:	2100      	movs	r1, #0
   23cd4:	f7fc f892 	bl	1fdfc <memset>
   23cd8:	e7f9      	b.n	23cce <_calloc_r+0x46>
   23cda:	0003      	movs	r3, r0
   23cdc:	3310      	adds	r3, #16
   23cde:	e7f2      	b.n	23cc6 <_calloc_r+0x3e>

00023ce0 <_malloc_trim_r>:
   23ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23ce2:	000c      	movs	r4, r1
   23ce4:	0006      	movs	r6, r0
   23ce6:	f7ff faed 	bl	232c4 <__malloc_lock>
   23cea:	4f20      	ldr	r7, [pc, #128]	; (23d6c <_malloc_trim_r+0x8c>)
   23cec:	68bb      	ldr	r3, [r7, #8]
   23cee:	685d      	ldr	r5, [r3, #4]
   23cf0:	2303      	movs	r3, #3
   23cf2:	439d      	bics	r5, r3
   23cf4:	4b1e      	ldr	r3, [pc, #120]	; (23d70 <_malloc_trim_r+0x90>)
   23cf6:	1b2c      	subs	r4, r5, r4
   23cf8:	469c      	mov	ip, r3
   23cfa:	4464      	add	r4, ip
   23cfc:	0b24      	lsrs	r4, r4, #12
   23cfe:	4b1d      	ldr	r3, [pc, #116]	; (23d74 <_malloc_trim_r+0x94>)
   23d00:	3c01      	subs	r4, #1
   23d02:	0324      	lsls	r4, r4, #12
   23d04:	429c      	cmp	r4, r3
   23d06:	dd07      	ble.n	23d18 <_malloc_trim_r+0x38>
   23d08:	2100      	movs	r1, #0
   23d0a:	0030      	movs	r0, r6
   23d0c:	f7ff fe32 	bl	23974 <_sbrk_r>
   23d10:	68bb      	ldr	r3, [r7, #8]
   23d12:	195b      	adds	r3, r3, r5
   23d14:	4298      	cmp	r0, r3
   23d16:	d004      	beq.n	23d22 <_malloc_trim_r+0x42>
   23d18:	0030      	movs	r0, r6
   23d1a:	f7ff fadb 	bl	232d4 <__malloc_unlock>
   23d1e:	2000      	movs	r0, #0
   23d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23d22:	4261      	negs	r1, r4
   23d24:	0030      	movs	r0, r6
   23d26:	f7ff fe25 	bl	23974 <_sbrk_r>
   23d2a:	1c43      	adds	r3, r0, #1
   23d2c:	d00d      	beq.n	23d4a <_malloc_trim_r+0x6a>
   23d2e:	2201      	movs	r2, #1
   23d30:	68bb      	ldr	r3, [r7, #8]
   23d32:	1b2d      	subs	r5, r5, r4
   23d34:	4315      	orrs	r5, r2
   23d36:	605d      	str	r5, [r3, #4]
   23d38:	4b0f      	ldr	r3, [pc, #60]	; (23d78 <_malloc_trim_r+0x98>)
   23d3a:	0030      	movs	r0, r6
   23d3c:	681a      	ldr	r2, [r3, #0]
   23d3e:	1b14      	subs	r4, r2, r4
   23d40:	601c      	str	r4, [r3, #0]
   23d42:	f7ff fac7 	bl	232d4 <__malloc_unlock>
   23d46:	2001      	movs	r0, #1
   23d48:	e7ea      	b.n	23d20 <_malloc_trim_r+0x40>
   23d4a:	2100      	movs	r1, #0
   23d4c:	0030      	movs	r0, r6
   23d4e:	f7ff fe11 	bl	23974 <_sbrk_r>
   23d52:	68ba      	ldr	r2, [r7, #8]
   23d54:	1a83      	subs	r3, r0, r2
   23d56:	2b0f      	cmp	r3, #15
   23d58:	ddde      	ble.n	23d18 <_malloc_trim_r+0x38>
   23d5a:	4908      	ldr	r1, [pc, #32]	; (23d7c <_malloc_trim_r+0x9c>)
   23d5c:	6809      	ldr	r1, [r1, #0]
   23d5e:	1a40      	subs	r0, r0, r1
   23d60:	4905      	ldr	r1, [pc, #20]	; (23d78 <_malloc_trim_r+0x98>)
   23d62:	6008      	str	r0, [r1, #0]
   23d64:	2101      	movs	r1, #1
   23d66:	430b      	orrs	r3, r1
   23d68:	6053      	str	r3, [r2, #4]
   23d6a:	e7d5      	b.n	23d18 <_malloc_trim_r+0x38>
   23d6c:	200007dc 	.word	0x200007dc
   23d70:	00000fef 	.word	0x00000fef
   23d74:	00000fff 	.word	0x00000fff
   23d78:	20000f34 	.word	0x20000f34
   23d7c:	20000be4 	.word	0x20000be4

00023d80 <_free_r>:
   23d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23d82:	0004      	movs	r4, r0
   23d84:	1e0d      	subs	r5, r1, #0
   23d86:	d03c      	beq.n	23e02 <_free_r+0x82>
   23d88:	f7ff fa9c 	bl	232c4 <__malloc_lock>
   23d8c:	0029      	movs	r1, r5
   23d8e:	3908      	subs	r1, #8
   23d90:	6848      	ldr	r0, [r1, #4]
   23d92:	2301      	movs	r3, #1
   23d94:	0005      	movs	r5, r0
   23d96:	2603      	movs	r6, #3
   23d98:	439d      	bics	r5, r3
   23d9a:	194a      	adds	r2, r1, r5
   23d9c:	469c      	mov	ip, r3
   23d9e:	4f61      	ldr	r7, [pc, #388]	; (23f24 <_free_r+0x1a4>)
   23da0:	6853      	ldr	r3, [r2, #4]
   23da2:	43b3      	bics	r3, r6
   23da4:	68be      	ldr	r6, [r7, #8]
   23da6:	42b2      	cmp	r2, r6
   23da8:	d056      	beq.n	23e58 <_free_r+0xd8>
   23daa:	4666      	mov	r6, ip
   23dac:	6053      	str	r3, [r2, #4]
   23dae:	4206      	tst	r6, r0
   23db0:	d10a      	bne.n	23dc8 <_free_r+0x48>
   23db2:	003e      	movs	r6, r7
   23db4:	6808      	ldr	r0, [r1, #0]
   23db6:	3608      	adds	r6, #8
   23db8:	1a09      	subs	r1, r1, r0
   23dba:	182d      	adds	r5, r5, r0
   23dbc:	6888      	ldr	r0, [r1, #8]
   23dbe:	42b0      	cmp	r0, r6
   23dc0:	d065      	beq.n	23e8e <_free_r+0x10e>
   23dc2:	68ce      	ldr	r6, [r1, #12]
   23dc4:	60c6      	str	r6, [r0, #12]
   23dc6:	60b0      	str	r0, [r6, #8]
   23dc8:	2001      	movs	r0, #1
   23dca:	18d6      	adds	r6, r2, r3
   23dcc:	6876      	ldr	r6, [r6, #4]
   23dce:	4206      	tst	r6, r0
   23dd0:	d033      	beq.n	23e3a <_free_r+0xba>
   23dd2:	4b55      	ldr	r3, [pc, #340]	; (23f28 <_free_r+0x1a8>)
   23dd4:	4328      	orrs	r0, r5
   23dd6:	6048      	str	r0, [r1, #4]
   23dd8:	514d      	str	r5, [r1, r5]
   23dda:	429d      	cmp	r5, r3
   23ddc:	d812      	bhi.n	23e04 <_free_r+0x84>
   23dde:	08ed      	lsrs	r5, r5, #3
   23de0:	3bff      	subs	r3, #255	; 0xff
   23de2:	10aa      	asrs	r2, r5, #2
   23de4:	3bff      	subs	r3, #255	; 0xff
   23de6:	4093      	lsls	r3, r2
   23de8:	687a      	ldr	r2, [r7, #4]
   23dea:	00ed      	lsls	r5, r5, #3
   23dec:	4313      	orrs	r3, r2
   23dee:	607b      	str	r3, [r7, #4]
   23df0:	19ef      	adds	r7, r5, r7
   23df2:	68bb      	ldr	r3, [r7, #8]
   23df4:	60cf      	str	r7, [r1, #12]
   23df6:	608b      	str	r3, [r1, #8]
   23df8:	60b9      	str	r1, [r7, #8]
   23dfa:	60d9      	str	r1, [r3, #12]
   23dfc:	0020      	movs	r0, r4
   23dfe:	f7ff fa69 	bl	232d4 <__malloc_unlock>
   23e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23e04:	0a68      	lsrs	r0, r5, #9
   23e06:	2804      	cmp	r0, #4
   23e08:	d850      	bhi.n	23eac <_free_r+0x12c>
   23e0a:	09a8      	lsrs	r0, r5, #6
   23e0c:	0002      	movs	r2, r0
   23e0e:	3039      	adds	r0, #57	; 0x39
   23e10:	3238      	adds	r2, #56	; 0x38
   23e12:	00c0      	lsls	r0, r0, #3
   23e14:	1838      	adds	r0, r7, r0
   23e16:	3808      	subs	r0, #8
   23e18:	6883      	ldr	r3, [r0, #8]
   23e1a:	2603      	movs	r6, #3
   23e1c:	4298      	cmp	r0, r3
   23e1e:	d04c      	beq.n	23eba <_free_r+0x13a>
   23e20:	685a      	ldr	r2, [r3, #4]
   23e22:	43b2      	bics	r2, r6
   23e24:	4295      	cmp	r5, r2
   23e26:	d230      	bcs.n	23e8a <_free_r+0x10a>
   23e28:	689b      	ldr	r3, [r3, #8]
   23e2a:	4298      	cmp	r0, r3
   23e2c:	d1f8      	bne.n	23e20 <_free_r+0xa0>
   23e2e:	68c3      	ldr	r3, [r0, #12]
   23e30:	60cb      	str	r3, [r1, #12]
   23e32:	6088      	str	r0, [r1, #8]
   23e34:	6099      	str	r1, [r3, #8]
   23e36:	60c1      	str	r1, [r0, #12]
   23e38:	e7e0      	b.n	23dfc <_free_r+0x7c>
   23e3a:	18ed      	adds	r5, r5, r3
   23e3c:	4e3b      	ldr	r6, [pc, #236]	; (23f2c <_free_r+0x1ac>)
   23e3e:	6893      	ldr	r3, [r2, #8]
   23e40:	42b3      	cmp	r3, r6
   23e42:	d042      	beq.n	23eca <_free_r+0x14a>
   23e44:	68d2      	ldr	r2, [r2, #12]
   23e46:	4328      	orrs	r0, r5
   23e48:	60da      	str	r2, [r3, #12]
   23e4a:	6093      	str	r3, [r2, #8]
   23e4c:	4b36      	ldr	r3, [pc, #216]	; (23f28 <_free_r+0x1a8>)
   23e4e:	6048      	str	r0, [r1, #4]
   23e50:	514d      	str	r5, [r1, r5]
   23e52:	429d      	cmp	r5, r3
   23e54:	d8d6      	bhi.n	23e04 <_free_r+0x84>
   23e56:	e7c2      	b.n	23dde <_free_r+0x5e>
   23e58:	4662      	mov	r2, ip
   23e5a:	18eb      	adds	r3, r5, r3
   23e5c:	4202      	tst	r2, r0
   23e5e:	d106      	bne.n	23e6e <_free_r+0xee>
   23e60:	680a      	ldr	r2, [r1, #0]
   23e62:	1a89      	subs	r1, r1, r2
   23e64:	6888      	ldr	r0, [r1, #8]
   23e66:	189b      	adds	r3, r3, r2
   23e68:	68ca      	ldr	r2, [r1, #12]
   23e6a:	60c2      	str	r2, [r0, #12]
   23e6c:	6090      	str	r0, [r2, #8]
   23e6e:	2201      	movs	r2, #1
   23e70:	431a      	orrs	r2, r3
   23e72:	604a      	str	r2, [r1, #4]
   23e74:	4a2e      	ldr	r2, [pc, #184]	; (23f30 <_free_r+0x1b0>)
   23e76:	60b9      	str	r1, [r7, #8]
   23e78:	6812      	ldr	r2, [r2, #0]
   23e7a:	4293      	cmp	r3, r2
   23e7c:	d3be      	bcc.n	23dfc <_free_r+0x7c>
   23e7e:	4b2d      	ldr	r3, [pc, #180]	; (23f34 <_free_r+0x1b4>)
   23e80:	0020      	movs	r0, r4
   23e82:	6819      	ldr	r1, [r3, #0]
   23e84:	f7ff ff2c 	bl	23ce0 <_malloc_trim_r>
   23e88:	e7b8      	b.n	23dfc <_free_r+0x7c>
   23e8a:	0018      	movs	r0, r3
   23e8c:	e7cf      	b.n	23e2e <_free_r+0xae>
   23e8e:	4666      	mov	r6, ip
   23e90:	18d0      	adds	r0, r2, r3
   23e92:	6840      	ldr	r0, [r0, #4]
   23e94:	4230      	tst	r0, r6
   23e96:	d13f      	bne.n	23f18 <_free_r+0x198>
   23e98:	6890      	ldr	r0, [r2, #8]
   23e9a:	195d      	adds	r5, r3, r5
   23e9c:	68d3      	ldr	r3, [r2, #12]
   23e9e:	60c3      	str	r3, [r0, #12]
   23ea0:	6098      	str	r0, [r3, #8]
   23ea2:	4663      	mov	r3, ip
   23ea4:	432b      	orrs	r3, r5
   23ea6:	604b      	str	r3, [r1, #4]
   23ea8:	514d      	str	r5, [r1, r5]
   23eaa:	e7a7      	b.n	23dfc <_free_r+0x7c>
   23eac:	2814      	cmp	r0, #20
   23eae:	d814      	bhi.n	23eda <_free_r+0x15a>
   23eb0:	0002      	movs	r2, r0
   23eb2:	305c      	adds	r0, #92	; 0x5c
   23eb4:	325b      	adds	r2, #91	; 0x5b
   23eb6:	00c0      	lsls	r0, r0, #3
   23eb8:	e7ac      	b.n	23e14 <_free_r+0x94>
   23eba:	2301      	movs	r3, #1
   23ebc:	1092      	asrs	r2, r2, #2
   23ebe:	4093      	lsls	r3, r2
   23ec0:	687a      	ldr	r2, [r7, #4]
   23ec2:	4313      	orrs	r3, r2
   23ec4:	607b      	str	r3, [r7, #4]
   23ec6:	0003      	movs	r3, r0
   23ec8:	e7b2      	b.n	23e30 <_free_r+0xb0>
   23eca:	4328      	orrs	r0, r5
   23ecc:	60d9      	str	r1, [r3, #12]
   23ece:	6099      	str	r1, [r3, #8]
   23ed0:	60cb      	str	r3, [r1, #12]
   23ed2:	608b      	str	r3, [r1, #8]
   23ed4:	6048      	str	r0, [r1, #4]
   23ed6:	514d      	str	r5, [r1, r5]
   23ed8:	e790      	b.n	23dfc <_free_r+0x7c>
   23eda:	2854      	cmp	r0, #84	; 0x54
   23edc:	d805      	bhi.n	23eea <_free_r+0x16a>
   23ede:	0b28      	lsrs	r0, r5, #12
   23ee0:	0002      	movs	r2, r0
   23ee2:	306f      	adds	r0, #111	; 0x6f
   23ee4:	326e      	adds	r2, #110	; 0x6e
   23ee6:	00c0      	lsls	r0, r0, #3
   23ee8:	e794      	b.n	23e14 <_free_r+0x94>
   23eea:	22aa      	movs	r2, #170	; 0xaa
   23eec:	0052      	lsls	r2, r2, #1
   23eee:	4290      	cmp	r0, r2
   23ef0:	d805      	bhi.n	23efe <_free_r+0x17e>
   23ef2:	0be8      	lsrs	r0, r5, #15
   23ef4:	0002      	movs	r2, r0
   23ef6:	3078      	adds	r0, #120	; 0x78
   23ef8:	3277      	adds	r2, #119	; 0x77
   23efa:	00c0      	lsls	r0, r0, #3
   23efc:	e78a      	b.n	23e14 <_free_r+0x94>
   23efe:	4a0e      	ldr	r2, [pc, #56]	; (23f38 <_free_r+0x1b8>)
   23f00:	4290      	cmp	r0, r2
   23f02:	d805      	bhi.n	23f10 <_free_r+0x190>
   23f04:	0ca8      	lsrs	r0, r5, #18
   23f06:	0002      	movs	r2, r0
   23f08:	307d      	adds	r0, #125	; 0x7d
   23f0a:	327c      	adds	r2, #124	; 0x7c
   23f0c:	00c0      	lsls	r0, r0, #3
   23f0e:	e781      	b.n	23e14 <_free_r+0x94>
   23f10:	20fe      	movs	r0, #254	; 0xfe
   23f12:	227e      	movs	r2, #126	; 0x7e
   23f14:	0080      	lsls	r0, r0, #2
   23f16:	e77d      	b.n	23e14 <_free_r+0x94>
   23f18:	4663      	mov	r3, ip
   23f1a:	432b      	orrs	r3, r5
   23f1c:	604b      	str	r3, [r1, #4]
   23f1e:	6015      	str	r5, [r2, #0]
   23f20:	e76c      	b.n	23dfc <_free_r+0x7c>
   23f22:	46c0      	nop			; (mov r8, r8)
   23f24:	200007dc 	.word	0x200007dc
   23f28:	000001ff 	.word	0x000001ff
   23f2c:	200007e4 	.word	0x200007e4
   23f30:	20000be8 	.word	0x20000be8
   23f34:	20000f64 	.word	0x20000f64
   23f38:	00000554 	.word	0x00000554

00023f3c <__ascii_mbtowc>:
   23f3c:	b082      	sub	sp, #8
   23f3e:	2900      	cmp	r1, #0
   23f40:	d00a      	beq.n	23f58 <__ascii_mbtowc+0x1c>
   23f42:	2a00      	cmp	r2, #0
   23f44:	d00b      	beq.n	23f5e <__ascii_mbtowc+0x22>
   23f46:	2b00      	cmp	r3, #0
   23f48:	d00b      	beq.n	23f62 <__ascii_mbtowc+0x26>
   23f4a:	7813      	ldrb	r3, [r2, #0]
   23f4c:	600b      	str	r3, [r1, #0]
   23f4e:	7810      	ldrb	r0, [r2, #0]
   23f50:	1e43      	subs	r3, r0, #1
   23f52:	4198      	sbcs	r0, r3
   23f54:	b002      	add	sp, #8
   23f56:	4770      	bx	lr
   23f58:	a901      	add	r1, sp, #4
   23f5a:	2a00      	cmp	r2, #0
   23f5c:	d1f3      	bne.n	23f46 <__ascii_mbtowc+0xa>
   23f5e:	2000      	movs	r0, #0
   23f60:	e7f8      	b.n	23f54 <__ascii_mbtowc+0x18>
   23f62:	2002      	movs	r0, #2
   23f64:	4240      	negs	r0, r0
   23f66:	e7f5      	b.n	23f54 <__ascii_mbtowc+0x18>

00023f68 <memmove>:
   23f68:	b5f0      	push	{r4, r5, r6, r7, lr}
   23f6a:	4288      	cmp	r0, r1
   23f6c:	d90a      	bls.n	23f84 <memmove+0x1c>
   23f6e:	188b      	adds	r3, r1, r2
   23f70:	4298      	cmp	r0, r3
   23f72:	d207      	bcs.n	23f84 <memmove+0x1c>
   23f74:	1e53      	subs	r3, r2, #1
   23f76:	2a00      	cmp	r2, #0
   23f78:	d003      	beq.n	23f82 <memmove+0x1a>
   23f7a:	5cca      	ldrb	r2, [r1, r3]
   23f7c:	54c2      	strb	r2, [r0, r3]
   23f7e:	3b01      	subs	r3, #1
   23f80:	d2fb      	bcs.n	23f7a <memmove+0x12>
   23f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23f84:	0005      	movs	r5, r0
   23f86:	2a0f      	cmp	r2, #15
   23f88:	d808      	bhi.n	23f9c <memmove+0x34>
   23f8a:	2a00      	cmp	r2, #0
   23f8c:	d0f9      	beq.n	23f82 <memmove+0x1a>
   23f8e:	2300      	movs	r3, #0
   23f90:	5ccc      	ldrb	r4, [r1, r3]
   23f92:	54ec      	strb	r4, [r5, r3]
   23f94:	3301      	adds	r3, #1
   23f96:	4293      	cmp	r3, r2
   23f98:	d1fa      	bne.n	23f90 <memmove+0x28>
   23f9a:	e7f2      	b.n	23f82 <memmove+0x1a>
   23f9c:	000b      	movs	r3, r1
   23f9e:	4303      	orrs	r3, r0
   23fa0:	079b      	lsls	r3, r3, #30
   23fa2:	d12d      	bne.n	24000 <memmove+0x98>
   23fa4:	0015      	movs	r5, r2
   23fa6:	000c      	movs	r4, r1
   23fa8:	0003      	movs	r3, r0
   23faa:	3d10      	subs	r5, #16
   23fac:	092f      	lsrs	r7, r5, #4
   23fae:	3701      	adds	r7, #1
   23fb0:	013f      	lsls	r7, r7, #4
   23fb2:	19c7      	adds	r7, r0, r7
   23fb4:	6826      	ldr	r6, [r4, #0]
   23fb6:	601e      	str	r6, [r3, #0]
   23fb8:	6866      	ldr	r6, [r4, #4]
   23fba:	605e      	str	r6, [r3, #4]
   23fbc:	68a6      	ldr	r6, [r4, #8]
   23fbe:	609e      	str	r6, [r3, #8]
   23fc0:	68e6      	ldr	r6, [r4, #12]
   23fc2:	3410      	adds	r4, #16
   23fc4:	60de      	str	r6, [r3, #12]
   23fc6:	3310      	adds	r3, #16
   23fc8:	429f      	cmp	r7, r3
   23fca:	d1f3      	bne.n	23fb4 <memmove+0x4c>
   23fcc:	240f      	movs	r4, #15
   23fce:	43a5      	bics	r5, r4
   23fd0:	3510      	adds	r5, #16
   23fd2:	1949      	adds	r1, r1, r5
   23fd4:	4014      	ands	r4, r2
   23fd6:	1945      	adds	r5, r0, r5
   23fd8:	2c03      	cmp	r4, #3
   23fda:	d913      	bls.n	24004 <memmove+0x9c>
   23fdc:	2300      	movs	r3, #0
   23fde:	1f27      	subs	r7, r4, #4
   23fe0:	08be      	lsrs	r6, r7, #2
   23fe2:	3601      	adds	r6, #1
   23fe4:	00b6      	lsls	r6, r6, #2
   23fe6:	58cc      	ldr	r4, [r1, r3]
   23fe8:	50ec      	str	r4, [r5, r3]
   23fea:	3304      	adds	r3, #4
   23fec:	42b3      	cmp	r3, r6
   23fee:	d1fa      	bne.n	23fe6 <memmove+0x7e>
   23ff0:	2603      	movs	r6, #3
   23ff2:	43b7      	bics	r7, r6
   23ff4:	1d3c      	adds	r4, r7, #4
   23ff6:	1909      	adds	r1, r1, r4
   23ff8:	192d      	adds	r5, r5, r4
   23ffa:	4032      	ands	r2, r6
   23ffc:	d1c7      	bne.n	23f8e <memmove+0x26>
   23ffe:	e7c0      	b.n	23f82 <memmove+0x1a>
   24000:	0005      	movs	r5, r0
   24002:	e7c4      	b.n	23f8e <memmove+0x26>
   24004:	0022      	movs	r2, r4
   24006:	e7c0      	b.n	23f8a <memmove+0x22>

00024008 <_realloc_r>:
   24008:	b5f0      	push	{r4, r5, r6, r7, lr}
   2400a:	464e      	mov	r6, r9
   2400c:	4645      	mov	r5, r8
   2400e:	46de      	mov	lr, fp
   24010:	4657      	mov	r7, sl
   24012:	b5e0      	push	{r5, r6, r7, lr}
   24014:	b085      	sub	sp, #20
   24016:	9001      	str	r0, [sp, #4]
   24018:	000e      	movs	r6, r1
   2401a:	0015      	movs	r5, r2
   2401c:	2900      	cmp	r1, #0
   2401e:	d100      	bne.n	24022 <_realloc_r+0x1a>
   24020:	e09e      	b.n	24160 <_realloc_r+0x158>
   24022:	0037      	movs	r7, r6
   24024:	9801      	ldr	r0, [sp, #4]
   24026:	3f08      	subs	r7, #8
   24028:	f7ff f94c 	bl	232c4 <__malloc_lock>
   2402c:	687a      	ldr	r2, [r7, #4]
   2402e:	2303      	movs	r3, #3
   24030:	0014      	movs	r4, r2
   24032:	439c      	bics	r4, r3
   24034:	002b      	movs	r3, r5
   24036:	330b      	adds	r3, #11
   24038:	46b9      	mov	r9, r7
   2403a:	2b16      	cmp	r3, #22
   2403c:	d847      	bhi.n	240ce <_realloc_r+0xc6>
   2403e:	2110      	movs	r1, #16
   24040:	2310      	movs	r3, #16
   24042:	4688      	mov	r8, r1
   24044:	4545      	cmp	r5, r8
   24046:	d846      	bhi.n	240d6 <_realloc_r+0xce>
   24048:	429c      	cmp	r4, r3
   2404a:	da49      	bge.n	240e0 <_realloc_r+0xd8>
   2404c:	49cc      	ldr	r1, [pc, #816]	; (24380 <_realloc_r+0x378>)
   2404e:	1938      	adds	r0, r7, r4
   24050:	468b      	mov	fp, r1
   24052:	6889      	ldr	r1, [r1, #8]
   24054:	9002      	str	r0, [sp, #8]
   24056:	4288      	cmp	r0, r1
   24058:	d100      	bne.n	2405c <_realloc_r+0x54>
   2405a:	e0c2      	b.n	241e2 <_realloc_r+0x1da>
   2405c:	2101      	movs	r1, #1
   2405e:	468a      	mov	sl, r1
   24060:	6840      	ldr	r0, [r0, #4]
   24062:	0001      	movs	r1, r0
   24064:	9003      	str	r0, [sp, #12]
   24066:	4650      	mov	r0, sl
   24068:	4381      	bics	r1, r0
   2406a:	468c      	mov	ip, r1
   2406c:	9902      	ldr	r1, [sp, #8]
   2406e:	468b      	mov	fp, r1
   24070:	44dc      	add	ip, fp
   24072:	4661      	mov	r1, ip
   24074:	6849      	ldr	r1, [r1, #4]
   24076:	4201      	tst	r1, r0
   24078:	d04d      	beq.n	24116 <_realloc_r+0x10e>
   2407a:	4210      	tst	r0, r2
   2407c:	d100      	bne.n	24080 <_realloc_r+0x78>
   2407e:	e0a2      	b.n	241c6 <_realloc_r+0x1be>
   24080:	0029      	movs	r1, r5
   24082:	9801      	ldr	r0, [sp, #4]
   24084:	f7fe fe04 	bl	22c90 <_malloc_r>
   24088:	1e05      	subs	r5, r0, #0
   2408a:	d039      	beq.n	24100 <_realloc_r+0xf8>
   2408c:	2301      	movs	r3, #1
   2408e:	0002      	movs	r2, r0
   24090:	6879      	ldr	r1, [r7, #4]
   24092:	3a08      	subs	r2, #8
   24094:	4399      	bics	r1, r3
   24096:	187f      	adds	r7, r7, r1
   24098:	42ba      	cmp	r2, r7
   2409a:	d100      	bne.n	2409e <_realloc_r+0x96>
   2409c:	e12e      	b.n	242fc <_realloc_r+0x2f4>
   2409e:	1f22      	subs	r2, r4, #4
   240a0:	2a24      	cmp	r2, #36	; 0x24
   240a2:	d900      	bls.n	240a6 <_realloc_r+0x9e>
   240a4:	e114      	b.n	242d0 <_realloc_r+0x2c8>
   240a6:	2a13      	cmp	r2, #19
   240a8:	d900      	bls.n	240ac <_realloc_r+0xa4>
   240aa:	e0e8      	b.n	2427e <_realloc_r+0x276>
   240ac:	0003      	movs	r3, r0
   240ae:	0032      	movs	r2, r6
   240b0:	6811      	ldr	r1, [r2, #0]
   240b2:	6019      	str	r1, [r3, #0]
   240b4:	6851      	ldr	r1, [r2, #4]
   240b6:	6059      	str	r1, [r3, #4]
   240b8:	6892      	ldr	r2, [r2, #8]
   240ba:	609a      	str	r2, [r3, #8]
   240bc:	9c01      	ldr	r4, [sp, #4]
   240be:	0031      	movs	r1, r6
   240c0:	0020      	movs	r0, r4
   240c2:	f7ff fe5d 	bl	23d80 <_free_r>
   240c6:	0020      	movs	r0, r4
   240c8:	f7ff f904 	bl	232d4 <__malloc_unlock>
   240cc:	e01b      	b.n	24106 <_realloc_r+0xfe>
   240ce:	2107      	movs	r1, #7
   240d0:	438b      	bics	r3, r1
   240d2:	4698      	mov	r8, r3
   240d4:	d5b6      	bpl.n	24044 <_realloc_r+0x3c>
   240d6:	230c      	movs	r3, #12
   240d8:	9a01      	ldr	r2, [sp, #4]
   240da:	2500      	movs	r5, #0
   240dc:	6013      	str	r3, [r2, #0]
   240de:	e012      	b.n	24106 <_realloc_r+0xfe>
   240e0:	0035      	movs	r5, r6
   240e2:	4643      	mov	r3, r8
   240e4:	1ae3      	subs	r3, r4, r3
   240e6:	2b0f      	cmp	r3, #15
   240e8:	d825      	bhi.n	24136 <_realloc_r+0x12e>
   240ea:	464b      	mov	r3, r9
   240ec:	2201      	movs	r2, #1
   240ee:	4649      	mov	r1, r9
   240f0:	685b      	ldr	r3, [r3, #4]
   240f2:	4013      	ands	r3, r2
   240f4:	4323      	orrs	r3, r4
   240f6:	604b      	str	r3, [r1, #4]
   240f8:	444c      	add	r4, r9
   240fa:	6863      	ldr	r3, [r4, #4]
   240fc:	431a      	orrs	r2, r3
   240fe:	6062      	str	r2, [r4, #4]
   24100:	9801      	ldr	r0, [sp, #4]
   24102:	f7ff f8e7 	bl	232d4 <__malloc_unlock>
   24106:	0028      	movs	r0, r5
   24108:	b005      	add	sp, #20
   2410a:	bc3c      	pop	{r2, r3, r4, r5}
   2410c:	4690      	mov	r8, r2
   2410e:	4699      	mov	r9, r3
   24110:	46a2      	mov	sl, r4
   24112:	46ab      	mov	fp, r5
   24114:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24116:	2103      	movs	r1, #3
   24118:	9803      	ldr	r0, [sp, #12]
   2411a:	468c      	mov	ip, r1
   2411c:	4388      	bics	r0, r1
   2411e:	1821      	adds	r1, r4, r0
   24120:	468b      	mov	fp, r1
   24122:	4299      	cmp	r1, r3
   24124:	db21      	blt.n	2416a <_realloc_r+0x162>
   24126:	9a02      	ldr	r2, [sp, #8]
   24128:	0035      	movs	r5, r6
   2412a:	68d3      	ldr	r3, [r2, #12]
   2412c:	6892      	ldr	r2, [r2, #8]
   2412e:	465c      	mov	r4, fp
   24130:	60d3      	str	r3, [r2, #12]
   24132:	609a      	str	r2, [r3, #8]
   24134:	e7d5      	b.n	240e2 <_realloc_r+0xda>
   24136:	464a      	mov	r2, r9
   24138:	2001      	movs	r0, #1
   2413a:	4646      	mov	r6, r8
   2413c:	6852      	ldr	r2, [r2, #4]
   2413e:	4649      	mov	r1, r9
   24140:	4002      	ands	r2, r0
   24142:	4332      	orrs	r2, r6
   24144:	464e      	mov	r6, r9
   24146:	4441      	add	r1, r8
   24148:	4303      	orrs	r3, r0
   2414a:	6072      	str	r2, [r6, #4]
   2414c:	444c      	add	r4, r9
   2414e:	604b      	str	r3, [r1, #4]
   24150:	6863      	ldr	r3, [r4, #4]
   24152:	3108      	adds	r1, #8
   24154:	4318      	orrs	r0, r3
   24156:	6060      	str	r0, [r4, #4]
   24158:	9801      	ldr	r0, [sp, #4]
   2415a:	f7ff fe11 	bl	23d80 <_free_r>
   2415e:	e7cf      	b.n	24100 <_realloc_r+0xf8>
   24160:	0011      	movs	r1, r2
   24162:	f7fe fd95 	bl	22c90 <_malloc_r>
   24166:	0005      	movs	r5, r0
   24168:	e7cd      	b.n	24106 <_realloc_r+0xfe>
   2416a:	4651      	mov	r1, sl
   2416c:	4211      	tst	r1, r2
   2416e:	d000      	beq.n	24172 <_realloc_r+0x16a>
   24170:	e786      	b.n	24080 <_realloc_r+0x78>
   24172:	4661      	mov	r1, ip
   24174:	683a      	ldr	r2, [r7, #0]
   24176:	1aba      	subs	r2, r7, r2
   24178:	4692      	mov	sl, r2
   2417a:	6852      	ldr	r2, [r2, #4]
   2417c:	438a      	bics	r2, r1
   2417e:	1880      	adds	r0, r0, r2
   24180:	4683      	mov	fp, r0
   24182:	44a3      	add	fp, r4
   24184:	459b      	cmp	fp, r3
   24186:	db26      	blt.n	241d6 <_realloc_r+0x1ce>
   24188:	9a02      	ldr	r2, [sp, #8]
   2418a:	68d3      	ldr	r3, [r2, #12]
   2418c:	6892      	ldr	r2, [r2, #8]
   2418e:	60d3      	str	r3, [r2, #12]
   24190:	609a      	str	r2, [r3, #8]
   24192:	4653      	mov	r3, sl
   24194:	4652      	mov	r2, sl
   24196:	4655      	mov	r5, sl
   24198:	6892      	ldr	r2, [r2, #8]
   2419a:	68db      	ldr	r3, [r3, #12]
   2419c:	3508      	adds	r5, #8
   2419e:	60d3      	str	r3, [r2, #12]
   241a0:	609a      	str	r2, [r3, #8]
   241a2:	1f22      	subs	r2, r4, #4
   241a4:	2a24      	cmp	r2, #36	; 0x24
   241a6:	d900      	bls.n	241aa <_realloc_r+0x1a2>
   241a8:	e096      	b.n	242d8 <_realloc_r+0x2d0>
   241aa:	2a13      	cmp	r2, #19
   241ac:	d972      	bls.n	24294 <_realloc_r+0x28c>
   241ae:	4653      	mov	r3, sl
   241b0:	6831      	ldr	r1, [r6, #0]
   241b2:	6099      	str	r1, [r3, #8]
   241b4:	6871      	ldr	r1, [r6, #4]
   241b6:	60d9      	str	r1, [r3, #12]
   241b8:	2a1b      	cmp	r2, #27
   241ba:	d900      	bls.n	241be <_realloc_r+0x1b6>
   241bc:	e0a4      	b.n	24308 <_realloc_r+0x300>
   241be:	0032      	movs	r2, r6
   241c0:	3310      	adds	r3, #16
   241c2:	3208      	adds	r2, #8
   241c4:	e068      	b.n	24298 <_realloc_r+0x290>
   241c6:	683a      	ldr	r2, [r7, #0]
   241c8:	1aba      	subs	r2, r7, r2
   241ca:	4692      	mov	sl, r2
   241cc:	4651      	mov	r1, sl
   241ce:	2203      	movs	r2, #3
   241d0:	6849      	ldr	r1, [r1, #4]
   241d2:	4391      	bics	r1, r2
   241d4:	000a      	movs	r2, r1
   241d6:	4693      	mov	fp, r2
   241d8:	44a3      	add	fp, r4
   241da:	459b      	cmp	fp, r3
   241dc:	da00      	bge.n	241e0 <_realloc_r+0x1d8>
   241de:	e74f      	b.n	24080 <_realloc_r+0x78>
   241e0:	e7d7      	b.n	24192 <_realloc_r+0x18a>
   241e2:	2003      	movs	r0, #3
   241e4:	9902      	ldr	r1, [sp, #8]
   241e6:	4684      	mov	ip, r0
   241e8:	6849      	ldr	r1, [r1, #4]
   241ea:	4381      	bics	r1, r0
   241ec:	4640      	mov	r0, r8
   241ee:	1909      	adds	r1, r1, r4
   241f0:	3010      	adds	r0, #16
   241f2:	9002      	str	r0, [sp, #8]
   241f4:	4281      	cmp	r1, r0
   241f6:	da58      	bge.n	242aa <_realloc_r+0x2a2>
   241f8:	07d2      	lsls	r2, r2, #31
   241fa:	d500      	bpl.n	241fe <_realloc_r+0x1f6>
   241fc:	e740      	b.n	24080 <_realloc_r+0x78>
   241fe:	4660      	mov	r0, ip
   24200:	683a      	ldr	r2, [r7, #0]
   24202:	1aba      	subs	r2, r7, r2
   24204:	4692      	mov	sl, r2
   24206:	6852      	ldr	r2, [r2, #4]
   24208:	4382      	bics	r2, r0
   2420a:	9802      	ldr	r0, [sp, #8]
   2420c:	1851      	adds	r1, r2, r1
   2420e:	9103      	str	r1, [sp, #12]
   24210:	4288      	cmp	r0, r1
   24212:	dce0      	bgt.n	241d6 <_realloc_r+0x1ce>
   24214:	4653      	mov	r3, sl
   24216:	4652      	mov	r2, sl
   24218:	4655      	mov	r5, sl
   2421a:	6892      	ldr	r2, [r2, #8]
   2421c:	68db      	ldr	r3, [r3, #12]
   2421e:	3508      	adds	r5, #8
   24220:	60d3      	str	r3, [r2, #12]
   24222:	609a      	str	r2, [r3, #8]
   24224:	1f22      	subs	r2, r4, #4
   24226:	2a24      	cmp	r2, #36	; 0x24
   24228:	d900      	bls.n	2422c <_realloc_r+0x224>
   2422a:	e08e      	b.n	2434a <_realloc_r+0x342>
   2422c:	2a13      	cmp	r2, #19
   2422e:	d800      	bhi.n	24232 <_realloc_r+0x22a>
   24230:	e088      	b.n	24344 <_realloc_r+0x33c>
   24232:	4653      	mov	r3, sl
   24234:	6831      	ldr	r1, [r6, #0]
   24236:	6099      	str	r1, [r3, #8]
   24238:	6871      	ldr	r1, [r6, #4]
   2423a:	60d9      	str	r1, [r3, #12]
   2423c:	2a1b      	cmp	r2, #27
   2423e:	d900      	bls.n	24242 <_realloc_r+0x23a>
   24240:	e088      	b.n	24354 <_realloc_r+0x34c>
   24242:	0032      	movs	r2, r6
   24244:	3310      	adds	r3, #16
   24246:	3208      	adds	r2, #8
   24248:	6811      	ldr	r1, [r2, #0]
   2424a:	6019      	str	r1, [r3, #0]
   2424c:	6851      	ldr	r1, [r2, #4]
   2424e:	6059      	str	r1, [r3, #4]
   24250:	6892      	ldr	r2, [r2, #8]
   24252:	609a      	str	r2, [r3, #8]
   24254:	4651      	mov	r1, sl
   24256:	465b      	mov	r3, fp
   24258:	4642      	mov	r2, r8
   2425a:	4441      	add	r1, r8
   2425c:	6099      	str	r1, [r3, #8]
   2425e:	9b03      	ldr	r3, [sp, #12]
   24260:	9801      	ldr	r0, [sp, #4]
   24262:	1a9a      	subs	r2, r3, r2
   24264:	2301      	movs	r3, #1
   24266:	431a      	orrs	r2, r3
   24268:	604a      	str	r2, [r1, #4]
   2426a:	4652      	mov	r2, sl
   2426c:	6852      	ldr	r2, [r2, #4]
   2426e:	4013      	ands	r3, r2
   24270:	4642      	mov	r2, r8
   24272:	4313      	orrs	r3, r2
   24274:	4652      	mov	r2, sl
   24276:	6053      	str	r3, [r2, #4]
   24278:	f7ff f82c 	bl	232d4 <__malloc_unlock>
   2427c:	e743      	b.n	24106 <_realloc_r+0xfe>
   2427e:	6833      	ldr	r3, [r6, #0]
   24280:	6003      	str	r3, [r0, #0]
   24282:	6873      	ldr	r3, [r6, #4]
   24284:	6043      	str	r3, [r0, #4]
   24286:	2a1b      	cmp	r2, #27
   24288:	d82d      	bhi.n	242e6 <_realloc_r+0x2de>
   2428a:	0003      	movs	r3, r0
   2428c:	0032      	movs	r2, r6
   2428e:	3308      	adds	r3, #8
   24290:	3208      	adds	r2, #8
   24292:	e70d      	b.n	240b0 <_realloc_r+0xa8>
   24294:	002b      	movs	r3, r5
   24296:	0032      	movs	r2, r6
   24298:	6811      	ldr	r1, [r2, #0]
   2429a:	465c      	mov	r4, fp
   2429c:	6019      	str	r1, [r3, #0]
   2429e:	6851      	ldr	r1, [r2, #4]
   242a0:	46d1      	mov	r9, sl
   242a2:	6059      	str	r1, [r3, #4]
   242a4:	6892      	ldr	r2, [r2, #8]
   242a6:	609a      	str	r2, [r3, #8]
   242a8:	e71b      	b.n	240e2 <_realloc_r+0xda>
   242aa:	4643      	mov	r3, r8
   242ac:	18fa      	adds	r2, r7, r3
   242ae:	465b      	mov	r3, fp
   242b0:	609a      	str	r2, [r3, #8]
   242b2:	4643      	mov	r3, r8
   242b4:	1ac9      	subs	r1, r1, r3
   242b6:	2301      	movs	r3, #1
   242b8:	4319      	orrs	r1, r3
   242ba:	6051      	str	r1, [r2, #4]
   242bc:	687a      	ldr	r2, [r7, #4]
   242be:	9801      	ldr	r0, [sp, #4]
   242c0:	4013      	ands	r3, r2
   242c2:	4642      	mov	r2, r8
   242c4:	4313      	orrs	r3, r2
   242c6:	607b      	str	r3, [r7, #4]
   242c8:	f7ff f804 	bl	232d4 <__malloc_unlock>
   242cc:	0035      	movs	r5, r6
   242ce:	e71a      	b.n	24106 <_realloc_r+0xfe>
   242d0:	0031      	movs	r1, r6
   242d2:	f7ff fe49 	bl	23f68 <memmove>
   242d6:	e6f1      	b.n	240bc <_realloc_r+0xb4>
   242d8:	0031      	movs	r1, r6
   242da:	0028      	movs	r0, r5
   242dc:	f7ff fe44 	bl	23f68 <memmove>
   242e0:	465c      	mov	r4, fp
   242e2:	46d1      	mov	r9, sl
   242e4:	e6fd      	b.n	240e2 <_realloc_r+0xda>
   242e6:	68b3      	ldr	r3, [r6, #8]
   242e8:	6083      	str	r3, [r0, #8]
   242ea:	68f3      	ldr	r3, [r6, #12]
   242ec:	60c3      	str	r3, [r0, #12]
   242ee:	2a24      	cmp	r2, #36	; 0x24
   242f0:	d015      	beq.n	2431e <_realloc_r+0x316>
   242f2:	0003      	movs	r3, r0
   242f4:	0032      	movs	r2, r6
   242f6:	3310      	adds	r3, #16
   242f8:	3210      	adds	r2, #16
   242fa:	e6d9      	b.n	240b0 <_realloc_r+0xa8>
   242fc:	6853      	ldr	r3, [r2, #4]
   242fe:	2203      	movs	r2, #3
   24300:	4393      	bics	r3, r2
   24302:	18e4      	adds	r4, r4, r3
   24304:	0035      	movs	r5, r6
   24306:	e6ec      	b.n	240e2 <_realloc_r+0xda>
   24308:	4653      	mov	r3, sl
   2430a:	68b1      	ldr	r1, [r6, #8]
   2430c:	6119      	str	r1, [r3, #16]
   2430e:	68f1      	ldr	r1, [r6, #12]
   24310:	6159      	str	r1, [r3, #20]
   24312:	2a24      	cmp	r2, #36	; 0x24
   24314:	d00c      	beq.n	24330 <_realloc_r+0x328>
   24316:	0032      	movs	r2, r6
   24318:	3318      	adds	r3, #24
   2431a:	3210      	adds	r2, #16
   2431c:	e7bc      	b.n	24298 <_realloc_r+0x290>
   2431e:	6933      	ldr	r3, [r6, #16]
   24320:	0032      	movs	r2, r6
   24322:	6103      	str	r3, [r0, #16]
   24324:	0003      	movs	r3, r0
   24326:	6971      	ldr	r1, [r6, #20]
   24328:	3318      	adds	r3, #24
   2432a:	3218      	adds	r2, #24
   2432c:	6141      	str	r1, [r0, #20]
   2432e:	e6bf      	b.n	240b0 <_realloc_r+0xa8>
   24330:	4653      	mov	r3, sl
   24332:	6932      	ldr	r2, [r6, #16]
   24334:	4651      	mov	r1, sl
   24336:	619a      	str	r2, [r3, #24]
   24338:	0032      	movs	r2, r6
   2433a:	6970      	ldr	r0, [r6, #20]
   2433c:	3320      	adds	r3, #32
   2433e:	3218      	adds	r2, #24
   24340:	61c8      	str	r0, [r1, #28]
   24342:	e7a9      	b.n	24298 <_realloc_r+0x290>
   24344:	002b      	movs	r3, r5
   24346:	0032      	movs	r2, r6
   24348:	e77e      	b.n	24248 <_realloc_r+0x240>
   2434a:	0031      	movs	r1, r6
   2434c:	0028      	movs	r0, r5
   2434e:	f7ff fe0b 	bl	23f68 <memmove>
   24352:	e77f      	b.n	24254 <_realloc_r+0x24c>
   24354:	4653      	mov	r3, sl
   24356:	68b1      	ldr	r1, [r6, #8]
   24358:	6119      	str	r1, [r3, #16]
   2435a:	68f1      	ldr	r1, [r6, #12]
   2435c:	6159      	str	r1, [r3, #20]
   2435e:	2a24      	cmp	r2, #36	; 0x24
   24360:	d003      	beq.n	2436a <_realloc_r+0x362>
   24362:	0032      	movs	r2, r6
   24364:	3318      	adds	r3, #24
   24366:	3210      	adds	r2, #16
   24368:	e76e      	b.n	24248 <_realloc_r+0x240>
   2436a:	4653      	mov	r3, sl
   2436c:	6932      	ldr	r2, [r6, #16]
   2436e:	4651      	mov	r1, sl
   24370:	619a      	str	r2, [r3, #24]
   24372:	0032      	movs	r2, r6
   24374:	6970      	ldr	r0, [r6, #20]
   24376:	3320      	adds	r3, #32
   24378:	3218      	adds	r2, #24
   2437a:	61c8      	str	r0, [r1, #28]
   2437c:	e764      	b.n	24248 <_realloc_r+0x240>
   2437e:	46c0      	nop			; (mov r8, r8)
   24380:	200007dc 	.word	0x200007dc

00024384 <__ascii_wctomb>:
   24384:	2900      	cmp	r1, #0
   24386:	d004      	beq.n	24392 <__ascii_wctomb+0xe>
   24388:	2aff      	cmp	r2, #255	; 0xff
   2438a:	d804      	bhi.n	24396 <__ascii_wctomb+0x12>
   2438c:	2001      	movs	r0, #1
   2438e:	700a      	strb	r2, [r1, #0]
   24390:	4770      	bx	lr
   24392:	2000      	movs	r0, #0
   24394:	e7fc      	b.n	24390 <__ascii_wctomb+0xc>
   24396:	238a      	movs	r3, #138	; 0x8a
   24398:	6003      	str	r3, [r0, #0]
   2439a:	2001      	movs	r0, #1
   2439c:	4240      	negs	r0, r0
   2439e:	e7f7      	b.n	24390 <__ascii_wctomb+0xc>

000243a0 <__aeabi_uldivmod>:
   243a0:	2b00      	cmp	r3, #0
   243a2:	d111      	bne.n	243c8 <__aeabi_uldivmod+0x28>
   243a4:	2a00      	cmp	r2, #0
   243a6:	d10f      	bne.n	243c8 <__aeabi_uldivmod+0x28>
   243a8:	2900      	cmp	r1, #0
   243aa:	d100      	bne.n	243ae <__aeabi_uldivmod+0xe>
   243ac:	2800      	cmp	r0, #0
   243ae:	d002      	beq.n	243b6 <__aeabi_uldivmod+0x16>
   243b0:	2100      	movs	r1, #0
   243b2:	43c9      	mvns	r1, r1
   243b4:	1c08      	adds	r0, r1, #0
   243b6:	b407      	push	{r0, r1, r2}
   243b8:	4802      	ldr	r0, [pc, #8]	; (243c4 <__aeabi_uldivmod+0x24>)
   243ba:	a102      	add	r1, pc, #8	; (adr r1, 243c4 <__aeabi_uldivmod+0x24>)
   243bc:	1840      	adds	r0, r0, r1
   243be:	9002      	str	r0, [sp, #8]
   243c0:	bd03      	pop	{r0, r1, pc}
   243c2:	46c0      	nop			; (mov r8, r8)
   243c4:	ffff8c41 	.word	0xffff8c41
   243c8:	b403      	push	{r0, r1}
   243ca:	4668      	mov	r0, sp
   243cc:	b501      	push	{r0, lr}
   243ce:	9802      	ldr	r0, [sp, #8]
   243d0:	f000 f806 	bl	243e0 <__udivmoddi4>
   243d4:	9b01      	ldr	r3, [sp, #4]
   243d6:	469e      	mov	lr, r3
   243d8:	b002      	add	sp, #8
   243da:	bc0c      	pop	{r2, r3}
   243dc:	4770      	bx	lr
   243de:	46c0      	nop			; (mov r8, r8)

000243e0 <__udivmoddi4>:
   243e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   243e2:	4657      	mov	r7, sl
   243e4:	464e      	mov	r6, r9
   243e6:	4645      	mov	r5, r8
   243e8:	46de      	mov	lr, fp
   243ea:	b5e0      	push	{r5, r6, r7, lr}
   243ec:	0004      	movs	r4, r0
   243ee:	b083      	sub	sp, #12
   243f0:	000d      	movs	r5, r1
   243f2:	4692      	mov	sl, r2
   243f4:	4699      	mov	r9, r3
   243f6:	428b      	cmp	r3, r1
   243f8:	d82f      	bhi.n	2445a <__udivmoddi4+0x7a>
   243fa:	d02c      	beq.n	24456 <__udivmoddi4+0x76>
   243fc:	4649      	mov	r1, r9
   243fe:	4650      	mov	r0, sl
   24400:	f000 f8ae 	bl	24560 <__clzdi2>
   24404:	0029      	movs	r1, r5
   24406:	0006      	movs	r6, r0
   24408:	0020      	movs	r0, r4
   2440a:	f000 f8a9 	bl	24560 <__clzdi2>
   2440e:	1a33      	subs	r3, r6, r0
   24410:	4698      	mov	r8, r3
   24412:	3b20      	subs	r3, #32
   24414:	469b      	mov	fp, r3
   24416:	d500      	bpl.n	2441a <__udivmoddi4+0x3a>
   24418:	e074      	b.n	24504 <__udivmoddi4+0x124>
   2441a:	4653      	mov	r3, sl
   2441c:	465a      	mov	r2, fp
   2441e:	4093      	lsls	r3, r2
   24420:	001f      	movs	r7, r3
   24422:	4653      	mov	r3, sl
   24424:	4642      	mov	r2, r8
   24426:	4093      	lsls	r3, r2
   24428:	001e      	movs	r6, r3
   2442a:	42af      	cmp	r7, r5
   2442c:	d829      	bhi.n	24482 <__udivmoddi4+0xa2>
   2442e:	d026      	beq.n	2447e <__udivmoddi4+0x9e>
   24430:	465b      	mov	r3, fp
   24432:	1ba4      	subs	r4, r4, r6
   24434:	41bd      	sbcs	r5, r7
   24436:	2b00      	cmp	r3, #0
   24438:	da00      	bge.n	2443c <__udivmoddi4+0x5c>
   2443a:	e079      	b.n	24530 <__udivmoddi4+0x150>
   2443c:	2200      	movs	r2, #0
   2443e:	2300      	movs	r3, #0
   24440:	9200      	str	r2, [sp, #0]
   24442:	9301      	str	r3, [sp, #4]
   24444:	2301      	movs	r3, #1
   24446:	465a      	mov	r2, fp
   24448:	4093      	lsls	r3, r2
   2444a:	9301      	str	r3, [sp, #4]
   2444c:	2301      	movs	r3, #1
   2444e:	4642      	mov	r2, r8
   24450:	4093      	lsls	r3, r2
   24452:	9300      	str	r3, [sp, #0]
   24454:	e019      	b.n	2448a <__udivmoddi4+0xaa>
   24456:	4282      	cmp	r2, r0
   24458:	d9d0      	bls.n	243fc <__udivmoddi4+0x1c>
   2445a:	2200      	movs	r2, #0
   2445c:	2300      	movs	r3, #0
   2445e:	9200      	str	r2, [sp, #0]
   24460:	9301      	str	r3, [sp, #4]
   24462:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   24464:	2b00      	cmp	r3, #0
   24466:	d001      	beq.n	2446c <__udivmoddi4+0x8c>
   24468:	601c      	str	r4, [r3, #0]
   2446a:	605d      	str	r5, [r3, #4]
   2446c:	9800      	ldr	r0, [sp, #0]
   2446e:	9901      	ldr	r1, [sp, #4]
   24470:	b003      	add	sp, #12
   24472:	bc3c      	pop	{r2, r3, r4, r5}
   24474:	4690      	mov	r8, r2
   24476:	4699      	mov	r9, r3
   24478:	46a2      	mov	sl, r4
   2447a:	46ab      	mov	fp, r5
   2447c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2447e:	42a3      	cmp	r3, r4
   24480:	d9d6      	bls.n	24430 <__udivmoddi4+0x50>
   24482:	2200      	movs	r2, #0
   24484:	2300      	movs	r3, #0
   24486:	9200      	str	r2, [sp, #0]
   24488:	9301      	str	r3, [sp, #4]
   2448a:	4643      	mov	r3, r8
   2448c:	2b00      	cmp	r3, #0
   2448e:	d0e8      	beq.n	24462 <__udivmoddi4+0x82>
   24490:	07fb      	lsls	r3, r7, #31
   24492:	0872      	lsrs	r2, r6, #1
   24494:	431a      	orrs	r2, r3
   24496:	4646      	mov	r6, r8
   24498:	087b      	lsrs	r3, r7, #1
   2449a:	e00e      	b.n	244ba <__udivmoddi4+0xda>
   2449c:	42ab      	cmp	r3, r5
   2449e:	d101      	bne.n	244a4 <__udivmoddi4+0xc4>
   244a0:	42a2      	cmp	r2, r4
   244a2:	d80c      	bhi.n	244be <__udivmoddi4+0xde>
   244a4:	1aa4      	subs	r4, r4, r2
   244a6:	419d      	sbcs	r5, r3
   244a8:	2001      	movs	r0, #1
   244aa:	1924      	adds	r4, r4, r4
   244ac:	416d      	adcs	r5, r5
   244ae:	2100      	movs	r1, #0
   244b0:	3e01      	subs	r6, #1
   244b2:	1824      	adds	r4, r4, r0
   244b4:	414d      	adcs	r5, r1
   244b6:	2e00      	cmp	r6, #0
   244b8:	d006      	beq.n	244c8 <__udivmoddi4+0xe8>
   244ba:	42ab      	cmp	r3, r5
   244bc:	d9ee      	bls.n	2449c <__udivmoddi4+0xbc>
   244be:	3e01      	subs	r6, #1
   244c0:	1924      	adds	r4, r4, r4
   244c2:	416d      	adcs	r5, r5
   244c4:	2e00      	cmp	r6, #0
   244c6:	d1f8      	bne.n	244ba <__udivmoddi4+0xda>
   244c8:	465b      	mov	r3, fp
   244ca:	9800      	ldr	r0, [sp, #0]
   244cc:	9901      	ldr	r1, [sp, #4]
   244ce:	1900      	adds	r0, r0, r4
   244d0:	4169      	adcs	r1, r5
   244d2:	2b00      	cmp	r3, #0
   244d4:	db22      	blt.n	2451c <__udivmoddi4+0x13c>
   244d6:	002b      	movs	r3, r5
   244d8:	465a      	mov	r2, fp
   244da:	40d3      	lsrs	r3, r2
   244dc:	002a      	movs	r2, r5
   244de:	4644      	mov	r4, r8
   244e0:	40e2      	lsrs	r2, r4
   244e2:	001c      	movs	r4, r3
   244e4:	465b      	mov	r3, fp
   244e6:	0015      	movs	r5, r2
   244e8:	2b00      	cmp	r3, #0
   244ea:	db2c      	blt.n	24546 <__udivmoddi4+0x166>
   244ec:	0026      	movs	r6, r4
   244ee:	409e      	lsls	r6, r3
   244f0:	0033      	movs	r3, r6
   244f2:	0026      	movs	r6, r4
   244f4:	4647      	mov	r7, r8
   244f6:	40be      	lsls	r6, r7
   244f8:	0032      	movs	r2, r6
   244fa:	1a80      	subs	r0, r0, r2
   244fc:	4199      	sbcs	r1, r3
   244fe:	9000      	str	r0, [sp, #0]
   24500:	9101      	str	r1, [sp, #4]
   24502:	e7ae      	b.n	24462 <__udivmoddi4+0x82>
   24504:	4642      	mov	r2, r8
   24506:	2320      	movs	r3, #32
   24508:	1a9b      	subs	r3, r3, r2
   2450a:	4652      	mov	r2, sl
   2450c:	40da      	lsrs	r2, r3
   2450e:	4641      	mov	r1, r8
   24510:	0013      	movs	r3, r2
   24512:	464a      	mov	r2, r9
   24514:	408a      	lsls	r2, r1
   24516:	0017      	movs	r7, r2
   24518:	431f      	orrs	r7, r3
   2451a:	e782      	b.n	24422 <__udivmoddi4+0x42>
   2451c:	4642      	mov	r2, r8
   2451e:	2320      	movs	r3, #32
   24520:	1a9b      	subs	r3, r3, r2
   24522:	002a      	movs	r2, r5
   24524:	4646      	mov	r6, r8
   24526:	409a      	lsls	r2, r3
   24528:	0023      	movs	r3, r4
   2452a:	40f3      	lsrs	r3, r6
   2452c:	4313      	orrs	r3, r2
   2452e:	e7d5      	b.n	244dc <__udivmoddi4+0xfc>
   24530:	4642      	mov	r2, r8
   24532:	2320      	movs	r3, #32
   24534:	2100      	movs	r1, #0
   24536:	1a9b      	subs	r3, r3, r2
   24538:	2200      	movs	r2, #0
   2453a:	9100      	str	r1, [sp, #0]
   2453c:	9201      	str	r2, [sp, #4]
   2453e:	2201      	movs	r2, #1
   24540:	40da      	lsrs	r2, r3
   24542:	9201      	str	r2, [sp, #4]
   24544:	e782      	b.n	2444c <__udivmoddi4+0x6c>
   24546:	4642      	mov	r2, r8
   24548:	2320      	movs	r3, #32
   2454a:	0026      	movs	r6, r4
   2454c:	1a9b      	subs	r3, r3, r2
   2454e:	40de      	lsrs	r6, r3
   24550:	002f      	movs	r7, r5
   24552:	46b4      	mov	ip, r6
   24554:	4097      	lsls	r7, r2
   24556:	4666      	mov	r6, ip
   24558:	003b      	movs	r3, r7
   2455a:	4333      	orrs	r3, r6
   2455c:	e7c9      	b.n	244f2 <__udivmoddi4+0x112>
   2455e:	46c0      	nop			; (mov r8, r8)

00024560 <__clzdi2>:
   24560:	b510      	push	{r4, lr}
   24562:	2900      	cmp	r1, #0
   24564:	d103      	bne.n	2456e <__clzdi2+0xe>
   24566:	f7f8 fdc7 	bl	1d0f8 <__clzsi2>
   2456a:	3020      	adds	r0, #32
   2456c:	e002      	b.n	24574 <__clzdi2+0x14>
   2456e:	1c08      	adds	r0, r1, #0
   24570:	f7f8 fdc2 	bl	1d0f8 <__clzsi2>
   24574:	bd10      	pop	{r4, pc}
   24576:	46c0      	nop			; (mov r8, r8)
   24578:	00000900 	.word	0x00000900
   2457c:	000009c4 	.word	0x000009c4
   24580:	000009c4 	.word	0x000009c4
   24584:	0000099a 	.word	0x0000099a
   24588:	000009c4 	.word	0x000009c4
   2458c:	000009c4 	.word	0x000009c4
   24590:	000009c4 	.word	0x000009c4
   24594:	000009c4 	.word	0x000009c4
   24598:	000009c4 	.word	0x000009c4
   2459c:	000009c4 	.word	0x000009c4
   245a0:	000009c4 	.word	0x000009c4
   245a4:	000009c4 	.word	0x000009c4
   245a8:	000009c4 	.word	0x000009c4
   245ac:	000009c4 	.word	0x000009c4
   245b0:	000009c4 	.word	0x000009c4
   245b4:	000009c4 	.word	0x000009c4
   245b8:	000009c4 	.word	0x000009c4
   245bc:	000009c4 	.word	0x000009c4
   245c0:	00000932 	.word	0x00000932
   245c4:	000009c4 	.word	0x000009c4
   245c8:	000009c4 	.word	0x000009c4
   245cc:	000009c4 	.word	0x000009c4
   245d0:	000009c4 	.word	0x000009c4
   245d4:	000009c4 	.word	0x000009c4
   245d8:	000009c4 	.word	0x000009c4
   245dc:	000009c4 	.word	0x000009c4
   245e0:	000009bc 	.word	0x000009bc
   245e4:	00000798 	.word	0x00000798
   245e8:	000009c4 	.word	0x000009c4
   245ec:	000009c4 	.word	0x000009c4
   245f0:	000008d0 	.word	0x000008d0
   245f4:	000009c4 	.word	0x000009c4
   245f8:	000009c4 	.word	0x000009c4
   245fc:	000009c4 	.word	0x000009c4
   24600:	000009c4 	.word	0x000009c4
   24604:	000009c4 	.word	0x000009c4
   24608:	000009c4 	.word	0x000009c4
   2460c:	00000896 	.word	0x00000896
   24610:	000009c4 	.word	0x000009c4
   24614:	000009c4 	.word	0x000009c4
   24618:	00000854 	.word	0x00000854
   2461c:	000009c4 	.word	0x000009c4
   24620:	000007f4 	.word	0x000007f4
   24624:	000009c4 	.word	0x000009c4
   24628:	000009c4 	.word	0x000009c4
   2462c:	000009c4 	.word	0x000009c4
   24630:	000009c4 	.word	0x000009c4
   24634:	000007a8 	.word	0x000007a8
   24638:	000009c4 	.word	0x000009c4
   2463c:	000009c4 	.word	0x000009c4
   24640:	000009c4 	.word	0x000009c4
   24644:	000009c4 	.word	0x000009c4
   24648:	000009c4 	.word	0x000009c4
   2464c:	000009c4 	.word	0x000009c4
   24650:	000009c4 	.word	0x000009c4
   24654:	000009c4 	.word	0x000009c4
   24658:	000009c4 	.word	0x000009c4
   2465c:	000009c4 	.word	0x000009c4
   24660:	000009c4 	.word	0x000009c4
   24664:	000009c4 	.word	0x000009c4
   24668:	000009c4 	.word	0x000009c4
   2466c:	000009c4 	.word	0x000009c4
   24670:	000009c4 	.word	0x000009c4
   24674:	000009c4 	.word	0x000009c4
   24678:	000009c4 	.word	0x000009c4
   2467c:	000009c4 	.word	0x000009c4
   24680:	000009c4 	.word	0x000009c4
   24684:	000009c4 	.word	0x000009c4
   24688:	000009c4 	.word	0x000009c4
   2468c:	000009c4 	.word	0x000009c4
   24690:	000009c4 	.word	0x000009c4
   24694:	000009c4 	.word	0x000009c4
   24698:	000009c4 	.word	0x000009c4
   2469c:	000009c4 	.word	0x000009c4
   246a0:	000009c4 	.word	0x000009c4
   246a4:	000009c4 	.word	0x000009c4
   246a8:	000009c4 	.word	0x000009c4
   246ac:	000009c4 	.word	0x000009c4
   246b0:	000009c4 	.word	0x000009c4
   246b4:	000009c4 	.word	0x000009c4
   246b8:	000009c4 	.word	0x000009c4
   246bc:	000009c4 	.word	0x000009c4
   246c0:	000009c4 	.word	0x000009c4
   246c4:	000009c4 	.word	0x000009c4
   246c8:	000009c4 	.word	0x000009c4
   246cc:	000009c4 	.word	0x000009c4
   246d0:	000009c4 	.word	0x000009c4
   246d4:	000009c4 	.word	0x000009c4
   246d8:	000009c4 	.word	0x000009c4
   246dc:	000009c4 	.word	0x000009c4
   246e0:	0000092a 	.word	0x0000092a
   246e4:	31333231 	.word	0x31333231
   246e8:	32313332 	.word	0x32313332
   246ec:	33323133 	.word	0x33323133
   246f0:	00000000 	.word	0x00000000
   246f4:	00002e60 	.word	0x00002e60
   246f8:	00002e6e 	.word	0x00002e6e
   246fc:	00002ee6 	.word	0x00002ee6
   24700:	00002e22 	.word	0x00002e22
   24704:	00002e42 	.word	0x00002e42

00024708 <_usb_device_irq_bits>:
   24708:	00080004 00800070 01000001 00000200     ....p...........

00024718 <_usb_endpoint_irq_bits>:
   24718:	60100c03                                ...`

0002471c <LfnOfs>:
   2471c:	07050301 12100e09 1c181614 0000001e     ................

0002472c <excvt.4559>:
   2472c:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
   2473c:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
   2474c:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
   2475c:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
   2476c:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
   2477c:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
   2478c:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
   2479c:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
   247ac:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
   247bc:	00005d5b                                []..

000247c0 <Tbl>:
   247c0:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
   247d0:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
   247e0:	00e600c9 00f400c6 00f200f6 00f900fb     ................
   247f0:	00d600ff 00f800dc 00d800a3 019200d7     ................
   24800:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
   24810:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
   24820:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
   24830:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
   24840:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
   24850:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
   24860:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
   24870:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
   24880:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
   24890:	00da00de 00d900db 00dd00fd 00b400af     ................
   248a0:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
   248b0:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

000248c0 <tbl_lower.4309>:
   248c0:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
   248d0:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
   248e0:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
   248f0:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
   24900:	00e100e0 00e300e2 00e500e4 00e700e6     ................
   24910:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
   24920:	00f100f0 00f300f2 00f500f4 00f800f6     ................
   24930:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
   24940:	01050103 01090107 010d010b 0111010f     ................
   24950:	01150113 01190117 011d011b 0121011f     ..............!.
   24960:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
   24970:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
   24980:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
   24990:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
   249a0:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
   249b0:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
   249c0:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
   249d0:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
   249e0:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
   249f0:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
   24a00:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
   24a10:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
   24a20:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
   24a30:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
   24a40:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
   24a50:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
   24a60:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
   24a70:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
   24a80:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
   24a90:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

00024aa0 <tbl_upper.4310>:
   24aa0:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
   24ab0:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
   24ac0:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
   24ad0:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
   24ae0:	00c100c0 00c300c2 00c500c4 00c700c6     ................
   24af0:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
   24b00:	00d100d0 00d300d2 00d500d4 00d800d6     ................
   24b10:	00da00d9 00dc00db 00de00dd 01000178     ............x...
   24b20:	01040102 01080106 010c010a 0110010e     ................
   24b30:	01140112 01180116 011c011a 0120011e     .............. .
   24b40:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
   24b50:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
   24b60:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
   24b70:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
   24b80:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
   24b90:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
   24ba0:	03940393 03960395 03980397 039a0399     ................
   24bb0:	039c039b 039e039d 03a0039f 03a303a1     ................
   24bc0:	03a503a4 03a703a6 03a903a8 041003aa     ................
   24bd0:	04120411 04140413 04160415 04180417     ................
   24be0:	041a0419 041c041b 041e041d 0420041f     .............. .
   24bf0:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
   24c00:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
   24c10:	04030402 04050404 04070406 04090408     ................
   24c20:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
   24c30:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
   24c40:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
   24c50:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
   24c60:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
   24c70:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
   24c80:	000000e1 6f666e69 00000000 43495242     ....info....BRIC
   24c90:	53200a34 25203a4e 0a643430 666f5320     4. SN: %04d. Sof
   24ca0:	72617774 65762065 6f697372 6625206e     tware version %f
   24cb0:	0000000a 24676663 20727720 42203120     ....cfg$ wr  1 B
   24cc0:	34434952 3430255f 000a0d64 00004b4f     RIC4_%04d...OK..
   24cd0:	6e6e6f63 0d746365 0000000a 69736f50     connect.....Posi
   24ce0:	64253a78 6552202c 64253a66 6944202c     x:%d, Ref:%d, Di
   24cf0:	253a7473 66322e30 7a41202c 25203a6d     st:%0.2f, Azm: %
   24d00:	66332e30 6e49202c 25203a63 66332e30     0.3f, Inc: %0.3f
   24d10:	6544202c 25203a63 66332e30 0000000a     , Dec: %0.3f....
   24d20:	20454c42 6f727245 00000072 74746553     BLE Error...Sett
   24d30:	20676e69 20454c42 00006e69 4d205441     ing BLE in..AT M
   24d40:	2065646f 20726f66 676f7270 006d6172     ode for program.
   24d50:	65736552 66612074 20726574 676f7270     Reset after prog
   24d60:	006d6172 73657250 6e612073 75622079     ram.Press any bu
   24d70:	6e6f7474 002e2e2e 0000003c 0000003e     tton....<...>...

00024d80 <yLine>:
   24d80:	30201001 00000040 696c6143 74617262     .. 0@...Calibrat
   24d90:	5f6e6f69 74736948 5f79726f 64343025     ion_History_%04d
   24da0:	7673632e 00000000 59595959 2e4d4d2e     .csv....YYYY.MM.
   24db0:	202c4444 6d3a4848 73733a6d 6c61432c     DD, HH:mm:ss,Cal
   24dc0:	61726269 6e6f6974 70795420 4e532c65     ibration Type,SN
   24dd0:	666f532c 72617774 65562065 6f697372     ,Software Versio
   24de0:	65542c6e 4320706d 6d65542c 2c462070     n,Temp C,Temp F,
   24df0:	00000020 676e6152 6e696665 20726564      ...Rangefinder 
   24e00:	7366664f 28207465 2c29744d 6e615220     Offset (Mt), Ran
   24e10:	69666567 7265646e 66664f20 20746573     gefinder Offset 
   24e20:	29746628 7247202c 7370756f 6f50202c     (ft), Groups, Po
   24e30:	73746e69 636e492c 676e4120 4520656c     ints,Inc Angle E
   24e40:	726f7272 64747320 28207665 29676564     rror stdev (deg)
   24e50:	6d7a412c 676e4120 4520656c 726f7272     ,Azm Angle Error
   24e60:	64747320 28207665 29676564 6363412c      stdev (deg),Acc
   24e70:	616d2031 74696e67 20656475 65647473     1 magnitude stde
   24e80:	25282076 412c2925 20326363 6e67616d     v (%%),Acc2 magn
   24e90:	64757469 74732065 20766564 29252528     itude stdev (%%)
   24ea0:	67614d2c 616d2031 74696e67 20656475     ,Mag1 magnitude 
   24eb0:	65647473 25282076 4d2c2925 20326761     stdev (%%),Mag2 
   24ec0:	6e67616d 64757469 74732065 20766564     magnitude stdev 
   24ed0:	29252528 0000002c 20636341 69642058     (%%),...Acc X di
   24ee0:	72617073 20797469 29252528 6363412c     sparity (%%),Acc
   24ef0:	64205920 61707369 79746972 25252820      Y disparity (%%
   24f00:	63412c29 205a2063 70736964 74697261     ),Acc Z disparit
   24f10:	25282079 4d2c2925 58206761 73696420     y (%%),Mag X dis
   24f20:	69726170 28207974 2c292525 2067614d     parity (%%),Mag 
   24f30:	69642059 72617073 20797469 29252528     Y disparity (%%)
   24f40:	67614d2c 64205a20 61707369 79746972     ,Mag Z disparity
   24f50:	25252820 00002c29 31636341 00000000      (%%),..Acc1....
   24f60:	58207325 66664f20 2c746573 59207325     %s X Offset,%s Y
   24f70:	66664f20 2c746573 5a207325 66664f20      Offset,%s Z Off
   24f80:	2c746573 58207325 69614720 73252c6e     set,%s X Gain,%s
   24f90:	47205920 2c6e6961 5a207325 69614720      Y Gain,%s Z Gai
   24fa0:	00002c6e 59207325 694d2058 696c6173     n,..%s YX Misali
   24fb0:	656d6e67 2820746e 29676564 2073252c     gnment (deg),%s 
   24fc0:	4d20595a 6c617369 6d6e6769 20746e65     ZY Misalignment 
   24fd0:	67656428 73252c29 20585a20 6173694d     (deg),%s ZX Misa
   24fe0:	6e67696c 746e656d 65642820 002c2967     lignment (deg),.
   24ff0:	74207325 61746568 694d2058 696c6173     %s thetaX Misali
   25000:	656d6e67 2820746e 29676564 2073252c     gnment (deg),%s 
   25010:	74656874 4d205961 6c617369 6d6e6769     thetaY Misalignm
   25020:	20746e65 67656428 73252c29 65687420     ent (deg),%s the
   25030:	205a6174 6173694d 6e67696c 746e656d     taZ Misalignment
   25040:	65642820 002c2967 32636341 00000000      (deg),.Acc2....
   25050:	3167614d 00000000 3267614d 00000000     Mag1....Mag2....
   25060:	6c636e49 74616e69 206e6f69 7a412026     Inclination & Az
   25070:	74756d69 75462068 43206c6c 62696c61     imuth Full Calib
   25080:	69746172 00006e6f 6d697a41 20687475     ration..Azimuth 
   25090:	63697551 6143206b 7262696c 6f697461     Quick Calibratio
   250a0:	0000006e 676e6152 6e696665 20726564     n...Rangefinder 
   250b0:	696c6143 74617262 006e6f69 30320a0d     Calibration...20
   250c0:	78323025 3230252e 30252e78 252c7832     %02x.%02x.%02x,%
   250d0:	3a783230 78323025 3230253a 73252c78     02x:%02x:%02x,%s
   250e0:	3430252c 30252c64 2c66312e 312e3025     ,%04d,%0.1f,%0.1
   250f0:	30252c66 2c66312e 00000000 362e3025     f,%0.1f,....%0.6
   25100:	30252c66 2c66362e 252c6425 30252c64     f,%0.6f,%d,%d,%0
   25110:	2c66362e 362e3025 30252c66 2c66362e     .6f,%0.6f,%0.6f,
   25120:	362e3025 30252c66 2c66362e 362e3025     %0.6f,%0.6f,%0.6
   25130:	00002c66 362e3025 30252c66 2c66362e     f,..%0.6f,%0.6f,
   25140:	362e3025 30252c66 2c66362e 362e3025     %0.6f,%0.6f,%0.6
   25150:	30252c66 2c66362e 00000000 516d7a61     f,%0.6f,....azmQ
   25160:	6b636975 44776152 00617461 6c75665f     uickRawData._ful
   25170:	6c61436c 44776152 00617461 30253032     lCalRawData.20%0
   25180:	30257832 30257832 255f7832 25783230     2x%02x%02x_%02x%
   25190:	25783230 5f783230 30254e53 255f6434     02x%02x_SN%04d_%
   251a0:	69622e73 0000006e 30253032 30257832     s.bin...20%02x%0
   251b0:	30257832 255f7832 25783230 25783230     2x%02x_%02x%02x%
   251c0:	5f783230 30254e53 635f6434 62696c61     02x_SN%04d_calib
   251d0:	69746172 725f6e6f 726f7065 78742e74     ration_report.tx
   251e0:	00000074 696c6143 74617262 206e6f69     t...Calibration 
   251f0:	6f706552 0a0d7472 61440a0d 61206574     Report....Date a
   25200:	5420646e 3a656d69 59590a0d 4d2e5959     nd Time:..YYYY.M
   25210:	44442e4d 3a484840 733a6d6d 320a0d73     M.DD@HH:mm:ss..2
   25220:	32302530 30252e78 252e7832 40783230     0%02x.%02x.%02x@
   25230:	78323025 3230253a 30253a78 0a0d7832     %02x:%02x:%02x..
   25240:	00000a0d 203a4e53 64343025 6f530a0d     ....SN: %04d..So
   25250:	61777466 56206572 69737265 203a6e6f     ftware Version: 
   25260:	312e3125 000a0d66 706d6554 74617265     %1.1f...Temperat
   25270:	3a657275 2e302520 66206631 6e657261     ure: %0.1f faren
   25280:	74696568 3025202c 2066312e 736c6563     heit, %0.1f cels
   25290:	0d737569 000a0d0a 7361654d 6d657275     ius.....Measurem
   252a0:	73746e65 6425203a 2d340a0d 6e696f50     ents: %d..4-Poin
   252b0:	72472074 7370756f 6425203a 0a0d0a0d     t Groups: %d....
   252c0:	00000000 6c676e41 72452065 20726f72     ....Angle Error 
   252d0:	6e617453 64726164 76654420 69746169     Standard Deviati
   252e0:	0d3a6e6f 4120200a 756d697a 203a6874     on:..  Azimuth: 
   252f0:	362e3325 65642066 65657267 200a0d73     %3.6f degrees.. 
   25300:	636e4920 616e696c 6e6f6974 3325203a      Inclination: %3
   25310:	2066362e 72676564 0d736565 0000000a     .6f degrees.....
   25320:	6e67614d 64757469 72452065 20726f72     Magnitude Error 
   25330:	6e617453 64726164 76654420 69746169     Standard Deviati
   25340:	0d3a6e6f 4120200a 6c656363 6d6f7265     on:..  Accelerom
   25350:	72657465 203a3120 362e3325 25252066     eter 1: %3.6f %%
   25360:	20200a0d 65636341 6f72656c 6574656d     ..  Acceleromete
   25370:	3a322072 2e332520 25206636 200a0d25     r 2: %3.6f %%.. 
   25380:	6d6f4320 73736170 203a3120 362e3325      Compass 1: %3.6
   25390:	25252066 20200a0d 706d6f43 20737361     f %%..  Compass 
   253a0:	25203a32 66362e33 0d252520 0000000a     2: %3.6f %%.....
   253b0:	73697841 73694420 69726170 0d3a7974     Axis Disparity:.
   253c0:	4120200a 6c656363 6d6f7265 72657465     .  Accelerometer
   253d0:	2d58203a 362e3325 20252566 33252d59     : X-%3.6f%% Y-%3
   253e0:	2566362e 2d5a2025 362e3325 0d252566     .6f%% Z-%3.6f%%.
   253f0:	0000000a 6f432020 7361706d 58203a73     ....  Compass: X
   25400:	2e33252d 25256636 252d5920 66362e33     -%3.6f%% Y-%3.6f
   25410:	5a202525 2e33252d 25256636 0a0d0a0d     %% Z-%3.6f%%....
   25420:	00000a0d 6c636e49 6d6f6e69 72657465     ....Inclinometer
   25430:	43203120 62696c61 69746172 0d3a6e6f      1 Calibration:.
   25440:	0000000a 6c636e49 6d6f6e69 72657465     ....Inclinometer
   25450:	43203220 62696c61 69746172 0d3a6e6f      2 Calibration:.
   25460:	0000000a 706d6f43 20737361 61432031     ....Compass 1 Ca
   25470:	7262696c 6f697461 0a0d3a6e 00000000     libration:......
   25480:	706d6f43 20737361 61432032 7262696c     Compass 2 Calibr
   25490:	6f697461 0a0d3a6e 00000000 61472020     ation:......  Ga
   254a0:	58206e69 2e25203a 0a0d6636 61472020     in X: %.6f..  Ga
   254b0:	59206e69 2e25203a 0a0d6636 61472020     in Y: %.6f..  Ga
   254c0:	3a5a6e69 362e2520 000a0d66 664f2020     inZ: %.6f...  Of
   254d0:	74657366 203a5820 66362e25 20200a0d     fset X: %.6f..  
   254e0:	7366664f 59207465 2e25203a 0a0d6636     Offset Y: %.6f..
   254f0:	664f2020 74657366 203a5a20 66362e25       Offset Z: %.6f
   25500:	00000a0d 78412020 4d207369 6c617369     ....  Axis Misal
   25510:	6d6e6769 2c746e65 582d5920 2e25203a     ignment, Y-X: %.
   25520:	64206636 0a0d6765 78412020 4d207369     6f deg..  Axis M
   25530:	6c617369 6d6e6769 2c746e65 582d5a20     isalignment, Z-X
   25540:	2e25203a 64206636 0a0d6765 78412020     : %.6f deg..  Ax
   25550:	4d207369 6c617369 6d6e6769 2c746e65     is Misalignment,
   25560:	592d5a20 2e25203a 64206636 0a0d6765      Z-Y: %.6f deg..
   25570:	00000000 61502020 67616b63 694d2065     ....  Package Mi
   25580:	696c6173 656d6e67 4120746e 74756f62     salignment About
   25590:	203a5820 66332e25 67656420 20200a0d      X: %.3f deg..  
   255a0:	6b636150 20656761 6173694d 6e67696c     Package Misalign
   255b0:	746e656d 6f624120 59207475 2e25203a     ment About Y: %.
   255c0:	64206633 0a0d6765 61502020 67616b63     3f deg..  Packag
   255d0:	694d2065 696c6173 656d6e67 4120746e     e Misalignment A
   255e0:	74756f62 203a5a20 66332e25 67656420     bout Z: %.3f deg
   255f0:	0a0d0a0d 00000000 61430a0d 7262696c     ..........Calibr
   25600:	6f697461 654d206e 72757361 6e656d65     ation Measuremen
   25610:	0d3a7374 0000000a 20202020 20202020     ts:.....        
   25620:	20202020 20202020 61636e55 7262696c             Uncalibr
   25630:	64657461 20202020 20202020 20202020     ated            
   25640:	20202020 20202020 6c614320 61726269              Calibra
   25650:	0d646574 0000000a 756f7247 50202c70     ted.....Group, P
   25660:	746e696f 2020202c 6d697a41 2c687475     oint,   Azimuth,
   25670:	6e492020 6e696c63 6f697461 52202c6e       Inclination, R
   25680:	2c6c6c6f 20202020 697a4120 6874756d     oll,     Azimuth
   25690:	4920202c 696c636e 6974616e 202c6e6f     ,  Inclination, 
   256a0:	6c6c6f52 00000a0d 64322d25 2020202c     Roll....%-2d,   
   256b0:	322d2520 20202c64 20202020 2e333025      %-2d,      %03.
   256c0:	202c6632 30252020 66322e33 2020202c     2f,   %03.2f,   
   256d0:	25202020 322e3330 20202c66 33302520        %03.2f,   %03
   256e0:	2c66322e 25202020 322e3330 20202c66     .2f,   %03.2f,  
   256f0:	20202020 2e333025 0a0d6632 00000000         %03.2f......
   25700:	742e4e53 00007478 30253032 30257832     SN.txt..20%02x%0
   25710:	30257832 535f7832 3430254e 61645f64     2x%02x_SN%04d_da
   25720:	69666174 632e656c 00007673 656d6954     tafile.csv..Time
   25730:	6174532d 202c706d 65646e49 44202c78     -Stamp, Index, D
   25740:	61747369 2065636e 74656d28 29737265     istance (meters)
   25750:	7a41202c 74756d69 64282068 65726765     , Azimuth (degre
   25760:	2c297365 636e4920 616e696c 6e6f6974     es), Inclination
   25770:	65642820 65657267 202c2973 706d6554      (degrees), Temp
   25780:	74617265 20657275 6c654328 73756973     erature (Celsius
   25790:	20202c29 6f727245 6f4c2072 000a0d67     ),  Error Log...
   257a0:	656d6954 6174532d 202c706d 65646e49     Time-Stamp, Inde
   257b0:	44202c78 61747369 2065636e 65656628     x, Distance (fee
   257c0:	202c2974 6d697a41 20687475 67656428     t), Azimuth (deg
   257d0:	73656572 49202c29 696c636e 6974616e     rees), Inclinati
   257e0:	28206e6f 72676564 29736565 6554202c     on (degrees), Te
   257f0:	7265706d 72757461 46282065 65726861     mperature (Fahre
   25800:	6965686e 202c2974 6f727245 6f4c2072     nheit), Error Lo
   25810:	000a0d67 30253032 252e7832 2e783230     g...20%02x.%02x.
   25820:	78323025 32302540 30253a78 253a7832     %02x@%02x:%02x:%
   25830:	2c783230 00000000 2c642520 332e2520     02x,.... %d, %.3
   25840:	25202c66 2c66332e 332e2520 00002c66     f, %.3f, %.3f,..
   25850:	0000d748 0000d628 0000d64c 0000d670     H...(...L...p...
   25860:	0000d692 0000d6b4 0000d6d0 0000d6ec     ................
   25870:	0000d6f8 0000d704 0000d748 0000d710     ........H.......
   25880:	0000d71c 0000d728 0000d734 0000d60e     ....(...4.......
   25890:	31636341 67694820 25203a68 66342e30     Acc1 High: %0.4f
   258a0:	00000000 31636341 776f4c20 3025203a     ....Acc1 Low: %0
   258b0:	0066342e 32636341 67694820 25203a68     .4f.Acc2 High: %
   258c0:	66342e30 00000000 32636341 776f4c20     0.4f....Acc2 Low
   258d0:	3025203a 0066342e 706d6f43 69482031     : %0.4f.Comp1 Hi
   258e0:	203a6867 342e3025 00000066 706d6f43     gh: %0.4f...Comp
   258f0:	6f4c2031 25203a77 66342e30 00000000     1 Low: %0.4f....
   25900:	706d6f43 69482032 203a6867 342e3025     Comp2 High: %0.4
   25910:	00000066 706d6f43 6f4c2032 25203a77     f...Comp2 Low: %
   25920:	66342e30 00000000 20636341 746c6564     0.4f....Acc delt
   25930:	78612061 25206425 66332e30 00002525     a ax%d %0.3f%%..
   25940:	2067614d 746c6564 78612061 25206425     Mag delta ax%d %
   25950:	66332e30 00002525 20636e49 746c6544     0.3f%%..Inc Delt
   25960:	25203a61 66332e30 00676564 206d7a41     a: %0.3fdeg.Azm 
   25970:	746c6544 25203a61 66332e30 00676564     Delta: %0.3fdeg.
   25980:	6573616c 61632072 6520636c 726f7272     laser calc error
   25990:	00000000 6573616c 65772072 73206b61     ....laser weak s
   259a0:	616e6769 0000006c 6573616c 74732072     ignal...laser st
   259b0:	676e6f72 67697320 006c616e 6573616c     rong signal.lase
   259c0:	6f632072 74206d6d 6f656d69 00007475     r comm timeout..
   259d0:	6573616c 72652072 2c726f72 6b6e7520     laser error, unk
   259e0:	6e776f6e 00000000 6573616c 72772072     nown....laser wr
   259f0:	20676e6f 7373656d 00656761 6e6b6e75     ong message.unkn
   25a00:	206e776f 6f727265 64252072 00000000     own error %d....

00025a10 <tc_interrupt_vectors.19145>:
   25a10:	00151211                                ....

00025a14 <mmc_trans_multipliers>:
   25a14:	00000000 0000000a 0000000c 0000000d     ................
   25a24:	0000000f 00000014 0000001a 0000001e     ................
   25a34:	00000023 00000028 0000002d 00000034     #...(...-...4...
   25a44:	00000037 0000003c 00000046 00000050     7...<...F...P...

00025a54 <sd_mmc_trans_units>:
   25a54:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00025a70 <sd_trans_multipliers>:
   25a70:	00000000 0000000a 0000000c 0000000d     ................
   25a80:	0000000f 00000014 00000019 0000001e     ................
   25a90:	00000023 00000028 0000002d 00000032     #...(...-...2...
   25aa0:	00000037 0000003c 00000046 00000050     7...<...F...P...
   25ab0:	2f445322 20434d4d 64726143 6f6c5320     "SD/MMC Card Slo
   25ac0:	22302074 00000000 00010576 0001056c     t 0"....v...l...
   25ad0:	00010562 000103de 00010580 0001064c     b...........L...
   25ae0:	00010620 00010616 0001060c 00010602      ...............
   25af0:	42002000 42002400 43000800 00000002     . .B.$.B...C....
   25b00:	00000100 00000002 00000200 00000003     ................
   25b10:	00000004 42000000 42000400 42000800     .......B...B...B
   25b20:	42000c00 42001000 43000400 00016286     ...B...B...C.b..
   25b30:	0001629e 0001629e 0001624a 0001624a     .b...b..Jb..Jb..
   25b40:	00016250 00016256 00016266 0001628c     Pb..Vb..fb...b..
   25b50:	0001640e 0001648e 0001648e 0001640a     .d...d...d...d..
   25b60:	0001641c 0001642a 00016438 00016446     .d..*d..8d..Fd..
   25b70:	000163f4 000164c0 0001650e 0001650e     .c...d...e...e..
   25b80:	0001650e 000164ce 000164dc 000164ea     .e...d...d...d..
   25b90:	000164f8 000164b0 0001657e 00016588     .d...d..~e...e..
   25ba0:	00016588 00016530 00016534 0001653e     .e..0e..4e..>e..
   25bb0:	00016548 00016552 0001656a 00017792     He..Re..je...w..
   25bc0:	0001788a 00017892 0001789a 000178a2     .x...x...x...x..
   25bd0:	00017882 0001814a 00018318 000182be     .x..J...........
   25be0:	000182d2 000182e4 000182fe 00018308     ................
   25bf0:	000182ae 000188c0 000188d8 000188fe     ................
   25c00:	00018902 000188d6 00018906 00630001     ..............c.
   25c10:	2000317a 000c0102 20003179 001f0103     z1. ....y1. ....
   25c20:	20003178 00180004 20003176 003b0005     x1. ....v1. ..;.
   25c30:	20003175 003b0006 20003174 12090903     u1. ..;.t1. ....
   25c40:	09091212 00000003                       ........

00025c48 <Font5x7>:
   25c48:	00000000 5f000000 07000000 14000700     ......._........
   25c58:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   25c68:	00502255 00000305 41221c00 22410000     U"P......."A..A"
   25c78:	2a08001c 08082a1c 08083e08 00305000     ...*.*...>...P0.
   25c88:	08080800 60000808 20000060 02040810     .......``.. ....
   25c98:	4549513e 7f42003e 61420040 21464951     >QIE>.B.@.BaQIF!
   25ca8:	314b4541 7f121418 45452710 4a3c3945     AEK1.....'EEE9<J
   25cb8:	01304949 03050971 49494936 49490636     II0.q...6III6.II
   25cc8:	36001e29 00000036 00003656 22140800     )..66...V6....."
   25cd8:	14141441 22411414 02000814 06095101     A.....A".....Q..
   25ce8:	41794932 11117e3e 497f7e11 3e364949     2IyA>~...~.III6>
   25cf8:	22414141 2241417f 49497f1c 097f4149     AAA".AA"..IIIA..
   25d08:	3e010109 32514141 0808087f 7f41007f     ...>AAQ2......A.
   25d18:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   25d28:	04027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   25d38:	0909097f 51413e06 097f5e21 46462919     .....>AQ!^...)FF
   25d48:	31494949 017f0101 40403f01 201f3f40     III1.....?@@@?. 
   25d58:	7f1f2040 7f201820 14081463 78040363     @ .. . .c...c..x
   25d68:	51610304 00434549 41417f00 10080402     ..aQIEC...AA....
   25d78:	7f414120 02040000 40040201 40404040      AA........@@@@@
   25d88:	04020100 54542000 487f7854 38384444     ..... TTTx.HDD88
   25d98:	20444444 48444438 5454387f 7e081854     DDD 8DDH.8TTT..~
   25da8:	08020109 3c545414 0404087f 7d440078     .....TT<....x.D}
   25db8:	40200040 00003d44 4428107f 407f4100     @. @D=....(D.A.@
   25dc8:	18047c00 087c7804 38780404 38444444     .|...x|...x8DDD8
   25dd8:	1414147c 14140808 087c7c18 48080404     |........||....H
   25de8:	20545454 40443f04 40403c20 201c7c20     TTT .?D@ <@@ |. 
   25df8:	3c1c2040 3c403040 28102844 50500c44     @ .<@0@<D(.(D.PP
   25e08:	64443c50 00444c54 00413608 007f0000     P<DdTLD..6A.....
   25e18:	36410000 08080008 08081c2a 08082a1c     ..A6....*....*..
   25e28:	2f6d7a41 20636e49 696c6143 74617262     Azm/Inc Calibrat
   25e38:	3a6e6f69 00000000 656b6154 696e5520     ion:....Take Uni
   25e48:	7269442d 69746365 6c616e6f 6f724720     -Directional Gro
   25e58:	20737075 3420666f 6f685320 20207374     ups of 4 Shots  
   25e68:	68772020 20656c69 61746f72 676e6974       while rotating
   25e78:	20202020 69202020 7274736e 6e656d75            instrumen
   25e88:	4f202e74 20796c6e 7473616c 68732034     t. Only last4 sh
   25e98:	2073746f 6520666f 20686361 756f7267     ots of each grou
   25ea8:	6c697770 6562206c 76617320 00006465     pwill be saved..
   25eb8:	74736944 65636e61 6c614320 61726269     Distance Calibra
   25ec8:	6e6f6974 0000003a 63616c50 20612065     tion:...Place a 
   25ed8:	67726174 61207465 00000074 2e252020     target at...  %.
   25ee8:	66206631 2e746565 00000000 2e252020     1f feet.....  %.
   25ef8:	6d206631 72657465 00002e73 656b6154     1f meters...Take
   25f08:	6e696d20 2034202e 746f6873 6e692073      min. 4 shots in
   25f18:	00000000 746c754d 656c7069 69724f20     ....Multiple Ori
   25f28:	61746e65 6e6f6974 00000073 796c6e4f     entations...Only
   25f38:	73616c20 20342074 64657375 0000002e      last 4 used....
   25f48:	706f6f4c 73655420 00003a74 656b6154     Loop Test:..Take
   25f58:	73206120 65697265 666f2073 00000000      a series of....
   25f68:	7361656d 6d657275 73746e65 646e6520     measurements end
   25f78:	00676e69 6b636162 20746120 20656874     ing.back at the 
   25f88:	73726966 00000074 6e696f70 20202e74     first...point.  
   25f98:	73657250 44272073 27656e6f 00000000     Press 'Done'....
   25fa8:	6e656877 6d6f6320 74656c70 00002e65     when complete...
   25fb8:	206d7a41 63697551 6143206b 7262696c     Azm Quick Calibr
   25fc8:	6f697461 0000006e 61746f52 64206574     ation...Rotate d
   25fd8:	63697665 6c732065 796c776f 00000020     evice slowly ...
   25fe8:	63206f74 7265766f 6c6c6120 696f7020     to cover all poi
   25ff8:	2073746e 00000020 67206e69 2e646972     nts  ...in grid.
   26008:	00002020 6c6c6548 6f57206f 00646c72       ..Hello World.
   26018:	204d5a41 3a6c6143 00000000 726f6241     AZM Cal:....Abor
   26028:	00000074 65746152 6425203a 00000000     t...Rate: %d....
   26038:	74617453 003a7375 2f206425 00642520     Status:.%d / %d.
   26048:	6b636142 6867696c 65442074 3a677562     Backlight Debug:
   26058:	00000000 3a646552 25202020 00000064     ....Red:   %d...
   26068:	65657247 25203a6e 00000064 65756c42     Green: %d...Blue
   26078:	2520203a 00000064 6e776f44 00000000     :  %d...Down....
   26088:	00007055 72616843 20726567 75626544     Up..Charger Debu
   26098:	00003a67 3a646441 78323025 25203d20     g:..Add:%02x = %
   260a8:	00000073 20636341 20202031 63412020     s...Acc 1     Ac
   260b8:	20322063 6e6f4420 00000065 25203a58     c 2  Done...X: %
   260c8:	332e302b 2b252066 66332e30 00000000     +0.3f %+0.3f....
   260d8:	25203a59 332e302b 2b252066 66332e30     Y: %+0.3f %+0.3f
   260e8:	00000000 25203a5a 332e302b 2b252066     ....Z: %+0.3f %+
   260f8:	66332e30 00000000 706d6f43 20203120     0.3f....Comp 1  
   26108:	6f432020 3220706d 00002020 25203a5a       Comp 2  ..Z: %
   26118:	332e302b 2b252066 66332e30 69784520     +0.3f %+0.3f Exi
   26128:	00000074 696c6143 74617262 206e6f69     t...Calibration 
   26138:	6f706552 003a7472 6c636e49 74616e69     Report:.Inclinat
   26148:	206e6f69 7a412026 74756d69 00000068     ion & Azimuth...
   26158:	30253032 252e7832 2e783230 78323025     20%02x.%02x.%02x
   26168:	32302540 30253a78 253a7832 00783230     @%02x:%02x:%02x.
   26178:	6f502d34 20746e69 756f7247 203a7370     4-Point Groups: 
   26188:	00006425 206d7a41 65647453 25203a76     %d..Azm Stdev: %
   26198:	0066332e 20636e49 65647453 25203a76     .3f.Inc Stdev: %
   261a8:	0066332e 706d6554 3025203a 2066312e     .3f.Temp: %0.1f 
   261b8:	00000046 706d6554 3025203a 2066312e     F...Temp: %0.1f 
   261c8:	00000043 6c636e49 74616e69 3a6e6f69     C...Inclination:
   261d8:	00000000 412d3141 65442032 2061746c     ....A1-A2 Delta 
   261e8:	2c592c58 2525205a 00000000 66332e25     X,Y,Z %%....%.3f
   261f8:	2e25202c 202c6633 66332e25 00000000     , %.3f, %.3f....
   26208:	6e67614d 64757469 72452065 20726f72     Magnitude Error 
   26218:	00002525 253a3141 2066332e 253a3241     %%..A1:%.3f A2:%
   26228:	0066332e 6d697a41 00687475 4d2d314d     .3f.Azimuth.M1-M
   26238:	65442032 2061746c 2c592c58 2525205a     2 Delta X,Y,Z %%
   26248:	00000000 253a314d 2066332e 253a324d     ....M1:%.3f M2:%
   26258:	0066332e 74736944 65636e61 00000000     .3f.Distance....
   26268:	676e6152 6e696665 20726564 7366664f     Rangefinder Offs
   26278:	003a7465 2e252020 6d206634 72657465     et:.  %.4f meter
   26288:	00000073 2e252020 66206634 00746565     s...  %.4f feet.
   26298:	74697845 00000000 00007466 706f6f4c     Exit....ft..Loop
   262a8:	73655420 65522074 74726f70 0000003a      Test Report:...
   262b8:	6d676553 73746e65 6425203a 00000000     Segments: %d....
   262c8:	61746f54 654c206c 6874676e 2e25203a     Total Length: %.
   262d8:	25206631 00000073 7a726f48 72724520     1f %s...Horz Err
   262e8:	2e25203a 25206633 00000073 74726556     : %.3f %s...Vert
   262f8:	72724520 2e25203a 25206633 00000073      Err: %.3f %s...
   26308:	7a412020 45206d69 203a7272 66312e25       Azim Err: %.1f
   26318:	67656420 00000000 706f6f4c 72724520      deg....Loop Err
   26328:	2e25203a 25256633 00000020 72615420     : %.3f%% ... Tar
   26338:	20746567 66312e25 65656620 00000074     get %.1f feet...
   26348:	72615420 20746567 66312e25 74656d20      Target %.1f met
   26358:	2e737265 00000000 3a64254d 2e322520     ers.....M%d: %2.
   26368:	00206634 7366664f 203a7465 00006625     4f .Offset: %f..
   26378:	696c6143 74617262 206e6f69 20202020     Calibration     
   26388:	6e6f4420 00000065 6f727245 6e492072      Done...Error In
   26398:	6d726f66 6f697461 00003a6e 41206f4e     formation:..No A
   263a8:	74696464 616e6f69 7245206c 73726f72     dditional Errors
   263b8:	00000000 52206f74 726f7065 6e692074     ....to Report in
   263c8:	73614c20 00000074 4d206425 75736165      Last...%d Measu
   263d8:	656d6572 0073746e 7361654d 6d657275     rements.Measurem
   263e8:	20746e65 00006425 696c6143 74617262     ent %d..Calibrat
   263f8:	206e6f69 65646f4d 00000000 65636341     ion Mode....Acce
   26408:	6f72656c 6574656d 00000072 6e67614d     lerometer...Magn
   26418:	6d6f7465 72657465 00000000 00642547     etometer....G%d.
   26428:	6f206425 696d2066 6425206e 00000000     %d of min %d....
   26438:	656e6f44 00000000 64254720 00000000     Done.... G%d....
   26448:	65736552 00000074 706f6f4c 6e656c20     Reset...Loop len
   26458:	3a687467 312e2520 00000066 0000006d     gth: %.1f...m...
   26468:	70736944 6563616c 746e656d 6f726620     Displacement fro
   26478:	3150206d 0000003a 69726f48 746e6f7a     m P1:...Horizont
   26488:	203a6c61 66312e25 00000000 74726556     al: %.1f....Vert
   26498:	6c616369 2e25203a 00006631 6d697a41     ical: %.1f..Azim
   264a8:	3a687475 312e2520 00000066 756e654d     uth: %.1f...Menu
   264b8:	0000003a 6b636142 00000000 65746e45     :...Back....Ente
   264c8:	00000072 6974704f 00736e6f 6f727245     r...Options.Erro
   264d8:	6e492072 00006f66 20746553 636f6c43     r Info..Set Cloc
   264e8:	0000006b 65756c42 746f6f74 00000068     k...Bluetooth...
   264f8:	75626544 654d2067 0000756e 70736944     Debug Menu..Disp
   26508:	2079616c 6f706552 00007472 706f6f4c     lay Report..Loop
   26518:	73655420 00000074 3a4c4143 69755120      Test...CAL: Qui
   26528:	41206b63 00004d5a 3a4c4143 6c754620     ck AZM..CAL: Ful
   26538:	4e49206c 5a412643 0000004d 3a4c4143     l INC&AZM...CAL:
   26548:	6e615220 662d6567 65646e69 00000072      Range-finder...
   26558:	75626544 654d2067 003a756e 736e6553     Debug Menu:.Sens
   26568:	5220726f 44207761 00617461 6b636142     or Raw Data.Back
   26578:	6867696c 614d2074 6c61756e 00000000     light Manual....
   26588:	72616843 20726567 6f666e49 00000000     Charger Info....
   26598:	72706552 7365636f 75462073 43206c6c     Reprocess Full C
   265a8:	00006c61 72706552 7365636f 5a412073     al..Reprocess AZ
   265b8:	6143204d 0000006c 636f7250 69737365     M Cal...Processi
   265c8:	4420676e 2e617461 00002e2e 696c6143     ng Data.....Cali
   265d8:	74617262 206e6f69 706d6f43 6574656c     bration Complete
   265e8:	00000021 636f7250 69737365 4320676e     !...Processing C
   265f8:	44206c61 3a617461 00000000 72657449     al Data:....Iter
   26608:	6f697461 6425206e 20666f20 20206425     ation %d of %d  
   26618:	00202020 65746544 64657463 64614220        .Detected Bad
   26628:	6f724720 00007075 20202020 20202020      Group..        
   26638:	20202020 20202020 20202020 00000020                  ...
   26648:	20505247 45206425 726f7272 2e302520     GRP %d Error %0.
   26658:	65646633 00000067 756f7247 65522070     3fdeg...Group Re
   26668:	65766f6d 00202c64 74736552 69747261     moved, .Restarti
   26678:	4120676e 796c616e 00736973 65756c42     ng Analysis.Blue
   26688:	746f6f74 00003a68 6f747541 206e7552     tooth:..AutoRun 
   26698:	4f2f6e4f 00006666 65736552 6e4f2074     On/Off..Reset On
   266a8:	66664f2f 00000000 2041544f 4f2f6e4f     /Off....OTA On/O
   266b8:	00006666 5520434d 20545241 4f2f6e4f     ff..MC UART On/O
   266c8:	00006666 20444d43 45444f4d 00000000     ff..CMD MODE....
   266d8:	00006e4f 20746553 636f6c43 00003a6b     On..Set Clock:..
   266e8:	72616559 2020203a 30253032 00007832     Year:   20%02x..
   266f8:	746e6f4d 20203a68 78323025 00000000     Month:  %02x....
   26708:	65746144 2020203a 78323025 00000000     Date:   %02x....
   26718:	72756f48 2020203a 78323025 00000000     Hour:   %02x....
   26728:	756e694d 203a6574 78323025 00000000     Minute: %02x....
   26738:	6f636553 203a646e 78323025 00000000     Second: %02x....
   26748:	636e6143 00006c65 0000002d 0000002b     Cancel..-...+...
   26758:	7478654e 00000000 74736944 6546203a     Next....Dist: Fe
   26768:	00007465 74736944 654d203a 73726574     et..Dist: Meters
   26778:	00000000 706d6554 6146203a 6e657268     ....Temp: Fahren
   26788:	74696568 00000000 706d6554 6543203a     heit....Temp: Ce
   26798:	7569736c 00000073 746f6853 6c654420     lsius...Shot Del
   267a8:	203a7961 73206425 00006365 72616843     ay: %d sec..Char
   267b8:	43206567 3a727275 6d642520 00000041     ge Curr: %dmA...
   267c8:	20727245 736e6553 3025203a 2066322e     Err Sens: %0.2f 
   267d8:	00676564 43204c42 726f6c6f 7325203a     deg.BL Color: %s
   267e8:	00000000 4c204c42 6c657665 6425203a     ....BL Level: %d
   267f8:	00000000 6974704f 3a736e6f 00000000     ....Options:....
   26808:	756a6441 00007473 34253a54 4666312e     Adjust..T:%4.1fF
   26818:	00000000 30253a54 4366312e 00000000     ....T:%0.1fC....
   26828:	78323025 3230253a 30253a78 00007832     %02x:%02x:%02x..
   26838:	30253a42 25256432 00000000 30253a42     B:%02d%%....B:%0
   26848:	00006432 00464552 54534944 00000000     2d..REF.DIST....
   26858:	004d5a41 4c434e49 00000000 00000045     AZM.INCL....E...
   26868:	00776f70 74727173 00000000              pow.sqrt....

00026874 <npio2_hw>:
   26874:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
   26884:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
   26894:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
   268a4:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
   268b4:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
   268c4:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
   268d4:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
   268e4:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

000268f4 <two_over_pi>:
   268f4:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
   26904:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
   26914:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
   26924:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
   26934:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
   26944:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
   26954:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
   26964:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
   26974:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
   26984:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
   26994:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
   269a4:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
   269b4:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
   269c4:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
   269d4:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
   269e4:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
   269f4:	0060e27b 00c08c6b 00000000              {.`.k.......

00026a00 <PIo2>:
   26a00:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
   26a10:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
   26a20:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
   26a30:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

00026a40 <init_jk>:
   26a40:	00000002 00000003 00000004 00000006     ................

00026a50 <atanhi>:
   26a50:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
   26a60:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?

00026a70 <atanlo>:
   26a70:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
   26a80:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

00026a90 <TWO52>:
   26a90:	00000000 43300000 00000000 c3300000     ......0C......0.
   26aa0:	0001d6e4 0001d6b4 0001d6c6 0001d608     ................
   26ab0:	0001d6c6 0001d6aa 0001d6c6 0001d608     ................
   26ac0:	0001d6b4 0001d6b4 0001d6aa 0001d608     ................
   26ad0:	0001d610 0001d610 0001d610 0001d6cc     ................
   26ae0:	0001d6b4 0001d6b4 0001d688 0001d76c     ............l...
   26af0:	0001d688 0001d6aa 0001d688 0001d76c     ............l...
   26b00:	0001d6b4 0001d6b4 0001d6aa 0001d76c     ............l...
   26b10:	0001d610 0001d610 0001d610 0001d776     ............v...
   26b20:	0001da64 0001d9b4 0001d9b4 0001d9b2     d...............
   26b30:	0001da56 0001da56 0001da4c 0001d9b2     V...V...L.......
   26b40:	0001da56 0001da4c 0001da56 0001d9b2     V...L...V.......
   26b50:	0001da5c 0001da5c 0001da5c 0001daec     \...\...\.......
   26b60:	0001e834 0001e816 0001e7d0 0001e6ee     4...............
   26b70:	0001e7d0 0001e808 0001e7d0 0001e6ee     ................
   26b80:	0001e816 0001e816 0001e808 0001e6ee     ................
   26b90:	0001e6e6 0001e6e6 0001e6e6 0001ea4c     ............L...
   26ba0:	0001f094 0001ef54 0001ef54 0001ef50     ....T...T...P...
   26bb0:	0001f06c 0001f06c 0001f05e 0001ef50     l...l...^...P...
   26bc0:	0001f06c 0001f05e 0001f06c 0001ef50     l...^...l...P...
   26bd0:	0001f074 0001f074 0001f074 0001f278     t...t...t...x...

00026be0 <_global_impure_ptr>:
   26be0:	200003b0 00020b88 00020bfc 00020bfc     ... ............
   26bf0:	00020b6c 00020bfc 00020bfc 00020bfc     l...............
   26c00:	00020bfc 00020bfc 00020bfc 00020b74     ............t...
   26c10:	00020656 00020bfc 00020610 00020660     V...........`...
   26c20:	00020bfc 000206ac 00020896 00020896     ................
   26c30:	00020896 00020896 00020896 00020896     ................
   26c40:	00020896 00020896 00020896 00020bfc     ................
   26c50:	00020bfc 00020bfc 00020bfc 00020bfc     ................
   26c60:	00020bfc 00020bfc 00020bfc 00020bfc     ................
   26c70:	00020bfc 000206b4 000207fc 00020bfc     ................
   26c80:	000207fc 00020bfc 00020bfc 00020bfc     ................
   26c90:	00020bfc 000208c6 00020bfc 00020bfc     ................
   26ca0:	000208ce 00020bfc 00020bfc 00020bfc     ................
   26cb0:	00020bfc 00020bfc 00020970 00020bfc     ........p.......
   26cc0:	00020bfc 000209a2 00020bfc 00020bfc     ................
   26cd0:	00020bfc 00020bfc 00020bfc 00020bfc     ................
   26ce0:	00020bfc 00020bfc 00020bfc 00020bfc     ................
   26cf0:	00020a9c 00020ad0 000207fc 000207fc     ................
   26d00:	000207fc 00020ae2 00020ad0 00020bfc     ................
   26d10:	00020bfc 00020aea 00020bfc 00020a04     ................
   26d20:	00020bca 00020b40 00020a3a 00020bfc     ....@...:.......
   26d30:	00020a42 00020bfc 00020b98 00020bfc     B...............
   26d40:	00020bfc 00020afa 00464e49 00666e69     ........INF.inf.
   26d50:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
   26d60:	42413938 46454443 00000000 33323130     89ABCDEF....0123
   26d70:	37363534 62613938 66656463 00000000     456789abcdef....
   26d80:	6c756e28 0000296c 00000030              (null)..0...

00026d8c <blanks.7223>:
   26d8c:	20202020 20202020 20202020 20202020                     

00026d9c <zeroes.7224>:
   26d9c:	30303030 30303030 30303030 30303030     0000000000000000
   26dac:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   26dbc:	00000000                                ....

00026dc0 <__mprec_bigtens>:
   26dc0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   26dd0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   26de0:	7f73bf3c 75154fdd                       <.s..O.u

00026de8 <__mprec_tens>:
   26de8:	00000000 3ff00000 00000000 40240000     .......?......$@
   26df8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   26e08:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   26e18:	00000000 412e8480 00000000 416312d0     .......A......cA
   26e28:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   26e38:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   26e48:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   26e58:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   26e68:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   26e78:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   26e88:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   26e98:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   26ea8:	79d99db4 44ea7843                       ...yCx.D

00026eb0 <p05.6055>:
   26eb0:	00000005 00000019 0000007d 49534f50     ........}...POSI
   26ec0:	00000058                                X...

00026ec4 <_ctype_>:
   26ec4:	20202000 20202020 28282020 20282828     .         ((((( 
   26ed4:	20202020 20202020 20202020 20202020                     
   26ee4:	10108820 10101010 10101010 10101010      ...............
   26ef4:	04040410 04040404 10040404 10101010     ................
   26f04:	41411010 41414141 01010101 01010101     ..AAAAAA........
   26f14:	01010101 01010101 01010101 10101010     ................
   26f24:	42421010 42424242 02020202 02020202     ..BBBBBB........
   26f34:	02020202 02020202 02020202 10101010     ................
   26f44:	00000020 00000000 00000000 00000000      ...............
	...

00026fc8 <_init>:
   26fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26fca:	46c0      	nop			; (mov r8, r8)
   26fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   26fce:	bc08      	pop	{r3}
   26fd0:	469e      	mov	lr, r3
   26fd2:	4770      	bx	lr

00026fd4 <__init_array_start>:
   26fd4:	00021b35 	.word	0x00021b35

00026fd8 <__frame_dummy_init_array_entry>:
   26fd8:	000000dd                                ....

00026fdc <_fini>:
   26fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26fde:	46c0      	nop			; (mov r8, r8)
   26fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   26fe2:	bc08      	pop	{r3}
   26fe4:	469e      	mov	lr, r3
   26fe6:	4770      	bx	lr

00026fe8 <__fini_array_start>:
   26fe8:	000000b5 	.word	0x000000b5
