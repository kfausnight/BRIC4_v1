
SAMBA_BOOTLOADER1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000051e4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000114  20000000  000051e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00020114  2**0
                  CONTENTS
  3 .bss          00000bd8  20000114  000052f8  00020114  2**2
                  ALLOC
  4 .stack        00000404  20000cec  00005ed0  00020114  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
  7 .debug_info   00032d10  00000000  00000000  00020195  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004bb9  00000000  00000000  00052ea5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000968  00000000  00000000  00057a5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0001f2d5  00000000  00000000  000583c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000110a0  00000000  00000000  0007769b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0009d529  00000000  00000000  0008873b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000930d  00000000  00000000  00125c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000b78  00000000  00000000  0012ef71  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001904  00000000  00000000  0012faec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f0 10 00 20 95 41 00 00 91 41 00 00 91 41 00 00     ... .A...A...A..
	...
      2c:	91 41 00 00 00 00 00 00 00 00 00 00 91 41 00 00     .A...........A..
      3c:	91 41 00 00 91 41 00 00 91 41 00 00 91 41 00 00     .A...A...A...A..
      4c:	1d 12 00 00 91 41 00 00 91 41 00 00 c1 38 00 00     .....A...A...8..
      5c:	91 41 00 00 d1 16 00 00 e1 16 00 00 f1 16 00 00     .A..............
      6c:	01 17 00 00 11 17 00 00 21 17 00 00 91 41 00 00     ........!....A..
      7c:	91 41 00 00 91 41 00 00 91 41 00 00 91 41 00 00     .A...A...A...A..
	...
      94:	91 41 00 00 91 41 00 00 91 41 00 00 91 41 00 00     .A...A...A...A..
      a4:	91 41 00 00 91 41 00 00 91 41 00 00 00 00 00 00     .A...A...A......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000114 	.word	0x20000114
      d4:	00000000 	.word	0x00000000
      d8:	000051e4 	.word	0x000051e4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000118 	.word	0x20000118
     108:	000051e4 	.word	0x000051e4
     10c:	000051e4 	.word	0x000051e4
     110:	00000000 	.word	0x00000000

00000114 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
     114:	4a02      	ldr	r2, [pc, #8]	; (120 <udi_cdc_comm_disable+0xc>)
     116:	7813      	ldrb	r3, [r2, #0]
     118:	3b01      	subs	r3, #1
     11a:	b2db      	uxtb	r3, r3
     11c:	7013      	strb	r3, [r2, #0]
}
     11e:	4770      	bx	lr
     120:	2000013b 	.word	0x2000013b

00000124 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
     124:	2000      	movs	r0, #0
     126:	4770      	bx	lr

00000128 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
     128:	2000      	movs	r0, #0
     12a:	4770      	bx	lr

0000012c <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
     12c:	b510      	push	{r4, lr}
	uint8_t port = udi_cdc_setup_to_port();
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
     12e:	4902      	ldr	r1, [pc, #8]	; (138 <udi_cdc_line_coding_received+0xc>)
     130:	2000      	movs	r0, #0
     132:	4b02      	ldr	r3, [pc, #8]	; (13c <udi_cdc_line_coding_received+0x10>)
     134:	4798      	blx	r3
}
     136:	bd10      	pop	{r4, pc}
     138:	20000134 	.word	0x20000134
     13c:	000042ed 	.word	0x000042ed

00000140 <udi_cdc_comm_enable>:
{
     140:	b510      	push	{r4, lr}
	udi_cdc_nb_comm_enabled = 0;
     142:	2200      	movs	r2, #0
     144:	4b12      	ldr	r3, [pc, #72]	; (190 <udi_cdc_comm_enable+0x50>)
     146:	701a      	strb	r2, [r3, #0]
	udi_cdc_state[port] = CPU_TO_LE16(0);
     148:	2000      	movs	r0, #0
     14a:	4b12      	ldr	r3, [pc, #72]	; (194 <udi_cdc_comm_enable+0x54>)
     14c:	801a      	strh	r2, [r3, #0]
	uid_cdc_state_msg[port].header.bmRequestType =
     14e:	4b12      	ldr	r3, [pc, #72]	; (198 <udi_cdc_comm_enable+0x58>)
     150:	21a1      	movs	r1, #161	; 0xa1
     152:	7019      	strb	r1, [r3, #0]
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
     154:	3981      	subs	r1, #129	; 0x81
     156:	7059      	strb	r1, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
     158:	805a      	strh	r2, [r3, #2]
	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
     15a:	809a      	strh	r2, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
     15c:	391e      	subs	r1, #30
     15e:	80d9      	strh	r1, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
     160:	811a      	strh	r2, [r3, #8]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
     162:	490e      	ldr	r1, [pc, #56]	; (19c <udi_cdc_comm_enable+0x5c>)
     164:	23e1      	movs	r3, #225	; 0xe1
     166:	025b      	lsls	r3, r3, #9
     168:	600b      	str	r3, [r1, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
     16a:	7108      	strb	r0, [r1, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
     16c:	7148      	strb	r0, [r1, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
     16e:	2308      	movs	r3, #8
     170:	718b      	strb	r3, [r1, #6]
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
     172:	2000      	movs	r0, #0
     174:	4b0a      	ldr	r3, [pc, #40]	; (1a0 <udi_cdc_comm_enable+0x60>)
     176:	4798      	blx	r3
	if (!UDI_CDC_ENABLE_EXT(port)) {
     178:	2000      	movs	r0, #0
     17a:	4b0a      	ldr	r3, [pc, #40]	; (1a4 <udi_cdc_comm_enable+0x64>)
     17c:	4798      	blx	r3
     17e:	2800      	cmp	r0, #0
     180:	d004      	beq.n	18c <udi_cdc_comm_enable+0x4c>
	udi_cdc_nb_comm_enabled++;
     182:	4a03      	ldr	r2, [pc, #12]	; (190 <udi_cdc_comm_enable+0x50>)
     184:	7813      	ldrb	r3, [r2, #0]
     186:	3301      	adds	r3, #1
     188:	b2db      	uxtb	r3, r3
     18a:	7013      	strb	r3, [r2, #0]
}
     18c:	bd10      	pop	{r4, pc}
     18e:	46c0      	nop			; (mov r8, r8)
     190:	2000013b 	.word	0x2000013b
     194:	200003d0 	.word	0x200003d0
     198:	20000668 	.word	0x20000668
     19c:	20000134 	.word	0x20000134
     1a0:	000042ed 	.word	0x000042ed
     1a4:	000042cd 	.word	0x000042cd

000001a8 <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
     1a8:	b570      	push	{r4, r5, r6, lr}
     1aa:	b084      	sub	sp, #16

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
     1ac:	4b48      	ldr	r3, [pc, #288]	; (2d0 <udi_cdc_tx_send+0x128>)
     1ae:	781b      	ldrb	r3, [r3, #0]
     1b0:	2b00      	cmp	r3, #0
     1b2:	d001      	beq.n	1b8 <udi_cdc_tx_send+0x10>
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
     1b4:	b004      	add	sp, #16
     1b6:	bd70      	pop	{r4, r5, r6, pc}
	if (udd_is_high_speed()) {
     1b8:	4b46      	ldr	r3, [pc, #280]	; (2d4 <udi_cdc_tx_send+0x12c>)
     1ba:	4798      	blx	r3
     1bc:	2800      	cmp	r0, #0
     1be:	d046      	beq.n	24e <udi_cdc_tx_send+0xa6>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
     1c0:	4b45      	ldr	r3, [pc, #276]	; (2d8 <udi_cdc_tx_send+0x130>)
     1c2:	881c      	ldrh	r4, [r3, #0]
     1c4:	4b45      	ldr	r3, [pc, #276]	; (2dc <udi_cdc_tx_send+0x134>)
     1c6:	4798      	blx	r3
     1c8:	4284      	cmp	r4, r0
     1ca:	d0f3      	beq.n	1b4 <udi_cdc_tx_send+0xc>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     1cc:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     1d0:	425a      	negs	r2, r3
     1d2:	4153      	adcs	r3, r2
     1d4:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
     1d6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     1d8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     1dc:	2200      	movs	r2, #0
     1de:	4b40      	ldr	r3, [pc, #256]	; (2e0 <udi_cdc_tx_send+0x138>)
     1e0:	701a      	strb	r2, [r3, #0]
	return flags;
     1e2:	9d03      	ldr	r5, [sp, #12]
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
     1e4:	4b3f      	ldr	r3, [pc, #252]	; (2e4 <udi_cdc_tx_send+0x13c>)
     1e6:	781c      	ldrb	r4, [r3, #0]
     1e8:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
     1ea:	0062      	lsls	r2, r4, #1
     1ec:	4b3e      	ldr	r3, [pc, #248]	; (2e8 <udi_cdc_tx_send+0x140>)
     1ee:	5ad3      	ldrh	r3, [r2, r3]
     1f0:	2b00      	cmp	r3, #0
     1f2:	d033      	beq.n	25c <udi_cdc_tx_send+0xb4>
	sof_zlp_counter = 0;
     1f4:	2200      	movs	r2, #0
     1f6:	4b3d      	ldr	r3, [pc, #244]	; (2ec <udi_cdc_tx_send+0x144>)
     1f8:	801a      	strh	r2, [r3, #0]
	if (!udi_cdc_tx_both_buf_to_send[port]) {
     1fa:	4b3d      	ldr	r3, [pc, #244]	; (2f0 <udi_cdc_tx_send+0x148>)
     1fc:	781b      	ldrb	r3, [r3, #0]
     1fe:	2b00      	cmp	r3, #0
     200:	d14b      	bne.n	29a <udi_cdc_tx_send+0xf2>
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
     202:	4263      	negs	r3, r4
     204:	4163      	adcs	r3, r4
     206:	b2db      	uxtb	r3, r3
     208:	4a36      	ldr	r2, [pc, #216]	; (2e4 <udi_cdc_tx_send+0x13c>)
     20a:	7013      	strb	r3, [r2, #0]
	udi_cdc_tx_trans_ongoing[port] = true;
     20c:	2201      	movs	r2, #1
     20e:	4b30      	ldr	r3, [pc, #192]	; (2d0 <udi_cdc_tx_send+0x128>)
     210:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     212:	2d00      	cmp	r5, #0
     214:	d004      	beq.n	220 <udi_cdc_tx_send+0x78>
		cpu_irq_enable();
     216:	4b32      	ldr	r3, [pc, #200]	; (2e0 <udi_cdc_tx_send+0x138>)
     218:	701a      	strb	r2, [r3, #0]
     21a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     21e:	b662      	cpsie	i
	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
     220:	0026      	movs	r6, r4
     222:	0063      	lsls	r3, r4, #1
     224:	4a30      	ldr	r2, [pc, #192]	; (2e8 <udi_cdc_tx_send+0x140>)
     226:	5a9b      	ldrh	r3, [r3, r2]
     228:	001d      	movs	r5, r3
     22a:	3d41      	subs	r5, #65	; 0x41
     22c:	3dff      	subs	r5, #255	; 0xff
     22e:	1e6a      	subs	r2, r5, #1
     230:	4195      	sbcs	r5, r2
     232:	b2ed      	uxtb	r5, r5
	if (b_short_packet) {
     234:	22a0      	movs	r2, #160	; 0xa0
     236:	0052      	lsls	r2, r2, #1
     238:	4293      	cmp	r3, r2
     23a:	d037      	beq.n	2ac <udi_cdc_tx_send+0x104>
		if (udd_is_high_speed()) {
     23c:	4b25      	ldr	r3, [pc, #148]	; (2d4 <udi_cdc_tx_send+0x12c>)
     23e:	4798      	blx	r3
     240:	2800      	cmp	r0, #0
     242:	d02e      	beq.n	2a2 <udi_cdc_tx_send+0xfa>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
     244:	4b25      	ldr	r3, [pc, #148]	; (2dc <udi_cdc_tx_send+0x134>)
     246:	4798      	blx	r3
     248:	4b23      	ldr	r3, [pc, #140]	; (2d8 <udi_cdc_tx_send+0x130>)
     24a:	8018      	strh	r0, [r3, #0]
     24c:	e031      	b.n	2b2 <udi_cdc_tx_send+0x10a>
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
     24e:	4b22      	ldr	r3, [pc, #136]	; (2d8 <udi_cdc_tx_send+0x130>)
     250:	881c      	ldrh	r4, [r3, #0]
     252:	4b28      	ldr	r3, [pc, #160]	; (2f4 <udi_cdc_tx_send+0x14c>)
     254:	4798      	blx	r3
     256:	4284      	cmp	r4, r0
     258:	d1b8      	bne.n	1cc <udi_cdc_tx_send+0x24>
     25a:	e7ab      	b.n	1b4 <udi_cdc_tx_send+0xc>
		sof_zlp_counter++;
     25c:	4a23      	ldr	r2, [pc, #140]	; (2ec <udi_cdc_tx_send+0x144>)
     25e:	8813      	ldrh	r3, [r2, #0]
     260:	3301      	adds	r3, #1
     262:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
     264:	4b1b      	ldr	r3, [pc, #108]	; (2d4 <udi_cdc_tx_send+0x12c>)
     266:	4798      	blx	r3
     268:	2800      	cmp	r0, #0
     26a:	d103      	bne.n	274 <udi_cdc_tx_send+0xcc>
     26c:	4b1f      	ldr	r3, [pc, #124]	; (2ec <udi_cdc_tx_send+0x144>)
     26e:	881b      	ldrh	r3, [r3, #0]
     270:	2b63      	cmp	r3, #99	; 0x63
     272:	d908      	bls.n	286 <udi_cdc_tx_send+0xde>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
     274:	4b17      	ldr	r3, [pc, #92]	; (2d4 <udi_cdc_tx_send+0x12c>)
     276:	4798      	blx	r3
     278:	2800      	cmp	r0, #0
     27a:	d0bb      	beq.n	1f4 <udi_cdc_tx_send+0x4c>
     27c:	4b1e      	ldr	r3, [pc, #120]	; (2f8 <udi_cdc_tx_send+0x150>)
     27e:	4a1b      	ldr	r2, [pc, #108]	; (2ec <udi_cdc_tx_send+0x144>)
     280:	8812      	ldrh	r2, [r2, #0]
     282:	429a      	cmp	r2, r3
     284:	d8b6      	bhi.n	1f4 <udi_cdc_tx_send+0x4c>
	if (cpu_irq_is_enabled_flags(flags))
     286:	2d00      	cmp	r5, #0
     288:	d100      	bne.n	28c <udi_cdc_tx_send+0xe4>
     28a:	e793      	b.n	1b4 <udi_cdc_tx_send+0xc>
		cpu_irq_enable();
     28c:	2201      	movs	r2, #1
     28e:	4b14      	ldr	r3, [pc, #80]	; (2e0 <udi_cdc_tx_send+0x138>)
     290:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
     292:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     296:	b662      	cpsie	i
     298:	e78c      	b.n	1b4 <udi_cdc_tx_send+0xc>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
     29a:	4262      	negs	r2, r4
     29c:	4154      	adcs	r4, r2
     29e:	b2e4      	uxtb	r4, r4
     2a0:	e7b4      	b.n	20c <udi_cdc_tx_send+0x64>
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
     2a2:	4b14      	ldr	r3, [pc, #80]	; (2f4 <udi_cdc_tx_send+0x14c>)
     2a4:	4798      	blx	r3
     2a6:	4b0c      	ldr	r3, [pc, #48]	; (2d8 <udi_cdc_tx_send+0x130>)
     2a8:	8018      	strh	r0, [r3, #0]
     2aa:	e002      	b.n	2b2 <udi_cdc_tx_send+0x10a>
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
     2ac:	2200      	movs	r2, #0
     2ae:	4b0a      	ldr	r3, [pc, #40]	; (2d8 <udi_cdc_tx_send+0x130>)
     2b0:	801a      	strh	r2, [r3, #0]
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
     2b2:	0076      	lsls	r6, r6, #1
	udd_ep_run( ep,
     2b4:	4b0c      	ldr	r3, [pc, #48]	; (2e8 <udi_cdc_tx_send+0x140>)
     2b6:	5af3      	ldrh	r3, [r6, r3]
			udi_cdc_tx_buf[port][buf_sel_trans],
     2b8:	00a2      	lsls	r2, r4, #2
     2ba:	1914      	adds	r4, r2, r4
     2bc:	01a4      	lsls	r4, r4, #6
     2be:	4a0f      	ldr	r2, [pc, #60]	; (2fc <udi_cdc_tx_send+0x154>)
     2c0:	1912      	adds	r2, r2, r4
	udd_ep_run( ep,
     2c2:	490f      	ldr	r1, [pc, #60]	; (300 <udi_cdc_tx_send+0x158>)
     2c4:	9100      	str	r1, [sp, #0]
     2c6:	0029      	movs	r1, r5
     2c8:	2081      	movs	r0, #129	; 0x81
     2ca:	4c0e      	ldr	r4, [pc, #56]	; (304 <udi_cdc_tx_send+0x15c>)
     2cc:	47a0      	blx	r4
     2ce:	e771      	b.n	1b4 <udi_cdc_tx_send+0xc>
     2d0:	20000664 	.word	0x20000664
     2d4:	00002bf5 	.word	0x00002bf5
     2d8:	20000660 	.word	0x20000660
     2dc:	00002c09 	.word	0x00002c09
     2e0:	20000112 	.word	0x20000112
     2e4:	2000065c 	.word	0x2000065c
     2e8:	20000658 	.word	0x20000658
     2ec:	20000130 	.word	0x20000130
     2f0:	200003d4 	.word	0x200003d4
     2f4:	00002bf9 	.word	0x00002bf9
     2f8:	0000031f 	.word	0x0000031f
     2fc:	200003d8 	.word	0x200003d8
     300:	00000309 	.word	0x00000309
     304:	00002f01 	.word	0x00002f01

00000308 <udi_cdc_data_sent>:
{
     308:	b510      	push	{r4, lr}
	if (UDD_EP_TRANSFER_OK != status) {
     30a:	2800      	cmp	r0, #0
     30c:	d000      	beq.n	310 <udi_cdc_data_sent+0x8>
}
     30e:	bd10      	pop	{r4, pc}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
     310:	4b07      	ldr	r3, [pc, #28]	; (330 <udi_cdc_data_sent+0x28>)
     312:	781b      	ldrb	r3, [r3, #0]
     314:	425a      	negs	r2, r3
     316:	4153      	adcs	r3, r2
     318:	005b      	lsls	r3, r3, #1
     31a:	2200      	movs	r2, #0
     31c:	4905      	ldr	r1, [pc, #20]	; (334 <udi_cdc_data_sent+0x2c>)
     31e:	5258      	strh	r0, [r3, r1]
	udi_cdc_tx_both_buf_to_send[port] = false;
     320:	4b05      	ldr	r3, [pc, #20]	; (338 <udi_cdc_data_sent+0x30>)
     322:	701a      	strb	r2, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
     324:	4b05      	ldr	r3, [pc, #20]	; (33c <udi_cdc_data_sent+0x34>)
     326:	701a      	strb	r2, [r3, #0]
	udi_cdc_tx_send(port);
     328:	4b05      	ldr	r3, [pc, #20]	; (340 <udi_cdc_data_sent+0x38>)
     32a:	4798      	blx	r3
     32c:	e7ef      	b.n	30e <udi_cdc_data_sent+0x6>
     32e:	46c0      	nop			; (mov r8, r8)
     330:	2000065c 	.word	0x2000065c
     334:	20000658 	.word	0x20000658
     338:	200003d4 	.word	0x200003d4
     33c:	20000664 	.word	0x20000664
     340:	000001a9 	.word	0x000001a9

00000344 <udi_cdc_data_sof_notify>:
{
     344:	b510      	push	{r4, lr}
	udi_cdc_tx_send(port_notify);
     346:	2000      	movs	r0, #0
     348:	4b01      	ldr	r3, [pc, #4]	; (350 <udi_cdc_data_sof_notify+0xc>)
     34a:	4798      	blx	r3
}
     34c:	bd10      	pop	{r4, pc}
     34e:	46c0      	nop			; (mov r8, r8)
     350:	000001a9 	.word	0x000001a9

00000354 <udi_cdc_data_disable>:
{
     354:	b510      	push	{r4, lr}
	udi_cdc_nb_data_enabled--;
     356:	4a06      	ldr	r2, [pc, #24]	; (370 <udi_cdc_data_disable+0x1c>)
     358:	7813      	ldrb	r3, [r2, #0]
     35a:	3b01      	subs	r3, #1
     35c:	b2db      	uxtb	r3, r3
     35e:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
     360:	7810      	ldrb	r0, [r2, #0]
     362:	b2c0      	uxtb	r0, r0
	UDI_CDC_DISABLE_EXT(port);
     364:	4b03      	ldr	r3, [pc, #12]	; (374 <udi_cdc_data_disable+0x20>)
     366:	4798      	blx	r3
	udi_cdc_data_running = false;
     368:	2200      	movs	r2, #0
     36a:	4b03      	ldr	r3, [pc, #12]	; (378 <udi_cdc_data_disable+0x24>)
     36c:	701a      	strb	r2, [r3, #0]
}
     36e:	bd10      	pop	{r4, pc}
     370:	2000013c 	.word	0x2000013c
     374:	000042dd 	.word	0x000042dd
     378:	20000132 	.word	0x20000132

0000037c <udi_cdc_comm_setup>:
{
     37c:	b510      	push	{r4, lr}
	if (Udd_setup_is_in()) {
     37e:	4b20      	ldr	r3, [pc, #128]	; (400 <STACK_SIZE>)
     380:	781a      	ldrb	r2, [r3, #0]
     382:	b253      	sxtb	r3, r2
     384:	2b00      	cmp	r3, #0
     386:	db05      	blt.n	394 <udi_cdc_comm_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     388:	2360      	movs	r3, #96	; 0x60
     38a:	4013      	ands	r3, r2
	return false;  // request Not supported
     38c:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     38e:	2b20      	cmp	r3, #32
     390:	d014      	beq.n	3bc <udi_cdc_comm_setup+0x40>
}
     392:	bd10      	pop	{r4, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     394:	2360      	movs	r3, #96	; 0x60
     396:	4013      	ands	r3, r2
	return false;  // request Not supported
     398:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     39a:	2b20      	cmp	r3, #32
     39c:	d1f9      	bne.n	392 <udi_cdc_comm_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
     39e:	4b18      	ldr	r3, [pc, #96]	; (400 <STACK_SIZE>)
     3a0:	785b      	ldrb	r3, [r3, #1]
     3a2:	2b21      	cmp	r3, #33	; 0x21
     3a4:	d129      	bne.n	3fa <udi_cdc_comm_setup+0x7e>
						udd_g_ctrlreq.req.wLength)
     3a6:	4b16      	ldr	r3, [pc, #88]	; (400 <STACK_SIZE>)
				if (sizeof(usb_cdc_line_coding_t) !=
     3a8:	88db      	ldrh	r3, [r3, #6]
     3aa:	2b07      	cmp	r3, #7
     3ac:	d1f1      	bne.n	392 <udi_cdc_comm_setup+0x16>
				udd_g_ctrlreq.payload =
     3ae:	4b14      	ldr	r3, [pc, #80]	; (400 <STACK_SIZE>)
     3b0:	4a14      	ldr	r2, [pc, #80]	; (404 <STACK_SIZE+0x4>)
     3b2:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
     3b4:	2207      	movs	r2, #7
     3b6:	819a      	strh	r2, [r3, #12]
				return true;
     3b8:	3001      	adds	r0, #1
     3ba:	e7ea      	b.n	392 <udi_cdc_comm_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
     3bc:	4b10      	ldr	r3, [pc, #64]	; (400 <STACK_SIZE>)
     3be:	785b      	ldrb	r3, [r3, #1]
     3c0:	2b20      	cmp	r3, #32
     3c2:	d003      	beq.n	3cc <udi_cdc_comm_setup+0x50>
     3c4:	2b22      	cmp	r3, #34	; 0x22
     3c6:	d00f      	beq.n	3e8 <udi_cdc_comm_setup+0x6c>
	return false;  // request Not supported
     3c8:	2000      	movs	r0, #0
     3ca:	e7e2      	b.n	392 <udi_cdc_comm_setup+0x16>
						udd_g_ctrlreq.req.wLength)
     3cc:	4b0c      	ldr	r3, [pc, #48]	; (400 <STACK_SIZE>)
				if (sizeof(usb_cdc_line_coding_t) !=
     3ce:	88db      	ldrh	r3, [r3, #6]
					return false; // Error for USB host
     3d0:	2000      	movs	r0, #0
				if (sizeof(usb_cdc_line_coding_t) !=
     3d2:	2b07      	cmp	r3, #7
     3d4:	d1dd      	bne.n	392 <udi_cdc_comm_setup+0x16>
				udd_g_ctrlreq.callback =
     3d6:	4b0a      	ldr	r3, [pc, #40]	; (400 <STACK_SIZE>)
     3d8:	4a0b      	ldr	r2, [pc, #44]	; (408 <STACK_SIZE+0x8>)
     3da:	611a      	str	r2, [r3, #16]
				udd_g_ctrlreq.payload =
     3dc:	4a09      	ldr	r2, [pc, #36]	; (404 <STACK_SIZE+0x4>)
     3de:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
     3e0:	2207      	movs	r2, #7
     3e2:	819a      	strh	r2, [r3, #12]
				return true;
     3e4:	3001      	adds	r0, #1
     3e6:	e7d4      	b.n	392 <udi_cdc_comm_setup+0x16>
				UDI_CDC_SET_DTR_EXT(port, (0 !=
     3e8:	4b05      	ldr	r3, [pc, #20]	; (400 <STACK_SIZE>)
     3ea:	885b      	ldrh	r3, [r3, #2]
     3ec:	2101      	movs	r1, #1
     3ee:	4019      	ands	r1, r3
     3f0:	2000      	movs	r0, #0
     3f2:	4b06      	ldr	r3, [pc, #24]	; (40c <STACK_SIZE+0xc>)
     3f4:	4798      	blx	r3
				return true;
     3f6:	2001      	movs	r0, #1
     3f8:	e7cb      	b.n	392 <udi_cdc_comm_setup+0x16>
	return false;  // request Not supported
     3fa:	2000      	movs	r0, #0
     3fc:	e7c9      	b.n	392 <udi_cdc_comm_setup+0x16>
     3fe:	46c0      	nop			; (mov r8, r8)
     400:	200009ec 	.word	0x200009ec
     404:	20000134 	.word	0x20000134
     408:	0000012d 	.word	0x0000012d
     40c:	000042e9 	.word	0x000042e9

00000410 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
     410:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     412:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     416:	425a      	negs	r2, r3
     418:	4153      	adcs	r3, r2
     41a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     41c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     41e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     422:	2200      	movs	r2, #0
     424:	4b0a      	ldr	r3, [pc, #40]	; (450 <udi_cdc_multi_get_nb_received_data+0x40>)
     426:	701a      	strb	r2, [r3, #0]
	return flags;
     428:	9a01      	ldr	r2, [sp, #4]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
     42a:	4b0a      	ldr	r3, [pc, #40]	; (454 <udi_cdc_multi_get_nb_received_data+0x44>)
     42c:	8819      	ldrh	r1, [r3, #0]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
     42e:	4b0a      	ldr	r3, [pc, #40]	; (458 <udi_cdc_multi_get_nb_received_data+0x48>)
     430:	781b      	ldrb	r3, [r3, #0]
     432:	005b      	lsls	r3, r3, #1
     434:	4809      	ldr	r0, [pc, #36]	; (45c <udi_cdc_multi_get_nb_received_data+0x4c>)
     436:	5a18      	ldrh	r0, [r3, r0]
     438:	1a40      	subs	r0, r0, r1
	if (cpu_irq_is_enabled_flags(flags))
     43a:	2a00      	cmp	r2, #0
     43c:	d005      	beq.n	44a <udi_cdc_multi_get_nb_received_data+0x3a>
		cpu_irq_enable();
     43e:	2201      	movs	r2, #1
     440:	4b03      	ldr	r3, [pc, #12]	; (450 <udi_cdc_multi_get_nb_received_data+0x40>)
     442:	701a      	strb	r2, [r3, #0]
     444:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     448:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
     44a:	b002      	add	sp, #8
     44c:	4770      	bx	lr
     44e:	46c0      	nop			; (mov r8, r8)
     450:	20000112 	.word	0x20000112
     454:	200003c8 	.word	0x200003c8
     458:	200003c4 	.word	0x200003c4
     45c:	200003c0 	.word	0x200003c0

00000460 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
     460:	b510      	push	{r4, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
     462:	4b03      	ldr	r3, [pc, #12]	; (470 <udi_cdc_multi_is_rx_ready+0x10>)
     464:	4798      	blx	r3
     466:	1e43      	subs	r3, r0, #1
     468:	4198      	sbcs	r0, r3
     46a:	b2c0      	uxtb	r0, r0
}
     46c:	bd10      	pop	{r4, pc}
     46e:	46c0      	nop			; (mov r8, r8)
     470:	00000411 	.word	0x00000411

00000474 <udi_cdc_rx_start>:
{
     474:	b510      	push	{r4, lr}
     476:	b084      	sub	sp, #16
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     478:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     47c:	425a      	negs	r2, r3
     47e:	4153      	adcs	r3, r2
     480:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
     482:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     484:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     488:	2200      	movs	r2, #0
     48a:	4b23      	ldr	r3, [pc, #140]	; (518 <udi_cdc_rx_start+0xa4>)
     48c:	701a      	strb	r2, [r3, #0]
	return flags;
     48e:	9b03      	ldr	r3, [sp, #12]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
     490:	4a22      	ldr	r2, [pc, #136]	; (51c <udi_cdc_rx_start+0xa8>)
     492:	7814      	ldrb	r4, [r2, #0]
     494:	b2e4      	uxtb	r4, r4
	if (udi_cdc_rx_trans_ongoing[port] ||
     496:	4a22      	ldr	r2, [pc, #136]	; (520 <udi_cdc_rx_start+0xac>)
     498:	7812      	ldrb	r2, [r2, #0]
     49a:	2a00      	cmp	r2, #0
     49c:	d107      	bne.n	4ae <udi_cdc_rx_start+0x3a>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
     49e:	4a21      	ldr	r2, [pc, #132]	; (524 <udi_cdc_rx_start+0xb0>)
     4a0:	8812      	ldrh	r2, [r2, #0]
     4a2:	0061      	lsls	r1, r4, #1
     4a4:	4820      	ldr	r0, [pc, #128]	; (528 <udi_cdc_rx_start+0xb4>)
     4a6:	5a09      	ldrh	r1, [r1, r0]
     4a8:	b292      	uxth	r2, r2
	if (udi_cdc_rx_trans_ongoing[port] ||
     4aa:	428a      	cmp	r2, r1
     4ac:	d20a      	bcs.n	4c4 <udi_cdc_rx_start+0x50>
		return false;
     4ae:	2000      	movs	r0, #0
	if (cpu_irq_is_enabled_flags(flags))
     4b0:	2b00      	cmp	r3, #0
     4b2:	d005      	beq.n	4c0 <udi_cdc_rx_start+0x4c>
		cpu_irq_enable();
     4b4:	2201      	movs	r2, #1
     4b6:	4b18      	ldr	r3, [pc, #96]	; (518 <udi_cdc_rx_start+0xa4>)
     4b8:	701a      	strb	r2, [r3, #0]
     4ba:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     4be:	b662      	cpsie	i
}
     4c0:	b004      	add	sp, #16
     4c2:	bd10      	pop	{r4, pc}
	udi_cdc_rx_pos[port] = 0;
     4c4:	2100      	movs	r1, #0
     4c6:	4a17      	ldr	r2, [pc, #92]	; (524 <udi_cdc_rx_start+0xb0>)
     4c8:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
     4ca:	4262      	negs	r2, r4
     4cc:	4162      	adcs	r2, r4
     4ce:	b2d2      	uxtb	r2, r2
     4d0:	4912      	ldr	r1, [pc, #72]	; (51c <udi_cdc_rx_start+0xa8>)
     4d2:	700a      	strb	r2, [r1, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
     4d4:	2101      	movs	r1, #1
     4d6:	4a12      	ldr	r2, [pc, #72]	; (520 <udi_cdc_rx_start+0xac>)
     4d8:	7011      	strb	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
     4da:	2b00      	cmp	r3, #0
     4dc:	d005      	beq.n	4ea <udi_cdc_rx_start+0x76>
		cpu_irq_enable();
     4de:	2201      	movs	r2, #1
     4e0:	4b0d      	ldr	r3, [pc, #52]	; (518 <udi_cdc_rx_start+0xa4>)
     4e2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
     4e4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     4e8:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
     4ea:	2000      	movs	r0, #0
     4ec:	4b0f      	ldr	r3, [pc, #60]	; (52c <udi_cdc_rx_start+0xb8>)
     4ee:	4798      	blx	r3
     4f0:	2800      	cmp	r0, #0
     4f2:	d10d      	bne.n	510 <udi_cdc_rx_start+0x9c>
			udi_cdc_rx_buf[port][buf_sel_trans],
     4f4:	00a2      	lsls	r2, r4, #2
     4f6:	1914      	adds	r4, r2, r4
     4f8:	01a4      	lsls	r4, r4, #6
     4fa:	4a0d      	ldr	r2, [pc, #52]	; (530 <udi_cdc_rx_start+0xbc>)
     4fc:	1912      	adds	r2, r2, r4
	return udd_ep_run(ep,
     4fe:	4b0d      	ldr	r3, [pc, #52]	; (534 <udi_cdc_rx_start+0xc0>)
     500:	9300      	str	r3, [sp, #0]
     502:	23a0      	movs	r3, #160	; 0xa0
     504:	005b      	lsls	r3, r3, #1
     506:	2101      	movs	r1, #1
     508:	2002      	movs	r0, #2
     50a:	4c0b      	ldr	r4, [pc, #44]	; (538 <udi_cdc_rx_start+0xc4>)
     50c:	47a0      	blx	r4
     50e:	e7d7      	b.n	4c0 <udi_cdc_rx_start+0x4c>
		UDI_CDC_RX_NOTIFY(port);
     510:	2000      	movs	r0, #0
     512:	4b0a      	ldr	r3, [pc, #40]	; (53c <udi_cdc_rx_start+0xc8>)
     514:	4798      	blx	r3
     516:	e7ed      	b.n	4f4 <udi_cdc_rx_start+0x80>
     518:	20000112 	.word	0x20000112
     51c:	200003c4 	.word	0x200003c4
     520:	200003cc 	.word	0x200003cc
     524:	200003c8 	.word	0x200003c8
     528:	200003c0 	.word	0x200003c0
     52c:	00000461 	.word	0x00000461
     530:	20000140 	.word	0x20000140
     534:	000005d1 	.word	0x000005d1
     538:	00002f01 	.word	0x00002f01
     53c:	000042eb 	.word	0x000042eb

00000540 <udi_cdc_data_enable>:
{
     540:	b570      	push	{r4, r5, r6, lr}
	udi_cdc_nb_data_enabled = 0;
     542:	2400      	movs	r4, #0
     544:	4b15      	ldr	r3, [pc, #84]	; (59c <udi_cdc_data_enable+0x5c>)
     546:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
     548:	4b15      	ldr	r3, [pc, #84]	; (5a0 <udi_cdc_data_enable+0x60>)
     54a:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
     54c:	4b15      	ldr	r3, [pc, #84]	; (5a4 <udi_cdc_data_enable+0x64>)
     54e:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
     550:	4b15      	ldr	r3, [pc, #84]	; (5a8 <udi_cdc_data_enable+0x68>)
     552:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
     554:	4b15      	ldr	r3, [pc, #84]	; (5ac <udi_cdc_data_enable+0x6c>)
     556:	2500      	movs	r5, #0
     558:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
     55a:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
     55c:	4b14      	ldr	r3, [pc, #80]	; (5b0 <udi_cdc_data_enable+0x70>)
     55e:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
     560:	2000      	movs	r0, #0
     562:	4b14      	ldr	r3, [pc, #80]	; (5b4 <udi_cdc_data_enable+0x74>)
     564:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
     566:	4b14      	ldr	r3, [pc, #80]	; (5b8 <udi_cdc_data_enable+0x78>)
     568:	701d      	strb	r5, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
     56a:	4b14      	ldr	r3, [pc, #80]	; (5bc <udi_cdc_data_enable+0x7c>)
     56c:	701d      	strb	r5, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
     56e:	4b14      	ldr	r3, [pc, #80]	; (5c0 <udi_cdc_data_enable+0x80>)
     570:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
     572:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
     574:	4b13      	ldr	r3, [pc, #76]	; (5c4 <udi_cdc_data_enable+0x84>)
     576:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
     578:	2000      	movs	r0, #0
     57a:	4b13      	ldr	r3, [pc, #76]	; (5c8 <udi_cdc_data_enable+0x88>)
     57c:	4798      	blx	r3
     57e:	2800      	cmp	r0, #0
     580:	d007      	beq.n	592 <udi_cdc_data_enable+0x52>
	udi_cdc_nb_data_enabled++;
     582:	4a06      	ldr	r2, [pc, #24]	; (59c <udi_cdc_data_enable+0x5c>)
     584:	7813      	ldrb	r3, [r2, #0]
     586:	3301      	adds	r3, #1
     588:	b2db      	uxtb	r3, r3
     58a:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
     58c:	7813      	ldrb	r3, [r2, #0]
     58e:	2b01      	cmp	r3, #1
     590:	d000      	beq.n	594 <udi_cdc_data_enable+0x54>
}
     592:	bd70      	pop	{r4, r5, r6, pc}
		udi_cdc_data_running = true;
     594:	2201      	movs	r2, #1
     596:	4b0d      	ldr	r3, [pc, #52]	; (5cc <udi_cdc_data_enable+0x8c>)
     598:	701a      	strb	r2, [r3, #0]
     59a:	e7fa      	b.n	592 <udi_cdc_data_enable+0x52>
     59c:	2000013c 	.word	0x2000013c
     5a0:	20000664 	.word	0x20000664
     5a4:	200003d4 	.word	0x200003d4
     5a8:	2000065c 	.word	0x2000065c
     5ac:	20000658 	.word	0x20000658
     5b0:	20000660 	.word	0x20000660
     5b4:	000001a9 	.word	0x000001a9
     5b8:	200003cc 	.word	0x200003cc
     5bc:	200003c4 	.word	0x200003c4
     5c0:	200003c0 	.word	0x200003c0
     5c4:	200003c8 	.word	0x200003c8
     5c8:	00000475 	.word	0x00000475
     5cc:	20000132 	.word	0x20000132

000005d0 <udi_cdc_data_received>:
{
     5d0:	b510      	push	{r4, lr}
     5d2:	b082      	sub	sp, #8
     5d4:	0014      	movs	r4, r2
	if (UDD_EP_TRANSFER_OK != status) {
     5d6:	2800      	cmp	r0, #0
     5d8:	d110      	bne.n	5fc <udi_cdc_data_received+0x2c>
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
     5da:	4b10      	ldr	r3, [pc, #64]	; (61c <udi_cdc_data_received+0x4c>)
     5dc:	781a      	ldrb	r2, [r3, #0]
     5de:	4253      	negs	r3, r2
     5e0:	415a      	adcs	r2, r3
     5e2:	b2d2      	uxtb	r2, r2
	if (!n) {
     5e4:	2900      	cmp	r1, #0
     5e6:	d00b      	beq.n	600 <udi_cdc_data_received+0x30>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
     5e8:	b289      	uxth	r1, r1
     5ea:	0052      	lsls	r2, r2, #1
     5ec:	4b0c      	ldr	r3, [pc, #48]	; (620 <udi_cdc_data_received+0x50>)
     5ee:	52d1      	strh	r1, [r2, r3]
	udi_cdc_rx_trans_ongoing[port] = false;
     5f0:	2200      	movs	r2, #0
     5f2:	4b0c      	ldr	r3, [pc, #48]	; (624 <udi_cdc_data_received+0x54>)
     5f4:	701a      	strb	r2, [r3, #0]
	udi_cdc_rx_start(port);
     5f6:	2000      	movs	r0, #0
     5f8:	4b0b      	ldr	r3, [pc, #44]	; (628 <udi_cdc_data_received+0x58>)
     5fa:	4798      	blx	r3
}
     5fc:	b002      	add	sp, #8
     5fe:	bd10      	pop	{r4, pc}
				udi_cdc_rx_buf[port][buf_sel_trans],
     600:	0093      	lsls	r3, r2, #2
     602:	189a      	adds	r2, r3, r2
     604:	0192      	lsls	r2, r2, #6
     606:	4b09      	ldr	r3, [pc, #36]	; (62c <udi_cdc_data_received+0x5c>)
     608:	189a      	adds	r2, r3, r2
		udd_ep_run( ep,
     60a:	4b09      	ldr	r3, [pc, #36]	; (630 <udi_cdc_data_received+0x60>)
     60c:	9300      	str	r3, [sp, #0]
     60e:	23a0      	movs	r3, #160	; 0xa0
     610:	005b      	lsls	r3, r3, #1
     612:	3101      	adds	r1, #1
     614:	0020      	movs	r0, r4
     616:	4c07      	ldr	r4, [pc, #28]	; (634 <udi_cdc_data_received+0x64>)
     618:	47a0      	blx	r4
		return;
     61a:	e7ef      	b.n	5fc <udi_cdc_data_received+0x2c>
     61c:	200003c4 	.word	0x200003c4
     620:	200003c0 	.word	0x200003c0
     624:	200003cc 	.word	0x200003cc
     628:	00000475 	.word	0x00000475
     62c:	20000140 	.word	0x20000140
     630:	000005d1 	.word	0x000005d1
     634:	00002f01 	.word	0x00002f01

00000638 <udi_cdc_is_rx_ready>:

bool udi_cdc_is_rx_ready(void)
{
     638:	b510      	push	{r4, lr}
	return udi_cdc_multi_is_rx_ready(0);
     63a:	2000      	movs	r0, #0
     63c:	4b01      	ldr	r3, [pc, #4]	; (644 <udi_cdc_is_rx_ready+0xc>)
     63e:	4798      	blx	r3
}
     640:	bd10      	pop	{r4, pc}
     642:	46c0      	nop			; (mov r8, r8)
     644:	00000461 	.word	0x00000461

00000648 <udi_cdc_multi_getc>:

int udi_cdc_multi_getc(uint8_t port)
{
     648:	b5f0      	push	{r4, r5, r6, r7, lr}
     64a:	46d6      	mov	lr, sl
     64c:	464f      	mov	r7, r9
     64e:	4646      	mov	r6, r8
     650:	b5c0      	push	{r6, r7, lr}
     652:	b082      	sub	sp, #8

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     654:	4b28      	ldr	r3, [pc, #160]	; (6f8 <udi_cdc_multi_getc+0xb0>)
     656:	799b      	ldrb	r3, [r3, #6]
     658:	3b09      	subs	r3, #9
     65a:	425a      	negs	r2, r3
     65c:	4153      	adcs	r3, r2
     65e:	b2db      	uxtb	r3, r3
     660:	4699      	mov	r9, r3
	int rx_data = 0;
     662:	2300      	movs	r3, #0
     664:	469c      	mov	ip, r3
	cpu_irq_disable();
     666:	4b25      	ldr	r3, [pc, #148]	; (6fc <udi_cdc_multi_getc+0xb4>)
     668:	4698      	mov	r8, r3
     66a:	2700      	movs	r7, #0

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
     66c:	4e24      	ldr	r6, [pc, #144]	; (700 <udi_cdc_multi_getc+0xb8>)
	buf_sel = udi_cdc_rx_buf_sel[port];
     66e:	4c25      	ldr	r4, [pc, #148]	; (704 <udi_cdc_multi_getc+0xbc>)
     670:	e005      	b.n	67e <udi_cdc_multi_getc+0x36>
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
	cpu_irq_restore(flags);
	while (again) {
     672:	428b      	cmp	r3, r1
     674:	d329      	bcc.n	6ca <udi_cdc_multi_getc+0x82>
		if (!udi_cdc_data_running) {
     676:	4b24      	ldr	r3, [pc, #144]	; (708 <udi_cdc_multi_getc+0xc0>)
     678:	781b      	ldrb	r3, [r3, #0]
     67a:	2b00      	cmp	r3, #0
     67c:	d01d      	beq.n	6ba <udi_cdc_multi_getc+0x72>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     67e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     682:	425a      	negs	r2, r3
     684:	4153      	adcs	r3, r2
     686:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     688:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     68a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     68e:	4643      	mov	r3, r8
     690:	701f      	strb	r7, [r3, #0]
	return flags;
     692:	9801      	ldr	r0, [sp, #4]
	pos = udi_cdc_rx_pos[port];
     694:	8833      	ldrh	r3, [r6, #0]
     696:	b29b      	uxth	r3, r3
	buf_sel = udi_cdc_rx_buf_sel[port];
     698:	7822      	ldrb	r2, [r4, #0]
     69a:	b2d2      	uxtb	r2, r2
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
     69c:	0055      	lsls	r5, r2, #1
     69e:	491b      	ldr	r1, [pc, #108]	; (70c <udi_cdc_multi_getc+0xc4>)
     6a0:	5a69      	ldrh	r1, [r5, r1]
     6a2:	b289      	uxth	r1, r1
	if (cpu_irq_is_enabled_flags(flags))
     6a4:	2800      	cmp	r0, #0
     6a6:	d0e4      	beq.n	672 <udi_cdc_multi_getc+0x2a>
		cpu_irq_enable();
     6a8:	2001      	movs	r0, #1
     6aa:	4682      	mov	sl, r0
     6ac:	4813      	ldr	r0, [pc, #76]	; (6fc <udi_cdc_multi_getc+0xb4>)
     6ae:	4655      	mov	r5, sl
     6b0:	7005      	strb	r5, [r0, #0]
     6b2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     6b6:	b662      	cpsie	i
     6b8:	e7db      	b.n	672 <udi_cdc_multi_getc+0x2a>
			return 0;
     6ba:	2500      	movs	r5, #0
		b_databit_9 = false;
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
	}
	return rx_data;
}
     6bc:	0028      	movs	r0, r5
     6be:	b002      	add	sp, #8
     6c0:	bc1c      	pop	{r2, r3, r4}
     6c2:	4690      	mov	r8, r2
     6c4:	4699      	mov	r9, r3
     6c6:	46a2      	mov	sl, r4
     6c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
     6ca:	0091      	lsls	r1, r2, #2
     6cc:	188a      	adds	r2, r1, r2
     6ce:	0192      	lsls	r2, r2, #6
     6d0:	490f      	ldr	r1, [pc, #60]	; (710 <udi_cdc_multi_getc+0xc8>)
     6d2:	188a      	adds	r2, r1, r2
     6d4:	5cd2      	ldrb	r2, [r2, r3]
     6d6:	4665      	mov	r5, ip
     6d8:	4315      	orrs	r5, r2
	udi_cdc_rx_pos[port] = pos+1;
     6da:	3301      	adds	r3, #1
     6dc:	b29b      	uxth	r3, r3
     6de:	4a08      	ldr	r2, [pc, #32]	; (700 <udi_cdc_multi_getc+0xb8>)
     6e0:	8013      	strh	r3, [r2, #0]
	udi_cdc_rx_start(port);
     6e2:	2000      	movs	r0, #0
     6e4:	4b0b      	ldr	r3, [pc, #44]	; (714 <udi_cdc_multi_getc+0xcc>)
     6e6:	4798      	blx	r3
	if (b_databit_9) {
     6e8:	464b      	mov	r3, r9
     6ea:	2b00      	cmp	r3, #0
     6ec:	d0e6      	beq.n	6bc <udi_cdc_multi_getc+0x74>
		rx_data = rx_data << 8;
     6ee:	022b      	lsls	r3, r5, #8
     6f0:	469c      	mov	ip, r3
		b_databit_9 = false;
     6f2:	2300      	movs	r3, #0
     6f4:	4699      	mov	r9, r3
		goto udi_cdc_getc_process_one_byte;
     6f6:	e7c2      	b.n	67e <udi_cdc_multi_getc+0x36>
     6f8:	20000134 	.word	0x20000134
     6fc:	20000112 	.word	0x20000112
     700:	200003c8 	.word	0x200003c8
     704:	200003c4 	.word	0x200003c4
     708:	20000132 	.word	0x20000132
     70c:	200003c0 	.word	0x200003c0
     710:	20000140 	.word	0x20000140
     714:	00000475 	.word	0x00000475

00000718 <udi_cdc_getc>:

int udi_cdc_getc(void)
{
     718:	b510      	push	{r4, lr}
	return udi_cdc_multi_getc(0);
     71a:	2000      	movs	r0, #0
     71c:	4b01      	ldr	r3, [pc, #4]	; (724 <udi_cdc_getc+0xc>)
     71e:	4798      	blx	r3
}
     720:	bd10      	pop	{r4, pc}
     722:	46c0      	nop			; (mov r8, r8)
     724:	00000649 	.word	0x00000649

00000728 <udi_cdc_multi_read_buf>:

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
     728:	b5f0      	push	{r4, r5, r6, r7, lr}
     72a:	46de      	mov	lr, fp
     72c:	4657      	mov	r7, sl
     72e:	464e      	mov	r6, r9
     730:	b5c0      	push	{r6, r7, lr}
     732:	b082      	sub	sp, #8
     734:	0015      	movs	r5, r2
	irqflags_t flags;
	uint8_t *ptr_buf = (uint8_t *)buf;
     736:	000e      	movs	r6, r1
	cpu_irq_disable();
     738:	4b27      	ldr	r3, [pc, #156]	; (7d8 <udi_cdc_multi_read_buf+0xb0>)
     73a:	469b      	mov	fp, r3
     73c:	2300      	movs	r3, #0
     73e:	469a      	mov	sl, r3
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
     740:	4b26      	ldr	r3, [pc, #152]	; (7dc <udi_cdc_multi_read_buf+0xb4>)
     742:	4699      	mov	r9, r3
	buf_sel = udi_cdc_rx_buf_sel[port];
     744:	4f26      	ldr	r7, [pc, #152]	; (7e0 <udi_cdc_multi_read_buf+0xb8>)
     746:	e01d      	b.n	784 <udi_cdc_multi_read_buf+0x5c>
		}
		goto udi_cdc_read_buf_loop_wait;
	}

	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
     748:	005a      	lsls	r2, r3, #1
     74a:	4826      	ldr	r0, [pc, #152]	; (7e4 <udi_cdc_multi_read_buf+0xbc>)
     74c:	5a12      	ldrh	r2, [r2, r0]
     74e:	1a52      	subs	r2, r2, r1
     750:	002c      	movs	r4, r5
     752:	4295      	cmp	r5, r2
     754:	d900      	bls.n	758 <udi_cdc_multi_read_buf+0x30>
     756:	0014      	movs	r4, r2
	if (copy_nb>size) {
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
     758:	009a      	lsls	r2, r3, #2
     75a:	18d3      	adds	r3, r2, r3
     75c:	019b      	lsls	r3, r3, #6
     75e:	1859      	adds	r1, r3, r1
     760:	4b21      	ldr	r3, [pc, #132]	; (7e8 <udi_cdc_multi_read_buf+0xc0>)
     762:	1859      	adds	r1, r3, r1
     764:	0022      	movs	r2, r4
     766:	0030      	movs	r0, r6
     768:	4b20      	ldr	r3, [pc, #128]	; (7ec <udi_cdc_multi_read_buf+0xc4>)
     76a:	4798      	blx	r3
	udi_cdc_rx_pos[port] += copy_nb;
     76c:	4a1b      	ldr	r2, [pc, #108]	; (7dc <udi_cdc_multi_read_buf+0xb4>)
     76e:	8813      	ldrh	r3, [r2, #0]
     770:	191b      	adds	r3, r3, r4
     772:	b29b      	uxth	r3, r3
     774:	8013      	strh	r3, [r2, #0]
	ptr_buf += copy_nb;
     776:	1936      	adds	r6, r6, r4
	size -= copy_nb;
     778:	1b2d      	subs	r5, r5, r4
	udi_cdc_rx_start(port);
     77a:	2000      	movs	r0, #0
     77c:	4b1c      	ldr	r3, [pc, #112]	; (7f0 <udi_cdc_multi_read_buf+0xc8>)
     77e:	4798      	blx	r3

	if (size) {
     780:	2d00      	cmp	r5, #0
     782:	d022      	beq.n	7ca <udi_cdc_multi_read_buf+0xa2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     784:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     788:	425a      	negs	r2, r3
     78a:	4153      	adcs	r3, r2
     78c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     78e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     790:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     794:	465b      	mov	r3, fp
     796:	4652      	mov	r2, sl
     798:	701a      	strb	r2, [r3, #0]
	return flags;
     79a:	9801      	ldr	r0, [sp, #4]
	pos = udi_cdc_rx_pos[port];
     79c:	464b      	mov	r3, r9
     79e:	8819      	ldrh	r1, [r3, #0]
     7a0:	b289      	uxth	r1, r1
	buf_sel = udi_cdc_rx_buf_sel[port];
     7a2:	783b      	ldrb	r3, [r7, #0]
     7a4:	b2db      	uxtb	r3, r3
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
     7a6:	005c      	lsls	r4, r3, #1
     7a8:	4a0e      	ldr	r2, [pc, #56]	; (7e4 <udi_cdc_multi_read_buf+0xbc>)
     7aa:	5aa2      	ldrh	r2, [r4, r2]
     7ac:	b292      	uxth	r2, r2
	if (cpu_irq_is_enabled_flags(flags))
     7ae:	2800      	cmp	r0, #0
     7b0:	d005      	beq.n	7be <udi_cdc_multi_read_buf+0x96>
		cpu_irq_enable();
     7b2:	2401      	movs	r4, #1
     7b4:	4808      	ldr	r0, [pc, #32]	; (7d8 <udi_cdc_multi_read_buf+0xb0>)
     7b6:	7004      	strb	r4, [r0, #0]
     7b8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     7bc:	b662      	cpsie	i
	while (again) {
     7be:	4291      	cmp	r1, r2
     7c0:	d3c2      	bcc.n	748 <udi_cdc_multi_read_buf+0x20>
		if (!udi_cdc_data_running) {
     7c2:	4b0c      	ldr	r3, [pc, #48]	; (7f4 <udi_cdc_multi_read_buf+0xcc>)
     7c4:	781b      	ldrb	r3, [r3, #0]
     7c6:	2b00      	cmp	r3, #0
     7c8:	d1dc      	bne.n	784 <udi_cdc_multi_read_buf+0x5c>
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
}
     7ca:	0028      	movs	r0, r5
     7cc:	b002      	add	sp, #8
     7ce:	bc1c      	pop	{r2, r3, r4}
     7d0:	4691      	mov	r9, r2
     7d2:	469a      	mov	sl, r3
     7d4:	46a3      	mov	fp, r4
     7d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     7d8:	20000112 	.word	0x20000112
     7dc:	200003c8 	.word	0x200003c8
     7e0:	200003c4 	.word	0x200003c4
     7e4:	200003c0 	.word	0x200003c0
     7e8:	20000140 	.word	0x20000140
     7ec:	0000508d 	.word	0x0000508d
     7f0:	00000475 	.word	0x00000475
     7f4:	20000132 	.word	0x20000132

000007f8 <udi_cdc_multi_read_no_polling>:

iram_size_t udi_cdc_multi_read_no_polling(uint8_t port, void* buf, iram_size_t size)
{
     7f8:	b570      	push	{r4, r5, r6, lr}
     7fa:	b082      	sub	sp, #8
     7fc:	0008      	movs	r0, r1
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	//Data interface not started... exit
	if (!udi_cdc_data_running) {
     7fe:	4b29      	ldr	r3, [pc, #164]	; (8a4 <udi_cdc_multi_read_no_polling+0xac>)
     800:	781b      	ldrb	r3, [r3, #0]
		return 0;
     802:	2400      	movs	r4, #0
	if (!udi_cdc_data_running) {
     804:	2b00      	cmp	r3, #0
     806:	d023      	beq.n	850 <udi_cdc_multi_read_no_polling+0x58>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     808:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     80c:	4259      	negs	r1, r3
     80e:	414b      	adcs	r3, r1
     810:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     812:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     814:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     818:	2100      	movs	r1, #0
     81a:	4b23      	ldr	r3, [pc, #140]	; (8a8 <udi_cdc_multi_read_no_polling+0xb0>)
     81c:	7019      	strb	r1, [r3, #0]
	return flags;
     81e:	9d00      	ldr	r5, [sp, #0]
	}
	
	//Get number of available data
	// Check available data
	flags = cpu_irq_save(); // to protect udi_cdc_rx_pos & udi_cdc_rx_buf_sel
	pos = udi_cdc_rx_pos[port];
     820:	4b22      	ldr	r3, [pc, #136]	; (8ac <udi_cdc_multi_read_no_polling+0xb4>)
     822:	8819      	ldrh	r1, [r3, #0]
     824:	b289      	uxth	r1, r1
	buf_sel = udi_cdc_rx_buf_sel[port];
     826:	4b22      	ldr	r3, [pc, #136]	; (8b0 <udi_cdc_multi_read_no_polling+0xb8>)
     828:	781b      	ldrb	r3, [r3, #0]
     82a:	b2db      	uxtb	r3, r3
	nb_avail_data = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
     82c:	005e      	lsls	r6, r3, #1
     82e:	4c21      	ldr	r4, [pc, #132]	; (8b4 <udi_cdc_multi_read_no_polling+0xbc>)
     830:	5b34      	ldrh	r4, [r6, r4]
     832:	1a64      	subs	r4, r4, r1
	if (cpu_irq_is_enabled_flags(flags))
     834:	2d00      	cmp	r5, #0
     836:	d005      	beq.n	844 <udi_cdc_multi_read_no_polling+0x4c>
		cpu_irq_enable();
     838:	2601      	movs	r6, #1
     83a:	4d1b      	ldr	r5, [pc, #108]	; (8a8 <udi_cdc_multi_read_no_polling+0xb0>)
     83c:	702e      	strb	r6, [r5, #0]
     83e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     842:	b662      	cpsie	i
     844:	0025      	movs	r5, r4
     846:	4294      	cmp	r4, r2
     848:	d900      	bls.n	84c <udi_cdc_multi_read_no_polling+0x54>
     84a:	0015      	movs	r5, r2
	//If the buffer contains less than the requested number of data,
	//adjust read size
	if(nb_avail_data<size) {
		size = nb_avail_data;
	}
	if(size>0) {
     84c:	2d00      	cmp	r5, #0
     84e:	d102      	bne.n	856 <udi_cdc_multi_read_no_polling+0x5e>
		
		ptr_buf += size;
		udi_cdc_rx_start(port);
	}
	return(nb_avail_data);
}
     850:	0020      	movs	r0, r4
     852:	b002      	add	sp, #8
     854:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], size);
     856:	009a      	lsls	r2, r3, #2
     858:	18d3      	adds	r3, r2, r3
     85a:	019b      	lsls	r3, r3, #6
     85c:	1859      	adds	r1, r3, r1
     85e:	4b16      	ldr	r3, [pc, #88]	; (8b8 <udi_cdc_multi_read_no_polling+0xc0>)
     860:	1859      	adds	r1, r3, r1
     862:	002a      	movs	r2, r5
     864:	4b15      	ldr	r3, [pc, #84]	; (8bc <udi_cdc_multi_read_no_polling+0xc4>)
     866:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     868:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     86c:	425a      	negs	r2, r3
     86e:	4153      	adcs	r3, r2
     870:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     872:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     874:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     878:	2200      	movs	r2, #0
     87a:	4b0b      	ldr	r3, [pc, #44]	; (8a8 <udi_cdc_multi_read_no_polling+0xb0>)
     87c:	701a      	strb	r2, [r3, #0]
	return flags;
     87e:	9901      	ldr	r1, [sp, #4]
		udi_cdc_rx_pos[port] += size;
     880:	4a0a      	ldr	r2, [pc, #40]	; (8ac <udi_cdc_multi_read_no_polling+0xb4>)
     882:	8813      	ldrh	r3, [r2, #0]
     884:	195d      	adds	r5, r3, r5
     886:	b2ad      	uxth	r5, r5
     888:	8015      	strh	r5, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
     88a:	2900      	cmp	r1, #0
     88c:	d005      	beq.n	89a <udi_cdc_multi_read_no_polling+0xa2>
		cpu_irq_enable();
     88e:	2201      	movs	r2, #1
     890:	4b05      	ldr	r3, [pc, #20]	; (8a8 <udi_cdc_multi_read_no_polling+0xb0>)
     892:	701a      	strb	r2, [r3, #0]
     894:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     898:	b662      	cpsie	i
		udi_cdc_rx_start(port);
     89a:	2000      	movs	r0, #0
     89c:	4b08      	ldr	r3, [pc, #32]	; (8c0 <udi_cdc_multi_read_no_polling+0xc8>)
     89e:	4798      	blx	r3
     8a0:	e7d6      	b.n	850 <udi_cdc_multi_read_no_polling+0x58>
     8a2:	46c0      	nop			; (mov r8, r8)
     8a4:	20000132 	.word	0x20000132
     8a8:	20000112 	.word	0x20000112
     8ac:	200003c8 	.word	0x200003c8
     8b0:	200003c4 	.word	0x200003c4
     8b4:	200003c0 	.word	0x200003c0
     8b8:	20000140 	.word	0x20000140
     8bc:	0000508d 	.word	0x0000508d
     8c0:	00000475 	.word	0x00000475

000008c4 <udi_cdc_read_no_polling>:

iram_size_t udi_cdc_read_no_polling(void* buf, iram_size_t size)
{
     8c4:	b510      	push	{r4, lr}
     8c6:	000a      	movs	r2, r1
	return udi_cdc_multi_read_no_polling(0, buf, size);
     8c8:	0001      	movs	r1, r0
     8ca:	2000      	movs	r0, #0
     8cc:	4b01      	ldr	r3, [pc, #4]	; (8d4 <udi_cdc_read_no_polling+0x10>)
     8ce:	4798      	blx	r3
}
     8d0:	bd10      	pop	{r4, pc}
     8d2:	46c0      	nop			; (mov r8, r8)
     8d4:	000007f9 	.word	0x000007f9

000008d8 <udi_cdc_read_buf>:

iram_size_t udi_cdc_read_buf(void* buf, iram_size_t size)
{
     8d8:	b510      	push	{r4, lr}
     8da:	000a      	movs	r2, r1
	return udi_cdc_multi_read_buf(0, buf, size);
     8dc:	0001      	movs	r1, r0
     8de:	2000      	movs	r0, #0
     8e0:	4b01      	ldr	r3, [pc, #4]	; (8e8 <udi_cdc_read_buf+0x10>)
     8e2:	4798      	blx	r3
}
     8e4:	bd10      	pop	{r4, pc}
     8e6:	46c0      	nop			; (mov r8, r8)
     8e8:	00000729 	.word	0x00000729

000008ec <udi_cdc_multi_get_free_tx_buffer>:

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
     8ec:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     8ee:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     8f2:	425a      	negs	r2, r3
     8f4:	4153      	adcs	r3, r2
     8f6:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     8f8:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     8fa:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     8fe:	2200      	movs	r2, #0
     900:	4b15      	ldr	r3, [pc, #84]	; (958 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
     902:	701a      	strb	r2, [r3, #0]
	return flags;
     904:	9901      	ldr	r1, [sp, #4]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     906:	4b15      	ldr	r3, [pc, #84]	; (95c <udi_cdc_multi_get_free_tx_buffer+0x70>)
     908:	781b      	ldrb	r3, [r3, #0]
     90a:	b2db      	uxtb	r3, r3
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
     90c:	0058      	lsls	r0, r3, #1
     90e:	4a14      	ldr	r2, [pc, #80]	; (960 <udi_cdc_multi_get_free_tx_buffer+0x74>)
     910:	5a82      	ldrh	r2, [r0, r2]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
     912:	20a0      	movs	r0, #160	; 0xa0
     914:	0040      	lsls	r0, r0, #1
     916:	4282      	cmp	r2, r0
     918:	d00c      	beq.n	934 <udi_cdc_multi_get_free_tx_buffer+0x48>
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
     91a:	20a0      	movs	r0, #160	; 0xa0
     91c:	0040      	lsls	r0, r0, #1
     91e:	1a80      	subs	r0, r0, r2
	if (cpu_irq_is_enabled_flags(flags))
     920:	2900      	cmp	r1, #0
     922:	d005      	beq.n	930 <udi_cdc_multi_get_free_tx_buffer+0x44>
		cpu_irq_enable();
     924:	2201      	movs	r2, #1
     926:	4b0c      	ldr	r3, [pc, #48]	; (958 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
     928:	701a      	strb	r2, [r3, #0]
     92a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     92e:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return retval;
}
     930:	b002      	add	sp, #8
     932:	4770      	bx	lr
		if ((!udi_cdc_tx_trans_ongoing[port])
     934:	480b      	ldr	r0, [pc, #44]	; (964 <udi_cdc_multi_get_free_tx_buffer+0x78>)
     936:	7800      	ldrb	r0, [r0, #0]
     938:	2800      	cmp	r0, #0
     93a:	d1ee      	bne.n	91a <udi_cdc_multi_get_free_tx_buffer+0x2e>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
     93c:	480a      	ldr	r0, [pc, #40]	; (968 <udi_cdc_multi_get_free_tx_buffer+0x7c>)
     93e:	7800      	ldrb	r0, [r0, #0]
     940:	2800      	cmp	r0, #0
     942:	d1ea      	bne.n	91a <udi_cdc_multi_get_free_tx_buffer+0x2e>
			udi_cdc_tx_both_buf_to_send[port] = true;
     944:	3001      	adds	r0, #1
     946:	4a08      	ldr	r2, [pc, #32]	; (968 <udi_cdc_multi_get_free_tx_buffer+0x7c>)
     948:	7010      	strb	r0, [r2, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
     94a:	425a      	negs	r2, r3
     94c:	4153      	adcs	r3, r2
     94e:	b2db      	uxtb	r3, r3
     950:	4a02      	ldr	r2, [pc, #8]	; (95c <udi_cdc_multi_get_free_tx_buffer+0x70>)
     952:	7013      	strb	r3, [r2, #0]
			buf_sel_nb = 0;
     954:	2200      	movs	r2, #0
     956:	e7e0      	b.n	91a <udi_cdc_multi_get_free_tx_buffer+0x2e>
     958:	20000112 	.word	0x20000112
     95c:	2000065c 	.word	0x2000065c
     960:	20000658 	.word	0x20000658
     964:	20000664 	.word	0x20000664
     968:	200003d4 	.word	0x200003d4

0000096c <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
     96c:	b510      	push	{r4, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
     96e:	4b03      	ldr	r3, [pc, #12]	; (97c <udi_cdc_multi_is_tx_ready+0x10>)
     970:	4798      	blx	r3
     972:	1e43      	subs	r3, r0, #1
     974:	4198      	sbcs	r0, r3
     976:	b2c0      	uxtb	r0, r0
}
     978:	bd10      	pop	{r4, pc}
     97a:	46c0      	nop			; (mov r8, r8)
     97c:	000008ed 	.word	0x000008ed

00000980 <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
     980:	b5f0      	push	{r4, r5, r6, r7, lr}
     982:	46de      	mov	lr, fp
     984:	4657      	mov	r7, sl
     986:	464e      	mov	r6, r9
     988:	4645      	mov	r5, r8
     98a:	b5e0      	push	{r5, r6, r7, lr}
     98c:	b083      	sub	sp, #12
     98e:	000c      	movs	r4, r1

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     990:	4b23      	ldr	r3, [pc, #140]	; (a20 <udi_cdc_multi_putc+0xa0>)
     992:	799d      	ldrb	r5, [r3, #6]
     994:	3d09      	subs	r5, #9
     996:	426b      	negs	r3, r5
     998:	415d      	adcs	r5, r3
     99a:	b2ed      	uxtb	r5, r5

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     99c:	4e21      	ldr	r6, [pc, #132]	; (a24 <udi_cdc_multi_putc+0xa4>)
	cpu_irq_disable();
     99e:	4b22      	ldr	r3, [pc, #136]	; (a28 <udi_cdc_multi_putc+0xa8>)
     9a0:	4698      	mov	r8, r3
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     9a2:	4b22      	ldr	r3, [pc, #136]	; (a2c <udi_cdc_multi_putc+0xac>)
     9a4:	469a      	mov	sl, r3
     9a6:	e029      	b.n	9fc <udi_cdc_multi_putc+0x7c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     9a8:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     9ac:	425a      	negs	r2, r3
     9ae:	4153      	adcs	r3, r2
     9b0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     9b2:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     9b4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     9b8:	2300      	movs	r3, #0
     9ba:	4642      	mov	r2, r8
     9bc:	7013      	strb	r3, [r2, #0]
	return flags;
     9be:	9b01      	ldr	r3, [sp, #4]
     9c0:	469b      	mov	fp, r3
     9c2:	4653      	mov	r3, sl
     9c4:	781a      	ldrb	r2, [r3, #0]
     9c6:	b2d2      	uxtb	r2, r2
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
     9c8:	4b19      	ldr	r3, [pc, #100]	; (a30 <udi_cdc_multi_putc+0xb0>)
     9ca:	469c      	mov	ip, r3
     9cc:	0057      	lsls	r7, r2, #1
     9ce:	5af8      	ldrh	r0, [r7, r3]
     9d0:	1c43      	adds	r3, r0, #1
     9d2:	4661      	mov	r1, ip
     9d4:	527b      	strh	r3, [r7, r1]
     9d6:	0093      	lsls	r3, r2, #2
     9d8:	189b      	adds	r3, r3, r2
     9da:	019b      	lsls	r3, r3, #6
     9dc:	4a15      	ldr	r2, [pc, #84]	; (a34 <udi_cdc_multi_putc+0xb4>)
     9de:	18d3      	adds	r3, r2, r3
     9e0:	541c      	strb	r4, [r3, r0]
	if (cpu_irq_is_enabled_flags(flags))
     9e2:	465b      	mov	r3, fp
     9e4:	2b00      	cmp	r3, #0
     9e6:	d005      	beq.n	9f4 <udi_cdc_multi_putc+0x74>
		cpu_irq_enable();
     9e8:	2201      	movs	r2, #1
     9ea:	4b0f      	ldr	r3, [pc, #60]	; (a28 <udi_cdc_multi_putc+0xa8>)
     9ec:	701a      	strb	r2, [r3, #0]
     9ee:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     9f2:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (b_databit_9) {
     9f4:	2d00      	cmp	r5, #0
     9f6:	d010      	beq.n	a1a <udi_cdc_multi_putc+0x9a>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
     9f8:	1224      	asrs	r4, r4, #8
		b_databit_9 = false;
     9fa:	2500      	movs	r5, #0
	if (!udi_cdc_multi_is_tx_ready(port)) {
     9fc:	2000      	movs	r0, #0
     9fe:	47b0      	blx	r6
     a00:	2800      	cmp	r0, #0
     a02:	d1d1      	bne.n	9a8 <udi_cdc_multi_putc+0x28>
		if (!udi_cdc_data_running) {
     a04:	4b0c      	ldr	r3, [pc, #48]	; (a38 <udi_cdc_multi_putc+0xb8>)
     a06:	781b      	ldrb	r3, [r3, #0]
     a08:	2b00      	cmp	r3, #0
     a0a:	d1f7      	bne.n	9fc <udi_cdc_multi_putc+0x7c>
		goto udi_cdc_putc_process_one_byte;
	}
	return true;
}
     a0c:	b003      	add	sp, #12
     a0e:	bc3c      	pop	{r2, r3, r4, r5}
     a10:	4690      	mov	r8, r2
     a12:	4699      	mov	r9, r3
     a14:	46a2      	mov	sl, r4
     a16:	46ab      	mov	fp, r5
     a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
     a1a:	2001      	movs	r0, #1
     a1c:	e7f6      	b.n	a0c <udi_cdc_multi_putc+0x8c>
     a1e:	46c0      	nop			; (mov r8, r8)
     a20:	20000134 	.word	0x20000134
     a24:	0000096d 	.word	0x0000096d
     a28:	20000112 	.word	0x20000112
     a2c:	2000065c 	.word	0x2000065c
     a30:	20000658 	.word	0x20000658
     a34:	200003d8 	.word	0x200003d8
     a38:	20000132 	.word	0x20000132

00000a3c <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
     a3c:	b510      	push	{r4, lr}
     a3e:	0001      	movs	r1, r0
	return udi_cdc_multi_putc(0, value);
     a40:	2000      	movs	r0, #0
     a42:	4b01      	ldr	r3, [pc, #4]	; (a48 <udi_cdc_putc+0xc>)
     a44:	4798      	blx	r3
}
     a46:	bd10      	pop	{r4, pc}
     a48:	00000981 	.word	0x00000981

00000a4c <udi_cdc_multi_write_buf>:

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
     a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a4e:	46de      	mov	lr, fp
     a50:	4657      	mov	r7, sl
     a52:	464e      	mov	r6, r9
     a54:	4645      	mov	r5, r8
     a56:	b5e0      	push	{r5, r6, r7, lr}
     a58:	b083      	sub	sp, #12
     a5a:	0017      	movs	r7, r2

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (9 == udi_cdc_line_coding[port].bDataBits) {
     a5c:	4b27      	ldr	r3, [pc, #156]	; (afc <udi_cdc_multi_write_buf+0xb0>)
     a5e:	799b      	ldrb	r3, [r3, #6]
     a60:	2b09      	cmp	r3, #9
     a62:	d005      	beq.n	a70 <udi_cdc_multi_write_buf+0x24>
{
     a64:	4688      	mov	r8, r1
		size *=2;
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     a66:	4b26      	ldr	r3, [pc, #152]	; (b00 <udi_cdc_multi_write_buf+0xb4>)
     a68:	4699      	mov	r9, r3
	cpu_irq_disable();
     a6a:	4b26      	ldr	r3, [pc, #152]	; (b04 <udi_cdc_multi_write_buf+0xb8>)
     a6c:	469b      	mov	fp, r3
     a6e:	e035      	b.n	adc <udi_cdc_multi_write_buf+0x90>
		size *=2;
     a70:	0057      	lsls	r7, r2, #1
     a72:	e7f7      	b.n	a64 <udi_cdc_multi_write_buf+0x18>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     a74:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     a78:	425a      	negs	r2, r3
     a7a:	4153      	adcs	r3, r2
     a7c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     a7e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     a80:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     a84:	2300      	movs	r3, #0
     a86:	465a      	mov	r2, fp
     a88:	7013      	strb	r3, [r2, #0]
	return flags;
     a8a:	9b01      	ldr	r3, [sp, #4]
     a8c:	469a      	mov	sl, r3
		goto udi_cdc_write_buf_loop_wait;
	}

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     a8e:	4b1e      	ldr	r3, [pc, #120]	; (b08 <udi_cdc_multi_write_buf+0xbc>)
     a90:	781c      	ldrb	r4, [r3, #0]
     a92:	b2e4      	uxtb	r4, r4
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
     a94:	0062      	lsls	r2, r4, #1
     a96:	4b1d      	ldr	r3, [pc, #116]	; (b0c <udi_cdc_multi_write_buf+0xc0>)
     a98:	5ad5      	ldrh	r5, [r2, r3]
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
     a9a:	23a0      	movs	r3, #160	; 0xa0
     a9c:	005b      	lsls	r3, r3, #1
     a9e:	1b5b      	subs	r3, r3, r5
     aa0:	003e      	movs	r6, r7
     aa2:	429f      	cmp	r7, r3
     aa4:	d900      	bls.n	aa8 <udi_cdc_multi_write_buf+0x5c>
     aa6:	001e      	movs	r6, r3
	if (copy_nb > size) {
		copy_nb = size;
	}
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
     aa8:	00a0      	lsls	r0, r4, #2
     aaa:	1900      	adds	r0, r0, r4
     aac:	0180      	lsls	r0, r0, #6
     aae:	1940      	adds	r0, r0, r5
     ab0:	4b17      	ldr	r3, [pc, #92]	; (b10 <udi_cdc_multi_write_buf+0xc4>)
     ab2:	1818      	adds	r0, r3, r0
     ab4:	0032      	movs	r2, r6
     ab6:	4641      	mov	r1, r8
     ab8:	4b16      	ldr	r3, [pc, #88]	; (b14 <udi_cdc_multi_write_buf+0xc8>)
     aba:	4798      	blx	r3
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
     abc:	0064      	lsls	r4, r4, #1
     abe:	19ad      	adds	r5, r5, r6
     ac0:	4b12      	ldr	r3, [pc, #72]	; (b0c <udi_cdc_multi_write_buf+0xc0>)
     ac2:	52e5      	strh	r5, [r4, r3]
	if (cpu_irq_is_enabled_flags(flags))
     ac4:	4653      	mov	r3, sl
     ac6:	2b00      	cmp	r3, #0
     ac8:	d005      	beq.n	ad6 <udi_cdc_multi_write_buf+0x8a>
		cpu_irq_enable();
     aca:	2201      	movs	r2, #1
     acc:	4b0d      	ldr	r3, [pc, #52]	; (b04 <udi_cdc_multi_write_buf+0xb8>)
     ace:	701a      	strb	r2, [r3, #0]
     ad0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     ad4:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
     ad6:	44b0      	add	r8, r6
	size -= copy_nb;
     ad8:	1bbf      	subs	r7, r7, r6

	if (size) {
     ada:	d007      	beq.n	aec <udi_cdc_multi_write_buf+0xa0>
	if (!udi_cdc_multi_is_tx_ready(port)) {
     adc:	2000      	movs	r0, #0
     ade:	47c8      	blx	r9
     ae0:	2800      	cmp	r0, #0
     ae2:	d1c7      	bne.n	a74 <udi_cdc_multi_write_buf+0x28>
		if (!udi_cdc_data_running) {
     ae4:	4b0c      	ldr	r3, [pc, #48]	; (b18 <udi_cdc_multi_write_buf+0xcc>)
     ae6:	781b      	ldrb	r3, [r3, #0]
     ae8:	2b00      	cmp	r3, #0
     aea:	d1f7      	bne.n	adc <udi_cdc_multi_write_buf+0x90>
		goto udi_cdc_write_buf_loop_wait;
	}

	return 0;
}
     aec:	0038      	movs	r0, r7
     aee:	b003      	add	sp, #12
     af0:	bc3c      	pop	{r2, r3, r4, r5}
     af2:	4690      	mov	r8, r2
     af4:	4699      	mov	r9, r3
     af6:	46a2      	mov	sl, r4
     af8:	46ab      	mov	fp, r5
     afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     afc:	20000134 	.word	0x20000134
     b00:	0000096d 	.word	0x0000096d
     b04:	20000112 	.word	0x20000112
     b08:	2000065c 	.word	0x2000065c
     b0c:	20000658 	.word	0x20000658
     b10:	200003d8 	.word	0x200003d8
     b14:	0000508d 	.word	0x0000508d
     b18:	20000132 	.word	0x20000132

00000b1c <udi_cdc_write_buf>:

iram_size_t udi_cdc_write_buf(const void* buf, iram_size_t size)
{
     b1c:	b510      	push	{r4, lr}
     b1e:	000a      	movs	r2, r1
	return udi_cdc_multi_write_buf(0, buf, size);
     b20:	0001      	movs	r1, r0
     b22:	2000      	movs	r0, #0
     b24:	4b01      	ldr	r3, [pc, #4]	; (b2c <udi_cdc_write_buf+0x10>)
     b26:	4798      	blx	r3
}
     b28:	bd10      	pop	{r4, pc}
     b2a:	46c0      	nop			; (mov r8, r8)
     b2c:	00000a4d 	.word	0x00000a4d

00000b30 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
     b30:	b510      	push	{r4, lr}
			udc_ptr_conf->desc +
     b32:	4b11      	ldr	r3, [pc, #68]	; (b78 <udc_next_desc_in_iface+0x48>)
     b34:	681b      	ldr	r3, [r3, #0]
     b36:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     b38:	7894      	ldrb	r4, [r2, #2]
     b3a:	78d3      	ldrb	r3, [r2, #3]
     b3c:	021b      	lsls	r3, r3, #8
     b3e:	4323      	orrs	r3, r4
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     b40:	18d2      	adds	r2, r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
     b42:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     b44:	18c0      	adds	r0, r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
     b46:	4290      	cmp	r0, r2
     b48:	d210      	bcs.n	b6c <udc_next_desc_in_iface+0x3c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     b4a:	7843      	ldrb	r3, [r0, #1]
     b4c:	2b04      	cmp	r3, #4
     b4e:	d00f      	beq.n	b70 <udc_next_desc_in_iface+0x40>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
     b50:	428b      	cmp	r3, r1
     b52:	d00a      	beq.n	b6a <udc_next_desc_in_iface+0x3a>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
     b54:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     b56:	18c0      	adds	r0, r0, r3
	while (ptr_eof_desc > desc) {
     b58:	4290      	cmp	r0, r2
     b5a:	d205      	bcs.n	b68 <udc_next_desc_in_iface+0x38>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     b5c:	7843      	ldrb	r3, [r0, #1]
     b5e:	2b04      	cmp	r3, #4
     b60:	d008      	beq.n	b74 <udc_next_desc_in_iface+0x44>
		if (desc_id == desc->bDescriptorType) {
     b62:	428b      	cmp	r3, r1
     b64:	d1f6      	bne.n	b54 <udc_next_desc_in_iface+0x24>
     b66:	e000      	b.n	b6a <udc_next_desc_in_iface+0x3a>
	}
	return NULL; // No specific descriptor found
     b68:	2000      	movs	r0, #0
}
     b6a:	bd10      	pop	{r4, pc}
	return NULL; // No specific descriptor found
     b6c:	2000      	movs	r0, #0
     b6e:	e7fc      	b.n	b6a <udc_next_desc_in_iface+0x3a>
     b70:	2000      	movs	r0, #0
     b72:	e7fa      	b.n	b6a <udc_next_desc_in_iface+0x3a>
     b74:	2000      	movs	r0, #0
     b76:	e7f8      	b.n	b6a <udc_next_desc_in_iface+0x3a>
     b78:	20000680 	.word	0x20000680

00000b7c <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
     b7c:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
     b7e:	4b03      	ldr	r3, [pc, #12]	; (b8c <udc_valid_address+0x10>)
     b80:	885b      	ldrh	r3, [r3, #2]
     b82:	207f      	movs	r0, #127	; 0x7f
     b84:	4018      	ands	r0, r3
     b86:	4b02      	ldr	r3, [pc, #8]	; (b90 <udc_valid_address+0x14>)
     b88:	4798      	blx	r3
}
     b8a:	bd10      	pop	{r4, pc}
     b8c:	200009ec 	.word	0x200009ec
     b90:	000030d9 	.word	0x000030d9

00000b94 <udc_update_iface_desc>:
{
     b94:	b570      	push	{r4, r5, r6, lr}
	if (0 == udc_num_configuration) {
     b96:	4b19      	ldr	r3, [pc, #100]	; (bfc <udc_update_iface_desc+0x68>)
     b98:	781b      	ldrb	r3, [r3, #0]
		return false;
     b9a:	2200      	movs	r2, #0
	if (0 == udc_num_configuration) {
     b9c:	2b00      	cmp	r3, #0
     b9e:	d029      	beq.n	bf4 <udc_update_iface_desc+0x60>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     ba0:	4b17      	ldr	r3, [pc, #92]	; (c00 <udc_update_iface_desc+0x6c>)
     ba2:	681b      	ldr	r3, [r3, #0]
     ba4:	681b      	ldr	r3, [r3, #0]
     ba6:	791c      	ldrb	r4, [r3, #4]
     ba8:	4284      	cmp	r4, r0
     baa:	d923      	bls.n	bf4 <udc_update_iface_desc+0x60>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
     bac:	4a15      	ldr	r2, [pc, #84]	; (c04 <udc_update_iface_desc+0x70>)
     bae:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     bb0:	789a      	ldrb	r2, [r3, #2]
     bb2:	78dc      	ldrb	r4, [r3, #3]
     bb4:	0224      	lsls	r4, r4, #8
     bb6:	4314      	orrs	r4, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     bb8:	191c      	adds	r4, r3, r4
	while (ptr_end_desc >
     bba:	42a3      	cmp	r3, r4
     bbc:	d21c      	bcs.n	bf8 <udc_update_iface_desc+0x64>
     bbe:	2500      	movs	r5, #0
     bc0:	2601      	movs	r6, #1
     bc2:	e007      	b.n	bd4 <udc_update_iface_desc+0x40>
     bc4:	4a0f      	ldr	r2, [pc, #60]	; (c04 <udc_update_iface_desc+0x70>)
     bc6:	6013      	str	r3, [r2, #0]
     bc8:	e00f      	b.n	bea <udc_update_iface_desc+0x56>
				udc_ptr_iface->bLength);
     bca:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
     bcc:	189b      	adds	r3, r3, r2
     bce:	0035      	movs	r5, r6
	while (ptr_end_desc >
     bd0:	42a3      	cmp	r3, r4
     bd2:	d20c      	bcs.n	bee <udc_update_iface_desc+0x5a>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
     bd4:	785a      	ldrb	r2, [r3, #1]
     bd6:	2a04      	cmp	r2, #4
     bd8:	d1f7      	bne.n	bca <udc_update_iface_desc+0x36>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
     bda:	789a      	ldrb	r2, [r3, #2]
     bdc:	4282      	cmp	r2, r0
     bde:	d1f4      	bne.n	bca <udc_update_iface_desc+0x36>
     be0:	78da      	ldrb	r2, [r3, #3]
     be2:	428a      	cmp	r2, r1
     be4:	d1f1      	bne.n	bca <udc_update_iface_desc+0x36>
     be6:	2d00      	cmp	r5, #0
     be8:	d1ec      	bne.n	bc4 <udc_update_iface_desc+0x30>
				return true; // Interface found
     bea:	2201      	movs	r2, #1
     bec:	e002      	b.n	bf4 <udc_update_iface_desc+0x60>
     bee:	4a05      	ldr	r2, [pc, #20]	; (c04 <udc_update_iface_desc+0x70>)
     bf0:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
     bf2:	2200      	movs	r2, #0
}
     bf4:	0010      	movs	r0, r2
     bf6:	bd70      	pop	{r4, r5, r6, pc}
	return false; // Interface not found
     bf8:	2200      	movs	r2, #0
     bfa:	e7fb      	b.n	bf4 <udc_update_iface_desc+0x60>
     bfc:	2000067c 	.word	0x2000067c
     c00:	20000680 	.word	0x20000680
     c04:	20000684 	.word	0x20000684

00000c08 <udc_iface_disable>:
{
     c08:	b5f0      	push	{r4, r5, r6, r7, lr}
     c0a:	46c6      	mov	lr, r8
     c0c:	b500      	push	{lr}
     c0e:	0004      	movs	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
     c10:	2100      	movs	r1, #0
     c12:	4b13      	ldr	r3, [pc, #76]	; (c60 <udc_iface_disable+0x58>)
     c14:	4798      	blx	r3
     c16:	1e05      	subs	r5, r0, #0
     c18:	d103      	bne.n	c22 <udc_iface_disable+0x1a>
}
     c1a:	0028      	movs	r0, r5
     c1c:	bc04      	pop	{r2}
     c1e:	4690      	mov	r8, r2
     c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     c22:	4b10      	ldr	r3, [pc, #64]	; (c64 <udc_iface_disable+0x5c>)
     c24:	681b      	ldr	r3, [r3, #0]
     c26:	685b      	ldr	r3, [r3, #4]
     c28:	00a2      	lsls	r2, r4, #2
     c2a:	58d3      	ldr	r3, [r2, r3]
     c2c:	4698      	mov	r8, r3
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     c2e:	68db      	ldr	r3, [r3, #12]
     c30:	4798      	blx	r3
     c32:	0001      	movs	r1, r0
     c34:	0020      	movs	r0, r4
     c36:	4b0a      	ldr	r3, [pc, #40]	; (c60 <udc_iface_disable+0x58>)
     c38:	4798      	blx	r3
     c3a:	1e05      	subs	r5, r0, #0
     c3c:	d0ed      	beq.n	c1a <udc_iface_disable+0x12>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     c3e:	4b0a      	ldr	r3, [pc, #40]	; (c68 <udc_iface_disable+0x60>)
     c40:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     c42:	4e0a      	ldr	r6, [pc, #40]	; (c6c <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
     c44:	4f0a      	ldr	r7, [pc, #40]	; (c70 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     c46:	2105      	movs	r1, #5
     c48:	0020      	movs	r0, r4
     c4a:	47b0      	blx	r6
     c4c:	1e04      	subs	r4, r0, #0
			if (NULL == ep_desc) {
     c4e:	d002      	beq.n	c56 <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
     c50:	7880      	ldrb	r0, [r0, #2]
     c52:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     c54:	e7f7      	b.n	c46 <udc_iface_disable+0x3e>
	udi_api->disable();
     c56:	4643      	mov	r3, r8
     c58:	685b      	ldr	r3, [r3, #4]
     c5a:	4798      	blx	r3
	return true;
     c5c:	e7dd      	b.n	c1a <udc_iface_disable+0x12>
     c5e:	46c0      	nop			; (mov r8, r8)
     c60:	00000b95 	.word	0x00000b95
     c64:	20000680 	.word	0x20000680
     c68:	20000684 	.word	0x20000684
     c6c:	00000b31 	.word	0x00000b31
     c70:	00002c19 	.word	0x00002c19

00000c74 <udc_iface_enable>:
{
     c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c76:	0005      	movs	r5, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
     c78:	4b0f      	ldr	r3, [pc, #60]	; (cb8 <udc_iface_enable+0x44>)
     c7a:	4798      	blx	r3
     c7c:	2800      	cmp	r0, #0
     c7e:	d019      	beq.n	cb4 <udc_iface_enable+0x40>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     c80:	4b0e      	ldr	r3, [pc, #56]	; (cbc <udc_iface_enable+0x48>)
     c82:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     c84:	4e0e      	ldr	r6, [pc, #56]	; (cc0 <udc_iface_enable+0x4c>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     c86:	4f0f      	ldr	r7, [pc, #60]	; (cc4 <udc_iface_enable+0x50>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     c88:	2105      	movs	r1, #5
     c8a:	0020      	movs	r0, r4
     c8c:	47b0      	blx	r6
     c8e:	1e04      	subs	r4, r0, #0
		if (NULL == ep_desc)
     c90:	d009      	beq.n	ca6 <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     c92:	7903      	ldrb	r3, [r0, #4]
     c94:	7942      	ldrb	r2, [r0, #5]
     c96:	0212      	lsls	r2, r2, #8
     c98:	431a      	orrs	r2, r3
     c9a:	78c1      	ldrb	r1, [r0, #3]
     c9c:	7880      	ldrb	r0, [r0, #2]
     c9e:	47b8      	blx	r7
     ca0:	2800      	cmp	r0, #0
     ca2:	d1f1      	bne.n	c88 <udc_iface_enable+0x14>
     ca4:	e006      	b.n	cb4 <udc_iface_enable+0x40>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
     ca6:	4b08      	ldr	r3, [pc, #32]	; (cc8 <udc_iface_enable+0x54>)
     ca8:	681b      	ldr	r3, [r3, #0]
     caa:	685b      	ldr	r3, [r3, #4]
     cac:	00ad      	lsls	r5, r5, #2
     cae:	58eb      	ldr	r3, [r5, r3]
     cb0:	681b      	ldr	r3, [r3, #0]
     cb2:	4798      	blx	r3
}
     cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     cb6:	46c0      	nop			; (mov r8, r8)
     cb8:	00000b95 	.word	0x00000b95
     cbc:	20000684 	.word	0x20000684
     cc0:	00000b31 	.word	0x00000b31
     cc4:	00002c71 	.word	0x00002c71
     cc8:	20000680 	.word	0x20000680

00000ccc <udc_start>:
{
     ccc:	b510      	push	{r4, lr}
	udd_enable();
     cce:	4b01      	ldr	r3, [pc, #4]	; (cd4 <udc_start+0x8>)
     cd0:	4798      	blx	r3
}
     cd2:	bd10      	pop	{r4, pc}
     cd4:	00003189 	.word	0x00003189

00000cd8 <udc_reset>:
{
     cd8:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
     cda:	4b0e      	ldr	r3, [pc, #56]	; (d14 <udc_reset+0x3c>)
     cdc:	781b      	ldrb	r3, [r3, #0]
     cde:	2b00      	cmp	r3, #0
     ce0:	d011      	beq.n	d06 <udc_reset+0x2e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     ce2:	4b0d      	ldr	r3, [pc, #52]	; (d18 <udc_reset+0x40>)
     ce4:	681b      	ldr	r3, [r3, #0]
     ce6:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     ce8:	791b      	ldrb	r3, [r3, #4]
     cea:	2b00      	cmp	r3, #0
     cec:	d00b      	beq.n	d06 <udc_reset+0x2e>
     cee:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
     cf0:	4e0a      	ldr	r6, [pc, #40]	; (d1c <udc_reset+0x44>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     cf2:	4d09      	ldr	r5, [pc, #36]	; (d18 <udc_reset+0x40>)
			udc_iface_disable(iface_num);
     cf4:	0020      	movs	r0, r4
     cf6:	47b0      	blx	r6
				iface_num++) {
     cf8:	3401      	adds	r4, #1
     cfa:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     cfc:	682b      	ldr	r3, [r5, #0]
     cfe:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     d00:	791b      	ldrb	r3, [r3, #4]
     d02:	42a3      	cmp	r3, r4
     d04:	d8f6      	bhi.n	cf4 <udc_reset+0x1c>
	udc_num_configuration = 0;
     d06:	2200      	movs	r2, #0
     d08:	4b02      	ldr	r3, [pc, #8]	; (d14 <udc_reset+0x3c>)
     d0a:	701a      	strb	r2, [r3, #0]
	udc_device_status =
     d0c:	3201      	adds	r2, #1
     d0e:	4b04      	ldr	r3, [pc, #16]	; (d20 <udc_reset+0x48>)
     d10:	801a      	strh	r2, [r3, #0]
}
     d12:	bd70      	pop	{r4, r5, r6, pc}
     d14:	2000067c 	.word	0x2000067c
     d18:	20000680 	.word	0x20000680
     d1c:	00000c09 	.word	0x00000c09
     d20:	20000672 	.word	0x20000672

00000d24 <udc_sof_notify>:
{
     d24:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
     d26:	4b0e      	ldr	r3, [pc, #56]	; (d60 <udc_sof_notify+0x3c>)
     d28:	781b      	ldrb	r3, [r3, #0]
     d2a:	2b00      	cmp	r3, #0
     d2c:	d017      	beq.n	d5e <udc_sof_notify+0x3a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     d2e:	4b0d      	ldr	r3, [pc, #52]	; (d64 <udc_sof_notify+0x40>)
     d30:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     d32:	681a      	ldr	r2, [r3, #0]
     d34:	7912      	ldrb	r2, [r2, #4]
     d36:	2a00      	cmp	r2, #0
     d38:	d011      	beq.n	d5e <udc_sof_notify+0x3a>
     d3a:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     d3c:	4d09      	ldr	r5, [pc, #36]	; (d64 <udc_sof_notify+0x40>)
     d3e:	e006      	b.n	d4e <udc_sof_notify+0x2a>
				iface_num++) {
     d40:	3401      	adds	r4, #1
     d42:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     d44:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
     d46:	681a      	ldr	r2, [r3, #0]
     d48:	7912      	ldrb	r2, [r2, #4]
     d4a:	42a2      	cmp	r2, r4
     d4c:	d907      	bls.n	d5e <udc_sof_notify+0x3a>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     d4e:	685b      	ldr	r3, [r3, #4]
     d50:	00a2      	lsls	r2, r4, #2
     d52:	58d3      	ldr	r3, [r2, r3]
     d54:	691b      	ldr	r3, [r3, #16]
     d56:	2b00      	cmp	r3, #0
     d58:	d0f2      	beq.n	d40 <udc_sof_notify+0x1c>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     d5a:	4798      	blx	r3
     d5c:	e7f0      	b.n	d40 <udc_sof_notify+0x1c>
}
     d5e:	bd70      	pop	{r4, r5, r6, pc}
     d60:	2000067c 	.word	0x2000067c
     d64:	20000680 	.word	0x20000680

00000d68 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     d6a:	4bab      	ldr	r3, [pc, #684]	; (1018 <udc_process_setup+0x2b0>)
     d6c:	2200      	movs	r2, #0
     d6e:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
     d70:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
     d72:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
     d74:	781b      	ldrb	r3, [r3, #0]
     d76:	b25a      	sxtb	r2, r3
     d78:	2a00      	cmp	r2, #0
     d7a:	db13      	blt.n	da4 <udc_process_setup+0x3c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     d7c:	2260      	movs	r2, #96	; 0x60
     d7e:	421a      	tst	r2, r3
     d80:	d100      	bne.n	d84 <udc_process_setup+0x1c>
     d82:	e0d7      	b.n	f34 <udc_process_setup+0x1cc>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
     d84:	4ba4      	ldr	r3, [pc, #656]	; (1018 <udc_process_setup+0x2b0>)
     d86:	781a      	ldrb	r2, [r3, #0]
     d88:	231f      	movs	r3, #31
     d8a:	4013      	ands	r3, r2
     d8c:	2b01      	cmp	r3, #1
     d8e:	d100      	bne.n	d92 <udc_process_setup+0x2a>
     d90:	e174      	b.n	107c <udc_process_setup+0x314>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     d92:	4ba1      	ldr	r3, [pc, #644]	; (1018 <udc_process_setup+0x2b0>)
     d94:	781a      	ldrb	r2, [r3, #0]
     d96:	231f      	movs	r3, #31
     d98:	4013      	ands	r3, r2
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
     d9a:	2000      	movs	r0, #0
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     d9c:	2b02      	cmp	r3, #2
     d9e:	d100      	bne.n	da2 <udc_process_setup+0x3a>
     da0:	e1ca      	b.n	1138 <udc_process_setup+0x3d0>
#endif
}
     da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
     da4:	4a9c      	ldr	r2, [pc, #624]	; (1018 <udc_process_setup+0x2b0>)
     da6:	88d2      	ldrh	r2, [r2, #6]
			return false; // Error from USB host
     da8:	2000      	movs	r0, #0
		if (udd_g_ctrlreq.req.wLength == 0) {
     daa:	2a00      	cmp	r2, #0
     dac:	d0f9      	beq.n	da2 <udc_process_setup+0x3a>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     dae:	2160      	movs	r1, #96	; 0x60
     db0:	4219      	tst	r1, r3
     db2:	d1e7      	bne.n	d84 <udc_process_setup+0x1c>
     db4:	211f      	movs	r1, #31
     db6:	400b      	ands	r3, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     db8:	d108      	bne.n	dcc <udc_process_setup+0x64>
			switch (udd_g_ctrlreq.req.bRequest) {
     dba:	4997      	ldr	r1, [pc, #604]	; (1018 <udc_process_setup+0x2b0>)
     dbc:	7849      	ldrb	r1, [r1, #1]
     dbe:	2906      	cmp	r1, #6
     dc0:	d023      	beq.n	e0a <udc_process_setup+0xa2>
     dc2:	2908      	cmp	r1, #8
     dc4:	d100      	bne.n	dc8 <udc_process_setup+0x60>
     dc6:	e084      	b.n	ed2 <udc_process_setup+0x16a>
     dc8:	2900      	cmp	r1, #0
     dca:	d017      	beq.n	dfc <udc_process_setup+0x94>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     dcc:	2b01      	cmp	r3, #1
     dce:	d100      	bne.n	dd2 <udc_process_setup+0x6a>
     dd0:	e087      	b.n	ee2 <udc_process_setup+0x17a>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     dd2:	2b02      	cmp	r3, #2
     dd4:	d1d6      	bne.n	d84 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
     dd6:	4b90      	ldr	r3, [pc, #576]	; (1018 <udc_process_setup+0x2b0>)
     dd8:	785b      	ldrb	r3, [r3, #1]
	return false;
     dda:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
     ddc:	2b00      	cmp	r3, #0
     dde:	d000      	beq.n	de2 <udc_process_setup+0x7a>
     de0:	e1a6      	b.n	1130 <udc_process_setup+0x3c8>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     de2:	2a02      	cmp	r2, #2
     de4:	d1d5      	bne.n	d92 <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     de6:	4b8c      	ldr	r3, [pc, #560]	; (1018 <udc_process_setup+0x2b0>)
     de8:	7918      	ldrb	r0, [r3, #4]
     dea:	4b8c      	ldr	r3, [pc, #560]	; (101c <udc_process_setup+0x2b4>)
     dec:	4798      	blx	r3
     dee:	4b8c      	ldr	r3, [pc, #560]	; (1020 <udc_process_setup+0x2b8>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
     df0:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     df2:	2102      	movs	r1, #2
     df4:	0018      	movs	r0, r3
     df6:	4b8b      	ldr	r3, [pc, #556]	; (1024 <udc_process_setup+0x2bc>)
     df8:	4798      	blx	r3
     dfa:	e0fc      	b.n	ff6 <udc_process_setup+0x28e>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     dfc:	2a02      	cmp	r2, #2
     dfe:	d1c8      	bne.n	d92 <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     e00:	3102      	adds	r1, #2
     e02:	4889      	ldr	r0, [pc, #548]	; (1028 <udc_process_setup+0x2c0>)
     e04:	4b87      	ldr	r3, [pc, #540]	; (1024 <udc_process_setup+0x2bc>)
     e06:	4798      	blx	r3
     e08:	e0f5      	b.n	ff6 <udc_process_setup+0x28e>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     e0a:	4b83      	ldr	r3, [pc, #524]	; (1018 <udc_process_setup+0x2b0>)
     e0c:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     e0e:	0a13      	lsrs	r3, r2, #8
     e10:	2b02      	cmp	r3, #2
     e12:	d023      	beq.n	e5c <udc_process_setup+0xf4>
     e14:	b2d9      	uxtb	r1, r3
     e16:	2902      	cmp	r1, #2
     e18:	d90f      	bls.n	e3a <udc_process_setup+0xd2>
     e1a:	2b03      	cmp	r3, #3
     e1c:	d034      	beq.n	e88 <udc_process_setup+0x120>
     e1e:	2b0f      	cmp	r3, #15
     e20:	d000      	beq.n	e24 <udc_process_setup+0xbc>
     e22:	e182      	b.n	112a <udc_process_setup+0x3c2>
		if (udc_config.conf_bos == NULL) {
     e24:	4b81      	ldr	r3, [pc, #516]	; (102c <udc_process_setup+0x2c4>)
     e26:	6898      	ldr	r0, [r3, #8]
     e28:	2800      	cmp	r0, #0
     e2a:	d0b2      	beq.n	d92 <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     e2c:	7883      	ldrb	r3, [r0, #2]
     e2e:	78c1      	ldrb	r1, [r0, #3]
     e30:	0209      	lsls	r1, r1, #8
     e32:	4319      	orrs	r1, r3
     e34:	4b7b      	ldr	r3, [pc, #492]	; (1024 <udc_process_setup+0x2bc>)
     e36:	4798      	blx	r3
     e38:	e007      	b.n	e4a <udc_process_setup+0xe2>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     e3a:	2b01      	cmp	r3, #1
     e3c:	d000      	beq.n	e40 <udc_process_setup+0xd8>
     e3e:	e174      	b.n	112a <udc_process_setup+0x3c2>
				(uint8_t *) udc_config.confdev_lsfs,
     e40:	4b7a      	ldr	r3, [pc, #488]	; (102c <udc_process_setup+0x2c4>)
     e42:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
     e44:	7801      	ldrb	r1, [r0, #0]
     e46:	4b77      	ldr	r3, [pc, #476]	; (1024 <udc_process_setup+0x2bc>)
     e48:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     e4a:	4b73      	ldr	r3, [pc, #460]	; (1018 <udc_process_setup+0x2b0>)
     e4c:	88da      	ldrh	r2, [r3, #6]
     e4e:	899b      	ldrh	r3, [r3, #12]
     e50:	4293      	cmp	r3, r2
     e52:	d800      	bhi.n	e56 <udc_process_setup+0xee>
     e54:	e0cf      	b.n	ff6 <udc_process_setup+0x28e>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     e56:	4b70      	ldr	r3, [pc, #448]	; (1018 <udc_process_setup+0x2b0>)
     e58:	819a      	strh	r2, [r3, #12]
     e5a:	e0cc      	b.n	ff6 <udc_process_setup+0x28e>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     e5c:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
     e5e:	4b73      	ldr	r3, [pc, #460]	; (102c <udc_process_setup+0x2c4>)
     e60:	681b      	ldr	r3, [r3, #0]
     e62:	7c5b      	ldrb	r3, [r3, #17]
     e64:	4293      	cmp	r3, r2
     e66:	d800      	bhi.n	e6a <udc_process_setup+0x102>
     e68:	e793      	b.n	d92 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
     e6a:	4b70      	ldr	r3, [pc, #448]	; (102c <udc_process_setup+0x2c4>)
     e6c:	685b      	ldr	r3, [r3, #4]
     e6e:	00d2      	lsls	r2, r2, #3
     e70:	58d0      	ldr	r0, [r2, r3]
			udd_set_setup_payload(
     e72:	7883      	ldrb	r3, [r0, #2]
     e74:	78c1      	ldrb	r1, [r0, #3]
     e76:	0209      	lsls	r1, r1, #8
     e78:	4319      	orrs	r1, r3
     e7a:	4b6a      	ldr	r3, [pc, #424]	; (1024 <udc_process_setup+0x2bc>)
     e7c:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     e7e:	4b66      	ldr	r3, [pc, #408]	; (1018 <udc_process_setup+0x2b0>)
     e80:	689b      	ldr	r3, [r3, #8]
     e82:	2202      	movs	r2, #2
     e84:	705a      	strb	r2, [r3, #1]
     e86:	e7e0      	b.n	e4a <udc_process_setup+0xe2>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     e88:	23ff      	movs	r3, #255	; 0xff
     e8a:	401a      	ands	r2, r3
     e8c:	2a01      	cmp	r2, #1
     e8e:	d01d      	beq.n	ecc <udc_process_setup+0x164>
     e90:	2a00      	cmp	r2, #0
     e92:	d016      	beq.n	ec2 <udc_process_setup+0x15a>
     e94:	2a02      	cmp	r2, #2
     e96:	d000      	beq.n	e9a <udc_process_setup+0x132>
     e98:	e774      	b.n	d84 <udc_process_setup+0x1c>
		str = udc_string_product_name;
     e9a:	4c65      	ldr	r4, [pc, #404]	; (1030 <udc_process_setup+0x2c8>)
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
     e9c:	201d      	movs	r0, #29
     e9e:	4a65      	ldr	r2, [pc, #404]	; (1034 <udc_process_setup+0x2cc>)
     ea0:	3202      	adds	r2, #2
     ea2:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
     ea4:	5ce1      	ldrb	r1, [r4, r3]
     ea6:	8011      	strh	r1, [r2, #0]
     ea8:	3301      	adds	r3, #1
     eaa:	3202      	adds	r2, #2
		for(i = 0; i < str_length; i++) {
     eac:	b2d9      	uxtb	r1, r3
     eae:	4281      	cmp	r1, r0
     eb0:	d3f8      	bcc.n	ea4 <udc_process_setup+0x13c>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
     eb2:	0041      	lsls	r1, r0, #1
     eb4:	3102      	adds	r1, #2
     eb6:	485f      	ldr	r0, [pc, #380]	; (1034 <udc_process_setup+0x2cc>)
     eb8:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
     eba:	b289      	uxth	r1, r1
     ebc:	4b59      	ldr	r3, [pc, #356]	; (1024 <udc_process_setup+0x2bc>)
     ebe:	4798      	blx	r3
     ec0:	e7c3      	b.n	e4a <udc_process_setup+0xe2>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     ec2:	2104      	movs	r1, #4
     ec4:	485c      	ldr	r0, [pc, #368]	; (1038 <udc_process_setup+0x2d0>)
     ec6:	4b57      	ldr	r3, [pc, #348]	; (1024 <udc_process_setup+0x2bc>)
     ec8:	4798      	blx	r3
     eca:	e7be      	b.n	e4a <udc_process_setup+0xe2>
		str = udc_string_manufacturer_name;
     ecc:	4c5b      	ldr	r4, [pc, #364]	; (103c <udc_process_setup+0x2d4>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
     ece:	2009      	movs	r0, #9
     ed0:	e7e5      	b.n	e9e <udc_process_setup+0x136>
	if (udd_g_ctrlreq.req.wLength != 1) {
     ed2:	2a01      	cmp	r2, #1
     ed4:	d000      	beq.n	ed8 <udc_process_setup+0x170>
     ed6:	e75c      	b.n	d92 <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
     ed8:	2101      	movs	r1, #1
     eda:	4859      	ldr	r0, [pc, #356]	; (1040 <udc_process_setup+0x2d8>)
     edc:	4b51      	ldr	r3, [pc, #324]	; (1024 <udc_process_setup+0x2bc>)
     ede:	4798      	blx	r3
     ee0:	e089      	b.n	ff6 <udc_process_setup+0x28e>
			switch (udd_g_ctrlreq.req.bRequest) {
     ee2:	494d      	ldr	r1, [pc, #308]	; (1018 <udc_process_setup+0x2b0>)
     ee4:	7849      	ldrb	r1, [r1, #1]
     ee6:	290a      	cmp	r1, #10
     ee8:	d000      	beq.n	eec <udc_process_setup+0x184>
     eea:	e772      	b.n	dd2 <udc_process_setup+0x6a>
	if (udd_g_ctrlreq.req.wLength != 1) {
     eec:	2a01      	cmp	r2, #1
     eee:	d000      	beq.n	ef2 <udc_process_setup+0x18a>
     ef0:	e0c4      	b.n	107c <udc_process_setup+0x314>
	if (!udc_num_configuration) {
     ef2:	4b53      	ldr	r3, [pc, #332]	; (1040 <udc_process_setup+0x2d8>)
     ef4:	781b      	ldrb	r3, [r3, #0]
     ef6:	2b00      	cmp	r3, #0
     ef8:	d100      	bne.n	efc <udc_process_setup+0x194>
     efa:	e0bf      	b.n	107c <udc_process_setup+0x314>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     efc:	4b46      	ldr	r3, [pc, #280]	; (1018 <udc_process_setup+0x2b0>)
     efe:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     f00:	4b50      	ldr	r3, [pc, #320]	; (1044 <udc_process_setup+0x2dc>)
     f02:	681d      	ldr	r5, [r3, #0]
     f04:	682b      	ldr	r3, [r5, #0]
     f06:	791b      	ldrb	r3, [r3, #4]
     f08:	42a3      	cmp	r3, r4
     f0a:	d800      	bhi.n	f0e <udc_process_setup+0x1a6>
     f0c:	e0b6      	b.n	107c <udc_process_setup+0x314>
	if (!udc_update_iface_desc(iface_num, 0)) {
     f0e:	2100      	movs	r1, #0
     f10:	0020      	movs	r0, r4
     f12:	4b4d      	ldr	r3, [pc, #308]	; (1048 <udc_process_setup+0x2e0>)
     f14:	4798      	blx	r3
     f16:	2800      	cmp	r0, #0
     f18:	d100      	bne.n	f1c <udc_process_setup+0x1b4>
     f1a:	e733      	b.n	d84 <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     f1c:	686b      	ldr	r3, [r5, #4]
     f1e:	00a4      	lsls	r4, r4, #2
	udc_iface_setting = udi_api->getsetting();
     f20:	58e3      	ldr	r3, [r4, r3]
     f22:	68db      	ldr	r3, [r3, #12]
     f24:	4798      	blx	r3
     f26:	4b49      	ldr	r3, [pc, #292]	; (104c <udc_process_setup+0x2e4>)
     f28:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
     f2a:	2101      	movs	r1, #1
     f2c:	0018      	movs	r0, r3
     f2e:	4b3d      	ldr	r3, [pc, #244]	; (1024 <udc_process_setup+0x2bc>)
     f30:	4798      	blx	r3
     f32:	e060      	b.n	ff6 <udc_process_setup+0x28e>
     f34:	221f      	movs	r2, #31
     f36:	4013      	ands	r3, r2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     f38:	d15f      	bne.n	ffa <udc_process_setup+0x292>
			switch (udd_g_ctrlreq.req.bRequest) {
     f3a:	4a37      	ldr	r2, [pc, #220]	; (1018 <udc_process_setup+0x2b0>)
     f3c:	7852      	ldrb	r2, [r2, #1]
     f3e:	2a03      	cmp	r2, #3
     f40:	d100      	bne.n	f44 <udc_process_setup+0x1dc>
     f42:	e0f4      	b.n	112e <udc_process_setup+0x3c6>
     f44:	b2d1      	uxtb	r1, r2
     f46:	2903      	cmp	r1, #3
     f48:	d93b      	bls.n	fc2 <udc_process_setup+0x25a>
     f4a:	2a05      	cmp	r2, #5
     f4c:	d04b      	beq.n	fe6 <udc_process_setup+0x27e>
     f4e:	2a09      	cmp	r2, #9
     f50:	d153      	bne.n	ffa <udc_process_setup+0x292>
	if (udd_g_ctrlreq.req.wLength) {
     f52:	4b31      	ldr	r3, [pc, #196]	; (1018 <udc_process_setup+0x2b0>)
     f54:	88db      	ldrh	r3, [r3, #6]
     f56:	2b00      	cmp	r3, #0
     f58:	d000      	beq.n	f5c <udc_process_setup+0x1f4>
     f5a:	e71a      	b.n	d92 <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
     f5c:	4b3c      	ldr	r3, [pc, #240]	; (1050 <udc_process_setup+0x2e8>)
     f5e:	4798      	blx	r3
     f60:	2800      	cmp	r0, #0
     f62:	d100      	bne.n	f66 <udc_process_setup+0x1fe>
     f64:	e70e      	b.n	d84 <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     f66:	4b2c      	ldr	r3, [pc, #176]	; (1018 <udc_process_setup+0x2b0>)
     f68:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
     f6a:	4b30      	ldr	r3, [pc, #192]	; (102c <udc_process_setup+0x2c4>)
     f6c:	681b      	ldr	r3, [r3, #0]
     f6e:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     f70:	429a      	cmp	r2, r3
     f72:	dd00      	ble.n	f76 <udc_process_setup+0x20e>
     f74:	e706      	b.n	d84 <udc_process_setup+0x1c>
	udc_reset();
     f76:	4b37      	ldr	r3, [pc, #220]	; (1054 <udc_process_setup+0x2ec>)
     f78:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     f7a:	4b27      	ldr	r3, [pc, #156]	; (1018 <udc_process_setup+0x2b0>)
     f7c:	789b      	ldrb	r3, [r3, #2]
     f7e:	4a30      	ldr	r2, [pc, #192]	; (1040 <udc_process_setup+0x2d8>)
     f80:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
     f82:	2b00      	cmp	r3, #0
     f84:	d037      	beq.n	ff6 <udc_process_setup+0x28e>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     f86:	4a34      	ldr	r2, [pc, #208]	; (1058 <udc_process_setup+0x2f0>)
     f88:	4694      	mov	ip, r2
     f8a:	4463      	add	r3, ip
     f8c:	00db      	lsls	r3, r3, #3
     f8e:	4a27      	ldr	r2, [pc, #156]	; (102c <udc_process_setup+0x2c4>)
     f90:	6852      	ldr	r2, [r2, #4]
     f92:	18d3      	adds	r3, r2, r3
     f94:	4a2b      	ldr	r2, [pc, #172]	; (1044 <udc_process_setup+0x2dc>)
     f96:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     f98:	681b      	ldr	r3, [r3, #0]
     f9a:	791b      	ldrb	r3, [r3, #4]
     f9c:	2b00      	cmp	r3, #0
     f9e:	d02a      	beq.n	ff6 <udc_process_setup+0x28e>
     fa0:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
     fa2:	4d2e      	ldr	r5, [pc, #184]	; (105c <udc_process_setup+0x2f4>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     fa4:	0016      	movs	r6, r2
		if (!udc_iface_enable(iface_num, 0)) {
     fa6:	2100      	movs	r1, #0
     fa8:	0020      	movs	r0, r4
     faa:	47a8      	blx	r5
     fac:	2800      	cmp	r0, #0
     fae:	d100      	bne.n	fb2 <udc_process_setup+0x24a>
     fb0:	e6e8      	b.n	d84 <udc_process_setup+0x1c>
			iface_num++) {
     fb2:	3401      	adds	r4, #1
     fb4:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     fb6:	6833      	ldr	r3, [r6, #0]
     fb8:	681b      	ldr	r3, [r3, #0]
     fba:	791b      	ldrb	r3, [r3, #4]
     fbc:	42a3      	cmp	r3, r4
     fbe:	d8f2      	bhi.n	fa6 <udc_process_setup+0x23e>
     fc0:	e019      	b.n	ff6 <udc_process_setup+0x28e>
			switch (udd_g_ctrlreq.req.bRequest) {
     fc2:	2a01      	cmp	r2, #1
     fc4:	d119      	bne.n	ffa <udc_process_setup+0x292>
	if (udd_g_ctrlreq.req.wLength) {
     fc6:	4b14      	ldr	r3, [pc, #80]	; (1018 <udc_process_setup+0x2b0>)
     fc8:	88db      	ldrh	r3, [r3, #6]
     fca:	2b00      	cmp	r3, #0
     fcc:	d000      	beq.n	fd0 <udc_process_setup+0x268>
     fce:	e6e0      	b.n	d92 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     fd0:	4b11      	ldr	r3, [pc, #68]	; (1018 <udc_process_setup+0x2b0>)
     fd2:	885b      	ldrh	r3, [r3, #2]
     fd4:	2b01      	cmp	r3, #1
     fd6:	d000      	beq.n	fda <udc_process_setup+0x272>
     fd8:	e6db      	b.n	d92 <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     fda:	4a13      	ldr	r2, [pc, #76]	; (1028 <udc_process_setup+0x2c0>)
     fdc:	8813      	ldrh	r3, [r2, #0]
     fde:	2102      	movs	r1, #2
     fe0:	438b      	bics	r3, r1
     fe2:	8013      	strh	r3, [r2, #0]
     fe4:	e007      	b.n	ff6 <udc_process_setup+0x28e>
	if (udd_g_ctrlreq.req.wLength) {
     fe6:	4b0c      	ldr	r3, [pc, #48]	; (1018 <udc_process_setup+0x2b0>)
     fe8:	88db      	ldrh	r3, [r3, #6]
     fea:	2b00      	cmp	r3, #0
     fec:	d000      	beq.n	ff0 <udc_process_setup+0x288>
     fee:	e6d0      	b.n	d92 <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
     ff0:	4a1b      	ldr	r2, [pc, #108]	; (1060 <udc_process_setup+0x2f8>)
     ff2:	4b09      	ldr	r3, [pc, #36]	; (1018 <udc_process_setup+0x2b0>)
     ff4:	611a      	str	r2, [r3, #16]
			return true;
     ff6:	2001      	movs	r0, #1
     ff8:	e6d3      	b.n	da2 <udc_process_setup+0x3a>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     ffa:	2b01      	cmp	r3, #1
     ffc:	d032      	beq.n	1064 <udc_process_setup+0x2fc>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     ffe:	2b02      	cmp	r3, #2
    1000:	d000      	beq.n	1004 <udc_process_setup+0x29c>
    1002:	e6bf      	b.n	d84 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    1004:	4b04      	ldr	r3, [pc, #16]	; (1018 <udc_process_setup+0x2b0>)
    1006:	785b      	ldrb	r3, [r3, #1]
    1008:	2b01      	cmp	r3, #1
    100a:	d06d      	beq.n	10e8 <udc_process_setup+0x380>
    100c:	2b03      	cmp	r3, #3
    100e:	d100      	bne.n	1012 <udc_process_setup+0x2aa>
    1010:	e079      	b.n	1106 <udc_process_setup+0x39e>
	return false;
    1012:	2000      	movs	r0, #0
    1014:	e08c      	b.n	1130 <udc_process_setup+0x3c8>
    1016:	46c0      	nop			; (mov r8, r8)
    1018:	200009ec 	.word	0x200009ec
    101c:	00002d79 	.word	0x00002d79
    1020:	20000674 	.word	0x20000674
    1024:	000030f9 	.word	0x000030f9
    1028:	20000672 	.word	0x20000672
    102c:	20000028 	.word	0x20000028
    1030:	200000f4 	.word	0x200000f4
    1034:	200000a8 	.word	0x200000a8
    1038:	200000e4 	.word	0x200000e4
    103c:	200000e8 	.word	0x200000e8
    1040:	2000067c 	.word	0x2000067c
    1044:	20000680 	.word	0x20000680
    1048:	00000b95 	.word	0x00000b95
    104c:	20000678 	.word	0x20000678
    1050:	000030e9 	.word	0x000030e9
    1054:	00000cd9 	.word	0x00000cd9
    1058:	1fffffff 	.word	0x1fffffff
    105c:	00000c75 	.word	0x00000c75
    1060:	00000b7d 	.word	0x00000b7d
			switch (udd_g_ctrlreq.req.bRequest) {
    1064:	4a48      	ldr	r2, [pc, #288]	; (1188 <udc_process_setup+0x420>)
    1066:	7852      	ldrb	r2, [r2, #1]
    1068:	2a0b      	cmp	r2, #11
    106a:	d1c8      	bne.n	ffe <udc_process_setup+0x296>
	if (udd_g_ctrlreq.req.wLength) {
    106c:	4b46      	ldr	r3, [pc, #280]	; (1188 <udc_process_setup+0x420>)
    106e:	88db      	ldrh	r3, [r3, #6]
    1070:	2b00      	cmp	r3, #0
    1072:	d103      	bne.n	107c <udc_process_setup+0x314>
	if (!udc_num_configuration) {
    1074:	4b45      	ldr	r3, [pc, #276]	; (118c <udc_process_setup+0x424>)
    1076:	781b      	ldrb	r3, [r3, #0]
    1078:	2b00      	cmp	r3, #0
    107a:	d127      	bne.n	10cc <udc_process_setup+0x364>
	if (0 == udc_num_configuration) {
    107c:	4b43      	ldr	r3, [pc, #268]	; (118c <udc_process_setup+0x424>)
    107e:	781b      	ldrb	r3, [r3, #0]
	return false;
    1080:	2000      	movs	r0, #0
	if (0 == udc_num_configuration) {
    1082:	2b00      	cmp	r3, #0
    1084:	d100      	bne.n	1088 <udc_process_setup+0x320>
    1086:	e68c      	b.n	da2 <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1088:	4b3f      	ldr	r3, [pc, #252]	; (1188 <udc_process_setup+0x420>)
    108a:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    108c:	4b40      	ldr	r3, [pc, #256]	; (1190 <udc_process_setup+0x428>)
    108e:	681d      	ldr	r5, [r3, #0]
    1090:	682b      	ldr	r3, [r5, #0]
    1092:	791b      	ldrb	r3, [r3, #4]
    1094:	42a3      	cmp	r3, r4
    1096:	d800      	bhi.n	109a <udc_process_setup+0x332>
    1098:	e683      	b.n	da2 <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
    109a:	2100      	movs	r1, #0
    109c:	0020      	movs	r0, r4
    109e:	4b3d      	ldr	r3, [pc, #244]	; (1194 <udc_process_setup+0x42c>)
    10a0:	4798      	blx	r3
    10a2:	2800      	cmp	r0, #0
    10a4:	d100      	bne.n	10a8 <udc_process_setup+0x340>
    10a6:	e674      	b.n	d92 <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    10a8:	686b      	ldr	r3, [r5, #4]
    10aa:	00a2      	lsls	r2, r4, #2
    10ac:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    10ae:	68eb      	ldr	r3, [r5, #12]
    10b0:	4798      	blx	r3
    10b2:	0001      	movs	r1, r0
    10b4:	0020      	movs	r0, r4
    10b6:	4b37      	ldr	r3, [pc, #220]	; (1194 <udc_process_setup+0x42c>)
    10b8:	4798      	blx	r3
    10ba:	2800      	cmp	r0, #0
    10bc:	d100      	bne.n	10c0 <udc_process_setup+0x358>
    10be:	e668      	b.n	d92 <udc_process_setup+0x2a>
	return udi_api->setup();
    10c0:	68ab      	ldr	r3, [r5, #8]
    10c2:	4798      	blx	r3
		if (udc_req_iface()) {
    10c4:	2800      	cmp	r0, #0
    10c6:	d000      	beq.n	10ca <udc_process_setup+0x362>
    10c8:	e66b      	b.n	da2 <udc_process_setup+0x3a>
    10ca:	e662      	b.n	d92 <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    10cc:	4b2e      	ldr	r3, [pc, #184]	; (1188 <udc_process_setup+0x420>)
    10ce:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    10d0:	885c      	ldrh	r4, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
    10d2:	0028      	movs	r0, r5
    10d4:	4b30      	ldr	r3, [pc, #192]	; (1198 <udc_process_setup+0x430>)
    10d6:	4798      	blx	r3
    10d8:	2800      	cmp	r0, #0
    10da:	d100      	bne.n	10de <udc_process_setup+0x376>
    10dc:	e652      	b.n	d84 <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
    10de:	b2e1      	uxtb	r1, r4
    10e0:	0028      	movs	r0, r5
    10e2:	4b2e      	ldr	r3, [pc, #184]	; (119c <udc_process_setup+0x434>)
    10e4:	4798      	blx	r3
    10e6:	e023      	b.n	1130 <udc_process_setup+0x3c8>
	if (udd_g_ctrlreq.req.wLength) {
    10e8:	4b27      	ldr	r3, [pc, #156]	; (1188 <udc_process_setup+0x420>)
    10ea:	88db      	ldrh	r3, [r3, #6]
    10ec:	2b00      	cmp	r3, #0
    10ee:	d000      	beq.n	10f2 <udc_process_setup+0x38a>
    10f0:	e64f      	b.n	d92 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    10f2:	4b25      	ldr	r3, [pc, #148]	; (1188 <udc_process_setup+0x420>)
    10f4:	885b      	ldrh	r3, [r3, #2]
    10f6:	2b00      	cmp	r3, #0
    10f8:	d000      	beq.n	10fc <udc_process_setup+0x394>
    10fa:	e64a      	b.n	d92 <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    10fc:	4b22      	ldr	r3, [pc, #136]	; (1188 <udc_process_setup+0x420>)
    10fe:	7918      	ldrb	r0, [r3, #4]
    1100:	4b27      	ldr	r3, [pc, #156]	; (11a0 <udc_process_setup+0x438>)
    1102:	4798      	blx	r3
    1104:	e014      	b.n	1130 <udc_process_setup+0x3c8>
	if (udd_g_ctrlreq.req.wLength) {
    1106:	4b20      	ldr	r3, [pc, #128]	; (1188 <udc_process_setup+0x420>)
    1108:	88db      	ldrh	r3, [r3, #6]
    110a:	2b00      	cmp	r3, #0
    110c:	d000      	beq.n	1110 <udc_process_setup+0x3a8>
    110e:	e640      	b.n	d92 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1110:	4b1d      	ldr	r3, [pc, #116]	; (1188 <udc_process_setup+0x420>)
    1112:	885b      	ldrh	r3, [r3, #2]
    1114:	2b00      	cmp	r3, #0
    1116:	d000      	beq.n	111a <udc_process_setup+0x3b2>
    1118:	e63b      	b.n	d92 <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    111a:	4c1b      	ldr	r4, [pc, #108]	; (1188 <udc_process_setup+0x420>)
    111c:	7920      	ldrb	r0, [r4, #4]
    111e:	4b21      	ldr	r3, [pc, #132]	; (11a4 <udc_process_setup+0x43c>)
    1120:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1122:	7920      	ldrb	r0, [r4, #4]
    1124:	4b20      	ldr	r3, [pc, #128]	; (11a8 <udc_process_setup+0x440>)
    1126:	4798      	blx	r3
    1128:	e002      	b.n	1130 <udc_process_setup+0x3c8>
		return false;
    112a:	2000      	movs	r0, #0
    112c:	e000      	b.n	1130 <udc_process_setup+0x3c8>
				return udc_req_std_dev_set_feature();
    112e:	2000      	movs	r0, #0
		if (udc_reqstd()) {
    1130:	2800      	cmp	r0, #0
    1132:	d000      	beq.n	1136 <udc_process_setup+0x3ce>
    1134:	e635      	b.n	da2 <udc_process_setup+0x3a>
    1136:	e625      	b.n	d84 <udc_process_setup+0x1c>
	if (0 == udc_num_configuration) {
    1138:	4b14      	ldr	r3, [pc, #80]	; (118c <udc_process_setup+0x424>)
    113a:	781b      	ldrb	r3, [r3, #0]
    113c:	2b00      	cmp	r3, #0
    113e:	d100      	bne.n	1142 <udc_process_setup+0x3da>
    1140:	e62f      	b.n	da2 <udc_process_setup+0x3a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1142:	4b13      	ldr	r3, [pc, #76]	; (1190 <udc_process_setup+0x428>)
    1144:	681b      	ldr	r3, [r3, #0]
    1146:	681a      	ldr	r2, [r3, #0]
    1148:	7912      	ldrb	r2, [r2, #4]
    114a:	2a00      	cmp	r2, #0
    114c:	d01a      	beq.n	1184 <udc_process_setup+0x41c>
    114e:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1150:	4e10      	ldr	r6, [pc, #64]	; (1194 <udc_process_setup+0x42c>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1152:	4f0f      	ldr	r7, [pc, #60]	; (1190 <udc_process_setup+0x428>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1154:	685b      	ldr	r3, [r3, #4]
    1156:	00aa      	lsls	r2, r5, #2
    1158:	58d4      	ldr	r4, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    115a:	68e3      	ldr	r3, [r4, #12]
    115c:	4798      	blx	r3
    115e:	0001      	movs	r1, r0
    1160:	0028      	movs	r0, r5
    1162:	47b0      	blx	r6
    1164:	2800      	cmp	r0, #0
    1166:	d100      	bne.n	116a <udc_process_setup+0x402>
    1168:	e61b      	b.n	da2 <udc_process_setup+0x3a>
		if (udi_api->setup()) {
    116a:	68a3      	ldr	r3, [r4, #8]
    116c:	4798      	blx	r3
    116e:	2800      	cmp	r0, #0
    1170:	d000      	beq.n	1174 <udc_process_setup+0x40c>
    1172:	e616      	b.n	da2 <udc_process_setup+0x3a>
			iface_num++) {
    1174:	3501      	adds	r5, #1
    1176:	b2ed      	uxtb	r5, r5
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1178:	683b      	ldr	r3, [r7, #0]
    117a:	681a      	ldr	r2, [r3, #0]
    117c:	7912      	ldrb	r2, [r2, #4]
    117e:	42aa      	cmp	r2, r5
    1180:	d8e8      	bhi.n	1154 <udc_process_setup+0x3ec>
    1182:	e60e      	b.n	da2 <udc_process_setup+0x3a>
	return false;
    1184:	2000      	movs	r0, #0
    1186:	e60c      	b.n	da2 <udc_process_setup+0x3a>
    1188:	200009ec 	.word	0x200009ec
    118c:	2000067c 	.word	0x2000067c
    1190:	20000680 	.word	0x20000680
    1194:	00000b95 	.word	0x00000b95
    1198:	00000c09 	.word	0x00000c09
    119c:	00000c75 	.word	0x00000c75
    11a0:	00002ebd 	.word	0x00002ebd
    11a4:	00002bb9 	.word	0x00002bb9
    11a8:	00002d8d 	.word	0x00002d8d

000011ac <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    11ac:	4b0c      	ldr	r3, [pc, #48]	; (11e0 <cpu_irq_enter_critical+0x34>)
    11ae:	681b      	ldr	r3, [r3, #0]
    11b0:	2b00      	cmp	r3, #0
    11b2:	d106      	bne.n	11c2 <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    11b4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    11b8:	2b00      	cmp	r3, #0
    11ba:	d007      	beq.n	11cc <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    11bc:	2200      	movs	r2, #0
    11be:	4b09      	ldr	r3, [pc, #36]	; (11e4 <cpu_irq_enter_critical+0x38>)
    11c0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    11c2:	4a07      	ldr	r2, [pc, #28]	; (11e0 <cpu_irq_enter_critical+0x34>)
    11c4:	6813      	ldr	r3, [r2, #0]
    11c6:	3301      	adds	r3, #1
    11c8:	6013      	str	r3, [r2, #0]
}
    11ca:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    11cc:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    11ce:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    11d2:	2200      	movs	r2, #0
    11d4:	4b04      	ldr	r3, [pc, #16]	; (11e8 <cpu_irq_enter_critical+0x3c>)
    11d6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    11d8:	3201      	adds	r2, #1
    11da:	4b02      	ldr	r3, [pc, #8]	; (11e4 <cpu_irq_enter_critical+0x38>)
    11dc:	701a      	strb	r2, [r3, #0]
    11de:	e7f0      	b.n	11c2 <cpu_irq_enter_critical+0x16>
    11e0:	20000688 	.word	0x20000688
    11e4:	2000068c 	.word	0x2000068c
    11e8:	20000112 	.word	0x20000112

000011ec <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    11ec:	4b08      	ldr	r3, [pc, #32]	; (1210 <cpu_irq_leave_critical+0x24>)
    11ee:	681a      	ldr	r2, [r3, #0]
    11f0:	3a01      	subs	r2, #1
    11f2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    11f4:	681b      	ldr	r3, [r3, #0]
    11f6:	2b00      	cmp	r3, #0
    11f8:	d109      	bne.n	120e <cpu_irq_leave_critical+0x22>
    11fa:	4b06      	ldr	r3, [pc, #24]	; (1214 <cpu_irq_leave_critical+0x28>)
    11fc:	781b      	ldrb	r3, [r3, #0]
    11fe:	2b00      	cmp	r3, #0
    1200:	d005      	beq.n	120e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1202:	2201      	movs	r2, #1
    1204:	4b04      	ldr	r3, [pc, #16]	; (1218 <cpu_irq_leave_critical+0x2c>)
    1206:	701a      	strb	r2, [r3, #0]
    1208:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    120c:	b662      	cpsie	i
	}
}
    120e:	4770      	bx	lr
    1210:	20000688 	.word	0x20000688
    1214:	2000068c 	.word	0x2000068c
    1218:	20000112 	.word	0x20000112

0000121c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    121c:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    121e:	2200      	movs	r2, #0
    1220:	4b10      	ldr	r3, [pc, #64]	; (1264 <EIC_Handler+0x48>)
    1222:	701a      	strb	r2, [r3, #0]
    1224:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    1226:	4910      	ldr	r1, [pc, #64]	; (1268 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    1228:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    122a:	4e10      	ldr	r6, [pc, #64]	; (126c <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    122c:	4c0d      	ldr	r4, [pc, #52]	; (1264 <EIC_Handler+0x48>)
    122e:	e00a      	b.n	1246 <EIC_Handler+0x2a>
		return eics[eic_index];
    1230:	490d      	ldr	r1, [pc, #52]	; (1268 <EIC_Handler+0x4c>)
    1232:	e008      	b.n	1246 <EIC_Handler+0x2a>
    1234:	7823      	ldrb	r3, [r4, #0]
    1236:	3301      	adds	r3, #1
    1238:	b2db      	uxtb	r3, r3
    123a:	7023      	strb	r3, [r4, #0]
    123c:	2b0f      	cmp	r3, #15
    123e:	d810      	bhi.n	1262 <EIC_Handler+0x46>
		return NULL;
    1240:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    1242:	2b1f      	cmp	r3, #31
    1244:	d9f4      	bls.n	1230 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    1246:	0028      	movs	r0, r5
    1248:	4018      	ands	r0, r3
    124a:	2201      	movs	r2, #1
    124c:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    124e:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
    1250:	4210      	tst	r0, r2
    1252:	d0ef      	beq.n	1234 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    1254:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1256:	009b      	lsls	r3, r3, #2
    1258:	599b      	ldr	r3, [r3, r6]
    125a:	2b00      	cmp	r3, #0
    125c:	d0ea      	beq.n	1234 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    125e:	4798      	blx	r3
    1260:	e7e8      	b.n	1234 <EIC_Handler+0x18>
			}
		}
	}
}
    1262:	bd70      	pop	{r4, r5, r6, pc}
    1264:	20000769 	.word	0x20000769
    1268:	40002400 	.word	0x40002400
    126c:	2000076c 	.word	0x2000076c

00001270 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    1270:	4a06      	ldr	r2, [pc, #24]	; (128c <_extint_enable+0x1c>)
    1272:	7813      	ldrb	r3, [r2, #0]
    1274:	2102      	movs	r1, #2
    1276:	430b      	orrs	r3, r1
    1278:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    127a:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    127c:	6853      	ldr	r3, [r2, #4]
    127e:	4219      	tst	r1, r3
    1280:	d1fc      	bne.n	127c <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    1282:	6853      	ldr	r3, [r2, #4]
    1284:	4218      	tst	r0, r3
    1286:	d1f9      	bne.n	127c <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    1288:	4770      	bx	lr
    128a:	46c0      	nop			; (mov r8, r8)
    128c:	40002400 	.word	0x40002400

00001290 <_system_extint_init>:
{
    1290:	b510      	push	{r4, lr}
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    1292:	4a12      	ldr	r2, [pc, #72]	; (12dc <_system_extint_init+0x4c>)
    1294:	6951      	ldr	r1, [r2, #20]
    1296:	2380      	movs	r3, #128	; 0x80
    1298:	009b      	lsls	r3, r3, #2
    129a:	430b      	orrs	r3, r1
    129c:	6153      	str	r3, [r2, #20]
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    129e:	4a10      	ldr	r2, [pc, #64]	; (12e0 <_system_extint_init+0x50>)
    12a0:	7813      	ldrb	r3, [r2, #0]
    12a2:	2101      	movs	r1, #1
    12a4:	430b      	orrs	r3, r1
    12a6:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    12a8:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    12aa:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    12ac:	6853      	ldr	r3, [r2, #4]
    12ae:	4219      	tst	r1, r3
    12b0:	d1fc      	bne.n	12ac <_system_extint_init+0x1c>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    12b2:	6853      	ldr	r3, [r2, #4]
    12b4:	4218      	tst	r0, r3
    12b6:	d1f9      	bne.n	12ac <_system_extint_init+0x1c>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_ULP32K;
    12b8:	4a09      	ldr	r2, [pc, #36]	; (12e0 <_system_extint_init+0x50>)
    12ba:	7813      	ldrb	r3, [r2, #0]
    12bc:	2110      	movs	r1, #16
    12be:	430b      	orrs	r3, r1
    12c0:	7013      	strb	r3, [r2, #0]
    12c2:	4b08      	ldr	r3, [pc, #32]	; (12e4 <_system_extint_init+0x54>)
    12c4:	0019      	movs	r1, r3
    12c6:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    12c8:	2200      	movs	r2, #0
    12ca:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    12cc:	428b      	cmp	r3, r1
    12ce:	d1fc      	bne.n	12ca <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    12d0:	2208      	movs	r2, #8
    12d2:	4b05      	ldr	r3, [pc, #20]	; (12e8 <_system_extint_init+0x58>)
    12d4:	601a      	str	r2, [r3, #0]
	_extint_enable();
    12d6:	4b05      	ldr	r3, [pc, #20]	; (12ec <_system_extint_init+0x5c>)
    12d8:	4798      	blx	r3
}
    12da:	bd10      	pop	{r4, pc}
    12dc:	40000400 	.word	0x40000400
    12e0:	40002400 	.word	0x40002400
    12e4:	2000076c 	.word	0x2000076c
    12e8:	e000e100 	.word	0xe000e100
    12ec:	00001271 	.word	0x00001271

000012f0 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    12f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    12f2:	46de      	mov	lr, fp
    12f4:	4657      	mov	r7, sl
    12f6:	464e      	mov	r6, r9
    12f8:	4645      	mov	r5, r8
    12fa:	b5e0      	push	{r5, r6, r7, lr}
    12fc:	b087      	sub	sp, #28
    12fe:	4680      	mov	r8, r0
    1300:	9104      	str	r1, [sp, #16]
    1302:	0016      	movs	r6, r2
    1304:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1306:	2200      	movs	r2, #0
    1308:	2300      	movs	r3, #0
    130a:	2100      	movs	r1, #0
    130c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    130e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1310:	2001      	movs	r0, #1
    1312:	0021      	movs	r1, r4
    1314:	9600      	str	r6, [sp, #0]
    1316:	9701      	str	r7, [sp, #4]
    1318:	465c      	mov	r4, fp
    131a:	9403      	str	r4, [sp, #12]
    131c:	4644      	mov	r4, r8
    131e:	9405      	str	r4, [sp, #20]
    1320:	e013      	b.n	134a <long_division+0x5a>
    1322:	2420      	movs	r4, #32
    1324:	1a64      	subs	r4, r4, r1
    1326:	0005      	movs	r5, r0
    1328:	40e5      	lsrs	r5, r4
    132a:	46a8      	mov	r8, r5
    132c:	e014      	b.n	1358 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    132e:	9c00      	ldr	r4, [sp, #0]
    1330:	9d01      	ldr	r5, [sp, #4]
    1332:	1b12      	subs	r2, r2, r4
    1334:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1336:	465c      	mov	r4, fp
    1338:	464d      	mov	r5, r9
    133a:	432c      	orrs	r4, r5
    133c:	46a3      	mov	fp, r4
    133e:	9c03      	ldr	r4, [sp, #12]
    1340:	4645      	mov	r5, r8
    1342:	432c      	orrs	r4, r5
    1344:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    1346:	3901      	subs	r1, #1
    1348:	d325      	bcc.n	1396 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    134a:	2420      	movs	r4, #32
    134c:	4264      	negs	r4, r4
    134e:	190c      	adds	r4, r1, r4
    1350:	d4e7      	bmi.n	1322 <long_division+0x32>
    1352:	0005      	movs	r5, r0
    1354:	40a5      	lsls	r5, r4
    1356:	46a8      	mov	r8, r5
    1358:	0004      	movs	r4, r0
    135a:	408c      	lsls	r4, r1
    135c:	46a1      	mov	r9, r4
		r = r << 1;
    135e:	1892      	adds	r2, r2, r2
    1360:	415b      	adcs	r3, r3
    1362:	0014      	movs	r4, r2
    1364:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1366:	9e05      	ldr	r6, [sp, #20]
    1368:	464f      	mov	r7, r9
    136a:	403e      	ands	r6, r7
    136c:	46b4      	mov	ip, r6
    136e:	9e04      	ldr	r6, [sp, #16]
    1370:	4647      	mov	r7, r8
    1372:	403e      	ands	r6, r7
    1374:	46b2      	mov	sl, r6
    1376:	4666      	mov	r6, ip
    1378:	4657      	mov	r7, sl
    137a:	433e      	orrs	r6, r7
    137c:	d003      	beq.n	1386 <long_division+0x96>
			r |= 0x01;
    137e:	0006      	movs	r6, r0
    1380:	4326      	orrs	r6, r4
    1382:	0032      	movs	r2, r6
    1384:	002b      	movs	r3, r5
		if (r >= d) {
    1386:	9c00      	ldr	r4, [sp, #0]
    1388:	9d01      	ldr	r5, [sp, #4]
    138a:	429d      	cmp	r5, r3
    138c:	d8db      	bhi.n	1346 <long_division+0x56>
    138e:	d1ce      	bne.n	132e <long_division+0x3e>
    1390:	4294      	cmp	r4, r2
    1392:	d8d8      	bhi.n	1346 <long_division+0x56>
    1394:	e7cb      	b.n	132e <long_division+0x3e>
    1396:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1398:	4658      	mov	r0, fp
    139a:	0019      	movs	r1, r3
    139c:	b007      	add	sp, #28
    139e:	bc3c      	pop	{r2, r3, r4, r5}
    13a0:	4690      	mov	r8, r2
    13a2:	4699      	mov	r9, r3
    13a4:	46a2      	mov	sl, r4
    13a6:	46ab      	mov	fp, r5
    13a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000013aa <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    13aa:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    13ac:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    13ae:	2340      	movs	r3, #64	; 0x40
    13b0:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    13b2:	4281      	cmp	r1, r0
    13b4:	d202      	bcs.n	13bc <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    13b6:	0018      	movs	r0, r3
    13b8:	bd10      	pop	{r4, pc}
		baud_calculated++;
    13ba:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    13bc:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    13be:	1c63      	adds	r3, r4, #1
    13c0:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    13c2:	4288      	cmp	r0, r1
    13c4:	d9f9      	bls.n	13ba <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    13c6:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    13c8:	2cff      	cmp	r4, #255	; 0xff
    13ca:	d8f4      	bhi.n	13b6 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    13cc:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    13ce:	2300      	movs	r3, #0
    13d0:	e7f1      	b.n	13b6 <_sercom_get_sync_baud_val+0xc>
	...

000013d4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    13d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    13d6:	b083      	sub	sp, #12
    13d8:	000f      	movs	r7, r1
    13da:	0016      	movs	r6, r2
    13dc:	aa08      	add	r2, sp, #32
    13de:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    13e0:	0004      	movs	r4, r0
    13e2:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    13e4:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    13e6:	42bc      	cmp	r4, r7
    13e8:	d902      	bls.n	13f0 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    13ea:	0010      	movs	r0, r2
    13ec:	b003      	add	sp, #12
    13ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    13f0:	2b00      	cmp	r3, #0
    13f2:	d114      	bne.n	141e <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    13f4:	0002      	movs	r2, r0
    13f6:	0008      	movs	r0, r1
    13f8:	2100      	movs	r1, #0
    13fa:	4c19      	ldr	r4, [pc, #100]	; (1460 <_sercom_get_async_baud_val+0x8c>)
    13fc:	47a0      	blx	r4
    13fe:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    1400:	003a      	movs	r2, r7
    1402:	2300      	movs	r3, #0
    1404:	2000      	movs	r0, #0
    1406:	4c17      	ldr	r4, [pc, #92]	; (1464 <_sercom_get_async_baud_val+0x90>)
    1408:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    140a:	2200      	movs	r2, #0
    140c:	2301      	movs	r3, #1
    140e:	1a12      	subs	r2, r2, r0
    1410:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    1412:	0c12      	lsrs	r2, r2, #16
    1414:	041b      	lsls	r3, r3, #16
    1416:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1418:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    141a:	2200      	movs	r2, #0
    141c:	e7e5      	b.n	13ea <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    141e:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1420:	2b01      	cmp	r3, #1
    1422:	d1f9      	bne.n	1418 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    1424:	000a      	movs	r2, r1
    1426:	2300      	movs	r3, #0
    1428:	2100      	movs	r1, #0
    142a:	4c0d      	ldr	r4, [pc, #52]	; (1460 <_sercom_get_async_baud_val+0x8c>)
    142c:	47a0      	blx	r4
    142e:	0002      	movs	r2, r0
    1430:	000b      	movs	r3, r1
    1432:	9200      	str	r2, [sp, #0]
    1434:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    1436:	0038      	movs	r0, r7
    1438:	2100      	movs	r1, #0
    143a:	4c0a      	ldr	r4, [pc, #40]	; (1464 <_sercom_get_async_baud_val+0x90>)
    143c:	47a0      	blx	r4
    143e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    1440:	2380      	movs	r3, #128	; 0x80
    1442:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1444:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    1446:	4298      	cmp	r0, r3
    1448:	d8cf      	bhi.n	13ea <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    144a:	0f79      	lsrs	r1, r7, #29
    144c:	00f8      	lsls	r0, r7, #3
    144e:	9a00      	ldr	r2, [sp, #0]
    1450:	9b01      	ldr	r3, [sp, #4]
    1452:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1454:	00ea      	lsls	r2, r5, #3
    1456:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1458:	b2d2      	uxtb	r2, r2
    145a:	0352      	lsls	r2, r2, #13
    145c:	432a      	orrs	r2, r5
    145e:	e7db      	b.n	1418 <_sercom_get_async_baud_val+0x44>
    1460:	00004ff1 	.word	0x00004ff1
    1464:	000012f1 	.word	0x000012f1

00001468 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1468:	b510      	push	{r4, lr}
    146a:	b082      	sub	sp, #8
    146c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    146e:	4b0e      	ldr	r3, [pc, #56]	; (14a8 <sercom_set_gclk_generator+0x40>)
    1470:	781b      	ldrb	r3, [r3, #0]
    1472:	2b00      	cmp	r3, #0
    1474:	d007      	beq.n	1486 <sercom_set_gclk_generator+0x1e>
    1476:	2900      	cmp	r1, #0
    1478:	d105      	bne.n	1486 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    147a:	4b0b      	ldr	r3, [pc, #44]	; (14a8 <sercom_set_gclk_generator+0x40>)
    147c:	785b      	ldrb	r3, [r3, #1]
    147e:	4283      	cmp	r3, r0
    1480:	d010      	beq.n	14a4 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1482:	201d      	movs	r0, #29
    1484:	e00c      	b.n	14a0 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1486:	a901      	add	r1, sp, #4
    1488:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    148a:	2011      	movs	r0, #17
    148c:	4b07      	ldr	r3, [pc, #28]	; (14ac <sercom_set_gclk_generator+0x44>)
    148e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1490:	2011      	movs	r0, #17
    1492:	4b07      	ldr	r3, [pc, #28]	; (14b0 <sercom_set_gclk_generator+0x48>)
    1494:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1496:	4b04      	ldr	r3, [pc, #16]	; (14a8 <sercom_set_gclk_generator+0x40>)
    1498:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    149a:	2201      	movs	r2, #1
    149c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    149e:	2000      	movs	r0, #0
}
    14a0:	b002      	add	sp, #8
    14a2:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    14a4:	2000      	movs	r0, #0
    14a6:	e7fb      	b.n	14a0 <sercom_set_gclk_generator+0x38>
    14a8:	20000690 	.word	0x20000690
    14ac:	000023d1 	.word	0x000023d1
    14b0:	00002361 	.word	0x00002361

000014b4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    14b4:	4b40      	ldr	r3, [pc, #256]	; (15b8 <_sercom_get_default_pad+0x104>)
    14b6:	4298      	cmp	r0, r3
    14b8:	d032      	beq.n	1520 <_sercom_get_default_pad+0x6c>
    14ba:	d90a      	bls.n	14d2 <_sercom_get_default_pad+0x1e>
    14bc:	4b3f      	ldr	r3, [pc, #252]	; (15bc <_sercom_get_default_pad+0x108>)
    14be:	4298      	cmp	r0, r3
    14c0:	d04e      	beq.n	1560 <_sercom_get_default_pad+0xac>
    14c2:	4b3f      	ldr	r3, [pc, #252]	; (15c0 <_sercom_get_default_pad+0x10c>)
    14c4:	4298      	cmp	r0, r3
    14c6:	d05b      	beq.n	1580 <_sercom_get_default_pad+0xcc>
    14c8:	4b3e      	ldr	r3, [pc, #248]	; (15c4 <_sercom_get_default_pad+0x110>)
    14ca:	4298      	cmp	r0, r3
    14cc:	d038      	beq.n	1540 <_sercom_get_default_pad+0x8c>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    14ce:	2000      	movs	r0, #0
}
    14d0:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    14d2:	2384      	movs	r3, #132	; 0x84
    14d4:	05db      	lsls	r3, r3, #23
    14d6:	4298      	cmp	r0, r3
    14d8:	d00c      	beq.n	14f4 <_sercom_get_default_pad+0x40>
    14da:	4b3b      	ldr	r3, [pc, #236]	; (15c8 <_sercom_get_default_pad+0x114>)
    14dc:	4298      	cmp	r0, r3
    14de:	d1f6      	bne.n	14ce <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    14e0:	2901      	cmp	r1, #1
    14e2:	d017      	beq.n	1514 <_sercom_get_default_pad+0x60>
    14e4:	2900      	cmp	r1, #0
    14e6:	d05d      	beq.n	15a4 <_sercom_get_default_pad+0xf0>
    14e8:	2902      	cmp	r1, #2
    14ea:	d015      	beq.n	1518 <_sercom_get_default_pad+0x64>
    14ec:	2903      	cmp	r1, #3
    14ee:	d015      	beq.n	151c <_sercom_get_default_pad+0x68>
	return 0;
    14f0:	2000      	movs	r0, #0
    14f2:	e7ed      	b.n	14d0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    14f4:	2901      	cmp	r1, #1
    14f6:	d007      	beq.n	1508 <_sercom_get_default_pad+0x54>
    14f8:	2900      	cmp	r1, #0
    14fa:	d051      	beq.n	15a0 <_sercom_get_default_pad+0xec>
    14fc:	2902      	cmp	r1, #2
    14fe:	d005      	beq.n	150c <_sercom_get_default_pad+0x58>
    1500:	2903      	cmp	r1, #3
    1502:	d005      	beq.n	1510 <_sercom_get_default_pad+0x5c>
	return 0;
    1504:	2000      	movs	r0, #0
    1506:	e7e3      	b.n	14d0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1508:	4830      	ldr	r0, [pc, #192]	; (15cc <_sercom_get_default_pad+0x118>)
    150a:	e7e1      	b.n	14d0 <_sercom_get_default_pad+0x1c>
    150c:	4830      	ldr	r0, [pc, #192]	; (15d0 <_sercom_get_default_pad+0x11c>)
    150e:	e7df      	b.n	14d0 <_sercom_get_default_pad+0x1c>
    1510:	4830      	ldr	r0, [pc, #192]	; (15d4 <_sercom_get_default_pad+0x120>)
    1512:	e7dd      	b.n	14d0 <_sercom_get_default_pad+0x1c>
    1514:	4830      	ldr	r0, [pc, #192]	; (15d8 <_sercom_get_default_pad+0x124>)
    1516:	e7db      	b.n	14d0 <_sercom_get_default_pad+0x1c>
    1518:	4830      	ldr	r0, [pc, #192]	; (15dc <_sercom_get_default_pad+0x128>)
    151a:	e7d9      	b.n	14d0 <_sercom_get_default_pad+0x1c>
    151c:	4830      	ldr	r0, [pc, #192]	; (15e0 <_sercom_get_default_pad+0x12c>)
    151e:	e7d7      	b.n	14d0 <_sercom_get_default_pad+0x1c>
    1520:	2901      	cmp	r1, #1
    1522:	d007      	beq.n	1534 <_sercom_get_default_pad+0x80>
    1524:	2900      	cmp	r1, #0
    1526:	d03f      	beq.n	15a8 <_sercom_get_default_pad+0xf4>
    1528:	2902      	cmp	r1, #2
    152a:	d005      	beq.n	1538 <_sercom_get_default_pad+0x84>
    152c:	2903      	cmp	r1, #3
    152e:	d005      	beq.n	153c <_sercom_get_default_pad+0x88>
	return 0;
    1530:	2000      	movs	r0, #0
    1532:	e7cd      	b.n	14d0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1534:	482b      	ldr	r0, [pc, #172]	; (15e4 <_sercom_get_default_pad+0x130>)
    1536:	e7cb      	b.n	14d0 <_sercom_get_default_pad+0x1c>
    1538:	482b      	ldr	r0, [pc, #172]	; (15e8 <_sercom_get_default_pad+0x134>)
    153a:	e7c9      	b.n	14d0 <_sercom_get_default_pad+0x1c>
    153c:	482b      	ldr	r0, [pc, #172]	; (15ec <_sercom_get_default_pad+0x138>)
    153e:	e7c7      	b.n	14d0 <_sercom_get_default_pad+0x1c>
    1540:	2901      	cmp	r1, #1
    1542:	d007      	beq.n	1554 <_sercom_get_default_pad+0xa0>
    1544:	2900      	cmp	r1, #0
    1546:	d031      	beq.n	15ac <_sercom_get_default_pad+0xf8>
    1548:	2902      	cmp	r1, #2
    154a:	d005      	beq.n	1558 <_sercom_get_default_pad+0xa4>
    154c:	2903      	cmp	r1, #3
    154e:	d005      	beq.n	155c <_sercom_get_default_pad+0xa8>
	return 0;
    1550:	2000      	movs	r0, #0
    1552:	e7bd      	b.n	14d0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1554:	4826      	ldr	r0, [pc, #152]	; (15f0 <_sercom_get_default_pad+0x13c>)
    1556:	e7bb      	b.n	14d0 <_sercom_get_default_pad+0x1c>
    1558:	4826      	ldr	r0, [pc, #152]	; (15f4 <_sercom_get_default_pad+0x140>)
    155a:	e7b9      	b.n	14d0 <_sercom_get_default_pad+0x1c>
    155c:	4826      	ldr	r0, [pc, #152]	; (15f8 <_sercom_get_default_pad+0x144>)
    155e:	e7b7      	b.n	14d0 <_sercom_get_default_pad+0x1c>
    1560:	2901      	cmp	r1, #1
    1562:	d007      	beq.n	1574 <_sercom_get_default_pad+0xc0>
    1564:	2900      	cmp	r1, #0
    1566:	d023      	beq.n	15b0 <_sercom_get_default_pad+0xfc>
    1568:	2902      	cmp	r1, #2
    156a:	d005      	beq.n	1578 <_sercom_get_default_pad+0xc4>
    156c:	2903      	cmp	r1, #3
    156e:	d005      	beq.n	157c <_sercom_get_default_pad+0xc8>
	return 0;
    1570:	2000      	movs	r0, #0
    1572:	e7ad      	b.n	14d0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1574:	4821      	ldr	r0, [pc, #132]	; (15fc <_sercom_get_default_pad+0x148>)
    1576:	e7ab      	b.n	14d0 <_sercom_get_default_pad+0x1c>
    1578:	4821      	ldr	r0, [pc, #132]	; (1600 <_sercom_get_default_pad+0x14c>)
    157a:	e7a9      	b.n	14d0 <_sercom_get_default_pad+0x1c>
    157c:	4821      	ldr	r0, [pc, #132]	; (1604 <_sercom_get_default_pad+0x150>)
    157e:	e7a7      	b.n	14d0 <_sercom_get_default_pad+0x1c>
    1580:	2901      	cmp	r1, #1
    1582:	d007      	beq.n	1594 <_sercom_get_default_pad+0xe0>
    1584:	2900      	cmp	r1, #0
    1586:	d015      	beq.n	15b4 <_sercom_get_default_pad+0x100>
    1588:	2902      	cmp	r1, #2
    158a:	d005      	beq.n	1598 <_sercom_get_default_pad+0xe4>
    158c:	2903      	cmp	r1, #3
    158e:	d005      	beq.n	159c <_sercom_get_default_pad+0xe8>
	return 0;
    1590:	2000      	movs	r0, #0
    1592:	e79d      	b.n	14d0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1594:	481c      	ldr	r0, [pc, #112]	; (1608 <_sercom_get_default_pad+0x154>)
    1596:	e79b      	b.n	14d0 <_sercom_get_default_pad+0x1c>
    1598:	481c      	ldr	r0, [pc, #112]	; (160c <_sercom_get_default_pad+0x158>)
    159a:	e799      	b.n	14d0 <_sercom_get_default_pad+0x1c>
    159c:	481c      	ldr	r0, [pc, #112]	; (1610 <_sercom_get_default_pad+0x15c>)
    159e:	e797      	b.n	14d0 <_sercom_get_default_pad+0x1c>
    15a0:	481c      	ldr	r0, [pc, #112]	; (1614 <_sercom_get_default_pad+0x160>)
    15a2:	e795      	b.n	14d0 <_sercom_get_default_pad+0x1c>
    15a4:	2003      	movs	r0, #3
    15a6:	e793      	b.n	14d0 <_sercom_get_default_pad+0x1c>
    15a8:	481b      	ldr	r0, [pc, #108]	; (1618 <_sercom_get_default_pad+0x164>)
    15aa:	e791      	b.n	14d0 <_sercom_get_default_pad+0x1c>
    15ac:	481b      	ldr	r0, [pc, #108]	; (161c <_sercom_get_default_pad+0x168>)
    15ae:	e78f      	b.n	14d0 <_sercom_get_default_pad+0x1c>
    15b0:	481b      	ldr	r0, [pc, #108]	; (1620 <_sercom_get_default_pad+0x16c>)
    15b2:	e78d      	b.n	14d0 <_sercom_get_default_pad+0x1c>
    15b4:	481b      	ldr	r0, [pc, #108]	; (1624 <_sercom_get_default_pad+0x170>)
    15b6:	e78b      	b.n	14d0 <_sercom_get_default_pad+0x1c>
    15b8:	42000800 	.word	0x42000800
    15bc:	42001000 	.word	0x42001000
    15c0:	43000400 	.word	0x43000400
    15c4:	42000c00 	.word	0x42000c00
    15c8:	42000400 	.word	0x42000400
    15cc:	00050003 	.word	0x00050003
    15d0:	00060003 	.word	0x00060003
    15d4:	00070003 	.word	0x00070003
    15d8:	00010003 	.word	0x00010003
    15dc:	001e0003 	.word	0x001e0003
    15e0:	001f0003 	.word	0x001f0003
    15e4:	00090003 	.word	0x00090003
    15e8:	000a0003 	.word	0x000a0003
    15ec:	000b0003 	.word	0x000b0003
    15f0:	00110003 	.word	0x00110003
    15f4:	00120003 	.word	0x00120003
    15f8:	00130003 	.word	0x00130003
    15fc:	000d0003 	.word	0x000d0003
    1600:	000e0003 	.word	0x000e0003
    1604:	000f0003 	.word	0x000f0003
    1608:	00170003 	.word	0x00170003
    160c:	00180003 	.word	0x00180003
    1610:	00190003 	.word	0x00190003
    1614:	00040003 	.word	0x00040003
    1618:	00080003 	.word	0x00080003
    161c:	00100003 	.word	0x00100003
    1620:	000c0003 	.word	0x000c0003
    1624:	00160003 	.word	0x00160003

00001628 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1628:	b530      	push	{r4, r5, lr}
    162a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    162c:	4b0b      	ldr	r3, [pc, #44]	; (165c <_sercom_get_sercom_inst_index+0x34>)
    162e:	466a      	mov	r2, sp
    1630:	cb32      	ldmia	r3!, {r1, r4, r5}
    1632:	c232      	stmia	r2!, {r1, r4, r5}
    1634:	cb32      	ldmia	r3!, {r1, r4, r5}
    1636:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1638:	9b00      	ldr	r3, [sp, #0]
    163a:	4283      	cmp	r3, r0
    163c:	d00b      	beq.n	1656 <_sercom_get_sercom_inst_index+0x2e>
    163e:	2301      	movs	r3, #1
    1640:	009a      	lsls	r2, r3, #2
    1642:	4669      	mov	r1, sp
    1644:	5852      	ldr	r2, [r2, r1]
    1646:	4282      	cmp	r2, r0
    1648:	d006      	beq.n	1658 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    164a:	3301      	adds	r3, #1
    164c:	2b06      	cmp	r3, #6
    164e:	d1f7      	bne.n	1640 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1650:	2000      	movs	r0, #0
}
    1652:	b007      	add	sp, #28
    1654:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1656:	2300      	movs	r3, #0
			return i;
    1658:	b2d8      	uxtb	r0, r3
    165a:	e7fa      	b.n	1652 <_sercom_get_sercom_inst_index+0x2a>
    165c:	000050b0 	.word	0x000050b0

00001660 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1660:	4770      	bx	lr
	...

00001664 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1664:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1666:	4b0a      	ldr	r3, [pc, #40]	; (1690 <_sercom_set_handler+0x2c>)
    1668:	781b      	ldrb	r3, [r3, #0]
    166a:	2b00      	cmp	r3, #0
    166c:	d10c      	bne.n	1688 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    166e:	4f09      	ldr	r7, [pc, #36]	; (1694 <_sercom_set_handler+0x30>)
    1670:	4e09      	ldr	r6, [pc, #36]	; (1698 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1672:	4d0a      	ldr	r5, [pc, #40]	; (169c <_sercom_set_handler+0x38>)
    1674:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1676:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1678:	195a      	adds	r2, r3, r5
    167a:	6014      	str	r4, [r2, #0]
    167c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    167e:	2b18      	cmp	r3, #24
    1680:	d1f9      	bne.n	1676 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1682:	2201      	movs	r2, #1
    1684:	4b02      	ldr	r3, [pc, #8]	; (1690 <_sercom_set_handler+0x2c>)
    1686:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1688:	0080      	lsls	r0, r0, #2
    168a:	4b02      	ldr	r3, [pc, #8]	; (1694 <_sercom_set_handler+0x30>)
    168c:	50c1      	str	r1, [r0, r3]
}
    168e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1690:	20000692 	.word	0x20000692
    1694:	20000694 	.word	0x20000694
    1698:	00001661 	.word	0x00001661
    169c:	200007ac 	.word	0x200007ac

000016a0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    16a0:	b500      	push	{lr}
    16a2:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    16a4:	2308      	movs	r3, #8
    16a6:	466a      	mov	r2, sp
    16a8:	7013      	strb	r3, [r2, #0]
    16aa:	3301      	adds	r3, #1
    16ac:	7053      	strb	r3, [r2, #1]
    16ae:	3301      	adds	r3, #1
    16b0:	7093      	strb	r3, [r2, #2]
    16b2:	3301      	adds	r3, #1
    16b4:	70d3      	strb	r3, [r2, #3]
    16b6:	3301      	adds	r3, #1
    16b8:	7113      	strb	r3, [r2, #4]
    16ba:	3301      	adds	r3, #1
    16bc:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    16be:	4b03      	ldr	r3, [pc, #12]	; (16cc <_sercom_get_interrupt_vector+0x2c>)
    16c0:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    16c2:	466b      	mov	r3, sp
    16c4:	5618      	ldrsb	r0, [r3, r0]
}
    16c6:	b003      	add	sp, #12
    16c8:	bd00      	pop	{pc}
    16ca:	46c0      	nop			; (mov r8, r8)
    16cc:	00001629 	.word	0x00001629

000016d0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    16d0:	b510      	push	{r4, lr}
    16d2:	4b02      	ldr	r3, [pc, #8]	; (16dc <SERCOM0_Handler+0xc>)
    16d4:	681b      	ldr	r3, [r3, #0]
    16d6:	2000      	movs	r0, #0
    16d8:	4798      	blx	r3
    16da:	bd10      	pop	{r4, pc}
    16dc:	20000694 	.word	0x20000694

000016e0 <SERCOM1_Handler>:
    16e0:	b510      	push	{r4, lr}
    16e2:	4b02      	ldr	r3, [pc, #8]	; (16ec <SERCOM1_Handler+0xc>)
    16e4:	685b      	ldr	r3, [r3, #4]
    16e6:	2001      	movs	r0, #1
    16e8:	4798      	blx	r3
    16ea:	bd10      	pop	{r4, pc}
    16ec:	20000694 	.word	0x20000694

000016f0 <SERCOM2_Handler>:
    16f0:	b510      	push	{r4, lr}
    16f2:	4b02      	ldr	r3, [pc, #8]	; (16fc <SERCOM2_Handler+0xc>)
    16f4:	689b      	ldr	r3, [r3, #8]
    16f6:	2002      	movs	r0, #2
    16f8:	4798      	blx	r3
    16fa:	bd10      	pop	{r4, pc}
    16fc:	20000694 	.word	0x20000694

00001700 <SERCOM3_Handler>:
    1700:	b510      	push	{r4, lr}
    1702:	4b02      	ldr	r3, [pc, #8]	; (170c <SERCOM3_Handler+0xc>)
    1704:	68db      	ldr	r3, [r3, #12]
    1706:	2003      	movs	r0, #3
    1708:	4798      	blx	r3
    170a:	bd10      	pop	{r4, pc}
    170c:	20000694 	.word	0x20000694

00001710 <SERCOM4_Handler>:
    1710:	b510      	push	{r4, lr}
    1712:	4b02      	ldr	r3, [pc, #8]	; (171c <SERCOM4_Handler+0xc>)
    1714:	691b      	ldr	r3, [r3, #16]
    1716:	2004      	movs	r0, #4
    1718:	4798      	blx	r3
    171a:	bd10      	pop	{r4, pc}
    171c:	20000694 	.word	0x20000694

00001720 <SERCOM5_Handler>:
    1720:	b510      	push	{r4, lr}
    1722:	4b02      	ldr	r3, [pc, #8]	; (172c <SERCOM5_Handler+0xc>)
    1724:	695b      	ldr	r3, [r3, #20]
    1726:	2005      	movs	r0, #5
    1728:	4798      	blx	r3
    172a:	bd10      	pop	{r4, pc}
    172c:	20000694 	.word	0x20000694

00001730 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1730:	b5f0      	push	{r4, r5, r6, r7, lr}
    1732:	46de      	mov	lr, fp
    1734:	4657      	mov	r7, sl
    1736:	464e      	mov	r6, r9
    1738:	4645      	mov	r5, r8
    173a:	b5e0      	push	{r5, r6, r7, lr}
    173c:	b091      	sub	sp, #68	; 0x44
    173e:	0005      	movs	r5, r0
    1740:	000c      	movs	r4, r1
    1742:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1744:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1746:	0008      	movs	r0, r1
    1748:	4bc4      	ldr	r3, [pc, #784]	; (1a5c <usart_init+0x32c>)
    174a:	4798      	blx	r3
    174c:	0002      	movs	r2, r0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	if (sercom_index == 5) {
    174e:	2805      	cmp	r0, #5
    1750:	d00d      	beq.n	176e <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1752:	0007      	movs	r7, r0
    1754:	3712      	adds	r7, #18
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    1756:	0003      	movs	r3, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1758:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    175a:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    175c:	07c9      	lsls	r1, r1, #31
    175e:	d509      	bpl.n	1774 <usart_init+0x44>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1760:	b011      	add	sp, #68	; 0x44
    1762:	bc3c      	pop	{r2, r3, r4, r5}
    1764:	4690      	mov	r8, r2
    1766:	4699      	mov	r9, r3
    1768:	46a2      	mov	sl, r4
    176a:	46ab      	mov	fp, r5
    176c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    176e:	2718      	movs	r7, #24
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    1770:	2301      	movs	r3, #1
    1772:	e7f1      	b.n	1758 <usart_init+0x28>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1774:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
    1776:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1778:	0789      	lsls	r1, r1, #30
    177a:	d4f1      	bmi.n	1760 <usart_init+0x30>
	if (sercom_index == 5) {
    177c:	2a05      	cmp	r2, #5
    177e:	d049      	beq.n	1814 <usart_init+0xe4>
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    1780:	49b7      	ldr	r1, [pc, #732]	; (1a60 <usart_init+0x330>)
    1782:	69c8      	ldr	r0, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    1784:	2201      	movs	r2, #1
    1786:	409a      	lsls	r2, r3
    1788:	0013      	movs	r3, r2
    178a:	4303      	orrs	r3, r0
    178c:	61cb      	str	r3, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    178e:	a90f      	add	r1, sp, #60	; 0x3c
    1790:	232d      	movs	r3, #45	; 0x2d
    1792:	4698      	mov	r8, r3
    1794:	5cf3      	ldrb	r3, [r6, r3]
    1796:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1798:	b2ff      	uxtb	r7, r7
    179a:	0038      	movs	r0, r7
    179c:	4bb1      	ldr	r3, [pc, #708]	; (1a64 <usart_init+0x334>)
    179e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    17a0:	0038      	movs	r0, r7
    17a2:	4bb1      	ldr	r3, [pc, #708]	; (1a68 <usart_init+0x338>)
    17a4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    17a6:	4643      	mov	r3, r8
    17a8:	5cf0      	ldrb	r0, [r6, r3]
    17aa:	2100      	movs	r1, #0
    17ac:	4baf      	ldr	r3, [pc, #700]	; (1a6c <usart_init+0x33c>)
    17ae:	4798      	blx	r3
	module->character_size = config->character_size;
    17b0:	7af3      	ldrb	r3, [r6, #11]
    17b2:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    17b4:	2324      	movs	r3, #36	; 0x24
    17b6:	5cf3      	ldrb	r3, [r6, r3]
    17b8:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    17ba:	2325      	movs	r3, #37	; 0x25
    17bc:	5cf3      	ldrb	r3, [r6, r3]
    17be:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    17c0:	7ef3      	ldrb	r3, [r6, #27]
    17c2:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    17c4:	7f33      	ldrb	r3, [r6, #28]
    17c6:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    17c8:	682b      	ldr	r3, [r5, #0]
    17ca:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    17cc:	0018      	movs	r0, r3
    17ce:	4ba3      	ldr	r3, [pc, #652]	; (1a5c <usart_init+0x32c>)
    17d0:	4798      	blx	r3
	if (sercom_index == 5) {
    17d2:	2805      	cmp	r0, #5
    17d4:	d026      	beq.n	1824 <usart_init+0xf4>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    17d6:	3012      	adds	r0, #18
	uint16_t baud  = 0;
    17d8:	2200      	movs	r2, #0
    17da:	230e      	movs	r3, #14
    17dc:	a906      	add	r1, sp, #24
    17de:	468c      	mov	ip, r1
    17e0:	4463      	add	r3, ip
    17e2:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    17e4:	8a32      	ldrh	r2, [r6, #16]
    17e6:	9202      	str	r2, [sp, #8]
    17e8:	2380      	movs	r3, #128	; 0x80
    17ea:	01db      	lsls	r3, r3, #7
    17ec:	429a      	cmp	r2, r3
    17ee:	d100      	bne.n	17f2 <usart_init+0xc2>
    17f0:	e0a7      	b.n	1942 <usart_init+0x212>
    17f2:	d919      	bls.n	1828 <usart_init+0xf8>
    17f4:	23c0      	movs	r3, #192	; 0xc0
    17f6:	01db      	lsls	r3, r3, #7
    17f8:	9a02      	ldr	r2, [sp, #8]
    17fa:	429a      	cmp	r2, r3
    17fc:	d100      	bne.n	1800 <usart_init+0xd0>
    17fe:	e09b      	b.n	1938 <usart_init+0x208>
    1800:	2380      	movs	r3, #128	; 0x80
    1802:	021b      	lsls	r3, r3, #8
    1804:	429a      	cmp	r2, r3
    1806:	d000      	beq.n	180a <usart_init+0xda>
    1808:	e123      	b.n	1a52 <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    180a:	2303      	movs	r3, #3
    180c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    180e:	2300      	movs	r3, #0
    1810:	9307      	str	r3, [sp, #28]
    1812:	e012      	b.n	183a <usart_init+0x10a>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    1814:	4992      	ldr	r1, [pc, #584]	; (1a60 <usart_init+0x330>)
    1816:	6a08      	ldr	r0, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    1818:	3a04      	subs	r2, #4
    181a:	409a      	lsls	r2, r3
    181c:	0013      	movs	r3, r2
    181e:	4303      	orrs	r3, r0
    1820:	620b      	str	r3, [r1, #32]
    1822:	e7b4      	b.n	178e <usart_init+0x5e>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    1824:	2018      	movs	r0, #24
    1826:	e7d7      	b.n	17d8 <usart_init+0xa8>
	switch (config->sample_rate) {
    1828:	2380      	movs	r3, #128	; 0x80
    182a:	019b      	lsls	r3, r3, #6
    182c:	429a      	cmp	r2, r3
    182e:	d000      	beq.n	1832 <usart_init+0x102>
    1830:	e10f      	b.n	1a52 <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1832:	2310      	movs	r3, #16
    1834:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1836:	3b0f      	subs	r3, #15
    1838:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    183a:	6833      	ldr	r3, [r6, #0]
    183c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    183e:	68f3      	ldr	r3, [r6, #12]
    1840:	469b      	mov	fp, r3
		config->sample_adjustment |
    1842:	6973      	ldr	r3, [r6, #20]
    1844:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1846:	7e33      	ldrb	r3, [r6, #24]
    1848:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    184a:	2326      	movs	r3, #38	; 0x26
    184c:	5cf3      	ldrb	r3, [r6, r3]
    184e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1850:	6873      	ldr	r3, [r6, #4]
    1852:	4699      	mov	r9, r3
	switch (transfer_mode)
    1854:	2b00      	cmp	r3, #0
    1856:	d100      	bne.n	185a <usart_init+0x12a>
    1858:	e09b      	b.n	1992 <usart_init+0x262>
    185a:	2380      	movs	r3, #128	; 0x80
    185c:	055b      	lsls	r3, r3, #21
    185e:	4599      	cmp	r9, r3
    1860:	d104      	bne.n	186c <usart_init+0x13c>
			if (!config->use_external_clock) {
    1862:	2327      	movs	r3, #39	; 0x27
    1864:	5cf3      	ldrb	r3, [r6, r3]
    1866:	2b00      	cmp	r3, #0
    1868:	d100      	bne.n	186c <usart_init+0x13c>
    186a:	e080      	b.n	196e <usart_init+0x23e>
	if(config->encoding_format_enable) {
    186c:	7e73      	ldrb	r3, [r6, #25]
    186e:	2b00      	cmp	r3, #0
    1870:	d002      	beq.n	1878 <usart_init+0x148>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1872:	7eb3      	ldrb	r3, [r6, #26]
    1874:	4642      	mov	r2, r8
    1876:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    1878:	230e      	movs	r3, #14
    187a:	aa06      	add	r2, sp, #24
    187c:	4694      	mov	ip, r2
    187e:	4463      	add	r3, ip
    1880:	881b      	ldrh	r3, [r3, #0]
    1882:	4642      	mov	r2, r8
    1884:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    1886:	9b05      	ldr	r3, [sp, #20]
    1888:	465a      	mov	r2, fp
    188a:	4313      	orrs	r3, r2
    188c:	9a03      	ldr	r2, [sp, #12]
    188e:	4313      	orrs	r3, r2
    1890:	464a      	mov	r2, r9
    1892:	4313      	orrs	r3, r2
    1894:	9f02      	ldr	r7, [sp, #8]
    1896:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1898:	9b04      	ldr	r3, [sp, #16]
    189a:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    189c:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    189e:	4653      	mov	r3, sl
    18a0:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    18a2:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    18a4:	2327      	movs	r3, #39	; 0x27
    18a6:	5cf3      	ldrb	r3, [r6, r3]
    18a8:	2b00      	cmp	r3, #0
    18aa:	d101      	bne.n	18b0 <usart_init+0x180>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    18ac:	3304      	adds	r3, #4
    18ae:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    18b0:	7e73      	ldrb	r3, [r6, #25]
    18b2:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    18b4:	7f32      	ldrb	r2, [r6, #28]
    18b6:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    18b8:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    18ba:	7f72      	ldrb	r2, [r6, #29]
    18bc:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    18be:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    18c0:	2224      	movs	r2, #36	; 0x24
    18c2:	5cb2      	ldrb	r2, [r6, r2]
    18c4:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    18c6:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    18c8:	2225      	movs	r2, #37	; 0x25
    18ca:	5cb2      	ldrb	r2, [r6, r2]
    18cc:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    18ce:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    18d0:	7ab1      	ldrb	r1, [r6, #10]
    18d2:	7af2      	ldrb	r2, [r6, #11]
    18d4:	4311      	orrs	r1, r2
    18d6:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    18d8:	8933      	ldrh	r3, [r6, #8]
    18da:	2bff      	cmp	r3, #255	; 0xff
    18dc:	d07d      	beq.n	19da <usart_init+0x2aa>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    18de:	2280      	movs	r2, #128	; 0x80
    18e0:	0452      	lsls	r2, r2, #17
    18e2:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    18e4:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    18e6:	232c      	movs	r3, #44	; 0x2c
    18e8:	5cf3      	ldrb	r3, [r6, r3]
    18ea:	2b00      	cmp	r3, #0
    18ec:	d103      	bne.n	18f6 <usart_init+0x1c6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    18ee:	4b60      	ldr	r3, [pc, #384]	; (1a70 <usart_init+0x340>)
    18f0:	789b      	ldrb	r3, [r3, #2]
    18f2:	079b      	lsls	r3, r3, #30
    18f4:	d501      	bpl.n	18fa <usart_init+0x1ca>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    18f6:	2380      	movs	r3, #128	; 0x80
    18f8:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    18fa:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    18fc:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    18fe:	2b00      	cmp	r3, #0
    1900:	d1fc      	bne.n	18fc <usart_init+0x1cc>
	usart_hw->CTRLB.reg = ctrlb;
    1902:	4643      	mov	r3, r8
    1904:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1906:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1908:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    190a:	2b00      	cmp	r3, #0
    190c:	d1fc      	bne.n	1908 <usart_init+0x1d8>
	usart_hw->CTRLA.reg = ctrla;
    190e:	4643      	mov	r3, r8
    1910:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1912:	ab0e      	add	r3, sp, #56	; 0x38
    1914:	2280      	movs	r2, #128	; 0x80
    1916:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1918:	2200      	movs	r2, #0
    191a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    191c:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    191e:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1920:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1922:	930a      	str	r3, [sp, #40]	; 0x28
    1924:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1926:	930b      	str	r3, [sp, #44]	; 0x2c
    1928:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    192a:	930c      	str	r3, [sp, #48]	; 0x30
    192c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    192e:	9302      	str	r3, [sp, #8]
    1930:	930d      	str	r3, [sp, #52]	; 0x34
    1932:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1934:	ae0a      	add	r6, sp, #40	; 0x28
    1936:	e05e      	b.n	19f6 <usart_init+0x2c6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1938:	2308      	movs	r3, #8
    193a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    193c:	3b07      	subs	r3, #7
    193e:	9307      	str	r3, [sp, #28]
    1940:	e77b      	b.n	183a <usart_init+0x10a>
	ctrla = (uint32_t)config->data_order |
    1942:	6833      	ldr	r3, [r6, #0]
    1944:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1946:	68f3      	ldr	r3, [r6, #12]
    1948:	469b      	mov	fp, r3
		config->sample_adjustment |
    194a:	6973      	ldr	r3, [r6, #20]
    194c:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    194e:	7e33      	ldrb	r3, [r6, #24]
    1950:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1952:	2326      	movs	r3, #38	; 0x26
    1954:	5cf3      	ldrb	r3, [r6, r3]
    1956:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1958:	6873      	ldr	r3, [r6, #4]
    195a:	4699      	mov	r9, r3
	switch (transfer_mode)
    195c:	2b00      	cmp	r3, #0
    195e:	d014      	beq.n	198a <usart_init+0x25a>
    1960:	2380      	movs	r3, #128	; 0x80
    1962:	055b      	lsls	r3, r3, #21
    1964:	4599      	cmp	r9, r3
    1966:	d100      	bne.n	196a <usart_init+0x23a>
    1968:	e77b      	b.n	1862 <usart_init+0x132>
	enum status_code status_code = STATUS_OK;
    196a:	2000      	movs	r0, #0
    196c:	e020      	b.n	19b0 <usart_init+0x280>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    196e:	6a33      	ldr	r3, [r6, #32]
    1970:	001f      	movs	r7, r3
    1972:	b2c0      	uxtb	r0, r0
    1974:	4b3f      	ldr	r3, [pc, #252]	; (1a74 <usart_init+0x344>)
    1976:	4798      	blx	r3
    1978:	0001      	movs	r1, r0
    197a:	220e      	movs	r2, #14
    197c:	ab06      	add	r3, sp, #24
    197e:	469c      	mov	ip, r3
    1980:	4462      	add	r2, ip
    1982:	0038      	movs	r0, r7
    1984:	4b3c      	ldr	r3, [pc, #240]	; (1a78 <usart_init+0x348>)
    1986:	4798      	blx	r3
    1988:	e012      	b.n	19b0 <usart_init+0x280>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    198a:	2308      	movs	r3, #8
    198c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    198e:	2300      	movs	r3, #0
    1990:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    1992:	2327      	movs	r3, #39	; 0x27
    1994:	5cf3      	ldrb	r3, [r6, r3]
    1996:	2b00      	cmp	r3, #0
    1998:	d00e      	beq.n	19b8 <usart_init+0x288>
				status_code =
    199a:	9b06      	ldr	r3, [sp, #24]
    199c:	9300      	str	r3, [sp, #0]
    199e:	9b07      	ldr	r3, [sp, #28]
    19a0:	220e      	movs	r2, #14
    19a2:	a906      	add	r1, sp, #24
    19a4:	468c      	mov	ip, r1
    19a6:	4462      	add	r2, ip
    19a8:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    19aa:	6a30      	ldr	r0, [r6, #32]
    19ac:	4f33      	ldr	r7, [pc, #204]	; (1a7c <usart_init+0x34c>)
    19ae:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    19b0:	2800      	cmp	r0, #0
    19b2:	d000      	beq.n	19b6 <usart_init+0x286>
    19b4:	e6d4      	b.n	1760 <usart_init+0x30>
    19b6:	e759      	b.n	186c <usart_init+0x13c>
						_sercom_get_async_baud_val(config->baudrate,
    19b8:	6a33      	ldr	r3, [r6, #32]
    19ba:	001f      	movs	r7, r3
    19bc:	b2c0      	uxtb	r0, r0
    19be:	4b2d      	ldr	r3, [pc, #180]	; (1a74 <usart_init+0x344>)
    19c0:	4798      	blx	r3
    19c2:	0001      	movs	r1, r0
				status_code =
    19c4:	9b06      	ldr	r3, [sp, #24]
    19c6:	9300      	str	r3, [sp, #0]
    19c8:	9b07      	ldr	r3, [sp, #28]
    19ca:	220e      	movs	r2, #14
    19cc:	a806      	add	r0, sp, #24
    19ce:	4684      	mov	ip, r0
    19d0:	4462      	add	r2, ip
    19d2:	0038      	movs	r0, r7
    19d4:	4f29      	ldr	r7, [pc, #164]	; (1a7c <usart_init+0x34c>)
    19d6:	47b8      	blx	r7
    19d8:	e7ea      	b.n	19b0 <usart_init+0x280>
		if(config->lin_slave_enable) {
    19da:	7ef3      	ldrb	r3, [r6, #27]
    19dc:	2b00      	cmp	r3, #0
    19de:	d082      	beq.n	18e6 <usart_init+0x1b6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    19e0:	2380      	movs	r3, #128	; 0x80
    19e2:	04db      	lsls	r3, r3, #19
    19e4:	431f      	orrs	r7, r3
    19e6:	e77e      	b.n	18e6 <usart_init+0x1b6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    19e8:	0020      	movs	r0, r4
    19ea:	4b25      	ldr	r3, [pc, #148]	; (1a80 <usart_init+0x350>)
    19ec:	4798      	blx	r3
    19ee:	e007      	b.n	1a00 <usart_init+0x2d0>
    19f0:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    19f2:	2f04      	cmp	r7, #4
    19f4:	d00d      	beq.n	1a12 <usart_init+0x2e2>
    19f6:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    19f8:	00bb      	lsls	r3, r7, #2
    19fa:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    19fc:	2800      	cmp	r0, #0
    19fe:	d0f3      	beq.n	19e8 <usart_init+0x2b8>
		if (current_pinmux != PINMUX_UNUSED) {
    1a00:	1c43      	adds	r3, r0, #1
    1a02:	d0f5      	beq.n	19f0 <usart_init+0x2c0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1a04:	a90e      	add	r1, sp, #56	; 0x38
    1a06:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1a08:	0c00      	lsrs	r0, r0, #16
    1a0a:	b2c0      	uxtb	r0, r0
    1a0c:	4b1d      	ldr	r3, [pc, #116]	; (1a84 <usart_init+0x354>)
    1a0e:	4798      	blx	r3
    1a10:	e7ee      	b.n	19f0 <usart_init+0x2c0>
		module->callback[i]            = NULL;
    1a12:	2300      	movs	r3, #0
    1a14:	60eb      	str	r3, [r5, #12]
    1a16:	612b      	str	r3, [r5, #16]
    1a18:	616b      	str	r3, [r5, #20]
    1a1a:	61ab      	str	r3, [r5, #24]
    1a1c:	61eb      	str	r3, [r5, #28]
    1a1e:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1a20:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1a22:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1a24:	2200      	movs	r2, #0
    1a26:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1a28:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1a2a:	3330      	adds	r3, #48	; 0x30
    1a2c:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1a2e:	3301      	adds	r3, #1
    1a30:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1a32:	3301      	adds	r3, #1
    1a34:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    1a36:	3301      	adds	r3, #1
    1a38:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1a3a:	6828      	ldr	r0, [r5, #0]
    1a3c:	4b07      	ldr	r3, [pc, #28]	; (1a5c <usart_init+0x32c>)
    1a3e:	4798      	blx	r3
    1a40:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1a42:	4911      	ldr	r1, [pc, #68]	; (1a88 <usart_init+0x358>)
    1a44:	4b11      	ldr	r3, [pc, #68]	; (1a8c <usart_init+0x35c>)
    1a46:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1a48:	00a4      	lsls	r4, r4, #2
    1a4a:	4b11      	ldr	r3, [pc, #68]	; (1a90 <usart_init+0x360>)
    1a4c:	50e5      	str	r5, [r4, r3]
	return status_code;
    1a4e:	2000      	movs	r0, #0
    1a50:	e686      	b.n	1760 <usart_init+0x30>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1a52:	2310      	movs	r3, #16
    1a54:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1a56:	2300      	movs	r3, #0
    1a58:	9307      	str	r3, [sp, #28]
    1a5a:	e6ee      	b.n	183a <usart_init+0x10a>
    1a5c:	00001629 	.word	0x00001629
    1a60:	40000400 	.word	0x40000400
    1a64:	000023d1 	.word	0x000023d1
    1a68:	00002361 	.word	0x00002361
    1a6c:	00001469 	.word	0x00001469
    1a70:	41002000 	.word	0x41002000
    1a74:	000023f5 	.word	0x000023f5
    1a78:	000013ab 	.word	0x000013ab
    1a7c:	000013d5 	.word	0x000013d5
    1a80:	000014b5 	.word	0x000014b5
    1a84:	000024cd 	.word	0x000024cd
    1a88:	00001b25 	.word	0x00001b25
    1a8c:	00001665 	.word	0x00001665
    1a90:	200007ac 	.word	0x200007ac

00001a94 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1a94:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    1a96:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    1a98:	2a00      	cmp	r2, #0
    1a9a:	d101      	bne.n	1aa0 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1a9c:	0018      	movs	r0, r3
    1a9e:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    1aa0:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    1aa2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1aa4:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    1aa6:	2a00      	cmp	r2, #0
    1aa8:	d1f8      	bne.n	1a9c <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1aaa:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    1aac:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1aae:	2102      	movs	r1, #2
    1ab0:	7e13      	ldrb	r3, [r2, #24]
    1ab2:	420b      	tst	r3, r1
    1ab4:	d0fc      	beq.n	1ab0 <usart_write_wait+0x1c>
	return STATUS_OK;
    1ab6:	2300      	movs	r3, #0
    1ab8:	e7f0      	b.n	1a9c <usart_write_wait+0x8>

00001aba <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1aba:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1abc:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    1abe:	2a00      	cmp	r2, #0
    1ac0:	d101      	bne.n	1ac6 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    1ac2:	0018      	movs	r0, r3
    1ac4:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    1ac6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1ac8:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1aca:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    1acc:	2a00      	cmp	r2, #0
    1ace:	d1f8      	bne.n	1ac2 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1ad0:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1ad2:	7e10      	ldrb	r0, [r2, #24]
    1ad4:	0740      	lsls	r0, r0, #29
    1ad6:	d5f4      	bpl.n	1ac2 <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1ad8:	8b53      	ldrh	r3, [r2, #26]
    1ada:	b2db      	uxtb	r3, r3
	if (error_code) {
    1adc:	0698      	lsls	r0, r3, #26
    1ade:	d01d      	beq.n	1b1c <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1ae0:	0798      	lsls	r0, r3, #30
    1ae2:	d503      	bpl.n	1aec <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1ae4:	2302      	movs	r3, #2
    1ae6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    1ae8:	3318      	adds	r3, #24
    1aea:	e7ea      	b.n	1ac2 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1aec:	0758      	lsls	r0, r3, #29
    1aee:	d503      	bpl.n	1af8 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1af0:	2304      	movs	r3, #4
    1af2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1af4:	331a      	adds	r3, #26
    1af6:	e7e4      	b.n	1ac2 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1af8:	07d8      	lsls	r0, r3, #31
    1afa:	d503      	bpl.n	1b04 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1afc:	2301      	movs	r3, #1
    1afe:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1b00:	3312      	adds	r3, #18
    1b02:	e7de      	b.n	1ac2 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1b04:	06d8      	lsls	r0, r3, #27
    1b06:	d503      	bpl.n	1b10 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1b08:	2310      	movs	r3, #16
    1b0a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    1b0c:	3332      	adds	r3, #50	; 0x32
    1b0e:	e7d8      	b.n	1ac2 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1b10:	069b      	lsls	r3, r3, #26
    1b12:	d503      	bpl.n	1b1c <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1b14:	2320      	movs	r3, #32
    1b16:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    1b18:	3321      	adds	r3, #33	; 0x21
    1b1a:	e7d2      	b.n	1ac2 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    1b1c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1b1e:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    1b20:	2300      	movs	r3, #0
    1b22:	e7ce      	b.n	1ac2 <usart_read_wait+0x8>

00001b24 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1b26:	0080      	lsls	r0, r0, #2
    1b28:	4b62      	ldr	r3, [pc, #392]	; (1cb4 <_usart_interrupt_handler+0x190>)
    1b2a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1b2c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1b2e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1b30:	2b00      	cmp	r3, #0
    1b32:	d1fc      	bne.n	1b2e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1b34:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1b36:	7da6      	ldrb	r6, [r4, #22]
    1b38:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    1b3a:	2330      	movs	r3, #48	; 0x30
    1b3c:	5ceb      	ldrb	r3, [r5, r3]
    1b3e:	2231      	movs	r2, #49	; 0x31
    1b40:	5caf      	ldrb	r7, [r5, r2]
    1b42:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1b44:	07f3      	lsls	r3, r6, #31
    1b46:	d522      	bpl.n	1b8e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1b48:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1b4a:	b29b      	uxth	r3, r3
    1b4c:	2b00      	cmp	r3, #0
    1b4e:	d01c      	beq.n	1b8a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1b50:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1b52:	7813      	ldrb	r3, [r2, #0]
    1b54:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1b56:	1c51      	adds	r1, r2, #1
    1b58:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1b5a:	7969      	ldrb	r1, [r5, #5]
    1b5c:	2901      	cmp	r1, #1
    1b5e:	d00e      	beq.n	1b7e <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1b60:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1b62:	05db      	lsls	r3, r3, #23
    1b64:	0ddb      	lsrs	r3, r3, #23
    1b66:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1b68:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1b6a:	3b01      	subs	r3, #1
    1b6c:	b29b      	uxth	r3, r3
    1b6e:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1b70:	2b00      	cmp	r3, #0
    1b72:	d10c      	bne.n	1b8e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1b74:	3301      	adds	r3, #1
    1b76:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1b78:	3301      	adds	r3, #1
    1b7a:	75a3      	strb	r3, [r4, #22]
    1b7c:	e007      	b.n	1b8e <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1b7e:	7851      	ldrb	r1, [r2, #1]
    1b80:	0209      	lsls	r1, r1, #8
    1b82:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1b84:	3202      	adds	r2, #2
    1b86:	62aa      	str	r2, [r5, #40]	; 0x28
    1b88:	e7eb      	b.n	1b62 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1b8a:	2301      	movs	r3, #1
    1b8c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1b8e:	07b3      	lsls	r3, r6, #30
    1b90:	d506      	bpl.n	1ba0 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1b92:	2302      	movs	r3, #2
    1b94:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1b96:	2200      	movs	r2, #0
    1b98:	3331      	adds	r3, #49	; 0x31
    1b9a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1b9c:	07fb      	lsls	r3, r7, #31
    1b9e:	d41a      	bmi.n	1bd6 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1ba0:	0773      	lsls	r3, r6, #29
    1ba2:	d565      	bpl.n	1c70 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    1ba4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1ba6:	b29b      	uxth	r3, r3
    1ba8:	2b00      	cmp	r3, #0
    1baa:	d05f      	beq.n	1c6c <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1bac:	8b63      	ldrh	r3, [r4, #26]
    1bae:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1bb0:	071a      	lsls	r2, r3, #28
    1bb2:	d414      	bmi.n	1bde <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1bb4:	223f      	movs	r2, #63	; 0x3f
    1bb6:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1bb8:	2b00      	cmp	r3, #0
    1bba:	d034      	beq.n	1c26 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1bbc:	079a      	lsls	r2, r3, #30
    1bbe:	d511      	bpl.n	1be4 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1bc0:	221a      	movs	r2, #26
    1bc2:	2332      	movs	r3, #50	; 0x32
    1bc4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1bc6:	3b30      	subs	r3, #48	; 0x30
    1bc8:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1bca:	077b      	lsls	r3, r7, #29
    1bcc:	d550      	bpl.n	1c70 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1bce:	0028      	movs	r0, r5
    1bd0:	696b      	ldr	r3, [r5, #20]
    1bd2:	4798      	blx	r3
    1bd4:	e04c      	b.n	1c70 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1bd6:	0028      	movs	r0, r5
    1bd8:	68eb      	ldr	r3, [r5, #12]
    1bda:	4798      	blx	r3
    1bdc:	e7e0      	b.n	1ba0 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1bde:	2237      	movs	r2, #55	; 0x37
    1be0:	4013      	ands	r3, r2
    1be2:	e7e9      	b.n	1bb8 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1be4:	075a      	lsls	r2, r3, #29
    1be6:	d505      	bpl.n	1bf4 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1be8:	221e      	movs	r2, #30
    1bea:	2332      	movs	r3, #50	; 0x32
    1bec:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1bee:	3b2e      	subs	r3, #46	; 0x2e
    1bf0:	8363      	strh	r3, [r4, #26]
    1bf2:	e7ea      	b.n	1bca <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1bf4:	07da      	lsls	r2, r3, #31
    1bf6:	d505      	bpl.n	1c04 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    1bf8:	2213      	movs	r2, #19
    1bfa:	2332      	movs	r3, #50	; 0x32
    1bfc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1bfe:	3b31      	subs	r3, #49	; 0x31
    1c00:	8363      	strh	r3, [r4, #26]
    1c02:	e7e2      	b.n	1bca <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1c04:	06da      	lsls	r2, r3, #27
    1c06:	d505      	bpl.n	1c14 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    1c08:	2242      	movs	r2, #66	; 0x42
    1c0a:	2332      	movs	r3, #50	; 0x32
    1c0c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1c0e:	3b22      	subs	r3, #34	; 0x22
    1c10:	8363      	strh	r3, [r4, #26]
    1c12:	e7da      	b.n	1bca <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1c14:	2220      	movs	r2, #32
    1c16:	421a      	tst	r2, r3
    1c18:	d0d7      	beq.n	1bca <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1c1a:	3221      	adds	r2, #33	; 0x21
    1c1c:	2332      	movs	r3, #50	; 0x32
    1c1e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1c20:	3b12      	subs	r3, #18
    1c22:	8363      	strh	r3, [r4, #26]
    1c24:	e7d1      	b.n	1bca <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1c26:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1c28:	05db      	lsls	r3, r3, #23
    1c2a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1c2c:	b2da      	uxtb	r2, r3
    1c2e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1c30:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1c32:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1c34:	1c51      	adds	r1, r2, #1
    1c36:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1c38:	7969      	ldrb	r1, [r5, #5]
    1c3a:	2901      	cmp	r1, #1
    1c3c:	d010      	beq.n	1c60 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1c3e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1c40:	3b01      	subs	r3, #1
    1c42:	b29b      	uxth	r3, r3
    1c44:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1c46:	2b00      	cmp	r3, #0
    1c48:	d112      	bne.n	1c70 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1c4a:	3304      	adds	r3, #4
    1c4c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1c4e:	2200      	movs	r2, #0
    1c50:	332e      	adds	r3, #46	; 0x2e
    1c52:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1c54:	07bb      	lsls	r3, r7, #30
    1c56:	d50b      	bpl.n	1c70 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1c58:	0028      	movs	r0, r5
    1c5a:	692b      	ldr	r3, [r5, #16]
    1c5c:	4798      	blx	r3
    1c5e:	e007      	b.n	1c70 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1c60:	0a1b      	lsrs	r3, r3, #8
    1c62:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1c64:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1c66:	3301      	adds	r3, #1
    1c68:	626b      	str	r3, [r5, #36]	; 0x24
    1c6a:	e7e8      	b.n	1c3e <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1c6c:	2304      	movs	r3, #4
    1c6e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1c70:	06f3      	lsls	r3, r6, #27
    1c72:	d504      	bpl.n	1c7e <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1c74:	2310      	movs	r3, #16
    1c76:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1c78:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1c7a:	06fb      	lsls	r3, r7, #27
    1c7c:	d40e      	bmi.n	1c9c <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1c7e:	06b3      	lsls	r3, r6, #26
    1c80:	d504      	bpl.n	1c8c <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1c82:	2320      	movs	r3, #32
    1c84:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1c86:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1c88:	073b      	lsls	r3, r7, #28
    1c8a:	d40b      	bmi.n	1ca4 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1c8c:	0733      	lsls	r3, r6, #28
    1c8e:	d504      	bpl.n	1c9a <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1c90:	2308      	movs	r3, #8
    1c92:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1c94:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1c96:	06bb      	lsls	r3, r7, #26
    1c98:	d408      	bmi.n	1cac <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    1c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1c9c:	0028      	movs	r0, r5
    1c9e:	69eb      	ldr	r3, [r5, #28]
    1ca0:	4798      	blx	r3
    1ca2:	e7ec      	b.n	1c7e <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1ca4:	0028      	movs	r0, r5
    1ca6:	69ab      	ldr	r3, [r5, #24]
    1ca8:	4798      	blx	r3
    1caa:	e7ef      	b.n	1c8c <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1cac:	6a2b      	ldr	r3, [r5, #32]
    1cae:	0028      	movs	r0, r5
    1cb0:	4798      	blx	r3
}
    1cb2:	e7f2      	b.n	1c9a <_usart_interrupt_handler+0x176>
    1cb4:	200007ac 	.word	0x200007ac

00001cb8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1cb8:	b510      	push	{r4, lr}
	switch (clock_source) {
    1cba:	2808      	cmp	r0, #8
    1cbc:	d803      	bhi.n	1cc6 <system_clock_source_get_hz+0xe>
    1cbe:	0080      	lsls	r0, r0, #2
    1cc0:	4b1d      	ldr	r3, [pc, #116]	; (1d38 <system_clock_source_get_hz+0x80>)
    1cc2:	581b      	ldr	r3, [r3, r0]
    1cc4:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    1cc6:	2000      	movs	r0, #0
    1cc8:	e034      	b.n	1d34 <system_clock_source_get_hz+0x7c>
		return _system_clock_inst.xosc.frequency;
    1cca:	4b1c      	ldr	r3, [pc, #112]	; (1d3c <system_clock_source_get_hz+0x84>)
    1ccc:	6918      	ldr	r0, [r3, #16]
    1cce:	e031      	b.n	1d34 <system_clock_source_get_hz+0x7c>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    1cd0:	4b1b      	ldr	r3, [pc, #108]	; (1d40 <system_clock_source_get_hz+0x88>)
    1cd2:	7d18      	ldrb	r0, [r3, #20]
    1cd4:	0700      	lsls	r0, r0, #28
    1cd6:	0f80      	lsrs	r0, r0, #30
    1cd8:	1c43      	adds	r3, r0, #1
    1cda:	481a      	ldr	r0, [pc, #104]	; (1d44 <system_clock_source_get_hz+0x8c>)
    1cdc:	4358      	muls	r0, r3
    1cde:	e029      	b.n	1d34 <system_clock_source_get_hz+0x7c>
		return _system_clock_inst.xosc32k.frequency;
    1ce0:	4b16      	ldr	r3, [pc, #88]	; (1d3c <system_clock_source_get_hz+0x84>)
    1ce2:	6958      	ldr	r0, [r3, #20]
    1ce4:	e026      	b.n	1d34 <system_clock_source_get_hz+0x7c>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    1ce6:	4b15      	ldr	r3, [pc, #84]	; (1d3c <system_clock_source_get_hz+0x84>)
    1ce8:	681b      	ldr	r3, [r3, #0]
			return 0;
    1cea:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    1cec:	079b      	lsls	r3, r3, #30
    1cee:	d521      	bpl.n	1d34 <system_clock_source_get_hz+0x7c>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    1cf0:	4913      	ldr	r1, [pc, #76]	; (1d40 <system_clock_source_get_hz+0x88>)
    1cf2:	2280      	movs	r2, #128	; 0x80
    1cf4:	0052      	lsls	r2, r2, #1
    1cf6:	68cb      	ldr	r3, [r1, #12]
    1cf8:	4213      	tst	r3, r2
    1cfa:	d0fc      	beq.n	1cf6 <system_clock_source_get_hz+0x3e>
		switch(_system_clock_inst.dfll.control &
    1cfc:	4b0f      	ldr	r3, [pc, #60]	; (1d3c <system_clock_source_get_hz+0x84>)
    1cfe:	681a      	ldr	r2, [r3, #0]
    1d00:	2324      	movs	r3, #36	; 0x24
    1d02:	4013      	ands	r3, r2
    1d04:	2b04      	cmp	r3, #4
    1d06:	d001      	beq.n	1d0c <system_clock_source_get_hz+0x54>
			return 48000000UL;
    1d08:	480f      	ldr	r0, [pc, #60]	; (1d48 <system_clock_source_get_hz+0x90>)
    1d0a:	e013      	b.n	1d34 <system_clock_source_get_hz+0x7c>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    1d0c:	2000      	movs	r0, #0
    1d0e:	4b0f      	ldr	r3, [pc, #60]	; (1d4c <system_clock_source_get_hz+0x94>)
    1d10:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1d12:	4b0a      	ldr	r3, [pc, #40]	; (1d3c <system_clock_source_get_hz+0x84>)
    1d14:	689b      	ldr	r3, [r3, #8]
    1d16:	041b      	lsls	r3, r3, #16
    1d18:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    1d1a:	4358      	muls	r0, r3
    1d1c:	e00a      	b.n	1d34 <system_clock_source_get_hz+0x7c>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    1d1e:	2328      	movs	r3, #40	; 0x28
    1d20:	4a07      	ldr	r2, [pc, #28]	; (1d40 <system_clock_source_get_hz+0x88>)
    1d22:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1d24:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    1d26:	079b      	lsls	r3, r3, #30
    1d28:	d504      	bpl.n	1d34 <system_clock_source_get_hz+0x7c>
		return _system_clock_inst.dpll.frequency;
    1d2a:	4b04      	ldr	r3, [pc, #16]	; (1d3c <system_clock_source_get_hz+0x84>)
    1d2c:	68d8      	ldr	r0, [r3, #12]
    1d2e:	e001      	b.n	1d34 <system_clock_source_get_hz+0x7c>
		return 32768UL;
    1d30:	2080      	movs	r0, #128	; 0x80
    1d32:	0200      	lsls	r0, r0, #8
	}
}
    1d34:	bd10      	pop	{r4, pc}
    1d36:	46c0      	nop			; (mov r8, r8)
    1d38:	000050c8 	.word	0x000050c8
    1d3c:	200006ac 	.word	0x200006ac
    1d40:	40000c00 	.word	0x40000c00
    1d44:	003d0900 	.word	0x003d0900
    1d48:	02dc6c00 	.word	0x02dc6c00
    1d4c:	000023f5 	.word	0x000023f5

00001d50 <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    1d50:	b570      	push	{r4, r5, r6, lr}
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    1d52:	4c0b      	ldr	r4, [pc, #44]	; (1d80 <system_clock_source_osc16m_set_config+0x30>)
    1d54:	7d23      	ldrb	r3, [r4, #20]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
	temp.bit.ONDEMAND = config->on_demand;
    1d56:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1d58:	7846      	ldrb	r6, [r0, #1]

	OSCCTRL->OSC16MCTRL = temp;
    1d5a:	7802      	ldrb	r2, [r0, #0]
    1d5c:	2103      	movs	r1, #3
    1d5e:	4011      	ands	r1, r2
    1d60:	0089      	lsls	r1, r1, #2
    1d62:	220c      	movs	r2, #12
    1d64:	4393      	bics	r3, r2
    1d66:	430b      	orrs	r3, r1
    1d68:	3a0b      	subs	r2, #11
    1d6a:	4032      	ands	r2, r6
    1d6c:	0192      	lsls	r2, r2, #6
    1d6e:	2140      	movs	r1, #64	; 0x40
    1d70:	438b      	bics	r3, r1
    1d72:	4313      	orrs	r3, r2
    1d74:	01ed      	lsls	r5, r5, #7
    1d76:	227f      	movs	r2, #127	; 0x7f
    1d78:	4013      	ands	r3, r2
    1d7a:	432b      	orrs	r3, r5
    1d7c:	7523      	strb	r3, [r4, #20]
}
    1d7e:	bd70      	pop	{r4, r5, r6, pc}
    1d80:	40000c00 	.word	0x40000c00

00001d84 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    1d84:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d86:	46ce      	mov	lr, r9
    1d88:	4647      	mov	r7, r8
    1d8a:	b580      	push	{r7, lr}
	OSC32KCTRL_OSC32K_Type temp = OSC32KCTRL->OSC32K;
    1d8c:	4b19      	ldr	r3, [pc, #100]	; (1df4 <system_clock_source_osc32k_set_config+0x70>)
    1d8e:	4699      	mov	r9, r3
    1d90:	699b      	ldr	r3, [r3, #24]


	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    1d92:	7841      	ldrb	r1, [r0, #1]
    1d94:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    1d96:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1d98:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1d9a:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    1d9c:	7944      	ldrb	r4, [r0, #5]

	OSC32KCTRL->OSC32K  = temp;
    1d9e:	7880      	ldrb	r0, [r0, #2]
    1da0:	2101      	movs	r1, #1
    1da2:	4008      	ands	r0, r1
    1da4:	0080      	lsls	r0, r0, #2
    1da6:	2204      	movs	r2, #4
    1da8:	4393      	bics	r3, r2
    1daa:	4303      	orrs	r3, r0
    1dac:	4660      	mov	r0, ip
    1dae:	4008      	ands	r0, r1
    1db0:	00c0      	lsls	r0, r0, #3
    1db2:	3204      	adds	r2, #4
    1db4:	4393      	bics	r3, r2
    1db6:	4303      	orrs	r3, r0
    1db8:	0038      	movs	r0, r7
    1dba:	4008      	ands	r0, r1
    1dbc:	0180      	lsls	r0, r0, #6
    1dbe:	2740      	movs	r7, #64	; 0x40
    1dc0:	43bb      	bics	r3, r7
    1dc2:	4303      	orrs	r3, r0
    1dc4:	0030      	movs	r0, r6
    1dc6:	4008      	ands	r0, r1
    1dc8:	01c0      	lsls	r0, r0, #7
    1dca:	2680      	movs	r6, #128	; 0x80
    1dcc:	43b3      	bics	r3, r6
    1dce:	4303      	orrs	r3, r0
    1dd0:	2007      	movs	r0, #7
    1dd2:	4005      	ands	r5, r0
    1dd4:	022d      	lsls	r5, r5, #8
    1dd6:	4808      	ldr	r0, [pc, #32]	; (1df8 <system_clock_source_osc32k_set_config+0x74>)
    1dd8:	4003      	ands	r3, r0
    1dda:	432b      	orrs	r3, r5
    1ddc:	4021      	ands	r1, r4
    1dde:	0309      	lsls	r1, r1, #12
    1de0:	4806      	ldr	r0, [pc, #24]	; (1dfc <system_clock_source_osc32k_set_config+0x78>)
    1de2:	4003      	ands	r3, r0
    1de4:	430b      	orrs	r3, r1
    1de6:	464a      	mov	r2, r9
    1de8:	6193      	str	r3, [r2, #24]
}
    1dea:	bc0c      	pop	{r2, r3}
    1dec:	4690      	mov	r8, r2
    1dee:	4699      	mov	r9, r3
    1df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1df2:	46c0      	nop			; (mov r8, r8)
    1df4:	40001000 	.word	0x40001000
    1df8:	fffff8ff 	.word	0xfffff8ff
    1dfc:	ffffefff 	.word	0xffffefff

00001e00 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1e00:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1e02:	7a83      	ldrb	r3, [r0, #10]
    1e04:	069b      	lsls	r3, r3, #26
    1e06:	0c1b      	lsrs	r3, r3, #16
			OSCCTRL_DFLLVAL_FINE(config->fine_value);
    1e08:	8982      	ldrh	r2, [r0, #12]
    1e0a:	0592      	lsls	r2, r2, #22
    1e0c:	0d92      	lsrs	r2, r2, #22
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1e0e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    1e10:	491a      	ldr	r1, [pc, #104]	; (1e7c <system_clock_source_dfll_set_config+0x7c>)
    1e12:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1e14:	7a03      	ldrb	r3, [r0, #8]
    1e16:	7a42      	ldrb	r2, [r0, #9]
    1e18:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    1e1a:	8882      	ldrh	r2, [r0, #4]
    1e1c:	88c4      	ldrh	r4, [r0, #6]
    1e1e:	4322      	orrs	r2, r4
    1e20:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    1e22:	7842      	ldrb	r2, [r0, #1]
    1e24:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    1e26:	4313      	orrs	r3, r2
			((uint32_t)config->run_in_stanby << OSCCTRL_DFLLCTRL_RUNSTDBY_Pos);
    1e28:	7882      	ldrb	r2, [r0, #2]
    1e2a:	0192      	lsls	r2, r2, #6
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    1e2c:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    1e2e:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1e30:	7803      	ldrb	r3, [r0, #0]
    1e32:	2b04      	cmp	r3, #4
    1e34:	d011      	beq.n	1e5a <system_clock_source_dfll_set_config+0x5a>
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1e36:	2b20      	cmp	r3, #32
    1e38:	d10e      	bne.n	1e58 <system_clock_source_dfll_set_config+0x58>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1e3a:	7b83      	ldrb	r3, [r0, #14]
    1e3c:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    1e3e:	8a42      	ldrh	r2, [r0, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1e40:	4313      	orrs	r3, r2
    1e42:	8a02      	ldrh	r2, [r0, #16]
    1e44:	0412      	lsls	r2, r2, #16
    1e46:	490e      	ldr	r1, [pc, #56]	; (1e80 <system_clock_source_dfll_set_config+0x80>)
    1e48:	400a      	ands	r2, r1
    1e4a:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1e4c:	4a0b      	ldr	r2, [pc, #44]	; (1e7c <system_clock_source_dfll_set_config+0x7c>)
    1e4e:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1e50:	6811      	ldr	r1, [r2, #0]
    1e52:	4b0c      	ldr	r3, [pc, #48]	; (1e84 <system_clock_source_dfll_set_config+0x84>)
    1e54:	430b      	orrs	r3, r1
    1e56:	6013      	str	r3, [r2, #0]
				OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_BPLCKC;
	}
}
    1e58:	bd10      	pop	{r4, pc}
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1e5a:	7b83      	ldrb	r3, [r0, #14]
    1e5c:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    1e5e:	8a42      	ldrh	r2, [r0, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1e60:	4313      	orrs	r3, r2
    1e62:	8a02      	ldrh	r2, [r0, #16]
    1e64:	0412      	lsls	r2, r2, #16
    1e66:	4906      	ldr	r1, [pc, #24]	; (1e80 <system_clock_source_dfll_set_config+0x80>)
    1e68:	400a      	ands	r2, r1
    1e6a:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1e6c:	4a03      	ldr	r2, [pc, #12]	; (1e7c <system_clock_source_dfll_set_config+0x7c>)
    1e6e:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    1e70:	6813      	ldr	r3, [r2, #0]
    1e72:	2104      	movs	r1, #4
    1e74:	430b      	orrs	r3, r1
    1e76:	6013      	str	r3, [r2, #0]
    1e78:	e7ee      	b.n	1e58 <system_clock_source_dfll_set_config+0x58>
    1e7a:	46c0      	nop			; (mov r8, r8)
    1e7c:	200006ac 	.word	0x200006ac
    1e80:	03ff0000 	.word	0x03ff0000
    1e84:	00000424 	.word	0x00000424

00001e88 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1e88:	2808      	cmp	r0, #8
    1e8a:	d803      	bhi.n	1e94 <system_clock_source_enable+0xc>
    1e8c:	0080      	lsls	r0, r0, #2
    1e8e:	4b2d      	ldr	r3, [pc, #180]	; (1f44 <system_clock_source_enable+0xbc>)
    1e90:	581b      	ldr	r3, [r3, r0]
    1e92:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1e94:	2017      	movs	r0, #23
    1e96:	e054      	b.n	1f42 <system_clock_source_enable+0xba>
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    1e98:	4a2b      	ldr	r2, [pc, #172]	; (1f48 <system_clock_source_enable+0xc0>)
    1e9a:	7d13      	ldrb	r3, [r2, #20]
    1e9c:	2102      	movs	r1, #2
    1e9e:	430b      	orrs	r3, r1
    1ea0:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    1ea2:	2000      	movs	r0, #0
    1ea4:	e04d      	b.n	1f42 <system_clock_source_enable+0xba>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    1ea6:	4a29      	ldr	r2, [pc, #164]	; (1f4c <system_clock_source_enable+0xc4>)
    1ea8:	6993      	ldr	r3, [r2, #24]
    1eaa:	2102      	movs	r1, #2
    1eac:	430b      	orrs	r3, r1
    1eae:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1eb0:	2000      	movs	r0, #0
		break;
    1eb2:	e046      	b.n	1f42 <system_clock_source_enable+0xba>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    1eb4:	4a24      	ldr	r2, [pc, #144]	; (1f48 <system_clock_source_enable+0xc0>)
    1eb6:	8a13      	ldrh	r3, [r2, #16]
    1eb8:	2102      	movs	r1, #2
    1eba:	430b      	orrs	r3, r1
    1ebc:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1ebe:	2000      	movs	r0, #0
		break;
    1ec0:	e03f      	b.n	1f42 <system_clock_source_enable+0xba>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    1ec2:	4a22      	ldr	r2, [pc, #136]	; (1f4c <system_clock_source_enable+0xc4>)
    1ec4:	6953      	ldr	r3, [r2, #20]
    1ec6:	2102      	movs	r1, #2
    1ec8:	430b      	orrs	r3, r1
    1eca:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    1ecc:	2000      	movs	r0, #0
		break;
    1ece:	e038      	b.n	1f42 <system_clock_source_enable+0xba>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    1ed0:	491f      	ldr	r1, [pc, #124]	; (1f50 <system_clock_source_enable+0xc8>)
    1ed2:	680b      	ldr	r3, [r1, #0]
    1ed4:	2202      	movs	r2, #2
    1ed6:	4313      	orrs	r3, r2
    1ed8:	600b      	str	r3, [r1, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    1eda:	4b1b      	ldr	r3, [pc, #108]	; (1f48 <system_clock_source_enable+0xc0>)
    1edc:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    1ede:	0019      	movs	r1, r3
    1ee0:	32fe      	adds	r2, #254	; 0xfe
    1ee2:	68cb      	ldr	r3, [r1, #12]
    1ee4:	4213      	tst	r3, r2
    1ee6:	d0fc      	beq.n	1ee2 <system_clock_source_enable+0x5a>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1ee8:	4b19      	ldr	r3, [pc, #100]	; (1f50 <system_clock_source_enable+0xc8>)
    1eea:	689a      	ldr	r2, [r3, #8]
    1eec:	4b16      	ldr	r3, [pc, #88]	; (1f48 <system_clock_source_enable+0xc0>)
    1eee:	621a      	str	r2, [r3, #32]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    1ef0:	2202      	movs	r2, #2
    1ef2:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    1ef4:	0019      	movs	r1, r3
    1ef6:	32fe      	adds	r2, #254	; 0xfe
    1ef8:	68cb      	ldr	r3, [r1, #12]
    1efa:	4213      	tst	r3, r2
    1efc:	d0fc      	beq.n	1ef8 <system_clock_source_enable+0x70>
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1efe:	4b14      	ldr	r3, [pc, #80]	; (1f50 <system_clock_source_enable+0xc8>)
    1f00:	685a      	ldr	r2, [r3, #4]
    1f02:	4b11      	ldr	r3, [pc, #68]	; (1f48 <system_clock_source_enable+0xc0>)
    1f04:	61da      	str	r2, [r3, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
    1f06:	2200      	movs	r2, #0
    1f08:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    1f0a:	0019      	movs	r1, r3
    1f0c:	3201      	adds	r2, #1
    1f0e:	32ff      	adds	r2, #255	; 0xff
    1f10:	68cb      	ldr	r3, [r1, #12]
    1f12:	4213      	tst	r3, r2
    1f14:	d0fc      	beq.n	1f10 <system_clock_source_enable+0x88>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1f16:	4b0e      	ldr	r3, [pc, #56]	; (1f50 <system_clock_source_enable+0xc8>)
    1f18:	681b      	ldr	r3, [r3, #0]
    1f1a:	b29b      	uxth	r3, r3
    1f1c:	4a0a      	ldr	r2, [pc, #40]	; (1f48 <system_clock_source_enable+0xc0>)
    1f1e:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    1f20:	2000      	movs	r0, #0
    1f22:	e00e      	b.n	1f42 <system_clock_source_enable+0xba>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    1f24:	4908      	ldr	r1, [pc, #32]	; (1f48 <system_clock_source_enable+0xc0>)
    1f26:	2228      	movs	r2, #40	; 0x28
    1f28:	5c8b      	ldrb	r3, [r1, r2]
    1f2a:	2002      	movs	r0, #2
    1f2c:	4303      	orrs	r3, r0
    1f2e:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    1f30:	0008      	movs	r0, r1
    1f32:	2138      	movs	r1, #56	; 0x38
    1f34:	3a26      	subs	r2, #38	; 0x26
    1f36:	5c43      	ldrb	r3, [r0, r1]
    1f38:	4213      	tst	r3, r2
    1f3a:	d1fc      	bne.n	1f36 <system_clock_source_enable+0xae>
	return STATUS_OK;
    1f3c:	2000      	movs	r0, #0
    1f3e:	e000      	b.n	1f42 <system_clock_source_enable+0xba>
		return STATUS_OK;
    1f40:	2000      	movs	r0, #0
}
    1f42:	4770      	bx	lr
    1f44:	000050ec 	.word	0x000050ec
    1f48:	40000c00 	.word	0x40000c00
    1f4c:	40001000 	.word	0x40001000
    1f50:	200006ac 	.word	0x200006ac

00001f54 <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1f54:	2808      	cmp	r0, #8
    1f56:	d832      	bhi.n	1fbe <system_clock_source_disable+0x6a>
    1f58:	0080      	lsls	r0, r0, #2
    1f5a:	4b1a      	ldr	r3, [pc, #104]	; (1fc4 <system_clock_source_disable+0x70>)
    1f5c:	581b      	ldr	r3, [r3, r0]
    1f5e:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    1f60:	4a19      	ldr	r2, [pc, #100]	; (1fc8 <system_clock_source_disable+0x74>)
    1f62:	7d13      	ldrb	r3, [r2, #20]
    1f64:	2102      	movs	r1, #2
    1f66:	438b      	bics	r3, r1
    1f68:	7513      	strb	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    1f6a:	2000      	movs	r0, #0
}
    1f6c:	4770      	bx	lr
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    1f6e:	4a17      	ldr	r2, [pc, #92]	; (1fcc <system_clock_source_disable+0x78>)
    1f70:	6993      	ldr	r3, [r2, #24]
    1f72:	2102      	movs	r1, #2
    1f74:	438b      	bics	r3, r1
    1f76:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    1f78:	2000      	movs	r0, #0
		break;
    1f7a:	e7f7      	b.n	1f6c <system_clock_source_disable+0x18>
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    1f7c:	4a12      	ldr	r2, [pc, #72]	; (1fc8 <system_clock_source_disable+0x74>)
    1f7e:	8a13      	ldrh	r3, [r2, #16]
    1f80:	2102      	movs	r1, #2
    1f82:	438b      	bics	r3, r1
    1f84:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1f86:	2000      	movs	r0, #0
		break;
    1f88:	e7f0      	b.n	1f6c <system_clock_source_disable+0x18>
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    1f8a:	4a10      	ldr	r2, [pc, #64]	; (1fcc <system_clock_source_disable+0x78>)
    1f8c:	6953      	ldr	r3, [r2, #20]
    1f8e:	2102      	movs	r1, #2
    1f90:	438b      	bics	r3, r1
    1f92:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    1f94:	2000      	movs	r0, #0
		break;
    1f96:	e7e9      	b.n	1f6c <system_clock_source_disable+0x18>
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    1f98:	4b0d      	ldr	r3, [pc, #52]	; (1fd0 <system_clock_source_disable+0x7c>)
    1f9a:	681a      	ldr	r2, [r3, #0]
    1f9c:	2102      	movs	r1, #2
    1f9e:	438a      	bics	r2, r1
    1fa0:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1fa2:	681b      	ldr	r3, [r3, #0]
    1fa4:	b29b      	uxth	r3, r3
    1fa6:	4a08      	ldr	r2, [pc, #32]	; (1fc8 <system_clock_source_disable+0x74>)
    1fa8:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    1faa:	2000      	movs	r0, #0
		break;
    1fac:	e7de      	b.n	1f6c <system_clock_source_disable+0x18>
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    1fae:	4906      	ldr	r1, [pc, #24]	; (1fc8 <system_clock_source_disable+0x74>)
    1fb0:	2228      	movs	r2, #40	; 0x28
    1fb2:	5c8b      	ldrb	r3, [r1, r2]
    1fb4:	2002      	movs	r0, #2
    1fb6:	4383      	bics	r3, r0
    1fb8:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1fba:	2000      	movs	r0, #0
		break;
    1fbc:	e7d6      	b.n	1f6c <system_clock_source_disable+0x18>
		return STATUS_ERR_INVALID_ARG;
    1fbe:	2017      	movs	r0, #23
    1fc0:	e7d4      	b.n	1f6c <system_clock_source_disable+0x18>
    1fc2:	46c0      	nop			; (mov r8, r8)
    1fc4:	00005110 	.word	0x00005110
    1fc8:	40000c00 	.word	0x40000c00
    1fcc:	40001000 	.word	0x40001000
    1fd0:	200006ac 	.word	0x200006ac

00001fd4 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fd6:	46c6      	mov	lr, r8
    1fd8:	b500      	push	{lr}
    1fda:	b08c      	sub	sp, #48	; 0x30
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    1fdc:	2280      	movs	r2, #128	; 0x80
    1fde:	0052      	lsls	r2, r2, #1
    1fe0:	4b6d      	ldr	r3, [pc, #436]	; (2198 <system_clock_init+0x1c4>)
    1fe2:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    1fe4:	3afd      	subs	r2, #253	; 0xfd
    1fe6:	4b6d      	ldr	r3, [pc, #436]	; (219c <system_clock_init+0x1c8>)
    1fe8:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1fea:	4a6d      	ldr	r2, [pc, #436]	; (21a0 <system_clock_init+0x1cc>)
    1fec:	6853      	ldr	r3, [r2, #4]
    1fee:	211e      	movs	r1, #30
    1ff0:	438b      	bics	r3, r1
    1ff2:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    1ff4:	2380      	movs	r3, #128	; 0x80
    1ff6:	05db      	lsls	r3, r3, #23
    1ff8:	789b      	ldrb	r3, [r3, #2]
    1ffa:	2b02      	cmp	r3, #2
    1ffc:	d00f      	beq.n	201e <system_clock_init+0x4a>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB || SAMR34J || SAMR35J
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    1ffe:	2380      	movs	r3, #128	; 0x80
    2000:	05db      	lsls	r3, r3, #23
    2002:	789b      	ldrb	r3, [r3, #2]
    2004:	b25b      	sxtb	r3, r3
    2006:	2b00      	cmp	r3, #0
    2008:	db09      	blt.n	201e <system_clock_init+0x4a>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    200a:	2380      	movs	r3, #128	; 0x80
    200c:	05db      	lsls	r3, r3, #23
    200e:	2201      	movs	r2, #1
    2010:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    2012:	3201      	adds	r2, #1
    2014:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    2016:	001a      	movs	r2, r3
    2018:	7993      	ldrb	r3, [r2, #6]
    201a:	2b00      	cmp	r3, #0
    201c:	d0fc      	beq.n	2018 <system_clock_init+0x44>
	config->enable_1khz_output  = true;
    201e:	a80a      	add	r0, sp, #40	; 0x28
    2020:	2501      	movs	r5, #1
    2022:	7045      	strb	r5, [r0, #1]
	config->enable_32khz_output = true;
    2024:	7085      	strb	r5, [r0, #2]
	config->run_in_standby      = false;
    2026:	2400      	movs	r4, #0
    2028:	70c4      	strb	r4, [r0, #3]
	config->on_demand           = true;
    202a:	7105      	strb	r5, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    202c:	2307      	movs	r3, #7
    202e:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    2030:	7144      	strb	r4, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    2032:	4b5c      	ldr	r3, [pc, #368]	; (21a4 <system_clock_init+0x1d0>)
    2034:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    2036:	2004      	movs	r0, #4
    2038:	4e5b      	ldr	r6, [pc, #364]	; (21a8 <system_clock_init+0x1d4>)
    203a:	47b0      	blx	r6
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    203c:	a902      	add	r1, sp, #8
    203e:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    2040:	704c      	strb	r4, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    2042:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    2044:	724c      	strb	r4, [r1, #9]
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    2046:	3502      	adds	r5, #2
    2048:	700d      	strb	r5, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    204a:	2000      	movs	r0, #0
    204c:	4b57      	ldr	r3, [pc, #348]	; (21ac <system_clock_init+0x1d8>)
    204e:	4798      	blx	r3
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    2050:	2006      	movs	r0, #6
    2052:	4b57      	ldr	r3, [pc, #348]	; (21b0 <system_clock_init+0x1dc>)
    2054:	4798      	blx	r3
	config->run_in_standby  = false;
    2056:	a801      	add	r0, sp, #4
    2058:	7044      	strb	r4, [r0, #1]
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    205a:	7005      	strb	r5, [r0, #0]
	osc16m_conf.on_demand       = 0;
    205c:	7084      	strb	r4, [r0, #2]
	system_clock_source_osc16m_set_config(&osc16m_conf);
    205e:	4b55      	ldr	r3, [pc, #340]	; (21b4 <system_clock_init+0x1e0>)
    2060:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    2062:	2006      	movs	r0, #6
    2064:	47b0      	blx	r6
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    2066:	494c      	ldr	r1, [pc, #304]	; (2198 <system_clock_init+0x1c4>)
    2068:	2210      	movs	r2, #16
    206a:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    206c:	421a      	tst	r2, r3
    206e:	d0fc      	beq.n	206a <system_clock_init+0x96>
	config->division_factor    = 1;
    2070:	a902      	add	r1, sp, #8
    2072:	2301      	movs	r3, #1
    2074:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    2076:	2400      	movs	r4, #0
    2078:	704c      	strb	r4, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    207a:	3305      	adds	r3, #5
    207c:	700b      	strb	r3, [r1, #0]
	config->run_in_standby     = false;
    207e:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    2080:	724c      	strb	r4, [r1, #9]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    2082:	2000      	movs	r0, #0
    2084:	4b49      	ldr	r3, [pc, #292]	; (21ac <system_clock_init+0x1d8>)
    2086:	4798      	blx	r3
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
    2088:	4a43      	ldr	r2, [pc, #268]	; (2198 <system_clock_init+0x1c4>)
    208a:	7d13      	ldrb	r3, [r2, #20]
    208c:	2180      	movs	r1, #128	; 0x80
    208e:	430b      	orrs	r3, r1
    2090:	7513      	strb	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2092:	ab05      	add	r3, sp, #20
    2094:	2200      	movs	r2, #0
    2096:	809c      	strh	r4, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2098:	721a      	strb	r2, [r3, #8]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    209a:	725a      	strb	r2, [r3, #9]
	config->run_in_stanby   = false;
    209c:	709a      	strb	r2, [r3, #2]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    209e:	3960      	subs	r1, #96	; 0x60
    20a0:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    20a2:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    26 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP5)
    20a4:	4b44      	ldr	r3, [pc, #272]	; (21b8 <system_clock_init+0x1e4>)
    20a6:	681b      	ldr	r3, [r3, #0]
    20a8:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the Calibration value is not correct */
	if (coarse == 0x3f) {
    20aa:	2b3f      	cmp	r3, #63	; 0x3f
    20ac:	d100      	bne.n	20b0 <system_clock_init+0xdc>
    20ae:	e071      	b.n	2194 <system_clock_init+0x1c0>
		coarse = 0x1f;
	}

	dfll_conf.coarse_value = coarse;
    20b0:	a805      	add	r0, sp, #20
    20b2:	7283      	strb	r3, [r0, #10]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    20b4:	2303      	movs	r3, #3
    20b6:	7383      	strb	r3, [r0, #14]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10;
    20b8:	3307      	adds	r3, #7
    20ba:	8203      	strh	r3, [r0, #16]
		dfll_conf.fine_value   = 0x1ff;
    20bc:	4b3f      	ldr	r3, [pc, #252]	; (21bc <system_clock_init+0x1e8>)
    20be:	8183      	strh	r3, [r0, #12]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    20c0:	3bff      	subs	r3, #255	; 0xff
    20c2:	80c3      	strh	r3, [r0, #6]

		dfll_conf.multiply_factor = 48000;
    20c4:	4b3e      	ldr	r3, [pc, #248]	; (21c0 <system_clock_init+0x1ec>)
    20c6:	8243      	strh	r3, [r0, #18]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    20c8:	4b3e      	ldr	r3, [pc, #248]	; (21c4 <system_clock_init+0x1f0>)
    20ca:	4798      	blx	r3
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    20cc:	4b3e      	ldr	r3, [pc, #248]	; (21c8 <system_clock_init+0x1f4>)
    20ce:	4798      	blx	r3
	config->division_factor    = 1;
    20d0:	ac02      	add	r4, sp, #8
    20d2:	2301      	movs	r3, #1
    20d4:	4698      	mov	r8, r3
    20d6:	9303      	str	r3, [sp, #12]
	config->high_when_disabled = false;
    20d8:	2500      	movs	r5, #0
    20da:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    20dc:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    20de:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    20e0:	3304      	adds	r3, #4
    20e2:	7023      	strb	r3, [r4, #0]
    20e4:	0021      	movs	r1, r4
    20e6:	2001      	movs	r0, #1
    20e8:	4f30      	ldr	r7, [pc, #192]	; (21ac <system_clock_init+0x1d8>)
    20ea:	47b8      	blx	r7
    20ec:	2001      	movs	r0, #1
    20ee:	4e37      	ldr	r6, [pc, #220]	; (21cc <system_clock_init+0x1f8>)
    20f0:	47b0      	blx	r6
	config->division_factor    = 1;
    20f2:	4643      	mov	r3, r8
    20f4:	6063      	str	r3, [r4, #4]
	config->high_when_disabled = false;
    20f6:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    20f8:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    20fa:	7265      	strb	r5, [r4, #9]
    20fc:	3306      	adds	r3, #6
    20fe:	7023      	strb	r3, [r4, #0]
    2100:	0021      	movs	r1, r4
    2102:	2003      	movs	r0, #3
    2104:	47b8      	blx	r7
    2106:	2003      	movs	r0, #3
    2108:	47b0      	blx	r6
#  endif
#endif

	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    210a:	2007      	movs	r0, #7
    210c:	4b26      	ldr	r3, [pc, #152]	; (21a8 <system_clock_init+0x1d4>)
    210e:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    2110:	4921      	ldr	r1, [pc, #132]	; (2198 <system_clock_init+0x1c4>)
    2112:	2280      	movs	r2, #128	; 0x80
    2114:	0052      	lsls	r2, r2, #1
    2116:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    2118:	4213      	tst	r3, r2
    211a:	d0fc      	beq.n	2116 <system_clock_init+0x142>
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    211c:	4c2c      	ldr	r4, [pc, #176]	; (21d0 <system_clock_init+0x1fc>)
    211e:	2301      	movs	r3, #1
    2120:	71a3      	strb	r3, [r4, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    2122:	7163      	strb	r3, [r4, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    2124:	7123      	strb	r3, [r4, #4]
	config->division_factor    = 1;
    2126:	a902      	add	r1, sp, #8
    2128:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    212a:	2300      	movs	r3, #0
    212c:	704b      	strb	r3, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    212e:	2206      	movs	r2, #6
    2130:	700a      	strb	r2, [r1, #0]
	config->run_in_standby     = false;
    2132:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    2134:	724b      	strb	r3, [r1, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2136:	2000      	movs	r0, #0
    2138:	4b1c      	ldr	r3, [pc, #112]	; (21ac <system_clock_init+0x1d8>)
    213a:	4798      	blx	r3
    213c:	2000      	movs	r0, #0
    213e:	4b23      	ldr	r3, [pc, #140]	; (21cc <system_clock_init+0x1f8>)
    2140:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    2142:	2000      	movs	r0, #0
    2144:	4b23      	ldr	r3, [pc, #140]	; (21d4 <system_clock_init+0x200>)
    2146:	4798      	blx	r3
    2148:	7921      	ldrb	r1, [r4, #4]
    214a:	b2c9      	uxtb	r1, r1
    214c:	4b22      	ldr	r3, [pc, #136]	; (21d8 <system_clock_init+0x204>)
    214e:	4798      	blx	r3
	uint32_t cpu_freq = system_cpu_clock_get_hz();

	/* Set the BUPDIV & LPDIV value such that backup & low power domain clock 
	 * does not exceed their max clock freq even if CPU is configured to it's 
	 * maximum frequency */
	if ((cpu_freq > 6000000) && ((CONF_CLOCK_BACKUP_DIVIDER == SYSTEM_MAIN_CLOCK_DIV_1) \
    2150:	4b22      	ldr	r3, [pc, #136]	; (21dc <system_clock_init+0x208>)
    2152:	4298      	cmp	r0, r3
    2154:	d902      	bls.n	215c <system_clock_init+0x188>
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    2156:	2208      	movs	r2, #8
    2158:	71a2      	strb	r2, [r4, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    215a:	7162      	strb	r2, [r4, #5]
		system_backup_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_8);
		system_low_power_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_8);
	}

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */	
	if (cpu_freq <= 12000000) {
    215c:	4b20      	ldr	r3, [pc, #128]	; (21e0 <system_clock_init+0x20c>)
    215e:	4298      	cmp	r0, r3
    2160:	d814      	bhi.n	218c <system_clock_init+0x1b8>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    2162:	2380      	movs	r3, #128	; 0x80
    2164:	05db      	lsls	r3, r3, #23
    2166:	789b      	ldrb	r3, [r3, #2]
    2168:	2b00      	cmp	r3, #0
    216a:	d00f      	beq.n	218c <system_clock_init+0x1b8>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    216c:	2380      	movs	r3, #128	; 0x80
    216e:	05db      	lsls	r3, r3, #23
    2170:	789b      	ldrb	r3, [r3, #2]
    2172:	b25b      	sxtb	r3, r3
    2174:	2b00      	cmp	r3, #0
    2176:	db09      	blt.n	218c <system_clock_init+0x1b8>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    2178:	2380      	movs	r3, #128	; 0x80
    217a:	05db      	lsls	r3, r3, #23
    217c:	2201      	movs	r2, #1
    217e:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    2180:	2200      	movs	r2, #0
    2182:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    2184:	001a      	movs	r2, r3
    2186:	7993      	ldrb	r3, [r2, #6]
    2188:	2b00      	cmp	r3, #0
    218a:	d0fc      	beq.n	2186 <system_clock_init+0x1b2>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    218c:	b00c      	add	sp, #48	; 0x30
    218e:	bc04      	pop	{r2}
    2190:	4690      	mov	r8, r2
    2192:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    2194:	3b20      	subs	r3, #32
    2196:	e78b      	b.n	20b0 <system_clock_init+0xdc>
    2198:	40000c00 	.word	0x40000c00
    219c:	40001400 	.word	0x40001400
    21a0:	41004000 	.word	0x41004000
    21a4:	00001d85 	.word	0x00001d85
    21a8:	00001e89 	.word	0x00001e89
    21ac:	00002209 	.word	0x00002209
    21b0:	00001f55 	.word	0x00001f55
    21b4:	00001d51 	.word	0x00001d51
    21b8:	00806020 	.word	0x00806020
    21bc:	000001ff 	.word	0x000001ff
    21c0:	ffffbb80 	.word	0xffffbb80
    21c4:	00001e01 	.word	0x00001e01
    21c8:	000021e5 	.word	0x000021e5
    21cc:	000022b5 	.word	0x000022b5
    21d0:	40000400 	.word	0x40000400
    21d4:	000022f5 	.word	0x000022f5
    21d8:	00004cc5 	.word	0x00004cc5
    21dc:	005b8d80 	.word	0x005b8d80
    21e0:	00b71b00 	.word	0x00b71b00

000021e4 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    21e4:	4a06      	ldr	r2, [pc, #24]	; (2200 <system_gclk_init+0x1c>)
    21e6:	6953      	ldr	r3, [r2, #20]
    21e8:	2140      	movs	r1, #64	; 0x40
    21ea:	430b      	orrs	r3, r1
    21ec:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    21ee:	2201      	movs	r2, #1
    21f0:	4b04      	ldr	r3, [pc, #16]	; (2204 <system_gclk_init+0x20>)
    21f2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    21f4:	0019      	movs	r1, r3
    21f6:	780b      	ldrb	r3, [r1, #0]
    21f8:	4213      	tst	r3, r2
    21fa:	d1fc      	bne.n	21f6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    21fc:	4770      	bx	lr
    21fe:	46c0      	nop			; (mov r8, r8)
    2200:	40000400 	.word	0x40000400
    2204:	40001800 	.word	0x40001800

00002208 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2208:	b570      	push	{r4, r5, r6, lr}
    220a:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    220c:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    220e:	784b      	ldrb	r3, [r1, #1]
    2210:	2b00      	cmp	r3, #0
    2212:	d002      	beq.n	221a <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2214:	2380      	movs	r3, #128	; 0x80
    2216:	00db      	lsls	r3, r3, #3
    2218:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    221a:	7a4b      	ldrb	r3, [r1, #9]
    221c:	2b00      	cmp	r3, #0
    221e:	d002      	beq.n	2226 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2220:	2380      	movs	r3, #128	; 0x80
    2222:	011b      	lsls	r3, r3, #4
    2224:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2226:	6848      	ldr	r0, [r1, #4]
    2228:	2801      	cmp	r0, #1
    222a:	d90f      	bls.n	224c <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    222c:	1e43      	subs	r3, r0, #1
    222e:	4218      	tst	r0, r3
    2230:	d131      	bne.n	2296 <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2232:	2802      	cmp	r0, #2
    2234:	d92d      	bls.n	2292 <system_gclk_gen_set_config+0x8a>
    2236:	2302      	movs	r3, #2
    2238:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    223a:	3201      	adds	r2, #1
						mask <<= 1) {
    223c:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    223e:	4298      	cmp	r0, r3
    2240:	d8fb      	bhi.n	223a <system_gclk_gen_set_config+0x32>
    2242:	2380      	movs	r3, #128	; 0x80
    2244:	015b      	lsls	r3, r3, #5
    2246:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    2248:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    224a:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    224c:	7a0b      	ldrb	r3, [r1, #8]
    224e:	2b00      	cmp	r3, #0
    2250:	d002      	beq.n	2258 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2252:	2380      	movs	r3, #128	; 0x80
    2254:	019b      	lsls	r3, r3, #6
    2256:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    2258:	2604      	movs	r6, #4
    225a:	40a6      	lsls	r6, r4
    225c:	4911      	ldr	r1, [pc, #68]	; (22a4 <system_gclk_gen_set_config+0x9c>)
    225e:	4a12      	ldr	r2, [pc, #72]	; (22a8 <system_gclk_gen_set_config+0xa0>)
    2260:	684b      	ldr	r3, [r1, #4]
    2262:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    2264:	421e      	tst	r6, r3
    2266:	d1fb      	bne.n	2260 <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    2268:	4b10      	ldr	r3, [pc, #64]	; (22ac <system_gclk_gen_set_config+0xa4>)
    226a:	4798      	blx	r3
    226c:	00a4      	lsls	r4, r4, #2
    226e:	4b0d      	ldr	r3, [pc, #52]	; (22a4 <system_gclk_gen_set_config+0x9c>)
    2270:	469c      	mov	ip, r3
    2272:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    2274:	6a22      	ldr	r2, [r4, #32]
    2276:	2380      	movs	r3, #128	; 0x80
    2278:	005b      	lsls	r3, r3, #1
    227a:	401a      	ands	r2, r3
    227c:	432a      	orrs	r2, r5
    227e:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    2280:	4661      	mov	r1, ip
    2282:	4a09      	ldr	r2, [pc, #36]	; (22a8 <system_gclk_gen_set_config+0xa0>)
    2284:	684b      	ldr	r3, [r1, #4]
    2286:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    2288:	421e      	tst	r6, r3
    228a:	d1fb      	bne.n	2284 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    228c:	4b08      	ldr	r3, [pc, #32]	; (22b0 <system_gclk_gen_set_config+0xa8>)
    228e:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    2290:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    2292:	2200      	movs	r2, #0
    2294:	e7d5      	b.n	2242 <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    2296:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2298:	2380      	movs	r3, #128	; 0x80
    229a:	009b      	lsls	r3, r3, #2
    229c:	4318      	orrs	r0, r3
    229e:	4305      	orrs	r5, r0
    22a0:	e7d4      	b.n	224c <system_gclk_gen_set_config+0x44>
    22a2:	46c0      	nop			; (mov r8, r8)
    22a4:	40001800 	.word	0x40001800
    22a8:	000007fc 	.word	0x000007fc
    22ac:	000011ad 	.word	0x000011ad
    22b0:	000011ed 	.word	0x000011ed

000022b4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    22b4:	b510      	push	{r4, lr}
    22b6:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    22b8:	2204      	movs	r2, #4
    22ba:	4082      	lsls	r2, r0
    22bc:	4809      	ldr	r0, [pc, #36]	; (22e4 <system_gclk_gen_enable+0x30>)
    22be:	490a      	ldr	r1, [pc, #40]	; (22e8 <system_gclk_gen_enable+0x34>)
    22c0:	6843      	ldr	r3, [r0, #4]
    22c2:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    22c4:	421a      	tst	r2, r3
    22c6:	d1fb      	bne.n	22c0 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    22c8:	4b08      	ldr	r3, [pc, #32]	; (22ec <system_gclk_gen_enable+0x38>)
    22ca:	4798      	blx	r3
    22cc:	00a4      	lsls	r4, r4, #2
    22ce:	4b05      	ldr	r3, [pc, #20]	; (22e4 <system_gclk_gen_enable+0x30>)
    22d0:	469c      	mov	ip, r3
    22d2:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    22d4:	6a22      	ldr	r2, [r4, #32]
    22d6:	2380      	movs	r3, #128	; 0x80
    22d8:	005b      	lsls	r3, r3, #1
    22da:	4313      	orrs	r3, r2
    22dc:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    22de:	4b04      	ldr	r3, [pc, #16]	; (22f0 <system_gclk_gen_enable+0x3c>)
    22e0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    22e2:	bd10      	pop	{r4, pc}
    22e4:	40001800 	.word	0x40001800
    22e8:	000007fc 	.word	0x000007fc
    22ec:	000011ad 	.word	0x000011ad
    22f0:	000011ed 	.word	0x000011ed

000022f4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    22f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22f6:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    22f8:	2204      	movs	r2, #4
    22fa:	4082      	lsls	r2, r0
    22fc:	4812      	ldr	r0, [pc, #72]	; (2348 <system_gclk_gen_get_hz+0x54>)
    22fe:	4913      	ldr	r1, [pc, #76]	; (234c <system_gclk_gen_get_hz+0x58>)
    2300:	6843      	ldr	r3, [r0, #4]
    2302:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    2304:	421a      	tst	r2, r3
    2306:	d1fb      	bne.n	2300 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    2308:	4b11      	ldr	r3, [pc, #68]	; (2350 <system_gclk_gen_get_hz+0x5c>)
    230a:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    230c:	4f0e      	ldr	r7, [pc, #56]	; (2348 <system_gclk_gen_get_hz+0x54>)
    230e:	3408      	adds	r4, #8
    2310:	00a4      	lsls	r4, r4, #2
    2312:	59e0      	ldr	r0, [r4, r7]
    2314:	0700      	lsls	r0, r0, #28
    2316:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2318:	4b0e      	ldr	r3, [pc, #56]	; (2354 <system_gclk_gen_get_hz+0x60>)
    231a:	4798      	blx	r3
    231c:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    231e:	59e5      	ldr	r5, [r4, r7]
    2320:	04ed      	lsls	r5, r5, #19
    2322:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    2324:	59e4      	ldr	r4, [r4, r7]
    2326:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    2328:	4b0b      	ldr	r3, [pc, #44]	; (2358 <system_gclk_gen_get_hz+0x64>)
    232a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    232c:	2d00      	cmp	r5, #0
    232e:	d107      	bne.n	2340 <system_gclk_gen_get_hz+0x4c>
    2330:	2c01      	cmp	r4, #1
    2332:	d907      	bls.n	2344 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    2334:	0021      	movs	r1, r4
    2336:	0030      	movs	r0, r6
    2338:	4b08      	ldr	r3, [pc, #32]	; (235c <system_gclk_gen_get_hz+0x68>)
    233a:	4798      	blx	r3
    233c:	0006      	movs	r6, r0
    233e:	e001      	b.n	2344 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    2340:	3401      	adds	r4, #1
    2342:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    2344:	0030      	movs	r0, r6
    2346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2348:	40001800 	.word	0x40001800
    234c:	000007fc 	.word	0x000007fc
    2350:	000011ad 	.word	0x000011ad
    2354:	00001cb9 	.word	0x00001cb9
    2358:	000011ed 	.word	0x000011ed
    235c:	00004cc5 	.word	0x00004cc5

00002360 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2360:	b510      	push	{r4, lr}
    2362:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2364:	4b09      	ldr	r3, [pc, #36]	; (238c <system_gclk_chan_enable+0x2c>)
    2366:	4798      	blx	r3
    2368:	00a0      	lsls	r0, r4, #2
    236a:	4b09      	ldr	r3, [pc, #36]	; (2390 <system_gclk_chan_enable+0x30>)
    236c:	469c      	mov	ip, r3
    236e:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    2370:	2280      	movs	r2, #128	; 0x80
    2372:	5883      	ldr	r3, [r0, r2]
    2374:	2140      	movs	r1, #64	; 0x40
    2376:	430b      	orrs	r3, r1
    2378:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    237a:	3140      	adds	r1, #64	; 0x40
    237c:	3a40      	subs	r2, #64	; 0x40
    237e:	5843      	ldr	r3, [r0, r1]
    2380:	421a      	tst	r2, r3
    2382:	d0fc      	beq.n	237e <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    2384:	4b03      	ldr	r3, [pc, #12]	; (2394 <system_gclk_chan_enable+0x34>)
    2386:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    2388:	bd10      	pop	{r4, pc}
    238a:	46c0      	nop			; (mov r8, r8)
    238c:	000011ad 	.word	0x000011ad
    2390:	40001800 	.word	0x40001800
    2394:	000011ed 	.word	0x000011ed

00002398 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2398:	b510      	push	{r4, lr}
    239a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    239c:	4b09      	ldr	r3, [pc, #36]	; (23c4 <system_gclk_chan_disable+0x2c>)
    239e:	4798      	blx	r3
    23a0:	00a0      	lsls	r0, r4, #2
    23a2:	4b09      	ldr	r3, [pc, #36]	; (23c8 <system_gclk_chan_disable+0x30>)
    23a4:	469c      	mov	ip, r3
    23a6:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    23a8:	2280      	movs	r2, #128	; 0x80
    23aa:	5883      	ldr	r3, [r0, r2]
    23ac:	2140      	movs	r1, #64	; 0x40
    23ae:	438b      	bics	r3, r1
    23b0:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    23b2:	3140      	adds	r1, #64	; 0x40
    23b4:	3a40      	subs	r2, #64	; 0x40
    23b6:	5843      	ldr	r3, [r0, r1]
    23b8:	421a      	tst	r2, r3
    23ba:	d1fc      	bne.n	23b6 <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    23bc:	4b03      	ldr	r3, [pc, #12]	; (23cc <system_gclk_chan_disable+0x34>)
    23be:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    23c0:	bd10      	pop	{r4, pc}
    23c2:	46c0      	nop			; (mov r8, r8)
    23c4:	000011ad 	.word	0x000011ad
    23c8:	40001800 	.word	0x40001800
    23cc:	000011ed 	.word	0x000011ed

000023d0 <system_gclk_chan_set_config>:
{
    23d0:	b570      	push	{r4, r5, r6, lr}
    23d2:	0004      	movs	r4, r0
    23d4:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    23d6:	4b05      	ldr	r3, [pc, #20]	; (23ec <system_gclk_chan_set_config+0x1c>)
    23d8:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    23da:	782a      	ldrb	r2, [r5, #0]
    23dc:	230f      	movs	r3, #15
    23de:	4013      	ands	r3, r2
    23e0:	3420      	adds	r4, #32
    23e2:	00a4      	lsls	r4, r4, #2
    23e4:	4a02      	ldr	r2, [pc, #8]	; (23f0 <system_gclk_chan_set_config+0x20>)
    23e6:	50a3      	str	r3, [r4, r2]
}
    23e8:	bd70      	pop	{r4, r5, r6, pc}
    23ea:	46c0      	nop			; (mov r8, r8)
    23ec:	00002399 	.word	0x00002399
    23f0:	40001800 	.word	0x40001800

000023f4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    23f4:	b510      	push	{r4, lr}
    23f6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    23f8:	4b06      	ldr	r3, [pc, #24]	; (2414 <system_gclk_chan_get_hz+0x20>)
    23fa:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    23fc:	3420      	adds	r4, #32
    23fe:	00a4      	lsls	r4, r4, #2
    2400:	4b05      	ldr	r3, [pc, #20]	; (2418 <system_gclk_chan_get_hz+0x24>)
    2402:	58e4      	ldr	r4, [r4, r3]
    2404:	0724      	lsls	r4, r4, #28
    2406:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2408:	4b04      	ldr	r3, [pc, #16]	; (241c <system_gclk_chan_get_hz+0x28>)
    240a:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    240c:	0020      	movs	r0, r4
    240e:	4b04      	ldr	r3, [pc, #16]	; (2420 <system_gclk_chan_get_hz+0x2c>)
    2410:	4798      	blx	r3
}
    2412:	bd10      	pop	{r4, pc}
    2414:	000011ad 	.word	0x000011ad
    2418:	40001800 	.word	0x40001800
    241c:	000011ed 	.word	0x000011ed
    2420:	000022f5 	.word	0x000022f5

00002424 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2424:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2426:	78d3      	ldrb	r3, [r2, #3]
    2428:	2b00      	cmp	r3, #0
    242a:	d135      	bne.n	2498 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    242c:	7813      	ldrb	r3, [r2, #0]
    242e:	2b80      	cmp	r3, #128	; 0x80
    2430:	d029      	beq.n	2486 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2432:	061b      	lsls	r3, r3, #24
    2434:	2480      	movs	r4, #128	; 0x80
    2436:	0264      	lsls	r4, r4, #9
    2438:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    243a:	7854      	ldrb	r4, [r2, #1]
    243c:	2502      	movs	r5, #2
    243e:	43ac      	bics	r4, r5
    2440:	d106      	bne.n	2450 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2442:	7894      	ldrb	r4, [r2, #2]
    2444:	2c00      	cmp	r4, #0
    2446:	d120      	bne.n	248a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2448:	2480      	movs	r4, #128	; 0x80
    244a:	02a4      	lsls	r4, r4, #10
    244c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    244e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2450:	7854      	ldrb	r4, [r2, #1]
    2452:	3c01      	subs	r4, #1
    2454:	2c01      	cmp	r4, #1
    2456:	d91c      	bls.n	2492 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2458:	040d      	lsls	r5, r1, #16
    245a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    245c:	24a0      	movs	r4, #160	; 0xa0
    245e:	05e4      	lsls	r4, r4, #23
    2460:	432c      	orrs	r4, r5
    2462:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2464:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2466:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2468:	24d0      	movs	r4, #208	; 0xd0
    246a:	0624      	lsls	r4, r4, #24
    246c:	432c      	orrs	r4, r5
    246e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2470:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2472:	78d4      	ldrb	r4, [r2, #3]
    2474:	2c00      	cmp	r4, #0
    2476:	d122      	bne.n	24be <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2478:	035b      	lsls	r3, r3, #13
    247a:	d51c      	bpl.n	24b6 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    247c:	7893      	ldrb	r3, [r2, #2]
    247e:	2b01      	cmp	r3, #1
    2480:	d01e      	beq.n	24c0 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2482:	6141      	str	r1, [r0, #20]
    2484:	e017      	b.n	24b6 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    2486:	2300      	movs	r3, #0
    2488:	e7d7      	b.n	243a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    248a:	24c0      	movs	r4, #192	; 0xc0
    248c:	02e4      	lsls	r4, r4, #11
    248e:	4323      	orrs	r3, r4
    2490:	e7dd      	b.n	244e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2492:	4c0d      	ldr	r4, [pc, #52]	; (24c8 <_system_pinmux_config+0xa4>)
    2494:	4023      	ands	r3, r4
    2496:	e7df      	b.n	2458 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2498:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    249a:	040c      	lsls	r4, r1, #16
    249c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    249e:	23a0      	movs	r3, #160	; 0xa0
    24a0:	05db      	lsls	r3, r3, #23
    24a2:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    24a4:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    24a6:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    24a8:	23d0      	movs	r3, #208	; 0xd0
    24aa:	061b      	lsls	r3, r3, #24
    24ac:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    24ae:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    24b0:	78d3      	ldrb	r3, [r2, #3]
    24b2:	2b00      	cmp	r3, #0
    24b4:	d103      	bne.n	24be <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    24b6:	7853      	ldrb	r3, [r2, #1]
    24b8:	3b01      	subs	r3, #1
    24ba:	2b01      	cmp	r3, #1
    24bc:	d902      	bls.n	24c4 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    24be:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    24c0:	6181      	str	r1, [r0, #24]
    24c2:	e7f8      	b.n	24b6 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    24c4:	6081      	str	r1, [r0, #8]
}
    24c6:	e7fa      	b.n	24be <_system_pinmux_config+0x9a>
    24c8:	fffbffff 	.word	0xfffbffff

000024cc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    24cc:	b510      	push	{r4, lr}
    24ce:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    24d0:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    24d2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    24d4:	2900      	cmp	r1, #0
    24d6:	d104      	bne.n	24e2 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    24d8:	0943      	lsrs	r3, r0, #5
    24da:	01db      	lsls	r3, r3, #7
    24dc:	4905      	ldr	r1, [pc, #20]	; (24f4 <system_pinmux_pin_set_config+0x28>)
    24de:	468c      	mov	ip, r1
    24e0:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    24e2:	241f      	movs	r4, #31
    24e4:	4020      	ands	r0, r4
    24e6:	2101      	movs	r1, #1
    24e8:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    24ea:	0018      	movs	r0, r3
    24ec:	4b02      	ldr	r3, [pc, #8]	; (24f8 <system_pinmux_pin_set_config+0x2c>)
    24ee:	4798      	blx	r3
}
    24f0:	bd10      	pop	{r4, pc}
    24f2:	46c0      	nop			; (mov r8, r8)
    24f4:	40002800 	.word	0x40002800
    24f8:	00002425 	.word	0x00002425

000024fc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    24fc:	4770      	bx	lr
	...

00002500 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2500:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2502:	4b05      	ldr	r3, [pc, #20]	; (2518 <system_init+0x18>)
    2504:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2506:	4b05      	ldr	r3, [pc, #20]	; (251c <system_init+0x1c>)
    2508:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    250a:	4b05      	ldr	r3, [pc, #20]	; (2520 <system_init+0x20>)
    250c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    250e:	4b05      	ldr	r3, [pc, #20]	; (2524 <system_init+0x24>)
    2510:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2512:	4b05      	ldr	r3, [pc, #20]	; (2528 <system_init+0x28>)
    2514:	4798      	blx	r3
}
    2516:	bd10      	pop	{r4, pc}
    2518:	00001fd5 	.word	0x00001fd5
    251c:	000024fd 	.word	0x000024fd
    2520:	000024fd 	.word	0x000024fd
    2524:	00001291 	.word	0x00001291
    2528:	000024fd 	.word	0x000024fd

0000252c <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    252c:	b510      	push	{r4, lr}
    252e:	b084      	sub	sp, #16
	enum sleepmgr_mode sleep_mode[] = {
    2530:	ab03      	add	r3, sp, #12
    2532:	2200      	movs	r2, #0
    2534:	701a      	strb	r2, [r3, #0]
    2536:	3201      	adds	r2, #1
    2538:	705a      	strb	r2, [r3, #1]
    253a:	709a      	strb	r2, [r3, #2]
    253c:	70da      	strb	r2, [r3, #3]
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    253e:	4b27      	ldr	r3, [pc, #156]	; (25dc <udd_sleep_mode+0xb0>)
    2540:	781b      	ldrb	r3, [r3, #0]
    2542:	4283      	cmp	r3, r0
    2544:	d007      	beq.n	2556 <udd_sleep_mode+0x2a>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    2546:	2800      	cmp	r0, #0
    2548:	d107      	bne.n	255a <udd_sleep_mode+0x2e>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
	}
	if (udd_state != UDD_STATE_OFF) {
    254a:	4b24      	ldr	r3, [pc, #144]	; (25dc <udd_sleep_mode+0xb0>)
    254c:	781b      	ldrb	r3, [r3, #0]
    254e:	2b00      	cmp	r3, #0
    2550:	d123      	bne.n	259a <udd_sleep_mode+0x6e>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
	}
	udd_state = new_state;
    2552:	4b22      	ldr	r3, [pc, #136]	; (25dc <udd_sleep_mode+0xb0>)
    2554:	7018      	strb	r0, [r3, #0]
}
    2556:	b004      	add	sp, #16
    2558:	bd10      	pop	{r4, pc}
		sleepmgr_lock_mode(sleep_mode[new_state]);
    255a:	ab03      	add	r3, sp, #12
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    255c:	5c1b      	ldrb	r3, [r3, r0]
    255e:	4a20      	ldr	r2, [pc, #128]	; (25e0 <udd_sleep_mode+0xb4>)
    2560:	5cd2      	ldrb	r2, [r2, r3]
    2562:	2aff      	cmp	r2, #255	; 0xff
    2564:	d100      	bne.n	2568 <udd_sleep_mode+0x3c>
    2566:	e7fe      	b.n	2566 <udd_sleep_mode+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2568:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    256c:	4251      	negs	r1, r2
    256e:	414a      	adcs	r2, r1
    2570:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    2572:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2574:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2578:	2100      	movs	r1, #0
    257a:	4a1a      	ldr	r2, [pc, #104]	; (25e4 <udd_sleep_mode+0xb8>)
    257c:	7011      	strb	r1, [r2, #0]
	return flags;
    257e:	9c01      	ldr	r4, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    2580:	4917      	ldr	r1, [pc, #92]	; (25e0 <udd_sleep_mode+0xb4>)
    2582:	5cca      	ldrb	r2, [r1, r3]
    2584:	3201      	adds	r2, #1
    2586:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    2588:	2c00      	cmp	r4, #0
    258a:	d0de      	beq.n	254a <udd_sleep_mode+0x1e>
		cpu_irq_enable();
    258c:	2201      	movs	r2, #1
    258e:	4b15      	ldr	r3, [pc, #84]	; (25e4 <udd_sleep_mode+0xb8>)
    2590:	701a      	strb	r2, [r3, #0]
    2592:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2596:	b662      	cpsie	i
    2598:	e7d7      	b.n	254a <udd_sleep_mode+0x1e>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    259a:	aa03      	add	r2, sp, #12
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    259c:	5cd3      	ldrb	r3, [r2, r3]
    259e:	4a10      	ldr	r2, [pc, #64]	; (25e0 <udd_sleep_mode+0xb4>)
    25a0:	5cd2      	ldrb	r2, [r2, r3]
    25a2:	2a00      	cmp	r2, #0
    25a4:	d100      	bne.n	25a8 <udd_sleep_mode+0x7c>
    25a6:	e7fe      	b.n	25a6 <udd_sleep_mode+0x7a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    25a8:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    25ac:	4251      	negs	r1, r2
    25ae:	414a      	adcs	r2, r1
    25b0:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    25b2:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    25b4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    25b8:	2100      	movs	r1, #0
    25ba:	4a0a      	ldr	r2, [pc, #40]	; (25e4 <udd_sleep_mode+0xb8>)
    25bc:	7011      	strb	r1, [r2, #0]
	return flags;
    25be:	9c02      	ldr	r4, [sp, #8]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    25c0:	4907      	ldr	r1, [pc, #28]	; (25e0 <udd_sleep_mode+0xb4>)
    25c2:	5cca      	ldrb	r2, [r1, r3]
    25c4:	3a01      	subs	r2, #1
    25c6:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    25c8:	2c00      	cmp	r4, #0
    25ca:	d0c2      	beq.n	2552 <udd_sleep_mode+0x26>
		cpu_irq_enable();
    25cc:	2201      	movs	r2, #1
    25ce:	4b05      	ldr	r3, [pc, #20]	; (25e4 <udd_sleep_mode+0xb8>)
    25d0:	701a      	strb	r2, [r3, #0]
    25d2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    25d6:	b662      	cpsie	i
    25d8:	e7bb      	b.n	2552 <udd_sleep_mode+0x26>
    25da:	46c0      	nop			; (mov r8, r8)
    25dc:	20000744 	.word	0x20000744
    25e0:	20000764 	.word	0x20000764
    25e4:	20000112 	.word	0x20000112

000025e8 <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	if ((ep == 0) || (ep == 0x80)) {
    25e8:	0643      	lsls	r3, r0, #25
    25ea:	d00b      	beq.n	2604 <udd_ep_get_job+0x1c>
		return NULL;
	} else {
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    25ec:	230f      	movs	r3, #15
    25ee:	4003      	ands	r3, r0
    25f0:	005b      	lsls	r3, r3, #1
    25f2:	09c0      	lsrs	r0, r0, #7
    25f4:	1818      	adds	r0, r3, r0
    25f6:	3802      	subs	r0, #2
    25f8:	0083      	lsls	r3, r0, #2
    25fa:	1818      	adds	r0, r3, r0
    25fc:	0080      	lsls	r0, r0, #2
    25fe:	4b02      	ldr	r3, [pc, #8]	; (2608 <udd_ep_get_job+0x20>)
    2600:	1818      	adds	r0, r3, r0
	}
}
    2602:	4770      	bx	lr
		return NULL;
    2604:	2000      	movs	r0, #0
    2606:	e7fc      	b.n	2602 <udd_ep_get_job+0x1a>
    2608:	200006cc 	.word	0x200006cc

0000260c <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    260c:	b5f0      	push	{r4, r5, r6, r7, lr}
    260e:	46d6      	mov	lr, sl
    2610:	464f      	mov	r7, r9
    2612:	4646      	mov	r6, r8
    2614:	b5c0      	push	{r6, r7, lr}
    2616:	4689      	mov	r9, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    2618:	798d      	ldrb	r5, [r1, #6]

	if (ep & USB_EP_DIR_IN) {
    261a:	b26b      	sxtb	r3, r5
    261c:	2b00      	cmp	r3, #0
    261e:	db26      	blt.n	266e <udd_ep_transfer_process+0x62>
	ptr_job = udd_ep_get_job(ep);
    2620:	0028      	movs	r0, r5
    2622:	4b5e      	ldr	r3, [pc, #376]	; (279c <udd_ep_transfer_process+0x190>)
    2624:	4798      	blx	r3
    2626:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    2628:	270f      	movs	r7, #15
    262a:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    262c:	8a03      	ldrh	r3, [r0, #16]
    262e:	4698      	mov	r8, r3
	nb_trans = ep_callback_para->received_bytes;
    2630:	464b      	mov	r3, r9
    2632:	881b      	ldrh	r3, [r3, #0]
    2634:	469a      	mov	sl, r3
	if (ptr_job->b_use_out_cache_buffer) {
    2636:	7c83      	ldrb	r3, [r0, #18]
    2638:	075b      	lsls	r3, r3, #29
    263a:	d46a      	bmi.n	2712 <udd_ep_transfer_process+0x106>
	ptr_job->nb_trans += nb_trans;
    263c:	68e3      	ldr	r3, [r4, #12]
    263e:	4453      	add	r3, sl
    2640:	001e      	movs	r6, r3
    2642:	60e3      	str	r3, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    2644:	68a3      	ldr	r3, [r4, #8]
    2646:	429e      	cmp	r6, r3
    2648:	d800      	bhi.n	264c <udd_ep_transfer_process+0x40>
    264a:	e074      	b.n	2736 <udd_ep_transfer_process+0x12a>
		ptr_job->nb_trans = ptr_job->buf_size;
    264c:	60e3      	str	r3, [r4, #12]
	ptr_job->busy = false;
    264e:	7ca3      	ldrb	r3, [r4, #18]
    2650:	2201      	movs	r2, #1
    2652:	4393      	bics	r3, r2
    2654:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    2656:	6823      	ldr	r3, [r4, #0]
    2658:	2b00      	cmp	r3, #0
    265a:	d003      	beq.n	2664 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    265c:	68e1      	ldr	r1, [r4, #12]
    265e:	002a      	movs	r2, r5
    2660:	2000      	movs	r0, #0
    2662:	4798      	blx	r3
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    2664:	bc1c      	pop	{r2, r3, r4}
    2666:	4690      	mov	r8, r2
    2668:	4699      	mov	r9, r3
    266a:	46a2      	mov	sl, r4
    266c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job = udd_ep_get_job(ep);
    266e:	0028      	movs	r0, r5
    2670:	4b4a      	ldr	r3, [pc, #296]	; (279c <udd_ep_transfer_process+0x190>)
    2672:	4798      	blx	r3
    2674:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    2676:	270f      	movs	r7, #15
    2678:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    267a:	8a03      	ldrh	r3, [r0, #16]
    267c:	4698      	mov	r8, r3
	ptr_job->nb_trans += nb_trans;
    267e:	464b      	mov	r3, r9
    2680:	885e      	ldrh	r6, [r3, #2]
    2682:	68c3      	ldr	r3, [r0, #12]
    2684:	469c      	mov	ip, r3
    2686:	4466      	add	r6, ip
    2688:	60c6      	str	r6, [r0, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    268a:	6881      	ldr	r1, [r0, #8]
    268c:	428e      	cmp	r6, r1
    268e:	d025      	beq.n	26dc <udd_ep_transfer_process+0xd0>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    2690:	1b8d      	subs	r5, r1, r6
    2692:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2694:	4b42      	ldr	r3, [pc, #264]	; (27a0 <udd_ep_transfer_process+0x194>)
    2696:	429d      	cmp	r5, r3
    2698:	d906      	bls.n	26a8 <udd_ep_transfer_process+0x9c>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    269a:	001d      	movs	r5, r3
    269c:	4641      	mov	r1, r8
    269e:	0018      	movs	r0, r3
    26a0:	4b40      	ldr	r3, [pc, #256]	; (27a4 <udd_ep_transfer_process+0x198>)
    26a2:	4798      	blx	r3
    26a4:	1a6d      	subs	r5, r5, r1
    26a6:	b2ad      	uxth	r5, r5
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    26a8:	7ca2      	ldrb	r2, [r4, #18]
    26aa:	2300      	movs	r3, #0
    26ac:	0792      	lsls	r2, r2, #30
    26ae:	d507      	bpl.n	26c0 <udd_ep_transfer_process+0xb4>
    26b0:	4641      	mov	r1, r8
    26b2:	0028      	movs	r0, r5
    26b4:	4b3c      	ldr	r3, [pc, #240]	; (27a8 <udd_ep_transfer_process+0x19c>)
    26b6:	4798      	blx	r3
    26b8:	b289      	uxth	r1, r1
    26ba:	424b      	negs	r3, r1
    26bc:	414b      	adcs	r3, r1
    26be:	b2db      	uxtb	r3, r3
    26c0:	005b      	lsls	r3, r3, #1
    26c2:	7ca2      	ldrb	r2, [r4, #18]
    26c4:	2102      	movs	r1, #2
    26c6:	438a      	bics	r2, r1
    26c8:	4313      	orrs	r3, r2
    26ca:	74a3      	strb	r3, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    26cc:	6862      	ldr	r2, [r4, #4]
    26ce:	1992      	adds	r2, r2, r6
    26d0:	002b      	movs	r3, r5
    26d2:	0039      	movs	r1, r7
    26d4:	4835      	ldr	r0, [pc, #212]	; (27ac <udd_ep_transfer_process+0x1a0>)
    26d6:	4c36      	ldr	r4, [pc, #216]	; (27b0 <udd_ep_transfer_process+0x1a4>)
    26d8:	47a0      	blx	r4
    26da:	e7c3      	b.n	2664 <udd_ep_transfer_process+0x58>
	if (ptr_job->b_shortpacket) {
    26dc:	7c83      	ldrb	r3, [r0, #18]
    26de:	079b      	lsls	r3, r3, #30
    26e0:	d40b      	bmi.n	26fa <udd_ep_transfer_process+0xee>
	ptr_job->busy = false;
    26e2:	7c83      	ldrb	r3, [r0, #18]
    26e4:	2201      	movs	r2, #1
    26e6:	4393      	bics	r3, r2
    26e8:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    26ea:	6803      	ldr	r3, [r0, #0]
    26ec:	2b00      	cmp	r3, #0
    26ee:	d0b9      	beq.n	2664 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    26f0:	002a      	movs	r2, r5
    26f2:	0031      	movs	r1, r6
    26f4:	2000      	movs	r0, #0
    26f6:	4798      	blx	r3
    26f8:	e7b4      	b.n	2664 <udd_ep_transfer_process+0x58>
		ptr_job->b_shortpacket = false;
    26fa:	7c83      	ldrb	r3, [r0, #18]
    26fc:	2202      	movs	r2, #2
    26fe:	4393      	bics	r3, r2
    2700:	7483      	strb	r3, [r0, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    2702:	6842      	ldr	r2, [r0, #4]
    2704:	1992      	adds	r2, r2, r6
    2706:	2300      	movs	r3, #0
    2708:	0039      	movs	r1, r7
    270a:	4828      	ldr	r0, [pc, #160]	; (27ac <udd_ep_transfer_process+0x1a0>)
    270c:	4c28      	ldr	r4, [pc, #160]	; (27b0 <udd_ep_transfer_process+0x1a4>)
    270e:	47a0      	blx	r4
    2710:	e7a8      	b.n	2664 <udd_ep_transfer_process+0x58>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    2712:	6843      	ldr	r3, [r0, #4]
    2714:	68c2      	ldr	r2, [r0, #12]
    2716:	4694      	mov	ip, r2
    2718:	4463      	add	r3, ip
    271a:	001e      	movs	r6, r3
    271c:	4641      	mov	r1, r8
    271e:	6880      	ldr	r0, [r0, #8]
    2720:	4b21      	ldr	r3, [pc, #132]	; (27a8 <udd_ep_transfer_process+0x19c>)
    2722:	4798      	blx	r3
    2724:	000a      	movs	r2, r1
    2726:	1e7b      	subs	r3, r7, #1
    2728:	019b      	lsls	r3, r3, #6
    272a:	4922      	ldr	r1, [pc, #136]	; (27b4 <udd_ep_transfer_process+0x1a8>)
    272c:	1859      	adds	r1, r3, r1
    272e:	0030      	movs	r0, r6
    2730:	4b21      	ldr	r3, [pc, #132]	; (27b8 <udd_ep_transfer_process+0x1ac>)
    2732:	4798      	blx	r3
    2734:	e782      	b.n	263c <udd_ep_transfer_process+0x30>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    2736:	464a      	mov	r2, r9
    2738:	8892      	ldrh	r2, [r2, #4]
    273a:	4552      	cmp	r2, sl
    273c:	d000      	beq.n	2740 <udd_ep_transfer_process+0x134>
    273e:	e786      	b.n	264e <udd_ep_transfer_process+0x42>
    2740:	429e      	cmp	r6, r3
    2742:	d100      	bne.n	2746 <udd_ep_transfer_process+0x13a>
    2744:	e783      	b.n	264e <udd_ep_transfer_process+0x42>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    2746:	1b9b      	subs	r3, r3, r6
    2748:	b29d      	uxth	r5, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    274a:	4b15      	ldr	r3, [pc, #84]	; (27a0 <udd_ep_transfer_process+0x194>)
    274c:	429d      	cmp	r5, r3
    274e:	d916      	bls.n	277e <udd_ep_transfer_process+0x172>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    2750:	001d      	movs	r5, r3
    2752:	4641      	mov	r1, r8
    2754:	0018      	movs	r0, r3
    2756:	4b13      	ldr	r3, [pc, #76]	; (27a4 <udd_ep_transfer_process+0x198>)
    2758:	4798      	blx	r3
    275a:	1a6b      	subs	r3, r5, r1
    275c:	b29b      	uxth	r3, r3
		if (next_trans < ep_size) {
    275e:	4598      	cmp	r8, r3
    2760:	d914      	bls.n	278c <udd_ep_transfer_process+0x180>
			ptr_job->b_use_out_cache_buffer = true;
    2762:	7ca3      	ldrb	r3, [r4, #18]
    2764:	2204      	movs	r2, #4
    2766:	4313      	orrs	r3, r2
    2768:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    276a:	1e7a      	subs	r2, r7, #1
    276c:	0192      	lsls	r2, r2, #6
    276e:	4b11      	ldr	r3, [pc, #68]	; (27b4 <udd_ep_transfer_process+0x1a8>)
    2770:	18d2      	adds	r2, r2, r3
    2772:	4643      	mov	r3, r8
    2774:	0039      	movs	r1, r7
    2776:	480d      	ldr	r0, [pc, #52]	; (27ac <udd_ep_transfer_process+0x1a0>)
    2778:	4c10      	ldr	r4, [pc, #64]	; (27bc <udd_ep_transfer_process+0x1b0>)
    277a:	47a0      	blx	r4
    277c:	e772      	b.n	2664 <udd_ep_transfer_process+0x58>
			next_trans -= next_trans % ep_size;
    277e:	4641      	mov	r1, r8
    2780:	0028      	movs	r0, r5
    2782:	4b09      	ldr	r3, [pc, #36]	; (27a8 <udd_ep_transfer_process+0x19c>)
    2784:	4798      	blx	r3
    2786:	1a6b      	subs	r3, r5, r1
    2788:	b29b      	uxth	r3, r3
    278a:	e7e8      	b.n	275e <udd_ep_transfer_process+0x152>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    278c:	6862      	ldr	r2, [r4, #4]
    278e:	1992      	adds	r2, r2, r6
    2790:	0039      	movs	r1, r7
    2792:	4806      	ldr	r0, [pc, #24]	; (27ac <udd_ep_transfer_process+0x1a0>)
    2794:	4c09      	ldr	r4, [pc, #36]	; (27bc <udd_ep_transfer_process+0x1b0>)
    2796:	47a0      	blx	r4
    2798:	e764      	b.n	2664 <udd_ep_transfer_process+0x58>
    279a:	46c0      	nop			; (mov r8, r8)
    279c:	000025e9 	.word	0x000025e9
    27a0:	00001fff 	.word	0x00001fff
    27a4:	00004fa5 	.word	0x00004fa5
    27a8:	00004dd1 	.word	0x00004dd1
    27ac:	20000884 	.word	0x20000884
    27b0:	000037d9 	.word	0x000037d9
    27b4:	200007c4 	.word	0x200007c4
    27b8:	0000508d 	.word	0x0000508d
    27bc:	0000382d 	.word	0x0000382d

000027c0 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    27c0:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    27c2:	2205      	movs	r2, #5
    27c4:	4b05      	ldr	r3, [pc, #20]	; (27dc <udd_ctrl_stall_data+0x1c>)
    27c6:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    27c8:	4c05      	ldr	r4, [pc, #20]	; (27e0 <udd_ctrl_stall_data+0x20>)
    27ca:	2180      	movs	r1, #128	; 0x80
    27cc:	0020      	movs	r0, r4
    27ce:	4b05      	ldr	r3, [pc, #20]	; (27e4 <udd_ctrl_stall_data+0x24>)
    27d0:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    27d2:	2100      	movs	r1, #0
    27d4:	0020      	movs	r0, r4
    27d6:	4b04      	ldr	r3, [pc, #16]	; (27e8 <udd_ctrl_stall_data+0x28>)
    27d8:	4798      	blx	r3
}
    27da:	bd10      	pop	{r4, pc}
    27dc:	200006ca 	.word	0x200006ca
    27e0:	20000884 	.word	0x20000884
    27e4:	0000372d 	.word	0x0000372d
    27e8:	00003753 	.word	0x00003753

000027ec <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    27ec:	b570      	push	{r4, r5, r6, lr}
		if (!(OSCCTRL->DFLLCTRL.reg & OSCCTRL_DFLLCTRL_USBCRM)) {
    27ee:	4b13      	ldr	r3, [pc, #76]	; (283c <_usb_on_wakeup+0x50>)
    27f0:	8b1b      	ldrh	r3, [r3, #24]
    27f2:	069b      	lsls	r3, r3, #26
    27f4:	d41b      	bmi.n	282e <_usb_on_wakeup+0x42>
			while((OSCCTRL->STATUS.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    27f6:	4911      	ldr	r1, [pc, #68]	; (283c <_usb_on_wakeup+0x50>)
    27f8:	22d0      	movs	r2, #208	; 0xd0
    27fa:	0112      	lsls	r2, r2, #4
    27fc:	68cb      	ldr	r3, [r1, #12]
    27fe:	4013      	ands	r3, r2
    2800:	4293      	cmp	r3, r2
    2802:	d1fb      	bne.n	27fc <_usb_on_wakeup+0x10>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    2804:	4c0e      	ldr	r4, [pc, #56]	; (2840 <_usb_on_wakeup+0x54>)
    2806:	2102      	movs	r1, #2
    2808:	0020      	movs	r0, r4
    280a:	4b0e      	ldr	r3, [pc, #56]	; (2844 <_usb_on_wakeup+0x58>)
    280c:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    280e:	2104      	movs	r1, #4
    2810:	0020      	movs	r0, r4
    2812:	4d0d      	ldr	r5, [pc, #52]	; (2848 <_usb_on_wakeup+0x5c>)
    2814:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    2816:	4a0d      	ldr	r2, [pc, #52]	; (284c <_usb_on_wakeup+0x60>)
    2818:	2106      	movs	r1, #6
    281a:	0020      	movs	r0, r4
    281c:	4b0c      	ldr	r3, [pc, #48]	; (2850 <_usb_on_wakeup+0x64>)
    281e:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    2820:	2106      	movs	r1, #6
    2822:	0020      	movs	r0, r4
    2824:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    2826:	2003      	movs	r0, #3
    2828:	4b0a      	ldr	r3, [pc, #40]	; (2854 <_usb_on_wakeup+0x68>)
    282a:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
#endif
}
    282c:	bd70      	pop	{r4, r5, r6, pc}
			while((OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY);
    282e:	4903      	ldr	r1, [pc, #12]	; (283c <_usb_on_wakeup+0x50>)
    2830:	2280      	movs	r2, #128	; 0x80
    2832:	0052      	lsls	r2, r2, #1
    2834:	68cb      	ldr	r3, [r1, #12]
    2836:	4213      	tst	r3, r2
    2838:	d0fc      	beq.n	2834 <_usb_on_wakeup+0x48>
    283a:	e7e3      	b.n	2804 <_usb_on_wakeup+0x18>
    283c:	40000c00 	.word	0x40000c00
    2840:	20000884 	.word	0x20000884
    2844:	0000326d 	.word	0x0000326d
    2848:	0000324d 	.word	0x0000324d
    284c:	00002885 	.word	0x00002885
    2850:	00003229 	.word	0x00003229
    2854:	0000252d 	.word	0x0000252d

00002858 <_usb_on_suspend>:
{
    2858:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    285a:	4c06      	ldr	r4, [pc, #24]	; (2874 <_usb_on_suspend+0x1c>)
    285c:	2104      	movs	r1, #4
    285e:	0020      	movs	r0, r4
    2860:	4b05      	ldr	r3, [pc, #20]	; (2878 <_usb_on_suspend+0x20>)
    2862:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    2864:	2102      	movs	r1, #2
    2866:	0020      	movs	r0, r4
    2868:	4b04      	ldr	r3, [pc, #16]	; (287c <_usb_on_suspend+0x24>)
    286a:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    286c:	2001      	movs	r0, #1
    286e:	4b04      	ldr	r3, [pc, #16]	; (2880 <_usb_on_suspend+0x28>)
    2870:	4798      	blx	r3
}
    2872:	bd10      	pop	{r4, pc}
    2874:	20000884 	.word	0x20000884
    2878:	0000326d 	.word	0x0000326d
    287c:	0000324d 	.word	0x0000324d
    2880:	0000252d 	.word	0x0000252d

00002884 <_usb_device_lpm_suspend>:
{
    2884:	b570      	push	{r4, r5, r6, lr}
    2886:	000e      	movs	r6, r1
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    2888:	4c0e      	ldr	r4, [pc, #56]	; (28c4 <_usb_device_lpm_suspend+0x40>)
    288a:	2106      	movs	r1, #6
    288c:	0020      	movs	r0, r4
    288e:	4d0e      	ldr	r5, [pc, #56]	; (28c8 <_usb_device_lpm_suspend+0x44>)
    2890:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    2892:	2104      	movs	r1, #4
    2894:	0020      	movs	r0, r4
    2896:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    2898:	2102      	movs	r1, #2
    289a:	0020      	movs	r0, r4
    289c:	4b0b      	ldr	r3, [pc, #44]	; (28cc <_usb_device_lpm_suspend+0x48>)
    289e:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    28a0:	2002      	movs	r0, #2
    28a2:	4b0b      	ldr	r3, [pc, #44]	; (28d0 <_usb_device_lpm_suspend+0x4c>)
    28a4:	4798      	blx	r3
	if ((*lpm_wakeup_enable)) {
    28a6:	6833      	ldr	r3, [r6, #0]
    28a8:	2b00      	cmp	r3, #0
    28aa:	d104      	bne.n	28b6 <_usb_device_lpm_suspend+0x32>
		UDC_REMOTEWAKEUP_LPM_DISABLE();
    28ac:	4b09      	ldr	r3, [pc, #36]	; (28d4 <_usb_device_lpm_suspend+0x50>)
    28ae:	4798      	blx	r3
	UDC_SUSPEND_LPM_EVENT();
    28b0:	4b09      	ldr	r3, [pc, #36]	; (28d8 <_usb_device_lpm_suspend+0x54>)
    28b2:	4798      	blx	r3
}
    28b4:	bd70      	pop	{r4, r5, r6, pc}
		UDC_REMOTEWAKEUP_LPM_ENABLE();
    28b6:	4b09      	ldr	r3, [pc, #36]	; (28dc <_usb_device_lpm_suspend+0x58>)
    28b8:	4798      	blx	r3
	if (!(*lpm_wakeup_enable)) {
    28ba:	6833      	ldr	r3, [r6, #0]
    28bc:	2b00      	cmp	r3, #0
    28be:	d1f7      	bne.n	28b0 <_usb_device_lpm_suspend+0x2c>
    28c0:	e7f4      	b.n	28ac <_usb_device_lpm_suspend+0x28>
    28c2:	46c0      	nop			; (mov r8, r8)
    28c4:	20000884 	.word	0x20000884
    28c8:	0000326d 	.word	0x0000326d
    28cc:	0000324d 	.word	0x0000324d
    28d0:	0000252d 	.word	0x0000252d
    28d4:	000042c7 	.word	0x000042c7
    28d8:	000042c5 	.word	0x000042c5
    28dc:	000042c9 	.word	0x000042c9

000028e0 <_usb_on_bus_reset>:
{
    28e0:	b530      	push	{r4, r5, lr}
    28e2:	b083      	sub	sp, #12
    28e4:	0004      	movs	r4, r0
	udc_reset();
    28e6:	4b1e      	ldr	r3, [pc, #120]	; (2960 <_usb_on_bus_reset+0x80>)
    28e8:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    28ea:	2380      	movs	r3, #128	; 0x80
    28ec:	6822      	ldr	r2, [r4, #0]
    28ee:	7293      	strb	r3, [r2, #10]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    28f0:	ad01      	add	r5, sp, #4
    28f2:	0028      	movs	r0, r5
    28f4:	4b1b      	ldr	r3, [pc, #108]	; (2964 <_usb_on_bus_reset+0x84>)
    28f6:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    28f8:	2303      	movs	r3, #3
    28fa:	706b      	strb	r3, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    28fc:	0029      	movs	r1, r5
    28fe:	0020      	movs	r0, r4
    2900:	4b19      	ldr	r3, [pc, #100]	; (2968 <_usb_on_bus_reset+0x88>)
    2902:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    2904:	4919      	ldr	r1, [pc, #100]	; (296c <_usb_on_bus_reset+0x8c>)
    2906:	0020      	movs	r0, r4
    2908:	4b19      	ldr	r3, [pc, #100]	; (2970 <_usb_on_bus_reset+0x90>)
    290a:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    290c:	4b19      	ldr	r3, [pc, #100]	; (2974 <_usb_on_bus_reset+0x94>)
    290e:	2202      	movs	r2, #2
    2910:	2100      	movs	r1, #0
    2912:	0020      	movs	r0, r4
    2914:	4d18      	ldr	r5, [pc, #96]	; (2978 <_usb_on_bus_reset+0x98>)
    2916:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    2918:	4b18      	ldr	r3, [pc, #96]	; (297c <_usb_on_bus_reset+0x9c>)
    291a:	2200      	movs	r2, #0
    291c:	2100      	movs	r1, #0
    291e:	0020      	movs	r0, r4
    2920:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    2922:	4b17      	ldr	r3, [pc, #92]	; (2980 <_usb_on_bus_reset+0xa0>)
    2924:	2201      	movs	r2, #1
    2926:	2100      	movs	r1, #0
    2928:	0020      	movs	r0, r4
    292a:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    292c:	2202      	movs	r2, #2
    292e:	2100      	movs	r1, #0
    2930:	0020      	movs	r0, r4
    2932:	4d14      	ldr	r5, [pc, #80]	; (2984 <_usb_on_bus_reset+0xa4>)
    2934:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2936:	2200      	movs	r2, #0
    2938:	2100      	movs	r1, #0
    293a:	0020      	movs	r0, r4
    293c:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    293e:	2201      	movs	r2, #1
    2940:	2100      	movs	r1, #0
    2942:	0020      	movs	r0, r4
    2944:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    2946:	6821      	ldr	r1, [r4, #0]
    2948:	890b      	ldrh	r3, [r1, #8]
    294a:	4a0f      	ldr	r2, [pc, #60]	; (2988 <_usb_on_bus_reset+0xa8>)
    294c:	401a      	ands	r2, r3
    294e:	2380      	movs	r3, #128	; 0x80
    2950:	00db      	lsls	r3, r3, #3
    2952:	4313      	orrs	r3, r2
    2954:	810b      	strh	r3, [r1, #8]
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    2956:	2200      	movs	r2, #0
    2958:	4b0c      	ldr	r3, [pc, #48]	; (298c <_usb_on_bus_reset+0xac>)
    295a:	701a      	strb	r2, [r3, #0]
}
    295c:	b003      	add	sp, #12
    295e:	bd30      	pop	{r4, r5, pc}
    2960:	00000cd9 	.word	0x00000cd9
    2964:	00003479 	.word	0x00003479
    2968:	00003489 	.word	0x00003489
    296c:	20000a04 	.word	0x20000a04
    2970:	0000387d 	.word	0x0000387d
    2974:	00002ac9 	.word	0x00002ac9
    2978:	00003289 	.word	0x00003289
    297c:	00002dbd 	.word	0x00002dbd
    2980:	000029cd 	.word	0x000029cd
    2984:	000032d9 	.word	0x000032d9
    2988:	fffff3ff 	.word	0xfffff3ff
    298c:	200006ca 	.word	0x200006ca

00002990 <udd_ctrl_send_zlp_in>:
{
    2990:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    2992:	2203      	movs	r2, #3
    2994:	4b07      	ldr	r3, [pc, #28]	; (29b4 <udd_ctrl_send_zlp_in+0x24>)
    2996:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    2998:	4c07      	ldr	r4, [pc, #28]	; (29b8 <udd_ctrl_send_zlp_in+0x28>)
    299a:	4908      	ldr	r1, [pc, #32]	; (29bc <udd_ctrl_send_zlp_in+0x2c>)
    299c:	0020      	movs	r0, r4
    299e:	4b08      	ldr	r3, [pc, #32]	; (29c0 <udd_ctrl_send_zlp_in+0x30>)
    29a0:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    29a2:	4b08      	ldr	r3, [pc, #32]	; (29c4 <udd_ctrl_send_zlp_in+0x34>)
    29a4:	689a      	ldr	r2, [r3, #8]
    29a6:	2300      	movs	r3, #0
    29a8:	2100      	movs	r1, #0
    29aa:	0020      	movs	r0, r4
    29ac:	4c06      	ldr	r4, [pc, #24]	; (29c8 <udd_ctrl_send_zlp_in+0x38>)
    29ae:	47a0      	blx	r4
}
    29b0:	bd10      	pop	{r4, pc}
    29b2:	46c0      	nop			; (mov r8, r8)
    29b4:	200006ca 	.word	0x200006ca
    29b8:	20000884 	.word	0x20000884
    29bc:	20000a04 	.word	0x20000a04
    29c0:	0000387d 	.word	0x0000387d
    29c4:	200009ec 	.word	0x200009ec
    29c8:	000037d9 	.word	0x000037d9

000029cc <_usb_ep0_on_tansfer_fail>:
{
    29cc:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    29ce:	7989      	ldrb	r1, [r1, #6]
    29d0:	b24b      	sxtb	r3, r1
    29d2:	2b00      	cmp	r3, #0
    29d4:	db06      	blt.n	29e4 <_usb_ep0_on_tansfer_fail+0x18>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    29d6:	4b0e      	ldr	r3, [pc, #56]	; (2a10 <_usb_ep0_on_tansfer_fail+0x44>)
    29d8:	781b      	ldrb	r3, [r3, #0]
    29da:	2b02      	cmp	r3, #2
    29dc:	d00f      	beq.n	29fe <_usb_ep0_on_tansfer_fail+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    29de:	2b03      	cmp	r3, #3
    29e0:	d011      	beq.n	2a06 <_usb_ep0_on_tansfer_fail+0x3a>
}
    29e2:	bd10      	pop	{r4, pc}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    29e4:	4b0a      	ldr	r3, [pc, #40]	; (2a10 <_usb_ep0_on_tansfer_fail+0x44>)
    29e6:	781b      	ldrb	r3, [r3, #0]
    29e8:	2b01      	cmp	r3, #1
    29ea:	d005      	beq.n	29f8 <_usb_ep0_on_tansfer_fail+0x2c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    29ec:	2b04      	cmp	r3, #4
    29ee:	d1f8      	bne.n	29e2 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    29f0:	4808      	ldr	r0, [pc, #32]	; (2a14 <_usb_ep0_on_tansfer_fail+0x48>)
    29f2:	4b09      	ldr	r3, [pc, #36]	; (2a18 <_usb_ep0_on_tansfer_fail+0x4c>)
    29f4:	4798      	blx	r3
    29f6:	e7f4      	b.n	29e2 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ctrl_send_zlp_in();
    29f8:	4b08      	ldr	r3, [pc, #32]	; (2a1c <_usb_ep0_on_tansfer_fail+0x50>)
    29fa:	4798      	blx	r3
    29fc:	e7f1      	b.n	29e2 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    29fe:	2204      	movs	r2, #4
    2a00:	4b03      	ldr	r3, [pc, #12]	; (2a10 <_usb_ep0_on_tansfer_fail+0x44>)
    2a02:	701a      	strb	r2, [r3, #0]
    2a04:	e7ed      	b.n	29e2 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    2a06:	4803      	ldr	r0, [pc, #12]	; (2a14 <_usb_ep0_on_tansfer_fail+0x48>)
    2a08:	4b03      	ldr	r3, [pc, #12]	; (2a18 <_usb_ep0_on_tansfer_fail+0x4c>)
    2a0a:	4798      	blx	r3
}
    2a0c:	e7e9      	b.n	29e2 <_usb_ep0_on_tansfer_fail+0x16>
    2a0e:	46c0      	nop			; (mov r8, r8)
    2a10:	200006ca 	.word	0x200006ca
    2a14:	20000884 	.word	0x20000884
    2a18:	0000372d 	.word	0x0000372d
    2a1c:	00002991 	.word	0x00002991

00002a20 <udd_ctrl_in_sent>:
{
    2a20:	b570      	push	{r4, r5, r6, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2a22:	4b20      	ldr	r3, [pc, #128]	; (2aa4 <udd_ctrl_in_sent+0x84>)
    2a24:	881b      	ldrh	r3, [r3, #0]
    2a26:	4a20      	ldr	r2, [pc, #128]	; (2aa8 <udd_ctrl_in_sent+0x88>)
    2a28:	8994      	ldrh	r4, [r2, #12]
    2a2a:	1ae4      	subs	r4, r4, r3
    2a2c:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
    2a2e:	2c00      	cmp	r4, #0
    2a30:	d118      	bne.n	2a64 <udd_ctrl_in_sent+0x44>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2a32:	4a1e      	ldr	r2, [pc, #120]	; (2aac <udd_ctrl_in_sent+0x8c>)
    2a34:	8811      	ldrh	r1, [r2, #0]
    2a36:	185b      	adds	r3, r3, r1
    2a38:	b29b      	uxth	r3, r3
    2a3a:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    2a3c:	4a1a      	ldr	r2, [pc, #104]	; (2aa8 <udd_ctrl_in_sent+0x88>)
    2a3e:	88d2      	ldrh	r2, [r2, #6]
    2a40:	429a      	cmp	r2, r3
    2a42:	d023      	beq.n	2a8c <udd_ctrl_in_sent+0x6c>
    2a44:	4b1a      	ldr	r3, [pc, #104]	; (2ab0 <udd_ctrl_in_sent+0x90>)
    2a46:	781b      	ldrb	r3, [r3, #0]
    2a48:	2b00      	cmp	r3, #0
    2a4a:	d11f      	bne.n	2a8c <udd_ctrl_in_sent+0x6c>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    2a4c:	4b16      	ldr	r3, [pc, #88]	; (2aa8 <udd_ctrl_in_sent+0x88>)
    2a4e:	695b      	ldr	r3, [r3, #20]
    2a50:	2b00      	cmp	r3, #0
    2a52:	d023      	beq.n	2a9c <udd_ctrl_in_sent+0x7c>
    2a54:	4798      	blx	r3
    2a56:	2800      	cmp	r0, #0
    2a58:	d020      	beq.n	2a9c <udd_ctrl_in_sent+0x7c>
			udd_ctrl_payload_nb_trans = 0;
    2a5a:	2200      	movs	r2, #0
    2a5c:	4b11      	ldr	r3, [pc, #68]	; (2aa4 <udd_ctrl_in_sent+0x84>)
    2a5e:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    2a60:	4b11      	ldr	r3, [pc, #68]	; (2aa8 <udd_ctrl_in_sent+0x88>)
    2a62:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    2a64:	2c3f      	cmp	r4, #63	; 0x3f
    2a66:	d919      	bls.n	2a9c <udd_ctrl_in_sent+0x7c>
		b_shortpacket = false;
    2a68:	2200      	movs	r2, #0
    2a6a:	4b11      	ldr	r3, [pc, #68]	; (2ab0 <udd_ctrl_in_sent+0x90>)
    2a6c:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    2a6e:	2440      	movs	r4, #64	; 0x40
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    2a70:	4d0c      	ldr	r5, [pc, #48]	; (2aa4 <udd_ctrl_in_sent+0x84>)
    2a72:	882b      	ldrh	r3, [r5, #0]
    2a74:	4a0c      	ldr	r2, [pc, #48]	; (2aa8 <udd_ctrl_in_sent+0x88>)
    2a76:	6892      	ldr	r2, [r2, #8]
    2a78:	18d2      	adds	r2, r2, r3
    2a7a:	0023      	movs	r3, r4
    2a7c:	2100      	movs	r1, #0
    2a7e:	480d      	ldr	r0, [pc, #52]	; (2ab4 <udd_ctrl_in_sent+0x94>)
    2a80:	4e0d      	ldr	r6, [pc, #52]	; (2ab8 <udd_ctrl_in_sent+0x98>)
    2a82:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
    2a84:	882b      	ldrh	r3, [r5, #0]
    2a86:	18e4      	adds	r4, r4, r3
    2a88:	802c      	strh	r4, [r5, #0]
}
    2a8a:	bd70      	pop	{r4, r5, r6, pc}
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2a8c:	2204      	movs	r2, #4
    2a8e:	4b0b      	ldr	r3, [pc, #44]	; (2abc <udd_ctrl_in_sent+0x9c>)
    2a90:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    2a92:	490b      	ldr	r1, [pc, #44]	; (2ac0 <udd_ctrl_in_sent+0xa0>)
    2a94:	4807      	ldr	r0, [pc, #28]	; (2ab4 <udd_ctrl_in_sent+0x94>)
    2a96:	4b0b      	ldr	r3, [pc, #44]	; (2ac4 <udd_ctrl_in_sent+0xa4>)
    2a98:	4798      	blx	r3
			return;
    2a9a:	e7f6      	b.n	2a8a <udd_ctrl_in_sent+0x6a>
		b_shortpacket = true;
    2a9c:	2201      	movs	r2, #1
    2a9e:	4b04      	ldr	r3, [pc, #16]	; (2ab0 <udd_ctrl_in_sent+0x90>)
    2aa0:	701a      	strb	r2, [r3, #0]
    2aa2:	e7e5      	b.n	2a70 <udd_ctrl_in_sent+0x50>
    2aa4:	200006c6 	.word	0x200006c6
    2aa8:	200009ec 	.word	0x200009ec
    2aac:	200006c8 	.word	0x200006c8
    2ab0:	200006c4 	.word	0x200006c4
    2ab4:	20000884 	.word	0x20000884
    2ab8:	000037d9 	.word	0x000037d9
    2abc:	200006ca 	.word	0x200006ca
    2ac0:	20000a04 	.word	0x20000a04
    2ac4:	0000387d 	.word	0x0000387d

00002ac8 <_usb_ep0_on_setup>:
{
    2ac8:	b510      	push	{r4, lr}
    2aca:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    2acc:	4b2c      	ldr	r3, [pc, #176]	; (2b80 <_usb_ep0_on_setup+0xb8>)
    2ace:	781b      	ldrb	r3, [r3, #0]
    2ad0:	2b00      	cmp	r3, #0
    2ad2:	d007      	beq.n	2ae4 <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
    2ad4:	4b2b      	ldr	r3, [pc, #172]	; (2b84 <_usb_ep0_on_setup+0xbc>)
    2ad6:	691b      	ldr	r3, [r3, #16]
    2ad8:	2b00      	cmp	r3, #0
    2ada:	d000      	beq.n	2ade <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    2adc:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    2ade:	2200      	movs	r2, #0
    2ae0:	4b27      	ldr	r3, [pc, #156]	; (2b80 <_usb_ep0_on_setup+0xb8>)
    2ae2:	701a      	strb	r2, [r3, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    2ae4:	8823      	ldrh	r3, [r4, #0]
    2ae6:	2b08      	cmp	r3, #8
    2ae8:	d002      	beq.n	2af0 <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
    2aea:	4b27      	ldr	r3, [pc, #156]	; (2b88 <_usb_ep0_on_setup+0xc0>)
    2aec:	4798      	blx	r3
}
    2aee:	bd10      	pop	{r4, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    2af0:	4a24      	ldr	r2, [pc, #144]	; (2b84 <_usb_ep0_on_setup+0xbc>)
    2af2:	4b26      	ldr	r3, [pc, #152]	; (2b8c <_usb_ep0_on_setup+0xc4>)
    2af4:	7819      	ldrb	r1, [r3, #0]
    2af6:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    2af8:	7859      	ldrb	r1, [r3, #1]
    2afa:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    2afc:	78d8      	ldrb	r0, [r3, #3]
    2afe:	0200      	lsls	r0, r0, #8
    2b00:	7899      	ldrb	r1, [r3, #2]
    2b02:	1809      	adds	r1, r1, r0
    2b04:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    2b06:	7958      	ldrb	r0, [r3, #5]
    2b08:	0200      	lsls	r0, r0, #8
    2b0a:	7919      	ldrb	r1, [r3, #4]
    2b0c:	1809      	adds	r1, r1, r0
    2b0e:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    2b10:	79d9      	ldrb	r1, [r3, #7]
    2b12:	0209      	lsls	r1, r1, #8
    2b14:	799b      	ldrb	r3, [r3, #6]
    2b16:	185b      	adds	r3, r3, r1
    2b18:	80d3      	strh	r3, [r2, #6]
		if (false == udc_process_setup()) {
    2b1a:	4b1d      	ldr	r3, [pc, #116]	; (2b90 <_usb_ep0_on_setup+0xc8>)
    2b1c:	4798      	blx	r3
    2b1e:	2800      	cmp	r0, #0
    2b20:	d016      	beq.n	2b50 <_usb_ep0_on_setup+0x88>
		} else if (Udd_setup_is_in()) {
    2b22:	4b18      	ldr	r3, [pc, #96]	; (2b84 <_usb_ep0_on_setup+0xbc>)
    2b24:	781b      	ldrb	r3, [r3, #0]
    2b26:	2b7f      	cmp	r3, #127	; 0x7f
    2b28:	d815      	bhi.n	2b56 <_usb_ep0_on_setup+0x8e>
			if(0 == udd_g_ctrlreq.req.wLength) {
    2b2a:	4b16      	ldr	r3, [pc, #88]	; (2b84 <_usb_ep0_on_setup+0xbc>)
    2b2c:	88db      	ldrh	r3, [r3, #6]
    2b2e:	2b00      	cmp	r3, #0
    2b30:	d022      	beq.n	2b78 <_usb_ep0_on_setup+0xb0>
				udd_ctrl_prev_payload_nb_trans = 0;
    2b32:	2300      	movs	r3, #0
    2b34:	4a17      	ldr	r2, [pc, #92]	; (2b94 <_usb_ep0_on_setup+0xcc>)
    2b36:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    2b38:	4a17      	ldr	r2, [pc, #92]	; (2b98 <_usb_ep0_on_setup+0xd0>)
    2b3a:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    2b3c:	2201      	movs	r2, #1
    2b3e:	4b10      	ldr	r3, [pc, #64]	; (2b80 <_usb_ep0_on_setup+0xb8>)
    2b40:	701a      	strb	r2, [r3, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2b42:	2340      	movs	r3, #64	; 0x40
    2b44:	4a11      	ldr	r2, [pc, #68]	; (2b8c <_usb_ep0_on_setup+0xc4>)
    2b46:	2100      	movs	r1, #0
    2b48:	4814      	ldr	r0, [pc, #80]	; (2b9c <_usb_ep0_on_setup+0xd4>)
    2b4a:	4c15      	ldr	r4, [pc, #84]	; (2ba0 <_usb_ep0_on_setup+0xd8>)
    2b4c:	47a0      	blx	r4
    2b4e:	e7ce      	b.n	2aee <_usb_ep0_on_setup+0x26>
			udd_ctrl_stall_data();
    2b50:	4b0d      	ldr	r3, [pc, #52]	; (2b88 <_usb_ep0_on_setup+0xc0>)
    2b52:	4798      	blx	r3
			return;
    2b54:	e7cb      	b.n	2aee <_usb_ep0_on_setup+0x26>
			udd_ctrl_prev_payload_nb_trans = 0;
    2b56:	2300      	movs	r3, #0
    2b58:	4a0e      	ldr	r2, [pc, #56]	; (2b94 <_usb_ep0_on_setup+0xcc>)
    2b5a:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    2b5c:	4a0e      	ldr	r2, [pc, #56]	; (2b98 <_usb_ep0_on_setup+0xd0>)
    2b5e:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    2b60:	2202      	movs	r2, #2
    2b62:	4b07      	ldr	r3, [pc, #28]	; (2b80 <_usb_ep0_on_setup+0xb8>)
    2b64:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2b66:	2340      	movs	r3, #64	; 0x40
    2b68:	4a08      	ldr	r2, [pc, #32]	; (2b8c <_usb_ep0_on_setup+0xc4>)
    2b6a:	2100      	movs	r1, #0
    2b6c:	480b      	ldr	r0, [pc, #44]	; (2b9c <_usb_ep0_on_setup+0xd4>)
    2b6e:	4c0c      	ldr	r4, [pc, #48]	; (2ba0 <_usb_ep0_on_setup+0xd8>)
    2b70:	47a0      	blx	r4
			udd_ctrl_in_sent();
    2b72:	4b0c      	ldr	r3, [pc, #48]	; (2ba4 <_usb_ep0_on_setup+0xdc>)
    2b74:	4798      	blx	r3
    2b76:	e7ba      	b.n	2aee <_usb_ep0_on_setup+0x26>
				udd_ctrl_send_zlp_in();
    2b78:	4b0b      	ldr	r3, [pc, #44]	; (2ba8 <_usb_ep0_on_setup+0xe0>)
    2b7a:	4798      	blx	r3
				return;
    2b7c:	e7b7      	b.n	2aee <_usb_ep0_on_setup+0x26>
    2b7e:	46c0      	nop			; (mov r8, r8)
    2b80:	200006ca 	.word	0x200006ca
    2b84:	200009ec 	.word	0x200009ec
    2b88:	000027c1 	.word	0x000027c1
    2b8c:	20000a04 	.word	0x20000a04
    2b90:	00000d69 	.word	0x00000d69
    2b94:	200006c8 	.word	0x200006c8
    2b98:	200006c6 	.word	0x200006c6
    2b9c:	20000884 	.word	0x20000884
    2ba0:	0000382d 	.word	0x0000382d
    2ba4:	00002a21 	.word	0x00002a21
    2ba8:	00002991 	.word	0x00002991

00002bac <_usb_on_sof_notify>:
{
    2bac:	b510      	push	{r4, lr}
	udc_sof_notify();
    2bae:	4b01      	ldr	r3, [pc, #4]	; (2bb4 <_usb_on_sof_notify+0x8>)
    2bb0:	4798      	blx	r3
}
    2bb2:	bd10      	pop	{r4, pc}
    2bb4:	00000d25 	.word	0x00000d25

00002bb8 <udd_ep_abort>:
{
    2bb8:	b510      	push	{r4, lr}
    2bba:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
    2bbc:	0001      	movs	r1, r0
    2bbe:	480a      	ldr	r0, [pc, #40]	; (2be8 <udd_ep_abort+0x30>)
    2bc0:	4b0a      	ldr	r3, [pc, #40]	; (2bec <udd_ep_abort+0x34>)
    2bc2:	4798      	blx	r3
	ptr_job = udd_ep_get_job(ep);
    2bc4:	0020      	movs	r0, r4
    2bc6:	4b0a      	ldr	r3, [pc, #40]	; (2bf0 <udd_ep_abort+0x38>)
    2bc8:	4798      	blx	r3
	if (!ptr_job->busy) {
    2bca:	7c83      	ldrb	r3, [r0, #18]
    2bcc:	07db      	lsls	r3, r3, #31
    2bce:	d50a      	bpl.n	2be6 <udd_ep_abort+0x2e>
	ptr_job->busy = false;
    2bd0:	7c83      	ldrb	r3, [r0, #18]
    2bd2:	2201      	movs	r2, #1
    2bd4:	4393      	bics	r3, r2
    2bd6:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    2bd8:	6803      	ldr	r3, [r0, #0]
    2bda:	2b00      	cmp	r3, #0
    2bdc:	d003      	beq.n	2be6 <udd_ep_abort+0x2e>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    2bde:	68c1      	ldr	r1, [r0, #12]
    2be0:	0022      	movs	r2, r4
    2be2:	2001      	movs	r0, #1
    2be4:	4798      	blx	r3
}
    2be6:	bd10      	pop	{r4, pc}
    2be8:	20000884 	.word	0x20000884
    2bec:	000036cd 	.word	0x000036cd
    2bf0:	000025e9 	.word	0x000025e9

00002bf4 <udd_is_high_speed>:
}
    2bf4:	2000      	movs	r0, #0
    2bf6:	4770      	bx	lr

00002bf8 <udd_get_frame_number>:
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    2bf8:	4b02      	ldr	r3, [pc, #8]	; (2c04 <udd_get_frame_number+0xc>)
    2bfa:	681b      	ldr	r3, [r3, #0]
    2bfc:	8a18      	ldrh	r0, [r3, #16]
    2bfe:	0480      	lsls	r0, r0, #18
    2c00:	0d40      	lsrs	r0, r0, #21
}
    2c02:	4770      	bx	lr
    2c04:	20000884 	.word	0x20000884

00002c08 <udd_get_micro_frame_number>:
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.reg));
    2c08:	4b02      	ldr	r3, [pc, #8]	; (2c14 <udd_get_micro_frame_number+0xc>)
    2c0a:	681b      	ldr	r3, [r3, #0]
    2c0c:	8a18      	ldrh	r0, [r3, #16]
    2c0e:	b280      	uxth	r0, r0
}
    2c10:	4770      	bx	lr
    2c12:	46c0      	nop			; (mov r8, r8)
    2c14:	20000884 	.word	0x20000884

00002c18 <udd_ep_free>:
{
    2c18:	b570      	push	{r4, r5, r6, lr}
    2c1a:	b082      	sub	sp, #8
    2c1c:	0004      	movs	r4, r0
	usb_device_endpoint_get_config_defaults(&config_ep);
    2c1e:	ad01      	add	r5, sp, #4
    2c20:	0028      	movs	r0, r5
    2c22:	4b0d      	ldr	r3, [pc, #52]	; (2c58 <udd_ep_free+0x40>)
    2c24:	4798      	blx	r3
	udd_ep_abort(ep);
    2c26:	0020      	movs	r0, r4
    2c28:	4b0c      	ldr	r3, [pc, #48]	; (2c5c <udd_ep_free+0x44>)
    2c2a:	4798      	blx	r3
	config_ep.ep_address = ep;
    2c2c:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    2c2e:	2300      	movs	r3, #0
    2c30:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    2c32:	4e0b      	ldr	r6, [pc, #44]	; (2c60 <udd_ep_free+0x48>)
    2c34:	0029      	movs	r1, r5
    2c36:	0030      	movs	r0, r6
    2c38:	4b0a      	ldr	r3, [pc, #40]	; (2c64 <udd_ep_free+0x4c>)
    2c3a:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2c3c:	210f      	movs	r1, #15
    2c3e:	4021      	ands	r1, r4
    2c40:	2200      	movs	r2, #0
    2c42:	0030      	movs	r0, r6
    2c44:	4b08      	ldr	r3, [pc, #32]	; (2c68 <udd_ep_free+0x50>)
    2c46:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2c48:	2200      	movs	r2, #0
    2c4a:	0021      	movs	r1, r4
    2c4c:	0030      	movs	r0, r6
    2c4e:	4b07      	ldr	r3, [pc, #28]	; (2c6c <udd_ep_free+0x54>)
    2c50:	4798      	blx	r3
}
    2c52:	b002      	add	sp, #8
    2c54:	bd70      	pop	{r4, r5, r6, pc}
    2c56:	46c0      	nop			; (mov r8, r8)
    2c58:	00003479 	.word	0x00003479
    2c5c:	00002bb9 	.word	0x00002bb9
    2c60:	20000884 	.word	0x20000884
    2c64:	00003489 	.word	0x00003489
    2c68:	000032b1 	.word	0x000032b1
    2c6c:	000033a9 	.word	0x000033a9

00002c70 <udd_ep_alloc>:
{
    2c70:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c72:	b083      	sub	sp, #12
    2c74:	0005      	movs	r5, r0
    2c76:	000f      	movs	r7, r1
    2c78:	0014      	movs	r4, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    2c7a:	ae01      	add	r6, sp, #4
    2c7c:	0030      	movs	r0, r6
    2c7e:	4b36      	ldr	r3, [pc, #216]	; (2d58 <udd_ep_alloc+0xe8>)
    2c80:	4798      	blx	r3
	config_ep.ep_address = ep;
    2c82:	7035      	strb	r5, [r6, #0]
	if(MaxEndpointSize <= 8) {
    2c84:	2c08      	cmp	r4, #8
    2c86:	d813      	bhi.n	2cb0 <udd_ep_alloc+0x40>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    2c88:	2200      	movs	r2, #0
    2c8a:	ab01      	add	r3, sp, #4
    2c8c:	705a      	strb	r2, [r3, #1]
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    2c8e:	0028      	movs	r0, r5
    2c90:	4b32      	ldr	r3, [pc, #200]	; (2d5c <udd_ep_alloc+0xec>)
    2c92:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    2c94:	8204      	strh	r4, [r0, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    2c96:	2103      	movs	r1, #3
    2c98:	4039      	ands	r1, r7
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    2c9a:	2901      	cmp	r1, #1
    2c9c:	d038      	beq.n	2d10 <udd_ep_alloc+0xa0>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    2c9e:	2902      	cmp	r1, #2
    2ca0:	d043      	beq.n	2d2a <udd_ep_alloc+0xba>
		return false;
    2ca2:	2300      	movs	r3, #0
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    2ca4:	2903      	cmp	r1, #3
    2ca6:	d13d      	bne.n	2d24 <udd_ep_alloc+0xb4>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    2ca8:	2204      	movs	r2, #4
    2caa:	ab01      	add	r3, sp, #4
    2cac:	70da      	strb	r2, [r3, #3]
    2cae:	e032      	b.n	2d16 <udd_ep_alloc+0xa6>
	} else if(MaxEndpointSize <= 16) {
    2cb0:	2c10      	cmp	r4, #16
    2cb2:	d803      	bhi.n	2cbc <udd_ep_alloc+0x4c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    2cb4:	2201      	movs	r2, #1
    2cb6:	ab01      	add	r3, sp, #4
    2cb8:	705a      	strb	r2, [r3, #1]
    2cba:	e7e8      	b.n	2c8e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 32) {
    2cbc:	2c20      	cmp	r4, #32
    2cbe:	d803      	bhi.n	2cc8 <udd_ep_alloc+0x58>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    2cc0:	2202      	movs	r2, #2
    2cc2:	ab01      	add	r3, sp, #4
    2cc4:	705a      	strb	r2, [r3, #1]
    2cc6:	e7e2      	b.n	2c8e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 64) {
    2cc8:	2c40      	cmp	r4, #64	; 0x40
    2cca:	d803      	bhi.n	2cd4 <udd_ep_alloc+0x64>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    2ccc:	2203      	movs	r2, #3
    2cce:	ab01      	add	r3, sp, #4
    2cd0:	705a      	strb	r2, [r3, #1]
    2cd2:	e7dc      	b.n	2c8e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 128) {
    2cd4:	2c80      	cmp	r4, #128	; 0x80
    2cd6:	d803      	bhi.n	2ce0 <udd_ep_alloc+0x70>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    2cd8:	2204      	movs	r2, #4
    2cda:	ab01      	add	r3, sp, #4
    2cdc:	705a      	strb	r2, [r3, #1]
    2cde:	e7d6      	b.n	2c8e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 256) {
    2ce0:	2380      	movs	r3, #128	; 0x80
    2ce2:	005b      	lsls	r3, r3, #1
    2ce4:	429c      	cmp	r4, r3
    2ce6:	d803      	bhi.n	2cf0 <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    2ce8:	2205      	movs	r2, #5
    2cea:	ab01      	add	r3, sp, #4
    2cec:	705a      	strb	r2, [r3, #1]
    2cee:	e7ce      	b.n	2c8e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 512) {
    2cf0:	2380      	movs	r3, #128	; 0x80
    2cf2:	009b      	lsls	r3, r3, #2
    2cf4:	429c      	cmp	r4, r3
    2cf6:	d803      	bhi.n	2d00 <udd_ep_alloc+0x90>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    2cf8:	2206      	movs	r2, #6
    2cfa:	ab01      	add	r3, sp, #4
    2cfc:	705a      	strb	r2, [r3, #1]
    2cfe:	e7c6      	b.n	2c8e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 1023) {
    2d00:	4a17      	ldr	r2, [pc, #92]	; (2d60 <udd_ep_alloc+0xf0>)
		return false;
    2d02:	2300      	movs	r3, #0
	} else if(MaxEndpointSize <= 1023) {
    2d04:	4294      	cmp	r4, r2
    2d06:	d80d      	bhi.n	2d24 <udd_ep_alloc+0xb4>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    2d08:	2207      	movs	r2, #7
    2d0a:	ab01      	add	r3, sp, #4
    2d0c:	705a      	strb	r2, [r3, #1]
    2d0e:	e7be      	b.n	2c8e <udd_ep_alloc+0x1e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    2d10:	2202      	movs	r2, #2
    2d12:	ab01      	add	r3, sp, #4
    2d14:	70da      	strb	r2, [r3, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    2d16:	a901      	add	r1, sp, #4
    2d18:	4812      	ldr	r0, [pc, #72]	; (2d64 <udd_ep_alloc+0xf4>)
    2d1a:	4b13      	ldr	r3, [pc, #76]	; (2d68 <udd_ep_alloc+0xf8>)
    2d1c:	4798      	blx	r3
		return false;
    2d1e:	2300      	movs	r3, #0
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    2d20:	2800      	cmp	r0, #0
    2d22:	d006      	beq.n	2d32 <udd_ep_alloc+0xc2>
}
    2d24:	0018      	movs	r0, r3
    2d26:	b003      	add	sp, #12
    2d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    2d2a:	2203      	movs	r2, #3
    2d2c:	ab01      	add	r3, sp, #4
    2d2e:	70da      	strb	r2, [r3, #3]
    2d30:	e7f1      	b.n	2d16 <udd_ep_alloc+0xa6>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    2d32:	210f      	movs	r1, #15
    2d34:	4029      	ands	r1, r5
    2d36:	4c0b      	ldr	r4, [pc, #44]	; (2d64 <udd_ep_alloc+0xf4>)
    2d38:	4b0c      	ldr	r3, [pc, #48]	; (2d6c <udd_ep_alloc+0xfc>)
    2d3a:	2200      	movs	r2, #0
    2d3c:	0020      	movs	r0, r4
    2d3e:	4e0c      	ldr	r6, [pc, #48]	; (2d70 <udd_ep_alloc+0x100>)
    2d40:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2d42:	2200      	movs	r2, #0
    2d44:	0029      	movs	r1, r5
    2d46:	0020      	movs	r0, r4
    2d48:	4e0a      	ldr	r6, [pc, #40]	; (2d74 <udd_ep_alloc+0x104>)
    2d4a:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    2d4c:	2201      	movs	r2, #1
    2d4e:	0029      	movs	r1, r5
    2d50:	0020      	movs	r0, r4
    2d52:	47b0      	blx	r6
	return true;
    2d54:	2301      	movs	r3, #1
    2d56:	e7e5      	b.n	2d24 <udd_ep_alloc+0xb4>
    2d58:	00003479 	.word	0x00003479
    2d5c:	000025e9 	.word	0x000025e9
    2d60:	000003ff 	.word	0x000003ff
    2d64:	20000884 	.word	0x20000884
    2d68:	00003489 	.word	0x00003489
    2d6c:	0000260d 	.word	0x0000260d
    2d70:	00003289 	.word	0x00003289
    2d74:	000032d9 	.word	0x000032d9

00002d78 <udd_ep_is_halted>:
{
    2d78:	b510      	push	{r4, lr}
    2d7a:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    2d7c:	4801      	ldr	r0, [pc, #4]	; (2d84 <udd_ep_is_halted+0xc>)
    2d7e:	4b02      	ldr	r3, [pc, #8]	; (2d88 <udd_ep_is_halted+0x10>)
    2d80:	4798      	blx	r3
}
    2d82:	bd10      	pop	{r4, pc}
    2d84:	20000884 	.word	0x20000884
    2d88:	00003703 	.word	0x00003703

00002d8c <udd_ep_set_halt>:
{
    2d8c:	b510      	push	{r4, lr}
    2d8e:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    2d90:	230f      	movs	r3, #15
    2d92:	4003      	ands	r3, r0
		return false;
    2d94:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    2d96:	2b03      	cmp	r3, #3
    2d98:	d900      	bls.n	2d9c <udd_ep_set_halt+0x10>
}
    2d9a:	bd10      	pop	{r4, pc}
	usb_device_endpoint_set_halt(&usb_device, ep);
    2d9c:	0021      	movs	r1, r4
    2d9e:	4804      	ldr	r0, [pc, #16]	; (2db0 <udd_ep_set_halt+0x24>)
    2da0:	4b04      	ldr	r3, [pc, #16]	; (2db4 <udd_ep_set_halt+0x28>)
    2da2:	4798      	blx	r3
	udd_ep_abort(ep);
    2da4:	0020      	movs	r0, r4
    2da6:	4b04      	ldr	r3, [pc, #16]	; (2db8 <udd_ep_set_halt+0x2c>)
    2da8:	4798      	blx	r3
	return true;
    2daa:	2001      	movs	r0, #1
    2dac:	e7f5      	b.n	2d9a <udd_ep_set_halt+0xe>
    2dae:	46c0      	nop			; (mov r8, r8)
    2db0:	20000884 	.word	0x20000884
    2db4:	0000372d 	.word	0x0000372d
    2db8:	00002bb9 	.word	0x00002bb9

00002dbc <_usb_ep0_on_tansfer_ok>:
{
    2dbc:	b570      	push	{r4, r5, r6, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    2dbe:	4b34      	ldr	r3, [pc, #208]	; (2e90 <_usb_ep0_on_tansfer_ok+0xd4>)
    2dc0:	781b      	ldrb	r3, [r3, #0]
    2dc2:	2b01      	cmp	r3, #1
    2dc4:	d00a      	beq.n	2ddc <_usb_ep0_on_tansfer_ok+0x20>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    2dc6:	2b02      	cmp	r3, #2
    2dc8:	d05f      	beq.n	2e8a <_usb_ep0_on_tansfer_ok+0xce>
			if (NULL != udd_g_ctrlreq.callback) {
    2dca:	4b32      	ldr	r3, [pc, #200]	; (2e94 <_usb_ep0_on_tansfer_ok+0xd8>)
    2dcc:	691b      	ldr	r3, [r3, #16]
    2dce:	2b00      	cmp	r3, #0
    2dd0:	d000      	beq.n	2dd4 <_usb_ep0_on_tansfer_ok+0x18>
				udd_g_ctrlreq.callback();
    2dd2:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    2dd4:	2200      	movs	r2, #0
    2dd6:	4b2e      	ldr	r3, [pc, #184]	; (2e90 <_usb_ep0_on_tansfer_ok+0xd4>)
    2dd8:	701a      	strb	r2, [r3, #0]
}
    2dda:	bd70      	pop	{r4, r5, r6, pc}
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    2ddc:	880d      	ldrh	r5, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2dde:	4b2d      	ldr	r3, [pc, #180]	; (2e94 <_usb_ep0_on_tansfer_ok+0xd8>)
    2de0:	899b      	ldrh	r3, [r3, #12]
    2de2:	4a2d      	ldr	r2, [pc, #180]	; (2e98 <_usb_ep0_on_tansfer_ok+0xdc>)
    2de4:	8814      	ldrh	r4, [r2, #0]
    2de6:	1962      	adds	r2, r4, r5
    2de8:	4293      	cmp	r3, r2
    2dea:	da01      	bge.n	2df0 <_usb_ep0_on_tansfer_ok+0x34>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2dec:	1b1d      	subs	r5, r3, r4
    2dee:	b2ad      	uxth	r5, r5
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    2df0:	4b28      	ldr	r3, [pc, #160]	; (2e94 <_usb_ep0_on_tansfer_ok+0xd8>)
    2df2:	6898      	ldr	r0, [r3, #8]
    2df4:	1900      	adds	r0, r0, r4
    2df6:	002a      	movs	r2, r5
    2df8:	4928      	ldr	r1, [pc, #160]	; (2e9c <_usb_ep0_on_tansfer_ok+0xe0>)
    2dfa:	4b29      	ldr	r3, [pc, #164]	; (2ea0 <_usb_ep0_on_tansfer_ok+0xe4>)
    2dfc:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    2dfe:	1964      	adds	r4, r4, r5
    2e00:	b2a4      	uxth	r4, r4
    2e02:	4b25      	ldr	r3, [pc, #148]	; (2e98 <_usb_ep0_on_tansfer_ok+0xdc>)
    2e04:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    2e06:	2d40      	cmp	r5, #64	; 0x40
    2e08:	d00a      	beq.n	2e20 <_usb_ep0_on_tansfer_ok+0x64>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2e0a:	4b22      	ldr	r3, [pc, #136]	; (2e94 <_usb_ep0_on_tansfer_ok+0xd8>)
    2e0c:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2e0e:	695b      	ldr	r3, [r3, #20]
    2e10:	2b00      	cmp	r3, #0
    2e12:	d002      	beq.n	2e1a <_usb_ep0_on_tansfer_ok+0x5e>
			if (!udd_g_ctrlreq.over_under_run()) {
    2e14:	4798      	blx	r3
    2e16:	2800      	cmp	r0, #0
    2e18:	d014      	beq.n	2e44 <_usb_ep0_on_tansfer_ok+0x88>
		udd_ctrl_send_zlp_in();
    2e1a:	4b22      	ldr	r3, [pc, #136]	; (2ea4 <_usb_ep0_on_tansfer_ok+0xe8>)
    2e1c:	4798      	blx	r3
    2e1e:	e7dc      	b.n	2dda <_usb_ep0_on_tansfer_ok+0x1e>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    2e20:	4b1c      	ldr	r3, [pc, #112]	; (2e94 <_usb_ep0_on_tansfer_ok+0xd8>)
    2e22:	88da      	ldrh	r2, [r3, #6]
    2e24:	4b20      	ldr	r3, [pc, #128]	; (2ea8 <_usb_ep0_on_tansfer_ok+0xec>)
    2e26:	881b      	ldrh	r3, [r3, #0]
    2e28:	191b      	adds	r3, r3, r4
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    2e2a:	429a      	cmp	r2, r3
    2e2c:	dded      	ble.n	2e0a <_usb_ep0_on_tansfer_ok+0x4e>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2e2e:	4b19      	ldr	r3, [pc, #100]	; (2e94 <_usb_ep0_on_tansfer_ok+0xd8>)
    2e30:	899b      	ldrh	r3, [r3, #12]
    2e32:	42a3      	cmp	r3, r4
    2e34:	d00c      	beq.n	2e50 <_usb_ep0_on_tansfer_ok+0x94>
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2e36:	2340      	movs	r3, #64	; 0x40
    2e38:	4a18      	ldr	r2, [pc, #96]	; (2e9c <_usb_ep0_on_tansfer_ok+0xe0>)
    2e3a:	2100      	movs	r1, #0
    2e3c:	481b      	ldr	r0, [pc, #108]	; (2eac <_usb_ep0_on_tansfer_ok+0xf0>)
    2e3e:	4c1c      	ldr	r4, [pc, #112]	; (2eb0 <_usb_ep0_on_tansfer_ok+0xf4>)
    2e40:	47a0      	blx	r4
    2e42:	e7ca      	b.n	2dda <_usb_ep0_on_tansfer_ok+0x1e>
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2e44:	2205      	movs	r2, #5
    2e46:	4b12      	ldr	r3, [pc, #72]	; (2e90 <_usb_ep0_on_tansfer_ok+0xd4>)
    2e48:	701a      	strb	r2, [r3, #0]
				udd_ep_set_halt(0);
    2e4a:	4b1a      	ldr	r3, [pc, #104]	; (2eb4 <_usb_ep0_on_tansfer_ok+0xf8>)
    2e4c:	4798      	blx	r3
    2e4e:	e7c4      	b.n	2dda <_usb_ep0_on_tansfer_ok+0x1e>
		if (!udd_g_ctrlreq.over_under_run) {
    2e50:	4b10      	ldr	r3, [pc, #64]	; (2e94 <_usb_ep0_on_tansfer_ok+0xd8>)
    2e52:	695b      	ldr	r3, [r3, #20]
    2e54:	2b00      	cmp	r3, #0
    2e56:	d00b      	beq.n	2e70 <_usb_ep0_on_tansfer_ok+0xb4>
		if (!udd_g_ctrlreq.over_under_run()) {
    2e58:	4798      	blx	r3
    2e5a:	2800      	cmp	r0, #0
    2e5c:	d00f      	beq.n	2e7e <_usb_ep0_on_tansfer_ok+0xc2>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2e5e:	4912      	ldr	r1, [pc, #72]	; (2ea8 <_usb_ep0_on_tansfer_ok+0xec>)
    2e60:	4a0d      	ldr	r2, [pc, #52]	; (2e98 <_usb_ep0_on_tansfer_ok+0xdc>)
    2e62:	880b      	ldrh	r3, [r1, #0]
    2e64:	8810      	ldrh	r0, [r2, #0]
    2e66:	181b      	adds	r3, r3, r0
    2e68:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
    2e6a:	2300      	movs	r3, #0
    2e6c:	8013      	strh	r3, [r2, #0]
    2e6e:	e7e2      	b.n	2e36 <_usb_ep0_on_tansfer_ok+0x7a>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2e70:	2205      	movs	r2, #5
    2e72:	4b07      	ldr	r3, [pc, #28]	; (2e90 <_usb_ep0_on_tansfer_ok+0xd4>)
    2e74:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    2e76:	2000      	movs	r0, #0
    2e78:	4b0e      	ldr	r3, [pc, #56]	; (2eb4 <_usb_ep0_on_tansfer_ok+0xf8>)
    2e7a:	4798      	blx	r3
    2e7c:	e7ad      	b.n	2dda <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2e7e:	2205      	movs	r2, #5
    2e80:	4b03      	ldr	r3, [pc, #12]	; (2e90 <_usb_ep0_on_tansfer_ok+0xd4>)
    2e82:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    2e84:	4b0b      	ldr	r3, [pc, #44]	; (2eb4 <_usb_ep0_on_tansfer_ok+0xf8>)
    2e86:	4798      	blx	r3
    2e88:	e7a7      	b.n	2dda <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ctrl_in_sent();
    2e8a:	4b0b      	ldr	r3, [pc, #44]	; (2eb8 <_usb_ep0_on_tansfer_ok+0xfc>)
    2e8c:	4798      	blx	r3
    2e8e:	e7a4      	b.n	2dda <_usb_ep0_on_tansfer_ok+0x1e>
    2e90:	200006ca 	.word	0x200006ca
    2e94:	200009ec 	.word	0x200009ec
    2e98:	200006c6 	.word	0x200006c6
    2e9c:	20000a04 	.word	0x20000a04
    2ea0:	0000508d 	.word	0x0000508d
    2ea4:	00002991 	.word	0x00002991
    2ea8:	200006c8 	.word	0x200006c8
    2eac:	20000884 	.word	0x20000884
    2eb0:	0000382d 	.word	0x0000382d
    2eb4:	00002d8d 	.word	0x00002d8d
    2eb8:	00002a21 	.word	0x00002a21

00002ebc <udd_ep_clear_halt>:
{
    2ebc:	b570      	push	{r4, r5, r6, lr}
    2ebe:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    2ec0:	230f      	movs	r3, #15
    2ec2:	4003      	ands	r3, r0
		return false;
    2ec4:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    2ec6:	2b03      	cmp	r3, #3
    2ec8:	d900      	bls.n	2ecc <udd_ep_clear_halt+0x10>
}
    2eca:	bd70      	pop	{r4, r5, r6, pc}
	ptr_job = udd_ep_get_job(ep);
    2ecc:	0020      	movs	r0, r4
    2ece:	4b09      	ldr	r3, [pc, #36]	; (2ef4 <udd_ep_clear_halt+0x38>)
    2ed0:	4798      	blx	r3
    2ed2:	0005      	movs	r5, r0
	usb_device_endpoint_clear_halt(&usb_device, ep);
    2ed4:	0021      	movs	r1, r4
    2ed6:	4808      	ldr	r0, [pc, #32]	; (2ef8 <udd_ep_clear_halt+0x3c>)
    2ed8:	4b08      	ldr	r3, [pc, #32]	; (2efc <udd_ep_clear_halt+0x40>)
    2eda:	4798      	blx	r3
	if (ptr_job->busy == true) {
    2edc:	7cab      	ldrb	r3, [r5, #18]
	return true;
    2ede:	2001      	movs	r0, #1
	if (ptr_job->busy == true) {
    2ee0:	07db      	lsls	r3, r3, #31
    2ee2:	d5f2      	bpl.n	2eca <udd_ep_clear_halt+0xe>
		ptr_job->busy = false;
    2ee4:	7cab      	ldrb	r3, [r5, #18]
    2ee6:	2201      	movs	r2, #1
    2ee8:	4393      	bics	r3, r2
    2eea:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    2eec:	682b      	ldr	r3, [r5, #0]
    2eee:	4798      	blx	r3
	return true;
    2ef0:	2001      	movs	r0, #1
    2ef2:	e7ea      	b.n	2eca <udd_ep_clear_halt+0xe>
    2ef4:	000025e9 	.word	0x000025e9
    2ef8:	20000884 	.word	0x20000884
    2efc:	00003753 	.word	0x00003753

00002f00 <udd_ep_run>:
{
    2f00:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f02:	b087      	sub	sp, #28
    2f04:	0005      	movs	r5, r0
    2f06:	9103      	str	r1, [sp, #12]
    2f08:	9202      	str	r2, [sp, #8]
    2f0a:	9301      	str	r3, [sp, #4]
	ep_num = ep & USB_EP_ADDR_MASK;
    2f0c:	260f      	movs	r6, #15
    2f0e:	4006      	ands	r6, r0
		return false;
    2f10:	2400      	movs	r4, #0
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    2f12:	2e03      	cmp	r6, #3
    2f14:	d902      	bls.n	2f1c <udd_ep_run+0x1c>
}
    2f16:	0020      	movs	r0, r4
    2f18:	b007      	add	sp, #28
    2f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    2f1c:	4b64      	ldr	r3, [pc, #400]	; (30b0 <udd_ep_run+0x1b0>)
    2f1e:	4798      	blx	r3
    2f20:	1e04      	subs	r4, r0, #0
    2f22:	d000      	beq.n	2f26 <udd_ep_run+0x26>
    2f24:	e0bd      	b.n	30a2 <udd_ep_run+0x1a2>
	ptr_job = udd_ep_get_job(ep);
    2f26:	0028      	movs	r0, r5
    2f28:	4b62      	ldr	r3, [pc, #392]	; (30b4 <udd_ep_run+0x1b4>)
    2f2a:	4798      	blx	r3
    2f2c:	0007      	movs	r7, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2f2e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2f32:	425a      	negs	r2, r3
    2f34:	4153      	adcs	r3, r2
    2f36:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    2f38:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2f3a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2f3e:	2200      	movs	r2, #0
    2f40:	4b5d      	ldr	r3, [pc, #372]	; (30b8 <udd_ep_run+0x1b8>)
    2f42:	701a      	strb	r2, [r3, #0]
	return flags;
    2f44:	9a05      	ldr	r2, [sp, #20]
	if (ptr_job->busy == true) {
    2f46:	7c83      	ldrb	r3, [r0, #18]
    2f48:	07db      	lsls	r3, r3, #31
    2f4a:	d508      	bpl.n	2f5e <udd_ep_run+0x5e>
	if (cpu_irq_is_enabled_flags(flags))
    2f4c:	2a00      	cmp	r2, #0
    2f4e:	d0e2      	beq.n	2f16 <udd_ep_run+0x16>
		cpu_irq_enable();
    2f50:	2201      	movs	r2, #1
    2f52:	4b59      	ldr	r3, [pc, #356]	; (30b8 <udd_ep_run+0x1b8>)
    2f54:	701a      	strb	r2, [r3, #0]
    2f56:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2f5a:	b662      	cpsie	i
    2f5c:	e7db      	b.n	2f16 <udd_ep_run+0x16>
	ptr_job->busy = true;
    2f5e:	7c83      	ldrb	r3, [r0, #18]
    2f60:	2101      	movs	r1, #1
    2f62:	430b      	orrs	r3, r1
    2f64:	7483      	strb	r3, [r0, #18]
	if (cpu_irq_is_enabled_flags(flags))
    2f66:	2a00      	cmp	r2, #0
    2f68:	d005      	beq.n	2f76 <udd_ep_run+0x76>
		cpu_irq_enable();
    2f6a:	2201      	movs	r2, #1
    2f6c:	4b52      	ldr	r3, [pc, #328]	; (30b8 <udd_ep_run+0x1b8>)
    2f6e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    2f70:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2f74:	b662      	cpsie	i
	ptr_job->buf = buf;
    2f76:	9b02      	ldr	r3, [sp, #8]
    2f78:	607b      	str	r3, [r7, #4]
	ptr_job->buf_size = buf_size;
    2f7a:	9b01      	ldr	r3, [sp, #4]
    2f7c:	60bb      	str	r3, [r7, #8]
	ptr_job->nb_trans = 0;
    2f7e:	2300      	movs	r3, #0
    2f80:	60fb      	str	r3, [r7, #12]
	ptr_job->call_trans = callback;
    2f82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2f84:	603b      	str	r3, [r7, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    2f86:	2301      	movs	r3, #1
    2f88:	9a03      	ldr	r2, [sp, #12]
    2f8a:	4013      	ands	r3, r2
    2f8c:	005a      	lsls	r2, r3, #1
    2f8e:	7cbb      	ldrb	r3, [r7, #18]
    2f90:	2102      	movs	r1, #2
    2f92:	438b      	bics	r3, r1
	ptr_job->b_use_out_cache_buffer = false;
    2f94:	4313      	orrs	r3, r2
    2f96:	2204      	movs	r2, #4
    2f98:	4393      	bics	r3, r2
    2f9a:	74bb      	strb	r3, [r7, #18]
	if (ep & USB_EP_DIR_IN) {
    2f9c:	b26b      	sxtb	r3, r5
    2f9e:	2b00      	cmp	r3, #0
    2fa0:	db20      	blt.n	2fe4 <udd_ep_run+0xe4>
		if (0 != ptr_job->buf_size) {
    2fa2:	9b01      	ldr	r3, [sp, #4]
    2fa4:	2b00      	cmp	r3, #0
    2fa6:	d06f      	beq.n	3088 <udd_ep_run+0x188>
			next_trans = ptr_job->buf_size;
    2fa8:	b29c      	uxth	r4, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2faa:	4b44      	ldr	r3, [pc, #272]	; (30bc <udd_ep_run+0x1bc>)
    2fac:	429c      	cmp	r4, r3
    2fae:	d95a      	bls.n	3066 <udd_ep_run+0x166>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    2fb0:	8a39      	ldrh	r1, [r7, #16]
    2fb2:	001c      	movs	r4, r3
    2fb4:	0018      	movs	r0, r3
    2fb6:	4b42      	ldr	r3, [pc, #264]	; (30c0 <udd_ep_run+0x1c0>)
    2fb8:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    2fba:	1a63      	subs	r3, r4, r1
    2fbc:	b29a      	uxth	r2, r3
			if (next_trans < ptr_job->ep_size) {
    2fbe:	8a3b      	ldrh	r3, [r7, #16]
    2fc0:	429a      	cmp	r2, r3
    2fc2:	d257      	bcs.n	3074 <udd_ep_run+0x174>
				ptr_job->b_use_out_cache_buffer = true;
    2fc4:	7cba      	ldrb	r2, [r7, #18]
    2fc6:	2104      	movs	r1, #4
    2fc8:	430a      	orrs	r2, r1
    2fca:	74ba      	strb	r2, [r7, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    2fcc:	1e72      	subs	r2, r6, #1
    2fce:	0192      	lsls	r2, r2, #6
    2fd0:	493c      	ldr	r1, [pc, #240]	; (30c4 <udd_ep_run+0x1c4>)
    2fd2:	1852      	adds	r2, r2, r1
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    2fd4:	0031      	movs	r1, r6
    2fd6:	483c      	ldr	r0, [pc, #240]	; (30c8 <udd_ep_run+0x1c8>)
    2fd8:	4c3c      	ldr	r4, [pc, #240]	; (30cc <udd_ep_run+0x1cc>)
    2fda:	47a0      	blx	r4
				return (STATUS_OK ==
    2fdc:	4244      	negs	r4, r0
    2fde:	4144      	adcs	r4, r0
    2fe0:	b2e4      	uxtb	r4, r4
    2fe2:	e798      	b.n	2f16 <udd_ep_run+0x16>
		if (0 != ptr_job->buf_size) {
    2fe4:	9b01      	ldr	r3, [sp, #4]
    2fe6:	2b00      	cmp	r3, #0
    2fe8:	d027      	beq.n	303a <udd_ep_run+0x13a>
			next_trans = ptr_job->buf_size;
    2fea:	b29d      	uxth	r5, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2fec:	4b33      	ldr	r3, [pc, #204]	; (30bc <udd_ep_run+0x1bc>)
    2fee:	429d      	cmp	r5, r3
    2ff0:	d906      	bls.n	3000 <udd_ep_run+0x100>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    2ff2:	8a39      	ldrh	r1, [r7, #16]
    2ff4:	001d      	movs	r5, r3
    2ff6:	0018      	movs	r0, r3
    2ff8:	4b31      	ldr	r3, [pc, #196]	; (30c0 <udd_ep_run+0x1c0>)
    2ffa:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    2ffc:	1a6b      	subs	r3, r5, r1
    2ffe:	b29d      	uxth	r5, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    3000:	7cbb      	ldrb	r3, [r7, #18]
    3002:	079b      	lsls	r3, r3, #30
    3004:	d507      	bpl.n	3016 <udd_ep_run+0x116>
					(0 == (next_trans % ptr_job->ep_size));
    3006:	8a39      	ldrh	r1, [r7, #16]
    3008:	0028      	movs	r0, r5
    300a:	4b31      	ldr	r3, [pc, #196]	; (30d0 <udd_ep_run+0x1d0>)
    300c:	4798      	blx	r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    300e:	b289      	uxth	r1, r1
    3010:	424c      	negs	r4, r1
    3012:	414c      	adcs	r4, r1
    3014:	b2e4      	uxtb	r4, r4
    3016:	2001      	movs	r0, #1
    3018:	4020      	ands	r0, r4
    301a:	0040      	lsls	r0, r0, #1
    301c:	7cbc      	ldrb	r4, [r7, #18]
    301e:	2302      	movs	r3, #2
    3020:	439c      	bics	r4, r3
    3022:	4304      	orrs	r4, r0
    3024:	74bc      	strb	r4, [r7, #18]
				usb_device_endpoint_write_buffer_job(&usb_device,
    3026:	002b      	movs	r3, r5
    3028:	9a02      	ldr	r2, [sp, #8]
    302a:	0031      	movs	r1, r6
    302c:	4826      	ldr	r0, [pc, #152]	; (30c8 <udd_ep_run+0x1c8>)
    302e:	4c29      	ldr	r4, [pc, #164]	; (30d4 <udd_ep_run+0x1d4>)
    3030:	47a0      	blx	r4
		return (STATUS_OK ==
    3032:	4244      	negs	r4, r0
    3034:	4144      	adcs	r4, r0
    3036:	b2e4      	uxtb	r4, r4
    3038:	e76d      	b.n	2f16 <udd_ep_run+0x16>
		} else if (true == ptr_job->b_shortpacket) {
    303a:	7cbb      	ldrb	r3, [r7, #18]
    303c:	079b      	lsls	r3, r3, #30
    303e:	d505      	bpl.n	304c <udd_ep_run+0x14c>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    3040:	7cbb      	ldrb	r3, [r7, #18]
    3042:	2202      	movs	r2, #2
    3044:	4393      	bics	r3, r2
    3046:	74bb      	strb	r3, [r7, #18]
			next_trans = 0;
    3048:	2500      	movs	r5, #0
    304a:	e7ec      	b.n	3026 <udd_ep_run+0x126>
			ptr_job->busy = false;
    304c:	7cbb      	ldrb	r3, [r7, #18]
    304e:	2201      	movs	r2, #1
    3050:	4393      	bics	r3, r2
    3052:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    3054:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3056:	2b00      	cmp	r3, #0
    3058:	d025      	beq.n	30a6 <udd_ep_run+0x1a6>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    305a:	002a      	movs	r2, r5
    305c:	2100      	movs	r1, #0
    305e:	2000      	movs	r0, #0
    3060:	4798      	blx	r3
			return true;
    3062:	2401      	movs	r4, #1
    3064:	e757      	b.n	2f16 <udd_ep_run+0x16>
				next_trans -= next_trans % ptr_job->ep_size;
    3066:	8a39      	ldrh	r1, [r7, #16]
    3068:	0020      	movs	r0, r4
    306a:	4b19      	ldr	r3, [pc, #100]	; (30d0 <udd_ep_run+0x1d0>)
    306c:	4798      	blx	r3
    306e:	1a63      	subs	r3, r4, r1
    3070:	b29a      	uxth	r2, r3
    3072:	e7a4      	b.n	2fbe <udd_ep_run+0xbe>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    3074:	0013      	movs	r3, r2
    3076:	9a02      	ldr	r2, [sp, #8]
    3078:	0031      	movs	r1, r6
    307a:	4813      	ldr	r0, [pc, #76]	; (30c8 <udd_ep_run+0x1c8>)
    307c:	4c13      	ldr	r4, [pc, #76]	; (30cc <udd_ep_run+0x1cc>)
    307e:	47a0      	blx	r4
				return (STATUS_OK ==
    3080:	4244      	negs	r4, r0
    3082:	4144      	adcs	r4, r0
    3084:	b2e4      	uxtb	r4, r4
    3086:	e746      	b.n	2f16 <udd_ep_run+0x16>
			ptr_job->busy = false;
    3088:	7cbb      	ldrb	r3, [r7, #18]
    308a:	2201      	movs	r2, #1
    308c:	4393      	bics	r3, r2
    308e:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    3090:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3092:	2b00      	cmp	r3, #0
    3094:	d009      	beq.n	30aa <udd_ep_run+0x1aa>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    3096:	002a      	movs	r2, r5
    3098:	2100      	movs	r1, #0
    309a:	2000      	movs	r0, #0
    309c:	4798      	blx	r3
			return true;
    309e:	2401      	movs	r4, #1
    30a0:	e739      	b.n	2f16 <udd_ep_run+0x16>
		return false;
    30a2:	2400      	movs	r4, #0
    30a4:	e737      	b.n	2f16 <udd_ep_run+0x16>
			return true;
    30a6:	2401      	movs	r4, #1
    30a8:	e735      	b.n	2f16 <udd_ep_run+0x16>
			return true;
    30aa:	2401      	movs	r4, #1
    30ac:	e733      	b.n	2f16 <udd_ep_run+0x16>
    30ae:	46c0      	nop			; (mov r8, r8)
    30b0:	00002d79 	.word	0x00002d79
    30b4:	000025e9 	.word	0x000025e9
    30b8:	20000112 	.word	0x20000112
    30bc:	00001fff 	.word	0x00001fff
    30c0:	00004fa5 	.word	0x00004fa5
    30c4:	200007c4 	.word	0x200007c4
    30c8:	20000884 	.word	0x20000884
    30cc:	0000382d 	.word	0x0000382d
    30d0:	00004dd1 	.word	0x00004dd1
    30d4:	000037d9 	.word	0x000037d9

000030d8 <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    30d8:	4b02      	ldr	r3, [pc, #8]	; (30e4 <udd_set_address+0xc>)
    30da:	681b      	ldr	r3, [r3, #0]
    30dc:	2280      	movs	r2, #128	; 0x80
    30de:	4310      	orrs	r0, r2
    30e0:	7298      	strb	r0, [r3, #10]
}
    30e2:	4770      	bx	lr
    30e4:	20000884 	.word	0x20000884

000030e8 <udd_getaddress>:
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    30e8:	4b02      	ldr	r3, [pc, #8]	; (30f4 <udd_getaddress+0xc>)
    30ea:	681b      	ldr	r3, [r3, #0]
    30ec:	7a98      	ldrb	r0, [r3, #10]
    30ee:	0640      	lsls	r0, r0, #25
    30f0:	0e40      	lsrs	r0, r0, #25
}
    30f2:	4770      	bx	lr
    30f4:	20000884 	.word	0x20000884

000030f8 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    30f8:	4b01      	ldr	r3, [pc, #4]	; (3100 <udd_set_setup_payload+0x8>)
    30fa:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    30fc:	8199      	strh	r1, [r3, #12]
}
    30fe:	4770      	bx	lr
    3100:	200009ec 	.word	0x200009ec

00003104 <udd_attach>:
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
}

void udd_attach(void)
{
    3104:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    3106:	2003      	movs	r0, #3
    3108:	4b16      	ldr	r3, [pc, #88]	; (3164 <udd_attach+0x60>)
    310a:	4798      	blx	r3
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    310c:	4c16      	ldr	r4, [pc, #88]	; (3168 <udd_attach+0x64>)
    310e:	6822      	ldr	r2, [r4, #0]
    3110:	8913      	ldrh	r3, [r2, #8]
    3112:	2101      	movs	r1, #1
    3114:	438b      	bics	r3, r1
    3116:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    3118:	4a14      	ldr	r2, [pc, #80]	; (316c <udd_attach+0x68>)
    311a:	3103      	adds	r1, #3
    311c:	0020      	movs	r0, r4
    311e:	4e14      	ldr	r6, [pc, #80]	; (3170 <udd_attach+0x6c>)
    3120:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    3122:	4a14      	ldr	r2, [pc, #80]	; (3174 <udd_attach+0x70>)
    3124:	2100      	movs	r1, #0
    3126:	0020      	movs	r0, r4
    3128:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    312a:	4a13      	ldr	r2, [pc, #76]	; (3178 <udd_attach+0x74>)
    312c:	2101      	movs	r1, #1
    312e:	0020      	movs	r0, r4
    3130:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    3132:	4a12      	ldr	r2, [pc, #72]	; (317c <udd_attach+0x78>)
    3134:	2102      	movs	r1, #2
    3136:	0020      	movs	r0, r4
    3138:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    313a:	2104      	movs	r1, #4
    313c:	0020      	movs	r0, r4
    313e:	4d10      	ldr	r5, [pc, #64]	; (3180 <udd_attach+0x7c>)
    3140:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    3142:	2100      	movs	r1, #0
    3144:	0020      	movs	r0, r4
    3146:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    3148:	2101      	movs	r1, #1
    314a:	0020      	movs	r0, r4
    314c:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    314e:	2102      	movs	r1, #2
    3150:	0020      	movs	r0, r4
    3152:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    3154:	4a0b      	ldr	r2, [pc, #44]	; (3184 <udd_attach+0x80>)
    3156:	2106      	movs	r1, #6
    3158:	0020      	movs	r0, r4
    315a:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    315c:	2106      	movs	r1, #6
    315e:	0020      	movs	r0, r4
    3160:	47a8      	blx	r5
#endif
}
    3162:	bd70      	pop	{r4, r5, r6, pc}
    3164:	0000252d 	.word	0x0000252d
    3168:	20000884 	.word	0x20000884
    316c:	00002859 	.word	0x00002859
    3170:	00003229 	.word	0x00003229
    3174:	00002bad 	.word	0x00002bad
    3178:	000028e1 	.word	0x000028e1
    317c:	000027ed 	.word	0x000027ed
    3180:	0000324d 	.word	0x0000324d
    3184:	00002885 	.word	0x00002885

00003188 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    3188:	b570      	push	{r4, r5, r6, lr}
    318a:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    318c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3190:	425a      	negs	r2, r3
    3192:	4153      	adcs	r3, r2
    3194:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    3196:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    3198:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    319c:	2200      	movs	r2, #0
    319e:	4b1a      	ldr	r3, [pc, #104]	; (3208 <udd_enable+0x80>)
    31a0:	701a      	strb	r2, [r3, #0]
	return flags;
    31a2:	9c00      	ldr	r4, [sp, #0]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    31a4:	ad01      	add	r5, sp, #4
    31a6:	0028      	movs	r0, r5
    31a8:	4b18      	ldr	r3, [pc, #96]	; (320c <udd_enable+0x84>)
    31aa:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    31ac:	2303      	movs	r3, #3
    31ae:	70ab      	strb	r3, [r5, #2]
	usb_init(&usb_device, USB, &config_usb);
    31b0:	4e17      	ldr	r6, [pc, #92]	; (3210 <udd_enable+0x88>)
    31b2:	002a      	movs	r2, r5
    31b4:	2182      	movs	r1, #130	; 0x82
    31b6:	05c9      	lsls	r1, r1, #23
    31b8:	0030      	movs	r0, r6
    31ba:	4b16      	ldr	r3, [pc, #88]	; (3214 <udd_enable+0x8c>)
    31bc:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    31be:	0030      	movs	r0, r6
    31c0:	4b15      	ldr	r3, [pc, #84]	; (3218 <udd_enable+0x90>)
    31c2:	4798      	blx	r3
		if (!(OSCCTRL->DFLLCTRL.reg & OSCCTRL_DFLLCTRL_USBCRM)) {
    31c4:	4b15      	ldr	r3, [pc, #84]	; (321c <udd_enable+0x94>)
    31c6:	8b1b      	ldrh	r3, [r3, #24]
    31c8:	069b      	lsls	r3, r3, #26
    31ca:	d415      	bmi.n	31f8 <udd_enable+0x70>
			while((OSCCTRL->STATUS.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    31cc:	4913      	ldr	r1, [pc, #76]	; (321c <udd_enable+0x94>)
    31ce:	22d0      	movs	r2, #208	; 0xd0
    31d0:	0112      	lsls	r2, r2, #4
    31d2:	68cb      	ldr	r3, [r1, #12]
    31d4:	4013      	ands	r3, r2
    31d6:	4293      	cmp	r3, r2
    31d8:	d1fb      	bne.n	31d2 <udd_enable+0x4a>

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    31da:	2001      	movs	r0, #1
    31dc:	4b10      	ldr	r3, [pc, #64]	; (3220 <udd_enable+0x98>)
    31de:	4798      	blx	r3
		_uhd_vbus_handler();
	}
#else
	// No VBus detect, assume always high
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
    31e0:	4b10      	ldr	r3, [pc, #64]	; (3224 <udd_enable+0x9c>)
    31e2:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    31e4:	2c00      	cmp	r4, #0
    31e6:	d005      	beq.n	31f4 <udd_enable+0x6c>
		cpu_irq_enable();
    31e8:	2201      	movs	r2, #1
    31ea:	4b07      	ldr	r3, [pc, #28]	; (3208 <udd_enable+0x80>)
    31ec:	701a      	strb	r2, [r3, #0]
    31ee:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    31f2:	b662      	cpsie	i
# endif
#endif

	cpu_irq_restore(flags);
}
    31f4:	b002      	add	sp, #8
    31f6:	bd70      	pop	{r4, r5, r6, pc}
			while((OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY);
    31f8:	4908      	ldr	r1, [pc, #32]	; (321c <udd_enable+0x94>)
    31fa:	2280      	movs	r2, #128	; 0x80
    31fc:	0052      	lsls	r2, r2, #1
    31fe:	68cb      	ldr	r3, [r1, #12]
    3200:	4213      	tst	r3, r2
    3202:	d0fc      	beq.n	31fe <udd_enable+0x76>
    3204:	e7e9      	b.n	31da <udd_enable+0x52>
    3206:	46c0      	nop			; (mov r8, r8)
    3208:	20000112 	.word	0x20000112
    320c:	00003fa1 	.word	0x00003fa1
    3210:	20000884 	.word	0x20000884
    3214:	00003fb1 	.word	0x00003fb1
    3218:	000038ad 	.word	0x000038ad
    321c:	40000c00 	.word	0x40000c00
    3220:	0000252d 	.word	0x0000252d
    3224:	00003105 	.word	0x00003105

00003228 <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    3228:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    322a:	000b      	movs	r3, r1
    322c:	332e      	adds	r3, #46	; 0x2e
    322e:	009b      	lsls	r3, r3, #2
    3230:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    3232:	22aa      	movs	r2, #170	; 0xaa
    3234:	0052      	lsls	r2, r2, #1
    3236:	0049      	lsls	r1, r1, #1
    3238:	5a83      	ldrh	r3, [r0, r2]
    323a:	4c03      	ldr	r4, [pc, #12]	; (3248 <usb_device_register_callback+0x20>)
    323c:	5b09      	ldrh	r1, [r1, r4]
    323e:	430b      	orrs	r3, r1
    3240:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    3242:	2000      	movs	r0, #0
    3244:	bd10      	pop	{r4, pc}
    3246:	46c0      	nop			; (mov r8, r8)
    3248:	00005148 	.word	0x00005148

0000324c <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    324c:	0049      	lsls	r1, r1, #1
    324e:	4b06      	ldr	r3, [pc, #24]	; (3268 <usb_device_enable_callback+0x1c>)
    3250:	5acb      	ldrh	r3, [r1, r3]
    3252:	6802      	ldr	r2, [r0, #0]
    3254:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    3256:	21ab      	movs	r1, #171	; 0xab
    3258:	0049      	lsls	r1, r1, #1
    325a:	5a42      	ldrh	r2, [r0, r1]
    325c:	431a      	orrs	r2, r3
    325e:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    3260:	6802      	ldr	r2, [r0, #0]
    3262:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    3264:	2000      	movs	r0, #0
    3266:	4770      	bx	lr
    3268:	00005148 	.word	0x00005148

0000326c <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    326c:	0049      	lsls	r1, r1, #1
    326e:	4b05      	ldr	r3, [pc, #20]	; (3284 <usb_device_disable_callback+0x18>)
    3270:	5aca      	ldrh	r2, [r1, r3]
    3272:	21ab      	movs	r1, #171	; 0xab
    3274:	0049      	lsls	r1, r1, #1
    3276:	5a43      	ldrh	r3, [r0, r1]
    3278:	4393      	bics	r3, r2
    327a:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    327c:	6803      	ldr	r3, [r0, #0]
    327e:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    3280:	2000      	movs	r0, #0
    3282:	4770      	bx	lr
    3284:	00005148 	.word	0x00005148

00003288 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    3288:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    328a:	008c      	lsls	r4, r1, #2
    328c:	18a4      	adds	r4, r4, r2
    328e:	3434      	adds	r4, #52	; 0x34
    3290:	00a4      	lsls	r4, r4, #2
    3292:	1904      	adds	r4, r0, r4
    3294:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    3296:	1840      	adds	r0, r0, r1
    3298:	3059      	adds	r0, #89	; 0x59
    329a:	30ff      	adds	r0, #255	; 0xff
    329c:	7803      	ldrb	r3, [r0, #0]
    329e:	4903      	ldr	r1, [pc, #12]	; (32ac <usb_device_endpoint_register_callback+0x24>)
    32a0:	5c8a      	ldrb	r2, [r1, r2]
    32a2:	4313      	orrs	r3, r2
    32a4:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    32a6:	2000      	movs	r0, #0
    32a8:	bd10      	pop	{r4, pc}
    32aa:	46c0      	nop			; (mov r8, r8)
    32ac:	00005158 	.word	0x00005158

000032b0 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    32b0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    32b2:	008b      	lsls	r3, r1, #2
    32b4:	189b      	adds	r3, r3, r2
    32b6:	3334      	adds	r3, #52	; 0x34
    32b8:	009b      	lsls	r3, r3, #2
    32ba:	18c3      	adds	r3, r0, r3
    32bc:	2400      	movs	r4, #0
    32be:	605c      	str	r4, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    32c0:	1840      	adds	r0, r0, r1
    32c2:	3059      	adds	r0, #89	; 0x59
    32c4:	30ff      	adds	r0, #255	; 0xff
    32c6:	4b03      	ldr	r3, [pc, #12]	; (32d4 <usb_device_endpoint_unregister_callback+0x24>)
    32c8:	5c9a      	ldrb	r2, [r3, r2]
    32ca:	7803      	ldrb	r3, [r0, #0]
    32cc:	4393      	bics	r3, r2
    32ce:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    32d0:	2000      	movs	r0, #0
    32d2:	bd10      	pop	{r4, pc}
    32d4:	00005158 	.word	0x00005158

000032d8 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    32d8:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    32da:	230f      	movs	r3, #15
    32dc:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    32de:	18c4      	adds	r4, r0, r3
    32e0:	3461      	adds	r4, #97	; 0x61
    32e2:	34ff      	adds	r4, #255	; 0xff
    32e4:	7825      	ldrb	r5, [r4, #0]
    32e6:	4e2f      	ldr	r6, [pc, #188]	; (33a4 <usb_device_endpoint_enable_callback+0xcc>)
    32e8:	5cb6      	ldrb	r6, [r6, r2]
    32ea:	4335      	orrs	r5, r6
    32ec:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    32ee:	2a00      	cmp	r2, #0
    32f0:	d129      	bne.n	3346 <usb_device_endpoint_enable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    32f2:	2b00      	cmp	r3, #0
    32f4:	d112      	bne.n	331c <usb_device_endpoint_enable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    32f6:	2503      	movs	r5, #3
    32f8:	240a      	movs	r4, #10
    32fa:	34ff      	adds	r4, #255	; 0xff
    32fc:	6806      	ldr	r6, [r0, #0]
    32fe:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    3300:	2a03      	cmp	r2, #3
    3302:	d109      	bne.n	3318 <usb_device_endpoint_enable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    3304:	b249      	sxtb	r1, r1
    3306:	2900      	cmp	r1, #0
    3308:	db44      	blt.n	3394 <usb_device_endpoint_enable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    330a:	6802      	ldr	r2, [r0, #0]
    330c:	015b      	lsls	r3, r3, #5
    330e:	18d3      	adds	r3, r2, r3
    3310:	330a      	adds	r3, #10
    3312:	33ff      	adds	r3, #255	; 0xff
    3314:	2220      	movs	r2, #32
    3316:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    3318:	2000      	movs	r0, #0
    331a:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    331c:	b24c      	sxtb	r4, r1
    331e:	2c00      	cmp	r4, #0
    3320:	db08      	blt.n	3334 <usb_device_endpoint_enable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    3322:	015c      	lsls	r4, r3, #5
    3324:	6805      	ldr	r5, [r0, #0]
    3326:	46ac      	mov	ip, r5
    3328:	4464      	add	r4, ip
    332a:	340a      	adds	r4, #10
    332c:	34ff      	adds	r4, #255	; 0xff
    332e:	2501      	movs	r5, #1
    3330:	7025      	strb	r5, [r4, #0]
    3332:	e7e5      	b.n	3300 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    3334:	015c      	lsls	r4, r3, #5
    3336:	6805      	ldr	r5, [r0, #0]
    3338:	46ac      	mov	ip, r5
    333a:	4464      	add	r4, ip
    333c:	340a      	adds	r4, #10
    333e:	34ff      	adds	r4, #255	; 0xff
    3340:	2502      	movs	r5, #2
    3342:	7025      	strb	r5, [r4, #0]
    3344:	e7dc      	b.n	3300 <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    3346:	2a01      	cmp	r2, #1
    3348:	d11a      	bne.n	3380 <usb_device_endpoint_enable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    334a:	2b00      	cmp	r3, #0
    334c:	d105      	bne.n	335a <usb_device_endpoint_enable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    334e:	6802      	ldr	r2, [r0, #0]
    3350:	210c      	movs	r1, #12
    3352:	230a      	movs	r3, #10
    3354:	33ff      	adds	r3, #255	; 0xff
    3356:	54d1      	strb	r1, [r2, r3]
    3358:	e7de      	b.n	3318 <usb_device_endpoint_enable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    335a:	b249      	sxtb	r1, r1
    335c:	2900      	cmp	r1, #0
    335e:	db07      	blt.n	3370 <usb_device_endpoint_enable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    3360:	6802      	ldr	r2, [r0, #0]
    3362:	015b      	lsls	r3, r3, #5
    3364:	18d3      	adds	r3, r2, r3
    3366:	330a      	adds	r3, #10
    3368:	33ff      	adds	r3, #255	; 0xff
    336a:	2204      	movs	r2, #4
    336c:	701a      	strb	r2, [r3, #0]
    336e:	e7d3      	b.n	3318 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    3370:	6802      	ldr	r2, [r0, #0]
    3372:	015b      	lsls	r3, r3, #5
    3374:	18d3      	adds	r3, r2, r3
    3376:	330a      	adds	r3, #10
    3378:	33ff      	adds	r3, #255	; 0xff
    337a:	2208      	movs	r2, #8
    337c:	701a      	strb	r2, [r3, #0]
    337e:	e7cb      	b.n	3318 <usb_device_endpoint_enable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    3380:	2a02      	cmp	r2, #2
    3382:	d1bd      	bne.n	3300 <usb_device_endpoint_enable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    3384:	6802      	ldr	r2, [r0, #0]
    3386:	015b      	lsls	r3, r3, #5
    3388:	18d3      	adds	r3, r2, r3
    338a:	330a      	adds	r3, #10
    338c:	33ff      	adds	r3, #255	; 0xff
    338e:	2210      	movs	r2, #16
    3390:	701a      	strb	r2, [r3, #0]
    3392:	e7c1      	b.n	3318 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    3394:	6802      	ldr	r2, [r0, #0]
    3396:	015b      	lsls	r3, r3, #5
    3398:	18d3      	adds	r3, r2, r3
    339a:	330a      	adds	r3, #10
    339c:	33ff      	adds	r3, #255	; 0xff
    339e:	2240      	movs	r2, #64	; 0x40
    33a0:	701a      	strb	r2, [r3, #0]
    33a2:	e7b9      	b.n	3318 <usb_device_endpoint_enable_callback+0x40>
    33a4:	00005158 	.word	0x00005158

000033a8 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    33a8:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    33aa:	230f      	movs	r3, #15
    33ac:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    33ae:	18c4      	adds	r4, r0, r3
    33b0:	3461      	adds	r4, #97	; 0x61
    33b2:	34ff      	adds	r4, #255	; 0xff
    33b4:	4d2f      	ldr	r5, [pc, #188]	; (3474 <usb_device_endpoint_disable_callback+0xcc>)
    33b6:	5cae      	ldrb	r6, [r5, r2]
    33b8:	7825      	ldrb	r5, [r4, #0]
    33ba:	43b5      	bics	r5, r6
    33bc:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    33be:	2a00      	cmp	r2, #0
    33c0:	d129      	bne.n	3416 <usb_device_endpoint_disable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    33c2:	2b00      	cmp	r3, #0
    33c4:	d112      	bne.n	33ec <usb_device_endpoint_disable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    33c6:	2503      	movs	r5, #3
    33c8:	2484      	movs	r4, #132	; 0x84
    33ca:	0064      	lsls	r4, r4, #1
    33cc:	6806      	ldr	r6, [r0, #0]
    33ce:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    33d0:	2a03      	cmp	r2, #3
    33d2:	d109      	bne.n	33e8 <usb_device_endpoint_disable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    33d4:	b249      	sxtb	r1, r1
    33d6:	2900      	cmp	r1, #0
    33d8:	db44      	blt.n	3464 <usb_device_endpoint_disable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    33da:	6802      	ldr	r2, [r0, #0]
    33dc:	015b      	lsls	r3, r3, #5
    33de:	18d3      	adds	r3, r2, r3
    33e0:	3309      	adds	r3, #9
    33e2:	33ff      	adds	r3, #255	; 0xff
    33e4:	2220      	movs	r2, #32
    33e6:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    33e8:	2000      	movs	r0, #0
    33ea:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    33ec:	b24c      	sxtb	r4, r1
    33ee:	2c00      	cmp	r4, #0
    33f0:	db08      	blt.n	3404 <usb_device_endpoint_disable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    33f2:	015c      	lsls	r4, r3, #5
    33f4:	6805      	ldr	r5, [r0, #0]
    33f6:	46ac      	mov	ip, r5
    33f8:	4464      	add	r4, ip
    33fa:	3409      	adds	r4, #9
    33fc:	34ff      	adds	r4, #255	; 0xff
    33fe:	2501      	movs	r5, #1
    3400:	7025      	strb	r5, [r4, #0]
    3402:	e7e5      	b.n	33d0 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    3404:	015c      	lsls	r4, r3, #5
    3406:	6805      	ldr	r5, [r0, #0]
    3408:	46ac      	mov	ip, r5
    340a:	4464      	add	r4, ip
    340c:	3409      	adds	r4, #9
    340e:	34ff      	adds	r4, #255	; 0xff
    3410:	2502      	movs	r5, #2
    3412:	7025      	strb	r5, [r4, #0]
    3414:	e7dc      	b.n	33d0 <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    3416:	2a01      	cmp	r2, #1
    3418:	d11a      	bne.n	3450 <usb_device_endpoint_disable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    341a:	2b00      	cmp	r3, #0
    341c:	d105      	bne.n	342a <usb_device_endpoint_disable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    341e:	6802      	ldr	r2, [r0, #0]
    3420:	210c      	movs	r1, #12
    3422:	3309      	adds	r3, #9
    3424:	33ff      	adds	r3, #255	; 0xff
    3426:	54d1      	strb	r1, [r2, r3]
    3428:	e7de      	b.n	33e8 <usb_device_endpoint_disable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    342a:	b249      	sxtb	r1, r1
    342c:	2900      	cmp	r1, #0
    342e:	db07      	blt.n	3440 <usb_device_endpoint_disable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    3430:	6802      	ldr	r2, [r0, #0]
    3432:	015b      	lsls	r3, r3, #5
    3434:	18d3      	adds	r3, r2, r3
    3436:	3309      	adds	r3, #9
    3438:	33ff      	adds	r3, #255	; 0xff
    343a:	2204      	movs	r2, #4
    343c:	701a      	strb	r2, [r3, #0]
    343e:	e7d3      	b.n	33e8 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    3440:	6802      	ldr	r2, [r0, #0]
    3442:	015b      	lsls	r3, r3, #5
    3444:	18d3      	adds	r3, r2, r3
    3446:	3309      	adds	r3, #9
    3448:	33ff      	adds	r3, #255	; 0xff
    344a:	2208      	movs	r2, #8
    344c:	701a      	strb	r2, [r3, #0]
    344e:	e7cb      	b.n	33e8 <usb_device_endpoint_disable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    3450:	2a02      	cmp	r2, #2
    3452:	d1bd      	bne.n	33d0 <usb_device_endpoint_disable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    3454:	6802      	ldr	r2, [r0, #0]
    3456:	015b      	lsls	r3, r3, #5
    3458:	18d3      	adds	r3, r2, r3
    345a:	3309      	adds	r3, #9
    345c:	33ff      	adds	r3, #255	; 0xff
    345e:	2210      	movs	r2, #16
    3460:	701a      	strb	r2, [r3, #0]
    3462:	e7c1      	b.n	33e8 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    3464:	6802      	ldr	r2, [r0, #0]
    3466:	015b      	lsls	r3, r3, #5
    3468:	18d3      	adds	r3, r2, r3
    346a:	3309      	adds	r3, #9
    346c:	33ff      	adds	r3, #255	; 0xff
    346e:	2240      	movs	r2, #64	; 0x40
    3470:	701a      	strb	r2, [r3, #0]
    3472:	e7b9      	b.n	33e8 <usb_device_endpoint_disable_callback+0x40>
    3474:	00005158 	.word	0x00005158

00003478 <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    3478:	2300      	movs	r3, #0
    347a:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    347c:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    347e:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    3480:	3301      	adds	r3, #1
    3482:	70c3      	strb	r3, [r0, #3]
}
    3484:	4770      	bx	lr
	...

00003488 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    3488:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    348a:	780c      	ldrb	r4, [r1, #0]
    348c:	230f      	movs	r3, #15
    348e:	4023      	ands	r3, r4
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    3490:	b264      	sxtb	r4, r4

	switch (ep_config->ep_type) {
    3492:	78ca      	ldrb	r2, [r1, #3]
    3494:	2a04      	cmp	r2, #4
    3496:	d870      	bhi.n	357a <usb_device_endpoint_set_config+0xf2>
    3498:	0092      	lsls	r2, r2, #2
    349a:	4d89      	ldr	r5, [pc, #548]	; (36c0 <usb_device_endpoint_set_config+0x238>)
    349c:	58aa      	ldr	r2, [r5, r2]
    349e:	4697      	mov	pc, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    34a0:	6802      	ldr	r2, [r0, #0]
    34a2:	3308      	adds	r3, #8
    34a4:	015b      	lsls	r3, r3, #5
    34a6:	2100      	movs	r1, #0
    34a8:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    34aa:	2200      	movs	r2, #0
    34ac:	e082      	b.n	35b4 <usb_device_endpoint_set_config+0x12c>
    34ae:	015c      	lsls	r4, r3, #5
    34b0:	6802      	ldr	r2, [r0, #0]
    34b2:	4694      	mov	ip, r2
    34b4:	4464      	add	r4, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    34b6:	2280      	movs	r2, #128	; 0x80
    34b8:	0052      	lsls	r2, r2, #1
    34ba:	5ca5      	ldrb	r5, [r4, r2]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    34bc:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    34be:	076d      	lsls	r5, r5, #29
    34c0:	d178      	bne.n	35b4 <usb_device_endpoint_set_config+0x12c>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    34c2:	32e4      	adds	r2, #228	; 0xe4
    34c4:	5ca6      	ldrb	r6, [r4, r2]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    34c6:	2570      	movs	r5, #112	; 0x70
				return STATUS_ERR_DENIED;
    34c8:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    34ca:	422e      	tst	r6, r5
    34cc:	d172      	bne.n	35b4 <usb_device_endpoint_set_config+0x12c>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    34ce:	3d5f      	subs	r5, #95	; 0x5f
    34d0:	32e4      	adds	r2, #228	; 0xe4
    34d2:	54a5      	strb	r5, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    34d4:	001a      	movs	r2, r3
    34d6:	3208      	adds	r2, #8
    34d8:	0152      	lsls	r2, r2, #5
    34da:	6804      	ldr	r4, [r0, #0]
    34dc:	18a4      	adds	r4, r4, r2
    34de:	352f      	adds	r5, #47	; 0x2f
    34e0:	7165      	strb	r5, [r4, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    34e2:	6800      	ldr	r0, [r0, #0]
    34e4:	1882      	adds	r2, r0, r2
    34e6:	2080      	movs	r0, #128	; 0x80
    34e8:	7110      	strb	r0, [r2, #4]
			}
			if (true == ep_config->auto_zlp) {
    34ea:	788a      	ldrb	r2, [r1, #2]
    34ec:	2a00      	cmp	r2, #0
    34ee:	d01f      	beq.n	3530 <usb_device_endpoint_set_config+0xa8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    34f0:	0158      	lsls	r0, r3, #5
    34f2:	4a74      	ldr	r2, [pc, #464]	; (36c4 <usb_device_endpoint_set_config+0x23c>)
    34f4:	1812      	adds	r2, r2, r0
    34f6:	6854      	ldr	r4, [r2, #4]
    34f8:	2080      	movs	r0, #128	; 0x80
    34fa:	0600      	lsls	r0, r0, #24
    34fc:	4304      	orrs	r4, r0
    34fe:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3500:	6954      	ldr	r4, [r2, #20]
    3502:	4320      	orrs	r0, r4
    3504:	6150      	str	r0, [r2, #20]
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    3506:	2507      	movs	r5, #7
    3508:	784c      	ldrb	r4, [r1, #1]
    350a:	015a      	lsls	r2, r3, #5
    350c:	4b6d      	ldr	r3, [pc, #436]	; (36c4 <usb_device_endpoint_set_config+0x23c>)
    350e:	189b      	adds	r3, r3, r2
    3510:	6858      	ldr	r0, [r3, #4]
    3512:	402c      	ands	r4, r5
    3514:	0724      	lsls	r4, r4, #28
    3516:	4e6c      	ldr	r6, [pc, #432]	; (36c8 <usb_device_endpoint_set_config+0x240>)
    3518:	4030      	ands	r0, r6
    351a:	4320      	orrs	r0, r4
    351c:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    351e:	7849      	ldrb	r1, [r1, #1]
    3520:	695a      	ldr	r2, [r3, #20]
    3522:	4029      	ands	r1, r5
    3524:	0709      	lsls	r1, r1, #28
    3526:	4032      	ands	r2, r6
    3528:	430a      	orrs	r2, r1
    352a:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    352c:	2200      	movs	r2, #0
    352e:	e041      	b.n	35b4 <usb_device_endpoint_set_config+0x12c>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3530:	0158      	lsls	r0, r3, #5
    3532:	4a64      	ldr	r2, [pc, #400]	; (36c4 <usb_device_endpoint_set_config+0x23c>)
    3534:	1812      	adds	r2, r2, r0
    3536:	6850      	ldr	r0, [r2, #4]
    3538:	0040      	lsls	r0, r0, #1
    353a:	0840      	lsrs	r0, r0, #1
    353c:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    353e:	6950      	ldr	r0, [r2, #20]
    3540:	0040      	lsls	r0, r0, #1
    3542:	0840      	lsrs	r0, r0, #1
    3544:	6150      	str	r0, [r2, #20]
    3546:	e7de      	b.n	3506 <usb_device_endpoint_set_config+0x7e>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    3548:	2c00      	cmp	r4, #0
    354a:	db35      	blt.n	35b8 <usb_device_endpoint_set_config+0x130>
    354c:	015d      	lsls	r5, r3, #5
    354e:	6802      	ldr	r2, [r0, #0]
    3550:	4694      	mov	ip, r2
    3552:	4465      	add	r5, ip
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3554:	2280      	movs	r2, #128	; 0x80
    3556:	0052      	lsls	r2, r2, #1
    3558:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    355a:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    355c:	0776      	lsls	r6, r6, #29
    355e:	d129      	bne.n	35b4 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    3560:	2680      	movs	r6, #128	; 0x80
    3562:	0076      	lsls	r6, r6, #1
    3564:	5daa      	ldrb	r2, [r5, r6]
    3566:	2702      	movs	r7, #2
    3568:	433a      	orrs	r2, r7
    356a:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    356c:	6802      	ldr	r2, [r0, #0]
    356e:	0018      	movs	r0, r3
    3570:	3008      	adds	r0, #8
    3572:	0140      	lsls	r0, r0, #5
    3574:	1812      	adds	r2, r2, r0
    3576:	2040      	movs	r0, #64	; 0x40
    3578:	7150      	strb	r0, [r2, #5]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    357a:	0fe2      	lsrs	r2, r4, #31

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    357c:	784f      	ldrb	r7, [r1, #1]
    357e:	005d      	lsls	r5, r3, #1
    3580:	18ad      	adds	r5, r5, r2
    3582:	012d      	lsls	r5, r5, #4
    3584:	4e4f      	ldr	r6, [pc, #316]	; (36c4 <usb_device_endpoint_set_config+0x23c>)
    3586:	1975      	adds	r5, r6, r5
    3588:	6868      	ldr	r0, [r5, #4]
    358a:	2407      	movs	r4, #7
    358c:	403c      	ands	r4, r7
    358e:	0724      	lsls	r4, r4, #28
    3590:	4e4d      	ldr	r6, [pc, #308]	; (36c8 <usb_device_endpoint_set_config+0x240>)
    3592:	4030      	ands	r0, r6
    3594:	4320      	orrs	r0, r4
    3596:	6068      	str	r0, [r5, #4]

	if (true == ep_config->auto_zlp) {
    3598:	7889      	ldrb	r1, [r1, #2]
    359a:	2900      	cmp	r1, #0
    359c:	d000      	beq.n	35a0 <usb_device_endpoint_set_config+0x118>
    359e:	e088      	b.n	36b2 <usb_device_endpoint_set_config+0x22a>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    35a0:	005b      	lsls	r3, r3, #1
    35a2:	189b      	adds	r3, r3, r2
    35a4:	011b      	lsls	r3, r3, #4
    35a6:	4a47      	ldr	r2, [pc, #284]	; (36c4 <usb_device_endpoint_set_config+0x23c>)
    35a8:	18d3      	adds	r3, r2, r3
    35aa:	685a      	ldr	r2, [r3, #4]
    35ac:	0052      	lsls	r2, r2, #1
    35ae:	0852      	lsrs	r2, r2, #1
    35b0:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    35b2:	2200      	movs	r2, #0
}
    35b4:	0010      	movs	r0, r2
    35b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35b8:	015d      	lsls	r5, r3, #5
    35ba:	6802      	ldr	r2, [r0, #0]
    35bc:	4694      	mov	ip, r2
    35be:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    35c0:	2280      	movs	r2, #128	; 0x80
    35c2:	0052      	lsls	r2, r2, #1
    35c4:	5caf      	ldrb	r7, [r5, r2]
    35c6:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    35c8:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    35ca:	4237      	tst	r7, r6
    35cc:	d1f2      	bne.n	35b4 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    35ce:	3690      	adds	r6, #144	; 0x90
    35d0:	5daa      	ldrb	r2, [r5, r6]
    35d2:	2720      	movs	r7, #32
    35d4:	433a      	orrs	r2, r7
    35d6:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    35d8:	6802      	ldr	r2, [r0, #0]
    35da:	0018      	movs	r0, r3
    35dc:	3008      	adds	r0, #8
    35de:	0140      	lsls	r0, r0, #5
    35e0:	1812      	adds	r2, r2, r0
    35e2:	2080      	movs	r0, #128	; 0x80
    35e4:	7110      	strb	r0, [r2, #4]
    35e6:	e7c8      	b.n	357a <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    35e8:	2c00      	cmp	r4, #0
    35ea:	db17      	blt.n	361c <usb_device_endpoint_set_config+0x194>
    35ec:	015d      	lsls	r5, r3, #5
    35ee:	6802      	ldr	r2, [r0, #0]
    35f0:	4694      	mov	ip, r2
    35f2:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    35f4:	2280      	movs	r2, #128	; 0x80
    35f6:	0052      	lsls	r2, r2, #1
    35f8:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    35fa:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    35fc:	0776      	lsls	r6, r6, #29
    35fe:	d1d9      	bne.n	35b4 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    3600:	2680      	movs	r6, #128	; 0x80
    3602:	0076      	lsls	r6, r6, #1
    3604:	5daa      	ldrb	r2, [r5, r6]
    3606:	2703      	movs	r7, #3
    3608:	433a      	orrs	r2, r7
    360a:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    360c:	6802      	ldr	r2, [r0, #0]
    360e:	0018      	movs	r0, r3
    3610:	3008      	adds	r0, #8
    3612:	0140      	lsls	r0, r0, #5
    3614:	1812      	adds	r2, r2, r0
    3616:	2040      	movs	r0, #64	; 0x40
    3618:	7150      	strb	r0, [r2, #5]
    361a:	e7ae      	b.n	357a <usb_device_endpoint_set_config+0xf2>
    361c:	015d      	lsls	r5, r3, #5
    361e:	6802      	ldr	r2, [r0, #0]
    3620:	4694      	mov	ip, r2
    3622:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3624:	2280      	movs	r2, #128	; 0x80
    3626:	0052      	lsls	r2, r2, #1
    3628:	5caf      	ldrb	r7, [r5, r2]
    362a:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    362c:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    362e:	4237      	tst	r7, r6
    3630:	d1c0      	bne.n	35b4 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    3632:	3690      	adds	r6, #144	; 0x90
    3634:	5daa      	ldrb	r2, [r5, r6]
    3636:	2730      	movs	r7, #48	; 0x30
    3638:	433a      	orrs	r2, r7
    363a:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    363c:	6802      	ldr	r2, [r0, #0]
    363e:	0018      	movs	r0, r3
    3640:	3008      	adds	r0, #8
    3642:	0140      	lsls	r0, r0, #5
    3644:	1812      	adds	r2, r2, r0
    3646:	2080      	movs	r0, #128	; 0x80
    3648:	7110      	strb	r0, [r2, #4]
    364a:	e796      	b.n	357a <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    364c:	2c00      	cmp	r4, #0
    364e:	db17      	blt.n	3680 <usb_device_endpoint_set_config+0x1f8>
    3650:	015d      	lsls	r5, r3, #5
    3652:	6802      	ldr	r2, [r0, #0]
    3654:	4694      	mov	ip, r2
    3656:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3658:	2280      	movs	r2, #128	; 0x80
    365a:	0052      	lsls	r2, r2, #1
    365c:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    365e:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3660:	0776      	lsls	r6, r6, #29
    3662:	d1a7      	bne.n	35b4 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    3664:	2680      	movs	r6, #128	; 0x80
    3666:	0076      	lsls	r6, r6, #1
    3668:	5daa      	ldrb	r2, [r5, r6]
    366a:	2704      	movs	r7, #4
    366c:	433a      	orrs	r2, r7
    366e:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    3670:	6802      	ldr	r2, [r0, #0]
    3672:	0018      	movs	r0, r3
    3674:	3008      	adds	r0, #8
    3676:	0140      	lsls	r0, r0, #5
    3678:	1812      	adds	r2, r2, r0
    367a:	2040      	movs	r0, #64	; 0x40
    367c:	7150      	strb	r0, [r2, #5]
    367e:	e77c      	b.n	357a <usb_device_endpoint_set_config+0xf2>
    3680:	015d      	lsls	r5, r3, #5
    3682:	6802      	ldr	r2, [r0, #0]
    3684:	4694      	mov	ip, r2
    3686:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3688:	2280      	movs	r2, #128	; 0x80
    368a:	0052      	lsls	r2, r2, #1
    368c:	5caf      	ldrb	r7, [r5, r2]
    368e:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    3690:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3692:	4237      	tst	r7, r6
    3694:	d000      	beq.n	3698 <usb_device_endpoint_set_config+0x210>
    3696:	e78d      	b.n	35b4 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    3698:	3690      	adds	r6, #144	; 0x90
    369a:	5daa      	ldrb	r2, [r5, r6]
    369c:	2740      	movs	r7, #64	; 0x40
    369e:	433a      	orrs	r2, r7
    36a0:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    36a2:	6802      	ldr	r2, [r0, #0]
    36a4:	0018      	movs	r0, r3
    36a6:	3008      	adds	r0, #8
    36a8:	0140      	lsls	r0, r0, #5
    36aa:	1812      	adds	r2, r2, r0
    36ac:	2080      	movs	r0, #128	; 0x80
    36ae:	7110      	strb	r0, [r2, #4]
    36b0:	e763      	b.n	357a <usb_device_endpoint_set_config+0xf2>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    36b2:	6869      	ldr	r1, [r5, #4]
    36b4:	2380      	movs	r3, #128	; 0x80
    36b6:	061b      	lsls	r3, r3, #24
    36b8:	430b      	orrs	r3, r1
    36ba:	606b      	str	r3, [r5, #4]
	return STATUS_OK;
    36bc:	2200      	movs	r2, #0
    36be:	e779      	b.n	35b4 <usb_device_endpoint_set_config+0x12c>
    36c0:	00005134 	.word	0x00005134
    36c4:	20000a44 	.word	0x20000a44
    36c8:	8fffffff 	.word	0x8fffffff

000036cc <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    36cc:	230f      	movs	r3, #15
    36ce:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    36d0:	b249      	sxtb	r1, r1
    36d2:	2900      	cmp	r1, #0
    36d4:	db0a      	blt.n	36ec <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    36d6:	3308      	adds	r3, #8
    36d8:	015b      	lsls	r3, r3, #5
    36da:	6802      	ldr	r2, [r0, #0]
    36dc:	18d2      	adds	r2, r2, r3
    36de:	2140      	movs	r1, #64	; 0x40
    36e0:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    36e2:	6802      	ldr	r2, [r0, #0]
    36e4:	18d3      	adds	r3, r2, r3
    36e6:	2201      	movs	r2, #1
    36e8:	71da      	strb	r2, [r3, #7]
	}
}
    36ea:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    36ec:	3308      	adds	r3, #8
    36ee:	015b      	lsls	r3, r3, #5
    36f0:	6802      	ldr	r2, [r0, #0]
    36f2:	18d2      	adds	r2, r2, r3
    36f4:	2180      	movs	r1, #128	; 0x80
    36f6:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    36f8:	6802      	ldr	r2, [r0, #0]
    36fa:	18d3      	adds	r3, r2, r3
    36fc:	2202      	movs	r2, #2
    36fe:	71da      	strb	r2, [r3, #7]
    3700:	e7f3      	b.n	36ea <usb_device_endpoint_abort_job+0x1e>

00003702 <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3702:	230f      	movs	r3, #15
    3704:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    3706:	b249      	sxtb	r1, r1
    3708:	2900      	cmp	r1, #0
    370a:	db07      	blt.n	371c <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    370c:	6802      	ldr	r2, [r0, #0]
    370e:	3308      	adds	r3, #8
    3710:	015b      	lsls	r3, r3, #5
    3712:	18d3      	adds	r3, r2, r3
    3714:	7998      	ldrb	r0, [r3, #6]
    3716:	06c0      	lsls	r0, r0, #27
    3718:	0fc0      	lsrs	r0, r0, #31
	}
}
    371a:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    371c:	6802      	ldr	r2, [r0, #0]
    371e:	3308      	adds	r3, #8
    3720:	015b      	lsls	r3, r3, #5
    3722:	18d3      	adds	r3, r2, r3
    3724:	7998      	ldrb	r0, [r3, #6]
    3726:	0680      	lsls	r0, r0, #26
    3728:	0fc0      	lsrs	r0, r0, #31
    372a:	e7f6      	b.n	371a <usb_device_endpoint_is_halted+0x18>

0000372c <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    372c:	230f      	movs	r3, #15
    372e:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    3730:	b249      	sxtb	r1, r1
    3732:	2900      	cmp	r1, #0
    3734:	db06      	blt.n	3744 <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    3736:	6802      	ldr	r2, [r0, #0]
    3738:	3308      	adds	r3, #8
    373a:	015b      	lsls	r3, r3, #5
    373c:	18d3      	adds	r3, r2, r3
    373e:	2210      	movs	r2, #16
    3740:	715a      	strb	r2, [r3, #5]
	}
}
    3742:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    3744:	6802      	ldr	r2, [r0, #0]
    3746:	3308      	adds	r3, #8
    3748:	015b      	lsls	r3, r3, #5
    374a:	18d3      	adds	r3, r2, r3
    374c:	2220      	movs	r2, #32
    374e:	715a      	strb	r2, [r3, #5]
    3750:	e7f7      	b.n	3742 <usb_device_endpoint_set_halt+0x16>

00003752 <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    3752:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3754:	230f      	movs	r3, #15
    3756:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    3758:	b249      	sxtb	r1, r1
    375a:	2900      	cmp	r1, #0
    375c:	db1d      	blt.n	379a <usb_device_endpoint_clear_halt+0x48>
    375e:	0159      	lsls	r1, r3, #5
    3760:	6802      	ldr	r2, [r0, #0]
    3762:	1852      	adds	r2, r2, r1
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    3764:	2483      	movs	r4, #131	; 0x83
    3766:	0064      	lsls	r4, r4, #1
    3768:	5d14      	ldrb	r4, [r2, r4]
    376a:	06e4      	lsls	r4, r4, #27
    376c:	d514      	bpl.n	3798 <usb_device_endpoint_clear_halt+0x46>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    376e:	2510      	movs	r5, #16
    3770:	2482      	movs	r4, #130	; 0x82
    3772:	0064      	lsls	r4, r4, #1
    3774:	5515      	strb	r5, [r2, r4]
    3776:	6802      	ldr	r2, [r0, #0]
    3778:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    377a:	2108      	movs	r1, #8
    377c:	31ff      	adds	r1, #255	; 0xff
    377e:	5c51      	ldrb	r1, [r2, r1]
    3780:	0689      	lsls	r1, r1, #26
    3782:	d509      	bpl.n	3798 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    3784:	3ce4      	subs	r4, #228	; 0xe4
    3786:	2108      	movs	r1, #8
    3788:	31ff      	adds	r1, #255	; 0xff
    378a:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    378c:	6802      	ldr	r2, [r0, #0]
    378e:	3308      	adds	r3, #8
    3790:	015b      	lsls	r3, r3, #5
    3792:	18d3      	adds	r3, r2, r3
    3794:	2201      	movs	r2, #1
    3796:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    3798:	bd30      	pop	{r4, r5, pc}
    379a:	0159      	lsls	r1, r3, #5
    379c:	6802      	ldr	r2, [r0, #0]
    379e:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    37a0:	2483      	movs	r4, #131	; 0x83
    37a2:	0064      	lsls	r4, r4, #1
    37a4:	5d14      	ldrb	r4, [r2, r4]
    37a6:	06a4      	lsls	r4, r4, #26
    37a8:	d5f6      	bpl.n	3798 <usb_device_endpoint_clear_halt+0x46>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    37aa:	2520      	movs	r5, #32
    37ac:	2482      	movs	r4, #130	; 0x82
    37ae:	0064      	lsls	r4, r4, #1
    37b0:	5515      	strb	r5, [r2, r4]
    37b2:	6802      	ldr	r2, [r0, #0]
    37b4:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    37b6:	2108      	movs	r1, #8
    37b8:	31ff      	adds	r1, #255	; 0xff
    37ba:	5c51      	ldrb	r1, [r2, r1]
    37bc:	0649      	lsls	r1, r1, #25
    37be:	d5eb      	bpl.n	3798 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    37c0:	3cc4      	subs	r4, #196	; 0xc4
    37c2:	2108      	movs	r1, #8
    37c4:	31ff      	adds	r1, #255	; 0xff
    37c6:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    37c8:	6802      	ldr	r2, [r0, #0]
    37ca:	3308      	adds	r3, #8
    37cc:	015b      	lsls	r3, r3, #5
    37ce:	18d3      	adds	r3, r2, r3
    37d0:	2202      	movs	r2, #2
    37d2:	711a      	strb	r2, [r3, #4]
    37d4:	e7e0      	b.n	3798 <usb_device_endpoint_clear_halt+0x46>
	...

000037d8 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    37d8:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    37da:	000c      	movs	r4, r1
    37dc:	3408      	adds	r4, #8
    37de:	0164      	lsls	r4, r4, #5
    37e0:	6805      	ldr	r5, [r0, #0]
    37e2:	5d64      	ldrb	r4, [r4, r5]
    37e4:	0664      	lsls	r4, r4, #25
    37e6:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    37e8:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    37ea:	2c00      	cmp	r4, #0
    37ec:	d101      	bne.n	37f2 <usb_device_endpoint_write_buffer_job+0x1a>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
    37ee:	0028      	movs	r0, r5
    37f0:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    37f2:	014c      	lsls	r4, r1, #5
    37f4:	4d0b      	ldr	r5, [pc, #44]	; (3824 <usb_device_endpoint_write_buffer_job+0x4c>)
    37f6:	192d      	adds	r5, r5, r4
    37f8:	002c      	movs	r4, r5
    37fa:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    37fc:	696a      	ldr	r2, [r5, #20]
    37fe:	4d0a      	ldr	r5, [pc, #40]	; (3828 <usb_device_endpoint_write_buffer_job+0x50>)
    3800:	402a      	ands	r2, r5
    3802:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    3804:	6962      	ldr	r2, [r4, #20]
    3806:	049b      	lsls	r3, r3, #18
    3808:	0c9b      	lsrs	r3, r3, #18
    380a:	0b92      	lsrs	r2, r2, #14
    380c:	0392      	lsls	r2, r2, #14
    380e:	4313      	orrs	r3, r2
    3810:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    3812:	6803      	ldr	r3, [r0, #0]
    3814:	3108      	adds	r1, #8
    3816:	0149      	lsls	r1, r1, #5
    3818:	1859      	adds	r1, r3, r1
    381a:	2380      	movs	r3, #128	; 0x80
    381c:	714b      	strb	r3, [r1, #5]
	return STATUS_OK;
    381e:	2500      	movs	r5, #0
    3820:	e7e5      	b.n	37ee <usb_device_endpoint_write_buffer_job+0x16>
    3822:	46c0      	nop			; (mov r8, r8)
    3824:	20000a44 	.word	0x20000a44
    3828:	f0003fff 	.word	0xf0003fff

0000382c <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    382c:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    382e:	000c      	movs	r4, r1
    3830:	3408      	adds	r4, #8
    3832:	0164      	lsls	r4, r4, #5
    3834:	6805      	ldr	r5, [r0, #0]
    3836:	5d64      	ldrb	r4, [r4, r5]
    3838:	0764      	lsls	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    383a:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    383c:	2c00      	cmp	r4, #0
    383e:	d101      	bne.n	3844 <usb_device_endpoint_read_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
    3840:	0028      	movs	r0, r5
    3842:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    3844:	4c0b      	ldr	r4, [pc, #44]	; (3874 <usb_device_endpoint_read_buffer_job+0x48>)
    3846:	014d      	lsls	r5, r1, #5
    3848:	512a      	str	r2, [r5, r4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    384a:	1962      	adds	r2, r4, r5
    384c:	6854      	ldr	r4, [r2, #4]
    384e:	049b      	lsls	r3, r3, #18
    3850:	091b      	lsrs	r3, r3, #4
    3852:	4d09      	ldr	r5, [pc, #36]	; (3878 <usb_device_endpoint_read_buffer_job+0x4c>)
    3854:	402c      	ands	r4, r5
    3856:	4323      	orrs	r3, r4
    3858:	6053      	str	r3, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    385a:	6853      	ldr	r3, [r2, #4]
    385c:	0b9b      	lsrs	r3, r3, #14
    385e:	039b      	lsls	r3, r3, #14
    3860:	6053      	str	r3, [r2, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    3862:	6803      	ldr	r3, [r0, #0]
    3864:	3108      	adds	r1, #8
    3866:	0149      	lsls	r1, r1, #5
    3868:	1859      	adds	r1, r3, r1
    386a:	2340      	movs	r3, #64	; 0x40
    386c:	710b      	strb	r3, [r1, #4]
	return STATUS_OK;
    386e:	2500      	movs	r5, #0
    3870:	e7e6      	b.n	3840 <usb_device_endpoint_read_buffer_job+0x14>
    3872:	46c0      	nop			; (mov r8, r8)
    3874:	20000a44 	.word	0x20000a44
    3878:	f0003fff 	.word	0xf0003fff

0000387c <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    387c:	4b09      	ldr	r3, [pc, #36]	; (38a4 <usb_device_endpoint_setup_buffer_job+0x28>)
    387e:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    3880:	685a      	ldr	r2, [r3, #4]
    3882:	4909      	ldr	r1, [pc, #36]	; (38a8 <usb_device_endpoint_setup_buffer_job+0x2c>)
    3884:	4011      	ands	r1, r2
    3886:	2280      	movs	r2, #128	; 0x80
    3888:	0292      	lsls	r2, r2, #10
    388a:	430a      	orrs	r2, r1
    388c:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    388e:	685a      	ldr	r2, [r3, #4]
    3890:	0b92      	lsrs	r2, r2, #14
    3892:	0392      	lsls	r2, r2, #14
    3894:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    3896:	6802      	ldr	r2, [r0, #0]
    3898:	2140      	movs	r1, #64	; 0x40
    389a:	2382      	movs	r3, #130	; 0x82
    389c:	005b      	lsls	r3, r3, #1
    389e:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    38a0:	2000      	movs	r0, #0
    38a2:	4770      	bx	lr
    38a4:	20000a44 	.word	0x20000a44
    38a8:	f0003fff 	.word	0xf0003fff

000038ac <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    38ac:	6802      	ldr	r2, [r0, #0]
    38ae:	7813      	ldrb	r3, [r2, #0]
    38b0:	2102      	movs	r1, #2
    38b2:	430b      	orrs	r3, r1
    38b4:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    38b6:	6802      	ldr	r2, [r0, #0]
    38b8:	7893      	ldrb	r3, [r2, #2]
    38ba:	2b02      	cmp	r3, #2
    38bc:	d0fc      	beq.n	38b8 <usb_enable+0xc>
}
    38be:	4770      	bx	lr

000038c0 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    38c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    38c2:	46de      	mov	lr, fp
    38c4:	4657      	mov	r7, sl
    38c6:	464e      	mov	r6, r9
    38c8:	4645      	mov	r5, r8
    38ca:	b5e0      	push	{r5, r6, r7, lr}
    38cc:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    38ce:	4bc4      	ldr	r3, [pc, #784]	; (3be0 <USB_Handler+0x320>)
    38d0:	681f      	ldr	r7, [r3, #0]
    38d2:	683d      	ldr	r5, [r7, #0]
    38d4:	782b      	ldrb	r3, [r5, #0]
    38d6:	09db      	lsrs	r3, r3, #7
    38d8:	d114      	bne.n	3904 <USB_Handler+0x44>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    38da:	8c2e      	ldrh	r6, [r5, #32]
    38dc:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    38de:	2e00      	cmp	r6, #0
    38e0:	d000      	beq.n	38e4 <USB_Handler+0x24>
    38e2:	e22d      	b.n	3d40 <USB_Handler+0x480>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    38e4:	8bae      	ldrh	r6, [r5, #28]
    38e6:	b2b6      	uxth	r6, r6
				_usb_instances->device_enabled_callback_mask &
    38e8:	23ab      	movs	r3, #171	; 0xab
    38ea:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    38ec:	5afb      	ldrh	r3, [r7, r3]
    38ee:	22aa      	movs	r2, #170	; 0xaa
    38f0:	0052      	lsls	r2, r2, #1
    38f2:	5abd      	ldrh	r5, [r7, r2]
    38f4:	401d      	ands	r5, r3
    38f6:	4035      	ands	r5, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    38f8:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    38fa:	4fba      	ldr	r7, [pc, #744]	; (3be4 <USB_Handler+0x324>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    38fc:	4bb8      	ldr	r3, [pc, #736]	; (3be0 <USB_Handler+0x320>)
    38fe:	4699      	mov	r9, r3
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    3900:	4698      	mov	r8, r3
    3902:	e208      	b.n	3d16 <USB_Handler+0x456>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    3904:	8c2b      	ldrh	r3, [r5, #32]
    3906:	b29b      	uxth	r3, r3
    3908:	2b00      	cmp	r3, #0
    390a:	d100      	bne.n	390e <USB_Handler+0x4e>
    390c:	e13d      	b.n	3b8a <USB_Handler+0x2ca>
    390e:	8c28      	ldrh	r0, [r5, #32]
    3910:	b280      	uxth	r0, r0
    3912:	4bb5      	ldr	r3, [pc, #724]	; (3be8 <USB_Handler+0x328>)
    3914:	4798      	blx	r3
    3916:	0004      	movs	r4, r0
	if (pipe_int < 32) {
    3918:	281f      	cmp	r0, #31
    391a:	d900      	bls.n	391e <USB_Handler+0x5e>
    391c:	e135      	b.n	3b8a <USB_Handler+0x2ca>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    391e:	0003      	movs	r3, r0
    3920:	3308      	adds	r3, #8
    3922:	015b      	lsls	r3, r3, #5
    3924:	18ed      	adds	r5, r5, r3
    3926:	79ed      	ldrb	r5, [r5, #7]
    3928:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    392a:	07ab      	lsls	r3, r5, #30
    392c:	d041      	beq.n	39b2 <USB_Handler+0xf2>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    392e:	4aaf      	ldr	r2, [pc, #700]	; (3bec <USB_Handler+0x32c>)
    3930:	2301      	movs	r3, #1
    3932:	4083      	lsls	r3, r0
    3934:	6811      	ldr	r1, [r2, #0]
    3936:	4399      	bics	r1, r3
    3938:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    393a:	0003      	movs	r3, r0
    393c:	3308      	adds	r3, #8
    393e:	015b      	lsls	r3, r3, #5
    3940:	683a      	ldr	r2, [r7, #0]
    3942:	4694      	mov	ip, r2
    3944:	4463      	add	r3, ip
    3946:	2203      	movs	r2, #3
    3948:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    394a:	183b      	adds	r3, r7, r0
    394c:	33ae      	adds	r3, #174	; 0xae
    394e:	781b      	ldrb	r3, [r3, #0]
    3950:	07db      	lsls	r3, r3, #31
    3952:	d52e      	bpl.n	39b2 <USB_Handler+0xf2>
				pipe_callback_para.pipe_num = pipe_int;
    3954:	4ba6      	ldr	r3, [pc, #664]	; (3bf0 <USB_Handler+0x330>)
    3956:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    3958:	683a      	ldr	r2, [r7, #0]
    395a:	0003      	movs	r3, r0
    395c:	3308      	adds	r3, #8
    395e:	015b      	lsls	r3, r3, #5
    3960:	5c9b      	ldrb	r3, [r3, r2]
    3962:	079b      	lsls	r3, r3, #30
    3964:	0f9b      	lsrs	r3, r3, #30
    3966:	2b01      	cmp	r3, #1
    3968:	d100      	bne.n	396c <USB_Handler+0xac>
    396a:	e094      	b.n	3a96 <USB_Handler+0x1d6>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    396c:	0142      	lsls	r2, r0, #5
    396e:	4ba1      	ldr	r3, [pc, #644]	; (3bf4 <USB_Handler+0x334>)
    3970:	189b      	adds	r3, r3, r2
    3972:	685a      	ldr	r2, [r3, #4]
    3974:	0112      	lsls	r2, r2, #4
    3976:	0c92      	lsrs	r2, r2, #18
    3978:	b290      	uxth	r0, r2
    397a:	499d      	ldr	r1, [pc, #628]	; (3bf0 <USB_Handler+0x330>)
    397c:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    397e:	685a      	ldr	r2, [r3, #4]
    3980:	0492      	lsls	r2, r2, #18
    3982:	0c92      	lsrs	r2, r2, #18
    3984:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    3986:	685a      	ldr	r2, [r3, #4]
    3988:	499b      	ldr	r1, [pc, #620]	; (3bf8 <USB_Handler+0x338>)
    398a:	400a      	ands	r2, r1
    398c:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    398e:	2800      	cmp	r0, #0
    3990:	d107      	bne.n	39a2 <USB_Handler+0xe2>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    3992:	0162      	lsls	r2, r4, #5
    3994:	4b97      	ldr	r3, [pc, #604]	; (3bf4 <USB_Handler+0x334>)
    3996:	189b      	adds	r3, r3, r2
    3998:	685b      	ldr	r3, [r3, #4]
    399a:	049b      	lsls	r3, r3, #18
    399c:	0c9b      	lsrs	r3, r3, #18
    399e:	4a94      	ldr	r2, [pc, #592]	; (3bf0 <USB_Handler+0x330>)
    39a0:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    39a2:	4b8f      	ldr	r3, [pc, #572]	; (3be0 <USB_Handler+0x320>)
    39a4:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    39a6:	1ca3      	adds	r3, r4, #2
    39a8:	011b      	lsls	r3, r3, #4
    39aa:	18c3      	adds	r3, r0, r3
    39ac:	685b      	ldr	r3, [r3, #4]
    39ae:	4990      	ldr	r1, [pc, #576]	; (3bf0 <USB_Handler+0x330>)
    39b0:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    39b2:	076b      	lsls	r3, r5, #29
    39b4:	d51f      	bpl.n	39f6 <USB_Handler+0x136>
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    39b6:	4b8a      	ldr	r3, [pc, #552]	; (3be0 <USB_Handler+0x320>)
    39b8:	6818      	ldr	r0, [r3, #0]
    39ba:	6802      	ldr	r2, [r0, #0]
    39bc:	0023      	movs	r3, r4
    39be:	3308      	adds	r3, #8
    39c0:	015b      	lsls	r3, r3, #5
    39c2:	5c9b      	ldrb	r3, [r3, r2]
    39c4:	069b      	lsls	r3, r3, #26
    39c6:	0f5b      	lsrs	r3, r3, #29
    39c8:	2b02      	cmp	r3, #2
    39ca:	d075      	beq.n	3ab8 <USB_Handler+0x1f8>
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    39cc:	0023      	movs	r3, r4
    39ce:	3308      	adds	r3, #8
    39d0:	015b      	lsls	r3, r3, #5
    39d2:	5c9b      	ldrb	r3, [r3, r2]
    39d4:	069b      	lsls	r3, r3, #26
    39d6:	0f5b      	lsrs	r3, r3, #29
    39d8:	2b03      	cmp	r3, #3
    39da:	d100      	bne.n	39de <USB_Handler+0x11e>
    39dc:	e09e      	b.n	3b1c <USB_Handler+0x25c>
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    39de:	0162      	lsls	r2, r4, #5
    39e0:	4b84      	ldr	r3, [pc, #528]	; (3bf4 <USB_Handler+0x334>)
    39e2:	189b      	adds	r3, r3, r2
    39e4:	2200      	movs	r2, #0
    39e6:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    39e8:	6803      	ldr	r3, [r0, #0]
    39ea:	0022      	movs	r2, r4
    39ec:	3208      	adds	r2, #8
    39ee:	0152      	lsls	r2, r2, #5
    39f0:	189b      	adds	r3, r3, r2
    39f2:	2204      	movs	r2, #4
    39f4:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    39f6:	072b      	lsls	r3, r5, #28
    39f8:	d515      	bpl.n	3a26 <USB_Handler+0x166>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    39fa:	4a7c      	ldr	r2, [pc, #496]	; (3bec <USB_Handler+0x32c>)
    39fc:	2301      	movs	r3, #1
    39fe:	40a3      	lsls	r3, r4
    3a00:	6811      	ldr	r1, [r2, #0]
    3a02:	4399      	bics	r1, r3
    3a04:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3a06:	4b76      	ldr	r3, [pc, #472]	; (3be0 <USB_Handler+0x320>)
    3a08:	6818      	ldr	r0, [r3, #0]
    3a0a:	0023      	movs	r3, r4
    3a0c:	3308      	adds	r3, #8
    3a0e:	015b      	lsls	r3, r3, #5
    3a10:	6802      	ldr	r2, [r0, #0]
    3a12:	4694      	mov	ip, r2
    3a14:	4463      	add	r3, ip
    3a16:	2208      	movs	r2, #8
    3a18:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3a1a:	1903      	adds	r3, r0, r4
    3a1c:	33ae      	adds	r3, #174	; 0xae
    3a1e:	781b      	ldrb	r3, [r3, #0]
    3a20:	079b      	lsls	r3, r3, #30
    3a22:	d500      	bpl.n	3a26 <USB_Handler+0x166>
    3a24:	e094      	b.n	3b50 <USB_Handler+0x290>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    3a26:	06eb      	lsls	r3, r5, #27
    3a28:	d515      	bpl.n	3a56 <USB_Handler+0x196>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3a2a:	4a70      	ldr	r2, [pc, #448]	; (3bec <USB_Handler+0x32c>)
    3a2c:	2301      	movs	r3, #1
    3a2e:	40a3      	lsls	r3, r4
    3a30:	6811      	ldr	r1, [r2, #0]
    3a32:	4399      	bics	r1, r3
    3a34:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3a36:	4b6a      	ldr	r3, [pc, #424]	; (3be0 <USB_Handler+0x320>)
    3a38:	6818      	ldr	r0, [r3, #0]
    3a3a:	0023      	movs	r3, r4
    3a3c:	3308      	adds	r3, #8
    3a3e:	015b      	lsls	r3, r3, #5
    3a40:	6802      	ldr	r2, [r0, #0]
    3a42:	4694      	mov	ip, r2
    3a44:	4463      	add	r3, ip
    3a46:	2210      	movs	r2, #16
    3a48:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3a4a:	1903      	adds	r3, r0, r4
    3a4c:	33ae      	adds	r3, #174	; 0xae
    3a4e:	781b      	ldrb	r3, [r3, #0]
    3a50:	075b      	lsls	r3, r3, #29
    3a52:	d500      	bpl.n	3a56 <USB_Handler+0x196>
    3a54:	e08a      	b.n	3b6c <USB_Handler+0x2ac>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    3a56:	06ab      	lsls	r3, r5, #26
    3a58:	d400      	bmi.n	3a5c <USB_Handler+0x19c>
    3a5a:	e12f      	b.n	3cbc <USB_Handler+0x3fc>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3a5c:	4a63      	ldr	r2, [pc, #396]	; (3bec <USB_Handler+0x32c>)
    3a5e:	2301      	movs	r3, #1
    3a60:	40a3      	lsls	r3, r4
    3a62:	6811      	ldr	r1, [r2, #0]
    3a64:	4399      	bics	r1, r3
    3a66:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3a68:	4b5d      	ldr	r3, [pc, #372]	; (3be0 <USB_Handler+0x320>)
    3a6a:	6818      	ldr	r0, [r3, #0]
    3a6c:	0023      	movs	r3, r4
    3a6e:	3308      	adds	r3, #8
    3a70:	015b      	lsls	r3, r3, #5
    3a72:	6802      	ldr	r2, [r0, #0]
    3a74:	4694      	mov	ip, r2
    3a76:	4463      	add	r3, ip
    3a78:	2220      	movs	r2, #32
    3a7a:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3a7c:	1903      	adds	r3, r0, r4
    3a7e:	33ae      	adds	r3, #174	; 0xae
    3a80:	781b      	ldrb	r3, [r3, #0]
    3a82:	071b      	lsls	r3, r3, #28
    3a84:	d400      	bmi.n	3a88 <USB_Handler+0x1c8>
    3a86:	e119      	b.n	3cbc <USB_Handler+0x3fc>
				pipe_callback_para.pipe_num = pipe_int;
    3a88:	4959      	ldr	r1, [pc, #356]	; (3bf0 <USB_Handler+0x330>)
    3a8a:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    3a8c:	0124      	lsls	r4, r4, #4
    3a8e:	1904      	adds	r4, r0, r4
    3a90:	6b23      	ldr	r3, [r4, #48]	; 0x30
    3a92:	4798      	blx	r3
    3a94:	e112      	b.n	3cbc <USB_Handler+0x3fc>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    3a96:	0142      	lsls	r2, r0, #5
    3a98:	4b56      	ldr	r3, [pc, #344]	; (3bf4 <USB_Handler+0x334>)
    3a9a:	189b      	adds	r3, r3, r2
    3a9c:	685a      	ldr	r2, [r3, #4]
    3a9e:	0492      	lsls	r2, r2, #18
    3aa0:	0c92      	lsrs	r2, r2, #18
    3aa2:	4953      	ldr	r1, [pc, #332]	; (3bf0 <USB_Handler+0x330>)
    3aa4:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3aa6:	685a      	ldr	r2, [r3, #4]
    3aa8:	0112      	lsls	r2, r2, #4
    3aaa:	0c92      	lsrs	r2, r2, #18
    3aac:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    3aae:	685a      	ldr	r2, [r3, #4]
    3ab0:	0b92      	lsrs	r2, r2, #14
    3ab2:	0392      	lsls	r2, r2, #14
    3ab4:	605a      	str	r2, [r3, #4]
    3ab6:	e774      	b.n	39a2 <USB_Handler+0xe2>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    3ab8:	0023      	movs	r3, r4
    3aba:	3308      	adds	r3, #8
    3abc:	015b      	lsls	r3, r3, #5
    3abe:	5c9b      	ldrb	r3, [r3, r2]
    3ac0:	079b      	lsls	r3, r3, #30
    3ac2:	0f9b      	lsrs	r3, r3, #30
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    3ac4:	2b01      	cmp	r3, #1
    3ac6:	d181      	bne.n	39cc <USB_Handler+0x10c>
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.bit.CRCERR) {
    3ac8:	0161      	lsls	r1, r4, #5
    3aca:	4b4a      	ldr	r3, [pc, #296]	; (3bf4 <USB_Handler+0x334>)
    3acc:	185b      	adds	r3, r3, r1
    3ace:	3308      	adds	r3, #8
    3ad0:	789b      	ldrb	r3, [r3, #2]
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    3ad2:	07db      	lsls	r3, r3, #31
    3ad4:	d400      	bmi.n	3ad8 <USB_Handler+0x218>
    3ad6:	e779      	b.n	39cc <USB_Handler+0x10c>
				host_pipe_job_busy_status &= ~(1 << pipe_int);
    3ad8:	4a44      	ldr	r2, [pc, #272]	; (3bec <USB_Handler+0x32c>)
    3ada:	2301      	movs	r3, #1
    3adc:	40a3      	lsls	r3, r4
    3ade:	6811      	ldr	r1, [r2, #0]
    3ae0:	4399      	bics	r1, r3
    3ae2:	6011      	str	r1, [r2, #0]
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    3ae4:	0162      	lsls	r2, r4, #5
    3ae6:	4b43      	ldr	r3, [pc, #268]	; (3bf4 <USB_Handler+0x334>)
    3ae8:	189b      	adds	r3, r3, r2
    3aea:	2200      	movs	r2, #0
    3aec:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3aee:	0023      	movs	r3, r4
    3af0:	3308      	adds	r3, #8
    3af2:	015b      	lsls	r3, r3, #5
    3af4:	6802      	ldr	r2, [r0, #0]
    3af6:	4694      	mov	ip, r2
    3af8:	4463      	add	r3, ip
    3afa:	2204      	movs	r2, #4
    3afc:	71da      	strb	r2, [r3, #7]
				if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3afe:	1903      	adds	r3, r0, r4
    3b00:	33ae      	adds	r3, #174	; 0xae
    3b02:	781b      	ldrb	r3, [r3, #0]
    3b04:	079b      	lsls	r3, r3, #30
    3b06:	d400      	bmi.n	3b0a <USB_Handler+0x24a>
    3b08:	e775      	b.n	39f6 <USB_Handler+0x136>
					pipe_callback_para.pipe_num = pipe_int;
    3b0a:	4939      	ldr	r1, [pc, #228]	; (3bf0 <USB_Handler+0x330>)
    3b0c:	700c      	strb	r4, [r1, #0]
					pipe_callback_para.pipe_error_status = USB_STATUS_PIPE_CRC16ER;
    3b0e:	2310      	movs	r3, #16
    3b10:	704b      	strb	r3, [r1, #1]
							[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    3b12:	0123      	lsls	r3, r4, #4
    3b14:	18c3      	adds	r3, r0, r3
    3b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3b18:	4798      	blx	r3
    3b1a:	e76c      	b.n	39f6 <USB_Handler+0x136>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN) {
    3b1c:	0023      	movs	r3, r4
    3b1e:	3308      	adds	r3, #8
    3b20:	015b      	lsls	r3, r3, #5
    3b22:	5c9b      	ldrb	r3, [r3, r2]
    3b24:	079b      	lsls	r3, r3, #30
    3b26:	0f9b      	lsrs	r3, r3, #30
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    3b28:	2b01      	cmp	r3, #1
    3b2a:	d000      	beq.n	3b2e <USB_Handler+0x26e>
    3b2c:	e757      	b.n	39de <USB_Handler+0x11e>
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    3b2e:	0162      	lsls	r2, r4, #5
    3b30:	4b30      	ldr	r3, [pc, #192]	; (3bf4 <USB_Handler+0x334>)
    3b32:	189b      	adds	r3, r3, r2
    3b34:	2200      	movs	r2, #0
    3b36:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3b38:	0023      	movs	r3, r4
    3b3a:	3308      	adds	r3, #8
    3b3c:	015b      	lsls	r3, r3, #5
    3b3e:	6802      	ldr	r2, [r0, #0]
    3b40:	18d2      	adds	r2, r2, r3
    3b42:	2104      	movs	r1, #4
    3b44:	71d1      	strb	r1, [r2, #7]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSSET.reg = USB_HOST_PSTATUS_PFREEZE;
    3b46:	6802      	ldr	r2, [r0, #0]
    3b48:	18d3      	adds	r3, r2, r3
    3b4a:	2210      	movs	r2, #16
    3b4c:	715a      	strb	r2, [r3, #5]
    3b4e:	e752      	b.n	39f6 <USB_Handler+0x136>
				pipe_callback_para.pipe_num = pipe_int;
    3b50:	4927      	ldr	r1, [pc, #156]	; (3bf0 <USB_Handler+0x330>)
    3b52:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    3b54:	0162      	lsls	r2, r4, #5
    3b56:	4b27      	ldr	r3, [pc, #156]	; (3bf4 <USB_Handler+0x334>)
    3b58:	189b      	adds	r3, r3, r2
    3b5a:	89db      	ldrh	r3, [r3, #14]
    3b5c:	221f      	movs	r2, #31
    3b5e:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    3b60:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    3b62:	0123      	lsls	r3, r4, #4
    3b64:	18c3      	adds	r3, r0, r3
    3b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3b68:	4798      	blx	r3
    3b6a:	e75c      	b.n	3a26 <USB_Handler+0x166>
				pipe_callback_para.pipe_num = pipe_int;
    3b6c:	4920      	ldr	r1, [pc, #128]	; (3bf0 <USB_Handler+0x330>)
    3b6e:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3b70:	0162      	lsls	r2, r4, #5
    3b72:	4b20      	ldr	r3, [pc, #128]	; (3bf4 <USB_Handler+0x334>)
    3b74:	189b      	adds	r3, r3, r2
    3b76:	685b      	ldr	r3, [r3, #4]
    3b78:	011b      	lsls	r3, r3, #4
    3b7a:	0c9b      	lsrs	r3, r3, #18
    3b7c:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    3b7e:	0123      	lsls	r3, r4, #4
    3b80:	18c3      	adds	r3, r0, r3
    3b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3b84:	2100      	movs	r1, #0
    3b86:	4798      	blx	r3
    3b88:	e765      	b.n	3a56 <USB_Handler+0x196>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    3b8a:	8bac      	ldrh	r4, [r5, #28]
    3b8c:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    3b8e:	0763      	lsls	r3, r4, #29
    3b90:	d538      	bpl.n	3c04 <USB_Handler+0x344>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    3b92:	2304      	movs	r3, #4
    3b94:	83ab      	strh	r3, [r5, #28]
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    3b96:	4b15      	ldr	r3, [pc, #84]	; (3bec <USB_Handler+0x32c>)
    3b98:	681d      	ldr	r5, [r3, #0]
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
    3b9a:	2301      	movs	r3, #1
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    3b9c:	2001      	movs	r0, #1
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    3b9e:	2610      	movs	r6, #16
    3ba0:	e002      	b.n	3ba8 <USB_Handler+0x2e8>
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
    3ba2:	3301      	adds	r3, #1
    3ba4:	2b08      	cmp	r3, #8
    3ba6:	d029      	beq.n	3bfc <USB_Handler+0x33c>
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    3ba8:	0002      	movs	r2, r0
    3baa:	409a      	lsls	r2, r3
    3bac:	4215      	tst	r5, r2
    3bae:	d0f8      	beq.n	3ba2 <USB_Handler+0x2e2>
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    3bb0:	6839      	ldr	r1, [r7, #0]
    3bb2:	001a      	movs	r2, r3
    3bb4:	3208      	adds	r2, #8
    3bb6:	0152      	lsls	r2, r2, #5
    3bb8:	5c52      	ldrb	r2, [r2, r1]
    3bba:	0692      	lsls	r2, r2, #26
    3bbc:	0f52      	lsrs	r2, r2, #29
    3bbe:	2a03      	cmp	r2, #3
    3bc0:	d1ef      	bne.n	3ba2 <USB_Handler+0x2e2>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
    3bc2:	001a      	movs	r2, r3
    3bc4:	3208      	adds	r2, #8
    3bc6:	0152      	lsls	r2, r2, #5
    3bc8:	5c52      	ldrb	r2, [r2, r1]
    3bca:	0792      	lsls	r2, r2, #30
    3bcc:	0f92      	lsrs	r2, r2, #30
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    3bce:	2a01      	cmp	r2, #1
    3bd0:	d1e7      	bne.n	3ba2 <USB_Handler+0x2e2>
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    3bd2:	001a      	movs	r2, r3
    3bd4:	3208      	adds	r2, #8
    3bd6:	0152      	lsls	r2, r2, #5
    3bd8:	1889      	adds	r1, r1, r2
    3bda:	710e      	strb	r6, [r1, #4]
    3bdc:	e7e1      	b.n	3ba2 <USB_Handler+0x2e2>
    3bde:	46c0      	nop			; (mov r8, r8)
    3be0:	20000748 	.word	0x20000748
    3be4:	00005148 	.word	0x00005148
    3be8:	00004fb1 	.word	0x00004fb1
    3bec:	20000758 	.word	0x20000758
    3bf0:	2000075c 	.word	0x2000075c
    3bf4:	20000a44 	.word	0x20000a44
    3bf8:	f0003fff 	.word	0xf0003fff
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    3bfc:	339d      	adds	r3, #157	; 0x9d
    3bfe:	5cfb      	ldrb	r3, [r7, r3]
    3c00:	07db      	lsls	r3, r3, #31
    3c02:	d462      	bmi.n	3cca <USB_Handler+0x40a>
		if (flags & USB_HOST_INTFLAG_RST) {
    3c04:	0723      	lsls	r3, r4, #28
    3c06:	d50b      	bpl.n	3c20 <USB_Handler+0x360>
			host_pipe_job_busy_status = 0;
    3c08:	2200      	movs	r2, #0
    3c0a:	4baf      	ldr	r3, [pc, #700]	; (3ec8 <USB_Handler+0x608>)
    3c0c:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    3c0e:	4baf      	ldr	r3, [pc, #700]	; (3ecc <USB_Handler+0x60c>)
    3c10:	6818      	ldr	r0, [r3, #0]
    3c12:	2308      	movs	r3, #8
    3c14:	6802      	ldr	r2, [r0, #0]
    3c16:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    3c18:	339d      	adds	r3, #157	; 0x9d
    3c1a:	5cc3      	ldrb	r3, [r0, r3]
    3c1c:	079b      	lsls	r3, r3, #30
    3c1e:	d458      	bmi.n	3cd2 <USB_Handler+0x412>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    3c20:	0663      	lsls	r3, r4, #25
    3c22:	d508      	bpl.n	3c36 <USB_Handler+0x376>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    3c24:	4ba9      	ldr	r3, [pc, #676]	; (3ecc <USB_Handler+0x60c>)
    3c26:	6818      	ldr	r0, [r3, #0]
    3c28:	2340      	movs	r3, #64	; 0x40
    3c2a:	6802      	ldr	r2, [r0, #0]
    3c2c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    3c2e:	3365      	adds	r3, #101	; 0x65
    3c30:	5cc3      	ldrb	r3, [r0, r3]
    3c32:	06db      	lsls	r3, r3, #27
    3c34:	d450      	bmi.n	3cd8 <USB_Handler+0x418>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    3c36:	06a3      	lsls	r3, r4, #26
    3c38:	d508      	bpl.n	3c4c <USB_Handler+0x38c>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    3c3a:	4ba4      	ldr	r3, [pc, #656]	; (3ecc <USB_Handler+0x60c>)
    3c3c:	6818      	ldr	r0, [r3, #0]
    3c3e:	2320      	movs	r3, #32
    3c40:	6802      	ldr	r2, [r0, #0]
    3c42:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    3c44:	3385      	adds	r3, #133	; 0x85
    3c46:	5cc3      	ldrb	r3, [r0, r3]
    3c48:	071b      	lsls	r3, r3, #28
    3c4a:	d448      	bmi.n	3cde <USB_Handler+0x41e>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    3c4c:	06e3      	lsls	r3, r4, #27
    3c4e:	d508      	bpl.n	3c62 <USB_Handler+0x3a2>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    3c50:	4b9e      	ldr	r3, [pc, #632]	; (3ecc <USB_Handler+0x60c>)
    3c52:	6818      	ldr	r0, [r3, #0]
    3c54:	2310      	movs	r3, #16
    3c56:	6802      	ldr	r2, [r0, #0]
    3c58:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    3c5a:	3395      	adds	r3, #149	; 0x95
    3c5c:	5cc3      	ldrb	r3, [r0, r3]
    3c5e:	075b      	lsls	r3, r3, #29
    3c60:	d440      	bmi.n	3ce4 <USB_Handler+0x424>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    3c62:	0623      	lsls	r3, r4, #24
    3c64:	d50b      	bpl.n	3c7e <USB_Handler+0x3be>
			host_pipe_job_busy_status = 0;
    3c66:	2200      	movs	r2, #0
    3c68:	4b97      	ldr	r3, [pc, #604]	; (3ec8 <USB_Handler+0x608>)
    3c6a:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    3c6c:	4b97      	ldr	r3, [pc, #604]	; (3ecc <USB_Handler+0x60c>)
    3c6e:	6818      	ldr	r0, [r3, #0]
    3c70:	2380      	movs	r3, #128	; 0x80
    3c72:	6802      	ldr	r2, [r0, #0]
    3c74:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    3c76:	3325      	adds	r3, #37	; 0x25
    3c78:	5cc3      	ldrb	r3, [r0, r3]
    3c7a:	069b      	lsls	r3, r3, #26
    3c7c:	d435      	bmi.n	3cea <USB_Handler+0x42a>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    3c7e:	05e3      	lsls	r3, r4, #23
    3c80:	d50c      	bpl.n	3c9c <USB_Handler+0x3dc>
			host_pipe_job_busy_status = 0;
    3c82:	2200      	movs	r2, #0
    3c84:	4b90      	ldr	r3, [pc, #576]	; (3ec8 <USB_Handler+0x608>)
    3c86:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    3c88:	4b90      	ldr	r3, [pc, #576]	; (3ecc <USB_Handler+0x60c>)
    3c8a:	6818      	ldr	r0, [r3, #0]
    3c8c:	2380      	movs	r3, #128	; 0x80
    3c8e:	005b      	lsls	r3, r3, #1
    3c90:	6802      	ldr	r2, [r0, #0]
    3c92:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    3c94:	3b5b      	subs	r3, #91	; 0x5b
    3c96:	5cc3      	ldrb	r3, [r0, r3]
    3c98:	065b      	lsls	r3, r3, #25
    3c9a:	d429      	bmi.n	3cf0 <USB_Handler+0x430>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    3c9c:	05a3      	lsls	r3, r4, #22
    3c9e:	d50d      	bpl.n	3cbc <USB_Handler+0x3fc>
			host_pipe_job_busy_status = 0;
    3ca0:	2200      	movs	r2, #0
    3ca2:	4b89      	ldr	r3, [pc, #548]	; (3ec8 <USB_Handler+0x608>)
    3ca4:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    3ca6:	4b89      	ldr	r3, [pc, #548]	; (3ecc <USB_Handler+0x60c>)
    3ca8:	6818      	ldr	r0, [r3, #0]
    3caa:	2380      	movs	r3, #128	; 0x80
    3cac:	009b      	lsls	r3, r3, #2
    3cae:	6802      	ldr	r2, [r0, #0]
    3cb0:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    3cb2:	3b5c      	subs	r3, #92	; 0x5c
    3cb4:	3bff      	subs	r3, #255	; 0xff
    3cb6:	5cc3      	ldrb	r3, [r0, r3]
    3cb8:	2b7f      	cmp	r3, #127	; 0x7f
    3cba:	d81c      	bhi.n	3cf6 <USB_Handler+0x436>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    3cbc:	b003      	add	sp, #12
    3cbe:	bc3c      	pop	{r2, r3, r4, r5}
    3cc0:	4690      	mov	r8, r2
    3cc2:	4699      	mov	r9, r3
    3cc4:	46a2      	mov	sl, r4
    3cc6:	46ab      	mov	fp, r5
    3cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    3cca:	687b      	ldr	r3, [r7, #4]
    3ccc:	0038      	movs	r0, r7
    3cce:	4798      	blx	r3
    3cd0:	e798      	b.n	3c04 <USB_Handler+0x344>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    3cd2:	6883      	ldr	r3, [r0, #8]
    3cd4:	4798      	blx	r3
    3cd6:	e7a3      	b.n	3c20 <USB_Handler+0x360>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    3cd8:	6943      	ldr	r3, [r0, #20]
    3cda:	4798      	blx	r3
    3cdc:	e7ab      	b.n	3c36 <USB_Handler+0x376>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    3cde:	6903      	ldr	r3, [r0, #16]
    3ce0:	4798      	blx	r3
    3ce2:	e7b3      	b.n	3c4c <USB_Handler+0x38c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    3ce4:	68c3      	ldr	r3, [r0, #12]
    3ce6:	4798      	blx	r3
    3ce8:	e7bb      	b.n	3c62 <USB_Handler+0x3a2>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    3cea:	6983      	ldr	r3, [r0, #24]
    3cec:	4798      	blx	r3
    3cee:	e7c6      	b.n	3c7e <USB_Handler+0x3be>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    3cf0:	69c3      	ldr	r3, [r0, #28]
    3cf2:	4798      	blx	r3
    3cf4:	e7d2      	b.n	3c9c <USB_Handler+0x3dc>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    3cf6:	6a03      	ldr	r3, [r0, #32]
    3cf8:	4798      	blx	r3
    3cfa:	e7df      	b.n	3cbc <USB_Handler+0x3fc>
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    3cfc:	0023      	movs	r3, r4
    3cfe:	332e      	adds	r3, #46	; 0x2e
    3d00:	009b      	lsls	r3, r3, #2
    3d02:	4642      	mov	r2, r8
    3d04:	6812      	ldr	r2, [r2, #0]
    3d06:	589b      	ldr	r3, [r3, r2]
    3d08:	4971      	ldr	r1, [pc, #452]	; (3ed0 <USB_Handler+0x610>)
    3d0a:	4642      	mov	r2, r8
    3d0c:	6810      	ldr	r0, [r2, #0]
    3d0e:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    3d10:	3401      	adds	r4, #1
    3d12:	2c07      	cmp	r4, #7
    3d14:	d0d2      	beq.n	3cbc <USB_Handler+0x3fc>
			if (flags & _usb_device_irq_bits[i]) {
    3d16:	0063      	lsls	r3, r4, #1
    3d18:	5bdb      	ldrh	r3, [r3, r7]
    3d1a:	4233      	tst	r3, r6
    3d1c:	d003      	beq.n	3d26 <USB_Handler+0x466>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    3d1e:	464a      	mov	r2, r9
    3d20:	6812      	ldr	r2, [r2, #0]
    3d22:	6812      	ldr	r2, [r2, #0]
    3d24:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    3d26:	422b      	tst	r3, r5
    3d28:	d0f2      	beq.n	3d10 <USB_Handler+0x450>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    3d2a:	2c06      	cmp	r4, #6
    3d2c:	d1e6      	bne.n	3cfc <USB_Handler+0x43c>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    3d2e:	4b69      	ldr	r3, [pc, #420]	; (3ed4 <USB_Handler+0x614>)
    3d30:	891b      	ldrh	r3, [r3, #8]
    3d32:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    3d34:	2280      	movs	r2, #128	; 0x80
    3d36:	0052      	lsls	r2, r2, #1
    3d38:	4013      	ands	r3, r2
    3d3a:	4a65      	ldr	r2, [pc, #404]	; (3ed0 <USB_Handler+0x610>)
    3d3c:	6013      	str	r3, [r2, #0]
    3d3e:	e7dd      	b.n	3cfc <USB_Handler+0x43c>
    3d40:	003c      	movs	r4, r7
    3d42:	3459      	adds	r4, #89	; 0x59
    3d44:	34ff      	adds	r4, #255	; 0xff
	if (0 == ep_inst) {
    3d46:	2300      	movs	r3, #0
			if (ep_inst & (1 << i)) {
    3d48:	2201      	movs	r2, #1
    3d4a:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    3d4c:	325f      	adds	r2, #95	; 0x5f
    3d4e:	4691      	mov	r9, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3d50:	3a50      	subs	r2, #80	; 0x50
    3d52:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    3d54:	3a0d      	subs	r2, #13
    3d56:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    3d58:	46b8      	mov	r8, r7
    3d5a:	002f      	movs	r7, r5
    3d5c:	e0c3      	b.n	3ee6 <USB_Handler+0x626>
    3d5e:	002a      	movs	r2, r5
    3d60:	003d      	movs	r5, r7
    3d62:	4647      	mov	r7, r8
    3d64:	4690      	mov	r8, r2
    3d66:	015b      	lsls	r3, r3, #5
    3d68:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    3d6a:	2308      	movs	r3, #8
    3d6c:	33ff      	adds	r3, #255	; 0xff
    3d6e:	5ceb      	ldrb	r3, [r5, r3]
    3d70:	065b      	lsls	r3, r3, #25
    3d72:	d515      	bpl.n	3da0 <USB_Handler+0x4e0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    3d74:	2240      	movs	r2, #64	; 0x40
    3d76:	2308      	movs	r3, #8
    3d78:	33ff      	adds	r3, #255	; 0xff
    3d7a:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    3d7c:	3b88      	subs	r3, #136	; 0x88
    3d7e:	3bff      	subs	r3, #255	; 0xff
    3d80:	4642      	mov	r2, r8
    3d82:	4313      	orrs	r3, r2
    3d84:	4a54      	ldr	r2, [pc, #336]	; (3ed8 <USB_Handler+0x618>)
    3d86:	7193      	strb	r3, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    3d88:	2360      	movs	r3, #96	; 0x60
    3d8a:	420b      	tst	r3, r1
    3d8c:	d096      	beq.n	3cbc <USB_Handler+0x3fc>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    3d8e:	9b01      	ldr	r3, [sp, #4]
    3d90:	011b      	lsls	r3, r3, #4
    3d92:	18fb      	adds	r3, r7, r3
    3d94:	33e0      	adds	r3, #224	; 0xe0
    3d96:	681b      	ldr	r3, [r3, #0]
    3d98:	494f      	ldr	r1, [pc, #316]	; (3ed8 <USB_Handler+0x618>)
    3d9a:	0038      	movs	r0, r7
    3d9c:	4798      	blx	r3
    3d9e:	e78d      	b.n	3cbc <USB_Handler+0x3fc>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    3da0:	2308      	movs	r3, #8
    3da2:	33ff      	adds	r3, #255	; 0xff
    3da4:	5ceb      	ldrb	r3, [r5, r3]
    3da6:	069b      	lsls	r3, r3, #26
    3da8:	d5ee      	bpl.n	3d88 <USB_Handler+0x4c8>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    3daa:	2220      	movs	r2, #32
    3dac:	2308      	movs	r3, #8
    3dae:	33ff      	adds	r3, #255	; 0xff
    3db0:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    3db2:	4b49      	ldr	r3, [pc, #292]	; (3ed8 <USB_Handler+0x618>)
    3db4:	4642      	mov	r2, r8
    3db6:	719a      	strb	r2, [r3, #6]
    3db8:	e7e6      	b.n	3d88 <USB_Handler+0x4c8>
    3dba:	003d      	movs	r5, r7
    3dbc:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    3dbe:	9a01      	ldr	r2, [sp, #4]
    3dc0:	0013      	movs	r3, r2
    3dc2:	3308      	adds	r3, #8
    3dc4:	015b      	lsls	r3, r3, #5
    3dc6:	18ed      	adds	r5, r5, r3
    3dc8:	2310      	movs	r3, #16
    3dca:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    3dcc:	18bb      	adds	r3, r7, r2
    3dce:	3361      	adds	r3, #97	; 0x61
    3dd0:	33ff      	adds	r3, #255	; 0xff
    3dd2:	781b      	ldrb	r3, [r3, #0]
    3dd4:	06db      	lsls	r3, r3, #27
    3dd6:	d400      	bmi.n	3dda <USB_Handler+0x51a>
    3dd8:	e770      	b.n	3cbc <USB_Handler+0x3fc>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    3dda:	0010      	movs	r0, r2
    3ddc:	0152      	lsls	r2, r2, #5
    3dde:	4b3d      	ldr	r3, [pc, #244]	; (3ed4 <USB_Handler+0x614>)
    3de0:	189b      	adds	r3, r3, r2
    3de2:	685b      	ldr	r3, [r3, #4]
    3de4:	049b      	lsls	r3, r3, #18
    3de6:	0c9b      	lsrs	r3, r3, #18
    3de8:	493b      	ldr	r1, [pc, #236]	; (3ed8 <USB_Handler+0x618>)
    3dea:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    3dec:	0103      	lsls	r3, r0, #4
    3dee:	18fb      	adds	r3, r7, r3
    3df0:	33dc      	adds	r3, #220	; 0xdc
    3df2:	681b      	ldr	r3, [r3, #0]
    3df4:	4640      	mov	r0, r8
    3df6:	4798      	blx	r3
    3df8:	e760      	b.n	3cbc <USB_Handler+0x3fc>
    3dfa:	002a      	movs	r2, r5
    3dfc:	003d      	movs	r5, r7
    3dfe:	4647      	mov	r7, r8
    3e00:	4690      	mov	r8, r2
    3e02:	015b      	lsls	r3, r3, #5
    3e04:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    3e06:	2308      	movs	r3, #8
    3e08:	33ff      	adds	r3, #255	; 0xff
    3e0a:	5ceb      	ldrb	r3, [r5, r3]
    3e0c:	079b      	lsls	r3, r3, #30
    3e0e:	d51e      	bpl.n	3e4e <USB_Handler+0x58e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    3e10:	2202      	movs	r2, #2
    3e12:	2308      	movs	r3, #8
    3e14:	33ff      	adds	r3, #255	; 0xff
    3e16:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    3e18:	482f      	ldr	r0, [pc, #188]	; (3ed8 <USB_Handler+0x618>)
    3e1a:	3b88      	subs	r3, #136	; 0x88
    3e1c:	3bff      	subs	r3, #255	; 0xff
    3e1e:	4642      	mov	r2, r8
    3e20:	4313      	orrs	r3, r2
    3e22:	7183      	strb	r3, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    3e24:	9b01      	ldr	r3, [sp, #4]
    3e26:	015a      	lsls	r2, r3, #5
    3e28:	4b2a      	ldr	r3, [pc, #168]	; (3ed4 <USB_Handler+0x614>)
    3e2a:	189b      	adds	r3, r3, r2
    3e2c:	3310      	adds	r3, #16
    3e2e:	685b      	ldr	r3, [r3, #4]
    3e30:	049b      	lsls	r3, r3, #18
    3e32:	0c9b      	lsrs	r3, r3, #18
    3e34:	8043      	strh	r3, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    3e36:	078b      	lsls	r3, r1, #30
    3e38:	d100      	bne.n	3e3c <USB_Handler+0x57c>
    3e3a:	e73f      	b.n	3cbc <USB_Handler+0x3fc>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    3e3c:	9b01      	ldr	r3, [sp, #4]
    3e3e:	330d      	adds	r3, #13
    3e40:	011b      	lsls	r3, r3, #4
    3e42:	18fb      	adds	r3, r7, r3
    3e44:	685b      	ldr	r3, [r3, #4]
    3e46:	4924      	ldr	r1, [pc, #144]	; (3ed8 <USB_Handler+0x618>)
    3e48:	0038      	movs	r0, r7
    3e4a:	4798      	blx	r3
    3e4c:	e736      	b.n	3cbc <USB_Handler+0x3fc>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    3e4e:	2308      	movs	r3, #8
    3e50:	33ff      	adds	r3, #255	; 0xff
    3e52:	5ceb      	ldrb	r3, [r5, r3]
    3e54:	07db      	lsls	r3, r3, #31
    3e56:	d5ee      	bpl.n	3e36 <USB_Handler+0x576>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    3e58:	2201      	movs	r2, #1
    3e5a:	2308      	movs	r3, #8
    3e5c:	33ff      	adds	r3, #255	; 0xff
    3e5e:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    3e60:	481d      	ldr	r0, [pc, #116]	; (3ed8 <USB_Handler+0x618>)
    3e62:	4643      	mov	r3, r8
    3e64:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    3e66:	9b01      	ldr	r3, [sp, #4]
    3e68:	015b      	lsls	r3, r3, #5
    3e6a:	4a1a      	ldr	r2, [pc, #104]	; (3ed4 <USB_Handler+0x614>)
    3e6c:	18d2      	adds	r2, r2, r3
    3e6e:	6853      	ldr	r3, [r2, #4]
    3e70:	049b      	lsls	r3, r3, #18
    3e72:	0c9b      	lsrs	r3, r3, #18
    3e74:	8003      	strh	r3, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    3e76:	6853      	ldr	r3, [r2, #4]
    3e78:	011b      	lsls	r3, r3, #4
    3e7a:	0c9b      	lsrs	r3, r3, #18
    3e7c:	8083      	strh	r3, [r0, #4]
    3e7e:	e7da      	b.n	3e36 <USB_Handler+0x576>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    3e80:	2208      	movs	r2, #8
    3e82:	32ff      	adds	r2, #255	; 0xff
    3e84:	5c9a      	ldrb	r2, [r3, r2]
    3e86:	0752      	lsls	r2, r2, #29
    3e88:	d579      	bpl.n	3f7e <USB_Handler+0x6be>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    3e8a:	2004      	movs	r0, #4
    3e8c:	2208      	movs	r2, #8
    3e8e:	32ff      	adds	r2, #255	; 0xff
    3e90:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    3e92:	9801      	ldr	r0, [sp, #4]
    3e94:	0142      	lsls	r2, r0, #5
    3e96:	4b0f      	ldr	r3, [pc, #60]	; (3ed4 <USB_Handler+0x614>)
    3e98:	189b      	adds	r3, r3, r2
    3e9a:	7a9b      	ldrb	r3, [r3, #10]
    3e9c:	079b      	lsls	r3, r3, #30
    3e9e:	d505      	bpl.n	3eac <USB_Handler+0x5ec>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    3ea0:	4b0c      	ldr	r3, [pc, #48]	; (3ed4 <USB_Handler+0x614>)
    3ea2:	189b      	adds	r3, r3, r2
    3ea4:	7a9a      	ldrb	r2, [r3, #10]
    3ea6:	2002      	movs	r0, #2
    3ea8:	4382      	bics	r2, r0
    3eaa:	729a      	strb	r2, [r3, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    3eac:	4b0a      	ldr	r3, [pc, #40]	; (3ed8 <USB_Handler+0x618>)
    3eae:	4642      	mov	r2, r8
    3eb0:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    3eb2:	9b01      	ldr	r3, [sp, #4]
    3eb4:	3308      	adds	r3, #8
    3eb6:	015b      	lsls	r3, r3, #5
    3eb8:	683a      	ldr	r2, [r7, #0]
    3eba:	4694      	mov	ip, r2
    3ebc:	4463      	add	r3, ip
    3ebe:	79db      	ldrb	r3, [r3, #7]
    3ec0:	07db      	lsls	r3, r3, #31
    3ec2:	d55c      	bpl.n	3f7e <USB_Handler+0x6be>
    3ec4:	e6fa      	b.n	3cbc <USB_Handler+0x3fc>
    3ec6:	46c0      	nop			; (mov r8, r8)
    3ec8:	20000758 	.word	0x20000758
    3ecc:	20000748 	.word	0x20000748
    3ed0:	2000074c 	.word	0x2000074c
    3ed4:	20000a44 	.word	0x20000a44
    3ed8:	20000750 	.word	0x20000750
    3edc:	3301      	adds	r3, #1
    3ede:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    3ee0:	2b08      	cmp	r3, #8
    3ee2:	d100      	bne.n	3ee6 <USB_Handler+0x626>
    3ee4:	e6ea      	b.n	3cbc <USB_Handler+0x3fc>
    3ee6:	b2dd      	uxtb	r5, r3
			if (ep_inst & (1 << i)) {
    3ee8:	9301      	str	r3, [sp, #4]
    3eea:	0032      	movs	r2, r6
    3eec:	411a      	asrs	r2, r3
    3eee:	4661      	mov	r1, ip
    3ef0:	4211      	tst	r1, r2
    3ef2:	d0f3      	beq.n	3edc <USB_Handler+0x61c>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    3ef4:	001a      	movs	r2, r3
    3ef6:	3208      	adds	r2, #8
    3ef8:	0152      	lsls	r2, r2, #5
    3efa:	18ba      	adds	r2, r7, r2
    3efc:	79d2      	ldrb	r2, [r2, #7]
    3efe:	b2d2      	uxtb	r2, r2
    3f00:	7a21      	ldrb	r1, [r4, #8]
    3f02:	4011      	ands	r1, r2
    3f04:	7820      	ldrb	r0, [r4, #0]
    3f06:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    3f08:	4648      	mov	r0, r9
    3f0a:	4210      	tst	r0, r2
    3f0c:	d000      	beq.n	3f10 <USB_Handler+0x650>
    3f0e:	e726      	b.n	3d5e <USB_Handler+0x49e>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3f10:	4650      	mov	r0, sl
    3f12:	4210      	tst	r0, r2
    3f14:	d000      	beq.n	3f18 <USB_Handler+0x658>
    3f16:	e750      	b.n	3dba <USB_Handler+0x4fa>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    3f18:	4658      	mov	r0, fp
    3f1a:	4210      	tst	r0, r2
    3f1c:	d000      	beq.n	3f20 <USB_Handler+0x660>
    3f1e:	e76c      	b.n	3dfa <USB_Handler+0x53a>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    3f20:	200c      	movs	r0, #12
    3f22:	4210      	tst	r0, r2
    3f24:	d0da      	beq.n	3edc <USB_Handler+0x61c>
    3f26:	002a      	movs	r2, r5
    3f28:	003d      	movs	r5, r7
    3f2a:	4647      	mov	r7, r8
    3f2c:	4690      	mov	r8, r2
    3f2e:	015b      	lsls	r3, r3, #5
    3f30:	18eb      	adds	r3, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    3f32:	2208      	movs	r2, #8
    3f34:	32ff      	adds	r2, #255	; 0xff
    3f36:	5c9a      	ldrb	r2, [r3, r2]
    3f38:	0712      	lsls	r2, r2, #28
    3f3a:	d5a1      	bpl.n	3e80 <USB_Handler+0x5c0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    3f3c:	3804      	subs	r0, #4
    3f3e:	2208      	movs	r2, #8
    3f40:	32ff      	adds	r2, #255	; 0xff
    3f42:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    3f44:	9801      	ldr	r0, [sp, #4]
    3f46:	0142      	lsls	r2, r0, #5
    3f48:	4b13      	ldr	r3, [pc, #76]	; (3f98 <USB_Handler+0x6d8>)
    3f4a:	189b      	adds	r3, r3, r2
    3f4c:	7e9b      	ldrb	r3, [r3, #26]
    3f4e:	079b      	lsls	r3, r3, #30
    3f50:	d505      	bpl.n	3f5e <USB_Handler+0x69e>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    3f52:	4b11      	ldr	r3, [pc, #68]	; (3f98 <USB_Handler+0x6d8>)
    3f54:	189b      	adds	r3, r3, r2
    3f56:	7e9a      	ldrb	r2, [r3, #26]
    3f58:	2002      	movs	r0, #2
    3f5a:	4382      	bics	r2, r0
    3f5c:	769a      	strb	r2, [r3, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    3f5e:	2380      	movs	r3, #128	; 0x80
    3f60:	425b      	negs	r3, r3
    3f62:	4642      	mov	r2, r8
    3f64:	4313      	orrs	r3, r2
    3f66:	4a0d      	ldr	r2, [pc, #52]	; (3f9c <USB_Handler+0x6dc>)
    3f68:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    3f6a:	9b01      	ldr	r3, [sp, #4]
    3f6c:	3308      	adds	r3, #8
    3f6e:	015b      	lsls	r3, r3, #5
    3f70:	683a      	ldr	r2, [r7, #0]
    3f72:	4694      	mov	ip, r2
    3f74:	4463      	add	r3, ip
    3f76:	79db      	ldrb	r3, [r3, #7]
    3f78:	079b      	lsls	r3, r3, #30
    3f7a:	d500      	bpl.n	3f7e <USB_Handler+0x6be>
    3f7c:	e69e      	b.n	3cbc <USB_Handler+0x3fc>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    3f7e:	230c      	movs	r3, #12
    3f80:	420b      	tst	r3, r1
    3f82:	d100      	bne.n	3f86 <USB_Handler+0x6c6>
    3f84:	e69a      	b.n	3cbc <USB_Handler+0x3fc>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    3f86:	9b01      	ldr	r3, [sp, #4]
    3f88:	011b      	lsls	r3, r3, #4
    3f8a:	18fb      	adds	r3, r7, r3
    3f8c:	33d8      	adds	r3, #216	; 0xd8
    3f8e:	681b      	ldr	r3, [r3, #0]
    3f90:	4902      	ldr	r1, [pc, #8]	; (3f9c <USB_Handler+0x6dc>)
    3f92:	0038      	movs	r0, r7
    3f94:	4798      	blx	r3
    3f96:	e691      	b.n	3cbc <USB_Handler+0x3fc>
    3f98:	20000a44 	.word	0x20000a44
    3f9c:	20000750 	.word	0x20000750

00003fa0 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    3fa0:	2300      	movs	r3, #0
    3fa2:	7003      	strb	r3, [r0, #0]
	module_config->run_in_standby = 1;
    3fa4:	3301      	adds	r3, #1
    3fa6:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_3;
    3fa8:	2203      	movs	r2, #3
    3faa:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    3fac:	70c3      	strb	r3, [r0, #3]
}
    3fae:	4770      	bx	lr

00003fb0 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    3fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fb2:	46ce      	mov	lr, r9
    3fb4:	4647      	mov	r7, r8
    3fb6:	b580      	push	{r7, lr}
    3fb8:	b083      	sub	sp, #12
    3fba:	0004      	movs	r4, r0
    3fbc:	000d      	movs	r5, r1
    3fbe:	0016      	movs	r6, r2
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAML22
	host_pipe_job_busy_status = 0;
    3fc0:	2300      	movs	r3, #0
    3fc2:	4a67      	ldr	r2, [pc, #412]	; (4160 <usb_init+0x1b0>)
    3fc4:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    3fc6:	4a67      	ldr	r2, [pc, #412]	; (4164 <usb_init+0x1b4>)
    3fc8:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    3fca:	6021      	str	r1, [r4, #0]
			MCLK->APBBMASK.reg |= mask;
    3fcc:	4866      	ldr	r0, [pc, #408]	; (4168 <usb_init+0x1b8>)
    3fce:	6982      	ldr	r2, [r0, #24]
    3fd0:	2101      	movs	r1, #1
    3fd2:	430a      	orrs	r2, r1
    3fd4:	6182      	str	r2, [r0, #24]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3fd6:	af01      	add	r7, sp, #4
    3fd8:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3fda:	70b9      	strb	r1, [r7, #2]
	config->powersave    = false;
    3fdc:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    3fde:	3306      	adds	r3, #6
    3fe0:	4699      	mov	r9, r3
    3fe2:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    3fe4:	0039      	movs	r1, r7
    3fe6:	2018      	movs	r0, #24
    3fe8:	4b60      	ldr	r3, [pc, #384]	; (416c <usb_init+0x1bc>)
    3fea:	4698      	mov	r8, r3
    3fec:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    3fee:	464b      	mov	r3, r9
    3ff0:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    3ff2:	0039      	movs	r1, r7
    3ff4:	2019      	movs	r0, #25
    3ff6:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    3ff8:	78b3      	ldrb	r3, [r6, #2]
    3ffa:	466a      	mov	r2, sp
    3ffc:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    3ffe:	4669      	mov	r1, sp
    4000:	2004      	movs	r0, #4
    4002:	4b5b      	ldr	r3, [pc, #364]	; (4170 <usb_init+0x1c0>)
    4004:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    4006:	2004      	movs	r0, #4
    4008:	4b5a      	ldr	r3, [pc, #360]	; (4174 <usb_init+0x1c4>)
    400a:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    400c:	782b      	ldrb	r3, [r5, #0]
    400e:	2201      	movs	r2, #1
    4010:	4313      	orrs	r3, r2
    4012:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    4014:	78ab      	ldrb	r3, [r5, #2]
    4016:	07db      	lsls	r3, r3, #31
    4018:	d4fc      	bmi.n	4014 <usb_init+0x64>
		/* Sync wait */
	}

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    401a:	4b57      	ldr	r3, [pc, #348]	; (4178 <usb_init+0x1c8>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    401c:	681b      	ldr	r3, [r3, #0]
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    401e:	039b      	lsls	r3, r3, #14
    4020:	0edb      	lsrs	r3, r3, #27
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    4022:	2b1f      	cmp	r3, #31
    4024:	d100      	bne.n	4028 <usb_init+0x78>
    4026:	e08f      	b.n	4148 <usb_init+0x198>
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    4028:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    402a:	019b      	lsls	r3, r3, #6
    402c:	4953      	ldr	r1, [pc, #332]	; (417c <usb_init+0x1cc>)
    402e:	400a      	ands	r2, r1
    4030:	4313      	orrs	r3, r2
    4032:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    4034:	4b50      	ldr	r3, [pc, #320]	; (4178 <usb_init+0x1c8>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    4036:	681b      	ldr	r3, [r3, #0]
    4038:	025b      	lsls	r3, r3, #9
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    403a:	0edb      	lsrs	r3, r3, #27
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    403c:	2b1f      	cmp	r3, #31
    403e:	d100      	bne.n	4042 <usb_init+0x92>
    4040:	e084      	b.n	414c <usb_init+0x19c>
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    4042:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    4044:	211f      	movs	r1, #31
    4046:	438a      	bics	r2, r1
    4048:	4313      	orrs	r3, r2
    404a:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    404c:	4b4a      	ldr	r3, [pc, #296]	; (4178 <usb_init+0x1c8>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    404e:	681b      	ldr	r3, [r3, #0]
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    4050:	019b      	lsls	r3, r3, #6
    4052:	0f5b      	lsrs	r3, r3, #29
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    4054:	2b07      	cmp	r3, #7
    4056:	d100      	bne.n	405a <usb_init+0xaa>
    4058:	e07a      	b.n	4150 <usb_init+0x1a0>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    405a:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    405c:	031b      	lsls	r3, r3, #12
    405e:	4948      	ldr	r1, [pc, #288]	; (4180 <usb_init+0x1d0>)
    4060:	400a      	ands	r2, r1
    4062:	4313      	orrs	r3, r2
    4064:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    4066:	7832      	ldrb	r2, [r6, #0]
    4068:	7829      	ldrb	r1, [r5, #0]
    406a:	01d2      	lsls	r2, r2, #7
    406c:	237f      	movs	r3, #127	; 0x7f
    406e:	400b      	ands	r3, r1
    4070:	4313      	orrs	r3, r2
    4072:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    4074:	7871      	ldrb	r1, [r6, #1]
    4076:	782b      	ldrb	r3, [r5, #0]
    4078:	2201      	movs	r2, #1
    407a:	400a      	ands	r2, r1
    407c:	0092      	lsls	r2, r2, #2
    407e:	2104      	movs	r1, #4
    4080:	438b      	bics	r3, r1
    4082:	4313      	orrs	r3, r2
    4084:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    4086:	4b3f      	ldr	r3, [pc, #252]	; (4184 <usb_init+0x1d4>)
    4088:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    408a:	78f3      	ldrb	r3, [r6, #3]
    408c:	2b01      	cmp	r3, #1
    408e:	d061      	beq.n	4154 <usb_init+0x1a4>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    4090:	2b00      	cmp	r3, #0
    4092:	d106      	bne.n	40a2 <usb_init+0xf2>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    4094:	6822      	ldr	r2, [r4, #0]
    4096:	8913      	ldrh	r3, [r2, #8]
    4098:	210c      	movs	r1, #12
    409a:	438b      	bics	r3, r1
    409c:	2104      	movs	r1, #4
    409e:	430b      	orrs	r3, r1
    40a0:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    40a2:	2280      	movs	r2, #128	; 0x80
    40a4:	0052      	lsls	r2, r2, #1
    40a6:	2100      	movs	r1, #0
    40a8:	4836      	ldr	r0, [pc, #216]	; (4184 <usb_init+0x1d4>)
    40aa:	4b37      	ldr	r3, [pc, #220]	; (4188 <usb_init+0x1d8>)
    40ac:	4798      	blx	r3
    40ae:	1d23      	adds	r3, r4, #4
    40b0:	0021      	movs	r1, r4
    40b2:	3124      	adds	r1, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAML22
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    40b4:	2200      	movs	r2, #0
    40b6:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    40b8:	428b      	cmp	r3, r1
    40ba:	d1fc      	bne.n	40b6 <usb_init+0x106>
    40bc:	0021      	movs	r1, r4
    40be:	31a4      	adds	r1, #164	; 0xa4
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    40c0:	2200      	movs	r2, #0
    40c2:	601a      	str	r2, [r3, #0]
    40c4:	605a      	str	r2, [r3, #4]
    40c6:	609a      	str	r2, [r3, #8]
    40c8:	60da      	str	r2, [r3, #12]
    40ca:	3310      	adds	r3, #16
	for (i = 0; i < USB_PIPE_NUM; i++) {
    40cc:	428b      	cmp	r3, r1
    40ce:	d1f8      	bne.n	40c2 <usb_init+0x112>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    40d0:	2300      	movs	r3, #0
    40d2:	22a4      	movs	r2, #164	; 0xa4
    40d4:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    40d6:	3201      	adds	r2, #1
    40d8:	54a3      	strb	r3, [r4, r2]
    40da:	0023      	movs	r3, r4
    40dc:	33a6      	adds	r3, #166	; 0xa6
    40de:	0021      	movs	r1, r4
    40e0:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    40e2:	2200      	movs	r2, #0
    40e4:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    40e6:	721a      	strb	r2, [r3, #8]
    40e8:	3301      	adds	r3, #1
	for (i = 0; i < USB_PIPE_NUM; i++) {
    40ea:	4299      	cmp	r1, r3
    40ec:	d1fa      	bne.n	40e4 <usb_init+0x134>
    40ee:	0023      	movs	r3, r4
    40f0:	33b8      	adds	r3, #184	; 0xb8
    40f2:	0021      	movs	r1, r4
    40f4:	31d4      	adds	r1, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    40f6:	2200      	movs	r2, #0
    40f8:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    40fa:	428b      	cmp	r3, r1
    40fc:	d1fc      	bne.n	40f8 <usb_init+0x148>
    40fe:	0021      	movs	r1, r4
    4100:	3155      	adds	r1, #85	; 0x55
    4102:	31ff      	adds	r1, #255	; 0xff
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    4104:	2200      	movs	r2, #0
    4106:	601a      	str	r2, [r3, #0]
    4108:	605a      	str	r2, [r3, #4]
    410a:	609a      	str	r2, [r3, #8]
    410c:	60da      	str	r2, [r3, #12]
    410e:	3310      	adds	r3, #16
	for (i = 0; i < USB_EPT_NUM; i++) {
    4110:	428b      	cmp	r3, r1
    4112:	d1f8      	bne.n	4106 <usb_init+0x156>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    4114:	2300      	movs	r3, #0
    4116:	22aa      	movs	r2, #170	; 0xaa
    4118:	0052      	lsls	r2, r2, #1
    411a:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    411c:	3202      	adds	r2, #2
    411e:	52a3      	strh	r3, [r4, r2]
    4120:	0023      	movs	r3, r4
    4122:	3359      	adds	r3, #89	; 0x59
    4124:	33ff      	adds	r3, #255	; 0xff
    4126:	3461      	adds	r4, #97	; 0x61
    4128:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    412a:	2200      	movs	r2, #0
    412c:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    412e:	721a      	strb	r2, [r3, #8]
    4130:	3301      	adds	r3, #1
	for (j = 0; j < USB_EPT_NUM; j++) {
    4132:	42a3      	cmp	r3, r4
    4134:	d1fa      	bne.n	412c <usb_init+0x17c>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4136:	2240      	movs	r2, #64	; 0x40
    4138:	4b14      	ldr	r3, [pc, #80]	; (418c <usb_init+0x1dc>)
    413a:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    413c:	2000      	movs	r0, #0
    413e:	b003      	add	sp, #12
    4140:	bc0c      	pop	{r2, r3}
    4142:	4690      	mov	r8, r2
    4144:	4699      	mov	r9, r3
    4146:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pad_transn = 5;
    4148:	3b1a      	subs	r3, #26
    414a:	e76d      	b.n	4028 <usb_init+0x78>
		pad_transp = 29;
    414c:	3b02      	subs	r3, #2
    414e:	e778      	b.n	4042 <usb_init+0x92>
		pad_trim = 3;
    4150:	3b04      	subs	r3, #4
    4152:	e782      	b.n	405a <usb_init+0xaa>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    4154:	6822      	ldr	r2, [r4, #0]
    4156:	8913      	ldrh	r3, [r2, #8]
    4158:	3108      	adds	r1, #8
    415a:	438b      	bics	r3, r1
    415c:	8113      	strh	r3, [r2, #8]
    415e:	e7a0      	b.n	40a2 <usb_init+0xf2>
    4160:	20000758 	.word	0x20000758
    4164:	20000748 	.word	0x20000748
    4168:	40000400 	.word	0x40000400
    416c:	000024cd 	.word	0x000024cd
    4170:	000023d1 	.word	0x000023d1
    4174:	00002361 	.word	0x00002361
    4178:	0080601c 	.word	0x0080601c
    417c:	fffff83f 	.word	0xfffff83f
    4180:	ffff8fff 	.word	0xffff8fff
    4184:	20000a44 	.word	0x20000a44
    4188:	0000509f 	.word	0x0000509f
    418c:	e000e100 	.word	0xe000e100

00004190 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    4190:	e7fe      	b.n	4190 <Dummy_Handler>
	...

00004194 <Reset_Handler>:
{
    4194:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    4196:	4a1a      	ldr	r2, [pc, #104]	; (4200 <Reset_Handler+0x6c>)
    4198:	4b1a      	ldr	r3, [pc, #104]	; (4204 <Reset_Handler+0x70>)
    419a:	429a      	cmp	r2, r3
    419c:	d011      	beq.n	41c2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    419e:	001a      	movs	r2, r3
    41a0:	4b19      	ldr	r3, [pc, #100]	; (4208 <Reset_Handler+0x74>)
    41a2:	429a      	cmp	r2, r3
    41a4:	d20d      	bcs.n	41c2 <Reset_Handler+0x2e>
    41a6:	4a19      	ldr	r2, [pc, #100]	; (420c <Reset_Handler+0x78>)
    41a8:	3303      	adds	r3, #3
    41aa:	1a9b      	subs	r3, r3, r2
    41ac:	089b      	lsrs	r3, r3, #2
    41ae:	3301      	adds	r3, #1
    41b0:	009b      	lsls	r3, r3, #2
    41b2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    41b4:	4813      	ldr	r0, [pc, #76]	; (4204 <Reset_Handler+0x70>)
    41b6:	4912      	ldr	r1, [pc, #72]	; (4200 <Reset_Handler+0x6c>)
    41b8:	588c      	ldr	r4, [r1, r2]
    41ba:	5084      	str	r4, [r0, r2]
    41bc:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    41be:	429a      	cmp	r2, r3
    41c0:	d1fa      	bne.n	41b8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    41c2:	4a13      	ldr	r2, [pc, #76]	; (4210 <Reset_Handler+0x7c>)
    41c4:	4b13      	ldr	r3, [pc, #76]	; (4214 <Reset_Handler+0x80>)
    41c6:	429a      	cmp	r2, r3
    41c8:	d20a      	bcs.n	41e0 <Reset_Handler+0x4c>
    41ca:	43d3      	mvns	r3, r2
    41cc:	4911      	ldr	r1, [pc, #68]	; (4214 <Reset_Handler+0x80>)
    41ce:	185b      	adds	r3, r3, r1
    41d0:	2103      	movs	r1, #3
    41d2:	438b      	bics	r3, r1
    41d4:	3304      	adds	r3, #4
    41d6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    41d8:	2100      	movs	r1, #0
    41da:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    41dc:	4293      	cmp	r3, r2
    41de:	d1fc      	bne.n	41da <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    41e0:	4a0d      	ldr	r2, [pc, #52]	; (4218 <Reset_Handler+0x84>)
    41e2:	21ff      	movs	r1, #255	; 0xff
    41e4:	4b0d      	ldr	r3, [pc, #52]	; (421c <Reset_Handler+0x88>)
    41e6:	438b      	bics	r3, r1
    41e8:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    41ea:	4a0d      	ldr	r2, [pc, #52]	; (4220 <Reset_Handler+0x8c>)
    41ec:	6853      	ldr	r3, [r2, #4]
    41ee:	397f      	subs	r1, #127	; 0x7f
    41f0:	430b      	orrs	r3, r1
    41f2:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    41f4:	4b0b      	ldr	r3, [pc, #44]	; (4224 <Reset_Handler+0x90>)
    41f6:	4798      	blx	r3
        main();
    41f8:	4b0b      	ldr	r3, [pc, #44]	; (4228 <Reset_Handler+0x94>)
    41fa:	4798      	blx	r3
    41fc:	e7fe      	b.n	41fc <Reset_Handler+0x68>
    41fe:	46c0      	nop			; (mov r8, r8)
    4200:	000051e4 	.word	0x000051e4
    4204:	20000000 	.word	0x20000000
    4208:	20000114 	.word	0x20000114
    420c:	20000004 	.word	0x20000004
    4210:	20000114 	.word	0x20000114
    4214:	20000cec 	.word	0x20000cec
    4218:	e000ed00 	.word	0xe000ed00
    421c:	00000000 	.word	0x00000000
    4220:	41004000 	.word	0x41004000
    4224:	00005045 	.word	0x00005045
    4228:	0000422d 	.word	0x0000422d

0000422c <main>:
/**
 *  \brief SAM-BA Main loop.
 *  \return Unused (ANSI-C compatibility).
 */
int main(void)
{
    422c:	b530      	push	{r4, r5, lr}
    422e:	b083      	sub	sp, #12
	app_start_address = *(uint32_t *)(APP_START_ADDRESS + 4);
    4230:	4b1a      	ldr	r3, [pc, #104]	; (429c <main+0x70>)
    4232:	681a      	ldr	r2, [r3, #0]
	if (app_start_address == 0xFFFFFFFF) {
    4234:	1c53      	adds	r3, r2, #1
    4236:	d017      	beq.n	4268 <main+0x3c>
	boot_port->DIRCLR.reg = GPIO_BOOT_PIN_MASK;
    4238:	4b19      	ldr	r3, [pc, #100]	; (42a0 <main+0x74>)
    423a:	2180      	movs	r1, #128	; 0x80
    423c:	0089      	lsls	r1, r1, #2
    423e:	6059      	str	r1, [r3, #4]
	boot_port->PINCFG[BOOT_LOAD_PIN & 0x1F].reg = PORT_PINCFG_INEN | PORT_PINCFG_PULLEN;
    4240:	2406      	movs	r4, #6
    4242:	2049      	movs	r0, #73	; 0x49
    4244:	541c      	strb	r4, [r3, r0]
	boot_port->OUTSET.reg = GPIO_BOOT_PIN_MASK;
    4246:	6199      	str	r1, [r3, #24]
	boot_en = (boot_port->IN.reg) & GPIO_BOOT_PIN_MASK;
    4248:	6a1b      	ldr	r3, [r3, #32]
    424a:	059b      	lsls	r3, r3, #22
    424c:	0fdb      	lsrs	r3, r3, #31
    424e:	4669      	mov	r1, sp
    4250:	71cb      	strb	r3, [r1, #7]
	if (!boot_en) {
    4252:	79cb      	ldrb	r3, [r1, #7]
    4254:	2b00      	cmp	r3, #0
    4256:	d007      	beq.n	4268 <main+0x3c>
	__set_MSP(*(uint32_t *) APP_START_ADDRESS);
    4258:	23c0      	movs	r3, #192	; 0xc0
    425a:	01db      	lsls	r3, r3, #7
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    425c:	6819      	ldr	r1, [r3, #0]
    425e:	f381 8808 	msr	MSP, r1
	SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    4262:	4910      	ldr	r1, [pc, #64]	; (42a4 <main+0x78>)
    4264:	608b      	str	r3, [r1, #8]
	asm("bx %0"::"r"(app_start_address));
    4266:	4710      	bx	r2
	/* Jump in application if condition is satisfied */
	check_start_application();

	/* We have determined we should stay in the monitor. */
	/* System initialization */
	system_init();
    4268:	4b0f      	ldr	r3, [pc, #60]	; (42a8 <main+0x7c>)
    426a:	4798      	blx	r3

#ifdef CONF_USBCDC_INTERFACE_SUPPORT
	/* Start USB stack */
	udc_start();
    426c:	4b0f      	ldr	r3, [pc, #60]	; (42ac <main+0x80>)
    426e:	4798      	blx	r3
#endif
	/* UART is enabled in all cases */
	usart_open();
    4270:	4b0f      	ldr	r3, [pc, #60]	; (42b0 <main+0x84>)
    4272:	4798      	blx	r3
	DEBUG_PIN_LOW;
	/* Wait for a complete enum on usb or a '#' char on serial line */
	while (1) {
#ifdef CONF_USBCDC_INTERFACE_SUPPORT
		/* Check if a USB enumeration has succeeded and com port was opened */
		if(main_b_cdc_enable) {
    4274:	4d0f      	ldr	r5, [pc, #60]	; (42b4 <main+0x88>)
				sam_ba_monitor_run();
			}
		}
#endif
		/* Check if a '#' has been received */
		if (usart_sharp_received()) {
    4276:	4c10      	ldr	r4, [pc, #64]	; (42b8 <main+0x8c>)
		if(main_b_cdc_enable) {
    4278:	782b      	ldrb	r3, [r5, #0]
    427a:	2b00      	cmp	r3, #0
    427c:	d108      	bne.n	4290 <main+0x64>
		if (usart_sharp_received()) {
    427e:	47a0      	blx	r4
    4280:	2800      	cmp	r0, #0
    4282:	d0f9      	beq.n	4278 <main+0x4c>
			sam_ba_monitor_init(SAM_BA_INTERFACE_USART);
    4284:	2001      	movs	r0, #1
    4286:	4b0d      	ldr	r3, [pc, #52]	; (42bc <main+0x90>)
    4288:	4798      	blx	r3
			/* SAM-BA on UART loop */
			while(1) {
				sam_ba_monitor_run();
    428a:	4c0d      	ldr	r4, [pc, #52]	; (42c0 <main+0x94>)
    428c:	47a0      	blx	r4
    428e:	e7fd      	b.n	428c <main+0x60>
			sam_ba_monitor_init(SAM_BA_INTERFACE_USBCDC);
    4290:	2000      	movs	r0, #0
    4292:	4b0a      	ldr	r3, [pc, #40]	; (42bc <main+0x90>)
    4294:	4798      	blx	r3
				sam_ba_monitor_run();
    4296:	4c0a      	ldr	r4, [pc, #40]	; (42c0 <main+0x94>)
    4298:	47a0      	blx	r4
    429a:	e7fd      	b.n	4298 <main+0x6c>
    429c:	00006004 	.word	0x00006004
    42a0:	40002880 	.word	0x40002880
    42a4:	e000ed00 	.word	0xe000ed00
    42a8:	00002501 	.word	0x00002501
    42ac:	00000ccd 	.word	0x00000ccd
    42b0:	00004769 	.word	0x00004769
    42b4:	20000762 	.word	0x20000762
    42b8:	000048e9 	.word	0x000048e9
    42bc:	000042f1 	.word	0x000042f1
    42c0:	000043c9 	.word	0x000043c9

000042c4 <main_suspend_lpm_action>:

#ifdef CONF_USBCDC_INTERFACE_SUPPORT
#ifdef USB_DEVICE_LPM_SUPPORT
void main_suspend_lpm_action(void)
{
}
    42c4:	4770      	bx	lr

000042c6 <main_remotewakeup_lpm_disable>:

void main_remotewakeup_lpm_disable(void)
{
}
    42c6:	4770      	bx	lr

000042c8 <main_remotewakeup_lpm_enable>:

void main_remotewakeup_lpm_enable(void)
{
}
    42c8:	4770      	bx	lr
	...

000042cc <main_cdc_enable>:
#endif

bool main_cdc_enable(uint8_t port)
{
	main_b_cdc_enable = true;
    42cc:	2201      	movs	r2, #1
    42ce:	4b02      	ldr	r3, [pc, #8]	; (42d8 <main_cdc_enable+0xc>)
    42d0:	701a      	strb	r2, [r3, #0]
	return true;
}
    42d2:	2001      	movs	r0, #1
    42d4:	4770      	bx	lr
    42d6:	46c0      	nop			; (mov r8, r8)
    42d8:	20000762 	.word	0x20000762

000042dc <main_cdc_disable>:

void main_cdc_disable(uint8_t port)
{
	main_b_cdc_enable = false;
    42dc:	2200      	movs	r2, #0
    42de:	4b01      	ldr	r3, [pc, #4]	; (42e4 <main_cdc_disable+0x8>)
    42e0:	701a      	strb	r2, [r3, #0]
}
    42e2:	4770      	bx	lr
    42e4:	20000762 	.word	0x20000762

000042e8 <main_cdc_set_dtr>:

void main_cdc_set_dtr(uint8_t port, bool b_enable)
{
}
    42e8:	4770      	bx	lr

000042ea <main_cdc_rx_notify>:

void main_cdc_rx_notify(uint8_t port)
{
}
    42ea:	4770      	bx	lr

000042ec <main_cdc_set_coding>:

void main_cdc_set_coding(uint8_t port, usb_cdc_line_coding_t * cfg)
{
}
    42ec:	4770      	bx	lr
	...

000042f0 <sam_ba_monitor_init>:
 * \param com_interface  Communication interface to be used.
 */
void sam_ba_monitor_init(uint8_t com_interface)
{
	/* Selects the requested interface for future actions */
	if (com_interface == SAM_BA_INTERFACE_USART)
    42f0:	2801      	cmp	r0, #1
    42f2:	d005      	beq.n	4300 <sam_ba_monitor_init+0x10>
		ptr_monitor_if = (t_monitor_if*) &uart_if;
#ifdef CONF_USBCDC_INTERFACE_SUPPORT
	if (com_interface == SAM_BA_INTERFACE_USBCDC)
    42f4:	2800      	cmp	r0, #0
    42f6:	d102      	bne.n	42fe <sam_ba_monitor_init+0xe>
		ptr_monitor_if = (t_monitor_if*) &usbcdc_if;
    42f8:	4a03      	ldr	r2, [pc, #12]	; (4308 <sam_ba_monitor_init+0x18>)
    42fa:	4b04      	ldr	r3, [pc, #16]	; (430c <sam_ba_monitor_init+0x1c>)
    42fc:	601a      	str	r2, [r3, #0]
#endif
}
    42fe:	4770      	bx	lr
		ptr_monitor_if = (t_monitor_if*) &uart_if;
    4300:	4a03      	ldr	r2, [pc, #12]	; (4310 <sam_ba_monitor_init+0x20>)
    4302:	4b02      	ldr	r3, [pc, #8]	; (430c <sam_ba_monitor_init+0x1c>)
    4304:	601a      	str	r2, [r3, #0]
    4306:	e7fa      	b.n	42fe <sam_ba_monitor_init+0xe>
    4308:	000051a8 	.word	0x000051a8
    430c:	20000b9c 	.word	0x20000b9c
    4310:	0000518c 	.word	0x0000518c

00004314 <sam_ba_putdata_term>:
 *
 * \param *data  Data pointer
 * \param length Length of the data
 */
void sam_ba_putdata_term(uint8_t* data, uint32_t length)
{
    4314:	b5f0      	push	{r4, r5, r6, r7, lr}
    4316:	b085      	sub	sp, #20
	uint8_t temp, buf[12], *data_ascii;
	uint32_t i, int_value;

	if (b_terminal_mode)
    4318:	4b1f      	ldr	r3, [pc, #124]	; (4398 <sam_ba_putdata_term+0x84>)
    431a:	781b      	ldrb	r3, [r3, #0]
    431c:	2b00      	cmp	r3, #0
    431e:	d036      	beq.n	438e <sam_ba_putdata_term+0x7a>
	{
		if (length == 4)
    4320:	2904      	cmp	r1, #4
    4322:	d01b      	beq.n	435c <sam_ba_putdata_term+0x48>
			int_value = *(uint32_t *) data;
		else if (length == 2)
    4324:	2902      	cmp	r1, #2
    4326:	d022      	beq.n	436e <sam_ba_putdata_term+0x5a>
			int_value = *(uint16_t *) data;
		else
			int_value = *(uint8_t *) data;
    4328:	7800      	ldrb	r0, [r0, #0]

		data_ascii = buf + 2;
		data_ascii += length * 2 - 1;
    432a:	004d      	lsls	r5, r1, #1
    432c:	ab04      	add	r3, sp, #16
    432e:	195a      	adds	r2, r3, r5
    4330:	3a0b      	subs	r2, #11

		for (i = 0; i < length * 2; i++)
    4332:	2d00      	cmp	r5, #0
    4334:	d117      	bne.n	4366 <sam_ba_putdata_term+0x52>
				*data_ascii = temp + 0x37;

			int_value >>= 4;
			data_ascii--;
		}
		buf[0] = '0';
    4336:	a801      	add	r0, sp, #4
    4338:	2330      	movs	r3, #48	; 0x30
    433a:	7003      	strb	r3, [r0, #0]
		buf[1] = 'x';
    433c:	3348      	adds	r3, #72	; 0x48
    433e:	7043      	strb	r3, [r0, #1]
		buf[length * 2 + 2] = '\n';
    4340:	3101      	adds	r1, #1
    4342:	0049      	lsls	r1, r1, #1
    4344:	3b6e      	subs	r3, #110	; 0x6e
    4346:	5443      	strb	r3, [r0, r1]
		buf[length * 2 + 3] = '\r';
    4348:	1945      	adds	r5, r0, r5
    434a:	3303      	adds	r3, #3
    434c:	70eb      	strb	r3, [r5, #3]
		ptr_monitor_if->putdata(buf, length * 2 + 4);
    434e:	3102      	adds	r1, #2
    4350:	4b12      	ldr	r3, [pc, #72]	; (439c <sam_ba_putdata_term+0x88>)
    4352:	681b      	ldr	r3, [r3, #0]
    4354:	68db      	ldr	r3, [r3, #12]
    4356:	4798      	blx	r3
	}
	else
		ptr_monitor_if->putdata(data, length);
	return;
}
    4358:	b005      	add	sp, #20
    435a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			int_value = *(uint32_t *) data;
    435c:	6800      	ldr	r0, [r0, #0]
		data_ascii += length * 2 - 1;
    435e:	004d      	lsls	r5, r1, #1
    4360:	ab04      	add	r3, sp, #16
    4362:	195a      	adds	r2, r3, r5
    4364:	3a0b      	subs	r2, #11
{
    4366:	2400      	movs	r4, #0
			temp = (uint8_t) (int_value & 0xf);
    4368:	260f      	movs	r6, #15
				*data_ascii = temp | 0x30;
    436a:	2730      	movs	r7, #48	; 0x30
    436c:	e008      	b.n	4380 <sam_ba_putdata_term+0x6c>
			int_value = *(uint16_t *) data;
    436e:	8800      	ldrh	r0, [r0, #0]
    4370:	e7f5      	b.n	435e <sam_ba_putdata_term+0x4a>
				*data_ascii = temp + 0x37;
    4372:	3337      	adds	r3, #55	; 0x37
    4374:	7013      	strb	r3, [r2, #0]
			int_value >>= 4;
    4376:	0900      	lsrs	r0, r0, #4
			data_ascii--;
    4378:	3a01      	subs	r2, #1
		for (i = 0; i < length * 2; i++)
    437a:	3401      	adds	r4, #1
    437c:	42ac      	cmp	r4, r5
    437e:	d2da      	bcs.n	4336 <sam_ba_putdata_term+0x22>
			temp = (uint8_t) (int_value & 0xf);
    4380:	0033      	movs	r3, r6
    4382:	4003      	ands	r3, r0
			if (temp <= 0x9)
    4384:	2b09      	cmp	r3, #9
    4386:	d8f4      	bhi.n	4372 <sam_ba_putdata_term+0x5e>
				*data_ascii = temp | 0x30;
    4388:	433b      	orrs	r3, r7
    438a:	7013      	strb	r3, [r2, #0]
    438c:	e7f3      	b.n	4376 <sam_ba_putdata_term+0x62>
		ptr_monitor_if->putdata(data, length);
    438e:	4b03      	ldr	r3, [pc, #12]	; (439c <sam_ba_putdata_term+0x88>)
    4390:	681b      	ldr	r3, [r3, #0]
    4392:	68db      	ldr	r3, [r3, #12]
    4394:	4798      	blx	r3
	return;
    4396:	e7df      	b.n	4358 <sam_ba_putdata_term+0x44>
    4398:	20000763 	.word	0x20000763
    439c:	20000b9c 	.word	0x20000b9c

000043a0 <call_applet>:
  __ASM volatile ("cpsid i" : : : "memory");
    43a0:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    43a2:	f3bf 8f5f 	dmb	sy
 */
void call_applet(uint32_t address)
{
	uint32_t app_start_address;

	cpu_irq_disable();
    43a6:	2200      	movs	r2, #0
    43a8:	4b05      	ldr	r3, [pc, #20]	; (43c0 <call_applet+0x20>)
    43aa:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
    43ac:	f3ef 8308 	mrs	r3, MSP

	sp = __get_MSP();
    43b0:	4a04      	ldr	r2, [pc, #16]	; (43c4 <call_applet+0x24>)
    43b2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    43b4:	6803      	ldr	r3, [r0, #0]
    43b6:	f383 8808 	msr	MSP, r3

	/* Load the Reset Handler address of the application */
	app_start_address = *(uint32_t *)(address + 4);

	/* Jump to application Reset Handler in the application */
	asm("bx %0"::"r"(app_start_address));
    43ba:	6843      	ldr	r3, [r0, #4]
    43bc:	4718      	bx	r3
}
    43be:	4770      	bx	lr
    43c0:	20000112 	.word	0x20000112
    43c4:	20000ba0 	.word	0x20000ba0

000043c8 <sam_ba_monitor_run>:

/**
 * \brief This function starts the SAM-BA monitor.
 */
void sam_ba_monitor_run(void)
{
    43c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    43ca:	46de      	mov	lr, fp
    43cc:	4657      	mov	r7, sl
    43ce:	464e      	mov	r6, r9
    43d0:	4645      	mov	r5, r8
    43d2:	b5e0      	push	{r5, r6, r7, lr}
	ptr_data = NULL;
    43d4:	2200      	movs	r2, #0
    43d6:	4bcc      	ldr	r3, [pc, #816]	; (4708 <sam_ba_monitor_run+0x340>)
    43d8:	601a      	str	r2, [r3, #0]
	command = 'z';
    43da:	327a      	adds	r2, #122	; 0x7a
    43dc:	4bcb      	ldr	r3, [pc, #812]	; (470c <sam_ba_monitor_run+0x344>)
    43de:	701a      	strb	r2, [r3, #0]

	// Start waiting some cmd
	while (1)
	{
		length = ptr_monitor_if->getdata(data, SIZEBUFMAX);
    43e0:	4bcb      	ldr	r3, [pc, #812]	; (4710 <sam_ba_monitor_run+0x348>)
    43e2:	469a      	mov	sl, r3
    43e4:	4bcb      	ldr	r3, [pc, #812]	; (4714 <sam_ba_monitor_run+0x34c>)
    43e6:	469b      	mov	fp, r3
					{
						command = *ptr;
						current_number = 0;
					}
				}
				ptr++;
    43e8:	4ccb      	ldr	r4, [pc, #812]	; (4718 <sam_ba_monitor_run+0x350>)
						command = *ptr;
    43ea:	4bc8      	ldr	r3, [pc, #800]	; (470c <sam_ba_monitor_run+0x344>)
    43ec:	4698      	mov	r8, r3
		length = ptr_monitor_if->getdata(data, SIZEBUFMAX);
    43ee:	465b      	mov	r3, fp
    43f0:	681b      	ldr	r3, [r3, #0]
    43f2:	691b      	ldr	r3, [r3, #16]
    43f4:	2140      	movs	r1, #64	; 0x40
    43f6:	4650      	mov	r0, sl
    43f8:	4798      	blx	r3
    43fa:	4bc8      	ldr	r3, [pc, #800]	; (471c <sam_ba_monitor_run+0x354>)
    43fc:	6018      	str	r0, [r3, #0]
		ptr = data;
    43fe:	4bc6      	ldr	r3, [pc, #792]	; (4718 <sam_ba_monitor_run+0x350>)
    4400:	4652      	mov	r2, sl
    4402:	601a      	str	r2, [r3, #0]
		for (i = 0; i < length; i++)
    4404:	2200      	movs	r2, #0
    4406:	4bc6      	ldr	r3, [pc, #792]	; (4720 <sam_ba_monitor_run+0x358>)
    4408:	601a      	str	r2, [r3, #0]
    440a:	2800      	cmp	r0, #0
    440c:	d0ef      	beq.n	43ee <sam_ba_monitor_run+0x26>
			if (*ptr != 0xff)
    440e:	4dc2      	ldr	r5, [pc, #776]	; (4718 <sam_ba_monitor_run+0x350>)
    4410:	e0d8      	b.n	45c4 <sam_ba_monitor_run+0x1fc>
					if (b_terminal_mode)
    4412:	4bc4      	ldr	r3, [pc, #784]	; (4724 <sam_ba_monitor_run+0x35c>)
    4414:	781b      	ldrb	r3, [r3, #0]
    4416:	2b00      	cmp	r3, #0
    4418:	d172      	bne.n	4500 <sam_ba_monitor_run+0x138>
					if (command == 'S')
    441a:	4bbc      	ldr	r3, [pc, #752]	; (470c <sam_ba_monitor_run+0x344>)
    441c:	781b      	ldrb	r3, [r3, #0]
    441e:	2b53      	cmp	r3, #83	; 0x53
    4420:	d075      	beq.n	450e <sam_ba_monitor_run+0x146>
					else if (command == 'R')
    4422:	2b52      	cmp	r3, #82	; 0x52
    4424:	d100      	bne.n	4428 <sam_ba_monitor_run+0x60>
    4426:	e0e7      	b.n	45f8 <sam_ba_monitor_run+0x230>
					else if (command == 'O')
    4428:	2b4f      	cmp	r3, #79	; 0x4f
    442a:	d100      	bne.n	442e <sam_ba_monitor_run+0x66>
    442c:	e0ed      	b.n	460a <sam_ba_monitor_run+0x242>
					else if (command == 'H')
    442e:	2b48      	cmp	r3, #72	; 0x48
    4430:	d100      	bne.n	4434 <sam_ba_monitor_run+0x6c>
    4432:	e0f0      	b.n	4616 <sam_ba_monitor_run+0x24e>
					else if (command == 'W')
    4434:	2b57      	cmp	r3, #87	; 0x57
    4436:	d100      	bne.n	443a <sam_ba_monitor_run+0x72>
    4438:	e0f3      	b.n	4622 <sam_ba_monitor_run+0x25a>
					else if (command == 'o')
    443a:	2b6f      	cmp	r3, #111	; 0x6f
    443c:	d100      	bne.n	4440 <sam_ba_monitor_run+0x78>
    443e:	e0f6      	b.n	462e <sam_ba_monitor_run+0x266>
					else if (command == 'h')
    4440:	2b68      	cmp	r3, #104	; 0x68
    4442:	d100      	bne.n	4446 <sam_ba_monitor_run+0x7e>
    4444:	e0f9      	b.n	463a <sam_ba_monitor_run+0x272>
					else if (command == 'w')
    4446:	2b77      	cmp	r3, #119	; 0x77
    4448:	d100      	bne.n	444c <sam_ba_monitor_run+0x84>
    444a:	e0ff      	b.n	464c <sam_ba_monitor_run+0x284>
					else if (command == 'G')
    444c:	2b47      	cmp	r3, #71	; 0x47
    444e:	d100      	bne.n	4452 <sam_ba_monitor_run+0x8a>
    4450:	e105      	b.n	465e <sam_ba_monitor_run+0x296>
					else if (command == 'T')
    4452:	2b54      	cmp	r3, #84	; 0x54
    4454:	d100      	bne.n	4458 <sam_ba_monitor_run+0x90>
    4456:	e111      	b.n	467c <sam_ba_monitor_run+0x2b4>
					else if (command == 'N')
    4458:	2b4e      	cmp	r3, #78	; 0x4e
    445a:	d100      	bne.n	445e <sam_ba_monitor_run+0x96>
    445c:	e118      	b.n	4690 <sam_ba_monitor_run+0x2c8>
					else if (command == 'V')
    445e:	2b56      	cmp	r3, #86	; 0x56
    4460:	d000      	beq.n	4464 <sam_ba_monitor_run+0x9c>
    4462:	e098      	b.n	4596 <sam_ba_monitor_run+0x1ce>
						ptr_monitor_if->putdata("v", 1);
    4464:	4bab      	ldr	r3, [pc, #684]	; (4714 <sam_ba_monitor_run+0x34c>)
    4466:	4699      	mov	r9, r3
    4468:	681b      	ldr	r3, [r3, #0]
    446a:	68db      	ldr	r3, [r3, #12]
    446c:	2101      	movs	r1, #1
    446e:	48ae      	ldr	r0, [pc, #696]	; (4728 <sam_ba_monitor_run+0x360>)
    4470:	4798      	blx	r3
						ptr_monitor_if->putdata((uint8_t *) RomBOOT_Version,
    4472:	464b      	mov	r3, r9
    4474:	681b      	ldr	r3, [r3, #0]
    4476:	68db      	ldr	r3, [r3, #12]
    4478:	2104      	movs	r1, #4
    447a:	48ac      	ldr	r0, [pc, #688]	; (472c <sam_ba_monitor_run+0x364>)
    447c:	4798      	blx	r3
						ptr_monitor_if->putdata(" ", 1);
    447e:	464b      	mov	r3, r9
    4480:	681b      	ldr	r3, [r3, #0]
    4482:	68db      	ldr	r3, [r3, #12]
    4484:	2101      	movs	r1, #1
    4486:	48aa      	ldr	r0, [pc, #680]	; (4730 <sam_ba_monitor_run+0x368>)
    4488:	4798      	blx	r3
						i = 0;
    448a:	2200      	movs	r2, #0
    448c:	4ba4      	ldr	r3, [pc, #656]	; (4720 <sam_ba_monitor_run+0x358>)
    448e:	601a      	str	r2, [r3, #0]
						while (*ptr++ != '\0')
    4490:	4aa8      	ldr	r2, [pc, #672]	; (4734 <sam_ba_monitor_run+0x36c>)
    4492:	4ba1      	ldr	r3, [pc, #644]	; (4718 <sam_ba_monitor_run+0x350>)
    4494:	601a      	str	r2, [r3, #0]
							i++;
    4496:	48a2      	ldr	r0, [pc, #648]	; (4720 <sam_ba_monitor_run+0x358>)
						while (*ptr++ != '\0')
    4498:	001a      	movs	r2, r3
							i++;
    449a:	6803      	ldr	r3, [r0, #0]
    449c:	1c59      	adds	r1, r3, #1
    449e:	6001      	str	r1, [r0, #0]
						while (*ptr++ != '\0')
    44a0:	6813      	ldr	r3, [r2, #0]
    44a2:	1c5e      	adds	r6, r3, #1
    44a4:	6016      	str	r6, [r2, #0]
    44a6:	781b      	ldrb	r3, [r3, #0]
    44a8:	2b00      	cmp	r3, #0
    44aa:	d1f6      	bne.n	449a <sam_ba_monitor_run+0xd2>
						ptr_monitor_if->putdata((uint8_t *) &(__DATE__), i);
    44ac:	4b99      	ldr	r3, [pc, #612]	; (4714 <sam_ba_monitor_run+0x34c>)
    44ae:	4699      	mov	r9, r3
    44b0:	681b      	ldr	r3, [r3, #0]
    44b2:	68db      	ldr	r3, [r3, #12]
    44b4:	48a0      	ldr	r0, [pc, #640]	; (4738 <sam_ba_monitor_run+0x370>)
    44b6:	4798      	blx	r3
						ptr_monitor_if->putdata(" ", 1);
    44b8:	464b      	mov	r3, r9
    44ba:	681b      	ldr	r3, [r3, #0]
    44bc:	68db      	ldr	r3, [r3, #12]
    44be:	2101      	movs	r1, #1
    44c0:	489b      	ldr	r0, [pc, #620]	; (4730 <sam_ba_monitor_run+0x368>)
    44c2:	4798      	blx	r3
						i = 0;
    44c4:	2200      	movs	r2, #0
    44c6:	4b96      	ldr	r3, [pc, #600]	; (4720 <sam_ba_monitor_run+0x358>)
    44c8:	601a      	str	r2, [r3, #0]
						while (*ptr++ != '\0')
    44ca:	4a9c      	ldr	r2, [pc, #624]	; (473c <sam_ba_monitor_run+0x374>)
    44cc:	4b92      	ldr	r3, [pc, #584]	; (4718 <sam_ba_monitor_run+0x350>)
    44ce:	601a      	str	r2, [r3, #0]
							i++;
    44d0:	4893      	ldr	r0, [pc, #588]	; (4720 <sam_ba_monitor_run+0x358>)
						while (*ptr++ != '\0')
    44d2:	001a      	movs	r2, r3
							i++;
    44d4:	6803      	ldr	r3, [r0, #0]
    44d6:	1c59      	adds	r1, r3, #1
    44d8:	6001      	str	r1, [r0, #0]
						while (*ptr++ != '\0')
    44da:	6813      	ldr	r3, [r2, #0]
    44dc:	1c5e      	adds	r6, r3, #1
    44de:	6016      	str	r6, [r2, #0]
    44e0:	781b      	ldrb	r3, [r3, #0]
    44e2:	2b00      	cmp	r3, #0
    44e4:	d1f6      	bne.n	44d4 <sam_ba_monitor_run+0x10c>
						ptr_monitor_if->putdata((uint8_t *) &(__TIME__), i);
    44e6:	4b8b      	ldr	r3, [pc, #556]	; (4714 <sam_ba_monitor_run+0x34c>)
    44e8:	4699      	mov	r9, r3
    44ea:	681b      	ldr	r3, [r3, #0]
    44ec:	68db      	ldr	r3, [r3, #12]
    44ee:	4894      	ldr	r0, [pc, #592]	; (4740 <sam_ba_monitor_run+0x378>)
    44f0:	4798      	blx	r3
						ptr_monitor_if->putdata("\n\r", 2);
    44f2:	464b      	mov	r3, r9
    44f4:	681b      	ldr	r3, [r3, #0]
    44f6:	68db      	ldr	r3, [r3, #12]
    44f8:	2102      	movs	r1, #2
    44fa:	4892      	ldr	r0, [pc, #584]	; (4744 <sam_ba_monitor_run+0x37c>)
    44fc:	4798      	blx	r3
    44fe:	e04a      	b.n	4596 <sam_ba_monitor_run+0x1ce>
						ptr_monitor_if->putdata("\n\r", 2);
    4500:	4b84      	ldr	r3, [pc, #528]	; (4714 <sam_ba_monitor_run+0x34c>)
    4502:	681b      	ldr	r3, [r3, #0]
    4504:	68db      	ldr	r3, [r3, #12]
    4506:	2102      	movs	r1, #2
    4508:	488e      	ldr	r0, [pc, #568]	; (4744 <sam_ba_monitor_run+0x37c>)
    450a:	4798      	blx	r3
    450c:	e785      	b.n	441a <sam_ba_monitor_run+0x52>
						if(length>i)
    450e:	4b83      	ldr	r3, [pc, #524]	; (471c <sam_ba_monitor_run+0x354>)
    4510:	681b      	ldr	r3, [r3, #0]
    4512:	4a83      	ldr	r2, [pc, #524]	; (4720 <sam_ba_monitor_run+0x358>)
    4514:	6812      	ldr	r2, [r2, #0]
    4516:	4293      	cmp	r3, r2
    4518:	d92e      	bls.n	4578 <sam_ba_monitor_run+0x1b0>
							ptr++;
    451a:	487f      	ldr	r0, [pc, #508]	; (4718 <sam_ba_monitor_run+0x350>)
    451c:	6801      	ldr	r1, [r0, #0]
    451e:	3101      	adds	r1, #1
    4520:	6001      	str	r1, [r0, #0]
							i++;
    4522:	3201      	adds	r2, #1
    4524:	497e      	ldr	r1, [pc, #504]	; (4720 <sam_ba_monitor_run+0x358>)
    4526:	600a      	str	r2, [r1, #0]
							u32tmp=min((length-i),current_number);
    4528:	4987      	ldr	r1, [pc, #540]	; (4748 <sam_ba_monitor_run+0x380>)
    452a:	6809      	ldr	r1, [r1, #0]
    452c:	1a9b      	subs	r3, r3, r2
    452e:	428b      	cmp	r3, r1
    4530:	d900      	bls.n	4534 <sam_ba_monitor_run+0x16c>
    4532:	000b      	movs	r3, r1
    4534:	4a85      	ldr	r2, [pc, #532]	; (474c <sam_ba_monitor_run+0x384>)
    4536:	6013      	str	r3, [r2, #0]
							for(j=0;j<u32tmp;j++)
    4538:	2100      	movs	r1, #0
    453a:	4a85      	ldr	r2, [pc, #532]	; (4750 <sam_ba_monitor_run+0x388>)
    453c:	7011      	strb	r1, [r2, #0]
    453e:	2b00      	cmp	r3, #0
    4540:	d01a      	beq.n	4578 <sam_ba_monitor_run+0x1b0>
								*ptr_data = *ptr;
    4542:	4971      	ldr	r1, [pc, #452]	; (4708 <sam_ba_monitor_run+0x340>)
    4544:	4a74      	ldr	r2, [pc, #464]	; (4718 <sam_ba_monitor_run+0x350>)
								i++;
    4546:	4f76      	ldr	r7, [pc, #472]	; (4720 <sam_ba_monitor_run+0x358>)
							for(j=0;j<u32tmp;j++)
    4548:	4881      	ldr	r0, [pc, #516]	; (4750 <sam_ba_monitor_run+0x388>)
    454a:	4b80      	ldr	r3, [pc, #512]	; (474c <sam_ba_monitor_run+0x384>)
    454c:	469c      	mov	ip, r3
								*ptr_data = *ptr;
    454e:	6813      	ldr	r3, [r2, #0]
    4550:	781b      	ldrb	r3, [r3, #0]
    4552:	680e      	ldr	r6, [r1, #0]
    4554:	7033      	strb	r3, [r6, #0]
								ptr_data++;
    4556:	680b      	ldr	r3, [r1, #0]
    4558:	3301      	adds	r3, #1
    455a:	600b      	str	r3, [r1, #0]
								ptr++;
    455c:	6813      	ldr	r3, [r2, #0]
    455e:	3301      	adds	r3, #1
    4560:	6013      	str	r3, [r2, #0]
								i++;
    4562:	683b      	ldr	r3, [r7, #0]
    4564:	3301      	adds	r3, #1
    4566:	603b      	str	r3, [r7, #0]
							for(j=0;j<u32tmp;j++)
    4568:	7803      	ldrb	r3, [r0, #0]
    456a:	3301      	adds	r3, #1
    456c:	b2db      	uxtb	r3, r3
    456e:	7003      	strb	r3, [r0, #0]
    4570:	4666      	mov	r6, ip
    4572:	6836      	ldr	r6, [r6, #0]
    4574:	42b3      	cmp	r3, r6
    4576:	d3ea      	bcc.n	454e <sam_ba_monitor_run+0x186>
						i--;
    4578:	4a69      	ldr	r2, [pc, #420]	; (4720 <sam_ba_monitor_run+0x358>)
    457a:	6813      	ldr	r3, [r2, #0]
    457c:	3b01      	subs	r3, #1
    457e:	6013      	str	r3, [r2, #0]
						ptr--;
    4580:	4a65      	ldr	r2, [pc, #404]	; (4718 <sam_ba_monitor_run+0x350>)
    4582:	6813      	ldr	r3, [r2, #0]
    4584:	3b01      	subs	r3, #1
    4586:	6013      	str	r3, [r2, #0]
						if(j<current_number)
    4588:	4b71      	ldr	r3, [pc, #452]	; (4750 <sam_ba_monitor_run+0x388>)
    458a:	781b      	ldrb	r3, [r3, #0]
    458c:	4a6e      	ldr	r2, [pc, #440]	; (4748 <sam_ba_monitor_run+0x380>)
    458e:	6811      	ldr	r1, [r2, #0]
    4590:	428b      	cmp	r3, r1
    4592:	d329      	bcc.n	45e8 <sam_ba_monitor_run+0x220>
						__asm("nop");
    4594:	46c0      	nop			; (mov r8, r8)
					command = 'z';
    4596:	227a      	movs	r2, #122	; 0x7a
    4598:	4b5c      	ldr	r3, [pc, #368]	; (470c <sam_ba_monitor_run+0x344>)
    459a:	701a      	strb	r2, [r3, #0]
					current_number = 0;
    459c:	2200      	movs	r2, #0
    459e:	4b6a      	ldr	r3, [pc, #424]	; (4748 <sam_ba_monitor_run+0x380>)
    45a0:	601a      	str	r2, [r3, #0]
					if (b_terminal_mode)
    45a2:	4b60      	ldr	r3, [pc, #384]	; (4724 <sam_ba_monitor_run+0x35c>)
    45a4:	781b      	ldrb	r3, [r3, #0]
    45a6:	2b00      	cmp	r3, #0
    45a8:	d000      	beq.n	45ac <sam_ba_monitor_run+0x1e4>
    45aa:	e080      	b.n	46ae <sam_ba_monitor_run+0x2e6>
				ptr++;
    45ac:	6823      	ldr	r3, [r4, #0]
    45ae:	3301      	adds	r3, #1
    45b0:	6023      	str	r3, [r4, #0]
		for (i = 0; i < length; i++)
    45b2:	4a5b      	ldr	r2, [pc, #364]	; (4720 <sam_ba_monitor_run+0x358>)
    45b4:	6813      	ldr	r3, [r2, #0]
    45b6:	3301      	adds	r3, #1
    45b8:	6013      	str	r3, [r2, #0]
    45ba:	4a58      	ldr	r2, [pc, #352]	; (471c <sam_ba_monitor_run+0x354>)
    45bc:	6812      	ldr	r2, [r2, #0]
    45be:	429a      	cmp	r2, r3
    45c0:	d800      	bhi.n	45c4 <sam_ba_monitor_run+0x1fc>
    45c2:	e714      	b.n	43ee <sam_ba_monitor_run+0x26>
			if (*ptr != 0xff)
    45c4:	682b      	ldr	r3, [r5, #0]
    45c6:	781b      	ldrb	r3, [r3, #0]
    45c8:	2bff      	cmp	r3, #255	; 0xff
    45ca:	d0f2      	beq.n	45b2 <sam_ba_monitor_run+0x1ea>
				if (*ptr == '#')
    45cc:	2b23      	cmp	r3, #35	; 0x23
    45ce:	d100      	bne.n	45d2 <sam_ba_monitor_run+0x20a>
    45d0:	e71f      	b.n	4412 <sam_ba_monitor_run+0x4a>
					if (('0' <= *ptr) && (*ptr <= '9'))
    45d2:	001a      	movs	r2, r3
    45d4:	3a30      	subs	r2, #48	; 0x30
    45d6:	2a09      	cmp	r2, #9
    45d8:	d870      	bhi.n	46bc <sam_ba_monitor_run+0x2f4>
						current_number = (current_number << 4) | (*ptr - '0');
    45da:	495b      	ldr	r1, [pc, #364]	; (4748 <sam_ba_monitor_run+0x380>)
    45dc:	680a      	ldr	r2, [r1, #0]
    45de:	0112      	lsls	r2, r2, #4
    45e0:	3b30      	subs	r3, #48	; 0x30
    45e2:	4313      	orrs	r3, r2
    45e4:	600b      	str	r3, [r1, #0]
    45e6:	e7e1      	b.n	45ac <sam_ba_monitor_run+0x1e4>
							ptr_monitor_if->getdata_xmd(ptr_data, current_number-j);
    45e8:	1ac9      	subs	r1, r1, r3
    45ea:	4b47      	ldr	r3, [pc, #284]	; (4708 <sam_ba_monitor_run+0x340>)
    45ec:	6818      	ldr	r0, [r3, #0]
    45ee:	4b49      	ldr	r3, [pc, #292]	; (4714 <sam_ba_monitor_run+0x34c>)
    45f0:	681b      	ldr	r3, [r3, #0]
    45f2:	699b      	ldr	r3, [r3, #24]
    45f4:	4798      	blx	r3
    45f6:	e7cd      	b.n	4594 <sam_ba_monitor_run+0x1cc>
						ptr_monitor_if->putdata_xmd(ptr_data, current_number);
    45f8:	4b53      	ldr	r3, [pc, #332]	; (4748 <sam_ba_monitor_run+0x380>)
    45fa:	6819      	ldr	r1, [r3, #0]
    45fc:	4b42      	ldr	r3, [pc, #264]	; (4708 <sam_ba_monitor_run+0x340>)
    45fe:	6818      	ldr	r0, [r3, #0]
    4600:	4b44      	ldr	r3, [pc, #272]	; (4714 <sam_ba_monitor_run+0x34c>)
    4602:	681b      	ldr	r3, [r3, #0]
    4604:	695b      	ldr	r3, [r3, #20]
    4606:	4798      	blx	r3
    4608:	e7c5      	b.n	4596 <sam_ba_monitor_run+0x1ce>
						*ptr_data = (char) current_number;
    460a:	4b3f      	ldr	r3, [pc, #252]	; (4708 <sam_ba_monitor_run+0x340>)
    460c:	681b      	ldr	r3, [r3, #0]
    460e:	4a4e      	ldr	r2, [pc, #312]	; (4748 <sam_ba_monitor_run+0x380>)
    4610:	6812      	ldr	r2, [r2, #0]
    4612:	701a      	strb	r2, [r3, #0]
    4614:	e7bf      	b.n	4596 <sam_ba_monitor_run+0x1ce>
						*((uint16_t *) ptr_data) = (uint16_t) current_number;
    4616:	4b3c      	ldr	r3, [pc, #240]	; (4708 <sam_ba_monitor_run+0x340>)
    4618:	681b      	ldr	r3, [r3, #0]
    461a:	4a4b      	ldr	r2, [pc, #300]	; (4748 <sam_ba_monitor_run+0x380>)
    461c:	6812      	ldr	r2, [r2, #0]
    461e:	801a      	strh	r2, [r3, #0]
    4620:	e7b9      	b.n	4596 <sam_ba_monitor_run+0x1ce>
						*((int *) ptr_data) = current_number;
    4622:	4b39      	ldr	r3, [pc, #228]	; (4708 <sam_ba_monitor_run+0x340>)
    4624:	681b      	ldr	r3, [r3, #0]
    4626:	4a48      	ldr	r2, [pc, #288]	; (4748 <sam_ba_monitor_run+0x380>)
    4628:	6812      	ldr	r2, [r2, #0]
    462a:	601a      	str	r2, [r3, #0]
    462c:	e7b3      	b.n	4596 <sam_ba_monitor_run+0x1ce>
						sam_ba_putdata_term(ptr_data, 1);
    462e:	4b36      	ldr	r3, [pc, #216]	; (4708 <sam_ba_monitor_run+0x340>)
    4630:	6818      	ldr	r0, [r3, #0]
    4632:	2101      	movs	r1, #1
    4634:	4b47      	ldr	r3, [pc, #284]	; (4754 <sam_ba_monitor_run+0x38c>)
    4636:	4798      	blx	r3
    4638:	e7ad      	b.n	4596 <sam_ba_monitor_run+0x1ce>
						current_number = *((uint16_t *) ptr_data);
    463a:	4843      	ldr	r0, [pc, #268]	; (4748 <sam_ba_monitor_run+0x380>)
    463c:	4b32      	ldr	r3, [pc, #200]	; (4708 <sam_ba_monitor_run+0x340>)
    463e:	681b      	ldr	r3, [r3, #0]
    4640:	881b      	ldrh	r3, [r3, #0]
    4642:	6003      	str	r3, [r0, #0]
						sam_ba_putdata_term((uint8_t*) &current_number, 2);
    4644:	2102      	movs	r1, #2
    4646:	4b43      	ldr	r3, [pc, #268]	; (4754 <sam_ba_monitor_run+0x38c>)
    4648:	4798      	blx	r3
    464a:	e7a4      	b.n	4596 <sam_ba_monitor_run+0x1ce>
						current_number = *((uint32_t *) ptr_data);
    464c:	4b2e      	ldr	r3, [pc, #184]	; (4708 <sam_ba_monitor_run+0x340>)
    464e:	681b      	ldr	r3, [r3, #0]
    4650:	681b      	ldr	r3, [r3, #0]
    4652:	483d      	ldr	r0, [pc, #244]	; (4748 <sam_ba_monitor_run+0x380>)
    4654:	6003      	str	r3, [r0, #0]
						sam_ba_putdata_term((uint8_t*) &current_number, 4);
    4656:	2104      	movs	r1, #4
    4658:	4b3e      	ldr	r3, [pc, #248]	; (4754 <sam_ba_monitor_run+0x38c>)
    465a:	4798      	blx	r3
    465c:	e79b      	b.n	4596 <sam_ba_monitor_run+0x1ce>
						call_applet(current_number);
    465e:	4b3a      	ldr	r3, [pc, #232]	; (4748 <sam_ba_monitor_run+0x380>)
    4660:	6818      	ldr	r0, [r3, #0]
    4662:	4b3d      	ldr	r3, [pc, #244]	; (4758 <sam_ba_monitor_run+0x390>)
    4664:	4798      	blx	r3
						__set_MSP(sp);
    4666:	4b3d      	ldr	r3, [pc, #244]	; (475c <sam_ba_monitor_run+0x394>)
    4668:	681b      	ldr	r3, [r3, #0]
    466a:	f383 8808 	msr	MSP, r3
						cpu_irq_enable();
    466e:	2201      	movs	r2, #1
    4670:	4b3b      	ldr	r3, [pc, #236]	; (4760 <sam_ba_monitor_run+0x398>)
    4672:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    4674:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4678:	b662      	cpsie	i
    467a:	e78c      	b.n	4596 <sam_ba_monitor_run+0x1ce>
						b_terminal_mode = 1;
    467c:	2201      	movs	r2, #1
    467e:	4b29      	ldr	r3, [pc, #164]	; (4724 <sam_ba_monitor_run+0x35c>)
    4680:	701a      	strb	r2, [r3, #0]
						ptr_monitor_if->putdata("\n\r", 2);
    4682:	4b24      	ldr	r3, [pc, #144]	; (4714 <sam_ba_monitor_run+0x34c>)
    4684:	681b      	ldr	r3, [r3, #0]
    4686:	68db      	ldr	r3, [r3, #12]
    4688:	2102      	movs	r1, #2
    468a:	482e      	ldr	r0, [pc, #184]	; (4744 <sam_ba_monitor_run+0x37c>)
    468c:	4798      	blx	r3
    468e:	e782      	b.n	4596 <sam_ba_monitor_run+0x1ce>
						if (b_terminal_mode == 0)
    4690:	4b24      	ldr	r3, [pc, #144]	; (4724 <sam_ba_monitor_run+0x35c>)
    4692:	781b      	ldrb	r3, [r3, #0]
    4694:	2b00      	cmp	r3, #0
    4696:	d003      	beq.n	46a0 <sam_ba_monitor_run+0x2d8>
						b_terminal_mode = 0;
    4698:	2200      	movs	r2, #0
    469a:	4b22      	ldr	r3, [pc, #136]	; (4724 <sam_ba_monitor_run+0x35c>)
    469c:	701a      	strb	r2, [r3, #0]
    469e:	e77a      	b.n	4596 <sam_ba_monitor_run+0x1ce>
							ptr_monitor_if->putdata("\n\r", 2);
    46a0:	4b1c      	ldr	r3, [pc, #112]	; (4714 <sam_ba_monitor_run+0x34c>)
    46a2:	681b      	ldr	r3, [r3, #0]
    46a4:	68db      	ldr	r3, [r3, #12]
    46a6:	2102      	movs	r1, #2
    46a8:	4826      	ldr	r0, [pc, #152]	; (4744 <sam_ba_monitor_run+0x37c>)
    46aa:	4798      	blx	r3
    46ac:	e7f4      	b.n	4698 <sam_ba_monitor_run+0x2d0>
						ptr_monitor_if->putdata(">", 1);
    46ae:	4b19      	ldr	r3, [pc, #100]	; (4714 <sam_ba_monitor_run+0x34c>)
    46b0:	681b      	ldr	r3, [r3, #0]
    46b2:	68db      	ldr	r3, [r3, #12]
    46b4:	2101      	movs	r1, #1
    46b6:	482b      	ldr	r0, [pc, #172]	; (4764 <sam_ba_monitor_run+0x39c>)
    46b8:	4798      	blx	r3
    46ba:	e777      	b.n	45ac <sam_ba_monitor_run+0x1e4>
					else if (('A' <= *ptr) && (*ptr <= 'F'))
    46bc:	001a      	movs	r2, r3
    46be:	3a41      	subs	r2, #65	; 0x41
    46c0:	2a05      	cmp	r2, #5
    46c2:	d806      	bhi.n	46d2 <sam_ba_monitor_run+0x30a>
						current_number = (current_number << 4)
    46c4:	4920      	ldr	r1, [pc, #128]	; (4748 <sam_ba_monitor_run+0x380>)
    46c6:	680a      	ldr	r2, [r1, #0]
    46c8:	0112      	lsls	r2, r2, #4
								| (*ptr - 'A' + 0xa);
    46ca:	3b37      	subs	r3, #55	; 0x37
    46cc:	4313      	orrs	r3, r2
						current_number = (current_number << 4)
    46ce:	600b      	str	r3, [r1, #0]
    46d0:	e76c      	b.n	45ac <sam_ba_monitor_run+0x1e4>
					else if (('a' <= *ptr) && (*ptr <= 'f'))
    46d2:	001a      	movs	r2, r3
    46d4:	3a61      	subs	r2, #97	; 0x61
    46d6:	2a05      	cmp	r2, #5
    46d8:	d806      	bhi.n	46e8 <sam_ba_monitor_run+0x320>
						current_number = (current_number << 4)
    46da:	491b      	ldr	r1, [pc, #108]	; (4748 <sam_ba_monitor_run+0x380>)
    46dc:	680a      	ldr	r2, [r1, #0]
    46de:	0112      	lsls	r2, r2, #4
								| (*ptr - 'a' + 0xa);
    46e0:	3b57      	subs	r3, #87	; 0x57
    46e2:	4313      	orrs	r3, r2
						current_number = (current_number << 4)
    46e4:	600b      	str	r3, [r1, #0]
    46e6:	e761      	b.n	45ac <sam_ba_monitor_run+0x1e4>
					else if (*ptr == ',')
    46e8:	2b2c      	cmp	r3, #44	; 0x2c
    46ea:	d005      	beq.n	46f8 <sam_ba_monitor_run+0x330>
						command = *ptr;
    46ec:	4642      	mov	r2, r8
    46ee:	7013      	strb	r3, [r2, #0]
						current_number = 0;
    46f0:	2200      	movs	r2, #0
    46f2:	4b15      	ldr	r3, [pc, #84]	; (4748 <sam_ba_monitor_run+0x380>)
    46f4:	601a      	str	r2, [r3, #0]
    46f6:	e759      	b.n	45ac <sam_ba_monitor_run+0x1e4>
						ptr_data = (uint8_t *) current_number;
    46f8:	4b13      	ldr	r3, [pc, #76]	; (4748 <sam_ba_monitor_run+0x380>)
    46fa:	4a03      	ldr	r2, [pc, #12]	; (4708 <sam_ba_monitor_run+0x340>)
    46fc:	6819      	ldr	r1, [r3, #0]
    46fe:	6011      	str	r1, [r2, #0]
						current_number = 0;
    4700:	2200      	movs	r2, #0
    4702:	601a      	str	r2, [r3, #0]
    4704:	e752      	b.n	45ac <sam_ba_monitor_run+0x1e4>
    4706:	46c0      	nop			; (mov r8, r8)
    4708:	20000b98 	.word	0x20000b98
    470c:	20000b50 	.word	0x20000b50
    4710:	20000b58 	.word	0x20000b58
    4714:	20000b9c 	.word	0x20000b9c
    4718:	20000b4c 	.word	0x20000b4c
    471c:	20000b48 	.word	0x20000b48
    4720:	20000b54 	.word	0x20000b54
    4724:	20000763 	.word	0x20000763
    4728:	00005168 	.word	0x00005168
    472c:	0000515c 	.word	0x0000515c
    4730:	0000516c 	.word	0x0000516c
    4734:	00005171 	.word	0x00005171
    4738:	00005170 	.word	0x00005170
    473c:	0000517d 	.word	0x0000517d
    4740:	0000517c 	.word	0x0000517c
    4744:	00005164 	.word	0x00005164
    4748:	20000ba4 	.word	0x20000ba4
    474c:	20000ba8 	.word	0x20000ba8
    4750:	20000b44 	.word	0x20000b44
    4754:	00004315 	.word	0x00004315
    4758:	000043a1 	.word	0x000043a1
    475c:	20000ba0 	.word	0x20000ba0
    4760:	20000112 	.word	0x20000112
    4764:	00005188 	.word	0x00005188

00004768 <usart_open>:

/**
 * \brief Open the given USART
 */
void usart_open()
{
    4768:	b530      	push	{r4, r5, lr}
    476a:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    476c:	2380      	movs	r3, #128	; 0x80
    476e:	05db      	lsls	r3, r3, #23
    4770:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    4772:	2300      	movs	r3, #0
    4774:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    4776:	22ff      	movs	r2, #255	; 0xff
    4778:	4669      	mov	r1, sp
    477a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    477c:	2200      	movs	r2, #0
    477e:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    4780:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    4782:	2101      	movs	r1, #1
    4784:	2024      	movs	r0, #36	; 0x24
    4786:	466c      	mov	r4, sp
    4788:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    478a:	3001      	adds	r0, #1
    478c:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    478e:	3125      	adds	r1, #37	; 0x25
    4790:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    4792:	3101      	adds	r1, #1
    4794:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    4796:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    4798:	3105      	adds	r1, #5
    479a:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    479c:	3101      	adds	r1, #1
    479e:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    47a0:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    47a2:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    47a4:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    47a6:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    47a8:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    47aa:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    47ac:	2313      	movs	r3, #19
    47ae:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    47b0:	7762      	strb	r2, [r4, #29]
	struct usart_config config;

	usart_get_config_defaults(&config);

	config.baudrate     = BOOT_USART_BAUDRATE;
    47b2:	23e1      	movs	r3, #225	; 0xe1
    47b4:	025b      	lsls	r3, r3, #9
    47b6:	9308      	str	r3, [sp, #32]
	config.mux_setting  = BOOT_USART_MUX_SETTINGS;
    47b8:	2390      	movs	r3, #144	; 0x90
    47ba:	035b      	lsls	r3, r3, #13
    47bc:	9303      	str	r3, [sp, #12]
#ifdef BOOT_USART_PAD0
	config.pinmux_pad0  = BOOT_USART_PAD0;
    47be:	4b28      	ldr	r3, [pc, #160]	; (4860 <usart_open+0xf8>)
    47c0:	930c      	str	r3, [sp, #48]	; 0x30
#endif
#ifdef BOOT_USART_PAD1
	config.pinmux_pad1  = BOOT_USART_PAD1;
    47c2:	4b28      	ldr	r3, [pc, #160]	; (4864 <usart_open+0xfc>)
    47c4:	930d      	str	r3, [sp, #52]	; 0x34
#endif
#ifdef BOOT_USART_PAD2
	config.pinmux_pad2  = BOOT_USART_PAD2;
    47c6:	4b28      	ldr	r3, [pc, #160]	; (4868 <usart_open+0x100>)
    47c8:	930e      	str	r3, [sp, #56]	; 0x38
#endif
#ifdef BOOT_USART_PAD3
	config.pinmux_pad3  = BOOT_USART_PAD3;
    47ca:	4b28      	ldr	r3, [pc, #160]	; (486c <usart_open+0x104>)
    47cc:	930f      	str	r3, [sp, #60]	; 0x3c
#endif
	config.generator_source = BOOT_USART_GCLK_SOURCE;

	while (usart_init(&usart_sam_ba, BOOT_USART_MODULE, &config)
    47ce:	4d28      	ldr	r5, [pc, #160]	; (4870 <usart_open+0x108>)
    47d0:	4c28      	ldr	r4, [pc, #160]	; (4874 <usart_open+0x10c>)
    47d2:	466a      	mov	r2, sp
    47d4:	2184      	movs	r1, #132	; 0x84
    47d6:	05c9      	lsls	r1, r1, #23
    47d8:	0028      	movs	r0, r5
    47da:	47a0      	blx	r4
    47dc:	2800      	cmp	r0, #0
    47de:	d1f8      	bne.n	47d2 <usart_open+0x6a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    47e0:	4d23      	ldr	r5, [pc, #140]	; (4870 <usart_open+0x108>)
    47e2:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    47e4:	0020      	movs	r0, r4
    47e6:	4b24      	ldr	r3, [pc, #144]	; (4878 <usart_open+0x110>)
    47e8:	4798      	blx	r3
    47ea:	231f      	movs	r3, #31
    47ec:	4018      	ands	r0, r3
    47ee:	3b1e      	subs	r3, #30
    47f0:	4083      	lsls	r3, r0
    47f2:	4a22      	ldr	r2, [pc, #136]	; (487c <usart_open+0x114>)
    47f4:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    47f6:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    47f8:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    47fa:	2b00      	cmp	r3, #0
    47fc:	d1fc      	bne.n	47f8 <usart_open+0x90>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    47fe:	6823      	ldr	r3, [r4, #0]
    4800:	2202      	movs	r2, #2
    4802:	4313      	orrs	r3, r2
    4804:	6023      	str	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4806:	4b1a      	ldr	r3, [pc, #104]	; (4870 <usart_open+0x108>)
    4808:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    480a:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    480c:	2a00      	cmp	r2, #0
    480e:	d1fc      	bne.n	480a <usart_open+0xa2>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    4810:	6859      	ldr	r1, [r3, #4]
    4812:	2280      	movs	r2, #128	; 0x80
    4814:	0252      	lsls	r2, r2, #9
    4816:	430a      	orrs	r2, r1
    4818:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    481a:	2101      	movs	r1, #1
    481c:	4a14      	ldr	r2, [pc, #80]	; (4870 <usart_open+0x108>)
    481e:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    4820:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    4822:	2a00      	cmp	r2, #0
    4824:	d1fc      	bne.n	4820 <usart_open+0xb8>
	return (usart_hw->SYNCBUSY.reg);
    4826:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    4828:	2a00      	cmp	r2, #0
    482a:	d1fc      	bne.n	4826 <usart_open+0xbe>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    482c:	6859      	ldr	r1, [r3, #4]
    482e:	2280      	movs	r2, #128	; 0x80
    4830:	0292      	lsls	r2, r2, #10
    4832:	430a      	orrs	r2, r1
    4834:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    4836:	2101      	movs	r1, #1
    4838:	4a0d      	ldr	r2, [pc, #52]	; (4870 <usart_open+0x108>)
    483a:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    483c:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    483e:	2a00      	cmp	r2, #0
    4840:	d1fc      	bne.n	483c <usart_open+0xd4>

	usart_enable(&usart_sam_ba);
	usart_enable_transceiver(&usart_sam_ba, USART_TRANSCEIVER_TX);
	usart_enable_transceiver(&usart_sam_ba, USART_TRANSCEIVER_RX);
	//Initialize flag
	b_sharp_received = false;
    4842:	2300      	movs	r3, #0
    4844:	4a0e      	ldr	r2, [pc, #56]	; (4880 <usart_open+0x118>)
    4846:	7013      	strb	r3, [r2, #0]
	idx_rx_read = 0;
    4848:	4a0e      	ldr	r2, [pc, #56]	; (4884 <usart_open+0x11c>)
    484a:	7013      	strb	r3, [r2, #0]
	idx_rx_write = 0;
    484c:	4a0e      	ldr	r2, [pc, #56]	; (4888 <usart_open+0x120>)
    484e:	7013      	strb	r3, [r2, #0]
	idx_tx_read = 0;
    4850:	4a0e      	ldr	r2, [pc, #56]	; (488c <usart_open+0x124>)
    4852:	7013      	strb	r3, [r2, #0]
	idx_tx_write = 0;
    4854:	4a0e      	ldr	r2, [pc, #56]	; (4890 <usart_open+0x128>)
    4856:	7013      	strb	r3, [r2, #0]

	error_timeout = 0;
    4858:	4a0e      	ldr	r2, [pc, #56]	; (4894 <usart_open+0x12c>)
    485a:	7013      	strb	r3, [r2, #0]
}
    485c:	b011      	add	sp, #68	; 0x44
    485e:	bd30      	pop	{r4, r5, pc}
    4860:	00080002 	.word	0x00080002
    4864:	00090002 	.word	0x00090002
    4868:	000a0002 	.word	0x000a0002
    486c:	000b0002 	.word	0x000b0002
    4870:	20000bb4 	.word	0x20000bb4
    4874:	00001731 	.word	0x00001731
    4878:	000016a1 	.word	0x000016a1
    487c:	e000e100 	.word	0xe000e100
    4880:	20000bac 	.word	0x20000bac
    4884:	20000c6a 	.word	0x20000c6a
    4888:	20000bad 	.word	0x20000bad
    488c:	20000bb0 	.word	0x20000bb0
    4890:	20000c6b 	.word	0x20000c6b
    4894:	20000c68 	.word	0x20000c68

00004898 <usart_putc>:
 * \param value Value to put
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
int usart_putc(int value)
{
    4898:	b510      	push	{r4, lr}
	usart_write_wait(&usart_sam_ba, (uint16_t)value);
    489a:	b281      	uxth	r1, r0
    489c:	4802      	ldr	r0, [pc, #8]	; (48a8 <usart_putc+0x10>)
    489e:	4b03      	ldr	r3, [pc, #12]	; (48ac <usart_putc+0x14>)
    48a0:	4798      	blx	r3
	return 1;
}
    48a2:	2001      	movs	r0, #1
    48a4:	bd10      	pop	{r4, pc}
    48a6:	46c0      	nop			; (mov r8, r8)
    48a8:	20000bb4 	.word	0x20000bb4
    48ac:	00001a95 	.word	0x00001a95

000048b0 <usart_is_rx_ready>:
	}
	return (false);
}

bool usart_is_rx_ready(void) {
	return (BOOT_USART_MODULE->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC);
    48b0:	2384      	movs	r3, #132	; 0x84
    48b2:	05db      	lsls	r3, r3, #23
    48b4:	7e18      	ldrb	r0, [r3, #24]
    48b6:	0740      	lsls	r0, r0, #29
    48b8:	0fc0      	lsrs	r0, r0, #31
}
    48ba:	4770      	bx	lr

000048bc <usart_getc>:
int usart_getc(void) {
    48bc:	b510      	push	{r4, lr}
    48be:	b082      	sub	sp, #8
	while(!(usart_is_rx_ready()));
    48c0:	4c06      	ldr	r4, [pc, #24]	; (48dc <usart_getc+0x20>)
    48c2:	47a0      	blx	r4
    48c4:	2800      	cmp	r0, #0
    48c6:	d0fc      	beq.n	48c2 <usart_getc+0x6>
	usart_read_wait(&usart_sam_ba, &retval);
    48c8:	466b      	mov	r3, sp
    48ca:	1d9c      	adds	r4, r3, #6
    48cc:	0021      	movs	r1, r4
    48ce:	4804      	ldr	r0, [pc, #16]	; (48e0 <usart_getc+0x24>)
    48d0:	4b04      	ldr	r3, [pc, #16]	; (48e4 <usart_getc+0x28>)
    48d2:	4798      	blx	r3
	return (int)retval;
    48d4:	8820      	ldrh	r0, [r4, #0]
}
    48d6:	b002      	add	sp, #8
    48d8:	bd10      	pop	{r4, pc}
    48da:	46c0      	nop			; (mov r8, r8)
    48dc:	000048b1 	.word	0x000048b1
    48e0:	20000bb4 	.word	0x20000bb4
    48e4:	00001abb 	.word	0x00001abb

000048e8 <usart_sharp_received>:
int usart_sharp_received(void) {
    48e8:	b510      	push	{r4, lr}
	if (usart_is_rx_ready()) {
    48ea:	4b06      	ldr	r3, [pc, #24]	; (4904 <usart_sharp_received+0x1c>)
    48ec:	4798      	blx	r3
	return (false);
    48ee:	2300      	movs	r3, #0
	if (usart_is_rx_ready()) {
    48f0:	2800      	cmp	r0, #0
    48f2:	d101      	bne.n	48f8 <usart_sharp_received+0x10>
}
    48f4:	0018      	movs	r0, r3
    48f6:	bd10      	pop	{r4, pc}
		if (usart_getc() == SHARP_CHARACTER)
    48f8:	4b03      	ldr	r3, [pc, #12]	; (4908 <usart_sharp_received+0x20>)
    48fa:	4798      	blx	r3
    48fc:	3823      	subs	r0, #35	; 0x23
			return (true);
    48fe:	4243      	negs	r3, r0
    4900:	4143      	adcs	r3, r0
    4902:	e7f7      	b.n	48f4 <usart_sharp_received+0xc>
    4904:	000048b1 	.word	0x000048b1
    4908:	000048bd 	.word	0x000048bd

0000490c <usart_putdata>:
}

/**
 * \brief Send given data (polling)
 */
uint32_t usart_putdata(void const* data, uint32_t length) {
    490c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    490e:	1e0f      	subs	r7, r1, #0
	uint32_t i;
	uint8_t* ptrdata;
	ptrdata = (uint8_t*) data;
	for (i = 0; i < length; i++) {
    4910:	d007      	beq.n	4922 <usart_putdata+0x16>
    4912:	1846      	adds	r6, r0, r1
    4914:	0004      	movs	r4, r0
		usart_putc(*ptrdata);
    4916:	4d04      	ldr	r5, [pc, #16]	; (4928 <usart_putdata+0x1c>)
    4918:	7820      	ldrb	r0, [r4, #0]
    491a:	47a8      	blx	r5
		ptrdata++;
    491c:	3401      	adds	r4, #1
	for (i = 0; i < length; i++) {
    491e:	42a6      	cmp	r6, r4
    4920:	d1fa      	bne.n	4918 <usart_putdata+0xc>
	}
	return (i);
}
    4922:	0038      	movs	r0, r7
    4924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4926:	46c0      	nop			; (mov r8, r8)
    4928:	00004899 	.word	0x00004899

0000492c <usart_getdata>:

/**
 * \brief Get data from com device
 */
uint32_t usart_getdata(void* data, uint32_t length) {
    492c:	b510      	push	{r4, lr}
    492e:	0004      	movs	r4, r0
	uint8_t* ptrdata;
	ptrdata = (uint8_t*) data;
	*ptrdata = usart_getc();
    4930:	4b02      	ldr	r3, [pc, #8]	; (493c <usart_getdata+0x10>)
    4932:	4798      	blx	r3
    4934:	7020      	strb	r0, [r4, #0]
	return (1);
}
    4936:	2001      	movs	r0, #1
    4938:	bd10      	pop	{r4, pc}
    493a:	46c0      	nop			; (mov r8, r8)
    493c:	000048bd 	.word	0x000048bd

00004940 <add_crc>:
 */
unsigned short add_crc(char ptr, unsigned short crc) {

	unsigned short cmpt;

	crc = crc ^ (int) ptr << 8;
    4940:	0200      	lsls	r0, r0, #8
    4942:	4048      	eors	r0, r1
    4944:	2308      	movs	r3, #8

	for (cmpt = 0; cmpt < 8; cmpt++) {
		if (crc & 0x8000)
			crc = crc << 1 ^ CRC16POLY;
    4946:	4908      	ldr	r1, [pc, #32]	; (4968 <add_crc+0x28>)
    4948:	e006      	b.n	4958 <add_crc+0x18>
    494a:	0040      	lsls	r0, r0, #1
    494c:	4048      	eors	r0, r1
    494e:	b280      	uxth	r0, r0
    4950:	3b01      	subs	r3, #1
    4952:	b29b      	uxth	r3, r3
	for (cmpt = 0; cmpt < 8; cmpt++) {
    4954:	2b00      	cmp	r3, #0
    4956:	d005      	beq.n	4964 <add_crc+0x24>
		if (crc & 0x8000)
    4958:	b202      	sxth	r2, r0
    495a:	2a00      	cmp	r2, #0
    495c:	dbf5      	blt.n	494a <add_crc+0xa>
		else
			crc = crc << 1;
    495e:	0040      	lsls	r0, r0, #1
    4960:	b280      	uxth	r0, r0
    4962:	e7f5      	b.n	4950 <add_crc+0x10>
	}

	return (crc & 0xFFFF);
}
    4964:	4770      	bx	lr
    4966:	46c0      	nop			; (mov r8, r8)
    4968:	00001021 	.word	0x00001021

0000496c <getbytes>:

static uint16_t getbytes(uint8_t *ptr_data, uint16_t length) {
    496c:	b5f0      	push	{r4, r5, r6, r7, lr}
    496e:	46de      	mov	lr, fp
    4970:	4657      	mov	r7, sl
    4972:	464e      	mov	r6, r9
    4974:	b5c0      	push	{r6, r7, lr}
    4976:	b082      	sub	sp, #8
    4978:	0007      	movs	r7, r0
    497a:	1e0e      	subs	r6, r1, #0
	uint16_t crc = 0;
	uint16_t cpt;
	uint8_t c;

	for (cpt = 0; cpt < length; ++cpt) {
    497c:	d02a      	beq.n	49d4 <getbytes+0x68>
    497e:	2400      	movs	r4, #0
    4980:	2300      	movs	r3, #0
    4982:	9301      	str	r3, [sp, #4]
		c = usart_getc();
    4984:	4b19      	ldr	r3, [pc, #100]	; (49ec <getbytes+0x80>)
    4986:	469a      	mov	sl, r3
		if (error_timeout)
    4988:	4b19      	ldr	r3, [pc, #100]	; (49f0 <getbytes+0x84>)
    498a:	4699      	mov	r9, r3
			return 1;
		crc = add_crc(c, crc);
    498c:	4b19      	ldr	r3, [pc, #100]	; (49f4 <getbytes+0x88>)
    498e:	469b      	mov	fp, r3
    4990:	e008      	b.n	49a4 <getbytes+0x38>
		//crc = (crc << 8) ^ xcrc16tab[(crc>>8) ^ c];
		if (size_of_data || mode_of_transfer) {
			*ptr_data++ = c;
    4992:	1c7b      	adds	r3, r7, #1
    4994:	703d      	strb	r5, [r7, #0]
    4996:	001f      	movs	r7, r3
			if (length == PKTLEN_128)
    4998:	2e80      	cmp	r6, #128	; 0x80
    499a:	d016      	beq.n	49ca <getbytes+0x5e>
	for (cpt = 0; cpt < length; ++cpt) {
    499c:	3401      	adds	r4, #1
    499e:	b2a4      	uxth	r4, r4
    49a0:	42a6      	cmp	r6, r4
    49a2:	d01b      	beq.n	49dc <getbytes+0x70>
		c = usart_getc();
    49a4:	47d0      	blx	sl
    49a6:	b2c5      	uxtb	r5, r0
		if (error_timeout)
    49a8:	464b      	mov	r3, r9
    49aa:	781b      	ldrb	r3, [r3, #0]
    49ac:	2b00      	cmp	r3, #0
    49ae:	d113      	bne.n	49d8 <getbytes+0x6c>
		crc = add_crc(c, crc);
    49b0:	9901      	ldr	r1, [sp, #4]
    49b2:	0028      	movs	r0, r5
    49b4:	47d8      	blx	fp
    49b6:	9001      	str	r0, [sp, #4]
		if (size_of_data || mode_of_transfer) {
    49b8:	4b0f      	ldr	r3, [pc, #60]	; (49f8 <getbytes+0x8c>)
    49ba:	881b      	ldrh	r3, [r3, #0]
    49bc:	2b00      	cmp	r3, #0
    49be:	d1e8      	bne.n	4992 <getbytes+0x26>
    49c0:	4b0e      	ldr	r3, [pc, #56]	; (49fc <getbytes+0x90>)
    49c2:	781b      	ldrb	r3, [r3, #0]
    49c4:	2b00      	cmp	r3, #0
    49c6:	d0e9      	beq.n	499c <getbytes+0x30>
    49c8:	e7e3      	b.n	4992 <getbytes+0x26>
				size_of_data--;
    49ca:	490b      	ldr	r1, [pc, #44]	; (49f8 <getbytes+0x8c>)
    49cc:	880a      	ldrh	r2, [r1, #0]
    49ce:	3a01      	subs	r2, #1
    49d0:	800a      	strh	r2, [r1, #0]
    49d2:	e7e3      	b.n	499c <getbytes+0x30>
	uint16_t crc = 0;
    49d4:	9101      	str	r1, [sp, #4]
    49d6:	e001      	b.n	49dc <getbytes+0x70>
			return 1;
    49d8:	2301      	movs	r3, #1
    49da:	9301      	str	r3, [sp, #4]
		}
	}

	return crc;
}
    49dc:	9801      	ldr	r0, [sp, #4]
    49de:	b002      	add	sp, #8
    49e0:	bc1c      	pop	{r2, r3, r4}
    49e2:	4691      	mov	r9, r2
    49e4:	469a      	mov	sl, r3
    49e6:	46a3      	mov	fp, r4
    49e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    49ea:	46c0      	nop			; (mov r8, r8)
    49ec:	000048bd 	.word	0x000048bd
    49f0:	20000c68 	.word	0x20000c68
    49f4:	00004941 	.word	0x00004941
    49f8:	20000bae 	.word	0x20000bae
    49fc:	20000c69 	.word	0x20000c69

00004a00 <getPacket>:
}

/**
 * \brief Used by Xdown to retrieve packets.
 */
uint8_t getPacket(uint8_t *ptr_data, uint8_t sno) {
    4a00:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a02:	b085      	sub	sp, #20
    4a04:	0005      	movs	r5, r0
    4a06:	9101      	str	r1, [sp, #4]
	uint8_t seq[2];
	uint16_t crc, xcrc;

	getbytes(seq, 2);
    4a08:	2102      	movs	r1, #2
    4a0a:	a803      	add	r0, sp, #12
    4a0c:	4c17      	ldr	r4, [pc, #92]	; (4a6c <getPacket+0x6c>)
    4a0e:	47a0      	blx	r4
	xcrc = getbytes(ptr_data, PKTLEN_128);
    4a10:	2180      	movs	r1, #128	; 0x80
    4a12:	0028      	movs	r0, r5
    4a14:	47a0      	blx	r4
    4a16:	0005      	movs	r5, r0
	if (error_timeout)
    4a18:	4b15      	ldr	r3, [pc, #84]	; (4a70 <getPacket+0x70>)
    4a1a:	781f      	ldrb	r7, [r3, #0]
    4a1c:	2f00      	cmp	r7, #0
    4a1e:	d003      	beq.n	4a28 <getPacket+0x28>
		return (false);
    4a20:	2700      	movs	r7, #0
		return (false);
	}

	usart_putc(ACK);
	return (true);
}
    4a22:	0038      	movs	r0, r7
    4a24:	b005      	add	sp, #20
    4a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	crc = (uint16_t) usart_getc() << 8;
    4a28:	4e12      	ldr	r6, [pc, #72]	; (4a74 <getPacket+0x74>)
    4a2a:	47b0      	blx	r6
    4a2c:	0200      	lsls	r0, r0, #8
    4a2e:	b284      	uxth	r4, r0
	crc += (uint16_t) usart_getc();
    4a30:	47b0      	blx	r6
    4a32:	1824      	adds	r4, r4, r0
    4a34:	b2a4      	uxth	r4, r4
	if (error_timeout == 1)
    4a36:	4b0e      	ldr	r3, [pc, #56]	; (4a70 <getPacket+0x70>)
    4a38:	781b      	ldrb	r3, [r3, #0]
    4a3a:	2b01      	cmp	r3, #1
    4a3c:	d0f1      	beq.n	4a22 <getPacket+0x22>
	if ((crc != xcrc) || (seq[0] != sno) || (seq[1] != (uint8_t) (~sno))) {
    4a3e:	42a5      	cmp	r5, r4
    4a40:	d104      	bne.n	4a4c <getPacket+0x4c>
    4a42:	ab03      	add	r3, sp, #12
    4a44:	781b      	ldrb	r3, [r3, #0]
    4a46:	9a01      	ldr	r2, [sp, #4]
    4a48:	4293      	cmp	r3, r2
    4a4a:	d003      	beq.n	4a54 <getPacket+0x54>
		usart_putc(CAN);
    4a4c:	2018      	movs	r0, #24
    4a4e:	4b0a      	ldr	r3, [pc, #40]	; (4a78 <getPacket+0x78>)
    4a50:	4798      	blx	r3
		return (false);
    4a52:	e7e6      	b.n	4a22 <getPacket+0x22>
	if ((crc != xcrc) || (seq[0] != sno) || (seq[1] != (uint8_t) (~sno))) {
    4a54:	43db      	mvns	r3, r3
    4a56:	aa03      	add	r2, sp, #12
    4a58:	7852      	ldrb	r2, [r2, #1]
    4a5a:	b2db      	uxtb	r3, r3
    4a5c:	429a      	cmp	r2, r3
    4a5e:	d1f5      	bne.n	4a4c <getPacket+0x4c>
	usart_putc(ACK);
    4a60:	2006      	movs	r0, #6
    4a62:	4b05      	ldr	r3, [pc, #20]	; (4a78 <getPacket+0x78>)
    4a64:	4798      	blx	r3
	return (true);
    4a66:	2701      	movs	r7, #1
    4a68:	e7db      	b.n	4a22 <getPacket+0x22>
    4a6a:	46c0      	nop			; (mov r8, r8)
    4a6c:	0000496d 	.word	0x0000496d
    4a70:	20000c68 	.word	0x20000c68
    4a74:	000048bd 	.word	0x000048bd
    4a78:	00004899 	.word	0x00004899

00004a7c <usart_putdata_xmd>:

/**
 * \brief Called when a transfer from target to host is being made(considered an upload).
 */
uint32_t usart_putdata_xmd(void const* data, uint32_t length) {
    4a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a7e:	46de      	mov	lr, fp
    4a80:	4657      	mov	r7, sl
    4a82:	464e      	mov	r6, r9
    4a84:	4645      	mov	r5, r8
    4a86:	b5e0      	push	{r5, r6, r7, lr}
    4a88:	b085      	sub	sp, #20
    4a8a:	0005      	movs	r5, r0
    4a8c:	4689      	mov	r9, r1
	uint8_t c, sno = 1;
	uint8_t done;
	uint8_t * ptr_data = (uint8_t *) data;
	error_timeout = 0;
    4a8e:	2200      	movs	r2, #0
    4a90:	4b4a      	ldr	r3, [pc, #296]	; (4bbc <usart_putdata_xmd+0x140>)
    4a92:	701a      	strb	r2, [r3, #0]
	if (!length)
    4a94:	2900      	cmp	r1, #0
    4a96:	d128      	bne.n	4aea <usart_putdata_xmd+0x6e>
		mode_of_transfer = 1;
    4a98:	3201      	adds	r2, #1
    4a9a:	4b49      	ldr	r3, [pc, #292]	; (4bc0 <usart_putdata_xmd+0x144>)
    4a9c:	701a      	strb	r2, [r3, #0]

	/* Startup synchronization... */
	/* Wait to receive a NAK or 'C' from receiver. */
	done = 0;
	while (!done) {
		c = (uint8_t) usart_getc();
    4a9e:	4f49      	ldr	r7, [pc, #292]	; (4bc4 <usart_putdata_xmd+0x148>)
		if (error_timeout) { // Test for timeout in usart_getc
    4aa0:	4e46      	ldr	r6, [pc, #280]	; (4bbc <usart_putdata_xmd+0x140>)
			error_timeout = 0;
    4aa2:	0034      	movs	r4, r6
		c = (uint8_t) usart_getc();
    4aa4:	47b8      	blx	r7
		if (error_timeout) { // Test for timeout in usart_getc
    4aa6:	7833      	ldrb	r3, [r6, #0]
    4aa8:	2b00      	cmp	r3, #0
    4aaa:	d12c      	bne.n	4b06 <usart_putdata_xmd+0x8a>
		c = (uint8_t) usart_getc();
    4aac:	b2c0      	uxtb	r0, r0
			if (error_timeout) {
				error_timeout = 0;
				return (0);
			}
		}
		switch (c) {
    4aae:	2843      	cmp	r0, #67	; 0x43
    4ab0:	d003      	beq.n	4aba <usart_putdata_xmd+0x3e>
    4ab2:	2871      	cmp	r0, #113	; 0x71
    4ab4:	d079      	beq.n	4baa <usart_putdata_xmd+0x12e>
    4ab6:	2815      	cmp	r0, #21
    4ab8:	d1f4      	bne.n	4aa4 <usart_putdata_xmd+0x28>
    4aba:	9503      	str	r5, [sp, #12]
    4abc:	2301      	movs	r3, #1
    4abe:	9302      	str	r3, [sp, #8]
	usart_putc(SOH);
    4ac0:	4b41      	ldr	r3, [pc, #260]	; (4bc8 <usart_putdata_xmd+0x14c>)
    4ac2:	469b      	mov	fp, r3
		if (size_of_data || mode_of_transfer) {
    4ac4:	4b41      	ldr	r3, [pc, #260]	; (4bcc <usart_putdata_xmd+0x150>)
    4ac6:	4698      	mov	r8, r3
			size_of_data--;
    4ac8:	001c      	movs	r4, r3
		if (size_of_data || mode_of_transfer) {
    4aca:	4b3d      	ldr	r3, [pc, #244]	; (4bc0 <usart_putdata_xmd+0x144>)
    4acc:	469a      	mov	sl, r3
	usart_putc(SOH);
    4ace:	2001      	movs	r0, #1
    4ad0:	47d8      	blx	fp
	usart_putc(sno);
    4ad2:	9d02      	ldr	r5, [sp, #8]
    4ad4:	0028      	movs	r0, r5
    4ad6:	47d8      	blx	fp
	usart_putc((uint8_t) ~(sno));
    4ad8:	43e8      	mvns	r0, r5
    4ada:	b2c0      	uxtb	r0, r0
    4adc:	47d8      	blx	fp
    4ade:	9d03      	ldr	r5, [sp, #12]
    4ae0:	2780      	movs	r7, #128	; 0x80
	chksm = 0;
    4ae2:	2300      	movs	r3, #0
    4ae4:	9301      	str	r3, [sp, #4]
    4ae6:	002e      	movs	r6, r5
    4ae8:	e02e      	b.n	4b48 <usart_putdata_xmd+0xcc>
		size_of_data = length;
    4aea:	4b38      	ldr	r3, [pc, #224]	; (4bcc <usart_putdata_xmd+0x150>)
    4aec:	8019      	strh	r1, [r3, #0]
		mode_of_transfer = 0;
    4aee:	2200      	movs	r2, #0
    4af0:	4b33      	ldr	r3, [pc, #204]	; (4bc0 <usart_putdata_xmd+0x144>)
    4af2:	701a      	strb	r2, [r3, #0]
	if (length & (PKTLEN_128 - 1)) {
    4af4:	000b      	movs	r3, r1
    4af6:	065b      	lsls	r3, r3, #25
    4af8:	d0d1      	beq.n	4a9e <usart_putdata_xmd+0x22>
		length += PKTLEN_128;
    4afa:	000b      	movs	r3, r1
    4afc:	3380      	adds	r3, #128	; 0x80
		length &= ~(PKTLEN_128 - 1);
    4afe:	327f      	adds	r2, #127	; 0x7f
    4b00:	4393      	bics	r3, r2
    4b02:	4699      	mov	r9, r3
    4b04:	e7cb      	b.n	4a9e <usart_putdata_xmd+0x22>
			error_timeout = 0;
    4b06:	2300      	movs	r3, #0
    4b08:	7023      	strb	r3, [r4, #0]
			c = (uint8_t) usart_getc();
    4b0a:	4b2e      	ldr	r3, [pc, #184]	; (4bc4 <usart_putdata_xmd+0x148>)
    4b0c:	4798      	blx	r3
    4b0e:	b2c0      	uxtb	r0, r0
			if (error_timeout) {
    4b10:	7823      	ldrb	r3, [r4, #0]
    4b12:	2b00      	cmp	r3, #0
    4b14:	d0cb      	beq.n	4aae <usart_putdata_xmd+0x32>
				error_timeout = 0;
    4b16:	2200      	movs	r2, #0
    4b18:	4b28      	ldr	r3, [pc, #160]	; (4bbc <usart_putdata_xmd+0x140>)
    4b1a:	701a      	strb	r2, [r3, #0]
				return (0);
    4b1c:	2000      	movs	r0, #0
    4b1e:	e045      	b.n	4bac <usart_putdata_xmd+0x130>
	done = 0;
	sno = 1;
	while (!done) {
		c = (uint8_t) putPacket((uint8_t *) ptr_data, sno);
		if (error_timeout) { // Test for timeout in usart_getc
			error_timeout = 0;
    4b20:	2200      	movs	r2, #0
    4b22:	4b26      	ldr	r3, [pc, #152]	; (4bbc <usart_putdata_xmd+0x140>)
    4b24:	701a      	strb	r2, [r3, #0]
			return (0);
    4b26:	2000      	movs	r0, #0
    4b28:	e040      	b.n	4bac <usart_putdata_xmd+0x130>
			data = *tmppkt++;
    4b2a:	7835      	ldrb	r5, [r6, #0]
			size_of_data--;
    4b2c:	3b01      	subs	r3, #1
    4b2e:	8023      	strh	r3, [r4, #0]
			data = *tmppkt++;
    4b30:	3601      	adds	r6, #1
		usart_putc(data);
    4b32:	0028      	movs	r0, r5
    4b34:	4b24      	ldr	r3, [pc, #144]	; (4bc8 <usart_putdata_xmd+0x14c>)
    4b36:	4798      	blx	r3
		chksm = add_crc(data, chksm);
    4b38:	9901      	ldr	r1, [sp, #4]
    4b3a:	0028      	movs	r0, r5
    4b3c:	4b24      	ldr	r3, [pc, #144]	; (4bd0 <usart_putdata_xmd+0x154>)
    4b3e:	4798      	blx	r3
    4b40:	9001      	str	r0, [sp, #4]
    4b42:	3f01      	subs	r7, #1
	for (i = 0; i < PKTLEN_128; i++) {
    4b44:	2f00      	cmp	r7, #0
    4b46:	d008      	beq.n	4b5a <usart_putdata_xmd+0xde>
		if (size_of_data || mode_of_transfer) {
    4b48:	4643      	mov	r3, r8
    4b4a:	881b      	ldrh	r3, [r3, #0]
    4b4c:	2b00      	cmp	r3, #0
    4b4e:	d1ec      	bne.n	4b2a <usart_putdata_xmd+0xae>
    4b50:	4652      	mov	r2, sl
    4b52:	7815      	ldrb	r5, [r2, #0]
    4b54:	2d00      	cmp	r5, #0
    4b56:	d0ec      	beq.n	4b32 <usart_putdata_xmd+0xb6>
    4b58:	e7e7      	b.n	4b2a <usart_putdata_xmd+0xae>
	usart_putc((uint8_t) (chksm >> 8));
    4b5a:	0005      	movs	r5, r0
    4b5c:	0a00      	lsrs	r0, r0, #8
    4b5e:	b2c0      	uxtb	r0, r0
    4b60:	4e19      	ldr	r6, [pc, #100]	; (4bc8 <usart_putdata_xmd+0x14c>)
    4b62:	47b0      	blx	r6
	usart_putc((uint8_t) chksm);
    4b64:	b2e8      	uxtb	r0, r5
    4b66:	47b0      	blx	r6
	return (usart_getc()); /* Wait for ack */
    4b68:	4b16      	ldr	r3, [pc, #88]	; (4bc4 <usart_putdata_xmd+0x148>)
    4b6a:	4798      	blx	r3
		if (error_timeout) { // Test for timeout in usart_getc
    4b6c:	4b13      	ldr	r3, [pc, #76]	; (4bbc <usart_putdata_xmd+0x140>)
    4b6e:	781b      	ldrb	r3, [r3, #0]
    4b70:	2b00      	cmp	r3, #0
    4b72:	d1d5      	bne.n	4b20 <usart_putdata_xmd+0xa4>
		}
		switch (c) {
    4b74:	23ff      	movs	r3, #255	; 0xff
    4b76:	4018      	ands	r0, r3
    4b78:	2806      	cmp	r0, #6
    4b7a:	d109      	bne.n	4b90 <usart_putdata_xmd+0x114>
		case ACK:
			++sno;
    4b7c:	9b02      	ldr	r3, [sp, #8]
    4b7e:	3301      	adds	r3, #1
    4b80:	b2db      	uxtb	r3, r3
    4b82:	9302      	str	r3, [sp, #8]
			length -= PKTLEN_128;
    4b84:	464b      	mov	r3, r9
    4b86:	3b80      	subs	r3, #128	; 0x80
    4b88:	4699      	mov	r9, r3
			ptr_data += PKTLEN_128;
    4b8a:	9b03      	ldr	r3, [sp, #12]
    4b8c:	3380      	adds	r3, #128	; 0x80
    4b8e:	9303      	str	r3, [sp, #12]
		case EOT:
		default:
			done = 0;
			break;
		}
		if (!length) {
    4b90:	464b      	mov	r3, r9
    4b92:	2b00      	cmp	r3, #0
    4b94:	d19b      	bne.n	4ace <usart_putdata_xmd+0x52>
			usart_putc(EOT);
    4b96:	2004      	movs	r0, #4
    4b98:	4b0b      	ldr	r3, [pc, #44]	; (4bc8 <usart_putdata_xmd+0x14c>)
    4b9a:	4798      	blx	r3
			usart_getc(); /* Flush the ACK */
    4b9c:	4b09      	ldr	r3, [pc, #36]	; (4bc4 <usart_putdata_xmd+0x148>)
    4b9e:	4798      	blx	r3
			break;
		}
	}

	mode_of_transfer = 0;
    4ba0:	2200      	movs	r2, #0
    4ba2:	4b07      	ldr	r3, [pc, #28]	; (4bc0 <usart_putdata_xmd+0x144>)
    4ba4:	701a      	strb	r2, [r3, #0]
	return (1);
    4ba6:	2001      	movs	r0, #1
    4ba8:	e000      	b.n	4bac <usart_putdata_xmd+0x130>
			return (0);
    4baa:	2000      	movs	r0, #0
}
    4bac:	b005      	add	sp, #20
    4bae:	bc3c      	pop	{r2, r3, r4, r5}
    4bb0:	4690      	mov	r8, r2
    4bb2:	4699      	mov	r9, r3
    4bb4:	46a2      	mov	sl, r4
    4bb6:	46ab      	mov	fp, r5
    4bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4bba:	46c0      	nop			; (mov r8, r8)
    4bbc:	20000c68 	.word	0x20000c68
    4bc0:	20000c69 	.word	0x20000c69
    4bc4:	000048bd 	.word	0x000048bd
    4bc8:	00004899 	.word	0x00004899
    4bcc:	20000bae 	.word	0x20000bae
    4bd0:	00004941 	.word	0x00004941

00004bd4 <usart_getdata_xmd>:

/**
 * \brief Called when a transfer from host to target is being made (considered an download).
 */
uint32_t usart_getdata_xmd(void* data, uint32_t length) {
    4bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4bd6:	46c6      	mov	lr, r8
    4bd8:	b500      	push	{lr}
    4bda:	b082      	sub	sp, #8
    4bdc:	9001      	str	r0, [sp, #4]
    4bde:	000c      	movs	r4, r1
	uint8_t * ptr_data = (uint8_t *) data;
	uint32_t b_run, nbr_of_timeout = 100;
	uint8_t sno = 0x01;

	//Copied from legacy source code ... might need some tweaking
	uint32_t loops_per_second = system_clock_source_get_hz(CONF_CLOCK_GCLK_0_CLOCK_SOURCE) / 10;
    4be0:	2006      	movs	r0, #6
    4be2:	4b2f      	ldr	r3, [pc, #188]	; (4ca0 <usart_getdata_xmd+0xcc>)
    4be4:	4798      	blx	r3
    4be6:	210a      	movs	r1, #10
    4be8:	4b2e      	ldr	r3, [pc, #184]	; (4ca4 <usart_getdata_xmd+0xd0>)
    4bea:	4798      	blx	r3
    4bec:	9000      	str	r0, [sp, #0]

	error_timeout = 0;
    4bee:	2200      	movs	r2, #0
    4bf0:	4b2d      	ldr	r3, [pc, #180]	; (4ca8 <usart_getdata_xmd+0xd4>)
    4bf2:	701a      	strb	r2, [r3, #0]

	if (length == 0)
    4bf4:	2c00      	cmp	r4, #0
    4bf6:	d106      	bne.n	4c06 <usart_getdata_xmd+0x32>
		mode_of_transfer = 1;
    4bf8:	3201      	adds	r2, #1
    4bfa:	4b2c      	ldr	r3, [pc, #176]	; (4cac <usart_getdata_xmd+0xd8>)
    4bfc:	701a      	strb	r2, [r3, #0]
uint32_t usart_getdata_xmd(void* data, uint32_t length) {
    4bfe:	2564      	movs	r5, #100	; 0x64
	}

	/* Startup synchronization... */
	/* Continuously send NAK or 'C' until sender responds. */
	while (1) {
		usart_putc('C');
    4c00:	4e2b      	ldr	r6, [pc, #172]	; (4cb0 <usart_getdata_xmd+0xdc>)
		timeout = loops_per_second;
		while (!(usart_is_rx_ready()) && timeout)
    4c02:	4f2c      	ldr	r7, [pc, #176]	; (4cb4 <usart_getdata_xmd+0xe0>)
    4c04:	e00e      	b.n	4c24 <usart_getdata_xmd+0x50>
		size_of_data = length;
    4c06:	4b2c      	ldr	r3, [pc, #176]	; (4cb8 <usart_getdata_xmd+0xe4>)
    4c08:	801c      	strh	r4, [r3, #0]
		mode_of_transfer = 0;
    4c0a:	2200      	movs	r2, #0
    4c0c:	4b27      	ldr	r3, [pc, #156]	; (4cac <usart_getdata_xmd+0xd8>)
    4c0e:	701a      	strb	r2, [r3, #0]
    4c10:	e7f5      	b.n	4bfe <usart_getdata_xmd+0x2a>
			timeout--;
    4c12:	3c01      	subs	r4, #1
		while (!(usart_is_rx_ready()) && timeout)
    4c14:	47b8      	blx	r7
    4c16:	2800      	cmp	r0, #0
    4c18:	d108      	bne.n	4c2c <usart_getdata_xmd+0x58>
    4c1a:	2c00      	cmp	r4, #0
    4c1c:	d1f9      	bne.n	4c12 <usart_getdata_xmd+0x3e>
    4c1e:	3d01      	subs	r5, #1
		if (timeout)
			break;

		if (!(--nbr_of_timeout))
    4c20:	2d00      	cmp	r5, #0
    4c22:	d03b      	beq.n	4c9c <usart_getdata_xmd+0xc8>
		usart_putc('C');
    4c24:	2043      	movs	r0, #67	; 0x43
    4c26:	47b0      	blx	r6
		timeout = loops_per_second;
    4c28:	9c00      	ldr	r4, [sp, #0]
		while (!(usart_is_rx_ready()) && timeout)
    4c2a:	e7f3      	b.n	4c14 <usart_getdata_xmd+0x40>
		if (timeout)
    4c2c:	2c00      	cmp	r4, #0
    4c2e:	d0f6      	beq.n	4c1e <usart_getdata_xmd+0x4a>
    4c30:	9e01      	ldr	r6, [sp, #4]
    4c32:	2401      	movs	r4, #1
			return (0);
	}

	b_run = true;
	while (b_run != false) {
		c = (char) usart_getc();
    4c34:	4f21      	ldr	r7, [pc, #132]	; (4cbc <usart_getdata_xmd+0xe8>)
		if (error_timeout) { // Test for timeout in usart_getc
    4c36:	4d1c      	ldr	r5, [pc, #112]	; (4ca8 <usart_getdata_xmd+0xd4>)
			error_timeout = 0;
			return (0);
		}
		switch (c) {
		case SOH: /* 128-byte incoming packet */
			b_run = getPacket(ptr_data, sno);
    4c38:	4b21      	ldr	r3, [pc, #132]	; (4cc0 <usart_getdata_xmd+0xec>)
    4c3a:	4698      	mov	r8, r3
    4c3c:	e012      	b.n	4c64 <usart_getdata_xmd+0x90>
			error_timeout = 0;
    4c3e:	2200      	movs	r2, #0
    4c40:	4b19      	ldr	r3, [pc, #100]	; (4ca8 <usart_getdata_xmd+0xd4>)
    4c42:	701a      	strb	r2, [r3, #0]
			return (0);
    4c44:	2000      	movs	r0, #0
			break;
		}
	}
	mode_of_transfer = 0;
	return (true);
}
    4c46:	b002      	add	sp, #8
    4c48:	bc04      	pop	{r2}
    4c4a:	4690      	mov	r8, r2
    4c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			b_run = getPacket(ptr_data, sno);
    4c4e:	0021      	movs	r1, r4
    4c50:	0030      	movs	r0, r6
    4c52:	47c0      	blx	r8
			if (error_timeout) { // Test for timeout in usart_getc
    4c54:	4b14      	ldr	r3, [pc, #80]	; (4ca8 <usart_getdata_xmd+0xd4>)
    4c56:	781b      	ldrb	r3, [r3, #0]
    4c58:	2b00      	cmp	r3, #0
    4c5a:	d112      	bne.n	4c82 <usart_getdata_xmd+0xae>
			if (b_run == true) {
    4c5c:	2801      	cmp	r0, #1
    4c5e:	d015      	beq.n	4c8c <usart_getdata_xmd+0xb8>
	while (b_run != false) {
    4c60:	2800      	cmp	r0, #0
    4c62:	d009      	beq.n	4c78 <usart_getdata_xmd+0xa4>
		c = (char) usart_getc();
    4c64:	47b8      	blx	r7
		if (error_timeout) { // Test for timeout in usart_getc
    4c66:	782b      	ldrb	r3, [r5, #0]
    4c68:	2b00      	cmp	r3, #0
    4c6a:	d1e8      	bne.n	4c3e <usart_getdata_xmd+0x6a>
		switch (c) {
    4c6c:	23ff      	movs	r3, #255	; 0xff
    4c6e:	4018      	ands	r0, r3
    4c70:	2801      	cmp	r0, #1
    4c72:	d0ec      	beq.n	4c4e <usart_getdata_xmd+0x7a>
    4c74:	2804      	cmp	r0, #4
    4c76:	d00d      	beq.n	4c94 <usart_getdata_xmd+0xc0>
	mode_of_transfer = 0;
    4c78:	2200      	movs	r2, #0
    4c7a:	4b0c      	ldr	r3, [pc, #48]	; (4cac <usart_getdata_xmd+0xd8>)
    4c7c:	701a      	strb	r2, [r3, #0]
	return (true);
    4c7e:	2001      	movs	r0, #1
    4c80:	e7e1      	b.n	4c46 <usart_getdata_xmd+0x72>
				error_timeout = 0;
    4c82:	2200      	movs	r2, #0
    4c84:	4b08      	ldr	r3, [pc, #32]	; (4ca8 <usart_getdata_xmd+0xd4>)
    4c86:	701a      	strb	r2, [r3, #0]
				return (0);
    4c88:	2000      	movs	r0, #0
    4c8a:	e7dc      	b.n	4c46 <usart_getdata_xmd+0x72>
				++sno;
    4c8c:	3401      	adds	r4, #1
    4c8e:	b2e4      	uxtb	r4, r4
				ptr_data += PKTLEN_128;
    4c90:	3680      	adds	r6, #128	; 0x80
    4c92:	e7e7      	b.n	4c64 <usart_getdata_xmd+0x90>
			usart_putc(ACK);
    4c94:	2006      	movs	r0, #6
    4c96:	4b06      	ldr	r3, [pc, #24]	; (4cb0 <usart_getdata_xmd+0xdc>)
    4c98:	4798      	blx	r3
    4c9a:	e7ed      	b.n	4c78 <usart_getdata_xmd+0xa4>
			return (0);
    4c9c:	2000      	movs	r0, #0
    4c9e:	e7d2      	b.n	4c46 <usart_getdata_xmd+0x72>
    4ca0:	00001cb9 	.word	0x00001cb9
    4ca4:	00004cc5 	.word	0x00004cc5
    4ca8:	20000c68 	.word	0x20000c68
    4cac:	20000c69 	.word	0x20000c69
    4cb0:	00004899 	.word	0x00004899
    4cb4:	000048b1 	.word	0x000048b1
    4cb8:	20000bae 	.word	0x20000bae
    4cbc:	000048bd 	.word	0x000048bd
    4cc0:	00004a01 	.word	0x00004a01

00004cc4 <__udivsi3>:
    4cc4:	2200      	movs	r2, #0
    4cc6:	0843      	lsrs	r3, r0, #1
    4cc8:	428b      	cmp	r3, r1
    4cca:	d374      	bcc.n	4db6 <__udivsi3+0xf2>
    4ccc:	0903      	lsrs	r3, r0, #4
    4cce:	428b      	cmp	r3, r1
    4cd0:	d35f      	bcc.n	4d92 <__udivsi3+0xce>
    4cd2:	0a03      	lsrs	r3, r0, #8
    4cd4:	428b      	cmp	r3, r1
    4cd6:	d344      	bcc.n	4d62 <__udivsi3+0x9e>
    4cd8:	0b03      	lsrs	r3, r0, #12
    4cda:	428b      	cmp	r3, r1
    4cdc:	d328      	bcc.n	4d30 <__udivsi3+0x6c>
    4cde:	0c03      	lsrs	r3, r0, #16
    4ce0:	428b      	cmp	r3, r1
    4ce2:	d30d      	bcc.n	4d00 <__udivsi3+0x3c>
    4ce4:	22ff      	movs	r2, #255	; 0xff
    4ce6:	0209      	lsls	r1, r1, #8
    4ce8:	ba12      	rev	r2, r2
    4cea:	0c03      	lsrs	r3, r0, #16
    4cec:	428b      	cmp	r3, r1
    4cee:	d302      	bcc.n	4cf6 <__udivsi3+0x32>
    4cf0:	1212      	asrs	r2, r2, #8
    4cf2:	0209      	lsls	r1, r1, #8
    4cf4:	d065      	beq.n	4dc2 <__udivsi3+0xfe>
    4cf6:	0b03      	lsrs	r3, r0, #12
    4cf8:	428b      	cmp	r3, r1
    4cfa:	d319      	bcc.n	4d30 <__udivsi3+0x6c>
    4cfc:	e000      	b.n	4d00 <__udivsi3+0x3c>
    4cfe:	0a09      	lsrs	r1, r1, #8
    4d00:	0bc3      	lsrs	r3, r0, #15
    4d02:	428b      	cmp	r3, r1
    4d04:	d301      	bcc.n	4d0a <__udivsi3+0x46>
    4d06:	03cb      	lsls	r3, r1, #15
    4d08:	1ac0      	subs	r0, r0, r3
    4d0a:	4152      	adcs	r2, r2
    4d0c:	0b83      	lsrs	r3, r0, #14
    4d0e:	428b      	cmp	r3, r1
    4d10:	d301      	bcc.n	4d16 <__udivsi3+0x52>
    4d12:	038b      	lsls	r3, r1, #14
    4d14:	1ac0      	subs	r0, r0, r3
    4d16:	4152      	adcs	r2, r2
    4d18:	0b43      	lsrs	r3, r0, #13
    4d1a:	428b      	cmp	r3, r1
    4d1c:	d301      	bcc.n	4d22 <__udivsi3+0x5e>
    4d1e:	034b      	lsls	r3, r1, #13
    4d20:	1ac0      	subs	r0, r0, r3
    4d22:	4152      	adcs	r2, r2
    4d24:	0b03      	lsrs	r3, r0, #12
    4d26:	428b      	cmp	r3, r1
    4d28:	d301      	bcc.n	4d2e <__udivsi3+0x6a>
    4d2a:	030b      	lsls	r3, r1, #12
    4d2c:	1ac0      	subs	r0, r0, r3
    4d2e:	4152      	adcs	r2, r2
    4d30:	0ac3      	lsrs	r3, r0, #11
    4d32:	428b      	cmp	r3, r1
    4d34:	d301      	bcc.n	4d3a <__udivsi3+0x76>
    4d36:	02cb      	lsls	r3, r1, #11
    4d38:	1ac0      	subs	r0, r0, r3
    4d3a:	4152      	adcs	r2, r2
    4d3c:	0a83      	lsrs	r3, r0, #10
    4d3e:	428b      	cmp	r3, r1
    4d40:	d301      	bcc.n	4d46 <__udivsi3+0x82>
    4d42:	028b      	lsls	r3, r1, #10
    4d44:	1ac0      	subs	r0, r0, r3
    4d46:	4152      	adcs	r2, r2
    4d48:	0a43      	lsrs	r3, r0, #9
    4d4a:	428b      	cmp	r3, r1
    4d4c:	d301      	bcc.n	4d52 <__udivsi3+0x8e>
    4d4e:	024b      	lsls	r3, r1, #9
    4d50:	1ac0      	subs	r0, r0, r3
    4d52:	4152      	adcs	r2, r2
    4d54:	0a03      	lsrs	r3, r0, #8
    4d56:	428b      	cmp	r3, r1
    4d58:	d301      	bcc.n	4d5e <__udivsi3+0x9a>
    4d5a:	020b      	lsls	r3, r1, #8
    4d5c:	1ac0      	subs	r0, r0, r3
    4d5e:	4152      	adcs	r2, r2
    4d60:	d2cd      	bcs.n	4cfe <__udivsi3+0x3a>
    4d62:	09c3      	lsrs	r3, r0, #7
    4d64:	428b      	cmp	r3, r1
    4d66:	d301      	bcc.n	4d6c <__udivsi3+0xa8>
    4d68:	01cb      	lsls	r3, r1, #7
    4d6a:	1ac0      	subs	r0, r0, r3
    4d6c:	4152      	adcs	r2, r2
    4d6e:	0983      	lsrs	r3, r0, #6
    4d70:	428b      	cmp	r3, r1
    4d72:	d301      	bcc.n	4d78 <__udivsi3+0xb4>
    4d74:	018b      	lsls	r3, r1, #6
    4d76:	1ac0      	subs	r0, r0, r3
    4d78:	4152      	adcs	r2, r2
    4d7a:	0943      	lsrs	r3, r0, #5
    4d7c:	428b      	cmp	r3, r1
    4d7e:	d301      	bcc.n	4d84 <__udivsi3+0xc0>
    4d80:	014b      	lsls	r3, r1, #5
    4d82:	1ac0      	subs	r0, r0, r3
    4d84:	4152      	adcs	r2, r2
    4d86:	0903      	lsrs	r3, r0, #4
    4d88:	428b      	cmp	r3, r1
    4d8a:	d301      	bcc.n	4d90 <__udivsi3+0xcc>
    4d8c:	010b      	lsls	r3, r1, #4
    4d8e:	1ac0      	subs	r0, r0, r3
    4d90:	4152      	adcs	r2, r2
    4d92:	08c3      	lsrs	r3, r0, #3
    4d94:	428b      	cmp	r3, r1
    4d96:	d301      	bcc.n	4d9c <__udivsi3+0xd8>
    4d98:	00cb      	lsls	r3, r1, #3
    4d9a:	1ac0      	subs	r0, r0, r3
    4d9c:	4152      	adcs	r2, r2
    4d9e:	0883      	lsrs	r3, r0, #2
    4da0:	428b      	cmp	r3, r1
    4da2:	d301      	bcc.n	4da8 <__udivsi3+0xe4>
    4da4:	008b      	lsls	r3, r1, #2
    4da6:	1ac0      	subs	r0, r0, r3
    4da8:	4152      	adcs	r2, r2
    4daa:	0843      	lsrs	r3, r0, #1
    4dac:	428b      	cmp	r3, r1
    4dae:	d301      	bcc.n	4db4 <__udivsi3+0xf0>
    4db0:	004b      	lsls	r3, r1, #1
    4db2:	1ac0      	subs	r0, r0, r3
    4db4:	4152      	adcs	r2, r2
    4db6:	1a41      	subs	r1, r0, r1
    4db8:	d200      	bcs.n	4dbc <__udivsi3+0xf8>
    4dba:	4601      	mov	r1, r0
    4dbc:	4152      	adcs	r2, r2
    4dbe:	4610      	mov	r0, r2
    4dc0:	4770      	bx	lr
    4dc2:	e7ff      	b.n	4dc4 <__udivsi3+0x100>
    4dc4:	b501      	push	{r0, lr}
    4dc6:	2000      	movs	r0, #0
    4dc8:	f000 f8f0 	bl	4fac <__aeabi_idiv0>
    4dcc:	bd02      	pop	{r1, pc}
    4dce:	46c0      	nop			; (mov r8, r8)

00004dd0 <__aeabi_uidivmod>:
    4dd0:	2900      	cmp	r1, #0
    4dd2:	d0f7      	beq.n	4dc4 <__udivsi3+0x100>
    4dd4:	e776      	b.n	4cc4 <__udivsi3>
    4dd6:	4770      	bx	lr

00004dd8 <__divsi3>:
    4dd8:	4603      	mov	r3, r0
    4dda:	430b      	orrs	r3, r1
    4ddc:	d47f      	bmi.n	4ede <__divsi3+0x106>
    4dde:	2200      	movs	r2, #0
    4de0:	0843      	lsrs	r3, r0, #1
    4de2:	428b      	cmp	r3, r1
    4de4:	d374      	bcc.n	4ed0 <__divsi3+0xf8>
    4de6:	0903      	lsrs	r3, r0, #4
    4de8:	428b      	cmp	r3, r1
    4dea:	d35f      	bcc.n	4eac <__divsi3+0xd4>
    4dec:	0a03      	lsrs	r3, r0, #8
    4dee:	428b      	cmp	r3, r1
    4df0:	d344      	bcc.n	4e7c <__divsi3+0xa4>
    4df2:	0b03      	lsrs	r3, r0, #12
    4df4:	428b      	cmp	r3, r1
    4df6:	d328      	bcc.n	4e4a <__divsi3+0x72>
    4df8:	0c03      	lsrs	r3, r0, #16
    4dfa:	428b      	cmp	r3, r1
    4dfc:	d30d      	bcc.n	4e1a <__divsi3+0x42>
    4dfe:	22ff      	movs	r2, #255	; 0xff
    4e00:	0209      	lsls	r1, r1, #8
    4e02:	ba12      	rev	r2, r2
    4e04:	0c03      	lsrs	r3, r0, #16
    4e06:	428b      	cmp	r3, r1
    4e08:	d302      	bcc.n	4e10 <__divsi3+0x38>
    4e0a:	1212      	asrs	r2, r2, #8
    4e0c:	0209      	lsls	r1, r1, #8
    4e0e:	d065      	beq.n	4edc <__divsi3+0x104>
    4e10:	0b03      	lsrs	r3, r0, #12
    4e12:	428b      	cmp	r3, r1
    4e14:	d319      	bcc.n	4e4a <__divsi3+0x72>
    4e16:	e000      	b.n	4e1a <__divsi3+0x42>
    4e18:	0a09      	lsrs	r1, r1, #8
    4e1a:	0bc3      	lsrs	r3, r0, #15
    4e1c:	428b      	cmp	r3, r1
    4e1e:	d301      	bcc.n	4e24 <__divsi3+0x4c>
    4e20:	03cb      	lsls	r3, r1, #15
    4e22:	1ac0      	subs	r0, r0, r3
    4e24:	4152      	adcs	r2, r2
    4e26:	0b83      	lsrs	r3, r0, #14
    4e28:	428b      	cmp	r3, r1
    4e2a:	d301      	bcc.n	4e30 <__divsi3+0x58>
    4e2c:	038b      	lsls	r3, r1, #14
    4e2e:	1ac0      	subs	r0, r0, r3
    4e30:	4152      	adcs	r2, r2
    4e32:	0b43      	lsrs	r3, r0, #13
    4e34:	428b      	cmp	r3, r1
    4e36:	d301      	bcc.n	4e3c <__divsi3+0x64>
    4e38:	034b      	lsls	r3, r1, #13
    4e3a:	1ac0      	subs	r0, r0, r3
    4e3c:	4152      	adcs	r2, r2
    4e3e:	0b03      	lsrs	r3, r0, #12
    4e40:	428b      	cmp	r3, r1
    4e42:	d301      	bcc.n	4e48 <__divsi3+0x70>
    4e44:	030b      	lsls	r3, r1, #12
    4e46:	1ac0      	subs	r0, r0, r3
    4e48:	4152      	adcs	r2, r2
    4e4a:	0ac3      	lsrs	r3, r0, #11
    4e4c:	428b      	cmp	r3, r1
    4e4e:	d301      	bcc.n	4e54 <__divsi3+0x7c>
    4e50:	02cb      	lsls	r3, r1, #11
    4e52:	1ac0      	subs	r0, r0, r3
    4e54:	4152      	adcs	r2, r2
    4e56:	0a83      	lsrs	r3, r0, #10
    4e58:	428b      	cmp	r3, r1
    4e5a:	d301      	bcc.n	4e60 <__divsi3+0x88>
    4e5c:	028b      	lsls	r3, r1, #10
    4e5e:	1ac0      	subs	r0, r0, r3
    4e60:	4152      	adcs	r2, r2
    4e62:	0a43      	lsrs	r3, r0, #9
    4e64:	428b      	cmp	r3, r1
    4e66:	d301      	bcc.n	4e6c <__divsi3+0x94>
    4e68:	024b      	lsls	r3, r1, #9
    4e6a:	1ac0      	subs	r0, r0, r3
    4e6c:	4152      	adcs	r2, r2
    4e6e:	0a03      	lsrs	r3, r0, #8
    4e70:	428b      	cmp	r3, r1
    4e72:	d301      	bcc.n	4e78 <__divsi3+0xa0>
    4e74:	020b      	lsls	r3, r1, #8
    4e76:	1ac0      	subs	r0, r0, r3
    4e78:	4152      	adcs	r2, r2
    4e7a:	d2cd      	bcs.n	4e18 <__divsi3+0x40>
    4e7c:	09c3      	lsrs	r3, r0, #7
    4e7e:	428b      	cmp	r3, r1
    4e80:	d301      	bcc.n	4e86 <__divsi3+0xae>
    4e82:	01cb      	lsls	r3, r1, #7
    4e84:	1ac0      	subs	r0, r0, r3
    4e86:	4152      	adcs	r2, r2
    4e88:	0983      	lsrs	r3, r0, #6
    4e8a:	428b      	cmp	r3, r1
    4e8c:	d301      	bcc.n	4e92 <__divsi3+0xba>
    4e8e:	018b      	lsls	r3, r1, #6
    4e90:	1ac0      	subs	r0, r0, r3
    4e92:	4152      	adcs	r2, r2
    4e94:	0943      	lsrs	r3, r0, #5
    4e96:	428b      	cmp	r3, r1
    4e98:	d301      	bcc.n	4e9e <__divsi3+0xc6>
    4e9a:	014b      	lsls	r3, r1, #5
    4e9c:	1ac0      	subs	r0, r0, r3
    4e9e:	4152      	adcs	r2, r2
    4ea0:	0903      	lsrs	r3, r0, #4
    4ea2:	428b      	cmp	r3, r1
    4ea4:	d301      	bcc.n	4eaa <__divsi3+0xd2>
    4ea6:	010b      	lsls	r3, r1, #4
    4ea8:	1ac0      	subs	r0, r0, r3
    4eaa:	4152      	adcs	r2, r2
    4eac:	08c3      	lsrs	r3, r0, #3
    4eae:	428b      	cmp	r3, r1
    4eb0:	d301      	bcc.n	4eb6 <__divsi3+0xde>
    4eb2:	00cb      	lsls	r3, r1, #3
    4eb4:	1ac0      	subs	r0, r0, r3
    4eb6:	4152      	adcs	r2, r2
    4eb8:	0883      	lsrs	r3, r0, #2
    4eba:	428b      	cmp	r3, r1
    4ebc:	d301      	bcc.n	4ec2 <__divsi3+0xea>
    4ebe:	008b      	lsls	r3, r1, #2
    4ec0:	1ac0      	subs	r0, r0, r3
    4ec2:	4152      	adcs	r2, r2
    4ec4:	0843      	lsrs	r3, r0, #1
    4ec6:	428b      	cmp	r3, r1
    4ec8:	d301      	bcc.n	4ece <__divsi3+0xf6>
    4eca:	004b      	lsls	r3, r1, #1
    4ecc:	1ac0      	subs	r0, r0, r3
    4ece:	4152      	adcs	r2, r2
    4ed0:	1a41      	subs	r1, r0, r1
    4ed2:	d200      	bcs.n	4ed6 <__divsi3+0xfe>
    4ed4:	4601      	mov	r1, r0
    4ed6:	4152      	adcs	r2, r2
    4ed8:	4610      	mov	r0, r2
    4eda:	4770      	bx	lr
    4edc:	e05d      	b.n	4f9a <__divsi3+0x1c2>
    4ede:	0fca      	lsrs	r2, r1, #31
    4ee0:	d000      	beq.n	4ee4 <__divsi3+0x10c>
    4ee2:	4249      	negs	r1, r1
    4ee4:	1003      	asrs	r3, r0, #32
    4ee6:	d300      	bcc.n	4eea <__divsi3+0x112>
    4ee8:	4240      	negs	r0, r0
    4eea:	4053      	eors	r3, r2
    4eec:	2200      	movs	r2, #0
    4eee:	469c      	mov	ip, r3
    4ef0:	0903      	lsrs	r3, r0, #4
    4ef2:	428b      	cmp	r3, r1
    4ef4:	d32d      	bcc.n	4f52 <__divsi3+0x17a>
    4ef6:	0a03      	lsrs	r3, r0, #8
    4ef8:	428b      	cmp	r3, r1
    4efa:	d312      	bcc.n	4f22 <__divsi3+0x14a>
    4efc:	22fc      	movs	r2, #252	; 0xfc
    4efe:	0189      	lsls	r1, r1, #6
    4f00:	ba12      	rev	r2, r2
    4f02:	0a03      	lsrs	r3, r0, #8
    4f04:	428b      	cmp	r3, r1
    4f06:	d30c      	bcc.n	4f22 <__divsi3+0x14a>
    4f08:	0189      	lsls	r1, r1, #6
    4f0a:	1192      	asrs	r2, r2, #6
    4f0c:	428b      	cmp	r3, r1
    4f0e:	d308      	bcc.n	4f22 <__divsi3+0x14a>
    4f10:	0189      	lsls	r1, r1, #6
    4f12:	1192      	asrs	r2, r2, #6
    4f14:	428b      	cmp	r3, r1
    4f16:	d304      	bcc.n	4f22 <__divsi3+0x14a>
    4f18:	0189      	lsls	r1, r1, #6
    4f1a:	d03a      	beq.n	4f92 <__divsi3+0x1ba>
    4f1c:	1192      	asrs	r2, r2, #6
    4f1e:	e000      	b.n	4f22 <__divsi3+0x14a>
    4f20:	0989      	lsrs	r1, r1, #6
    4f22:	09c3      	lsrs	r3, r0, #7
    4f24:	428b      	cmp	r3, r1
    4f26:	d301      	bcc.n	4f2c <__divsi3+0x154>
    4f28:	01cb      	lsls	r3, r1, #7
    4f2a:	1ac0      	subs	r0, r0, r3
    4f2c:	4152      	adcs	r2, r2
    4f2e:	0983      	lsrs	r3, r0, #6
    4f30:	428b      	cmp	r3, r1
    4f32:	d301      	bcc.n	4f38 <__divsi3+0x160>
    4f34:	018b      	lsls	r3, r1, #6
    4f36:	1ac0      	subs	r0, r0, r3
    4f38:	4152      	adcs	r2, r2
    4f3a:	0943      	lsrs	r3, r0, #5
    4f3c:	428b      	cmp	r3, r1
    4f3e:	d301      	bcc.n	4f44 <__divsi3+0x16c>
    4f40:	014b      	lsls	r3, r1, #5
    4f42:	1ac0      	subs	r0, r0, r3
    4f44:	4152      	adcs	r2, r2
    4f46:	0903      	lsrs	r3, r0, #4
    4f48:	428b      	cmp	r3, r1
    4f4a:	d301      	bcc.n	4f50 <__divsi3+0x178>
    4f4c:	010b      	lsls	r3, r1, #4
    4f4e:	1ac0      	subs	r0, r0, r3
    4f50:	4152      	adcs	r2, r2
    4f52:	08c3      	lsrs	r3, r0, #3
    4f54:	428b      	cmp	r3, r1
    4f56:	d301      	bcc.n	4f5c <__divsi3+0x184>
    4f58:	00cb      	lsls	r3, r1, #3
    4f5a:	1ac0      	subs	r0, r0, r3
    4f5c:	4152      	adcs	r2, r2
    4f5e:	0883      	lsrs	r3, r0, #2
    4f60:	428b      	cmp	r3, r1
    4f62:	d301      	bcc.n	4f68 <__divsi3+0x190>
    4f64:	008b      	lsls	r3, r1, #2
    4f66:	1ac0      	subs	r0, r0, r3
    4f68:	4152      	adcs	r2, r2
    4f6a:	d2d9      	bcs.n	4f20 <__divsi3+0x148>
    4f6c:	0843      	lsrs	r3, r0, #1
    4f6e:	428b      	cmp	r3, r1
    4f70:	d301      	bcc.n	4f76 <__divsi3+0x19e>
    4f72:	004b      	lsls	r3, r1, #1
    4f74:	1ac0      	subs	r0, r0, r3
    4f76:	4152      	adcs	r2, r2
    4f78:	1a41      	subs	r1, r0, r1
    4f7a:	d200      	bcs.n	4f7e <__divsi3+0x1a6>
    4f7c:	4601      	mov	r1, r0
    4f7e:	4663      	mov	r3, ip
    4f80:	4152      	adcs	r2, r2
    4f82:	105b      	asrs	r3, r3, #1
    4f84:	4610      	mov	r0, r2
    4f86:	d301      	bcc.n	4f8c <__divsi3+0x1b4>
    4f88:	4240      	negs	r0, r0
    4f8a:	2b00      	cmp	r3, #0
    4f8c:	d500      	bpl.n	4f90 <__divsi3+0x1b8>
    4f8e:	4249      	negs	r1, r1
    4f90:	4770      	bx	lr
    4f92:	4663      	mov	r3, ip
    4f94:	105b      	asrs	r3, r3, #1
    4f96:	d300      	bcc.n	4f9a <__divsi3+0x1c2>
    4f98:	4240      	negs	r0, r0
    4f9a:	b501      	push	{r0, lr}
    4f9c:	2000      	movs	r0, #0
    4f9e:	f000 f805 	bl	4fac <__aeabi_idiv0>
    4fa2:	bd02      	pop	{r1, pc}

00004fa4 <__aeabi_idivmod>:
    4fa4:	2900      	cmp	r1, #0
    4fa6:	d0f8      	beq.n	4f9a <__divsi3+0x1c2>
    4fa8:	e716      	b.n	4dd8 <__divsi3>
    4faa:	4770      	bx	lr

00004fac <__aeabi_idiv0>:
    4fac:	4770      	bx	lr
    4fae:	46c0      	nop			; (mov r8, r8)

00004fb0 <__ctzsi2>:
    4fb0:	4241      	negs	r1, r0
    4fb2:	4008      	ands	r0, r1
    4fb4:	211c      	movs	r1, #28
    4fb6:	2301      	movs	r3, #1
    4fb8:	041b      	lsls	r3, r3, #16
    4fba:	4298      	cmp	r0, r3
    4fbc:	d301      	bcc.n	4fc2 <__ctzsi2+0x12>
    4fbe:	0c00      	lsrs	r0, r0, #16
    4fc0:	3910      	subs	r1, #16
    4fc2:	0a1b      	lsrs	r3, r3, #8
    4fc4:	4298      	cmp	r0, r3
    4fc6:	d301      	bcc.n	4fcc <__ctzsi2+0x1c>
    4fc8:	0a00      	lsrs	r0, r0, #8
    4fca:	3908      	subs	r1, #8
    4fcc:	091b      	lsrs	r3, r3, #4
    4fce:	4298      	cmp	r0, r3
    4fd0:	d301      	bcc.n	4fd6 <__ctzsi2+0x26>
    4fd2:	0900      	lsrs	r0, r0, #4
    4fd4:	3904      	subs	r1, #4
    4fd6:	a202      	add	r2, pc, #8	; (adr r2, 4fe0 <__ctzsi2+0x30>)
    4fd8:	5c10      	ldrb	r0, [r2, r0]
    4fda:	1a40      	subs	r0, r0, r1
    4fdc:	4770      	bx	lr
    4fde:	46c0      	nop			; (mov r8, r8)
    4fe0:	1d1d1c1b 	.word	0x1d1d1c1b
    4fe4:	1e1e1e1e 	.word	0x1e1e1e1e
    4fe8:	1f1f1f1f 	.word	0x1f1f1f1f
    4fec:	1f1f1f1f 	.word	0x1f1f1f1f

00004ff0 <__aeabi_lmul>:
    4ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ff2:	46ce      	mov	lr, r9
    4ff4:	4647      	mov	r7, r8
    4ff6:	0415      	lsls	r5, r2, #16
    4ff8:	0c2d      	lsrs	r5, r5, #16
    4ffa:	002e      	movs	r6, r5
    4ffc:	b580      	push	{r7, lr}
    4ffe:	0407      	lsls	r7, r0, #16
    5000:	0c14      	lsrs	r4, r2, #16
    5002:	0c3f      	lsrs	r7, r7, #16
    5004:	4699      	mov	r9, r3
    5006:	0c03      	lsrs	r3, r0, #16
    5008:	437e      	muls	r6, r7
    500a:	435d      	muls	r5, r3
    500c:	4367      	muls	r7, r4
    500e:	4363      	muls	r3, r4
    5010:	197f      	adds	r7, r7, r5
    5012:	0c34      	lsrs	r4, r6, #16
    5014:	19e4      	adds	r4, r4, r7
    5016:	469c      	mov	ip, r3
    5018:	42a5      	cmp	r5, r4
    501a:	d903      	bls.n	5024 <__aeabi_lmul+0x34>
    501c:	2380      	movs	r3, #128	; 0x80
    501e:	025b      	lsls	r3, r3, #9
    5020:	4698      	mov	r8, r3
    5022:	44c4      	add	ip, r8
    5024:	464b      	mov	r3, r9
    5026:	4351      	muls	r1, r2
    5028:	4343      	muls	r3, r0
    502a:	0436      	lsls	r6, r6, #16
    502c:	0c36      	lsrs	r6, r6, #16
    502e:	0c25      	lsrs	r5, r4, #16
    5030:	0424      	lsls	r4, r4, #16
    5032:	4465      	add	r5, ip
    5034:	19a4      	adds	r4, r4, r6
    5036:	1859      	adds	r1, r3, r1
    5038:	1949      	adds	r1, r1, r5
    503a:	0020      	movs	r0, r4
    503c:	bc0c      	pop	{r2, r3}
    503e:	4690      	mov	r8, r2
    5040:	4699      	mov	r9, r3
    5042:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005044 <__libc_init_array>:
    5044:	b570      	push	{r4, r5, r6, lr}
    5046:	2600      	movs	r6, #0
    5048:	4d0c      	ldr	r5, [pc, #48]	; (507c <__libc_init_array+0x38>)
    504a:	4c0d      	ldr	r4, [pc, #52]	; (5080 <__libc_init_array+0x3c>)
    504c:	1b64      	subs	r4, r4, r5
    504e:	10a4      	asrs	r4, r4, #2
    5050:	42a6      	cmp	r6, r4
    5052:	d109      	bne.n	5068 <__libc_init_array+0x24>
    5054:	2600      	movs	r6, #0
    5056:	f000 f8b5 	bl	51c4 <_init>
    505a:	4d0a      	ldr	r5, [pc, #40]	; (5084 <__libc_init_array+0x40>)
    505c:	4c0a      	ldr	r4, [pc, #40]	; (5088 <__libc_init_array+0x44>)
    505e:	1b64      	subs	r4, r4, r5
    5060:	10a4      	asrs	r4, r4, #2
    5062:	42a6      	cmp	r6, r4
    5064:	d105      	bne.n	5072 <__libc_init_array+0x2e>
    5066:	bd70      	pop	{r4, r5, r6, pc}
    5068:	00b3      	lsls	r3, r6, #2
    506a:	58eb      	ldr	r3, [r5, r3]
    506c:	4798      	blx	r3
    506e:	3601      	adds	r6, #1
    5070:	e7ee      	b.n	5050 <__libc_init_array+0xc>
    5072:	00b3      	lsls	r3, r6, #2
    5074:	58eb      	ldr	r3, [r5, r3]
    5076:	4798      	blx	r3
    5078:	3601      	adds	r6, #1
    507a:	e7f2      	b.n	5062 <__libc_init_array+0x1e>
    507c:	000051d0 	.word	0x000051d0
    5080:	000051d0 	.word	0x000051d0
    5084:	000051d0 	.word	0x000051d0
    5088:	000051d4 	.word	0x000051d4

0000508c <memcpy>:
    508c:	2300      	movs	r3, #0
    508e:	b510      	push	{r4, lr}
    5090:	429a      	cmp	r2, r3
    5092:	d100      	bne.n	5096 <memcpy+0xa>
    5094:	bd10      	pop	{r4, pc}
    5096:	5ccc      	ldrb	r4, [r1, r3]
    5098:	54c4      	strb	r4, [r0, r3]
    509a:	3301      	adds	r3, #1
    509c:	e7f8      	b.n	5090 <memcpy+0x4>

0000509e <memset>:
    509e:	0003      	movs	r3, r0
    50a0:	1882      	adds	r2, r0, r2
    50a2:	4293      	cmp	r3, r2
    50a4:	d100      	bne.n	50a8 <memset+0xa>
    50a6:	4770      	bx	lr
    50a8:	7019      	strb	r1, [r3, #0]
    50aa:	3301      	adds	r3, #1
    50ac:	e7f9      	b.n	50a2 <memset+0x4>
    50ae:	0000      	movs	r0, r0
    50b0:	42000000 	.word	0x42000000
    50b4:	42000400 	.word	0x42000400
    50b8:	42000800 	.word	0x42000800
    50bc:	42000c00 	.word	0x42000c00
    50c0:	42001000 	.word	0x42001000
    50c4:	43000400 	.word	0x43000400
    50c8:	00001cca 	.word	0x00001cca
    50cc:	00001cc6 	.word	0x00001cc6
    50d0:	00001cc6 	.word	0x00001cc6
    50d4:	00001d30 	.word	0x00001d30
    50d8:	00001d30 	.word	0x00001d30
    50dc:	00001ce0 	.word	0x00001ce0
    50e0:	00001cd0 	.word	0x00001cd0
    50e4:	00001ce6 	.word	0x00001ce6
    50e8:	00001d1e 	.word	0x00001d1e
    50ec:	00001eb4 	.word	0x00001eb4
    50f0:	00001e94 	.word	0x00001e94
    50f4:	00001e94 	.word	0x00001e94
    50f8:	00001f40 	.word	0x00001f40
    50fc:	00001ea6 	.word	0x00001ea6
    5100:	00001ec2 	.word	0x00001ec2
    5104:	00001e98 	.word	0x00001e98
    5108:	00001ed0 	.word	0x00001ed0
    510c:	00001f24 	.word	0x00001f24
    5110:	00001f7c 	.word	0x00001f7c
    5114:	00001fbe 	.word	0x00001fbe
    5118:	00001fbe 	.word	0x00001fbe
    511c:	00001fbe 	.word	0x00001fbe
    5120:	00001f6e 	.word	0x00001f6e
    5124:	00001f8a 	.word	0x00001f8a
    5128:	00001f60 	.word	0x00001f60
    512c:	00001f98 	.word	0x00001f98
    5130:	00001fae 	.word	0x00001fae
    5134:	000034a0 	.word	0x000034a0
    5138:	000034ae 	.word	0x000034ae
    513c:	00003548 	.word	0x00003548
    5140:	000035e8 	.word	0x000035e8
    5144:	0000364c 	.word	0x0000364c

00005148 <_usb_device_irq_bits>:
    5148:	00080004 00800070 01000001 00000200     ....p...........

00005158 <_usb_endpoint_irq_bits>:
    5158:	60100c03                                ...`

0000515c <RomBOOT_Version>:
    515c:	36312e32 00000000 00000d0a 00000076     2.16........v...
    516c:	00000020 206e614a 32203131 00313230      ...Jan 11 2021.
    517c:	313a3931 35313a33 00000000 0000003e     19:13:15....>...

0000518c <uart_if>:
    518c:	00004899 000048bd 000048b1 0000490d     .H...H...H...I..
    519c:	0000492d 00004a7d 00004bd5              -I..}J...K..

000051a8 <usbcdc_if>:
    51a8:	00000a3d 00000719 00000639 00000b1d     =.......9.......
    51b8:	000008c5 00000b1d 000008d9              ............

000051c4 <_init>:
    51c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    51c6:	46c0      	nop			; (mov r8, r8)
    51c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    51ca:	bc08      	pop	{r3}
    51cc:	469e      	mov	lr, r3
    51ce:	4770      	bx	lr

000051d0 <__init_array_start>:
    51d0:	000000dd 	.word	0x000000dd

000051d4 <_fini>:
    51d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    51d6:	46c0      	nop			; (mov r8, r8)
    51d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    51da:	bc08      	pop	{r3}
    51dc:	469e      	mov	lr, r3
    51de:	4770      	bx	lr

000051e0 <__fini_array_start>:
    51e0:	000000b5 	.word	0x000000b5
